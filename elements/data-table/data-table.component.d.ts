import { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, QueryList, TemplateRef } from '@angular/core';
import { NovoLabelService } from '../../services/novo-label-service';
import { NovoTemplate } from '../common/novo-template/novo-template.directive';
import { DataTableSource } from './data-table.source';
import { IDataTableColumn, IDataTablePaginationOptions, IDataTablePreferences, IDataTableSearchOptions, IDataTableService } from './interfaces';
import { DataTableState } from './state/data-table-state.service';
import { NovoDataTableCellHeader } from './cell-headers/data-table-header-cell.component';
import { ListInteractionDictionary, ListInteractionEvent } from './ListInteractionTypes';
export declare class NovoDataTable<T> implements AfterContentInit, OnDestroy {
    labels: NovoLabelService;
    private ref;
    state: DataTableState<T>;
    globalSearchHiddenClassToggle: boolean;
    customTemplates: QueryList<NovoTemplate>;
    defaultTemplates: QueryList<NovoTemplate>;
    cellHeaders: QueryList<NovoDataTableCellHeader<T>>;
    novoDataTableContainer: ElementRef;
    resized: EventEmitter<IDataTableColumn<T>>;
    displayedColumns: string[];
    private _disabledColumns;
    paginationOptions: IDataTablePaginationOptions;
    searchOptions: IDataTableSearchOptions;
    defaultSort: {
        id: string;
        value: string;
    };
    name: string;
    allowMultipleFilters: boolean;
    rowIdentifier: string;
    activeRowIdentifier: string;
    trackByFn: (index: any, item: any) => any;
    templates: {
        [key: string]: TemplateRef<any>;
    };
    fixedHeader: boolean;
    paginatorDataFeatureId: string;
    dataTableService: IDataTableService<T>;
    rows: T[];
    outsideFilter: EventEmitter<any>;
    advancedFilter: EventEmitter<any>;
    refreshSubject: EventEmitter<any>;
    columns: IDataTableColumn<T>[];
    customFilter: boolean;
    private _customFilter;
    hasExandedRows: boolean;
    private _hasExandedRows;
    forceShowHeader: boolean;
    private _forceShowHeader;
    hideGlobalSearch: boolean;
    private _hideGlobalSearch;
    preferencesChanged: EventEmitter<IDataTablePreferences>;
    dataSource: DataTableSource<T>;
    loading: boolean;
    columnToTemplate: {
        [key: string]: TemplateRef<any>;
    };
    columnsLoaded: boolean;
    selection: Set<string>;
    scrollLeft: number;
    expandable: boolean;
    private outsideFilterSubscription;
    private advancedFilterSubscription;
    private refreshSubscription;
    private resetSubscription;
    private paginationSubscription;
    private sortFilterSubscription;
    private _columns;
    private scrollListenerHandler;
    private initialized;
    readonly empty: boolean;
    readonly loadingClass: boolean;
    listInteractions: ListInteractionDictionary;
    constructor(labels: NovoLabelService, ref: ChangeDetectorRef, state: DataTableState<T>);
    modifyCellHeaderMultiSelectFilterOptions(column: string, newOptions: {
        value: any;
        label: string;
    }[]): void;
    ngOnDestroy(): void;
    ngAfterContentInit(): void;
    onSearchChange(term: string): void;
    trackColumnsBy(index: number, item: IDataTableColumn<T>): string;
    isDisabled(check: any, row: T): boolean;
    isExpanded(row: T): boolean;
    expandRow(row: T): void;
    expandRows(expand: boolean): void;
    allCurrentRowsExpanded(): boolean;
    isSelected(row: T): boolean;
    selectRow(row: T): void;
    selectRows(selected: boolean): void;
    allCurrentRowsSelected(): boolean;
    private configureLastDisplayedColumn;
    private configureColumns;
    private scrollListener;
    performInteractions(event: ListInteractionEvent): void;
}
