import { ChangeDetectorRef, EventEmitter, OnInit } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { ProgressAppearance } from './Progress';
import * as i0 from "@angular/core";
export declare class NovoProgressBarElement implements ControlValueAccessor, OnInit {
    private ref;
    progress: any;
    private _uniqueId;
    appearance: ProgressAppearance;
    id: string;
    name: string;
    tabindex: number;
    label: string;
    theme: string;
    color: string;
    indeterminate: boolean;
    radius: number;
    circumference: number;
    dashoffset: number;
    striped: boolean;
    animated: boolean;
    get width(): string;
    change: EventEmitter<any>;
    blur: EventEmitter<any>;
    focus: EventEmitter<any>;
    private _percent;
    private _value;
    private _disabled;
    get value(): number;
    set value(value: number);
    get disabled(): boolean;
    set disabled(value: boolean);
    constructor(ref: ChangeDetectorRef, progress: any);
    ngOnInit(): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    private onChangeCallback;
    private onTouchedCallback;
    setDisabledState(disabled: boolean): void;
    isLinear(): boolean;
    isRadial(): boolean;
    static ɵfac: i0.ɵɵFactoryDef<NovoProgressBarElement, [null, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDefWithMeta<NovoProgressBarElement, "novo-progress-bar", never, { "id": "id"; "name": "name"; "tabindex": "tabindex"; "label": "label"; "theme": "theme"; "color": "color"; "indeterminate": "indeterminate"; "striped": "striped"; "animated": "animated"; "value": "value"; "disabled": "disabled"; }, { "change": "change"; "blur": "blur"; "focus": "focus"; }, never, never>;
}
