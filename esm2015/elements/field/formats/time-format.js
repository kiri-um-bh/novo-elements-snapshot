import { ChangeDetectorRef, Directive, ElementRef, EventEmitter, forwardRef, Inject, Input, Optional, Renderer2, } from '@angular/core';
import { COMPOSITION_BUFFER_MODE, NG_VALUE_ACCESSOR } from '@angular/forms';
import { IMaskDirective, IMaskFactory } from 'angular-imask';
import { format, isValid, parse } from 'date-fns';
import * as IMask from 'imask';
import { NovoLabelService } from '../../../services/novo-label-service';
import { NOVO_INPUT_FORMAT } from './base-format';
import * as i0 from "@angular/core";
import * as i1 from "angular-imask";
import * as i2 from "../../../services/novo-label-service";
export const TIMEFORMAT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoTimeFormatDirective),
    multi: true,
};
export var TIME_FORMATS;
(function (TIME_FORMATS) {
    TIME_FORMATS["DATE"] = "date";
    TIME_FORMATS["ISO8601"] = "iso8601";
    TIME_FORMATS["STRING"] = "string";
})(TIME_FORMATS || (TIME_FORMATS = {}));
export class NovoTimeFormatDirective extends IMaskDirective {
    constructor(_element, _renderer, _factory, _compositionMode, labels, cdr) {
        super(_element, _renderer, _factory, _compositionMode);
        this._element = _element;
        this.labels = labels;
        this.cdr = cdr;
        this.valueChange = new EventEmitter();
        this.military = false;
        this.timeFormat = TIME_FORMATS.DATE;
        const pattern = this.military ? 'HH:mm' : 'hh:mm A';
        const amFormat = this.labels.timeFormatAM.toUpperCase();
        const pmFormat = this.labels.timeFormatPM.toUpperCase();
        this.unmask = 'typed';
        this.imask = {
            mask: Date,
            pattern: this.military ? 'HH:mm' : 'hh:mm aa',
            overwrite: true,
            autofix: true,
            lazy: false,
            min: new Date(1970, 0, 1),
            max: new Date(2030, 0, 1),
            prepare: (str) => str.toUpperCase(),
            format: (value) => this.formatValue(value),
            parse: (str) => {
                const time = this.convertTime12to24(str);
                return parse(`${format(Date.now(), 'YYYY-MM-DD')}T${time}`);
            },
            blocks: {
                HH: {
                    mask: IMask.MaskedRange,
                    placeholderChar: '-',
                    maxLength: 2,
                    from: 0,
                    to: 23,
                },
                hh: {
                    mask: IMask.MaskedRange,
                    placeholderChar: '-',
                    maxLength: 2,
                    from: 1,
                    to: 12,
                },
                mm: {
                    mask: IMask.MaskedRange,
                    placeholderChar: '-',
                    maxLength: 2,
                    from: 0,
                    to: 59,
                },
                aa: {
                    mask: IMask.MaskedEnum,
                    placeholderChar: '-',
                    enum: ['AM', 'PM', 'am', 'pm', amFormat, pmFormat],
                },
            },
        };
    }
    _checkInput(event) {
        if (document.activeElement === event.target) {
            const text = event.target.value;
            if ((this.military && Number(text[0]) > 2) || (!this.military && Number(text[0]) > 1)) {
                event.preventDefault();
                const value = `0${text}`;
                event.target.value = value;
                // this.onChange(value);
            }
            if (!this.military) {
                const input = text.substr(5, 4).replace(/\-/g, '').trim().slice(0, 2);
                const timePeriod = this.imask.blocks.aa.enum.find((it) => it[0] === input[0]);
                if (timePeriod) {
                    event.target.value = `${text.slice(0, 5)} ${timePeriod}`;
                }
            }
        }
    }
    _handleBlur(event) {
        const text = event.target.value;
        if (!this.military) {
            const input = text.substr(5, 4).replace(/\-/g, '').trim().slice(0, 2);
            const timePeriod = this.imask.blocks.aa.enum.find((it) => it[0] === input[0]);
            if (!timePeriod) {
                event.target.value = `${text.slice(0, 5)} --`;
            }
        }
    }
    _handleKeydown(event) {
        const input = event.target;
        if (event.key === "Backspace" /* Backspace */ && input.selectionStart === input.value.length) {
            event.target.value = `${input.value.slice(0, 5)} --`;
        }
    }
    normalize(value) {
        if (this.military) {
            return this.convertTime12to24(value);
        }
        return this.convertTime24to12(value);
    }
    formatValue(value) {
        const date = parse(value);
        if (isValid(date)) {
            const pattern = this.military ? 'HH:mm' : 'hh:mm A';
            return format(date, pattern);
        }
        return this.normalize(value);
    }
    formatAsIso(date) {
        if (date && isValid(date)) {
            return format(date, 'HH:mm');
        }
        return null;
    }
    convertTime12to24(time12h) {
        const pmFormat = this.labels.timeFormatPM.toUpperCase();
        const [time, meridian] = time12h.split(' ');
        let [hours, minutes] = time.split(':');
        if (hours === '12') {
            hours = '00';
        }
        if (['PM', pmFormat].includes(meridian)) {
            hours = `${parseInt(hours, 10) + 12}`.padStart(2, '0');
        }
        return `${hours}:${minutes}`;
    }
    convertTime24to12(time24h) {
        if (time24h.length === 5) {
            const date = parse(`2020-01-01T${time24h}`);
            return format(date, 'hh:mm A');
        }
        return time24h;
    }
    writeValue(value) {
        super.writeValue(this.formatValue(value));
    }
    registerOnChange(fn) {
        this.onChange = (date) => {
            let formatted = date;
            switch (this.timeFormat) {
                case TIME_FORMATS.ISO8601:
                    formatted = this.formatAsIso(date);
                    break;
                case TIME_FORMATS.STRING:
                    formatted = this.formatValue(date);
                    break;
                default:
                    formatted = date;
                    break;
            }
            this.valueChange.emit(date);
            fn(formatted);
        };
    }
}
NovoTimeFormatDirective.ɵfac = function NovoTimeFormatDirective_Factory(t) { return new (t || NovoTimeFormatDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.IMaskFactory), i0.ɵɵdirectiveInject(COMPOSITION_BUFFER_MODE, 8), i0.ɵɵdirectiveInject(i2.NovoLabelService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
NovoTimeFormatDirective.ɵdir = i0.ɵɵdefineDirective({ type: NovoTimeFormatDirective, selectors: [["input", "timeFormat", ""]], hostAttrs: [1, "novo-time-format"], hostBindings: function NovoTimeFormatDirective_HostBindings(rf, ctx) { if (rf & 1) {
        i0.ɵɵlistener("input", function NovoTimeFormatDirective_input_HostBindingHandler($event) { return ctx._checkInput($event); })("blur", function NovoTimeFormatDirective_blur_HostBindingHandler($event) { return ctx._handleBlur($event); })("keydown", function NovoTimeFormatDirective_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); });
    } }, inputs: { military: "military", timeFormat: "timeFormat" }, features: [i0.ɵɵProvidersFeature([TIMEFORMAT_VALUE_ACCESSOR, { provide: NOVO_INPUT_FORMAT, useExisting: NovoTimeFormatDirective }]), i0.ɵɵInheritDefinitionFeature] });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(NovoTimeFormatDirective, [{
        type: Directive,
        args: [{
                selector: 'input[timeFormat]',
                host: {
                    class: 'novo-time-format',
                    '(input)': '_checkInput($event)',
                    '(blur)': '_handleBlur($event)',
                    '(keydown)': '_handleKeydown($event)',
                },
                providers: [TIMEFORMAT_VALUE_ACCESSOR, { provide: NOVO_INPUT_FORMAT, useExisting: NovoTimeFormatDirective }],
            }]
    }], function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i1.IMaskFactory }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [COMPOSITION_BUFFER_MODE]
            }] }, { type: i2.NovoLabelService }, { type: i0.ChangeDetectorRef }]; }, { military: [{
            type: Input
        }], timeFormat: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;base64,