import { TemplateRef, forwardRef, EventEmitter, ɵɵdirectiveInject, ElementRef, ɵɵdefineComponent, ɵɵProvidersFeature, ɵsetClassMetadata, Component, Input, Output, ɵɵdefineNgModule, ɵɵdefineInjector, ɵɵsetNgModuleScope, NgModule, Injector, ɵɵelementStart, ɵɵlistener, ɵɵtemplate, ɵɵelementEnd, ɵɵproperty, ɵɵadvance, ɵɵinject, ɵɵdefineInjectable, Injectable, ɵɵelement, ɵɵnextContext, ɵɵsanitizeUrl, ɵɵattribute, ɵɵstyleProp, HostBinding, ɵɵviewQuery, ɵɵqueryRefresh, ɵɵloadQuery, ɵɵprojectionDef, ɵɵprojection, ViewChildren, ɵɵtext, ɵɵtextInterpolate, ɵɵgetCurrentView, ɵɵrestoreView, ɵɵelementContainerStart, ɵɵelementContainerEnd, isDevMode, ComponentFactoryResolver, LOCALE_ID, Optional, Inject, ChangeDetectorRef, ɵɵdefineDirective, Directive, ɵɵpureFunction1, ɵɵclassProp, ɵɵNgOnChangesFeature, ɵɵcontentQuery, ContentChild, ɵɵclassMap, ViewContainerRef, ContentChildren, ɵɵsanitizeHtml, ɵɵtextInterpolate2, ɵɵInheritDefinitionFeature, ɵɵnamespaceSVG, ChangeDetectionStrategy, ViewEncapsulation, InjectionToken, ɵɵtextInterpolate1, ɵɵinvalidFactory, ɵɵhostProperty, ɵɵgetInheritedFactory, NgZone, ViewChild, ɵɵclassMapInterpolate1, HostListener, ɵɵpureFunction5, ɵɵstaticViewQuery, ɵɵpropertyInterpolate, ɵɵreference, ɵɵtemplateRefExtractor, ɵɵpureFunction3, ɵɵpureFunction0, Renderer2, ɵɵclassMapInterpolate2, ɵɵsetComponentScope, ɵɵdefinePipe, Pipe, ɵɵpipe, ɵɵpipeBind2, ɵɵpipeBind3, ɵɵpipeBind4, ɵɵpureFunction2, ɵɵpureFunction7, ɵɵpureFunction4, ɵɵinjectAttribute, Attribute, Self, ɵɵpipeBind1, ɵɵelementContainer, ɵɵpropertyInterpolate1, SkipSelf, QueryList, Host, ɵɵsyntheticHostProperty, ɵɵtextInterpolate3, ɵɵsyntheticHostListener, ɵɵresolveWindow, ɵɵresolveDocument, PLATFORM_ID, ɵɵinjectPipeChangeDetectorRef } from '@angular/core';
import { NG_VALUE_ACCESSOR, Validators, FormControl, FormGroup, FormsModule, DefaultValueAccessor, NgControlStatus, NgModel, COMPOSITION_BUFFER_MODE, NgControl, NgForm, FormGroupDirective, MaxLengthValidator, CheckboxControlValueAccessor, ReactiveFormsModule, ɵangular_packages_forms_forms_y, NgSelectOption, ɵangular_packages_forms_forms_x, NumberValueAccessor, RangeValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatusGroup, RequiredValidator, MinLengthValidator, PatternValidator, CheckboxRequiredValidator, EmailValidator, NgModelGroup, FormBuilder, FormControlName, FormControlDirective, FormGroupName, FormArrayName } from '@angular/forms';
import 'brace/index';
import 'brace/mode/javascript';
import 'brace/theme/chrome';
import 'brace/ext/language_tools.js';
import { CommonModule, NgIf, NgClass, NgForOf, DOCUMENT, NgTemplateOutlet, NgComponentOutlet, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase, AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, TitleCasePipe, CurrencyPipe, DatePipe, I18nPluralPipe, I18nSelectPipe, KeyValuePipe, isPlatformBrowser } from '@angular/common';
import { Subject, from, merge, of, fromEvent, Subscription, ReplaySubject, BehaviorSubject } from 'rxjs';
import { filter, take, first, switchMap, takeUntil, debounceTime, distinctUntilChanged, startWith, map, catchError, mapTo } from 'rxjs/operators';
import { trigger, state, style, transition, animate, group, query, animateChild } from '@angular/animations';
import { ComponentPortal, CdkPortalOutlet, PortalInjector, PortalModule, TemplatePortal, CdkPortal, TemplatePortalDirective, PortalHostDirective } from '@angular/cdk/portal';
import { OverlayConfig, Overlay, OverlayModule, CdkConnectedOverlay, CdkOverlayOrigin, CdkScrollable as CdkScrollable$1, ScrollDispatcher, ViewportRuler, ScrollStrategyOptions, OverlayContainer, FullscreenOverlayContainer } from '@angular/cdk/overlay';
import { DomSanitizer } from '@angular/platform-browser';
import { Router, RouterModule, RouterOutlet, RouterLink, RouterLinkWithHref, RouterLinkActive, ɵangular_packages_router_router_l } from '@angular/router';
import { ActiveDescendantKeyManager, FocusKeyManager, FocusMonitor, A11yModule, FocusTrapFactory, CdkAriaLive, CdkTrapFocus, CdkMonitorFocus } from '@angular/cdk/a11y';
import { coerceBooleanProperty, coerceNumberProperty, _isNumberValue } from '@angular/cdk/coercion';
import { hasModifierKey } from '@angular/cdk/keycodes';
import { __decorate, __metadata } from 'tslib';
import { differenceInDays, addMinutes, endOfDay, startOfDay, isSameSecond, setMinutes, setHours, startOfMinute, isAfter, isBefore, isSameDay, getDay, startOfWeek, addDays, endOfWeek, differenceInSeconds, differenceInMinutes, startOfMonth, endOfMonth, isSameMonth, addHours, parse, startOfToday, addWeeks, addMonths, subMonths, getYear, getMonth, getDate, setYear, setMonth, setDate, addSeconds, format, isValid, endOfToday, differenceInCalendarDays, isWithinRange, isToday, isDate, setMilliseconds, setSeconds, getHours, getMinutes, getSeconds, getMilliseconds, startOfTomorrow } from 'date-fns';
import { listTimeZones, findTimeZone, getZonedTime } from 'timezone-support';
import { formatZonedTime } from 'timezone-support/dist/parse-format';
import { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';
import { CdkObserveContent, ObserversModule } from '@angular/cdk/observers';
import { ScrollingModule, CdkScrollable, CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport } from '@angular/cdk/scrolling';
import { Platform, getSupportedInputTypes } from '@angular/cdk/platform';
import { Directionality, Dir } from '@angular/cdk/bidi';
import { SelectionModel, UniqueSelectionDispatcher } from '@angular/cdk/collections';
import { IMaskDirective, IMaskFactory, IMaskDirectiveModule } from 'angular-imask';
import { MaskedRange, MaskedEnum } from 'imask';
import { AutofillMonitor } from '@angular/cdk/text-field';
import { DataSource, CdkHeaderCell, CdkColumnDef, CdkCell, CdkHeaderRow, CdkCellOutlet, CDK_ROW_TEMPLATE, CdkRow, CdkTableModule, CdkTable, CdkRowDef, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkFooterCell, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn, CdkNoDataRow, NoDataRowOutlet, CDK_TABLE_TEMPLATE } from '@angular/cdk/table';
import { MaskedInputDirective, TextMaskModule } from 'angular2-text-mask';
import createAutoCorrectedDatePipe from 'text-mask-addons/dist/createAutoCorrectedDatePipe';
import * as dragulaImported from '@bullhorn/dragula';
import { CdkAccordion, CdkAccordionItem, CdkAccordionModule } from '@angular/cdk/accordion';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { CdkStepLabel, CdkStepHeader, CdkStep, CdkStepper, CdkStepperModule, CdkStepperNext, CdkStepperPrevious } from '@angular/cdk/stepper';

// @dynamic
class Helpers {
    static isTemplateRef(value) {
        return value instanceof TemplateRef;
    }
    /**
     * Swallows an event to stop further execution
     */
    static swallowEvent(event) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
    }
    static interpolate(str, props) {
        if (typeof str === 'function') {
            return str(props);
        }
        if (this.isDate(props)) {
            props = this.dateToObject(props);
        }
        // else {
        //   props = Object.entries(props).reduce((obj, [key, value]) => {
        //     const res = { ...obj, [key]: value };
        //     if (this.isIsoDate(value as string)) {
        //       res[`${key}Parts`] = this.dateToObject(new Date(value as string));
        //     }
        //     return res;
        //   }, {});
        // }
        return str.replace(/\$([\w\.]+)/g, (original, key) => {
            const keys = key.split('.');
            let value = props[keys.shift()];
            while (keys.length && value !== undefined) {
                const k = keys.shift();
                value = k ? value[k] : `${value}.`;
            }
            return value !== undefined ? value : '';
        });
    }
    static interpolateWithFallback(formatString, data) {
        // Format string can be an array, it will attempt to interpolate each item
        // in the array, if there is a failure to replace it will mark it as such
        // It will either return the first successful replacement of ALL variables,
        // or an empty string
        if (Array.isArray(formatString)) {
            const successes = [];
            const failures = [];
            formatString.forEach((format) => {
                let isSuccess = true;
                const attempt = format.replace(/\$([\w\.]+)/g, (original, key) => {
                    const keys = key.split('.');
                    let value = data[keys.shift()];
                    while (keys.length && value !== undefined) {
                        const k = keys.shift();
                        value = k ? value[k] : `${value}.`;
                    }
                    if (isSuccess && Helpers.isEmpty(value)) {
                        isSuccess = false;
                    }
                    return Helpers.isEmpty(value) ? '' : value;
                });
                if (isSuccess) {
                    successes.push(attempt);
                }
                else {
                    failures.push(attempt);
                }
            });
            if (successes.length !== 0) {
                return successes[0];
            }
            return '';
        }
        else {
            return Helpers.interpolate(formatString, data);
        }
    }
    /**
     * Verifies that an object has every property expected by a string to interpolate
     * @param str   The string to interpolate
     * @param props The params to replace in string.
     */
    static validateInterpolationProps(str, props) {
        if (typeof str === 'function') {
            return true;
        }
        const keys = str.match(/\$([\w\.]+)/g);
        return keys.every((key) => {
            return props.hasOwnProperty(key.substr(1));
        });
    }
    static isObject(item) {
        return item && typeof item === 'object' && !Array.isArray(item) && item !== null;
    }
    /**
     * Checks to see if the object is a string
     */
    static isString(obj) {
        return typeof obj === 'string';
    }
    static escapeString(obj) {
        if (Helpers.isString(obj)) {
            return obj.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
        }
        return obj;
    }
    static isNumber(val, includeNegatives = false) {
        const numberRegex = includeNegatives ? /^-{0,1}\d*\.?\d*$/ : /^\d*\.?\d*$/;
        if (typeof val === 'string') {
            return val.length > 0 && val !== '.' && numberRegex.test(val);
        }
        else {
            return !isNaN(parseFloat(val));
        }
    }
    /**
     * Checks to see if the object is a undefined or null
     */
    static isBlank(obj) {
        return obj === undefined || obj === null;
    }
    /**
     * Checks to see if the object is a undefined or null
     */
    static isEmpty(obj) {
        return Helpers.isBlank(obj) || obj === '' || (Array.isArray(obj) && obj.length === 0);
    }
    /**
     * Checks to see if the object is a function
     */
    static isFunction(obj) {
        return !!(obj && obj.constructor && obj.call && obj.apply);
    }
    /**
     * Checks to see if the object is a Date
     */
    static isDate(obj) {
        return obj instanceof Date;
    }
    static isIsoDate(str) {
        if (!/\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}Z/.test(str)) {
            return false;
        }
        const d = new Date(str);
        return d.toISOString() === str;
    }
    static convertToArray(obj) {
        if (obj === undefined) {
            return [];
        }
        else if (!Array.isArray(obj)) {
            return [obj];
        }
        return obj;
    }
    static sortByField(fields, reverse = false) {
        return (previous, current) => {
            if (Helpers.isFunction(fields)) {
                return fields(reverse ? 'desc' : 'asc', previous, current);
            }
            if (!Array.isArray(fields)) {
                fields = [fields];
            }
            for (let i = 0; i < fields.length; i++) {
                const field = fields[i];
                let first = previous[field] || '';
                let second = current[field] || '';
                if (Helpers.isDate(first) && Helpers.isDate(second)) {
                    // Dates
                    first = first.getTime();
                    second = second.getTime();
                }
                else if (Helpers.isString(first) && Helpers.isString(second)) {
                    // Basic strings
                    first = first.toLowerCase();
                    second = second.toLowerCase();
                }
                else {
                    // Numbers
                    first = isNaN(Number(first)) ? first : Number(first);
                    second = isNaN(Number(second)) ? second : Number(second);
                }
                if (first > second) {
                    return reverse ? -1 : 1;
                }
                else if (first < second) {
                    return reverse ? 1 : -1;
                }
            }
            return 0;
        };
    }
    static filterByField(key, value) {
        return (item) => {
            const results = [];
            let field = can(item).have(key);
            if (value instanceof Function) {
                results.push(value(field, item));
            }
            else if (Array.isArray(value)) {
                results.push(value.includes(field));
            }
            else if (value instanceof Object) {
                if (field instanceof Date) {
                    field = field.getTime();
                }
                if (value.min) {
                    results.push(field >= value.min);
                }
                if (value.max) {
                    results.push(field <= value.max);
                }
                if (value.any && Array.isArray(value.any)) {
                    if (Array.isArray(field)) {
                        results.push(value.any.some((v) => field.includes(v)));
                    }
                    else {
                        results.push(value.any.includes(field));
                    }
                }
                if (value.all && Array.isArray(value.all)) {
                    results.push(value.all.every((v) => field.includes(v)));
                }
                if (value.not) {
                    results.push(!Helpers.filterByField(key, value.not)(item));
                }
                for (const subkey in value) {
                    if (['min', 'max', 'any', 'all', 'not'].indexOf(subkey) < 0) {
                        const subvalue = value[subkey];
                        results.push(Helpers.filterByField(`${key}.${subkey}`, subvalue)(item));
                    }
                }
            }
            else {
                results.push(JSON.stringify(field).match(new RegExp(value, 'gi')));
            }
            return results.every((x) => x);
        };
    }
    static findAncestor(element, selector) {
        while ((element = element.parentElement) && !element.matches.call(element, selector))
            ; // tslint:disable-line
        return element;
    }
    static deepClone(item) {
        if (Array.isArray(item)) {
            const newArr = [];
            for (let i = item.length; i-- > 0;) {
                // tslint:disable-line
                newArr[i] = Helpers.deepClone(item[i]);
            }
            return newArr;
        }
        if (typeof item === 'function' && !/\(\) \{ \[native/.test(item.toString())) {
            let obj;
            for (const k in item) {
                if (k in item) {
                    obj[k] = Helpers.deepClone(item[k]);
                }
            }
            return obj;
        }
        if (item && typeof item === 'object') {
            const obj = {};
            for (const k in item) {
                if (k in item) {
                    obj[k] = Helpers.deepClone(item[k]);
                }
            }
            return obj;
        }
        return item;
    }
    static deepAssign(...objs) {
        if (objs.length < 2) {
            throw new Error('Need two or more objects to merge');
        }
        const target = Object.assign({}, objs[0]);
        for (let i = 1; i < objs.length; i++) {
            const source = Object.assign({}, objs[i]);
            Object.keys(source).forEach((prop) => {
                const value = source[prop];
                if (Helpers.isObject(value)) {
                    if (target.hasOwnProperty(prop) && Helpers.isObject(target[prop])) {
                        target[prop] = Helpers.deepAssign(target[prop], value);
                    }
                    else {
                        target[prop] = value;
                    }
                }
                else if (Array.isArray(value)) {
                    if (target.hasOwnProperty(prop) && Array.isArray(target[prop])) {
                        const targetArray = target[prop];
                        value.forEach((sourceItem, itemIndex) => {
                            if (itemIndex < targetArray.length) {
                                const targetItem = targetArray[itemIndex];
                                if (Object.is(targetItem, sourceItem)) {
                                    return;
                                }
                                if (Helpers.isObject(targetItem) && Helpers.isObject(sourceItem)) {
                                    targetArray[itemIndex] = Helpers.deepAssign(targetItem, sourceItem);
                                }
                                else if (Array.isArray(targetItem) && Array.isArray(sourceItem)) {
                                    targetArray[itemIndex] = Helpers.deepAssign(targetItem, sourceItem);
                                }
                                else {
                                    targetArray[itemIndex] = sourceItem;
                                }
                            }
                            else {
                                targetArray.push(sourceItem);
                            }
                        });
                    }
                    else {
                        target[prop] = value;
                    }
                }
                else {
                    target[prop] = value;
                }
            });
        }
        return target;
    }
    /**
     * Workaround for Edge browser since Element:nextElementSibling is undefined inside of template directives
     * @param element any document element
     * @returns the next sibling node that is of type: Element
     */
    static getNextElementSibling(element) {
        if (element.nextElementSibling) {
            return element.nextElementSibling;
        }
        else {
            let e = element.nextSibling;
            while (e && 1 !== e.nodeType) {
                e = e.nextSibling;
            }
            return e;
        }
    }
    static dateToObject(date) {
        const dateObj = {
            day: '',
            dayPeriod: '',
            era: '',
            hour: '',
            minute: '',
            month: '',
            second: '',
            weekday: '',
            year: '',
        };
        Intl.DateTimeFormat('en-US', {
            day: 'numeric',
            era: 'short',
            hour: 'numeric',
            minute: 'numeric',
            month: 'numeric',
            second: 'numeric',
            weekday: 'long',
            year: 'numeric',
        })
            .formatToParts(date)
            .forEach((dateTimeFormatPart) => {
            if (dateTimeFormatPart.type !== 'literal') {
                dateObj[dateTimeFormatPart.type] = dateTimeFormatPart.value;
            }
        });
        return dateObj;
    }
}
class Can {
    constructor(obj) {
        this.obj = obj;
    }
    have(key) {
        const props = key.split('.');
        let item = this.obj;
        for (let i = 0; i < props.length; i++) {
            item = item[props[i]];
            if (this.check(item) === false) {
                return item;
            }
        }
        return item;
    }
    check(thing) {
        return thing !== void 0;
    }
}
function can(obj) {
    return new Can(obj);
}
// Assumes data is already sorted
function binarySearch(item, array, compare) {
    return search(0, array.length - 1);
    function search(min, max) {
        if (min > max) {
            return undefined;
        }
        const guess = min + Math.floor((max - min) / 2);
        const comparison = compare(item, array[guess]);
        if (comparison === 0) {
            return array[guess];
        }
        else if (comparison === -1) {
            return search(min, guess - 1);
        }
        else if (comparison === 1) {
            return search(guess + 1, max);
        }
        else {
            throw new Error(`Input mismatch: ${JSON.stringify(item)} not comparable to ${JSON.stringify(array[guess])}`);
        }
    }
}

// NG2
const ACE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoAceEditor),
    multi: true,
};
class NovoAceEditor {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this._options = {
            showPrintMargin: false,
            displayIndentGuides: true,
        };
        this._theme = 'chrome';
        this._mode = 'javascript';
        this.text = '';
        this.onChange = (_) => { };
        this.onTouched = () => { };
    }
    set theme(theme) {
        this.setTheme(theme);
    }
    set options(options) {
        this.setOptions(options);
    }
    set mode(mode) {
        this.setMode(mode);
    }
    ngOnDestroy() {
        if (this.editor) {
            this.editor.destroy();
        }
    }
    ngOnInit() {
        this.initializeEditor();
        this.initializeOptions();
        this.initializeEvents();
    }
    initializeEditor() {
        const el = this.elementRef.nativeElement;
        this.editor = ace.edit(el);
        this.editor.$blockScrolling = Infinity;
    }
    initializeOptions() {
        this.setOptions(this._options || {});
        this.setTheme(this._theme);
        this.setMode(this._mode);
    }
    initializeEvents() {
        this.editor.on('focus', (event) => this.focus.emit(event));
        this.editor.on('blur', (event) => this.focus.emit(event));
        this.editor.on('change', () => this.updateText());
        this.editor.on('paste', () => this.updateText());
    }
    updateText() {
        const newVal = this.editor.getValue();
        if (newVal === this.oldText) {
            return;
        }
        this.text = newVal;
        this.onChange(newVal);
        this.oldText = newVal;
    }
    setText(text) {
        if (Helpers.isBlank(text)) {
            text = '';
        }
        if (this.text !== text) {
            this.text = text;
            this.editor.setValue(text);
            this.onChange(text);
            this.editor.clearSelection();
        }
    }
    setOptions(options) {
        this._options = options;
        this.editor.setOptions(options || {});
    }
    setTheme(theme) {
        this._theme = theme;
        this.editor.setTheme(`ace/theme/${theme}`);
    }
    setMode(mode) {
        this._mode = mode;
        this.editor.getSession().setMode(`ace/mode/${this._mode}`);
    }
    writeValue(value) {
        this.setText(value);
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
}
NovoAceEditor.ɵfac = function NovoAceEditor_Factory(t) { return new (t || NovoAceEditor)(ɵɵdirectiveInject(ElementRef)); };
NovoAceEditor.ɵcmp = ɵɵdefineComponent({ type: NovoAceEditor, selectors: [["novo-ace-editor"]], inputs: { theme: "theme", options: "options", mode: "mode", name: "name" }, outputs: { blur: "blur", focus: "focus" }, features: [ɵɵProvidersFeature([ACE_VALUE_ACCESSOR])], decls: 0, vars: 0, template: function NovoAceEditor_Template(rf, ctx) { }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoAceEditor, [{
        type: Component,
        args: [{
                selector: 'novo-ace-editor',
                template: '',
                providers: [ACE_VALUE_ACCESSOR],
            }]
    }], function () { return [{ type: ElementRef }]; }, { theme: [{
            type: Input
        }], options: [{
            type: Input
        }], mode: [{
            type: Input
        }], name: [{
            type: Input
        }], blur: [{
            type: Output
        }], focus: [{
            type: Output
        }] }); })();

// NG2
class NovoAceEditorModule {
}
NovoAceEditorModule.ɵmod = ɵɵdefineNgModule({ type: NovoAceEditorModule });
NovoAceEditorModule.ɵinj = ɵɵdefineInjector({ factory: function NovoAceEditorModule_Factory(t) { return new (t || NovoAceEditorModule)(); }, imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoAceEditorModule, { declarations: [NovoAceEditor], imports: [CommonModule], exports: [NovoAceEditor] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoAceEditorModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [NovoAceEditor],
                exports: [NovoAceEditor],
            }]
    }], null, null); })();

class NovoAsideRef {
    constructor(component, params, overlayRef) {
        this.component = component;
        this.params = params;
        this.overlayRef = overlayRef;
        this._beforeClose = new Subject();
        this._afterClosed = new Subject();
    }
    afterClosed() {
        return this._afterClosed.asObservable();
    }
    beforeClose() {
        return this._beforeClose.asObservable();
    }
    close() {
        // Listen for animation 'start' events
        this.componentInstance.animationStateChanged
            .pipe(filter((event) => event.phaseName === 'start'), take(1))
            .subscribe(() => {
            this._beforeClose.next();
            this._beforeClose.complete();
            this.overlayRef.detachBackdrop();
        });
        // Listen for animation 'done' events
        this.componentInstance.animationStateChanged
            .pipe(filter((event) => event.phaseName === 'done' && event.toState === 'leave'), take(1))
            .subscribe(() => {
            this.overlayRef.dispose();
            this._afterClosed.next();
            this._afterClosed.complete();
            // Make sure to also clear the reference to the
            // component instance to avoid memory leaks
            this.componentInstance = null;
        });
        // Start exit animation
        this.componentInstance.startExitAnimation();
    }
}

const slideInOut = trigger('slideInOut', [
    state('void', style({ transform: 'translateX(100%)' })),
    state('enter', style({ transform: 'none' })),
    state('leave', style({ transform: 'translateX(100%)' })),
    transition('* => *', animate('800ms cubic-bezier(0.2, 1, 0.3, 1)')),
]);

function AsideComponent_ng_template_1_Template(rf, ctx) { }
class AsideComponent {
    constructor(injector, asideRef) {
        this.injector = injector;
        this.asideRef = asideRef;
        this.animationStateChanged = new EventEmitter();
        this.animationState = 'enter';
        this.component = new ComponentPortal(asideRef.component, null, injector);
    }
    onAnimationStart(event) {
        this.animationStateChanged.emit(event);
    }
    onAnimationDone(event) {
        this.animationStateChanged.emit(event);
    }
    startExitAnimation() {
        this.animationState = 'leave';
    }
}
AsideComponent.ɵfac = function AsideComponent_Factory(t) { return new (t || AsideComponent)(ɵɵdirectiveInject(Injector), ɵɵdirectiveInject(NovoAsideRef)); };
AsideComponent.ɵcmp = ɵɵdefineComponent({ type: AsideComponent, selectors: [["novo-aside"]], outputs: { animationStateChanged: "animationStateChanged" }, decls: 2, vars: 2, consts: [[1, "aside-panel"], [3, "cdkPortalOutlet"]], template: function AsideComponent_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "div", 0);
        ɵɵlistener("@slideInOut.start", function AsideComponent_Template_div_animation_slideInOut_start_0_listener($event) { return ctx.onAnimationStart($event); })("@slideInOut.done", function AsideComponent_Template_div_animation_slideInOut_done_0_listener($event) { return ctx.onAnimationDone($event); });
        ɵɵtemplate(1, AsideComponent_ng_template_1_Template, 0, 0, "ng-template", 1);
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵproperty("@slideInOut", ctx.animationState);
        ɵɵadvance(1);
        ɵɵproperty("cdkPortalOutlet", ctx.component);
    } }, directives: [CdkPortalOutlet], styles: ["[_nghost-%COMP%]   .aside-panel[_ngcontent-%COMP%]{align-items:stretch;background-color:#fff;display:flex;height:100vh;justify-content:stretch;max-width:540px;min-width:-webkit-min-content;min-width:-moz-min-content;min-width:min-content;padding:0;position:absolute;right:0;top:0;width:50%}"], data: { animation: [slideInOut] } });
/*@__PURE__*/ (function () { ɵsetClassMetadata(AsideComponent, [{
        type: Component,
        args: [{
                selector: 'novo-aside',
                templateUrl: './aside.component.html',
                styleUrls: ['./aside.component.scss'],
                animations: [slideInOut],
            }]
    }], function () { return [{ type: Injector }, { type: NovoAsideRef }]; }, { animationStateChanged: [{
            type: Output
        }] }); })();

const DEFAULT_CONFIG = {
    hasBackdrop: true,
    backdropClass: 'aside-overlay-backdrop',
    panelClass: 'aside-overlay-panel',
};
class NovoAsideService {
    constructor(injector, overlay) {
        this.injector = injector;
        this.overlay = overlay;
    }
    open(component, params = {}) {
        // Override default configuration
        const asideConfig = DEFAULT_CONFIG;
        // Returns an OverlayRef which is a PortalHost
        const overlayRef = this.createOverlay(asideConfig);
        // Instantiate remote control
        const asideRef = new NovoAsideRef(component, params, overlayRef);
        const overlayComponent = this.attachAsideContainer(AsideComponent, overlayRef, asideConfig, asideRef);
        // Pass the instance of the overlay component to the remote control
        asideRef.componentInstance = overlayComponent;
        overlayRef.backdropClick().subscribe(() => asideRef.close());
        return overlayRef;
    }
    createOverlay(config) {
        // const overlayConfig = this.getOverlayConfig(config);
        return this.overlay.create(config);
    }
    attachAsideContainer(component, overlayRef, config, asideRef) {
        const injector = this.createInjector(config, asideRef);
        const containerPortal = new ComponentPortal(component, null, injector);
        const containerRef = overlayRef.attach(containerPortal);
        return containerRef.instance;
    }
    createInjector(config, asideRef) {
        const injectionTokens = new WeakMap();
        injectionTokens.set(NovoAsideRef, asideRef);
        return new PortalInjector(this.injector, injectionTokens);
    }
    getOverlayConfig(config) {
        const positionStrategy = this.overlay.position().global().centerHorizontally().centerVertically();
        const overlayConfig = new OverlayConfig({
            positionStrategy,
            hasBackdrop: config.hasBackdrop,
            backdropClass: config.backdropClass,
            panelClass: config.panelClass,
        });
        return overlayConfig;
    }
}
NovoAsideService.ɵfac = function NovoAsideService_Factory(t) { return new (t || NovoAsideService)(ɵɵinject(Injector), ɵɵinject(Overlay)); };
NovoAsideService.ɵprov = ɵɵdefineInjectable({ token: NovoAsideService, factory: NovoAsideService.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoAsideService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: Injector }, { type: Overlay }]; }, null); })();

class NovoAsideModule {
}
NovoAsideModule.ɵmod = ɵɵdefineNgModule({ type: NovoAsideModule });
NovoAsideModule.ɵinj = ɵɵdefineInjector({ factory: function NovoAsideModule_Factory(t) { return new (t || NovoAsideModule)(); }, providers: [NovoAsideService], imports: [[OverlayModule, PortalModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoAsideModule, { declarations: [AsideComponent], imports: [OverlayModule, PortalModule] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoAsideModule, [{
        type: NgModule,
        args: [{
                imports: [OverlayModule, PortalModule],
                declarations: [AsideComponent],
                providers: [NovoAsideService],
                entryComponents: [AsideComponent],
            }]
    }], null, null); })();

// NG2
function NovoAvatarElement_img_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "img", 1);
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵproperty("src", ctx_r0.src, ɵɵsanitizeUrl);
} }
class NovoAvatarElement {
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
    }
    get background() {
        return `url(${this.source.profileImage})`;
    }
    ngOnInit() {
        let src;
        if ((this.source && this.source !== '') || this.label) {
            if (this.source.profileImage) {
                // this.background = this.source.profileImage;
                return;
            }
            else if (this.source.logo) {
                src = this.source.logo;
            }
            else {
                const first = this.label || this.source.firstName
                    ? this.source.firstName.charAt(0)
                    : this.source.name
                        ? this.source.name.charAt(0)
                        : this.source.username
                            ? this.source.username.charAt(0)
                            : '';
                const last = this.source.lastName ? this.source.lastName.charAt(0) : '';
                // Defining Colors
                const colors = [
                    '#1abc9c',
                    '#16a085',
                    '#f1c40f',
                    '#f39c12',
                    '#2ecc71',
                    '#27ae60',
                    '#e67e22',
                    '#d35400',
                    '#3498db',
                    '#2980b9',
                    '#e74c3c',
                    '#c0392b',
                    '#9b59b6',
                    '#8e44ad',
                    '#bdc3c7',
                    '#34495e',
                    '#2c3e50',
                    '#95a5a6',
                    '#7f8c8d',
                    '#ec87bf',
                    '#d870ad',
                    '#f69785',
                    '#9ba37e',
                    '#b49255',
                    '#b49255',
                    '#a94136',
                ];
                const lighterColors = [
                    '#15D6B0',
                    '#16A069',
                    '#F1D60F',
                    '#F3AC12',
                    '#2ED85B',
                    '#28BC7F',
                    '#E66322',
                    '#D3002B',
                    '#6534DB',
                    '#29B2B9',
                    '#E73C63',
                    '#DB6D31',
                    '#CB48B5',
                    '#6944AD',
                    '#38536D',
                    '#3D6473',
                    '#394A6C',
                    '#92BCB7',
                    '#7D99A2',
                    '#F14F76',
                    '#CB5CDA',
                    '#FFB475',
                    '#B9CE6E',
                    '#DDAA4F',
                    '#CD6F45',
                    '#B9354A',
                ];
                const settings = {
                    // Default settings
                    textColor: '#ffffff',
                    height: 100,
                    width: 100,
                    fontSize: 50,
                    fontWeight: 400,
                    fontFamily: 'HelveticaNeue-Light,Helvetica Neue Light,Helvetica Neue,Helvetica, Arial,Lucida Grande, sans-serif',
                };
                // making the text object
                const colorIndex = Math.floor((first.charCodeAt(0) - 65) % colors.length);
                const cobj = document.createElement('text');
                cobj.setAttribute('text-anchor', 'middle');
                cobj.setAttribute('x', '50%');
                cobj.setAttribute('y', '50%');
                cobj.setAttribute('dy', '0.35em');
                cobj.setAttribute('pointer-events', 'auto');
                cobj.setAttribute('fill', settings.textColor);
                cobj.setAttribute('font-family', settings.fontFamily);
                cobj.style.fontWeight = settings.fontWeight;
                cobj.style.fontSize = `${settings.fontSize}px`;
                const ltrs = document.createTextNode(this.label || first + last);
                cobj.appendChild(ltrs);
                const svg = document.createElement('svg');
                svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');
                svg.setAttribute('pointer-events', 'none');
                svg.setAttribute('width', settings.width);
                svg.setAttribute('height', settings.height);
                // this.setPrefixedValue(svg, 'background', colors[colorIndex]);
                this.setPrefixedValue(svg, 'background', `linear-gradient(-45deg, ${colors[colorIndex]} 0%, ${lighterColors[colorIndex]} 100%)`);
                svg.style.width = `${settings.width}px`;
                svg.style.height = `${settings.height}px`;
                svg.appendChild(cobj);
                const top = document.createElement('div');
                top.appendChild(svg);
                const svgHtml = window.btoa(unescape(encodeURIComponent(top.innerHTML)));
                src = `data:image/svg+xml;base64, ${svgHtml}`;
            }
            this.src = this.sanitizer.bypassSecurityTrustUrl(src);
        }
    }
    setPrefixedValue(elm, prop, value) {
        const prefixes = ['-moz-', '-webkit-', '-o-', '-ms-', '-khtml-'];
        // Clear
        elm.style[prop] = '';
        const starting = elm.style[prop];
        // Try raw first
        try {
            elm.style[prop] = value;
            if (elm.style[prop] !== starting) {
                return;
            }
        }
        catch (e) {
            // no op
        }
        // Try prefixes
        for (let i = 0; i < prefixes.length; ++i) {
            const v = prefixes[i] + value;
            try {
                elm.style[prop] = v;
                if (elm.style[prop] !== starting) {
                    return;
                }
            }
            catch (e2) {
                // no op
            }
        }
    }
}
NovoAvatarElement.ɵfac = function NovoAvatarElement_Factory(t) { return new (t || NovoAvatarElement)(ɵɵdirectiveInject(DomSanitizer)); };
NovoAvatarElement.ɵcmp = ɵɵdefineComponent({ type: NovoAvatarElement, selectors: [["novo-avatar"]], hostVars: 3, hostBindings: function NovoAvatarElement_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵattribute("size", ctx.size);
        ɵɵstyleProp("background-image", ctx.background);
    } }, inputs: { source: "source", label: "label", color: "color", theme: "theme", size: "size" }, decls: 1, vars: 1, consts: [[3, "src", 4, "ngIf"], [3, "src"]], template: function NovoAvatarElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵtemplate(0, NovoAvatarElement_img_0_Template, 1, 1, "img", 0);
    } if (rf & 2) {
        ɵɵproperty("ngIf", ctx.src);
    } }, directives: [NgIf], styles: ["[_nghost-%COMP%]{background-position:50%;background-size:cover;border-radius:2em;display:inline-block;height:30px;overflow:hidden;width:30px}[_nghost-%COMP%]   img[_ngcontent-%COMP%]{border-radius:inherit;height:inherit;width:inherit}[size=small][_nghost-%COMP%]{height:20px;width:20px}[size=large][_nghost-%COMP%]{height:40px;width:40px}"] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoAvatarElement, [{
        type: Component,
        args: [{
                selector: 'novo-avatar',
                styleUrls: ['./Avatar.scss'],
                template: '<img *ngIf="src" [src]="src"/>',
            }]
    }], function () { return [{ type: DomSanitizer }]; }, { source: [{
            type: Input
        }], label: [{
            type: Input
        }], color: [{
            type: Input
        }], theme: [{
            type: Input
        }], size: [{
            type: HostBinding,
            args: ['attr.size']
        }, {
            type: Input
        }], background: [{
            type: HostBinding,
            args: ['style.backgroundImage']
        }] }); })();

// NG2
function NovoAvatarStackElement_novo_avatar_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-avatar", 1);
} }
const _c0 = ["*"];
class NovoAvatarStackElement {
    constructor() {
        this.total = 0;
        this.showTotal = false;
        this.remainingCount = 0;
    }
    ngAfterViewInit() {
        // viewChildren is set
        if (this.total - this.viewChildren.length > 0) {
            this.remainingCount = this.total - this.viewChildren.length;
            this.showTotal = true;
        }
    }
}
NovoAvatarStackElement.ɵfac = function NovoAvatarStackElement_Factory(t) { return new (t || NovoAvatarStackElement)(); };
NovoAvatarStackElement.ɵcmp = ɵɵdefineComponent({ type: NovoAvatarStackElement, selectors: [["novo-avatar-stack"]], viewQuery: function NovoAvatarStackElement_Query(rf, ctx) { if (rf & 1) {
        ɵɵviewQuery(NovoAvatarElement, true);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.viewChildren = _t);
    } }, inputs: { total: "total" }, ngContentSelectors: _c0, decls: 2, vars: 1, consts: [["label", "+5", 4, "ngIf"], ["label", "+5"]], template: function NovoAvatarStackElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵprojection(0);
        ɵɵtemplate(1, NovoAvatarStackElement_novo_avatar_1_Template, 1, 0, "novo-avatar", 0);
    } if (rf & 2) {
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.showTotal);
    } }, directives: [NgIf, NovoAvatarElement], styles: ["@-webkit-keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}[_nghost-%COMP%]{display:inline-flex;flex-flow:row nowrap}[_nghost-%COMP%]  novo-avatar{transition:all .1s ease-in-out}[_nghost-%COMP%]  novo-avatar img{border:1px solid #fff}[_nghost-%COMP%]  novo-avatar+novo-avatar{margin-left:-15px}[_nghost-%COMP%]  novo-avatar:first-child{z-index:5}[_nghost-%COMP%]  novo-avatar:nth-child(2){z-index:4}[_nghost-%COMP%]  novo-avatar:nth-child(3){z-index:3}[_nghost-%COMP%]  novo-avatar:nth-child(4){z-index:2}[_nghost-%COMP%]  novo-avatar:nth-child(5){z-index:1}[_nghost-%COMP%]  novo-avatar:nth-child(n+6){display:none;margin-left:-15px;opacity:0;z-index:0}[_nghost-%COMP%]:hover  novo-avatar{margin-left:0;margin-right:1px}[_nghost-%COMP%]:hover  novo-avatar:nth-child(n+6){display:unset;opacity:1}"] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoAvatarStackElement, [{
        type: Component,
        args: [{
                selector: 'novo-avatar-stack',
                styleUrls: ['./AvatarStack.scss'],
                template: `
    <ng-content></ng-content>
    <novo-avatar *ngIf="showTotal" label="+5"></novo-avatar>
  `,
            }]
    }], null, { total: [{
            type: Input
        }], viewChildren: [{
            type: ViewChildren,
            args: [NovoAvatarElement]
        }] }); })();

// NG2
class NovoAvatarModule {
}
NovoAvatarModule.ɵmod = ɵɵdefineNgModule({ type: NovoAvatarModule });
NovoAvatarModule.ɵinj = ɵɵdefineInjector({ factory: function NovoAvatarModule_Factory(t) { return new (t || NovoAvatarModule)(); }, imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoAvatarModule, { declarations: [NovoAvatarElement, NovoAvatarStackElement], imports: [CommonModule], exports: [NovoAvatarElement, NovoAvatarStackElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoAvatarModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [NovoAvatarElement, NovoAvatarStackElement],
                exports: [NovoAvatarElement, NovoAvatarStackElement],
            }]
    }], null, null); })();

class BreadcrumbService {
    constructor(router) {
        this.router = router;
    }
    navigateTo($event, item) {
        if ($event.button !== 0 || $event.ctrlKey || $event.metaKey || $event.shiftKey) {
            return;
        }
        if (typeof item.target === 'string' && item.target !== '_self') {
            return;
        }
        $event.preventDefault();
        this.router.navigateByUrl(item.link);
    }
}
BreadcrumbService.ɵfac = function BreadcrumbService_Factory(t) { return new (t || BreadcrumbService)(ɵɵinject(Router)); };
BreadcrumbService.ɵprov = ɵɵdefineInjectable({ token: BreadcrumbService, factory: BreadcrumbService.ɵfac });
/*@__PURE__*/ (function () { ɵsetClassMetadata(BreadcrumbService, [{
        type: Injectable
    }], function () { return [{ type: Router }]; }, null); })();

function BreadcrumbElement_ng_container_0_novo_breadcrumb_item_1_a_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "a", 5);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const item_r3 = ɵɵnextContext().$implicit;
    ɵɵproperty("href", item_r3.link, ɵɵsanitizeUrl)("target", item_r3.target ? item_r3.target : "_self");
    ɵɵadvance(1);
    ɵɵtextInterpolate(item_r3.title);
} }
function BreadcrumbElement_ng_container_0_novo_breadcrumb_item_1_a_2_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "a", 6);
    ɵɵlistener("click", function BreadcrumbElement_ng_container_0_novo_breadcrumb_item_1_a_2_Template_a_click_0_listener($event) { ɵɵrestoreView(_r9); const item_r3 = ɵɵnextContext().$implicit; const ctx_r8 = ɵɵnextContext(2); return ctx_r8.navigateTo($event, item_r3); });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const item_r3 = ɵɵnextContext().$implicit;
    ɵɵproperty("target", item_r3.target)("href", item_r3.link, ɵɵsanitizeUrl);
    ɵɵadvance(1);
    ɵɵtextInterpolate(item_r3.title);
} }
function BreadcrumbElement_ng_container_0_novo_breadcrumb_item_1_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const item_r3 = ɵɵnextContext().$implicit;
    ɵɵadvance(1);
    ɵɵtextInterpolate(item_r3.title);
} }
function BreadcrumbElement_ng_container_0_novo_breadcrumb_item_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-breadcrumb-item", 2);
    ɵɵtemplate(1, BreadcrumbElement_ng_container_0_novo_breadcrumb_item_1_a_1_Template, 2, 3, "a", 3);
    ɵɵtemplate(2, BreadcrumbElement_ng_container_0_novo_breadcrumb_item_1_a_2_Template, 2, 3, "a", 4);
    ɵɵtemplate(3, BreadcrumbElement_ng_container_0_novo_breadcrumb_item_1_span_3_Template, 2, 1, "span", 0);
    ɵɵelementEnd();
} if (rf & 2) {
    const item_r3 = ctx.$implicit;
    ɵɵproperty("showMenu", item_r3.showMenu)("isSearch", item_r3.isSearch)("menuList", item_r3.menuList)("customMenuTemplate", item_r3.customMenuTemplate);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !item_r3.noNavigation && (!item_r3.linkType || item_r3.linkType === "hrefLink"));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !item_r3.noNavigation && item_r3.linkType === "routerLink");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", item_r3.noNavigation);
} }
function BreadcrumbElement_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, BreadcrumbElement_ng_container_0_novo_breadcrumb_item_1_Template, 4, 7, "novo-breadcrumb-item", 1);
    ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r0.source);
} }
function BreadcrumbElement_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵprojection(1);
    ɵɵelementContainerEnd();
} }
const _c0$1 = ["*"];
class BreadcrumbElement {
    constructor(breadcrumbService) {
        this.breadcrumbService = breadcrumbService;
        this.source = [];
    }
    navigateTo($event, item) {
        this.breadcrumbService.navigateTo($event, item);
    }
}
BreadcrumbElement.ɵfac = function BreadcrumbElement_Factory(t) { return new (t || BreadcrumbElement)(ɵɵdirectiveInject(BreadcrumbService)); };
BreadcrumbElement.ɵcmp = ɵɵdefineComponent({ type: BreadcrumbElement, selectors: [["novo-breadcrumb"]], inputs: { separatorIcon: "separatorIcon", source: "source" }, ngContentSelectors: _c0$1, decls: 2, vars: 2, consts: [[4, "ngIf"], [3, "showMenu", "isSearch", "menuList", "customMenuTemplate", 4, "ngFor", "ngForOf"], [3, "showMenu", "isSearch", "menuList", "customMenuTemplate"], ["rel", "noopener", 3, "href", "target", 4, "ngIf"], ["rel", "noopener", 3, "target", "href", "click", 4, "ngIf"], ["rel", "noopener", 3, "href", "target"], ["rel", "noopener", 3, "target", "href", "click"]], template: function BreadcrumbElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵtemplate(0, BreadcrumbElement_ng_container_0_Template, 2, 1, "ng-container", 0);
        ɵɵtemplate(1, BreadcrumbElement_ng_container_1_Template, 2, 0, "ng-container", 0);
    } if (rf & 2) {
        ɵɵproperty("ngIf", ctx.source && ctx.source.length);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", !(ctx.source && ctx.source.length));
    } }, styles: ["[_nghost-%COMP%]{align-items:center;display:flex}[_nghost-%COMP%]     novo-breadcrumb-item:last-child .novo-breadcrumb-separator{display:none}"] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(BreadcrumbElement, [{
        type: Component,
        args: [{
                selector: 'novo-breadcrumb',
                templateUrl: './Breadcrumb.html',
                styleUrls: ['./Breadcrumb.scss'],
            }]
    }], function () { return [{ type: BreadcrumbService }]; }, { separatorIcon: [{
            type: Input
        }], source: [{
            type: Input
        }] }); })();

const notifications = {};
function notify(message) {
    if (!isDevMode() || message in notifications) {
        return;
    }
    notifications[message] = true;
    console.warn(message); // tslint:disable-line
}

var AppBridgeHandler;
(function (AppBridgeHandler) {
    AppBridgeHandler[AppBridgeHandler["HTTP"] = 0] = "HTTP";
    AppBridgeHandler[AppBridgeHandler["OPEN"] = 1] = "OPEN";
    AppBridgeHandler[AppBridgeHandler["OPEN_LIST"] = 2] = "OPEN_LIST";
    AppBridgeHandler[AppBridgeHandler["CLOSE"] = 3] = "CLOSE";
    AppBridgeHandler[AppBridgeHandler["REFRESH"] = 4] = "REFRESH";
    AppBridgeHandler[AppBridgeHandler["PIN"] = 5] = "PIN";
    AppBridgeHandler[AppBridgeHandler["REGISTER"] = 6] = "REGISTER";
    AppBridgeHandler[AppBridgeHandler["UPDATE"] = 7] = "UPDATE";
    AppBridgeHandler[AppBridgeHandler["REQUEST_DATA"] = 8] = "REQUEST_DATA";
    AppBridgeHandler[AppBridgeHandler["CALLBACK"] = 9] = "CALLBACK";
})(AppBridgeHandler || (AppBridgeHandler = {}));
const HTTP_VERBS = {
    GET: 'get',
    POST: 'post',
    PUT: 'put',
    DELETE: 'delete',
};
const MESSAGE_TYPES = {
    REGISTER: 'register',
    OPEN: 'open',
    OPEN_LIST: 'openList',
    CLOSE: 'close',
    REFRESH: 'refresh',
    PIN: 'pin',
    UPDATE: 'update',
    HTTP_GET: 'httpGET',
    HTTP_POST: 'httpPOST',
    HTTP_PUT: 'httpPUT',
    HTTP_DELETE: 'httpDELETE',
    CUSTOM_EVENT: 'customEvent',
    REQUEST_DATA: 'requestData',
    CALLBACK: 'callback',
};
class AppBridgeService {
    create(name) {
        return new AppBridge(name);
    }
}
class DevAppBridgeService {
    constructor(http) {
        this.http = http;
    }
    create(name) {
        return new DevAppBridge(name, this.http);
    }
}
class AppBridge {
    // Type?
    constructor(traceName = 'AppBridge') {
        this.id = `${Date.now()}`;
        this._registeredFrames = [];
        this._handlers = {};
        this._tracing = false;
        this._eventListeners = {};
        this.traceName = traceName;
        if (postRobot) {
            postRobot.CONFIG.LOG_LEVEL = 'error';
            try {
                this._setupHandlers();
            }
            catch (error) {
                // No op
            }
        }
    }
    set tracing(tracing) {
        this._tracing = tracing;
    }
    handle(type, handler) {
        this._handlers[type] = handler;
    }
    _trace(eventType, event) {
        if (this._tracing) {
            console.log(`[${this.traceName || this.id}] "${eventType}"`, event); // tslint:disable-line
        }
    }
    _setupHandlers() {
        // Register
        postRobot.on(MESSAGE_TYPES.REGISTER, (event) => {
            this._trace(MESSAGE_TYPES.REGISTER, event);
            this._registeredFrames.push(event);
            return this.register(event.data).then((windowName) => {
                return { windowName };
            });
        });
        // Update
        postRobot.on(MESSAGE_TYPES.UPDATE, (event) => {
            this._trace(MESSAGE_TYPES.UPDATE, event);
            return this.update(event.data).then((success) => {
                return { success };
            });
        });
        // Open
        postRobot.on(MESSAGE_TYPES.OPEN, (event) => {
            this._trace(MESSAGE_TYPES.OPEN, event);
            return this.open(event.data).then((success) => {
                return { success };
            });
        });
        postRobot.on(MESSAGE_TYPES.OPEN_LIST, (event) => {
            this._trace(MESSAGE_TYPES.OPEN_LIST, event);
            return this.openList(event.data).then((success) => {
                return { success };
            });
        });
        // Close
        postRobot.on(MESSAGE_TYPES.CLOSE, (event) => {
            this._trace(MESSAGE_TYPES.CLOSE, event);
            const index = this._registeredFrames.findIndex((frame) => frame.data.id === event.data.id);
            if (index !== -1) {
                this._registeredFrames.splice(index, 1);
            }
            return this.close(event.data).then((success) => {
                return { success };
            });
        });
        // Refresh
        postRobot.on(MESSAGE_TYPES.REFRESH, (event) => {
            this._trace(MESSAGE_TYPES.REFRESH, event);
            return this.refresh(event.data).then((success) => {
                return { success };
            });
        });
        // PIN
        postRobot.on(MESSAGE_TYPES.PIN, (event) => {
            this._trace(MESSAGE_TYPES.PIN, event);
            return this.pin(event.data).then((success) => {
                return { success };
            });
        });
        // REQUEST_DATA
        postRobot.on(MESSAGE_TYPES.REQUEST_DATA, (event) => {
            this._trace(MESSAGE_TYPES.REQUEST_DATA, event);
            return this.requestData(event.data).then((result) => {
                return { data: result.data, error: result.error };
            });
        });
        // CALLBACKS
        postRobot.on(MESSAGE_TYPES.CALLBACK, (event) => {
            this._trace(MESSAGE_TYPES.CALLBACK, event);
            return this.callback(event.data).then((success) => {
                return { success };
            });
        });
        // HTTP-GET
        postRobot.on(MESSAGE_TYPES.HTTP_GET, (event) => {
            this._trace(MESSAGE_TYPES.HTTP_GET, event);
            return this.httpGET(event.data.relativeURL).then((result) => {
                return { data: result.data, error: result.error };
            });
        });
        // HTTP-POST
        postRobot.on(MESSAGE_TYPES.HTTP_POST, (event) => {
            this._trace(MESSAGE_TYPES.HTTP_POST, event);
            return this.httpPOST(event.data.relativeURL, event.data.data).then((result) => {
                return { data: result.data, error: result.error };
            });
        });
        // HTTP-PUT
        postRobot.on(MESSAGE_TYPES.HTTP_PUT, (event) => {
            this._trace(MESSAGE_TYPES.HTTP_PUT, event);
            return this.httpPUT(event.data.relativeURL, event.data.data).then((result) => {
                return { data: result.data, error: result.error };
            });
        });
        // HTTP-DELETE
        postRobot.on(MESSAGE_TYPES.HTTP_DELETE, (event) => {
            this._trace(MESSAGE_TYPES.HTTP_DELETE, event);
            return this.httpDELETE(event.data.relativeURL).then((result) => {
                return { data: result.data, error: result.error };
            });
        });
        // Custom Events
        postRobot.on(MESSAGE_TYPES.CUSTOM_EVENT, (event) => {
            this._trace(MESSAGE_TYPES.CUSTOM_EVENT, event);
            if (this._eventListeners[event.data.event]) {
                this._eventListeners[event.data.event].forEach((listener) => {
                    listener(event.data.data);
                });
            }
            if (this._registeredFrames.length > 0) {
                this._registeredFrames.forEach((frame) => {
                    postRobot.send(frame.source, MESSAGE_TYPES.CUSTOM_EVENT, event.data);
                });
            }
        });
    }
    /**
     * Fires or responds to an open event
     * @param packet any - packet of data to send with the open event
     */
    open(packet) {
        return new Promise((resolve, reject) => {
            if (this._handlers[AppBridgeHandler.OPEN]) {
                this._handlers[AppBridgeHandler.OPEN](packet, (success) => {
                    if (success) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                });
            }
            else {
                Object.assign(packet, { id: this.id, windowName: this.windowName });
                postRobot
                    .sendToParent(MESSAGE_TYPES.OPEN, packet)
                    .then((event) => {
                    this._trace(`${MESSAGE_TYPES.OPEN} (callback)`, event);
                    if (event.data) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                })
                    .catch((err) => {
                    reject(false);
                });
            }
        });
    }
    /**
     * Fires or responds to an openList event
     * @param packet any - packet of data to send with the open event
     */
    openList(packet) {
        return new Promise((resolve, reject) => {
            if (this._handlers[AppBridgeHandler.OPEN_LIST]) {
                this._handlers[AppBridgeHandler.OPEN_LIST](packet, (success) => {
                    if (success) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                });
            }
            else {
                const openListPacket = {};
                Object.assign(openListPacket, { type: 'List', entityType: packet.type, keywords: packet.keywords, criteria: packet.criteria });
                postRobot
                    .sendToParent(MESSAGE_TYPES.OPEN_LIST, packet)
                    .then((event) => {
                    this._trace(`${MESSAGE_TYPES.OPEN_LIST} (callback)`, event);
                    if (event.data) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                })
                    .catch((err) => {
                    reject(false);
                });
            }
        });
    }
    /**
     * Fires or responds to an close event
     * @param packet any - packet of data to send with the close event
     */
    update(packet) {
        return new Promise((resolve, reject) => {
            if (this._handlers[AppBridgeHandler.UPDATE]) {
                this._handlers[AppBridgeHandler.UPDATE](packet, (success) => {
                    if (success) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                });
            }
            else {
                Object.assign(packet, { id: this.id, windowName: this.windowName });
                postRobot
                    .sendToParent(MESSAGE_TYPES.UPDATE, packet)
                    .then((event) => {
                    this._trace(`${MESSAGE_TYPES.UPDATE} (callback)`, event);
                    if (event.data) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                })
                    .catch((err) => {
                    reject(false);
                });
            }
        });
    }
    /**
     * Fires or responds to an close event
     */
    close(packet) {
        return new Promise((resolve, reject) => {
            if (this._handlers[AppBridgeHandler.CLOSE]) {
                this._handlers[AppBridgeHandler.CLOSE](packet, (success) => {
                    if (success) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                });
            }
            else {
                if (packet) {
                    console.info('[AppBridge] - close(packet) is deprecated! Please just use close()!'); // tslint:disable-line
                }
                const realPacket = { id: this.id, windowName: this.windowName };
                postRobot
                    .sendToParent(MESSAGE_TYPES.CLOSE, realPacket)
                    .then((event) => {
                    this._trace(`${MESSAGE_TYPES.CLOSE} (callback)`, event);
                    if (event.data) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                })
                    .catch((err) => {
                    reject(false);
                });
            }
        });
    }
    /**
     * Fires or responds to an close event
     */
    refresh(packet) {
        return new Promise((resolve, reject) => {
            if (this._handlers[AppBridgeHandler.REFRESH]) {
                this._handlers[AppBridgeHandler.REFRESH](packet, (success) => {
                    if (success) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                });
            }
            else {
                if (packet) {
                    console.info('[AppBridge] - refresh(packet) is deprecated! Please just use refresh()!'); // tslint:disable-line
                }
                const realPacket = { id: this.id, windowName: this.windowName };
                postRobot
                    .sendToParent(MESSAGE_TYPES.REFRESH, realPacket)
                    .then((event) => {
                    this._trace(`${MESSAGE_TYPES.REFRESH} (callback)`, event);
                    if (event.data) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                })
                    .catch((err) => {
                    reject(false);
                });
            }
        });
    }
    /**
     * Fires or responds to a pin event
     */
    pin(packet) {
        return new Promise((resolve, reject) => {
            if (this._handlers[AppBridgeHandler.PIN]) {
                this._handlers[AppBridgeHandler.PIN](packet, (success) => {
                    if (success) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                });
            }
            else {
                if (packet) {
                    console.info('[AppBridge] - pin(packet) is deprecated! Please just use pin()!'); // tslint:disable-line
                }
                const realPacket = { id: this.id, windowName: this.windowName };
                postRobot
                    .sendToParent(MESSAGE_TYPES.PIN, realPacket)
                    .then((event) => {
                    this._trace(`${MESSAGE_TYPES.PIN} (callback)`, event);
                    if (event.data) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                })
                    .catch((err) => {
                    reject(false);
                });
            }
        });
    }
    /**
     * Fires or responds to a requestData event
     * @param packet any - packet of data to send with the requestData event
     */
    requestData(packet) {
        return new Promise((resolve, reject) => {
            if (this._handlers[AppBridgeHandler.REQUEST_DATA]) {
                this._handlers[AppBridgeHandler.REQUEST_DATA](packet, (data) => {
                    if (data) {
                        resolve({ data });
                    }
                    else {
                        reject(false);
                    }
                });
            }
            else {
                Object.assign(packet, { id: this.id, windowName: this.windowName });
                postRobot
                    .sendToParent(MESSAGE_TYPES.REQUEST_DATA, packet)
                    .then((event) => {
                    this._trace(`${MESSAGE_TYPES.REQUEST_DATA} (callback)`, event);
                    if (event.data) {
                        resolve({ data: event.data.data });
                    }
                    else {
                        reject(false);
                    }
                })
                    .catch((err) => {
                    reject(false);
                });
            }
        });
    }
    /**
     * Fires a generic callback command
     * @param packet string - key: string, generic: boolean
     */
    callback(packet) {
        return new Promise((resolve, reject) => {
            if (this._handlers[AppBridgeHandler.CALLBACK]) {
                this._handlers[AppBridgeHandler.CALLBACK](packet, (success) => {
                    if (success) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                });
            }
            else {
                Object.assign(packet, { id: this.id, windowName: this.windowName });
                postRobot
                    .sendToParent(MESSAGE_TYPES.CALLBACK, packet)
                    .then((event) => {
                    this._trace(`${MESSAGE_TYPES.CALLBACK} (callback)`, event);
                    if (event.data) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                })
                    .catch((err) => {
                    reject(false);
                });
            }
        });
    }
    /**
     * Fires or responds to an register event
     * @param packet any - packet of data to send with the event
     */
    register(packet = {}) {
        return new Promise((resolve, reject) => {
            if (this._handlers[AppBridgeHandler.REGISTER]) {
                this._handlers[AppBridgeHandler.REGISTER](packet, (windowName) => {
                    if (windowName) {
                        resolve(windowName);
                    }
                    else {
                        resolve(null);
                    }
                });
            }
            else {
                Object.assign(packet, { id: this.id });
                postRobot
                    .sendToParent(MESSAGE_TYPES.REGISTER, packet)
                    .then((event) => {
                    this._trace(`${MESSAGE_TYPES.REGISTER} (callback)`, event);
                    if (event.data) {
                        this.windowName = event.data.windowName;
                        resolve(event.data.windowName);
                    }
                    else {
                        resolve(null);
                    }
                })
                    .catch((err) => {
                    this._trace(`${MESSAGE_TYPES.REGISTER} - FAILED - (no parent)`, err);
                    reject(err);
                });
            }
        });
    }
    /**
     * Fires or responds to an HTTP_GET event
     * @param packet any - packet of data to send with the event
     */
    httpGET(relativeURL) {
        return new Promise((resolve, reject) => {
            if (this._handlers[AppBridgeHandler.HTTP]) {
                this._handlers[AppBridgeHandler.HTTP]({ verb: HTTP_VERBS.GET, relativeURL }, (data, error) => {
                    resolve({ data, error });
                });
            }
            else {
                postRobot
                    .sendToParent(MESSAGE_TYPES.HTTP_GET, { relativeURL })
                    .then((event) => {
                    resolve({ data: event.data.data, error: event.data.error });
                })
                    .catch((err) => {
                    reject(null);
                });
            }
        });
    }
    /**
     * Fires or responds to an HTTP_POST event
     * @param packet any - packet of data to send with the event
     */
    httpPOST(relativeURL, postData) {
        return new Promise((resolve, reject) => {
            if (this._handlers[AppBridgeHandler.HTTP]) {
                this._handlers[AppBridgeHandler.HTTP]({ verb: HTTP_VERBS.POST, relativeURL, data: postData }, (data, error) => {
                    resolve({ data, error });
                });
            }
            else {
                postRobot
                    .sendToParent(MESSAGE_TYPES.HTTP_POST, { relativeURL, data: postData })
                    .then((event) => {
                    resolve({ data: event.data.data, error: event.data.error });
                })
                    .catch((err) => {
                    reject(null);
                });
            }
        });
    }
    /**
     * Fires or responds to an HTTP_PUT event
     * @param packet any - packet of data to send with the event
     */
    httpPUT(relativeURL, putData) {
        return new Promise((resolve, reject) => {
            if (this._handlers[AppBridgeHandler.HTTP]) {
                this._handlers[AppBridgeHandler.HTTP]({ verb: HTTP_VERBS.PUT, relativeURL, data: putData }, (data, error) => {
                    resolve({ data, error });
                });
            }
            else {
                postRobot
                    .sendToParent(MESSAGE_TYPES.HTTP_PUT, { relativeURL, data: putData })
                    .then((event) => {
                    resolve({ data: event.data.data, error: event.data.error });
                })
                    .catch((err) => {
                    reject(null);
                });
            }
        });
    }
    /**
     * Fires or responds to an HTTP_DELETE event
     * @param packet any - packet of data to send with the event
     */
    httpDELETE(relativeURL) {
        return new Promise((resolve, reject) => {
            if (this._handlers[AppBridgeHandler.HTTP]) {
                this._handlers[AppBridgeHandler.HTTP]({ verb: HTTP_VERBS.DELETE, relativeURL }, (data, error) => {
                    resolve({ data, error });
                });
            }
            else {
                postRobot
                    .sendToParent(MESSAGE_TYPES.HTTP_DELETE, { relativeURL })
                    .then((event) => {
                    resolve({ data: event.data.data, error: event.data.error });
                })
                    .catch((err) => {
                    reject(null);
                });
            }
        });
    }
    /**
     * Fires a custom event to anywhere in the application
     * @param event string - event name to fire
     * @param data any - data to be sent along with the event
     */
    fireEvent(event, data) {
        return new Promise((resolve, reject) => {
            postRobot
                .sendToParent(MESSAGE_TYPES.CUSTOM_EVENT, { event, data })
                .then((e) => {
                resolve(e);
            })
                .catch((err) => {
                reject(null);
            });
        });
    }
    /**
     * Fires a custom event to all registered frames
     * @param event string - event name to fire
     * @param data any - data to be sent along with the event
     */
    fireEventToChildren(event, data) {
        if (this._registeredFrames.length > 0) {
            this._registeredFrames.forEach((frame) => {
                postRobot.send(frame.source, MESSAGE_TYPES.CUSTOM_EVENT, {
                    eventType: event,
                    data,
                });
            });
        }
    }
    /**
     * Adds an event listener to a custom event
     * @param event string - event name to listen to
     * @param callback function - callback to be fired when an event is caught
     */
    addEventListener(event, callback) {
        if (!this._eventListeners[event]) {
            this._eventListeners[event] = [];
        }
        this._eventListeners[event].push(callback);
    }
}
class DevAppBridge extends AppBridge {
    constructor(traceName = 'DevAppBridge', http) {
        super(traceName);
        this.http = http;
        const cookie = this.getCookie('UlEncodedIdentity');
        if (cookie && cookie.length) {
            const identity = JSON.parse(decodeURIComponent(cookie));
            const endpoints = identity.sessions.reduce((obj, session) => {
                obj[session.name] = session.value.endpoint;
                return obj;
            }, {});
            this.baseURL = endpoints.rest;
        }
    }
    _setupHandlers() { }
    /**
     * Fires or responds to an HTTP_GET event
     * @param packet any - packet of data to send with the event
     */
    httpGET(relativeURL) {
        return this.http.get(`${this.baseURL}/${relativeURL}`, { withCredentials: true }).toPromise();
    }
    /**
     * Fires or responds to an HTTP_POST event
     * @param packet any - packet of data to send with the event
     */
    httpPOST(relativeURL, postData) {
        return this.http.post(`${this.baseURL}/${relativeURL}`, postData, { withCredentials: true }).toPromise();
    }
    /**
     * Fires or responds to an HTTP_PUT event
     * @param packet any - packet of data to send with the event
     */
    httpPUT(relativeURL, putData) {
        return this.http.put(`${this.baseURL}/${relativeURL}`, putData, { withCredentials: true }).toPromise();
    }
    /**
     * Fires or responds to an HTTP_DELETE event
     * @param packet any - packet of data to send with the event
     */
    httpDELETE(relativeURL) {
        return this.http.delete(`${this.baseURL}/${relativeURL}`, { withCredentials: true }).toPromise();
    }
    getCookie(cname) {
        if (document) {
            const name = `${cname}=`;
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') {
                    c = c.substring(1);
                }
                if (c.indexOf(name) === 0) {
                    return c.substring(name.length, c.length);
                }
            }
        }
        return false;
    }
}

const WEEKEND_DAY_NUMBERS = [0, 6];
const DAYS_IN_WEEK = 7;
const HOURS_IN_DAY = 24;
const MINUTES_IN_HOUR = 60;
var CalendarEventResponse;
(function (CalendarEventResponse) {
    CalendarEventResponse[CalendarEventResponse["Maybe"] = 0] = "Maybe";
    CalendarEventResponse[CalendarEventResponse["Accepted"] = 1] = "Accepted";
    CalendarEventResponse[CalendarEventResponse["Rejected"] = 2] = "Rejected";
})(CalendarEventResponse || (CalendarEventResponse = {}));
function getExcludedDays({ startDate, days, excluded }) {
    if (excluded.length < 1) {
        return 0;
    }
    let day = startDate.getDay();
    let reduce = 0;
    for (let i = 0; i < days; i++) {
        if (day === DAYS_IN_WEEK) {
            day = 0;
        }
        if (excluded.some((e) => e === day)) {
            reduce++;
        }
        day++;
    }
    return reduce;
}
function getWeekViewEventSpan({ event, offset, startOfWeek, excluded, }) {
    const begin = event.start < startOfWeek ? startOfWeek : event.start;
    let span = 1;
    if (event.end) {
        span = differenceInDays(addMinutes(endOfDay(event.end), 1), startOfDay(begin));
    }
    const totalLength = offset + span;
    if (totalLength > DAYS_IN_WEEK) {
        span = DAYS_IN_WEEK - offset;
    }
    return span - getExcludedDays({ startDate: begin, days: span, excluded });
}
function getWeekViewEventOffset({ event, startOfWeek, excluded = [], }) {
    if (event.start < startOfWeek) {
        return 0;
    }
    const distance = differenceInDays(event.start, startOfWeek);
    return distance - getExcludedDays({ startDate: startOfWeek, days: distance, excluded });
}
function isEventIsPeriod({ event, periodStart, periodEnd }) {
    const eventStart = event.start;
    const eventEnd = event.end || event.start;
    if (eventStart > periodStart && eventStart < periodEnd) {
        return true;
    }
    if (eventEnd > periodStart && eventEnd < periodEnd) {
        return true;
    }
    if (eventStart < periodStart && eventEnd > periodEnd) {
        return true;
    }
    if (isSameSecond(eventStart, periodStart) || isSameSecond(eventStart, periodEnd)) {
        return true;
    }
    if (isSameSecond(eventEnd, periodStart) || isSameSecond(eventEnd, periodEnd)) {
        return true;
    }
    return false;
}
function getEventsInPeriod({ events, periodStart, periodEnd }) {
    return events.filter((event) => isEventIsPeriod({ event, periodStart, periodEnd }));
}
function getEventsInTimeRange(events, dayStart, dayEnd) {
    return events.filter((event) => {
        const eventStart = event.start;
        const eventEnd = event.end || eventStart;
        const startOfView = setMinutes(setHours(startOfDay(eventStart), dayStart.hour), dayStart.minute);
        const endOfView = setMinutes(setHours(startOfMinute(eventStart), dayEnd.hour), dayEnd.minute);
        return isAfter(eventEnd, startOfView) && isBefore(eventStart, endOfView);
    });
}
function getWeekDay({ date }) {
    const today = startOfDay(new Date());
    return {
        date,
        isPast: date < today,
        isToday: isSameDay(date, today),
        isFuture: date > today,
        isWeekend: WEEKEND_DAY_NUMBERS.indexOf(getDay(date)) > -1,
    };
}
function getWeekViewHeader({ viewDate, weekStartsOn, excluded = [], }) {
    const start = startOfWeek(viewDate, { weekStartsOn });
    const days = [];
    for (let i = 0; i < DAYS_IN_WEEK; i++) {
        const date = addDays(start, i);
        if (!excluded.some((e) => date.getDay() === e)) {
            days.push(getWeekDay({ date }));
        }
    }
    return days;
}
function getWeekView({ events = [], viewDate, weekStartsOn, excluded = [], hourSegments, segmentHeight, dayStart, dayEnd, }) {
    if (!events) {
        events = [];
    }
    const startOfViewWeek = startOfWeek(viewDate, { weekStartsOn });
    const endOfViewWeek = endOfWeek(viewDate, { weekStartsOn });
    const maxRange = DAYS_IN_WEEK - excluded.length;
    const eventsMapped = getEventsInTimeRange(getEventsInPeriod({ events, periodStart: startOfViewWeek, periodEnd: endOfViewWeek }), dayStart, dayEnd)
        .map((event) => {
        const offset = getWeekViewEventOffset({ event, startOfWeek: startOfViewWeek, excluded });
        const span = 1; // getWeekViewEventSpan({ event, offset, startOfWeek: startOfViewWeek, excluded });
        return { event, offset, span };
    })
        .filter((e) => e.offset < maxRange)
        .filter((e) => e.span > 0)
        .map((entry) => ({
        event: entry.event,
        offset: entry.offset,
        span: entry.span,
        startsBeforeWeek: entry.event.start < startOfViewWeek,
        endsAfterWeek: (entry.event.end || entry.event.start) > endOfViewWeek,
        top: 0,
    }))
        .sort((itemA, itemB) => {
        const startSecondsDiff = differenceInSeconds(itemA.event.start, itemB.event.start);
        if (startSecondsDiff === 0) {
            return differenceInSeconds(itemB.event.end || itemB.event.start, itemA.event.end || itemA.event.start);
        }
        return startSecondsDiff;
    })
        .map((entry) => {
        const startOfView = setMinutes(setHours(startOfDay(entry.event.start), dayStart.hour), dayStart.minute);
        const endOfView = setMinutes(setHours(startOfMinute(endOfDay(entry.event.start)), dayEnd.hour), dayEnd.minute);
        const eventStart = entry.event.start;
        const eventEnd = entry.event.end || eventStart;
        const hourHeightModifier = (hourSegments * segmentHeight) / MINUTES_IN_HOUR;
        if (eventStart > startOfView) {
            entry.top += differenceInMinutes(eventStart, startOfView);
        }
        entry.top *= hourHeightModifier;
        const startsBeforeDay = eventStart < startOfView;
        const endsAfterDay = eventEnd > endOfView;
        const startDate = startsBeforeDay ? startOfView : eventStart;
        const endDate = endsAfterDay ? endOfView : eventEnd;
        let height = differenceInMinutes(endDate, startDate);
        if (!entry.event.end) {
            height = segmentHeight;
        }
        else {
            height *= hourHeightModifier;
        }
        entry.height = height;
        return entry;
    });
    const eventRows = [];
    const allocatedEvents = [];
    eventsMapped.forEach((event, index) => {
        if (allocatedEvents.indexOf(event) === -1) {
            allocatedEvents.push(event);
            const otherRowEvents = eventsMapped.slice(index + 1).filter((nextEvent) => {
                return nextEvent.top === event.top && nextEvent.offset === event.offset;
            });
            if (otherRowEvents.length > 0) {
                const totalEventsForRow = otherRowEvents.length + 1;
                event.span = 1 / totalEventsForRow;
                let nextOffset = event.span + event.offset;
                otherRowEvents.forEach((nextEvent) => {
                    nextEvent.offset = nextOffset;
                    nextEvent.span = event.span;
                    nextOffset = nextEvent.span + nextEvent.offset;
                });
                allocatedEvents.push(...otherRowEvents);
            }
            eventRows.push({
                row: [event, ...otherRowEvents],
            });
        }
    });
    return eventRows;
}
function getMonthView({ events = [], viewDate, weekStartsOn, excluded = [], }) {
    if (!events) {
        events = [];
    }
    const start = startOfWeek(startOfMonth(viewDate), { weekStartsOn });
    const end = endOfWeek(endOfMonth(viewDate), { weekStartsOn });
    const eventsInMonth = getEventsInPeriod({
        events,
        periodStart: start,
        periodEnd: end,
    });
    const days = [];
    for (let i = 0; i < differenceInDays(end, start) + 1; i++) {
        const date = addDays(start, i);
        if (!excluded.some((e) => date.getDay() === e)) {
            const day = getWeekDay({ date });
            const calEvents = getEventsInPeriod({
                events: eventsInMonth,
                periodStart: startOfDay(date),
                periodEnd: endOfDay(date),
            });
            day.inMonth = isSameMonth(date, viewDate);
            day.events = calEvents;
            day.badgeTotal = calEvents.length;
            days.push(day);
        }
    }
    const totalDaysVisibleInWeek = DAYS_IN_WEEK - excluded.length;
    const rows = Math.floor(days.length / totalDaysVisibleInWeek);
    const rowOffsets = [];
    for (let i = 0; i < rows; i++) {
        rowOffsets.push(i * totalDaysVisibleInWeek);
    }
    return {
        rowOffsets,
        totalDaysVisibleInWeek,
        days,
    };
}
function getDayView({ events = [], viewDate, hourSegments, dayStart, dayEnd, eventWidth, segmentHeight }) {
    if (!events) {
        events = [];
    }
    const startOfView = setMinutes(setHours(startOfDay(viewDate), dayStart.hour), dayStart.minute);
    const endOfView = setMinutes(setHours(startOfMinute(endOfDay(viewDate)), dayEnd.hour), dayEnd.minute);
    const previousDayEvents = [];
    const dayViewEvents = getEventsInTimeRange(getEventsInPeriod({
        events: events.filter((event) => !event.allDay),
        periodStart: startOfView,
        periodEnd: endOfView,
    }), dayStart, dayEnd)
        .sort((eventA, eventB) => {
        return eventA.start.valueOf() - eventB.start.valueOf();
    })
        .map((event) => {
        const eventStart = event.start;
        const eventEnd = event.end || eventStart;
        const startsBeforeDay = eventStart < startOfView;
        const endsAfterDay = eventEnd > endOfView;
        const hourHeightModifier = (hourSegments * segmentHeight) / MINUTES_IN_HOUR;
        let top = 0;
        if (eventStart > startOfView) {
            top += differenceInMinutes(eventStart, startOfView);
        }
        top *= hourHeightModifier;
        const startDate = startsBeforeDay ? startOfView : eventStart;
        const endDate = endsAfterDay ? endOfView : eventEnd;
        let height = differenceInMinutes(endDate, startDate);
        if (!event.end) {
            height = segmentHeight;
        }
        else {
            height *= hourHeightModifier;
        }
        const bottom = top + height;
        const overlappingPreviousEvents = previousDayEvents.filter((previousEvent) => {
            const previousEventTop = previousEvent.top;
            const previousEventBottom = previousEvent.top + previousEvent.height;
            if (top < previousEventBottom && previousEventBottom < bottom) {
                return true;
            }
            else if (previousEventTop <= top && bottom <= previousEventBottom) {
                return true;
            }
            return false;
        });
        let left = 0;
        while (overlappingPreviousEvents.some((previousEvent) => previousEvent.left === left)) {
            left += eventWidth;
        }
        const dayEvent = {
            event,
            height,
            width: eventWidth,
            top,
            left,
            startsBeforeDay,
            endsAfterDay,
        };
        if (height > 0) {
            previousDayEvents.push(dayEvent);
        }
        return dayEvent;
    })
        .filter((dayEvent) => dayEvent.height > 0);
    const width = Math.max(...dayViewEvents.map((event) => event.left + event.width));
    const allDayEvents = getEventsInPeriod({
        events: events.filter((event) => event.allDay),
        periodStart: startOfDay(startOfView),
        periodEnd: endOfDay(endOfView),
    });
    return {
        events: dayViewEvents,
        width,
        allDayEvents,
    };
}
function getDayViewHourGrid({ viewDate, hourSegments, dayStart, dayEnd, }) {
    const hours = [];
    const startOfView = setMinutes(setHours(startOfDay(viewDate), dayStart.hour), dayStart.minute);
    const endOfView = setMinutes(setHours(startOfMinute(endOfDay(viewDate)), dayEnd.hour), dayEnd.minute);
    const segmentDuration = MINUTES_IN_HOUR / hourSegments;
    const startOfViewDay = startOfDay(viewDate);
    for (let i = 0; i < HOURS_IN_DAY; i++) {
        const segments = [];
        for (let j = 0; j < hourSegments; j++) {
            const date = addMinutes(addHours(startOfViewDay, i), j * segmentDuration);
            if (date >= startOfView && date < endOfView) {
                segments.push({
                    date,
                    isStart: j === 0,
                });
            }
        }
        if (segments.length > 0) {
            hours.push({ segments });
        }
    }
    return hours;
}

// NG2
class ComponentUtils {
    constructor(componentFactoryResolver) {
        this.componentFactoryResolver = componentFactoryResolver;
    }
    append(ComponentClass, location, providers, onTop) {
        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(ComponentClass);
        const parent = location.injector;
        const index = onTop ? 0 : location.length;
        return location.createComponent(componentFactory, index, Injector.create({ providers, parent }));
    }
}
ComponentUtils.ɵfac = function ComponentUtils_Factory(t) { return new (t || ComponentUtils)(ɵɵinject(ComponentFactoryResolver)); };
ComponentUtils.ɵprov = ɵɵdefineInjectable({ token: ComponentUtils, factory: ComponentUtils.ɵfac });
/*@__PURE__*/ (function () { ɵsetClassMetadata(ComponentUtils, [{
        type: Injectable
    }], function () { return [{ type: ComponentFactoryResolver }]; }, null); })();

/* tslint:disable:quotemark */
/**
 * AUTOGENERATED FILE - DO NOT EDIT
 * Generated by: https://bhsource.bullhorn.com/DEV_WORKSPACE/country-state-parser
 * Last generated on: Tue Feb 26 2019 15:45:12 GMT-0600 (Central Standard Time)
 */
const COUNTRIES = [
    {
        code: 'US',
        id: 1,
        name: 'United States',
        states: [
            {
                code: 'AL',
                name: 'Alabama',
            },
            {
                code: 'AK',
                name: 'Alaska',
            },
            {
                code: 'AZ',
                name: 'Arizona',
            },
            {
                code: 'AR',
                name: 'Arkansas',
            },
            {
                code: 'CA',
                name: 'California',
            },
            {
                code: 'CO',
                name: 'Colorado',
            },
            {
                code: 'CT',
                name: 'Connecticut',
            },
            {
                code: 'DE',
                name: 'Delaware',
            },
            {
                code: 'DC',
                name: 'District Of Columbia',
            },
            {
                code: 'FL',
                name: 'Florida',
            },
            {
                code: 'GA',
                name: 'Georgia',
            },
            {
                code: 'GU',
                name: 'Guam',
            },
            {
                code: 'HI',
                name: 'Hawaii',
            },
            {
                code: 'ID',
                name: 'Idaho',
            },
            {
                code: 'IL',
                name: 'Illinois',
            },
            {
                code: 'IN',
                name: 'Indiana',
            },
            {
                code: 'IA',
                name: 'Iowa',
            },
            {
                code: 'KS',
                name: 'Kansas',
            },
            {
                code: 'KY',
                name: 'Kentucky',
            },
            {
                code: 'LA',
                name: 'Louisiana',
            },
            {
                code: 'ME',
                name: 'Maine',
            },
            {
                code: 'MH',
                name: 'Marshall Islands',
            },
            {
                code: 'MD',
                name: 'Maryland',
            },
            {
                code: 'MA',
                name: 'Massachusetts',
            },
            {
                code: 'MI',
                name: 'Michigan',
            },
            {
                code: 'MN',
                name: 'Minnesota',
            },
            {
                code: 'MS',
                name: 'Mississippi',
            },
            {
                code: 'MO',
                name: 'Missouri',
            },
            {
                code: 'MT',
                name: 'Montana',
            },
            {
                code: 'NE',
                name: 'Nebraska',
            },
            {
                code: 'NV',
                name: 'Nevada',
            },
            {
                code: 'NH',
                name: 'New Hampshire',
            },
            {
                code: 'NJ',
                name: 'New Jersey',
            },
            {
                code: 'NM',
                name: 'New Mexico',
            },
            {
                code: 'NY',
                name: 'New York',
            },
            {
                code: 'NC',
                name: 'North Carolina',
            },
            {
                code: 'ND',
                name: 'North Dakota',
            },
            {
                code: 'MP',
                name: 'Northern Mariana Islands',
            },
            {
                code: 'OH',
                name: 'Ohio',
            },
            {
                code: 'OK',
                name: 'Oklahoma',
            },
            {
                code: 'OR',
                name: 'Oregon',
            },
            {
                code: 'PW',
                name: 'Palau',
            },
            {
                code: 'PA',
                name: 'Pennsylvania',
            },
            {
                code: 'PR',
                name: 'Puerto Rico',
            },
            {
                code: 'RI',
                name: 'Rhode Island',
            },
            {
                code: 'SC',
                name: 'South Carolina',
            },
            {
                code: 'SD',
                name: 'South Dakota',
            },
            {
                code: 'TN',
                name: 'Tennessee',
            },
            {
                code: 'TX',
                name: 'Texas',
            },
            {
                code: 'UT',
                name: 'Utah',
            },
            {
                code: 'VT',
                name: 'Vermont',
            },
            {
                code: 'VI',
                name: 'Virgin Islands',
            },
            {
                code: 'VA',
                name: 'Virginia',
            },
            {
                code: 'WA',
                name: 'Washington',
            },
            {
                code: 'WV',
                name: 'West Virginia',
            },
            {
                code: 'WI',
                name: 'Wisconsin',
            },
            {
                code: 'WY',
                name: 'Wyoming',
            },
        ],
    },
    {
        code: 'UK',
        id: 2359,
        name: 'United Kingdom',
        states: [
            {
                code: 'ABD',
                name: 'Aberdeenshire',
            },
            {
                code: 'ALD',
                name: 'Alderney',
            },
            {
                code: 'ANS',
                name: 'Angus',
            },
            {
                code: 'ANN',
                name: 'Antrim and Newtownabbey',
            },
            {
                code: 'AGB',
                name: 'Argyllshire',
            },
            {
                code: 'ABC',
                name: 'Armagh',
            },
            {
                code: 'EAY',
                name: 'Ayrshire',
            },
            {
                code: 'BLA',
                name: 'Ballymena',
            },
            {
                code: 'BAY',
                name: 'Ballymoney',
            },
            {
                code: 'BNB',
                name: 'Banbridge',
            },
            {
                code: 'BAN',
                name: 'Banffshire',
            },
            {
                code: 'BDF',
                name: 'Bedfordshire',
            },
            {
                code: 'BFS',
                name: 'Belfast',
            },
            {
                code: 'BRK',
                name: 'Berkshire',
            },
            {
                code: 'BGW',
                name: 'Blaenau Gwent',
            },
            {
                code: 'SCB',
                name: 'Borders',
            },
            {
                code: 'BGE',
                name: 'Bridgend',
            },
            {
                code: 'BST',
                name: 'Bristol',
            },
            {
                code: 'BKM',
                name: 'Buckinghamshire',
            },
            {
                code: 'CAY',
                name: 'Caerphilly',
            },
            {
                code: 'CAI',
                name: 'Caithness',
            },
            {
                code: 'CAM',
                name: 'Cambridgeshire',
            },
            {
                code: 'CRF',
                name: 'Cardiff',
            },
            {
                code: 'CMN',
                name: 'Carmarthenshire',
            },
            {
                code: 'CKF',
                name: 'Carrickfergus',
            },
            {
                code: 'CAS',
                name: 'Castlereagh',
            },
            {
                code: 'CGN',
                name: 'Ceredigion',
            },
            {
                code: 'CHE',
                name: 'Cheshire',
            },
            {
                code: 'CLK',
                name: 'Clackmannanshire',
            },
            {
                code: 'CLR',
                name: 'Coleraine',
            },
            {
                code: 'CWY',
                name: 'Conwy',
            },
            {
                code: 'CKT',
                name: 'Cookstown',
            },
            {
                code: 'CON',
                name: 'Cornwall',
            },
            {
                code: 'DUR',
                name: 'County Durham',
            },
            {
                code: 'DRS',
                name: 'County Londonderry',
            },
            {
                code: 'CRA',
                name: 'Craigavon',
            },
            {
                code: 'CMA',
                name: 'Cumbria',
            },
            {
                code: 'DEN',
                name: 'Denbighshire',
            },
            {
                code: 'DBY',
                name: 'Derbyshire',
            },
            {
                code: 'DEV',
                name: 'Devon',
            },
            {
                code: 'DOR',
                name: 'Dorset',
            },
            {
                code: 'EDU',
                name: 'Dumbartonshire',
            },
            {
                code: 'DGY',
                name: 'Dumfries and Galloway',
            },
            {
                code: 'DGN',
                name: 'Dungannon and South Tyrone',
            },
            {
                code: 'ELN',
                name: 'East Lothian',
            },
            {
                code: 'ESX',
                name: 'East Sussex',
            },
            {
                code: 'ERY',
                name: 'East Yorkshire',
            },
            {
                code: 'ESS',
                name: 'Essex',
            },
            {
                code: 'FMO',
                name: 'Fermanagh and Omagh',
            },
            {
                code: 'FIF',
                name: 'Fife',
            },
            {
                code: 'FLN',
                name: 'Flintshire',
            },
            {
                code: 'GLG',
                name: 'Glasgow',
            },
            {
                code: 'GLS',
                name: 'Gloucestershire',
            },
            {
                code: 'LND',
                name: 'Greater London',
            },
            {
                code: 'MAN',
                name: 'Greater Manchester',
            },
            {
                code: 'GSY',
                name: 'Guernsey',
            },
            {
                code: 'GWN',
                name: 'Gwynedd',
            },
            {
                code: 'HAM',
                name: 'Hampshire',
            },
            {
                code: 'HEF',
                name: 'Herefordshire',
            },
            {
                code: 'HRM',
                name: 'Herm',
            },
            {
                code: 'HRT',
                name: 'Hertfordshire',
            },
            {
                code: 'HLD',
                name: 'Highland',
            },
            {
                code: 'INV',
                name: 'Inverness-shire',
            },
            {
                code: 'AGY',
                name: 'Isle of Anglesey',
            },
            {
                code: 'IOM',
                name: 'Isle of Man',
            },
            {
                code: 'IOW',
                name: 'Isle of Wight',
            },
            {
                code: 'JSY',
                name: 'Jersey',
            },
            {
                code: 'KEN',
                name: 'Kent',
            },
            {
                code: 'KCD',
                name: 'Kincardineshire',
            },
            {
                code: 'KKD',
                name: 'Kirkcudbrightshire',
            },
            {
                code: 'LAN',
                name: 'Lancashire',
            },
            {
                code: 'LRN',
                name: 'Larne',
            },
            {
                code: 'LEC',
                name: 'Leicestershire',
            },
            {
                code: 'LMV',
                name: 'Limavady',
            },
            {
                code: 'LIN',
                name: 'Lincolnshire',
            },
            {
                code: 'LBC',
                name: 'Lisburn and Castlereagh',
            },
            {
                code: 'MFT',
                name: 'Magherafelt',
            },
            {
                code: 'MER',
                name: 'Merseyside',
            },
            {
                code: 'MTY',
                name: 'Merthyr Tydfil',
            },
            {
                code: 'MLN',
                name: 'Midlothian',
            },
            {
                code: 'MON',
                name: 'Monmouthshire',
            },
            {
                code: 'MRY',
                name: 'Morayshire',
            },
            {
                code: 'MYL',
                name: 'Moyle',
            },
            {
                code: 'NAI',
                name: 'Nairn',
            },
            {
                code: 'NTL',
                name: 'Neath Port Talbot',
            },
            {
                code: 'NWP',
                name: 'Newport',
            },
            {
                code: 'NMD',
                name: 'Newry, Mourne and Down',
            },
            {
                code: 'NFK',
                name: 'Norfolk',
            },
            {
                code: 'AND',
                name: 'North Down and Ards',
            },
            {
                code: 'NLK',
                name: 'North Lanarkshire',
            },
            {
                code: 'NYK',
                name: 'North Yorkshire',
            },
            {
                code: 'NTH',
                name: 'Northamptonshire',
            },
            {
                code: 'NBL',
                name: 'Northumberland',
            },
            {
                code: 'NTT',
                name: 'Nottinghamshire',
            },
            {
                code: 'OMA',
                name: 'Omagh',
            },
            {
                code: 'ORK',
                name: 'Orkney Islands',
            },
            {
                code: 'OXF',
                name: 'Oxfordshire',
            },
            {
                code: 'PEM',
                name: 'Pembrokeshire',
            },
            {
                code: 'PKN',
                name: 'Perth and Kinross',
            },
            {
                code: 'PER',
                name: 'Perthshire and Kinross',
            },
            {
                code: 'POW',
                name: 'Powys',
            },
            {
                code: 'RCC',
                name: 'Redcar and Cleveland',
            },
            {
                code: 'RFW',
                name: 'Renfrewshire',
            },
            {
                code: 'RCT',
                name: 'Rhondda Cynon Taff',
            },
            {
                code: 'RUT',
                name: 'Rutland',
            },
            {
                code: 'SRK',
                name: 'Sark',
            },
            {
                code: 'ZET',
                name: 'Shetland Islands',
            },
            {
                code: 'SHR',
                name: 'Shropshire',
            },
            {
                code: 'SOM',
                name: 'Somerset',
            },
            {
                code: 'SLK',
                name: 'South Lanarkshire',
            },
            {
                code: 'SYK',
                name: 'South Yorkshire',
            },
            {
                code: 'STS',
                name: 'Staffordshire',
            },
            {
                code: 'STG',
                name: 'Stirlingshire',
            },
            {
                code: 'STR',
                name: 'Strabane',
            },
            {
                code: 'SFK',
                name: 'Suffolk',
            },
            {
                code: 'SRY',
                name: 'Surrey',
            },
            {
                code: 'SSX',
                name: 'Sussex',
            },
            {
                code: 'SUT',
                name: 'Sutherland',
            },
            {
                code: 'SWA',
                name: 'Swansea',
            },
            {
                code: 'TOF',
                name: 'Torfaen',
            },
            {
                code: 'TWR',
                name: 'Tyne and Wear',
            },
            {
                code: 'VGL',
                name: 'Vale of Glamorgan',
            },
            {
                code: 'WAR',
                name: 'Warwickshire',
            },
            {
                code: 'WLN',
                name: 'West Lothian',
            },
            {
                code: 'WMD',
                name: 'West Midlands',
            },
            {
                code: 'WSX',
                name: 'West Sussex',
            },
            {
                code: 'WRY',
                name: 'West Yorkshire',
            },
            {
                code: 'ELS',
                name: 'Western Isles',
            },
            {
                code: 'WIL',
                name: 'Wiltshire',
            },
            {
                code: 'WOR',
                name: 'Worcestershire',
            },
            {
                code: 'WRX',
                name: 'Wrexham',
            },
        ],
    },
    {
        code: 'AF',
        id: 2185,
        name: 'Afghanistan',
        states: [
            {
                code: 'AF01',
                name: 'Badakhshan',
            },
            {
                code: 'AF02',
                name: 'Badghis',
            },
            {
                code: 'AF03',
                name: 'Baghlan',
            },
            {
                code: 'AF30',
                name: 'Balkh',
            },
            {
                code: 'AF05',
                name: 'Bamian',
            },
            {
                code: 'AF41',
                name: 'Daikondi',
            },
            {
                code: 'AF06',
                name: 'Farah',
            },
            {
                code: 'AF07',
                name: 'Faryab',
            },
            {
                code: 'AF08',
                name: 'Ghazni',
            },
            {
                code: 'AF09',
                name: 'Ghowr',
            },
            {
                code: 'AF10',
                name: 'Helmand',
            },
            {
                code: 'AF11',
                name: 'Herat',
            },
            {
                code: 'AF31',
                name: 'Jowzjan',
            },
            {
                code: 'AF13',
                name: 'Kabul',
            },
            {
                code: 'AF23',
                name: 'Kandahar',
            },
            {
                code: 'AF14',
                name: 'Kapisa',
            },
            {
                code: 'AF37',
                name: 'Khowst',
            },
            {
                code: 'AF34',
                name: 'Konar',
            },
            {
                code: 'AF24',
                name: 'Kondoz',
            },
            {
                code: 'AF35',
                name: 'Laghman',
            },
            {
                code: 'AF17',
                name: 'Lowgar',
            },
            {
                code: 'AF18',
                name: 'Nangarhar',
            },
            {
                code: 'AF19',
                name: 'Nimruz',
            },
            {
                code: 'AF38',
                name: 'Nurestan',
            },
            {
                code: 'AF39',
                name: 'Oruzgan',
            },
            {
                code: 'AF36',
                name: 'Paktia',
            },
            {
                code: 'AF29',
                name: 'Paktika',
            },
            {
                code: 'AF42',
                name: 'Panjshir',
            },
            {
                code: 'AF40',
                name: 'Parvan',
            },
            {
                code: 'AF32',
                name: 'Samangan',
            },
            {
                code: 'AF33',
                name: 'Sar-e Pol',
            },
            {
                code: 'AF26',
                name: 'Takhar',
            },
            {
                code: 'AF27',
                name: 'Vardak',
            },
            {
                code: 'AF28',
                name: 'Zabol',
            },
        ],
    },
    {
        code: 'AX',
        id: 2407,
        name: 'Åland Islands',
        states: [],
    },
    {
        code: 'AL',
        id: 2186,
        name: 'Albania',
        states: [],
    },
    {
        code: 'DZ',
        id: 2187,
        name: 'Algeria',
        states: [
            {
                code: 'DZ.AR',
                name: 'Adrar',
            },
            {
                code: 'DZ.AD',
                name: 'Aïn Defla',
            },
            {
                code: 'DZ.AT',
                name: 'Aïn Témouchent',
            },
            {
                code: 'DZ.AL',
                name: 'Algiers',
            },
            {
                code: 'DZ.AN',
                name: 'Annaba',
            },
            {
                code: 'DZ.BT',
                name: 'Batna',
            },
            {
                code: 'DZ.BC',
                name: 'Béchar',
            },
            {
                code: 'DZ.BJ',
                name: 'Béjaïa',
            },
            {
                code: 'DZ.BS',
                name: 'Biskra',
            },
            {
                code: 'DZ.BL',
                name: 'Blida',
            },
            {
                code: 'DZ.BB',
                name: 'Bordj Bou Arréridj',
            },
            {
                code: 'DZ.BU',
                name: 'Bouira',
            },
            {
                code: 'DZ.BM',
                name: 'Boumerdès',
            },
            {
                code: 'DZ.CH',
                name: 'Chlef',
            },
            {
                code: 'DZ.CO',
                name: 'Constantine',
            },
            {
                code: 'DZ.DJ',
                name: 'Djelfa',
            },
            {
                code: 'DZ.EB',
                name: 'El Bayadh',
            },
            {
                code: 'DZ.EO',
                name: 'El Oued',
            },
            {
                code: 'DZ.ET',
                name: 'El Tarf',
            },
            {
                code: 'DZ.GR',
                name: 'Ghardaïa',
            },
            {
                code: 'DZ.GL',
                name: 'Guelma',
            },
            {
                code: 'DZ.IL',
                name: 'Illizi',
            },
            {
                code: 'DZ.JJ',
                name: 'Jijel',
            },
            {
                code: 'DZ.KH',
                name: 'Khenchela',
            },
            {
                code: 'DZ.LG',
                name: 'Laghouat',
            },
            {
                code: 'DZ.MC',
                name: 'Mascara',
            },
            {
                code: 'DZ.MD',
                name: 'Médéa',
            },
            {
                code: 'DZ.ML',
                name: 'Mila',
            },
            {
                code: 'DZ.MG',
                name: 'Mostaganem',
            },
            {
                code: 'DZ.MS',
                name: 'Msila',
            },
            {
                code: 'DZ.NA',
                name: 'Naama',
            },
            {
                code: 'DZ.OR',
                name: 'Oran',
            },
            {
                code: 'DZ.OG',
                name: 'Ouargla',
            },
            {
                code: 'DZ.OB',
                name: 'Oum el Bouaghi',
            },
            {
                code: 'DZ.RE',
                name: 'Relizane',
            },
            {
                code: 'DZ.SD',
                name: 'Saïda',
            },
            {
                code: 'DZ.SF',
                name: 'Sétif',
            },
            {
                code: 'DZ.SB',
                name: 'Sidi Bel Abbès',
            },
            {
                code: 'DZ.SK',
                name: 'Skikda',
            },
            {
                code: 'DZ.SA',
                name: 'Souk Ahras',
            },
            {
                code: 'DZ.TM',
                name: 'Tamanrasset',
            },
            {
                code: 'DZ.TB',
                name: 'Tébessa',
            },
            {
                code: 'DZ.TR',
                name: 'Tiaret',
            },
            {
                code: 'DZ.TN',
                name: 'Tindouf',
            },
            {
                code: 'DZ.TP',
                name: 'Tipaza',
            },
            {
                code: 'DZ.TS',
                name: 'Tissemsilt',
            },
            {
                code: 'DZ.TO',
                name: 'Tizi Ouzou',
            },
            {
                code: 'DZ.TL',
                name: 'Tlemcen',
            },
        ],
    },
    {
        code: 'AS',
        id: 2408,
        name: 'American Samoa',
        states: [],
    },
    {
        code: 'AD',
        id: 2188,
        name: 'Andorra',
        states: [],
    },
    {
        code: 'AO',
        id: 2189,
        name: 'Angola',
        states: [
            {
                code: 'AO19',
                name: 'Bengo',
            },
            {
                code: 'AO01',
                name: 'Benguela',
            },
            {
                code: 'AO02',
                name: 'Bié',
            },
            {
                code: 'AO03',
                name: 'Cabinda',
            },
            {
                code: 'AO04',
                name: 'Cuando Cubango',
            },
            {
                code: 'AO05',
                name: 'Cuanza Norte',
            },
            {
                code: 'AO06',
                name: 'Cuanza Sul',
            },
            {
                code: 'AO07',
                name: 'Cunene',
            },
            {
                code: 'AO08',
                name: 'Huambo',
            },
            {
                code: 'AO09',
                name: 'Huíla',
            },
            {
                code: 'AO20',
                name: 'Luanda',
            },
            {
                code: 'AO17',
                name: 'Lunda Norte',
            },
            {
                code: 'AO18',
                name: 'Lunda Sul',
            },
            {
                code: 'AO12',
                name: 'Malanje',
            },
            {
                code: 'AO14',
                name: 'Moxico',
            },
            {
                code: 'AO13',
                name: 'Namibe',
            },
            {
                code: 'AO15',
                name: 'Uíge',
            },
            {
                code: 'AO16',
                name: 'Zaire',
            },
        ],
    },
    {
        code: 'AI',
        id: 2409,
        name: 'Anguilla',
        states: [],
    },
    {
        code: 'AQ',
        id: 2190,
        name: 'Antarctica',
        states: [],
    },
    {
        code: 'AG',
        id: 2191,
        name: 'Antigua and Barbuda',
        states: [],
    },
    {
        code: 'AR',
        id: 2192,
        name: 'Argentina',
        states: [
            {
                code: 'AR01',
                name: 'Buenos Aires',
            },
            {
                code: 'AR02',
                name: 'Catamarca',
            },
            {
                code: 'AR03',
                name: 'Chaco',
            },
            {
                code: 'AR04',
                name: 'Chubut',
            },
            {
                code: 'AR07',
                name: 'Ciudad de Buenos Aires',
            },
            {
                code: 'AR05',
                name: 'Córdoba',
            },
            {
                code: 'AR06',
                name: 'Corrientes',
            },
            {
                code: 'AR08',
                name: 'Entre Ríos',
            },
            {
                code: 'AR09',
                name: 'Formosa',
            },
            {
                code: 'AR10',
                name: 'Jujuy',
            },
            {
                code: 'AR11',
                name: 'La Pampa',
            },
            {
                code: 'AR12',
                name: 'La Rioja',
            },
            {
                code: 'AR13',
                name: 'Mendoza',
            },
            {
                code: 'AR14',
                name: 'Misiones',
            },
            {
                code: 'AR15',
                name: 'Neuquén',
            },
            {
                code: 'AR16',
                name: 'Río Negro',
            },
            {
                code: 'AR17',
                name: 'Salta',
            },
            {
                code: 'AR18',
                name: 'San Juan',
            },
            {
                code: 'AR19',
                name: 'San Luis',
            },
            {
                code: 'AR20',
                name: 'Santa Cruz',
            },
            {
                code: 'AR21',
                name: 'Santa Fe',
            },
            {
                code: 'AR22',
                name: 'Santiago del Estero',
            },
            {
                code: 'AR23',
                name: 'Tierra del Fuego',
            },
            {
                code: 'AR24',
                name: 'Tucumán',
            },
        ],
    },
    {
        code: 'AM',
        id: 2193,
        name: 'Armenia',
        states: [],
    },
    {
        code: 'AB',
        id: 2373,
        name: 'Aruba',
        states: [
            {
                code: 'AW.AA',
                name: 'Aruba',
            },
        ],
    },
    {
        code: 'AU',
        id: 2194,
        name: 'Australia',
        states: [
            {
                code: 'ACT',
                name: 'Australian Capital Territory',
            },
            {
                code: 'NSW',
                name: 'New South Wales',
            },
            {
                code: 'NT',
                name: 'Northern Territory',
            },
            {
                code: 'QLD',
                name: 'Queensland',
            },
            {
                code: 'SA',
                name: 'South Australia',
            },
            {
                code: 'TAS',
                name: 'Tasmania',
            },
            {
                code: 'VIC',
                name: 'Victoria',
            },
            {
                code: 'WA',
                name: 'Western Australia',
            },
        ],
    },
    {
        code: 'AT',
        id: 2195,
        name: 'Austria',
        states: [
            {
                code: 'AU01',
                name: 'Burgenland',
            },
            {
                code: 'AU02',
                name: 'Carinthia',
            },
            {
                code: 'AU03',
                name: 'Lower Austria',
            },
            {
                code: 'AU05',
                name: 'Salzburg',
            },
            {
                code: 'AU06',
                name: 'Styria',
            },
            {
                code: 'AU07',
                name: 'Tyrol',
            },
            {
                code: 'AU04',
                name: 'Upper Austria',
            },
            {
                code: 'AU09',
                name: 'Vienna',
            },
            {
                code: 'AU08',
                name: 'Vorarlberg',
            },
        ],
    },
    {
        code: 'AZ',
        id: 2196,
        name: 'Azerbaijan',
        states: [
            {
                code: 'AZ-ABS',
                name: 'Absheron',
            },
            {
                code: 'AZ-AGM',
                name: 'Aghdam',
            },
            {
                code: 'AZ-AGS',
                name: 'Aghdash',
            },
            {
                code: 'AZ-AGC',
                name: 'Aghjabedi',
            },
            {
                code: 'AZ-AGA',
                name: 'Aghstafa',
            },
            {
                code: 'AZ-AGU',
                name: 'Aghsu',
            },
            {
                code: 'AZ-AB',
                name: 'Ali-Bairamly',
            },
            {
                code: 'AZ-AST',
                name: 'Astara',
            },
            {
                code: 'AZ-BAB',
                name: 'Babek',
            },
            {
                code: 'AZ-BA',
                name: 'Baku',
            },
            {
                code: 'AZ-BAL',
                name: 'Balaken',
            },
            {
                code: 'AZ-BAR',
                name: 'Barda',
            },
            {
                code: 'AZ-BEY',
                name: 'Beilagan',
            },
            {
                code: 'AZ-BIL',
                name: 'Bilasuvar',
            },
            {
                code: 'AZ-DAS',
                name: 'Dashkesan',
            },
            {
                code: 'AZ-DAV',
                name: 'Devechi',
            },
            {
                code: 'AZ-FUZ',
                name: 'Fizuli',
            },
            {
                code: 'AZ-QAB',
                name: 'Gabala',
            },
            {
                code: 'AZ-GAD',
                name: 'Gadabey',
            },
            {
                code: 'AZ-QAX',
                name: 'Gakh',
            },
            {
                code: 'AZ-GA',
                name: 'Ganja',
            },
            {
                code: 'AZ-QAZ',
                name: 'Gazakh',
            },
            {
                code: 'AZ-GOR',
                name: 'Geranboy',
            },
            {
                code: 'AZ-QOB',
                name: 'Gobustan',
            },
            {
                code: 'AZ-GOY',
                name: 'Goychay',
            },
            {
                code: 'AZ-QBA',
                name: 'Guba',
            },
            {
                code: 'AZ-QBI',
                name: 'Gubadly',
            },
            {
                code: 'AZ-QUS',
                name: 'Gusar',
            },
            {
                code: 'AZ-HAC',
                name: 'Hacuqabul',
            },
            {
                code: 'AZ-IMI',
                name: 'Imishli',
            },
            {
                code: 'AZ-ISM',
                name: 'Ismailly',
            },
            {
                code: 'AZ-CAL',
                name: 'Jalilabad',
            },
            {
                code: 'AZ-CAB',
                name: 'Jebrail',
            },
            {
                code: 'AZ-CUL',
                name: 'Julfa',
            },
            {
                code: 'AZ-KAL',
                name: 'Kelbajar',
            },
            {
                code: 'AZ-XAC',
                name: 'Khachmaz',
            },
            {
                code: 'AZ-XA',
                name: 'Khankendy',
            },
            {
                code: 'AZ-XAN',
                name: 'Khanlar',
            },
            {
                code: 'AZ-XCI',
                name: 'Khojaly',
            },
            {
                code: 'AZ-XVD',
                name: 'Khojavend',
            },
            {
                code: 'AZ-XIZ',
                name: 'Khyzy',
            },
            {
                code: 'AZ-KUR',
                name: 'Kyurdamir',
            },
            {
                code: 'AZ-LAC',
                name: 'Lachin',
            },
            {
                code: 'AZ-LAN',
                name: 'Lenkaran',
            },
            {
                code: 'AZ-LA',
                name: 'Lenkaran',
            },
            {
                code: 'AZ-LER',
                name: 'Lerik',
            },
            {
                code: 'AZ-MAS',
                name: 'Masally',
            },
            {
                code: 'AZ-MI',
                name: 'Mingechevir',
            },
            {
                code: 'AZ-NA',
                name: 'Naftalan',
            },
            {
                code: 'AZ-NX',
                name: 'Nakhchivan',
            },
            {
                code: 'AZ-NEF',
                name: 'Neftchala',
            },
            {
                code: 'AZ-OGU',
                name: 'Oghuz',
            },
            {
                code: 'AZ-ORD',
                name: 'Ordubad',
            },
            {
                code: 'AZ-SAT',
                name: 'Saatly',
            },
            {
                code: 'AZ-SAB',
                name: 'Sabirabad',
            },
            {
                code: 'AZ-SAL',
                name: 'Salyan',
            },
            {
                code: 'AZ-SMX',
                name: 'Samuh',
            },
            {
                code: 'AZ-SAD',
                name: 'Sedarak',
            },
            {
                code: 'AZ-SAH',
                name: 'Shahbuz',
            },
            {
                code: 'AZ-SMI',
                name: 'Shamakhy',
            },
            {
                code: 'AZ-SKR',
                name: 'Shamkir',
            },
            {
                code: 'AZ-SAK',
                name: 'Sheki',
            },
            {
                code: 'AZ-SA',
                name: 'Sheki',
            },
            {
                code: 'AZ-SAR',
                name: 'Sherur',
            },
            {
                code: 'AZ-SS',
                name: 'Shusha',
            },
            {
                code: 'AZ-SUS',
                name: 'Shusha',
            },
            {
                code: 'AZ-SIY',
                name: 'Siazan',
            },
            {
                code: 'AZ-SM',
                name: 'Sumgayit',
            },
            {
                code: 'AZ-TAR',
                name: 'Terter',
            },
            {
                code: 'AZ-TOV',
                name: 'Tovuz',
            },
            {
                code: 'AZ-UCA',
                name: 'Ujar',
            },
            {
                code: 'AZ-YAR',
                name: 'Yardymly',
            },
            {
                code: 'AZ-YE',
                name: 'Yevlakh',
            },
            {
                code: 'AZ-YEV',
                name: 'Yevlakh',
            },
            {
                code: 'AZ-ZAQ',
                name: 'Zagatala',
            },
            {
                code: 'AZ-ZAN',
                name: 'Zangilan',
            },
            {
                code: 'AZ-ZAR',
                name: 'Zerdab',
            },
        ],
    },
    {
        code: 'BS',
        id: 2197,
        name: 'Bahamas',
        states: [
            {
                code: 'BF24',
                name: 'Acklins',
            },
            {
                code: 'BF32',
                name: 'Berry Islands',
            },
            {
                code: 'BF05',
                name: 'Bimini',
            },
            {
                code: 'BF36',
                name: 'Black Point',
            },
            {
                code: 'BF06',
                name: 'Cat Island',
            },
            {
                code: 'BF37',
                name: 'Central Abaco',
            },
            {
                code: 'BF38',
                name: 'Central Andros',
            },
            {
                code: 'BF39',
                name: 'Central Eleuthera',
            },
            {
                code: 'BF25',
                name: 'City of Freeport',
            },
            {
                code: 'BF40',
                name: 'Crooked Island',
            },
            {
                code: 'BF41',
                name: 'East Grand Bahama',
            },
            {
                code: 'BF10',
                name: 'Exuma',
            },
            {
                code: 'BF42',
                name: 'Grand Cay',
            },
            {
                code: 'BS.GT\t',
                name: 'Green Turtle Cay',
            },
            {
                code: 'BF22',
                name: 'Harbour Island',
            },
            {
                code: 'BF43',
                name: 'Hope Town',
            },
            {
                code: 'BF13',
                name: 'Inagua',
            },
            {
                code: 'BF15',
                name: 'Long Island',
            },
            {
                code: 'BF44',
                name: 'Mangrove Cay',
            },
            {
                code: 'BF16',
                name: 'Mayaguana',
            },
            {
                code: 'BF45',
                name: "Moore's Island",
            },
            {
                code: 'BS.NW',
                name: 'New Providence',
            },
            {
                code: 'BF46',
                name: 'North Abaco',
            },
            {
                code: 'BF47',
                name: 'North Andros',
            },
            {
                code: 'BF48',
                name: 'North Eleuthera',
            },
            {
                code: 'BF18',
                name: 'Ragged Island',
            },
            {
                code: 'BF49',
                name: 'Rum Cay',
            },
            {
                code: 'BF35',
                name: 'San Salvador',
            },
            {
                code: 'BF50',
                name: 'South Abaco',
            },
            {
                code: 'BF51',
                name: 'South Andros',
            },
            {
                code: 'BF52',
                name: 'South Eleuthera',
            },
            {
                code: 'BF53',
                name: 'Spanish Wells',
            },
            {
                code: 'BF54',
                name: 'West Grand Bahama',
            },
        ],
    },
    {
        code: 'BH',
        id: 2198,
        name: 'Bahrain',
        states: [
            {
                code: 'BA16',
                name: 'Capital',
            },
            {
                code: 'BA19',
                name: 'Central',
            },
            {
                code: 'BA15',
                name: 'Muharraq',
            },
            {
                code: 'BA18',
                name: 'Northern',
            },
            {
                code: 'BA17',
                name: 'Southern',
            },
        ],
    },
    {
        code: 'BD',
        id: 2199,
        name: 'Bangladesh',
        states: [
            {
                code: 'BG85',
                name: 'Barisal',
            },
            {
                code: 'BG84',
                name: 'Chittagong',
            },
            {
                code: 'BG81',
                name: 'Dhaka',
            },
            {
                code: 'BG82',
                name: 'Khulna',
            },
            {
                code: 'BG81',
                name: 'Mymensingh',
            },
            {
                code: 'BG83',
                name: 'Rajshahi',
            },
            {
                code: 'BG87',
                name: 'Rangpur',
            },
            {
                code: 'BG86',
                name: 'Sylhet',
            },
        ],
    },
    {
        code: 'BB',
        id: 2200,
        name: 'Barbados',
        states: [
            {
                code: 'BB01',
                name: 'Christ Church',
            },
            {
                code: 'BB02',
                name: 'Saint Andrew',
            },
            {
                code: 'BB03',
                name: 'Saint George',
            },
            {
                code: 'BB04',
                name: 'Saint James',
            },
            {
                code: 'BB05',
                name: 'Saint John',
            },
            {
                code: 'BB06',
                name: 'Saint Joseph',
            },
            {
                code: 'BB07',
                name: 'Saint Lucy',
            },
            {
                code: 'BB08',
                name: 'Saint Michael',
            },
            {
                code: 'BB09',
                name: 'Saint Peter',
            },
            {
                code: 'BB10',
                name: 'Saint Philip',
            },
            {
                code: 'BB11',
                name: 'Saint Thomas',
            },
        ],
    },
    {
        code: 'BY',
        id: 2201,
        name: 'Belarus',
        states: [
            {
                code: 'BO01',
                name: 'Brest',
            },
            {
                code: 'BO02',
                name: 'Gomel',
            },
            {
                code: 'BO03',
                name: 'Grodno',
            },
            {
                code: 'BO05',
                name: 'Minsk',
            },
            {
                code: 'BO04',
                name: 'Minsk City',
            },
            {
                code: 'BO06',
                name: 'Mogilev',
            },
            {
                code: 'BO07',
                name: 'Vitebsk',
            },
        ],
    },
    {
        code: 'BE',
        id: 2202,
        name: 'Belgium',
        states: [
            {
                code: 'BE01',
                name: 'Antwerpen Province',
            },
            {
                code: 'BE11',
                name: 'Brussels-Capital Region',
            },
            {
                code: 'BE12',
                name: 'Flemish Brabant Province',
            },
            {
                code: 'BE03',
                name: 'Hainaut Province',
            },
            {
                code: 'BE04',
                name: 'Liege Province',
            },
            {
                code: 'BE05',
                name: 'Limburg Province',
            },
            {
                code: 'BE06',
                name: 'Luxembourg Province',
            },
            {
                code: 'BE07',
                name: 'Namur Province',
            },
            {
                code: 'BE08',
                name: 'Oost-Vlaanderen Province',
            },
            {
                code: 'BE10',
                name: 'Walloon Brabant Province',
            },
            {
                code: 'BE09',
                name: 'West-Vlaanderen Province',
            },
        ],
    },
    {
        code: 'BZ',
        id: 2203,
        name: 'Belize',
        states: [],
    },
    {
        code: 'BJ',
        id: 2204,
        name: 'Benin',
        states: [
            {
                code: 'BN07',
                name: 'Alibori',
            },
            {
                code: 'BN08',
                name: 'Atacora',
            },
            {
                code: 'BN09',
                name: 'Atlantique',
            },
            {
                code: 'BN10',
                name: 'Borgou',
            },
            {
                code: 'BN11',
                name: 'Collines',
            },
            {
                code: 'BN12',
                name: 'Couffo',
            },
            {
                code: 'BN13',
                name: 'Donga',
            },
            {
                code: 'BN14',
                name: 'Littoral',
            },
            {
                code: 'BN15',
                name: 'Mono',
            },
            {
                code: 'BN16',
                name: 'Ouémé',
            },
            {
                code: 'BN17',
                name: 'Plateau',
            },
            {
                code: 'BN18',
                name: 'Zou',
            },
        ],
    },
    {
        code: 'BU',
        id: 2372,
        name: 'Bermuda',
        states: [
            {
                code: 'BM.BD',
                name: 'Bermuda',
            },
            {
                code: 'BD01',
                name: 'Devonshire',
            },
            {
                code: 'BD03',
                name: 'Hamilton municipality',
            },
            {
                code: 'BD02',
                name: 'Hamilton',
            },
            {
                code: 'BD04',
                name: 'Paget',
            },
            {
                code: 'BD05',
                name: 'Pembroke',
            },
            {
                code: 'BD06',
                name: 'Saint George municipality',
            },
            {
                code: 'BD07',
                name: "Saint George's",
            },
            {
                code: 'BD08',
                name: 'Sandys',
            },
            {
                code: 'BD09',
                name: 'Smiths',
            },
            {
                code: 'BD10',
                name: 'Southampton',
            },
            {
                code: 'BD11',
                name: 'Warwick',
            },
        ],
    },
    {
        code: 'BT',
        id: 2205,
        name: 'Bhutan',
        states: [],
    },
    {
        code: 'BO',
        id: 2206,
        name: 'Bolivia; Plurinational State',
        states: [
            {
                code: 'BL01',
                name: 'Chuquisaca',
            },
            {
                code: 'BL02',
                name: 'Cochabamba',
            },
            {
                code: 'BL03',
                name: 'El Beni',
            },
            {
                code: 'BL04',
                name: 'La Paz',
            },
            {
                code: 'BL05',
                name: 'Oruro',
            },
            {
                code: 'BL06',
                name: 'Pando',
            },
            {
                code: 'BL07',
                name: 'Potosí',
            },
            {
                code: 'BL08',
                name: 'Santa Cruz',
            },
            {
                code: 'BL09',
                name: 'Tarija',
            },
        ],
    },
    {
        code: 'BQ',
        id: 2449,
        name: 'Bonaire',
        states: [
            {
                code: 'BQ.BO',
                name: 'Bonaire',
            },
            {
                code: 'BQ.SB',
                name: 'Saba',
            },
            {
                code: 'BQ.SE',
                name: 'Sint Eustatius',
            },
        ],
    },
    {
        code: 'BA',
        id: 2207,
        name: 'Bosnia and Herzegovina',
        states: [
            {
                code: 'BA-05',
                name: 'Bosansko-podrinjski kanton',
            },
            {
                code: 'BA-BRC',
                name: 'Brcko distrikt',
            },
            {
                code: 'BA-BIH',
                name: 'Federacija Bosna i Hercegovina',
            },
            {
                code: 'BA-07',
                name: 'Hercegovacko-neretvanski kanton',
            },
            {
                code: 'BA-09',
                name: 'Kanton Sarajevo',
            },
            {
                code: 'BA-10',
                name: 'Livanjski kanton',
            },
            {
                code: 'BA-02',
                name: 'Posavski kanton',
            },
            {
                code: 'BA-SRP',
                name: 'Republika Srpska',
            },
            {
                code: 'BA-06',
                name: 'Srednjobosanski kanton',
            },
            {
                code: 'BA-03',
                name: 'Tuzlanski kanton',
            },
            {
                code: 'BA-01',
                name: 'Unsko-sanski kanton',
            },
            {
                code: 'BA-08',
                name: 'Zapadnohercegovacki kanton',
            },
            {
                code: 'BA-04',
                name: 'Zenicko-dobojski kanton',
            },
        ],
    },
    {
        code: 'BW',
        id: 2208,
        name: 'Botswana',
        states: [
            {
                code: 'BC01',
                name: 'Central',
            },
            {
                code: 'BC12',
                name: 'Chobe',
            },
            {
                code: 'BC13',
                name: 'Francistown',
            },
            {
                code: 'BC14',
                name: 'Gaborone',
            },
            {
                code: 'BC03',
                name: 'Ghanzi',
            },
            {
                code: 'BC15',
                name: 'Jwaneng',
            },
            {
                code: 'BC04',
                name: 'Kgalagadi',
            },
            {
                code: 'BC05',
                name: 'Kgatleng',
            },
            {
                code: 'BC06',
                name: 'Kweneng',
            },
            {
                code: 'BC16',
                name: 'Lobatse',
            },
            {
                code: 'BC08',
                name: 'North-East',
            },
            {
                code: 'BC11',
                name: 'North-West',
            },
            {
                code: 'BC17',
                name: 'Selibe Phikwe',
            },
            {
                code: 'BC09',
                name: 'South East',
            },
            {
                code: 'BC10',
                name: 'Southern',
            },
            {
                code: 'BC18',
                name: 'Sowa Town',
            },
        ],
    },
    {
        code: 'BV',
        id: 2410,
        name: 'Bouvet Island',
        states: [],
    },
    {
        code: 'BR',
        id: 2209,
        name: 'Brazil',
        states: [
            {
                code: 'AC',
                name: 'Acre',
            },
            {
                code: 'AL',
                name: 'Alagoas',
            },
            {
                code: 'AP',
                name: 'Amapá',
            },
            {
                code: 'AM',
                name: 'Amazonas',
            },
            {
                code: 'BA',
                name: 'Bahia',
            },
            {
                code: 'CE',
                name: 'Ceará',
            },
            {
                code: 'DF',
                name: 'Distrito Federal',
            },
            {
                code: 'ES',
                name: 'Espírito Santo',
            },
            {
                code: 'GO',
                name: 'Goiás',
            },
            {
                code: 'MA',
                name: 'Maranhão',
            },
            {
                code: 'MT',
                name: 'Mato Grosso',
            },
            {
                code: 'MS',
                name: 'Mato Grosso do Sul',
            },
            {
                code: 'MG',
                name: 'Minas Gerais',
            },
            {
                code: 'PA',
                name: 'Pará',
            },
            {
                code: 'PR',
                name: 'Paraná',
            },
            {
                code: 'PB',
                name: 'Paraíba',
            },
            {
                code: 'PE',
                name: 'Pernambuco',
            },
            {
                code: 'PI',
                name: 'Piauí',
            },
            {
                code: 'RN',
                name: 'Rio Grande do Norte',
            },
            {
                code: 'RS',
                name: 'Rio Grande do Sul',
            },
            {
                code: 'RJ',
                name: 'Rio de Janeiro',
            },
            {
                code: 'RO',
                name: 'Rondônia',
            },
            {
                code: 'RR',
                name: 'Roraima',
            },
            {
                code: 'SC',
                name: 'Santa Catarina',
            },
            {
                code: 'SP',
                name: 'São Paulo',
            },
            {
                code: 'SE',
                name: 'Sergipe',
            },
            {
                code: 'TO',
                name: 'Tocantins',
            },
        ],
    },
    {
        code: 'IO',
        id: 2411,
        name: 'British Indian Ocean Territory',
        states: [],
    },
    {
        code: 'BN',
        id: 2210,
        name: 'Brunei Darussalam',
        states: [
            {
                code: 'BX01',
                name: 'Amo',
            },
            {
                code: 'BX02',
                name: 'Bandar Seri Begawan',
            },
            {
                code: 'BX03',
                name: 'Bangar',
            },
            {
                code: 'BX04',
                name: 'Batu Apoi',
            },
            {
                code: 'BX05',
                name: 'Berakas',
            },
            {
                code: 'BX06',
                name: 'Bokok',
            },
            {
                code: 'BX07',
                name: 'Bukit Sawat',
            },
            {
                code: 'BX08',
                name: 'Burong Pinggai Ayer',
            },
            {
                code: 'BX09',
                name: 'Gadong',
            },
            {
                code: 'BX10',
                name: 'Keriam',
            },
            {
                code: 'BX11',
                name: 'Kianggeh',
            },
            {
                code: 'BX12',
                name: 'Kilanas',
            },
            {
                code: 'BX13',
                name: 'Kiudang',
            },
            {
                code: 'BX14',
                name: 'Kota Batu',
            },
            {
                code: 'BX15',
                name: 'Kuala Balai',
            },
            {
                code: 'BX16',
                name: 'Kuala Belait',
            },
            {
                code: 'BX17',
                name: 'Labi',
            },
            {
                code: 'BX18',
                name: 'Labu',
            },
            {
                code: 'BX19',
                name: 'Lamunin',
            },
            {
                code: 'BX20',
                name: 'Liang',
            },
            {
                code: 'BX21',
                name: 'Lumapas',
            },
            {
                code: 'BX22',
                name: 'Melilas',
            },
            {
                code: 'BX23',
                name: 'Mentiri',
            },
            {
                code: 'BX24',
                name: 'Pekan Tutong',
            },
            {
                code: 'BX25',
                name: 'Pengkalan Batu',
            },
            {
                code: 'BX26',
                name: 'Peramu',
            },
            {
                code: 'BX27',
                name: 'Rambai',
            },
            {
                code: 'BX28',
                name: 'Saba',
            },
            {
                code: 'BX29',
                name: 'Sengkurong',
            },
            {
                code: 'BX30',
                name: 'Serasa',
            },
            {
                code: 'BX31',
                name: 'Seria',
            },
            {
                code: 'BX32',
                name: 'Sukang',
            },
            {
                code: 'BX33',
                name: 'Sungai Kebun',
            },
            {
                code: 'BX34',
                name: 'Sungai Kedayan',
            },
            {
                code: 'BX35',
                name: 'Tamoi',
            },
            {
                code: 'BX36',
                name: 'Tanjong Maya',
            },
            {
                code: 'BX37',
                name: 'Telisai',
            },
            {
                code: 'BX38',
                name: 'Ukong',
            },
        ],
    },
    {
        code: 'BG',
        id: 2211,
        name: 'Bulgaria',
        states: [
            {
                code: 'BU38',
                name: 'Blagoevgrad',
            },
            {
                code: 'BU39',
                name: 'Burgas',
            },
            {
                code: 'BU40',
                name: 'Dobrich',
            },
            {
                code: 'BU41',
                name: 'Gabrovo',
            },
            {
                code: 'BU42',
                name: 'Grad Sofiya',
            },
            {
                code: 'BU43',
                name: 'Khaskovo',
            },
            {
                code: 'BU44',
                name: 'Kurdzhali',
            },
            {
                code: 'BU45',
                name: 'Kyustendil',
            },
            {
                code: 'BU46',
                name: 'Lovech',
            },
            {
                code: 'BU47',
                name: 'Montana',
            },
            {
                code: 'BU48',
                name: 'Pazardzhik',
            },
            {
                code: 'BU49',
                name: 'Pernik',
            },
            {
                code: 'BU50',
                name: 'Pleven',
            },
            {
                code: 'BU51',
                name: 'Plovdiv',
            },
            {
                code: 'BU52',
                name: 'Razgrad',
            },
            {
                code: 'BU53',
                name: 'Ruse',
            },
            {
                code: 'BU54',
                name: 'Shumen',
            },
            {
                code: 'BU55',
                name: 'Silistra',
            },
            {
                code: 'BU56',
                name: 'Sliven',
            },
            {
                code: 'BU57',
                name: 'Smolyan',
            },
            {
                code: 'BU58',
                name: 'Sofiya',
            },
            {
                code: 'BU59',
                name: 'Stara Zagora',
            },
            {
                code: 'BU60',
                name: 'Turgovishte',
            },
            {
                code: 'BU61',
                name: 'Varna',
            },
            {
                code: 'BU62',
                name: 'Veliko Turnovo',
            },
            {
                code: 'BU63',
                name: 'Vidin',
            },
            {
                code: 'BU64',
                name: 'Vratsa',
            },
            {
                code: 'BU65',
                name: 'Yambol',
            },
        ],
    },
    {
        code: 'BF',
        id: 2212,
        name: 'Burkina Faso',
        states: [
            {
                code: 'UV79',
                name: 'Boucle du Mouhoun',
            },
            {
                code: 'UV80',
                name: 'Cascades',
            },
            {
                code: 'UV82',
                name: 'Centre Est',
            },
            {
                code: 'UV83',
                name: 'Centre Nord',
            },
            {
                code: 'UV84',
                name: 'Centre Ouest',
            },
            {
                code: 'UV81',
                name: 'Centre',
            },
            {
                code: 'UV85',
                name: 'Centre Sud',
            },
            {
                code: 'UV86',
                name: 'Est',
            },
            {
                code: 'UV87',
                name: 'Hauts Bassins',
            },
            {
                code: 'UV88',
                name: 'Nord',
            },
            {
                code: 'UV89',
                name: 'Plateau Central',
            },
            {
                code: 'UV90',
                name: 'Sahel',
            },
            {
                code: 'UV91',
                name: 'Sud-Ouest',
            },
        ],
    },
    {
        code: 'BM',
        id: 2385,
        name: 'Burma',
        states: [
            {
                code: 'BM03',
                name: 'Ayeyarwady',
            },
            {
                code: 'BM16',
                name: 'Bago',
            },
            {
                code: 'BM02',
                name: 'Chin',
            },
            {
                code: 'BM04',
                name: 'Kachin',
            },
            {
                code: 'BM06',
                name: 'Kayah',
            },
            {
                code: 'BM05',
                name: 'Kayin',
            },
            {
                code: 'BM15',
                name: 'Magway',
            },
            {
                code: 'BM08',
                name: 'Mandalay',
            },
            {
                code: 'BM13',
                name: 'Mon',
            },
            {
                code: 'BM18',
                name: 'Naypyidaw',
            },
            {
                code: 'BM01',
                name: 'Rakhine',
            },
            {
                code: 'BM10',
                name: 'Sagaing',
            },
            {
                code: 'BM11',
                name: 'Shan',
            },
            {
                code: 'BM12',
                name: 'Tanintharyi',
            },
            {
                code: 'BM17',
                name: 'Yangon',
            },
        ],
    },
    {
        code: 'BI',
        id: 2213,
        name: 'Burundi',
        states: [],
    },
    {
        code: 'KH',
        id: 2214,
        name: 'Cambodia',
        states: [
            {
                code: 'CB25',
                name: 'Bântéay Méanchey',
            },
            {
                code: 'CB29',
                name: 'Batdâmbâng',
            },
            {
                code: 'CB02',
                name: 'Kâmpóng Cham',
            },
            {
                code: 'CB03',
                name: 'Kâmpóng Chhnang',
            },
            {
                code: 'CB04',
                name: 'Kâmpóng Spœ',
            },
            {
                code: 'CB05',
                name: 'Kâmpóng Thum',
            },
            {
                code: 'CB21',
                name: 'Kâmpôt',
            },
            {
                code: 'CB07',
                name: 'Kândal',
            },
            {
                code: 'CB08',
                name: 'Kaôh Kong',
            },
            {
                code: 'CB09',
                name: 'Krâchéh',
            },
            {
                code: 'CB26',
                name: 'Krong Keb',
            },
            {
                code: 'CB30',
                name: 'Krong Pailin',
            },
            {
                code: 'CB28',
                name: 'Krong Preah Sihanouk',
            },
            {
                code: 'CB10',
                name: 'Môndól Kiri',
            },
            {
                code: 'CB27',
                name: 'Otdâr Méanchey',
            },
            {
                code: 'CB22',
                name: 'Phnom Penh',
            },
            {
                code: 'CB12',
                name: 'Pouthisat',
            },
            {
                code: 'CB13',
                name: 'Preah Vihéar',
            },
            {
                code: 'CB14',
                name: 'Prey Vêng',
            },
            {
                code: 'CB23',
                name: 'Rôtânôkiri',
            },
            {
                code: 'CB24',
                name: 'Siemréab',
            },
            {
                code: 'CB17',
                name: 'Stœ?ng Trêng',
            },
            {
                code: 'CB18',
                name: 'Svay Rieng',
            },
            {
                code: 'CB19',
                name: 'Takêv',
            },
            {
                code: 'CB31',
                name: 'Tbong Khmum',
            },
        ],
    },
    {
        code: 'CM',
        id: 2215,
        name: 'Cameroon',
        states: [
            {
                code: 'CM10',
                name: 'Adamaoua',
            },
            {
                code: 'CM11',
                name: 'Centre',
            },
            {
                code: 'CM04',
                name: 'Est',
            },
            {
                code: 'CM12',
                name: 'Extrême-Nord',
            },
            {
                code: 'CM05',
                name: 'Littoral',
            },
            {
                code: 'CM07',
                name: 'Nord-Ouest',
            },
            {
                code: 'CM13',
                name: 'Nord',
            },
            {
                code: 'CM08',
                name: 'Ouest',
            },
            {
                code: 'CM09',
                name: 'Sud-Ouest',
            },
            {
                code: 'CM14',
                name: 'Sud',
            },
        ],
    },
    {
        code: 'CA',
        id: 2216,
        name: 'Canada',
        states: [
            {
                code: 'AB',
                name: 'Alberta',
            },
            {
                code: 'BC',
                name: 'British Columbia',
            },
            {
                code: 'MB',
                name: 'Manitoba',
            },
            {
                code: 'NB',
                name: 'New Brunswick',
            },
            {
                code: 'NL',
                name: 'Newfoundland and Labrador',
            },
            {
                code: 'NT',
                name: 'Northwest Territories',
            },
            {
                code: 'NS',
                name: 'Nova Scotia',
            },
            {
                code: 'NU',
                name: 'Nunavut',
            },
            {
                code: 'ON',
                name: 'Ontario',
            },
            {
                code: 'PE',
                name: 'Prince Edward Island',
            },
            {
                code: 'QC',
                name: 'Quebec',
            },
            {
                code: 'SK',
                name: 'Saskatchewan',
            },
            {
                code: 'YT',
                name: 'Yukon',
            },
        ],
    },
    {
        code: 'CV',
        id: 2217,
        name: 'Cape Verde',
        states: [],
    },
    {
        code: 'KY',
        id: 2379,
        name: 'Cayman Islands',
        states: [
            {
                code: 'KY.BT',
                name: 'Bodden Town',
            },
            {
                code: 'KY.CJ',
                name: 'Cayman Islands',
            },
            {
                code: 'KY.EE',
                name: 'East End',
            },
            {
                code: 'KY.GT',
                name: 'George Town',
            },
            {
                code: 'KY.NS',
                name: 'North Side',
            },
            {
                code: 'KY.SI',
                name: 'Sister Islands',
            },
            {
                code: 'KY.WB',
                name: 'West Bay',
            },
        ],
    },
    {
        code: 'CF',
        id: 2218,
        name: 'Central African Republic',
        states: [
            {
                code: 'CT01',
                name: 'Bamingui-Bangoran',
            },
            {
                code: 'CT18',
                name: 'Bangui',
            },
            {
                code: 'CT02',
                name: 'Basse-Kotto',
            },
            {
                code: 'CT05',
                name: 'Haut-Mbomou',
            },
            {
                code: 'CT03',
                name: 'Haute-Kotto',
            },
            {
                code: 'CT06',
                name: 'Kémo',
            },
            {
                code: 'CT07',
                name: 'Lobaye',
            },
            {
                code: 'CT04',
                name: 'Mambéré-Kadéï',
            },
            {
                code: 'CT08',
                name: 'Mbomou',
            },
            {
                code: 'CT15',
                name: 'Nana-Grébizi',
            },
            {
                code: 'CT09',
                name: 'Nana-Mambéré',
            },
            {
                code: 'CT17',
                name: "Ombella-M'Poko",
            },
            {
                code: 'CT11',
                name: 'Ouaka',
            },
            {
                code: 'CT12',
                name: 'Ouham',
            },
            {
                code: 'CT13',
                name: 'Ouham-Pendé',
            },
            {
                code: 'CT16',
                name: 'Sangha-Mbaéré',
            },
            {
                code: 'CT14',
                name: 'Vakaga',
            },
        ],
    },
    {
        code: 'TD',
        id: 2219,
        name: 'Chad',
        states: [
            {
                code: 'CD22',
                name: 'Barh el Ghazel',
            },
            {
                code: 'CD01',
                name: 'Batha',
            },
            {
                code: 'CD23',
                name: 'Borkou',
            },
            {
                code: 'CD15',
                name: 'Chari-Baguirmi',
            },
            {
                code: 'CD27',
                name: 'Ennedi Est',
            },
            {
                code: 'CD28',
                name: 'Ennedi Ouest',
            },
            {
                code: 'CD05',
                name: 'Guéra',
            },
            {
                code: 'CD18',
                name: 'Hadjer-Lamis',
            },
            {
                code: 'CD06',
                name: 'Kanem',
            },
            {
                code: 'CD07',
                name: 'Lac',
            },
            {
                code: 'CD08',
                name: 'Logone Occidental',
            },
            {
                code: 'CD09',
                name: 'Logone Oriental',
            },
            {
                code: 'CD19',
                name: 'Mandoul',
            },
            {
                code: 'CD16',
                name: 'Mayo-Kebbi Est',
            },
            {
                code: 'CD20',
                name: 'Mayo-Kebbi Ouest',
            },
            {
                code: 'CD17',
                name: 'Moyen-Chari',
            },
            {
                code: 'CD12',
                name: 'Ouaddaï',
            },
            {
                code: 'CD13',
                name: 'Salamat',
            },
            {
                code: 'CD25',
                name: 'Sila',
            },
            {
                code: 'CD14',
                name: 'Tandjilé',
            },
            {
                code: 'CD26',
                name: 'Tibesti',
            },
            {
                code: 'CD21',
                name: "Ville de N'Djamena",
            },
            {
                code: 'CD02',
                name: 'Wadi Fira',
            },
        ],
    },
    {
        code: 'CH99',
        id: 2386,
        name: 'Channel Islands',
        states: [],
    },
    {
        code: 'CL',
        id: 2220,
        name: 'Chile',
        states: [
            {
                code: 'CL.AI',
                name: 'Aisén del General Carlos Ibáñez del Campo',
            },
            {
                code: 'CL.AN',
                name: 'Antofagasta',
            },
            {
                code: 'CL.AR',
                name: 'Araucanía',
            },
            {
                code: 'CL.AP',
                name: 'Arica and Parinacota',
            },
            {
                code: 'CL.AT',
                name: 'Atacama',
            },
            {
                code: 'CL.BI',
                name: 'Bío-Bío',
            },
            {
                code: 'CL.CO',
                name: 'Coquimbo',
            },
            {
                code: 'CL.LI',
                name: "Libertador General Bernardo O'Higgins",
            },
            {
                code: 'CL.LG',
                name: 'Los Lagos',
            },
            {
                code: 'CL.LR',
                name: 'Los Ríos',
            },
            {
                code: 'CL.MA',
                name: 'Magallanes y Antártica Chilena',
            },
            {
                code: 'CL.ML',
                name: 'Maule',
            },
            {
                code: 'CL.RM',
                name: 'Región Metropolitana de Santiago',
            },
            {
                code: 'CL.TP',
                name: 'Tarapacá',
            },
            {
                code: 'CL.VS',
                name: 'Valparaíso',
            },
        ],
    },
    {
        code: 'CN',
        id: 2221,
        name: 'China',
        states: [
            {
                code: 'CH01',
                name: 'Anhui',
            },
            {
                code: 'CH22',
                name: 'Beijing',
            },
            {
                code: 'CH33',
                name: 'Chongqing',
            },
            {
                code: 'CH07',
                name: 'Fujian',
            },
            {
                code: 'CH15',
                name: 'Gansu',
            },
            {
                code: 'CH17',
                name: 'Guangdon',
            },
            {
                code: 'CH30',
                name: 'Guangdong',
            },
            {
                code: 'CH16',
                name: 'Guangxi',
            },
            {
                code: 'CH18',
                name: 'Guizhou',
            },
            {
                code: 'CH31',
                name: 'Hainan',
            },
            {
                code: 'CH10',
                name: 'Hebei',
            },
            {
                code: 'CH08',
                name: 'Heilongjiang',
            },
            {
                code: 'CH09',
                name: 'Henan',
            },
            {
                code: 'CH34',
                name: 'Hong Kong',
            },
            {
                code: 'CH12',
                name: 'Hubei',
            },
            {
                code: 'CH11',
                name: 'Hunan',
            },
            {
                code: 'CH04',
                name: 'Jiangsu',
            },
            {
                code: 'CH03',
                name: 'Jiangxi',
            },
            {
                code: 'CH05',
                name: 'Jilin',
            },
            {
                code: 'CH19',
                name: 'Liaoning',
            },
            {
                code: 'CH20',
                name: 'Nei Mongol',
            },
            {
                code: 'CH21',
                name: 'Ningxia',
            },
            {
                code: 'CH06',
                name: 'Qinghai',
            },
            {
                code: 'CH26',
                name: 'Shaanxi',
            },
            {
                code: 'CH25',
                name: 'Shandong',
            },
            {
                code: 'CH23',
                name: 'Shanghai',
            },
            {
                code: 'CH24',
                name: 'Shanxi',
            },
            {
                code: 'CH32',
                name: 'Sichuan',
            },
            {
                code: 'CH27',
                name: 'Sichuan',
            },
            {
                code: 'CH28',
                name: 'Tianjin',
            },
            {
                code: 'CH13',
                name: 'Xinjiang',
            },
            {
                code: 'CH14',
                name: 'Xizang',
            },
            {
                code: 'CH29',
                name: 'Yunnan',
            },
            {
                code: 'CH02',
                name: 'Zhejiang',
            },
        ],
    },
    {
        code: 'CX',
        id: 2412,
        name: 'Christmas Island',
        states: [],
    },
    {
        code: 'CC',
        id: 2413,
        name: 'Cocos (Keeling) Islands',
        states: [],
    },
    {
        code: 'CO',
        id: 2222,
        name: 'Colombia',
        states: [
            {
                code: 'CO01',
                name: 'Amazonas',
            },
            {
                code: 'CO02',
                name: 'Antioquia',
            },
            {
                code: 'CO03',
                name: 'Arauca',
            },
            {
                code: 'CO04',
                name: 'Atlántico',
            },
            {
                code: 'CO35',
                name: 'Bolívar',
            },
            {
                code: 'CO36',
                name: 'Boyacá',
            },
            {
                code: 'CO37',
                name: 'Caldas',
            },
            {
                code: 'CO08',
                name: 'Caquetá',
            },
            {
                code: 'CO32',
                name: 'Casanare',
            },
            {
                code: 'CO09',
                name: 'Cauca',
            },
            {
                code: 'CO10',
                name: 'Cesar',
            },
            {
                code: 'CO11',
                name: 'Chocó',
            },
            {
                code: 'CO12',
                name: 'Córdoba',
            },
            {
                code: 'CO33',
                name: 'Cundinamarca',
            },
            {
                code: 'CO34',
                name: 'Distrito Capital',
            },
            {
                code: 'CO15',
                name: 'Guainía',
            },
            {
                code: 'CO14',
                name: 'Guaviare',
            },
            {
                code: 'CO16',
                name: 'Huila',
            },
            {
                code: 'CO17',
                name: 'La Guajira',
            },
            {
                code: 'CO38',
                name: 'Magdalena',
            },
            {
                code: 'CO19',
                name: 'Meta',
            },
            {
                code: 'CO20',
                name: 'Nariño',
            },
            {
                code: 'CO21',
                name: 'Norte de Santander',
            },
            {
                code: 'CO22',
                name: 'Putumayo',
            },
            {
                code: 'CO23',
                name: 'Quindío',
            },
            {
                code: 'CO24',
                name: 'Risaralda',
            },
            {
                code: 'CO25',
                name: 'San Andrés y Providencia',
            },
            {
                code: 'CO26',
                name: 'Santander',
            },
            {
                code: 'CO27',
                name: 'Sucre',
            },
            {
                code: 'CO28',
                name: 'Tolima',
            },
            {
                code: 'CO29',
                name: 'Valle del Cauca',
            },
            {
                code: 'CO30',
                name: 'Vaupés',
            },
            {
                code: 'CO31',
                name: 'Vichada',
            },
        ],
    },
    {
        code: 'KM',
        id: 2223,
        name: 'Comoros',
        states: [],
    },
    {
        code: 'ZR',
        id: 2368,
        name: 'Congo; Democratic Republic of',
        states: [
            {
                code: 'CD.BU',
                name: 'Bas-Uélé',
            },
            {
                code: 'CD.HK',
                name: 'Haut-Katanga',
            },
            {
                code: 'CD.HL',
                name: 'Haut-Lomami',
            },
            {
                code: 'CD.HU',
                name: 'Haut-Uélé',
            },
            {
                code: 'CD.IT',
                name: 'Ituri',
            },
            {
                code: 'CD.KS',
                name: 'Kasaï',
            },
            {
                code: 'CD.LL',
                name: 'Kasaï-Central',
            },
            {
                code: 'CD.KO',
                name: 'Kasaï Oriental',
            },
            {
                code: 'CD.KN',
                name: 'Kinshasa',
            },
            {
                code: 'CD.BC',
                name: 'Kongo Central',
            },
            {
                code: 'CD.KG',
                name: 'Kwango',
            },
            {
                code: 'CD.KU',
                name: 'Kwilu',
            },
            {
                code: 'CD.LM',
                name: 'Lomami',
            },
            {
                code: 'CD.LB',
                name: 'Lualaba',
            },
            {
                code: 'CD.MA',
                name: 'Mai-Ndombe',
            },
            {
                code: 'CD.MN',
                name: 'Maniema',
            },
            {
                code: 'CD.MO',
                name: 'Mongala',
            },
            {
                code: 'CD.NK',
                name: 'Nord-Kivu',
            },
            {
                code: 'CD.NU',
                name: 'Nord-Ubangi',
            },
            {
                code: 'CD.SN',
                name: 'Sankuru',
            },
            {
                code: 'CD.SK',
                name: 'Sud-Kivu',
            },
            {
                code: 'CD.SU',
                name: 'Sud-Ubangi',
            },
            {
                code: 'CD.TG',
                name: 'Tanganyika',
            },
            {
                code: 'CD.TO',
                name: 'Tshopo',
            },
            {
                code: 'CD.TP',
                name: 'Tshuapa',
            },
            {
                code: 'CD.ET',
                name: 'Équateur',
            },
        ],
    },
    {
        code: 'CG',
        id: 2383,
        name: 'Congo; Republic of',
        states: [],
    },
    {
        code: 'CK',
        id: 2414,
        name: 'Cook Islands',
        states: [],
    },
    {
        code: 'CR',
        id: 2226,
        name: 'Costa Rica',
        states: [
            {
                code: 'CS01',
                name: 'Alajuela',
            },
            {
                code: 'CS02',
                name: 'Cartago',
            },
            {
                code: 'CS03',
                name: 'Guanacaste',
            },
            {
                code: 'CS04',
                name: 'Heredia',
            },
            {
                code: 'CS06',
                name: 'Limón',
            },
            {
                code: 'CS07',
                name: 'Puntarenas',
            },
            {
                code: 'CS08',
                name: 'San José',
            },
        ],
    },
    {
        code: 'CI',
        id: 2227,
        name: "Cote D'Ivoire",
        states: [
            {
                code: 'IV93',
                name: 'Abidjan',
            },
            {
                code: 'IV76',
                name: 'Bas-Sassandra',
            },
            {
                code: 'IV94',
                name: 'Comoé',
            },
            {
                code: 'IV77',
                name: 'Denguélé',
            },
            {
                code: 'IV95',
                name: 'Gôh-Djiboua',
            },
            {
                code: 'IV81',
                name: 'Lacs',
            },
            {
                code: 'IV82',
                name: 'Lagunes',
            },
            {
                code: 'IV78',
                name: 'Montagnes',
            },
            {
                code: 'IV96',
                name: 'Sassandra-Marahoué',
            },
            {
                code: 'IV87',
                name: 'Savanes',
            },
            {
                code: 'IV90',
                name: 'Vallée du Bandama',
            },
            {
                code: 'IV97',
                name: 'Woroba',
            },
            {
                code: 'IV98',
                name: 'Yamoussoukro',
            },
            {
                code: 'IV92',
                name: 'Zanzan',
            },
        ],
    },
    {
        code: 'HR',
        id: 2228,
        name: 'Croatia',
        states: [
            {
                code: 'HR07',
                name: 'Bjelovarsko-bilogorska',
            },
            {
                code: 'HR12',
                name: 'Brodsko-posavska',
            },
            {
                code: 'HR19',
                name: 'Dubrovacko-neretvanska',
            },
            {
                code: 'HR21',
                name: 'Grad Zagreb',
            },
            {
                code: 'HR-18',
                name: 'Istarska',
            },
            {
                code: 'HR04',
                name: 'Karlovacka',
            },
            {
                code: 'HR06',
                name: 'Koprivnicko-križevacka',
            },
            {
                code: 'HR02',
                name: 'Krapinsko-zagorska',
            },
            {
                code: 'HR09',
                name: 'Licko-senjska',
            },
            {
                code: 'HR20',
                name: 'Medimurska',
            },
            {
                code: 'HR14',
                name: 'Osjecko-baranjska',
            },
            {
                code: 'HR11',
                name: 'Požeško-slavonska',
            },
            {
                code: 'HR08',
                name: 'Primorsko-goranska',
            },
            {
                code: 'HR15',
                name: 'Šibensko-kninska',
            },
            {
                code: 'HR03',
                name: 'Sisacko-moslavacka',
            },
            {
                code: 'HR17',
                name: 'Splitsko-dalmatinska',
            },
            {
                code: 'HR05',
                name: 'Varaždinska',
            },
            {
                code: 'HR10',
                name: 'Viroviticko-podravska',
            },
            {
                code: 'HR16',
                name: 'Vukovarsko-srijemska',
            },
            {
                code: 'HR13',
                name: 'Zadarska',
            },
            {
                code: 'HR01',
                name: 'Zagrebacka',
            },
        ],
    },
    {
        code: 'CU',
        id: 2229,
        name: 'Cuba',
        states: [
            {
                code: 'CU17',
                name: 'Artemisa',
            },
            {
                code: 'CU05',
                name: 'Camagüey',
            },
            {
                code: 'CU07',
                name: 'Ciego de Ávila',
            },
            {
                code: 'CU08',
                name: 'Cienfuegos',
            },
            {
                code: 'CU09',
                name: 'Granma',
            },
            {
                code: 'CU10',
                name: 'Guantánamo',
            },
            {
                code: 'CU12',
                name: 'Holguín',
            },
            {
                code: 'CU04',
                name: 'Isla de la Juventud',
            },
            {
                code: 'CU02',
                name: 'La Habana',
            },
            {
                code: 'CU13',
                name: 'Las Tunas',
            },
            {
                code: 'CU03',
                name: 'Matanzas',
            },
            {
                code: 'CU18',
                name: 'Mayabeque',
            },
            {
                code: 'CU01',
                name: 'Pinar del Río',
            },
            {
                code: 'CU14',
                name: 'Sancti Spíritus',
            },
            {
                code: 'CU15',
                name: 'Santiago de Cuba',
            },
            {
                code: 'CU16',
                name: 'Villa Clara',
            },
        ],
    },
    {
        code: 'C999',
        id: 2387,
        name: 'Curacao',
        states: [
            {
                code: 'CW.CU',
                name: 'Curacao',
            },
        ],
    },
    {
        code: 'CY',
        id: 2230,
        name: 'Cyprus',
        states: [
            {
                code: 'CY01',
                name: 'Famagusta',
            },
            {
                code: 'CY02',
                name: 'Kyrenia',
            },
            {
                code: 'CY03',
                name: 'Larnaca',
            },
            {
                code: 'CY05',
                name: 'Limassol',
            },
            {
                code: 'CY04',
                name: 'Nicosia',
            },
            {
                code: 'CY06',
                name: 'Paphos',
            },
        ],
    },
    {
        code: 'CZ',
        id: 2231,
        name: 'Czech Republic',
        states: [
            {
                code: 'JC',
                name: 'Jihoceský kraj',
            },
            {
                code: 'JM',
                name: 'Jihomoravský kraj',
            },
            {
                code: 'KA',
                name: 'Karlovarský kraj',
            },
            {
                code: 'KR',
                name: 'Královéhradecký kraj',
            },
            {
                code: 'LI',
                name: 'Liberecký kraj',
            },
            {
                code: 'MO',
                name: 'Moravskoslezský kraj',
            },
            {
                code: 'OL',
                name: 'Olomoucký kraj',
            },
            {
                code: 'PA',
                name: 'Pardubický kraj',
            },
            {
                code: 'PL',
                name: 'Plzenský kraj',
            },
            {
                code: 'PR',
                name: 'Praha, hlavní mesto',
            },
            {
                code: 'ST',
                name: 'Stredoceský kraj',
            },
            {
                code: 'VY',
                name: 'Vysocina',
            },
            {
                code: 'ZL',
                name: 'Zlínský kraj',
            },
            {
                code: 'US',
                name: 'Ústecký kraj',
            },
        ],
    },
    {
        code: 'DK',
        id: 2232,
        name: 'Denmark',
        states: [
            {
                code: 'DA01',
                name: 'Arhus County',
            },
            {
                code: 'DA02',
                name: 'Bornholm Regional Municipality',
            },
            {
                code: 'DA17',
                name: 'Capital Region',
            },
            {
                code: 'DA18',
                name: 'Central Jutland Region',
            },
            {
                code: 'DA16',
                name: 'Frederiksberg municipal',
            },
            {
                code: 'DA03',
                name: 'Frederiksborg County',
            },
            {
                code: 'DA04',
                name: 'Fyn County',
            },
            {
                code: 'DA06',
                name: 'Kobenhavn County',
            },
            {
                code: 'DA05',
                name: 'Kobenhavn municipal',
            },
            {
                code: 'DA07',
                name: 'Nordjylland County',
            },
            {
                code: 'DA19',
                name: 'North Jutland Region',
            },
            {
                code: 'DA08',
                name: 'Ribe County',
            },
            {
                code: 'DA09',
                name: 'Ringkobing County',
            },
            {
                code: 'DA10',
                name: 'Roskilde County',
            },
            {
                code: 'DA11',
                name: 'Sonderjylland County',
            },
            {
                code: 'DA21',
                name: 'South Denmark Region',
            },
            {
                code: 'DA12',
                name: 'Storstrom County',
            },
            {
                code: 'DA13',
                name: 'Vejle County',
            },
            {
                code: 'DA14',
                name: 'Vestsjaelland County',
            },
            {
                code: 'DA15',
                name: 'Viborg County',
            },
            {
                code: 'DA20',
                name: 'Zealand Region',
            },
        ],
    },
    {
        code: 'DJ',
        id: 2233,
        name: 'Djibouti',
        states: [],
    },
    {
        code: 'DM',
        id: 2234,
        name: 'Dominica',
        states: [],
    },
    {
        code: 'DO',
        id: 2235,
        name: 'Dominican Republic',
        states: [
            {
                code: 'DR01',
                name: 'Azua',
            },
            {
                code: 'DR02',
                name: 'Bahoruco',
            },
            {
                code: 'DR03',
                name: 'Barahona',
            },
            {
                code: 'DR04',
                name: 'Dajabón',
            },
            {
                code: 'DR34',
                name: 'Distrito Nacional',
            },
            {
                code: 'DR06',
                name: 'Duarte',
            },
            {
                code: 'DR28',
                name: 'El Seibo',
            },
            {
                code: 'DR11',
                name: 'Elías Piña',
            },
            {
                code: 'DR08',
                name: 'Espaillat',
            },
            {
                code: 'DR29',
                name: 'Hato Mayor',
            },
            {
                code: 'DR19',
                name: 'Hermanas Mirabal',
            },
            {
                code: 'DR09',
                name: 'Independencia',
            },
            {
                code: 'DR10',
                name: 'La Altagracia',
            },
            {
                code: 'DR12',
                name: 'La Romana',
            },
            {
                code: 'DR30',
                name: 'La Vega',
            },
            {
                code: 'DR14',
                name: 'María Trinidad Sánchez',
            },
            {
                code: 'DR31',
                name: 'Monseñor Nouel',
            },
            {
                code: 'DR15',
                name: 'Monte Cristi',
            },
            {
                code: 'DR32',
                name: 'Monte Plata',
            },
            {
                code: 'DR16',
                name: 'Pedernales',
            },
            {
                code: 'DR35',
                name: 'Peravia',
            },
            {
                code: 'DR18',
                name: 'Puerto Plata',
            },
            {
                code: 'DR20',
                name: 'Samaná',
            },
            {
                code: 'DR33',
                name: 'San Cristóbal',
            },
            {
                code: 'DR36',
                name: 'San José de Ocoa',
            },
            {
                code: 'DR23',
                name: 'San Juan',
            },
            {
                code: 'DR24',
                name: 'San Pedro de Macorís',
            },
            {
                code: 'DR21',
                name: 'Sánchez Ramírez',
            },
            {
                code: 'DR25',
                name: 'Santiago',
            },
            {
                code: 'DR26',
                name: 'Santiago Rodríguez',
            },
            {
                code: 'DR37',
                name: 'Santo Domingo',
            },
            {
                code: 'DR27',
                name: 'Valverde',
            },
        ],
    },
    {
        code: 'EC',
        id: 2236,
        name: 'Ecuador',
        states: [
            {
                code: 'EC02',
                name: 'Azuay',
            },
            {
                code: 'EC02',
                name: 'Azuay',
            },
            {
                code: 'EC03',
                name: 'Bolívar',
            },
            {
                code: 'EC04',
                name: 'Cañar',
            },
            {
                code: 'EC05',
                name: 'Carchi',
            },
            {
                code: 'EC06',
                name: 'Chimborazo',
            },
            {
                code: 'EC07',
                name: 'Cotopaxi',
            },
            {
                code: 'EC08',
                name: 'El Oro',
            },
            {
                code: 'EC09',
                name: 'Esmeraldas',
            },
            {
                code: 'EC01',
                name: 'Galápagos',
            },
            {
                code: 'EC10',
                name: 'Guayas',
            },
            {
                code: 'EC11',
                name: 'Imbabura',
            },
            {
                code: 'EC12',
                name: 'Loja',
            },
            {
                code: 'EC13',
                name: 'Los Ríos',
            },
            {
                code: 'EC14',
                name: 'Manabí',
            },
            {
                code: 'EC15',
                name: 'Morona-Santiago',
            },
            {
                code: 'EC23',
                name: 'Napo',
            },
            {
                code: 'EC24',
                name: 'Orellana',
            },
            {
                code: 'EC17',
                name: 'Pastaza',
            },
            {
                code: 'EC18',
                name: 'Pichincha',
            },
            {
                code: 'EC25',
                name: 'Santa Elena',
            },
            {
                code: 'EC26',
                name: 'Santo Domingo de los Tsáchilas',
            },
            {
                code: 'EC22',
                name: 'Sucumbíos',
            },
            {
                code: 'EC19',
                name: 'Tungurahua',
            },
            {
                code: 'EC20',
                name: 'Zamora-Chinchipe',
            },
        ],
    },
    {
        code: 'EG',
        id: 2237,
        name: 'Egypt',
        states: [
            {
                code: 'EG01',
                name: 'Ad Daqahliyah',
            },
            {
                code: 'EG02',
                name: 'Al Bahr al Ahmar',
            },
            {
                code: 'EG03',
                name: 'Al Buhayrah',
            },
            {
                code: 'EG04',
                name: 'Al Fayyum',
            },
            {
                code: 'EG05',
                name: 'Al Gharbiyah',
            },
            {
                code: 'EG06',
                name: 'Al Iskandariyah',
            },
            {
                code: 'EG07',
                name: 'Al Isma`iliyah',
            },
            {
                code: 'EG08',
                name: 'Al Jizah',
            },
            {
                code: 'EG09',
                name: 'Al Minufiyah',
            },
            {
                code: 'EG10',
                name: 'Al Minya',
            },
            {
                code: 'EG11',
                name: 'Al Qahirah',
            },
            {
                code: 'EG12',
                name: 'Al Qalyubiyah',
            },
            {
                code: 'EG28',
                name: 'Al Uqsur',
            },
            {
                code: 'EG13',
                name: 'Al Wadi al Jadid',
            },
            {
                code: 'EG15',
                name: 'As Suways',
            },
            {
                code: 'EG14',
                name: 'Ash Sharqiyah',
            },
            {
                code: 'EG16',
                name: 'Aswan',
            },
            {
                code: 'EG17',
                name: 'Asyut',
            },
            {
                code: 'EG18',
                name: 'Bani Suwayf',
            },
            {
                code: 'EG19',
                name: 'Bur Sa`id',
            },
            {
                code: 'EG20',
                name: 'Dumyat',
            },
            {
                code: 'EG26',
                name: 'Janub Sina',
            },
            {
                code: 'EG21',
                name: 'Kafr ash Shaykh',
            },
            {
                code: 'EG22',
                name: 'Matruh',
            },
            {
                code: 'EG23',
                name: 'Qina',
            },
            {
                code: 'EG27',
                name: 'Shamal Sina',
            },
            {
                code: 'EG24',
                name: 'Suhaj',
            },
        ],
    },
    {
        code: 'SV',
        id: 2238,
        name: 'El Salvador',
        states: [
            {
                code: 'ES01',
                name: 'Ahuachapán',
            },
            {
                code: 'ES02',
                name: 'Cabañas',
            },
            {
                code: 'ES03',
                name: 'Chalatenango',
            },
            {
                code: 'ES04',
                name: 'Cuscatlán',
            },
            {
                code: 'ES05',
                name: 'La Libertad',
            },
            {
                code: 'ES06',
                name: 'La Paz',
            },
            {
                code: 'ES07',
                name: 'La Unión',
            },
            {
                code: 'ES08',
                name: 'Morazán',
            },
            {
                code: 'ES09',
                name: 'San Miguel',
            },
            {
                code: 'ES10',
                name: 'San Salvador',
            },
            {
                code: 'ES12',
                name: 'San Vicente',
            },
            {
                code: 'ES11',
                name: 'Santa Ana',
            },
            {
                code: 'ES13',
                name: 'Sonsonate',
            },
            {
                code: 'ES14',
                name: 'Usulután',
            },
        ],
    },
    {
        code: 'GQ',
        id: 2239,
        name: 'Equatorial Guinea',
        states: [],
    },
    {
        code: 'ER',
        id: 2240,
        name: 'Eritrea',
        states: [],
    },
    {
        code: 'EE',
        id: 2241,
        name: 'Estonia',
        states: [
            {
                code: 'EN01',
                name: 'Harju',
            },
            {
                code: 'EN02',
                name: 'Hiiu',
            },
            {
                code: 'EN03',
                name: 'Ida-Viru',
            },
            {
                code: 'EN04',
                name: 'Järva',
            },
            {
                code: 'EN05',
                name: 'Jõgeva',
            },
            {
                code: 'EN07',
                name: 'Lääne',
            },
            {
                code: 'EN08',
                name: 'Lääne-Viru',
            },
            {
                code: 'EN11',
                name: 'Pärnu',
            },
            {
                code: 'EN12',
                name: 'Põlva',
            },
            {
                code: 'EN13',
                name: 'Rapla',
            },
            {
                code: 'EN14',
                name: 'Saare',
            },
            {
                code: 'EN18',
                name: 'Tartu',
            },
            {
                code: 'EN19',
                name: 'Valga',
            },
            {
                code: 'EN20',
                name: 'Viljandi',
            },
            {
                code: 'EN21',
                name: 'Võru',
            },
        ],
    },
    {
        code: 'ET',
        id: 2242,
        name: 'Ethiopia',
        states: [
            {
                code: 'ET44',
                name: 'Addis Ababa',
            },
            {
                code: 'ET45',
                name: 'Afar',
            },
            {
                code: 'ET46',
                name: 'Amhara',
            },
            {
                code: 'ET47',
                name: 'Benshangul-Gumaz',
            },
            {
                code: 'ET48',
                name: 'Dire Dawa',
            },
            {
                code: 'ET49',
                name: 'Gambela Peoples',
            },
            {
                code: 'ET50',
                name: 'Harari People',
            },
            {
                code: 'ET51',
                name: 'Oromia',
            },
            {
                code: 'ET52',
                name: 'Somali',
            },
            {
                code: 'ET54',
                name: 'Southern Nations, Nationalities and Peoples',
            },
            {
                code: 'ET53',
                name: 'Tigray',
            },
        ],
    },
    {
        code: 'FK',
        id: 2415,
        name: 'Falkland Islands (Malvinas)',
        states: [],
    },
    {
        code: 'FI99',
        id: 2388,
        name: 'Faroe Islands',
        states: [],
    },
    {
        code: 'FJ',
        id: 2243,
        name: 'Fiji',
        states: [],
    },
    {
        code: 'FI',
        id: 2244,
        name: 'Finland',
        states: [
            {
                code: 'FI-AL',
                name: 'Ahvenanmaan lääni',
            },
            {
                code: 'AX',
                name: 'Ahvenanmaa',
            },
            {
                code: 'FI.SK',
                name: 'Etelä-Karjala',
            },
            {
                code: 'FI.SO',
                name: 'Etelä-Pohjanmaa',
            },
            {
                code: 'FI.SS',
                name: 'Etelä-Savo',
            },
            {
                code: 'FI-ES',
                name: 'Etelä-Suomen lääni',
            },
            {
                code: 'FI-IS',
                name: 'Itä-Suomen lääni',
            },
            {
                code: 'FI.KA',
                name: 'Kainuu',
            },
            {
                code: 'FI.KH',
                name: 'Kanta-Häme',
            },
            {
                code: 'FI.CO',
                name: 'Keski-Pohjanmaa',
            },
            {
                code: 'FI.CF',
                name: 'Keski-Suomi',
            },
            {
                code: 'FI.KY',
                name: 'Kymenlaakso',
            },
            {
                code: 'FI-LS',
                name: 'Länsi-Suomen lääni',
            },
            {
                code: 'FI-LL',
                name: 'Lapin lääni',
            },
            {
                code: 'FI.LA',
                name: 'Lappi',
            },
            {
                code: 'FI-OL',
                name: 'Oulun lääni',
            },
            {
                code: 'FI.PH',
                name: 'Päijät-Häme',
            },
            {
                code: 'FI.TR',
                name: 'Pirkanmaa',
            },
            {
                code: 'FI.OS',
                name: 'Pohjanmaa',
            },
            {
                code: 'FI.NK',
                name: 'Pohjois-Karjala',
            },
            {
                code: 'FI.NO',
                name: 'Pohjois-Pohjanmaa',
            },
            {
                code: 'FI.NS',
                name: 'Pohjois-Savo',
            },
            {
                code: 'FI.SA',
                name: 'Satakunta',
            },
            {
                code: 'FI.US',
                name: 'Uusimaa',
            },
            {
                code: 'FI.SF',
                name: 'Varsinais-Suomi',
            },
        ],
    },
    {
        code: 'FR',
        id: 2245,
        name: 'France',
        states: [
            {
                code: 'FRC2',
                name: 'Ain',
            },
            {
                code: 'FRC3',
                name: 'Aisne',
            },
            {
                code: 'FRC4',
                name: 'Allier',
            },
            {
                code: 'FRC6',
                name: 'Alpes-Maritimes',
            },
            {
                code: 'FRC5',
                name: 'Alpes-de-Haute-Provence',
            },
            {
                code: 'FRC1',
                name: 'Alsace',
            },
            {
                code: 'FR97',
                name: 'Aquitaine',
            },
            {
                code: 'FRC7',
                name: 'Ardèche',
            },
            {
                code: 'FRC8',
                name: 'Ardennes',
            },
            {
                code: 'FRC9',
                name: 'Ariège',
            },
            {
                code: 'FRD1',
                name: 'Aube',
            },
            {
                code: 'FRD2',
                name: 'Aude',
            },
            {
                code: 'FR.AR',
                name: 'Auvergne-Rhône-Alpes',
            },
            {
                code: 'FR98',
                name: 'Auvergne',
            },
            {
                code: 'FRD3',
                name: 'Aveyron',
            },
            {
                code: 'FRD4',
                name: 'Bas-Rhin',
            },
            {
                code: 'FR99',
                name: 'Basse-Normandie',
            },
            {
                code: 'FRD5',
                name: 'Bouches-du-Rhône',
            },
            {
                code: 'FR.BF',
                name: 'Bourgogne-Franche-Comté',
            },
            {
                code: 'FRA1',
                name: 'Bourgogne',
            },
            {
                code: 'FRA2',
                name: 'Bretagne',
            },
            {
                code: 'FRD8',
                name: 'Calvados',
            },
            {
                code: 'FRD9',
                name: 'Cantal',
            },
            {
                code: 'FRA3',
                name: 'Centre',
            },
            {
                code: 'FR.CN',
                name: 'Centre-Val de Loire',
            },
            {
                code: 'FRA4',
                name: 'Champagne-Ardenne',
            },
            {
                code: 'FRE1',
                name: 'Charente-Maritime',
            },
            {
                code: 'FRE2',
                name: 'Charente',
            },
            {
                code: 'FRE3',
                name: 'Cher',
            },
            {
                code: 'FRE4',
                name: 'Corrèze',
            },
            {
                code: 'FRE5',
                name: 'Corse-du-Sud',
            },
            {
                code: 'FR.CE',
                name: 'Corse',
            },
            {
                code: 'FRD6',
                name: "Côte-d'Or",
            },
            {
                code: 'FRD7',
                name: "Côtes-d'Armor",
            },
            {
                code: 'FRE6',
                name: 'Creuse',
            },
            {
                code: 'FRE7',
                name: 'Deux-Sèvres',
            },
            {
                code: 'FRE8',
                name: 'Dordogne',
            },
            {
                code: 'FRE9',
                name: 'Doubs',
            },
            {
                code: 'FRF1',
                name: 'Drôme',
            },
            {
                code: 'FRF2',
                name: 'Essonne',
            },
            {
                code: 'FRF3',
                name: 'Eure-et-Loir',
            },
            {
                code: 'FRF4',
                name: 'Eure',
            },
            {
                code: 'FRF5',
                name: 'Finistère',
            },
            {
                code: 'FRA6',
                name: 'Franche-Comte',
            },
            {
                code: 'FRF6',
                name: 'Gard',
            },
            {
                code: 'FRF7',
                name: 'Gers',
            },
            {
                code: 'FRF8',
                name: 'Gironde',
            },
            {
                code: 'FR.AO',
                name: 'Grand Est',
            },
            {
                code: 'FRG1',
                name: 'Haut-Rhin',
            },
            {
                code: 'FRG2',
                name: 'Haute-Corse',
            },
            {
                code: 'FRG3',
                name: 'Haute-Garonne',
            },
            {
                code: 'FRG4',
                name: 'Haute-Loire',
            },
            {
                code: 'FRG5',
                name: 'Haute-Marne',
            },
            {
                code: 'FRA7',
                name: 'Haute-Normandie',
            },
            {
                code: 'FRG6',
                name: 'Haute-Saône',
            },
            {
                code: 'FRG7',
                name: 'Haute-Savoie',
            },
            {
                code: 'FRG8',
                name: 'Haute-Vienne',
            },
            {
                code: 'FRG9',
                name: 'Hautes-Alpes',
            },
            {
                code: 'FRH1',
                name: 'Hautes-Pyrénées',
            },
            {
                code: 'FR.NC',
                name: 'Hauts-de-France',
            },
            {
                code: 'FRH2',
                name: 'Hauts-de-Seine',
            },
            {
                code: 'FRF9',
                name: 'Hérault',
            },
            {
                code: 'FRA8',
                name: 'Ile-de-France',
            },
            {
                code: 'FRH3',
                name: 'Ille-et-Vilaine',
            },
            {
                code: 'FRH5',
                name: 'Indre',
            },
            {
                code: 'FRH4',
                name: 'Indre-et-Loire',
            },
            {
                code: 'FRH6',
                name: 'Isère',
            },
            {
                code: 'FRH7',
                name: 'Jura',
            },
            {
                code: 'FRH8',
                name: 'Landes',
            },
            {
                code: 'FRA9',
                name: 'Languedoc-Roussillon',
            },
            {
                code: 'FRB1',
                name: 'Limousin',
            },
            {
                code: 'FRI3',
                name: 'Loir-et-Cher',
            },
            {
                code: 'FRI2',
                name: 'Loiret',
            },
            {
                code: 'FRI1',
                name: 'Loire',
            },
            {
                code: 'FRH9',
                name: 'Loire-Atlantique',
            },
            {
                code: 'FRB2',
                name: 'Lorraine',
            },
            {
                code: 'FRI4',
                name: 'Lot-et-Garonne',
            },
            {
                code: 'FRI5',
                name: 'Lot',
            },
            {
                code: 'FRI6',
                name: 'Lozère',
            },
            {
                code: 'FRI7',
                name: 'Maine-et-Loire',
            },
            {
                code: 'FRI8',
                name: 'Manche',
            },
            {
                code: 'FRI9',
                name: 'Marne',
            },
            {
                code: 'FRJ1',
                name: 'Mayenne',
            },
            {
                code: 'FRJ2',
                name: 'Meurthe-et-Moselle',
            },
            {
                code: 'FRJ3',
                name: 'Meuse',
            },
            {
                code: 'FRB3',
                name: 'Midi-Pyrenees',
            },
            {
                code: 'FRJ4',
                name: 'Morbihan',
            },
            {
                code: 'FRJ5',
                name: 'Moselle',
            },
            {
                code: 'FRJ6',
                name: 'Nièvre',
            },
            {
                code: 'FRJ7',
                name: 'Nord France',
            },
            {
                code: 'FR67',
                name: 'Nord',
            },
            {
                code: 'FR.ND',
                name: 'Normandie',
            },
            {
                code: 'FR.AC',
                name: 'Nouvelle-Aquitaine',
            },
            {
                code: 'FR.LP',
                name: 'Occitanie',
            },
            {
                code: 'FRJ8',
                name: 'Oise',
            },
            {
                code: 'FRJ9',
                name: 'Orne',
            },
            {
                code: 'FRK1',
                name: 'Paris',
            },
            {
                code: 'FRB4',
                name: 'Pas-de-Calais',
            },
            {
                code: 'FRB5',
                name: 'Pays de la Loire',
            },
            {
                code: 'FRB6',
                name: 'Picardie',
            },
            {
                code: 'FRB7',
                name: 'Poitou-Charentes',
            },
            {
                code: 'FRB8',
                name: "Provence-Alpes-Cote d'Azur",
            },
            {
                code: 'FRK2',
                name: 'Puy-de-Dôme',
            },
            {
                code: 'FRK3',
                name: 'Pyrénées-Atlantiques',
            },
            {
                code: 'FRK4',
                name: 'Pyrénées-Orientales',
            },
            {
                code: 'FRB9',
                name: 'Rhône',
            },
            {
                code: 'FRK5',
                name: 'Saône-et-Loire',
            },
            {
                code: 'FRK6',
                name: 'Sarthe',
            },
            {
                code: 'FRK7',
                name: 'Savoie',
            },
            {
                code: 'FRK9',
                name: 'Seine-Maritime',
            },
            {
                code: 'FRL1',
                name: 'Seine-Saint-Denis',
            },
            {
                code: 'FRK8',
                name: 'Seine-et-Marne',
            },
            {
                code: 'FRL2',
                name: 'Somme',
            },
            {
                code: 'FRL3',
                name: 'Tarn-et-Garonne',
            },
            {
                code: 'FRL4',
                name: 'Tarn',
            },
            {
                code: 'FRL5',
                name: 'Territoire de Belfor',
            },
            {
                code: 'FR14',
                name: 'Territoire de Belfort',
            },
            {
                code: 'FRL6',
                name: "Val-d'Oise",
            },
            {
                code: 'FRL7',
                name: 'Val-de-Marne',
            },
            {
                code: 'FRL8',
                name: 'Var',
            },
            {
                code: 'FRL9',
                name: 'Vaucluse',
            },
            {
                code: 'FRM1',
                name: 'Vendée',
            },
            {
                code: 'FRM2',
                name: 'Vienne',
            },
            {
                code: 'FR94',
                name: 'Ville de Paris',
            },
            {
                code: 'FRM3',
                name: 'Vosges',
            },
            {
                code: 'FRM4',
                name: 'Yonne',
            },
            {
                code: 'FRM5',
                name: 'Yvelines',
            },
            {
                code: 'FR.IF',
                name: 'Île-de-France',
            },
        ],
    },
    {
        code: 'GF',
        id: 2416,
        name: 'French Guiana',
        states: [],
    },
    {
        code: 'PF',
        id: 2417,
        name: 'French Polynesia',
        states: [],
    },
    {
        code: 'TF',
        id: 2418,
        name: 'French Southern Territories',
        states: [],
    },
    {
        code: 'GA',
        id: 2246,
        name: 'Gabon',
        states: [
            {
                code: 'GB01',
                name: 'Estuaire',
            },
            {
                code: 'GB02',
                name: 'Haut-Ogooué',
            },
            {
                code: 'GB03',
                name: 'Moyen-Ogooué',
            },
            {
                code: 'GB04',
                name: 'Ngounié',
            },
            {
                code: 'GB05',
                name: 'Nyanga',
            },
            {
                code: 'GB06',
                name: 'Ogooué-Ivindo',
            },
            {
                code: 'GB07',
                name: 'Ogooué-Lolo',
            },
            {
                code: 'GB08',
                name: 'Ogooué-Maritime',
            },
            {
                code: 'GB09',
                name: 'Woleu-Ntem',
            },
        ],
    },
    {
        code: 'GM',
        id: 2389,
        name: 'Gambia',
        states: [
            {
                code: 'GA01',
                name: 'Banjul',
            },
            {
                code: 'GA03',
                name: 'Central River',
            },
            {
                code: 'GA02',
                name: 'Lower River',
            },
            {
                code: 'GA07',
                name: 'North Bank',
            },
            {
                code: 'GA04',
                name: 'Upper River',
            },
            {
                code: 'GA05',
                name: 'West Coast',
            },
        ],
    },
    {
        code: 'GE',
        id: 2248,
        name: 'Georgia',
        states: [
            {
                code: 'GG02',
                name: 'Abkhazia',
            },
            {
                code: 'GG04',
                name: 'Ajaria',
            },
            {
                code: 'GG65',
                name: 'Guria',
            },
            {
                code: 'GG66',
                name: 'Imereti',
            },
            {
                code: 'GG67',
                name: 'Kakheti',
            },
            {
                code: 'GG68',
                name: 'Kvemo Kartli',
            },
            {
                code: 'GG69',
                name: 'Mtskheta-Mtianeti',
            },
            {
                code: 'GG70',
                name: 'Racha-Lochkhumi-Kvemo Svaneti',
            },
            {
                code: 'GG71',
                name: 'Samegrelo-Zemo Svaneti',
            },
            {
                code: 'GG72',
                name: 'Samtskhe-Javakheti',
            },
            {
                code: 'GG73',
                name: 'Shida Kartli',
            },
            {
                code: 'GG51',
                name: 'Tbilisi',
            },
        ],
    },
    {
        code: 'DE',
        id: 2249,
        name: 'Germany',
        states: [
            {
                code: 'BW',
                name: 'Baden-Württemberg',
            },
            {
                code: 'BY',
                name: 'Bayern',
            },
            {
                code: 'BE',
                name: 'Berlin',
            },
            {
                code: 'BB',
                name: 'Brandenburg',
            },
            {
                code: 'HB',
                name: 'Bremen',
            },
            {
                code: 'HH',
                name: 'Hamburg',
            },
            {
                code: 'HE',
                name: 'Hessen',
            },
            {
                code: 'MV',
                name: 'Mecklenburg-Vorpommern',
            },
            {
                code: 'NI',
                name: 'Niedersachsen',
            },
            {
                code: 'NW',
                name: 'Nordrhein-Westfalen',
            },
            {
                code: 'RP',
                name: 'Rheinland-Pfalz',
            },
            {
                code: 'SL',
                name: 'Saarland',
            },
            {
                code: 'SN',
                name: 'Sachsen',
            },
            {
                code: 'ST',
                name: 'Sachsen-Anhalt',
            },
            {
                code: 'SH',
                name: 'Schleswig-Holstein',
            },
            {
                code: 'TH',
                name: 'Thüringen',
            },
        ],
    },
    {
        code: 'GH',
        id: 2250,
        name: 'Ghana',
        states: [
            {
                code: 'GH02',
                name: 'Ashanti',
            },
            {
                code: 'GH03',
                name: 'Brong-Ahafo',
            },
            {
                code: 'GH04',
                name: 'Central',
            },
            {
                code: 'GH05',
                name: 'Eastern',
            },
            {
                code: 'GH01',
                name: 'Greater Accra',
            },
            {
                code: 'GH06',
                name: 'Northern',
            },
            {
                code: 'GH10',
                name: 'Upper East',
            },
            {
                code: 'GH11',
                name: 'Upper West',
            },
            {
                code: 'GH08',
                name: 'Volta',
            },
            {
                code: 'GH09',
                name: 'Western',
            },
        ],
    },
    {
        code: 'G999',
        id: 2390,
        name: 'Gibraltar',
        states: [
            {
                code: 'GI.GI',
                name: 'Gibraltar',
            },
        ],
    },
    {
        code: 'GR',
        id: 2251,
        name: 'Greece',
        states: [
            {
                code: '13',
                name: 'Achaïa',
            },
            {
                code: '69',
                name: 'Agio Oros',
            },
            {
                code: '01',
                name: 'Aitolia kai Akarnania',
            },
            {
                code: '11',
                name: 'Argolida',
            },
            {
                code: '12',
                name: 'Arkadia',
            },
            {
                code: '31',
                name: 'Arta',
            },
            {
                code: 'A1',
                name: 'Attiki',
            },
            {
                code: '64',
                name: 'Chalkidiki',
            },
            {
                code: '94',
                name: 'Chania',
            },
            {
                code: '85',
                name: 'Chios',
            },
            {
                code: '81',
                name: 'Dodekanisos',
            },
            {
                code: '52',
                name: 'Drama',
            },
            {
                code: '71',
                name: 'Evros',
            },
            {
                code: '05',
                name: 'Evrytania',
            },
            {
                code: '04',
                name: 'Evvoia',
            },
            {
                code: '63',
                name: 'Florina',
            },
            {
                code: '07',
                name: 'Fokida',
            },
            {
                code: '06',
                name: 'Fthiotida',
            },
            {
                code: '51',
                name: 'Grevena',
            },
            {
                code: '14',
                name: 'Ileia',
            },
            {
                code: '53',
                name: 'Imathia',
            },
            {
                code: '33',
                name: 'Ioannina',
            },
            {
                code: '91',
                name: 'Irakleio',
            },
            {
                code: '41',
                name: 'Karditsa',
            },
            {
                code: '56',
                name: 'Kastoria',
            },
            {
                code: '55',
                name: 'Kavala',
            },
            {
                code: '23',
                name: 'Kefallonia',
            },
            {
                code: '22',
                name: 'Kerkyra',
            },
            {
                code: '57',
                name: 'Kilkis',
            },
            {
                code: '15',
                name: 'Korinthia',
            },
            {
                code: '58',
                name: 'Kozani',
            },
            {
                code: '82',
                name: 'Kyklades',
            },
            {
                code: '16',
                name: 'Lakonia',
            },
            {
                code: '42',
                name: 'Larisa',
            },
            {
                code: '92',
                name: 'Lasithi',
            },
            {
                code: '24',
                name: 'Lefkada',
            },
            {
                code: '83',
                name: 'Lesvos',
            },
            {
                code: '43',
                name: 'Magnisia',
            },
            {
                code: '17',
                name: 'Messinia',
            },
            {
                code: '59',
                name: 'Pella',
            },
            {
                code: '61',
                name: 'Pieria',
            },
            {
                code: '34',
                name: 'Preveza',
            },
            {
                code: '93',
                name: 'Rethymno',
            },
            {
                code: '73',
                name: 'Rodopi',
            },
            {
                code: '84',
                name: 'Samos',
            },
            {
                code: '62',
                name: 'Serres',
            },
            {
                code: '32',
                name: 'Thesprotia',
            },
            {
                code: '54',
                name: 'Thessaloniki',
            },
            {
                code: '44',
                name: 'Trikala',
            },
            {
                code: '03',
                name: 'Voiotia',
            },
            {
                code: '72',
                name: 'Xanthi',
            },
            {
                code: '21',
                name: 'Zakynthos',
            },
        ],
    },
    {
        code: 'GL',
        id: 2252,
        name: 'Greenland',
        states: [],
    },
    {
        code: 'GD',
        id: 2253,
        name: 'Grenada',
        states: [],
    },
    {
        code: 'GP',
        id: 2419,
        name: 'Guadeloupe',
        states: [],
    },
    {
        code: 'GU',
        id: 2376,
        name: 'Guam',
        states: [],
    },
    {
        code: 'GT',
        id: 2371,
        name: 'Guatemala',
        states: [
            {
                code: 'GT01',
                name: 'Alta Verapaz',
            },
            {
                code: 'GT02',
                name: 'Baja Verapaz',
            },
            {
                code: 'GT03',
                name: 'Chimaltenango',
            },
            {
                code: 'GT04',
                name: 'Chiquimula',
            },
            {
                code: 'GT05',
                name: 'El Progreso',
            },
            {
                code: 'GT06',
                name: 'Escuintla',
            },
            {
                code: 'GT07',
                name: 'Guatemala',
            },
            {
                code: 'GT08',
                name: 'Huehuetenango',
            },
            {
                code: 'GT09',
                name: 'Izabal',
            },
            {
                code: 'GT10',
                name: 'Jalapa',
            },
            {
                code: 'GT11',
                name: 'Jutiapa',
            },
            {
                code: 'GT12',
                name: 'Petén',
            },
            {
                code: 'GT13',
                name: 'Quetzaltenango',
            },
            {
                code: 'GT14',
                name: 'Quiché',
            },
            {
                code: 'GT15',
                name: 'Retalhuleu',
            },
            {
                code: 'GT16',
                name: 'Sacatepéquez',
            },
            {
                code: 'GT17',
                name: 'San Marcos',
            },
            {
                code: 'GT18',
                name: 'Santa Rosa',
            },
            {
                code: 'GT19',
                name: 'Sololá',
            },
            {
                code: 'GT20',
                name: 'Suchitepéquez',
            },
            {
                code: 'GT21',
                name: 'Totonicapán',
            },
            {
                code: 'GT22',
                name: 'Zacapa',
            },
        ],
    },
    {
        code: 'GG',
        id: 2420,
        name: 'Guernsey',
        states: [],
    },
    {
        code: 'GN',
        id: 2255,
        name: 'Guinea',
        states: [
            {
                code: 'GV01',
                name: 'Beyla',
            },
            {
                code: 'GV02',
                name: 'Boffa',
            },
            {
                code: 'GV03',
                name: 'Boké',
            },
            {
                code: 'GV04',
                name: 'Conakry',
            },
            {
                code: 'GV30',
                name: 'Coyah',
            },
            {
                code: 'GV05',
                name: 'Dabola',
            },
            {
                code: 'GV06',
                name: 'Dalaba',
            },
            {
                code: 'GV07',
                name: 'Dinguiraye',
            },
            {
                code: 'GV31',
                name: 'Dubréka',
            },
            {
                code: 'GV09',
                name: 'Faranah',
            },
            {
                code: 'GV10',
                name: 'Forécariah',
            },
            {
                code: 'GV11',
                name: 'Fria',
            },
            {
                code: 'GV12',
                name: 'Gaoual',
            },
            {
                code: 'GV13',
                name: 'Guéckédou',
            },
            {
                code: 'GV32',
                name: 'Kankan',
            },
            {
                code: 'GV15',
                name: 'Kérouané',
            },
            {
                code: 'GV16',
                name: 'Kindia',
            },
            {
                code: 'GV17',
                name: 'Kissidougou',
            },
            {
                code: 'GV33',
                name: 'Koubia',
            },
            {
                code: 'GV18',
                name: 'Koundara',
            },
            {
                code: 'GV19',
                name: 'Kouroussa',
            },
            {
                code: 'GV34',
                name: 'Labé',
            },
            {
                code: 'GV35',
                name: 'Lélouma',
            },
            {
                code: 'GV36',
                name: 'Lola',
            },
            {
                code: 'GV21',
                name: 'Macenta',
            },
            {
                code: 'GV22',
                name: 'Mali',
            },
            {
                code: 'GV23',
                name: 'Mamou',
            },
            {
                code: 'GV37',
                name: 'Mandiana',
            },
            {
                code: 'GV38',
                name: 'Nzérékoré',
            },
            {
                code: 'GV25',
                name: 'Pita',
            },
            {
                code: 'GV39',
                name: 'Siguiri',
            },
            {
                code: 'GV27',
                name: 'Télimélé',
            },
            {
                code: 'GV28',
                name: 'Tougué',
            },
            {
                code: 'GV29',
                name: 'Yomou',
            },
        ],
    },
    {
        code: 'GW',
        id: 2256,
        name: 'Guinea-Bissau',
        states: [
            {
                code: 'PU01',
                name: 'Bafatá',
            },
            {
                code: 'PU12',
                name: 'Biombo',
            },
            {
                code: 'PU11',
                name: 'Bissau',
            },
            {
                code: 'PU05',
                name: 'Bolama',
            },
            {
                code: 'PU06',
                name: 'Cacheu',
            },
            {
                code: 'PU10',
                name: 'Gabú',
            },
            {
                code: 'PU04',
                name: 'Oio',
            },
            {
                code: 'PU02',
                name: 'Quinara',
            },
            {
                code: 'PU07',
                name: 'Tombali',
            },
        ],
    },
    {
        code: 'GY',
        id: 2257,
        name: 'Guyana',
        states: [
            {
                code: 'GY10',
                name: 'Barima-Waini',
            },
            {
                code: 'GY11',
                name: 'Cuyuni-Mazaruni',
            },
            {
                code: 'GY12',
                name: 'Demerara-Mahaica',
            },
            {
                code: 'GY13',
                name: 'East Berbice-Corentyne',
            },
            {
                code: 'GY14',
                name: 'Essequibo Islands-West Demerara',
            },
            {
                code: 'GY15',
                name: 'Mahaica-Berbice',
            },
            {
                code: 'GY16',
                name: 'Pomeroon-Supenaam',
            },
            {
                code: 'GY17',
                name: 'Potaro-Siparuni',
            },
            {
                code: 'GY18',
                name: 'Upper Demerara-Berbice',
            },
            {
                code: 'GY19',
                name: 'Upper Takutu-Upper Essequibo',
            },
        ],
    },
    {
        code: 'HT',
        id: 2258,
        name: 'Haiti',
        states: [
            {
                code: 'HA07',
                name: 'Centre',
            },
            {
                code: 'HA14',
                name: "Grand' Anse",
            },
            {
                code: 'HA06',
                name: "L'Artibonite",
            },
            {
                code: 'HA15',
                name: 'Nippes',
            },
            {
                code: 'HA10',
                name: 'Nord-Est',
            },
            {
                code: 'HA03',
                name: 'Nord-Ouest',
            },
            {
                code: 'HA09',
                name: 'Nord',
            },
            {
                code: 'HA11',
                name: 'Ouest',
            },
            {
                code: 'HA13',
                name: 'Sud-Est',
            },
            {
                code: 'HA12',
                name: 'Sud',
            },
        ],
    },
    {
        code: 'HM',
        id: 2421,
        name: 'Heard and McDonald Islands',
        states: [],
    },
    {
        code: 'VA',
        id: 2362,
        name: 'Holy See (Vatican City State)',
        states: [],
    },
    {
        code: 'HN',
        id: 2259,
        name: 'Honduras',
        states: [
            {
                code: 'HO01',
                name: 'Atlántida',
            },
            {
                code: 'HO02',
                name: 'Choluteca',
            },
            {
                code: 'HO03',
                name: 'Colón',
            },
            {
                code: 'HO04',
                name: 'Comayagua',
            },
            {
                code: 'HO05',
                name: 'Copán',
            },
            {
                code: 'HO06',
                name: 'Cortés',
            },
            {
                code: 'HO07',
                name: 'El Paraíso',
            },
            {
                code: 'HO08',
                name: 'Francisco Morazán',
            },
            {
                code: 'HO09',
                name: 'Gracias a Dios',
            },
            {
                code: 'HO10',
                name: 'Intibucá',
            },
            {
                code: 'HO11',
                name: 'Islas de la Bahía',
            },
            {
                code: 'HO12',
                name: 'La Paz',
            },
            {
                code: 'HO13',
                name: 'Lempira',
            },
            {
                code: 'HO14',
                name: 'Ocotepeque',
            },
            {
                code: 'HO15',
                name: 'Olancho',
            },
            {
                code: 'HO16',
                name: 'Santa Bárbara',
            },
            {
                code: 'HO17',
                name: 'Valle',
            },
            {
                code: 'HO18',
                name: 'Yoro',
            },
        ],
    },
    {
        code: 'HK',
        id: 2377,
        name: 'Hong Kong',
        states: [
            {
                code: 'HK001',
                name: 'Hong Kong Island',
            },
            {
                code: 'HK002',
                name: 'Kowloon',
            },
            {
                code: 'HK003',
                name: 'New Territories',
            },
        ],
    },
    {
        code: 'HU',
        id: 2260,
        name: 'Hungary',
        states: [
            {
                code: 'BK',
                name: 'Bács-Kiskun',
            },
            {
                code: 'BA',
                name: 'Baranya',
            },
            {
                code: 'BE',
                name: 'Békés',
            },
            {
                code: 'BC',
                name: 'Békéscsaba',
            },
            {
                code: 'BZ',
                name: 'Borsod-Abaúj-Zemplén',
            },
            {
                code: 'BU',
                name: 'Budapest',
            },
            {
                code: 'CS',
                name: 'Csongrád',
            },
            {
                code: 'DE',
                name: 'Debrecen',
            },
            {
                code: 'DU',
                name: 'Dunaújváros',
            },
            {
                code: 'EG',
                name: 'Eger',
            },
            {
                code: 'ER',
                name: 'Erd',
            },
            {
                code: 'FE',
                name: 'Fejér',
            },
            {
                code: 'GY',
                name: 'Gyor',
            },
            {
                code: 'GS',
                name: 'Gyor-Moson-Sopron',
            },
            {
                code: 'HB',
                name: 'Hajdú-Bihar',
            },
            {
                code: 'HE',
                name: 'Heves',
            },
            {
                code: 'HV',
                name: 'Hódmezovásárhely',
            },
            {
                code: 'JN',
                name: 'Jász-Nagykun-Szolnok',
            },
            {
                code: 'KV',
                name: 'Kaposvár',
            },
            {
                code: 'KM',
                name: 'Kecskemét',
            },
            {
                code: 'KE',
                name: 'Komárom-Esztergom',
            },
            {
                code: 'MI',
                name: 'Miskolc',
            },
            {
                code: 'NK',
                name: 'Nagykanizsa',
            },
            {
                code: 'NO',
                name: 'Nógrád',
            },
            {
                code: 'NY',
                name: 'Nyíregyháza',
            },
            {
                code: 'PS',
                name: 'Pécs',
            },
            {
                code: 'PE',
                name: 'Pest',
            },
            {
                code: 'ST',
                name: 'Salgótarján',
            },
            {
                code: 'SO',
                name: 'Somogy',
            },
            {
                code: 'SN',
                name: 'Sopron',
            },
            {
                code: 'SZ',
                name: 'Szabolcs-Szatmár-Bereg',
            },
            {
                code: 'SD',
                name: 'Szeged',
            },
            {
                code: 'SF',
                name: 'Székesfehérvár',
            },
            {
                code: 'SS',
                name: 'Szekszárd',
            },
            {
                code: 'SK',
                name: 'Szolnok',
            },
            {
                code: 'SH',
                name: 'Szombathely',
            },
            {
                code: 'TB',
                name: 'Tatabánya',
            },
            {
                code: 'TO',
                name: 'Tolna',
            },
            {
                code: 'VA',
                name: 'Vas',
            },
            {
                code: 'VE',
                name: 'Veszprém',
            },
            {
                code: 'VM',
                name: 'Veszprém City',
            },
            {
                code: 'ZA',
                name: 'Zala',
            },
            {
                code: 'ZE',
                name: 'Zalaegerszeg',
            },
        ],
    },
    {
        code: 'IS',
        id: 2261,
        name: 'Iceland',
        states: [
            {
                code: '7',
                name: 'Austurland',
            },
            {
                code: '1',
                name: 'Höfuðborgarsvæði utan Reykjavíkur',
            },
            {
                code: '6',
                name: 'Norðurland eystra',
            },
            {
                code: '5',
                name: 'Norðurland vestra',
            },
            {
                code: '0',
                name: 'Reykjavík',
            },
            {
                code: '8',
                name: 'Suðurland',
            },
            {
                code: '2',
                name: 'Suðurnes',
            },
            {
                code: '4',
                name: 'Vestfirðir',
            },
            {
                code: '3',
                name: 'Vesturland',
            },
        ],
    },
    {
        code: 'IN',
        id: 2262,
        name: 'India',
        states: [
            {
                code: 'AN',
                name: 'Andaman and Nicobar Islands',
            },
            {
                code: 'AP',
                name: 'Andhra Pradesh',
            },
            {
                code: 'AR',
                name: 'Arunachal Pradesh',
            },
            {
                code: 'AS',
                name: 'Assam',
            },
            {
                code: 'BR',
                name: 'Bihar',
            },
            {
                code: 'CH',
                name: 'Chandigarh',
            },
            {
                code: 'CT',
                name: 'Chhattisgarh',
            },
            {
                code: 'DN',
                name: 'Dadra and Nagar Haveli',
            },
            {
                code: 'DD',
                name: 'Daman and Diu',
            },
            {
                code: 'DL',
                name: 'Delhi',
            },
            {
                code: 'GA',
                name: 'Goa',
            },
            {
                code: 'GJ',
                name: 'Gujarat',
            },
            {
                code: 'HR',
                name: 'Haryana',
            },
            {
                code: 'HP',
                name: 'Himachal Pradesh',
            },
            {
                code: 'JK',
                name: 'Jammu and Kashmir',
            },
            {
                code: 'JH',
                name: 'Jharkhand',
            },
            {
                code: 'KA',
                name: 'Karnataka',
            },
            {
                code: 'KL',
                name: 'Kerala',
            },
            {
                code: 'LD',
                name: 'Lakshadweep',
            },
            {
                code: 'MP',
                name: 'Madhya Pradesh',
            },
            {
                code: 'MH',
                name: 'Maharashtra',
            },
            {
                code: 'MN',
                name: 'Manipur',
            },
            {
                code: 'ML',
                name: 'Meghalaya',
            },
            {
                code: 'MZ',
                name: 'Mizoram',
            },
            {
                code: 'NL',
                name: 'Nagaland',
            },
            {
                code: 'OR',
                name: 'Orissa',
            },
            {
                code: 'PY',
                name: 'Pondicherry',
            },
            {
                code: 'PB',
                name: 'Punjab',
            },
            {
                code: 'RJ',
                name: 'Rajasthan',
            },
            {
                code: 'SK',
                name: 'Sikkim',
            },
            {
                code: 'TN',
                name: 'Tamil Nadu',
            },
            {
                code: 'TG',
                name: 'Telangana',
            },
            {
                code: 'TR',
                name: 'Tripura',
            },
            {
                code: 'UP',
                name: 'Uttar Pradesh',
            },
            {
                code: 'UL',
                name: 'Uttaranchal',
            },
            {
                code: 'WB',
                name: 'West Bengal',
            },
        ],
    },
    {
        code: 'ID',
        id: 2263,
        name: 'Indonesia',
        states: [
            {
                code: 'AC',
                name: 'Aceh',
            },
            {
                code: 'BA',
                name: 'Bali',
            },
            {
                code: 'BB',
                name: 'Bangka Belitung',
            },
            {
                code: 'BT',
                name: 'Banten',
            },
            {
                code: 'BE',
                name: 'Bengkulu',
            },
            {
                code: 'GO',
                name: 'Gorontalo',
            },
            {
                code: 'JK',
                name: 'Jakarta Raya',
            },
            {
                code: 'JA',
                name: 'Jambi',
            },
            {
                code: 'JB',
                name: 'Jawa Barat',
            },
            {
                code: 'JT',
                name: 'Jawa Tengah',
            },
            {
                code: 'JI',
                name: 'Jawa Timur',
            },
            {
                code: 'KB',
                name: 'Kalimantan Barat',
            },
            {
                code: 'KS',
                name: 'Kalimantan Selatan',
            },
            {
                code: 'KT',
                name: 'Kalimantan Tengah',
            },
            {
                code: 'KI',
                name: 'Kalimantan Timur',
            },
            {
                code: 'KR',
                name: 'Kepulauan Riau',
            },
            {
                code: 'LA',
                name: 'Lampung',
            },
            {
                code: 'MA',
                name: 'Maluku',
            },
            {
                code: 'MU',
                name: 'Maluku Utara',
            },
            {
                code: 'NB',
                name: 'Nusa Tenggara Barat',
            },
            {
                code: 'NT',
                name: 'Nusa Tenggara Timur',
            },
            {
                code: 'PA',
                name: 'Papua',
            },
            {
                code: 'PB',
                name: 'Papua Barat',
            },
            {
                code: 'RI',
                name: 'Riau',
            },
            {
                code: 'SR',
                name: 'Sulawesi Barat',
            },
            {
                code: 'SN',
                name: 'Sulawesi Selatan',
            },
            {
                code: 'ST',
                name: 'Sulawesi Tengah',
            },
            {
                code: 'SG',
                name: 'Sulawesi Tenggara',
            },
            {
                code: 'SA',
                name: 'Sulawesi Utara',
            },
            {
                code: 'SB',
                name: 'Sumatera Barat',
            },
            {
                code: 'SS',
                name: 'Sumatera Selatan',
            },
            {
                code: 'SU',
                name: 'Sumatera Utara',
            },
            {
                code: 'YO',
                name: 'Yogyakarta',
            },
        ],
    },
    {
        code: 'IR',
        id: 2264,
        name: 'Iran; Islamic Republic of',
        states: [
            {
                code: 'IR44',
                name: 'Alborz',
            },
            {
                code: 'IR32',
                name: 'Ardebil',
            },
            {
                code: 'IR22',
                name: 'Bushehr',
            },
            {
                code: 'IR03',
                name: 'Chahar Mahall and Bakhtiari',
            },
            {
                code: 'IR33',
                name: 'East Azarbaijan',
            },
            {
                code: 'IR28',
                name: 'Esfahan',
            },
            {
                code: 'IR07',
                name: 'Fars',
            },
            {
                code: 'IR08',
                name: 'Gilan',
            },
            {
                code: 'IR37',
                name: 'Golestan',
            },
            {
                code: 'IR09',
                name: 'Hamadan',
            },
            {
                code: 'IR11',
                name: 'Hormozgan',
            },
            {
                code: 'IR42',
                name: 'IRazavi Khorasan',
            },
            {
                code: 'IR10',
                name: 'Ilam',
            },
            {
                code: 'IR29',
                name: 'Kerman',
            },
            {
                code: 'IR13',
                name: 'Kermanshah',
            },
            {
                code: 'IR15',
                name: 'Khuzestan',
            },
            {
                code: 'IR05',
                name: 'Kohgiluyeh and Buyer Ahmad',
            },
            {
                code: 'IR16',
                name: 'Kordestan',
            },
            {
                code: 'IR23',
                name: 'Lorestan',
            },
            {
                code: 'IR34',
                name: 'Markazi',
            },
            {
                code: 'IR35',
                name: 'Mazandaran',
            },
            {
                code: 'IR43',
                name: 'North Khorasan',
            },
            {
                code: 'IR38',
                name: 'Qazvin',
            },
            {
                code: 'IR39',
                name: 'Qom',
            },
            {
                code: 'IR25',
                name: 'Semnan',
            },
            {
                code: 'IR04',
                name: 'Sistan and Baluchestan',
            },
            {
                code: 'IR41',
                name: 'South Khorasan',
            },
            {
                code: 'IR26',
                name: 'Tehran',
            },
            {
                code: 'IR01',
                name: 'West Azarbaijan',
            },
            {
                code: 'IR40',
                name: 'Yazd',
            },
            {
                code: 'IR36',
                name: 'Zanjan',
            },
        ],
    },
    {
        code: 'IQ',
        id: 2265,
        name: 'Iraq',
        states: [
            {
                code: 'IZ01',
                name: 'Al-Anbar',
            },
            {
                code: 'IZ02',
                name: 'Al-Basrah',
            },
            {
                code: 'IZ03',
                name: 'Al-Muthanna',
            },
            {
                code: 'IZ04',
                name: 'Al-Qadisiyah',
            },
            {
                code: 'IZ17',
                name: 'An-Najaf',
            },
            {
                code: 'IZ11',
                name: 'Arbil',
            },
            {
                code: 'IZ05',
                name: 'As-Sulaymaniyah',
            },
            {
                code: 'IZ13',
                name: "At-Ta'mim",
            },
            {
                code: 'IZ06',
                name: 'Babil',
            },
            {
                code: 'IZ07',
                name: 'Baghdad',
            },
            {
                code: 'IZ08',
                name: 'Dahuk',
            },
            {
                code: 'IZ09',
                name: 'Dhi Qar',
            },
            {
                code: 'IZ10',
                name: 'Diyala',
            },
            {
                code: 'IZ12',
                name: 'Karbala',
            },
            {
                code: 'IZ14',
                name: 'Maysan',
            },
            {
                code: 'IZ15',
                name: 'Ninawa',
            },
            {
                code: 'IZ18',
                name: 'Salah ad-Din',
            },
            {
                code: 'IZ16',
                name: 'Wasit',
            },
        ],
    },
    {
        code: 'IE',
        id: 2266,
        name: 'Ireland',
        states: [
            {
                code: 'CW',
                name: 'Carlow',
            },
            {
                code: 'CN',
                name: 'Cavan',
            },
            {
                code: 'CE',
                name: 'Clare',
            },
            {
                code: 'C',
                name: 'Connacht',
            },
            {
                code: 'CO',
                name: 'Cork',
            },
            {
                code: 'DL',
                name: 'Donegal',
            },
            {
                code: 'D',
                name: 'Dublin',
            },
            {
                code: 'G',
                name: 'Galway',
            },
            {
                code: 'KY',
                name: 'Kerry',
            },
            {
                code: 'KE',
                name: 'Kildare',
            },
            {
                code: 'KK',
                name: 'Kilkenny',
            },
            {
                code: 'LS',
                name: 'Laois',
            },
            {
                code: 'L',
                name: 'Leinster',
            },
            {
                code: 'LM',
                name: 'Leitrim',
            },
            {
                code: 'LK',
                name: 'Limerick',
            },
            {
                code: 'LD',
                name: 'Longford',
            },
            {
                code: 'LH',
                name: 'Louth',
            },
            {
                code: 'MO',
                name: 'Mayo',
            },
            {
                code: 'MH',
                name: 'Meath',
            },
            {
                code: 'MN',
                name: 'Monaghan',
            },
            {
                code: 'M',
                name: 'Munster',
            },
            {
                code: 'OY',
                name: 'Offaly',
            },
            {
                code: 'RN',
                name: 'Roscommon',
            },
            {
                code: 'SO',
                name: 'Sligo',
            },
            {
                code: 'TA',
                name: 'Tipperary',
            },
            {
                code: 'U',
                name: 'Ulster',
            },
            {
                code: 'WD',
                name: 'Waterford',
            },
            {
                code: 'WH',
                name: 'Westmeath',
            },
            {
                code: 'WX',
                name: 'Wexford',
            },
            {
                code: 'WW',
                name: 'Wicklow',
            },
        ],
    },
    {
        code: 'IM',
        id: 2445,
        name: 'Isle of Man',
        states: [],
    },
    {
        code: 'IL',
        id: 2267,
        name: 'Israel',
        states: [
            {
                code: 'IS01',
                name: 'HaDarom',
            },
            {
                code: 'IS02',
                name: 'HaMerkaz',
            },
            {
                code: 'IS03',
                name: 'HaZafon',
            },
            {
                code: 'IS04',
                name: 'Haifa',
            },
            {
                code: 'IS06',
                name: 'Jerusalem',
            },
            {
                code: 'IS05',
                name: 'Tel Aviv',
            },
        ],
    },
    {
        code: 'IT',
        id: 2268,
        name: 'Italy',
        states: [
            {
                code: '65',
                name: 'Abruzzo',
            },
            {
                code: 'AG',
                name: 'Agrigento',
            },
            {
                code: 'AL',
                name: 'Alessandria',
            },
            {
                code: 'AN',
                name: 'Ancona',
            },
            {
                code: 'AO',
                name: 'Aosta',
            },
            {
                code: 'AR',
                name: 'Arezzo',
            },
            {
                code: 'AP',
                name: 'Ascoli Piceno',
            },
            {
                code: 'AT',
                name: 'Asti',
            },
            {
                code: 'AV',
                name: 'Avellino',
            },
            {
                code: 'BA',
                name: 'Bari',
            },
            {
                code: 'BT',
                name: 'Barletta-Andria-Trani',
            },
            {
                code: '77',
                name: 'Basilicata',
            },
            {
                code: 'BL',
                name: 'Belluno',
            },
            {
                code: 'BN',
                name: 'Benevento',
            },
            {
                code: 'BG',
                name: 'Bergamo',
            },
            {
                code: 'BI',
                name: 'Biella',
            },
            {
                code: 'BO',
                name: 'Bologna',
            },
            {
                code: 'BZ',
                name: 'Bolzano',
            },
            {
                code: 'BS',
                name: 'Brescia',
            },
            {
                code: 'BR',
                name: 'Brindisi',
            },
            {
                code: 'CA',
                name: 'Cagliari',
            },
            {
                code: '78',
                name: 'Calabria',
            },
            {
                code: 'CL',
                name: 'Caltanissetta',
            },
            {
                code: '72',
                name: 'Campania',
            },
            {
                code: 'CB',
                name: 'Campobasso',
            },
            {
                code: 'CI',
                name: 'Carbonia-Iglesias',
            },
            {
                code: 'CE',
                name: 'Caserta',
            },
            {
                code: 'CT',
                name: 'Catania',
            },
            {
                code: 'CZ',
                name: 'Catanzaro',
            },
            {
                code: 'CH',
                name: 'Chieti',
            },
            {
                code: 'CO',
                name: 'Como',
            },
            {
                code: 'CS',
                name: 'Cosenza',
            },
            {
                code: 'CR',
                name: 'Cremona',
            },
            {
                code: 'KR',
                name: 'Crotone',
            },
            {
                code: 'CN',
                name: 'Cuneo',
            },
            {
                code: '45',
                name: 'Emilia-Romagna',
            },
            {
                code: 'EN',
                name: 'Enna',
            },
            {
                code: 'FM',
                name: 'Fermo',
            },
            {
                code: 'FE',
                name: 'Ferrara',
            },
            {
                code: 'FI',
                name: 'Firenze',
            },
            {
                code: 'FG',
                name: 'Foggia',
            },
            {
                code: 'FC',
                name: 'Forli-Cesena',
            },
            {
                code: '36',
                name: 'Friuli-Venezia Giulia',
            },
            {
                code: 'FR',
                name: 'Frosinone',
            },
            {
                code: 'GE',
                name: 'Genova',
            },
            {
                code: 'GO',
                name: 'Gorizia',
            },
            {
                code: 'GR',
                name: 'Grosseto',
            },
            {
                code: 'IM',
                name: 'Imperia',
            },
            {
                code: 'IS',
                name: 'Isernia',
            },
            {
                code: 'AQ',
                name: "L'Aquila",
            },
            {
                code: 'SP',
                name: 'La Spezia',
            },
            {
                code: 'LT',
                name: 'Latina',
            },
            {
                code: '62',
                name: 'Lazio',
            },
            {
                code: 'LE',
                name: 'Lecce',
            },
            {
                code: 'LC',
                name: 'Lecco',
            },
            {
                code: '42',
                name: 'Liguria',
            },
            {
                code: 'LI',
                name: 'Livorno',
            },
            {
                code: 'LO',
                name: 'Lodi',
            },
            {
                code: '25',
                name: 'Lombardia',
            },
            {
                code: 'LU',
                name: 'Lucca',
            },
            {
                code: 'MC',
                name: 'Macerata',
            },
            {
                code: 'MN',
                name: 'Mantova',
            },
            {
                code: '57',
                name: 'Marche',
            },
            {
                code: 'MS',
                name: 'Massa-Carrara',
            },
            {
                code: 'MT',
                name: 'Matera',
            },
            {
                code: 'VS',
                name: 'Medio Campidano',
            },
            {
                code: 'ME',
                name: 'Messina',
            },
            {
                code: 'MI',
                name: 'Milano',
            },
            {
                code: 'MO',
                name: 'Modena',
            },
            {
                code: '67',
                name: 'Molise',
            },
            {
                code: 'MB',
                name: 'Monza e Brianza',
            },
            {
                code: 'NA',
                name: 'Napoli',
            },
            {
                code: 'NO',
                name: 'Novara',
            },
            {
                code: 'NU',
                name: 'Nuoro',
            },
            {
                code: 'OG',
                name: 'Ogliastra',
            },
            {
                code: 'OT',
                name: 'Olbia-Tempio',
            },
            {
                code: 'OR',
                name: 'Oristano',
            },
            {
                code: 'PD',
                name: 'Padova',
            },
            {
                code: 'PA',
                name: 'Palermo',
            },
            {
                code: 'PR',
                name: 'Parma',
            },
            {
                code: 'PV',
                name: 'Pavia',
            },
            {
                code: 'PG',
                name: 'Perugia',
            },
            {
                code: 'PU',
                name: 'Pesaro e Urbino',
            },
            {
                code: 'PE',
                name: 'Pescara',
            },
            {
                code: 'PC',
                name: 'Piacenza',
            },
            {
                code: '21',
                name: 'Piemonte',
            },
            {
                code: 'PI',
                name: 'Pisa',
            },
            {
                code: 'PT',
                name: 'Pistoia',
            },
            {
                code: 'PN',
                name: 'Pordenone',
            },
            {
                code: 'PZ',
                name: 'Potenza',
            },
            {
                code: 'PO',
                name: 'Prato',
            },
            {
                code: '75',
                name: 'Puglia',
            },
            {
                code: 'RG',
                name: 'Ragusa',
            },
            {
                code: 'RA',
                name: 'Ravenna',
            },
            {
                code: 'RC',
                name: 'Reggio Calabria',
            },
            {
                code: 'RE',
                name: 'Reggio Emilia',
            },
            {
                code: 'RI',
                name: 'Rieti',
            },
            {
                code: 'RN',
                name: 'Rimini',
            },
            {
                code: 'RM',
                name: 'Roma',
            },
            {
                code: 'RO',
                name: 'Rovigo',
            },
            {
                code: 'SA',
                name: 'Salerno',
            },
            {
                code: '88',
                name: 'Sardegna',
            },
            {
                code: 'SS',
                name: 'Sassari',
            },
            {
                code: 'SV',
                name: 'Savona',
            },
            {
                code: '82',
                name: 'Sicilia',
            },
            {
                code: 'SI',
                name: 'Siena',
            },
            {
                code: 'SR',
                name: 'Siracusa',
            },
            {
                code: 'SO',
                name: 'Sondrio',
            },
            {
                code: 'TA',
                name: 'Taranto',
            },
            {
                code: 'TE',
                name: 'Teramo',
            },
            {
                code: 'TR',
                name: 'Terni',
            },
            {
                code: 'TO',
                name: 'Torino',
            },
            {
                code: '52',
                name: 'Toscana',
            },
            {
                code: 'TP',
                name: 'Trapani',
            },
            {
                code: '32',
                name: 'Trentino-Alto Adige',
            },
            {
                code: 'TN',
                name: 'Trento',
            },
            {
                code: 'TV',
                name: 'Treviso',
            },
            {
                code: 'TS',
                name: 'Trieste',
            },
            {
                code: 'UD',
                name: 'Udine',
            },
            {
                code: '55',
                name: 'Umbria',
            },
            {
                code: '23',
                name: "Valle d'Aosta",
            },
            {
                code: 'VA',
                name: 'Varese',
            },
            {
                code: '34',
                name: 'Veneto',
            },
            {
                code: 'VE',
                name: 'Venezia',
            },
            {
                code: 'VB',
                name: 'Verbano-Cusio-Ossola',
            },
            {
                code: 'VC',
                name: 'Vercelli',
            },
            {
                code: 'VR',
                name: 'Verona',
            },
            {
                code: 'VV',
                name: 'Vibo Valentia',
            },
            {
                code: 'VI',
                name: 'Vicenza',
            },
            {
                code: 'VT',
                name: 'Viterbo',
            },
        ],
    },
    {
        code: 'JM',
        id: 2269,
        name: 'Jamaica',
        states: [
            {
                code: 'JM01',
                name: 'Clarendon',
            },
            {
                code: 'JM02',
                name: 'Hanover',
            },
            {
                code: 'JM17',
                name: 'Kingston',
            },
            {
                code: 'JM04',
                name: 'Manchester',
            },
            {
                code: 'JM07',
                name: 'Portland',
            },
            {
                code: 'JM08',
                name: 'Saint Andrew',
            },
            {
                code: 'JM09',
                name: 'Saint Ann',
            },
            {
                code: 'JM10',
                name: 'Saint Catherine',
            },
            {
                code: 'JM11',
                name: 'Saint Elizabeth',
            },
            {
                code: 'JM12',
                name: 'Saint James',
            },
            {
                code: 'JM13',
                name: 'Saint Mary',
            },
            {
                code: 'JM14',
                name: 'Saint Thomas',
            },
            {
                code: 'JM15',
                name: 'Trelawny',
            },
            {
                code: 'JM16',
                name: 'Westmoreland',
            },
        ],
    },
    {
        code: 'JP',
        id: 2270,
        name: 'Japan',
        states: [
            {
                code: 'JP23',
                name: 'Aichi',
            },
            {
                code: 'JP05',
                name: 'Akita',
            },
            {
                code: 'JP02',
                name: 'Aomori',
            },
            {
                code: 'JP12',
                name: 'Chiba',
            },
            {
                code: 'JP38',
                name: 'Ehime',
            },
            {
                code: 'JP18',
                name: 'Fukui',
            },
            {
                code: 'JP40',
                name: 'Fukuoka',
            },
            {
                code: 'JP07',
                name: 'Fukushima',
            },
            {
                code: 'JP21',
                name: 'Gifu',
            },
            {
                code: 'JP10',
                name: 'Gunma',
            },
            {
                code: 'JP34',
                name: 'Hiroshima',
            },
            {
                code: 'JP01',
                name: 'Hokkaido',
            },
            {
                code: 'JP28',
                name: 'Hyogo',
            },
            {
                code: 'JP08',
                name: 'Ibaraki',
            },
            {
                code: 'JP17',
                name: 'Ishikawa',
            },
            {
                code: 'JP03',
                name: 'Iwate',
            },
            {
                code: 'JP37',
                name: 'Kagawa',
            },
            {
                code: 'JP46',
                name: 'Kagoshima',
            },
            {
                code: 'JP14',
                name: 'Kanagawa',
            },
            {
                code: 'JP39',
                name: 'Kochi',
            },
            {
                code: 'JP43',
                name: 'Kumamoto',
            },
            {
                code: 'JP26',
                name: 'Kyoto',
            },
            {
                code: 'JP24',
                name: 'Mie',
            },
            {
                code: 'JP04',
                name: 'Miyagi',
            },
            {
                code: 'JP45',
                name: 'Miyazaki',
            },
            {
                code: 'JP20',
                name: 'Nagano',
            },
            {
                code: 'JP42',
                name: 'Nagasaki',
            },
            {
                code: 'JP29',
                name: 'Nara',
            },
            {
                code: 'JP15',
                name: 'Niigata',
            },
            {
                code: 'JP44',
                name: 'Oita',
            },
            {
                code: 'JP33',
                name: 'Okayama',
            },
            {
                code: 'JP47',
                name: 'Okinawa',
            },
            {
                code: 'JP27',
                name: 'Osaka',
            },
            {
                code: 'JP41',
                name: 'Saga',
            },
            {
                code: 'JP11',
                name: 'Saitama',
            },
            {
                code: 'JP25',
                name: 'Shiga',
            },
            {
                code: 'JP32',
                name: 'Shimane',
            },
            {
                code: 'JP22',
                name: 'Shizuoka',
            },
            {
                code: 'JP09',
                name: 'Tochigi',
            },
            {
                code: 'JP36',
                name: 'Tokushima',
            },
            {
                code: 'JP13',
                name: 'Tokyo',
            },
            {
                code: 'JP31',
                name: 'Tottori',
            },
            {
                code: 'JP16',
                name: 'Toyama',
            },
            {
                code: 'JP30',
                name: 'Wakayama',
            },
            {
                code: 'JP06',
                name: 'Yamagata',
            },
            {
                code: 'JP35',
                name: 'Yamaguchi',
            },
            {
                code: 'JP19',
                name: 'Yamanashi',
            },
        ],
    },
    {
        code: 'JE',
        id: 2422,
        name: 'Jersey',
        states: [],
    },
    {
        code: 'JO',
        id: 2271,
        name: 'Jordan',
        states: [
            {
                code: 'JO01',
                name: 'Ajlun',
            },
            {
                code: 'JO02',
                name: 'Amman',
            },
            {
                code: 'JO03',
                name: 'Aqaba',
            },
            {
                code: 'JO04',
                name: 'Balqa',
            },
            {
                code: 'JO05',
                name: 'Irbid',
            },
            {
                code: 'JO06',
                name: 'JarasJ',
            },
            {
                code: 'JO07',
                name: 'Karak',
            },
            {
                code: 'JO08',
                name: "Ma'an",
            },
            {
                code: 'JO09',
                name: 'Madaba',
            },
            {
                code: 'JO10',
                name: 'Mafraq',
            },
            {
                code: 'JO11',
                name: 'Tafilah',
            },
            {
                code: 'JO12',
                name: 'Zarqa',
            },
        ],
    },
    {
        code: 'KZ',
        id: 2272,
        name: 'Kazakhstan',
        states: [
            {
                code: 'KZ01',
                name: 'Almaty',
            },
            {
                code: 'KZ02',
                name: 'Almaty (City)',
            },
            {
                code: 'KZ03',
                name: 'Aqmola',
            },
            {
                code: 'KZ04',
                name: 'Aqtöbe',
            },
            {
                code: 'KZ05',
                name: 'Astana',
            },
            {
                code: 'KZ06',
                name: 'Atyrau',
            },
            {
                code: 'KZ08',
                name: 'Bayqonyr',
            },
            {
                code: 'KZ15',
                name: 'East Kazakhstan',
            },
            {
                code: 'KZ09',
                name: 'Mangghystau',
            },
            {
                code: 'KZ16',
                name: 'North Kazakhstan',
            },
            {
                code: 'KZ11',
                name: 'Pavlodar',
            },
            {
                code: 'KZ12',
                name: 'Qaraghandy',
            },
            {
                code: 'KZ13',
                name: 'Qostanay',
            },
            {
                code: 'KZ14',
                name: 'Qyzylorda',
            },
            {
                code: 'KZ10',
                name: 'South Kazakhstan',
            },
            {
                code: 'KZ07',
                name: 'West Kazakhstan',
            },
            {
                code: 'KZ17',
                name: 'Zhambyl',
            },
        ],
    },
    {
        code: 'KE',
        id: 2273,
        name: 'Kenya',
        states: [
            {
                code: 'KE10',
                name: 'Baringo',
            },
            {
                code: 'KE11',
                name: 'Bomet',
            },
            {
                code: 'KE12',
                name: 'Bungoma',
            },
            {
                code: 'KE13',
                name: 'Busia',
            },
            {
                code: 'KE14',
                name: 'Elgeyo Marakwet',
            },
            {
                code: 'KE15',
                name: 'Embu',
            },
            {
                code: 'KE16',
                name: 'Garissa',
            },
            {
                code: 'KE17',
                name: 'Homa Bay',
            },
            {
                code: 'KE18',
                name: 'Isiolo',
            },
            {
                code: 'KE19',
                name: 'Kajiado',
            },
            {
                code: 'KE20',
                name: 'Kakamega',
            },
            {
                code: 'KE21',
                name: 'Kericho',
            },
            {
                code: 'KE22',
                name: 'Kiambu',
            },
            {
                code: 'KE23',
                name: 'Kilifi',
            },
            {
                code: 'KE24',
                name: 'Kirinyaga',
            },
            {
                code: 'KE25',
                name: 'Kisii',
            },
            {
                code: 'KE26',
                name: 'Kisumu',
            },
            {
                code: 'KE27',
                name: 'Kitui',
            },
            {
                code: 'KE28',
                name: 'Kwale',
            },
            {
                code: 'KE29',
                name: 'Laikipia',
            },
            {
                code: 'KE30',
                name: 'Lamu',
            },
            {
                code: 'KE31',
                name: 'Machakos',
            },
            {
                code: 'KE32',
                name: 'Makueni',
            },
            {
                code: 'KE33',
                name: 'Mandera',
            },
            {
                code: 'KE34',
                name: 'Marsabit',
            },
            {
                code: 'KE35',
                name: 'Meru',
            },
            {
                code: 'KE36',
                name: 'Migori',
            },
            {
                code: 'KE37',
                name: 'Mombasa',
            },
            {
                code: 'KE38',
                name: 'Murang',
            },
            {
                code: 'KE05',
                name: 'Nairobi',
            },
            {
                code: 'KE39',
                name: 'Nakuru',
            },
            {
                code: 'KE40',
                name: 'Nandi',
            },
            {
                code: 'KE41',
                name: 'Narok',
            },
            {
                code: 'KE42',
                name: 'Nyamira',
            },
            {
                code: 'KE43',
                name: 'Nyandarua',
            },
            {
                code: 'KE44',
                name: 'Nyeri',
            },
            {
                code: 'KE45',
                name: 'Samburu',
            },
            {
                code: 'KE46',
                name: 'Siaya',
            },
            {
                code: 'KE47',
                name: 'Taita Taveta',
            },
            {
                code: 'KE48',
                name: 'Tana River',
            },
            {
                code: 'KE49',
                name: 'Tharaka Nithi',
            },
            {
                code: 'KE50',
                name: 'Trans Nzoia',
            },
            {
                code: 'KE51',
                name: 'Turkana',
            },
            {
                code: 'KE52',
                name: 'Uasin Gishu',
            },
            {
                code: 'KE53',
                name: 'Vihiga',
            },
            {
                code: 'KE54',
                name: 'Wajir',
            },
            {
                code: 'KE55',
                name: 'West Pokot',
            },
        ],
    },
    {
        code: 'KI',
        id: 2391,
        name: 'Kiribati',
        states: [],
    },
    {
        code: 'KP',
        id: 2274,
        name: "Korea; Democratic People's Republic Of (North)",
        states: [
            {
                code: 'KN01',
                name: 'Chagang-do',
            },
            {
                code: 'KN17',
                name: 'Hamgyong-bukto',
            },
            {
                code: 'KN03',
                name: 'Hamgyong-namdo',
            },
            {
                code: 'KN07',
                name: 'Hwanghae-bukto',
            },
            {
                code: 'KN06',
                name: 'Hwanghae-namdo',
            },
            {
                code: 'KN09',
                name: 'Kangwon-do',
            },
            {
                code: 'KN18',
                name: 'Najin Sonbong-si',
            },
            {
                code: 'KN11',
                name: "P'yongan-bukto",
            },
            {
                code: 'KN15',
                name: "P'yongan-namdo",
            },
            {
                code: 'KN12',
                name: "P'yongyang-si",
            },
            {
                code: 'KN13',
                name: 'Yanggang-do',
            },
        ],
    },
    {
        code: 'KR',
        id: 2275,
        name: 'Korea; Republic Of (South)',
        states: [
            {
                code: 'KS10',
                name: 'Busan',
            },
            {
                code: 'KS05',
                name: 'Chungcheongbuk-do',
            },
            {
                code: 'KS17',
                name: 'Chungcheongnam-do',
            },
            {
                code: 'KS15',
                name: 'Daegu',
            },
            {
                code: 'KS19',
                name: 'Daejeon',
            },
            {
                code: 'KS06',
                name: 'Gangwon-do',
            },
            {
                code: 'KS18',
                name: 'Gwangju',
            },
            {
                code: 'KS13',
                name: 'Gyeonggi-do',
            },
            {
                code: 'KS14',
                name: 'Gyeongsangbuk-do',
            },
            {
                code: 'KS20',
                name: 'Gyeongsangnam-do',
            },
            {
                code: 'KS12',
                name: 'Incheon',
            },
            {
                code: 'KS01',
                name: 'Jeju-do',
            },
            {
                code: 'KS03',
                name: 'Jeollabuk-do',
            },
            {
                code: 'KS16',
                name: 'Jeollanam-do',
            },
            {
                code: 'KS22',
                name: 'Sejong',
            },
            {
                code: 'KS11',
                name: 'Seoul',
            },
            {
                code: 'KS21',
                name: 'Ulsan',
            },
        ],
    },
    {
        code: 'KV',
        id: 2392,
        name: 'Kosovo',
        states: [],
    },
    {
        code: 'KW',
        id: 2276,
        name: 'Kuwait',
        states: [
            {
                code: 'KU04',
                name: 'Al Ahmadi',
            },
            {
                code: 'KU07',
                name: 'Al Farwaniyah',
            },
            {
                code: 'KU05',
                name: 'Al Jahrah',
            },
            {
                code: 'KU02',
                name: 'Al Kuwayt',
            },
            {
                code: 'KU08',
                name: 'Hawalli',
            },
            {
                code: 'KU09',
                name: 'Mubarak Al-Kabir',
            },
        ],
    },
    {
        code: 'KG',
        id: 2277,
        name: 'Kyrgyzstan',
        states: [
            {
                code: 'KG09',
                name: 'Batken',
            },
            {
                code: 'KG01',
                name: 'Bishkek',
            },
            {
                code: 'KG02',
                name: 'Chüy',
            },
            {
                code: 'KG03',
                name: 'Jalal-Abad',
            },
            {
                code: 'KG04',
                name: 'Naryn',
            },
            {
                code: 'KG10',
                name: 'Osh [City]',
            },
            {
                code: 'KG08',
                name: 'Osh',
            },
            {
                code: 'KG06',
                name: 'Talas',
            },
            {
                code: 'KG07',
                name: 'Ysyk-Köl',
            },
        ],
    },
    {
        code: 'LA',
        id: 2278,
        name: "Lao People's Democratic Republic",
        states: [
            {
                code: 'LA01',
                name: 'Attapu',
            },
            {
                code: 'LA22',
                name: 'Bokeo',
            },
            {
                code: 'LA23',
                name: 'Bolikhamxai',
            },
            {
                code: 'LA02',
                name: 'Champasak',
            },
            {
                code: 'LA03',
                name: 'Houaphan',
            },
            {
                code: 'LA15',
                name: 'Khammouan',
            },
            {
                code: 'LA16',
                name: 'Louang Namtha',
            },
            {
                code: 'LA17',
                name: 'Louangphrabang',
            },
            {
                code: 'LA07',
                name: 'Oudômxai',
            },
            {
                code: 'LA18',
                name: 'Phôngsali',
            },
            {
                code: 'LA19',
                name: 'Saravan',
            },
            {
                code: 'LA20',
                name: 'Savannakhét',
            },
            {
                code: 'LA27',
                name: 'Vientiane',
            },
            {
                code: 'LA24',
                name: 'Vientiane [prefecture]',
            },
            {
                code: 'LA13',
                name: 'Xaignabouri',
            },
            {
                code: 'LA28',
                name: 'Xaisômboun',
            },
            {
                code: 'LA26',
                name: 'Xékong',
            },
            {
                code: 'LA14',
                name: 'Xiangkhoang',
            },
        ],
    },
    {
        code: 'LV',
        id: 2279,
        name: 'Latvia',
        states: [
            {
                code: 'LG34',
                name: 'Adaži',
            },
            {
                code: 'LG35',
                name: 'Aglona',
            },
            {
                code: 'LG36',
                name: 'Aizkraukle',
            },
            {
                code: 'LG37',
                name: 'Aizpute',
            },
            {
                code: 'LG38',
                name: 'Akniste',
            },
            {
                code: 'LG39',
                name: 'Aloja',
            },
            {
                code: 'LG40',
                name: 'Alsunga',
            },
            {
                code: 'LG41',
                name: 'Aluksne',
            },
            {
                code: 'LG42',
                name: 'Amata',
            },
            {
                code: 'LG43',
                name: 'Ape',
            },
            {
                code: 'LG44',
                name: 'Auce',
            },
            {
                code: 'LG45',
                name: 'Babite',
            },
            {
                code: 'LG46',
                name: 'Baldone',
            },
            {
                code: 'LG47',
                name: 'Baltinava',
            },
            {
                code: 'LG48',
                name: 'Balvi',
            },
            {
                code: 'LG49',
                name: 'Bauska',
            },
            {
                code: 'LG50',
                name: 'Beverina',
            },
            {
                code: 'LG51',
                name: 'Broceni',
            },
            {
                code: 'LG52',
                name: 'Burtnieki',
            },
            {
                code: 'LG53',
                name: 'Carnikava',
            },
            {
                code: 'LG54',
                name: 'Cesis',
            },
            {
                code: 'LG55',
                name: 'Cesvaine',
            },
            {
                code: 'LG56',
                name: 'Cibla',
            },
            {
                code: 'LG57',
                name: 'Dagda',
            },
            {
                code: 'LG06',
                name: 'Daugavpils',
            },
            {
                code: 'LG58',
                name: 'Daugavpils',
            },
            {
                code: 'LG59',
                name: 'Dobele',
            },
            {
                code: 'LG60',
                name: 'Dundaga',
            },
            {
                code: 'LG61',
                name: 'Durbe',
            },
            {
                code: 'LG62',
                name: 'Engure',
            },
            {
                code: 'LG63',
                name: 'Ergli',
            },
            {
                code: 'LG64',
                name: 'Garkalne',
            },
            {
                code: 'LG65',
                name: 'Grobina',
            },
            {
                code: 'LG66',
                name: 'Gulbene',
            },
            {
                code: 'LG67',
                name: 'Iecava',
            },
            {
                code: 'LG68',
                name: 'Ikškile',
            },
            {
                code: 'LG69',
                name: 'Ilukste',
            },
            {
                code: 'LG70',
                name: 'Incukalns',
            },
            {
                code: 'LG71',
                name: 'Jaunjelgava',
            },
            {
                code: 'LG72',
                name: 'Jaunpiebalga',
            },
            {
                code: 'LG73',
                name: 'Jaunpils',
            },
            {
                code: 'LG75',
                name: 'Jekabpils',
            },
            {
                code: 'LG74',
                name: 'Jekabpils',
            },
            {
                code: 'LG76',
                name: 'Jelgava',
            },
            {
                code: 'LG11',
                name: 'Jelgava',
            },
            {
                code: 'LG13',
                name: 'Jurmala',
            },
            {
                code: 'LG77',
                name: 'Kandava',
            },
            {
                code: 'LG78',
                name: 'Karsava',
            },
            {
                code: 'LG79',
                name: 'Kegums',
            },
            {
                code: 'LG80',
                name: 'Kekava',
            },
            {
                code: 'LG81',
                name: 'Kocenu',
            },
            {
                code: 'LG82',
                name: 'Koknese',
            },
            {
                code: 'LG83',
                name: 'Kraslava',
            },
            {
                code: 'LG84',
                name: 'Krimulda',
            },
            {
                code: 'LG85',
                name: 'Krustpils',
            },
            {
                code: 'LG86',
                name: 'Kuldiga',
            },
            {
                code: 'LG87',
                name: 'Lielvarde',
            },
            {
                code: 'LG16',
                name: 'Liepaja',
            },
            {
                code: 'LG88',
                name: 'Ligatne',
            },
            {
                code: 'LG89',
                name: 'Limbaži',
            },
            {
                code: 'LG90',
                name: 'Livani',
            },
            {
                code: 'LG91',
                name: 'Lubana',
            },
            {
                code: 'LG92',
                name: 'Ludza',
            },
            {
                code: 'LG93',
                name: 'Madona',
            },
            {
                code: 'LG94',
                name: 'Malpils',
            },
            {
                code: 'LG95',
                name: 'Marupe',
            },
            {
                code: 'LG96',
                name: 'Mazsalaca',
            },
            {
                code: 'LGF1',
                name: 'Mersraga',
            },
            {
                code: 'LG97',
                name: 'Naukšeni',
            },
            {
                code: 'LG98',
                name: 'Nereta',
            },
            {
                code: 'LG99',
                name: 'Nica',
            },
            {
                code: 'LGA1',
                name: 'Ogre',
            },
            {
                code: 'LGA2',
                name: 'Olaine',
            },
            {
                code: 'LGA3',
                name: 'Ozolnieki',
            },
            {
                code: 'LGA4',
                name: 'Pargauja',
            },
            {
                code: 'LGA5',
                name: 'Pavilosta',
            },
            {
                code: 'LGA6',
                name: 'Plavinas',
            },
            {
                code: 'LGA7',
                name: 'Preili',
            },
            {
                code: 'LGA8',
                name: 'Priekule',
            },
            {
                code: 'LGA9',
                name: 'Priekuli',
            },
            {
                code: 'LGB1',
                name: 'Rauna',
            },
            {
                code: 'LGB2',
                name: 'Rezekne',
            },
            {
                code: 'LG23',
                name: 'Rezekne',
            },
            {
                code: 'LGB3',
                name: 'Riebini',
            },
            {
                code: 'LG25',
                name: 'Riga',
            },
            {
                code: 'LGB4',
                name: 'Roja',
            },
            {
                code: 'LGB5',
                name: 'Ropaži',
            },
            {
                code: 'LGB6',
                name: 'Rucava',
            },
            {
                code: 'LGB7',
                name: 'Rugaji',
            },
            {
                code: 'LGB8',
                name: 'Rujiena',
            },
            {
                code: 'LGB9',
                name: 'Rundale',
            },
            {
                code: 'LGC1',
                name: 'Salacgriva',
            },
            {
                code: 'LGC2',
                name: 'Sala',
            },
            {
                code: 'LGC3',
                name: 'Salaspils',
            },
            {
                code: 'LGC4',
                name: 'Saldus',
            },
            {
                code: 'LGC5',
                name: 'Saulkrasti',
            },
            {
                code: 'LGC6',
                name: 'Seja',
            },
            {
                code: 'LGC7',
                name: 'Sigulda',
            },
            {
                code: 'LGC8',
                name: 'Skriveri',
            },
            {
                code: 'LGC9',
                name: 'Skrunda',
            },
            {
                code: 'LGD1',
                name: 'Smiltene',
            },
            {
                code: 'LGD2',
                name: 'Stopini',
            },
            {
                code: 'LGD3',
                name: 'Strenci',
            },
            {
                code: 'LGD4',
                name: 'Talsi',
            },
            {
                code: 'LGD5',
                name: 'Tervete',
            },
            {
                code: 'LGD6',
                name: 'Tukums',
            },
            {
                code: 'LGD7',
                name: 'Vainode',
            },
            {
                code: 'LGD8',
                name: 'Valka',
            },
            {
                code: 'LGD9',
                name: 'Valmiera',
            },
            {
                code: 'LGE1',
                name: 'Varaklani',
            },
            {
                code: 'LGE2',
                name: 'Varkava',
            },
            {
                code: 'LGE3',
                name: 'Vecpiebalga',
            },
            {
                code: 'LGE4',
                name: 'Vecumnieki',
            },
            {
                code: 'LGE5',
                name: 'Ventspils',
            },
            {
                code: 'LG32',
                name: 'Ventspils',
            },
            {
                code: 'LGE6',
                name: 'Viesite',
            },
            {
                code: 'LGE7',
                name: 'Vilaka',
            },
            {
                code: 'LGE8',
                name: 'Vilani',
            },
            {
                code: 'LGE9',
                name: 'Zilupe',
            },
        ],
    },
    {
        code: 'LB',
        id: 2280,
        name: 'Lebanon',
        states: [
            {
                code: 'LE10',
                name: 'Aakkar',
            },
            {
                code: 'LE07',
                name: 'An Nabatiyah',
            },
            {
                code: 'LE11',
                name: 'Baalbek-Hermel',
            },
            {
                code: 'LE04',
                name: 'Beirut',
            },
            {
                code: 'LE08',
                name: 'Beqaa',
            },
            {
                code: 'LE05',
                name: 'Mount Lebanon',
            },
            {
                code: 'LE09',
                name: 'North Lebanon',
            },
            {
                code: 'LE06',
                name: 'South Lebanon',
            },
        ],
    },
    {
        code: 'LS',
        id: 2281,
        name: 'Lesotho',
        states: [
            {
                code: 'LT10',
                name: 'Berea',
            },
            {
                code: 'LT11',
                name: 'Butha-Buthe',
            },
            {
                code: 'LT12',
                name: 'Leribe',
            },
            {
                code: 'LT14',
                name: 'Mafeteng',
            },
            {
                code: 'LT13',
                name: 'Mafeteng',
            },
            {
                code: 'LT15',
                name: "Mohale's Hoek",
            },
            {
                code: 'LT16',
                name: 'Mokhotlong',
            },
            {
                code: 'LT17',
                name: "Qacha's Nek",
            },
            {
                code: 'LT18',
                name: 'Quthing',
            },
            {
                code: 'LT19',
                name: 'Thaba-Tseka',
            },
        ],
    },
    {
        code: 'LR',
        id: 2282,
        name: 'Liberia',
        states: [
            {
                code: 'LI15',
                name: 'Bomi',
            },
            {
                code: 'LI01',
                name: 'Bong',
            },
            {
                code: 'LI21\t',
                name: 'Gbarpolu',
            },
            {
                code: 'LI11',
                name: 'Grand Bassa',
            },
            {
                code: 'LI12',
                name: 'Grand Cape Mount',
            },
            {
                code: 'LI19',
                name: 'Grand Gedeh',
            },
            {
                code: 'LI16',
                name: 'Grand Kru',
            },
            {
                code: 'LI20',
                name: 'Lofa',
            },
            {
                code: 'LI17',
                name: 'Margibi',
            },
            {
                code: 'LI13',
                name: 'Maryland',
            },
            {
                code: 'LI14',
                name: 'Montserrado',
            },
            {
                code: 'LI09',
                name: 'Nimba',
            },
            {
                code: 'LI22',
                name: 'River Gee',
            },
            {
                code: 'LI18',
                name: 'Rivercess',
            },
            {
                code: 'LI10',
                name: 'Sinoe',
            },
        ],
    },
    {
        code: 'LY',
        id: 2380,
        name: 'Libyan Arab Jamahiriya',
        states: [],
    },
    {
        code: 'LI',
        id: 2284,
        name: 'Liechtenstein',
        states: [],
    },
    {
        code: 'LT',
        id: 2285,
        name: 'Lithuania',
        states: [
            {
                code: 'LH56',
                name: 'Alytus',
            },
            {
                code: 'LH57',
                name: 'Kaunas',
            },
            {
                code: 'LH58',
                name: 'Klaipeda',
            },
            {
                code: 'LH59',
                name: 'Marijampole',
            },
            {
                code: 'LH60',
                name: 'Panevežys',
            },
            {
                code: 'LH61',
                name: 'Siauliai',
            },
            {
                code: 'LH62',
                name: 'Taurage',
            },
            {
                code: 'LH63',
                name: 'Telšiai',
            },
            {
                code: 'LH64',
                name: 'Utena',
            },
            {
                code: 'LH65',
                name: 'Vilnius',
            },
        ],
    },
    {
        code: 'LU',
        id: 2286,
        name: 'Luxembourg',
        states: [
            {
                code: 'LU01',
                name: 'Diekirch',
            },
            {
                code: 'LU02',
                name: 'Grevenmacher',
            },
            {
                code: 'LU03',
                name: 'Luxembourg',
            },
        ],
    },
    {
        code: 'MO',
        id: 2287,
        name: 'Macau',
        states: [],
    },
    {
        code: 'MK',
        id: 2288,
        name: 'Macedonia',
        states: [],
    },
    {
        code: 'YU',
        id: 2367,
        name: 'Macedonia; the Former Yugoslav Republic',
        states: [],
    },
    {
        code: 'MG',
        id: 2289,
        name: 'Madagascar',
        states: [
            {
                code: 'MA05',
                name: 'Antananarivo',
            },
            {
                code: 'MA01',
                name: 'Antsiranana',
            },
            {
                code: 'MA02',
                name: 'Fianarantsoa',
            },
            {
                code: 'MA03',
                name: 'Mahajanga',
            },
            {
                code: 'MA04',
                name: 'Toamasina',
            },
            {
                code: 'MA06',
                name: 'Toliara',
            },
        ],
    },
    {
        code: 'MW',
        id: 2290,
        name: 'Malawi',
        states: [
            {
                code: 'MI26',
                name: 'Balaka',
            },
            {
                code: 'MI24',
                name: 'Blantyre',
            },
            {
                code: 'MI02',
                name: 'Chikwawa',
            },
            {
                code: 'MI03',
                name: 'Chiradzulu',
            },
            {
                code: 'MI04',
                name: 'Chitipa',
            },
            {
                code: 'MI06',
                name: 'Dedza',
            },
            {
                code: 'MI07',
                name: 'Dowa',
            },
            {
                code: 'MI08',
                name: 'Karonga',
            },
            {
                code: 'MI09',
                name: 'Kasungu',
            },
            {
                code: 'MI27',
                name: 'Likoma',
            },
            {
                code: 'MI11',
                name: 'Lilongwe',
            },
            {
                code: 'MI28',
                name: 'Machinga',
            },
            {
                code: 'MI12',
                name: 'Mangochi',
            },
            {
                code: 'MI13',
                name: 'Mchinji',
            },
            {
                code: 'MI29',
                name: 'Mulanje',
            },
            {
                code: 'MI25',
                name: 'Mwanza',
            },
            {
                code: 'MI15',
                name: 'Mzimba',
            },
            {
                code: 'MI31',
                name: 'Neno',
            },
            {
                code: 'MI17',
                name: 'Nkhata Bay',
            },
            {
                code: 'MI18',
                name: 'Nkhotakota',
            },
            {
                code: 'MI19',
                name: 'Nsanje',
            },
            {
                code: 'MI16',
                name: 'Ntcheu',
            },
            {
                code: 'MI20',
                name: 'Ntchisi',
            },
            {
                code: 'MI30',
                name: 'Phalombe',
            },
            {
                code: 'MI21',
                name: 'Rumphi',
            },
            {
                code: 'MI22',
                name: 'Salima',
            },
            {
                code: 'MI05',
                name: 'Thyolo',
            },
            {
                code: 'MI23',
                name: 'Zomba',
            },
        ],
    },
    {
        code: 'MY',
        id: 2291,
        name: 'Malaysia',
        states: [
            {
                code: 'MY01',
                name: 'Johor',
            },
            {
                code: 'MY02',
                name: 'Kedah',
            },
            {
                code: 'MY03',
                name: 'Kelantan',
            },
            {
                code: 'MY04',
                name: 'Melaka',
            },
            {
                code: 'MY05',
                name: 'Negeri Sembilan',
            },
            {
                code: 'MY06',
                name: 'Pahang',
            },
            {
                code: 'MY08',
                name: 'Perak',
            },
            {
                code: 'MY09',
                name: 'Perlis',
            },
            {
                code: 'MY07',
                name: 'Pulau Pinang',
            },
            {
                code: 'MY12',
                name: 'Sabah',
            },
            {
                code: 'MY13',
                name: 'Sarawak',
            },
            {
                code: 'MY10',
                name: 'Selangor',
            },
            {
                code: 'MY11',
                name: 'Terengganu',
            },
            {
                code: 'MY14',
                name: 'W.P. Kuala Lumpur',
            },
            {
                code: 'MY15',
                name: 'W.P. Labuan',
            },
            {
                code: 'MY16',
                name: 'W.P. Putrajaya',
            },
        ],
    },
    {
        code: 'MV',
        id: 2384,
        name: 'Maldives; Republic of',
        states: [],
    },
    {
        code: 'ML',
        id: 2292,
        name: 'Mali',
        states: [
            {
                code: 'ML01',
                name: 'Bamako',
            },
            {
                code: 'ML09',
                name: 'Gao',
            },
            {
                code: 'ML03',
                name: 'Kayes',
            },
            {
                code: 'ML10',
                name: 'Kidal',
            },
            {
                code: 'ML07',
                name: 'Koulikoro',
            },
            {
                code: 'ML.ME',
                name: 'Ménaka',
            },
            {
                code: 'ML04',
                name: 'Mopti',
            },
            {
                code: 'ML05',
                name: 'Ségou',
            },
            {
                code: 'ML06',
                name: 'Sikasso',
            },
            {
                code: 'ML.TD',
                name: 'Taoudénit',
            },
            {
                code: 'ML08',
                name: 'Timbuktu',
            },
        ],
    },
    {
        code: 'MT',
        id: 2293,
        name: 'Malta',
        states: [
            {
                code: 'MT.CE',
                name: 'Central',
            },
            {
                code: 'MT.GO',
                name: 'Gozo',
            },
            {
                code: 'MT.NO',
                name: 'Northern',
            },
            {
                code: 'MT.SE',
                name: 'South Eastern',
            },
            {
                code: 'MT.SO',
                name: 'Southern',
            },
        ],
    },
    {
        code: 'RM',
        id: 2394,
        name: 'Marshall Islands',
        states: [],
    },
    {
        code: 'MQ',
        id: 2423,
        name: 'Martinique',
        states: [],
    },
    {
        code: 'MR',
        id: 2294,
        name: 'Mauritania',
        states: [
            {
                code: 'MR07',
                name: 'Adrar',
            },
            {
                code: 'MR03',
                name: 'Assaba',
            },
            {
                code: 'MR05',
                name: 'Brakna',
            },
            {
                code: 'MR08',
                name: 'Dakhlet Nouadhibou',
            },
            {
                code: 'MR04',
                name: 'Gorgol',
            },
            {
                code: 'MR10',
                name: 'Guidimaka',
            },
            {
                code: 'MR01',
                name: 'Hodh ech Chargui',
            },
            {
                code: 'MR02',
                name: 'Hodh el Gharbi',
            },
            {
                code: 'MR12',
                name: 'Inchiri',
            },
            {
                code: 'MR.NN',
                name: 'Nouakchott Nord',
            },
            {
                code: 'MR13',
                name: 'Nouakchott Ouest',
            },
            {
                code: 'MR.NS',
                name: 'Nouakchott Sud',
            },
            {
                code: 'MR09',
                name: 'Tagant',
            },
            {
                code: 'MR11',
                name: 'Tiris Zemmour',
            },
            {
                code: 'MR06',
                name: 'Trarza',
            },
        ],
    },
    {
        code: 'MU',
        id: 2295,
        name: 'Mauritius',
        states: [
            {
                code: 'MP21',
                name: 'Agalega Islands',
            },
            {
                code: 'MP12',
                name: 'Black River',
            },
            {
                code: 'MP22',
                name: 'Cargados Carajos',
            },
            {
                code: 'MP13',
                name: 'Flacq',
            },
            {
                code: 'MP14',
                name: 'Grand Port',
            },
            {
                code: 'MP15',
                name: 'Moka',
            },
            {
                code: 'MP16',
                name: 'Pamplemousses',
            },
            {
                code: 'MP17',
                name: 'Plaines Wilhems',
            },
            {
                code: 'MP18',
                name: 'Port Louis',
            },
            {
                code: 'MP19',
                name: 'Rivière du Rempart',
            },
            {
                code: 'MP23',
                name: 'Rodrigues',
            },
            {
                code: 'MP20',
                name: 'Savanne',
            },
        ],
    },
    {
        code: 'M999',
        id: 2393,
        name: 'Mayotte',
        states: [],
    },
    {
        code: 'MX',
        id: 2296,
        name: 'Mexico',
        states: [
            {
                code: 'AGU',
                name: 'Aguascalientes',
            },
            {
                code: 'BCS',
                name: 'Baja California Sur',
            },
            {
                code: 'BCN',
                name: 'Baja California',
            },
            {
                code: 'CAM',
                name: 'Campeche',
            },
            {
                code: 'CHP',
                name: 'Chiapas',
            },
            {
                code: 'CHH',
                name: 'Chihuahua',
            },
            {
                code: 'COA',
                name: 'Coahuila',
            },
            {
                code: 'COL',
                name: 'Colima',
            },
            {
                code: 'DIF',
                name: 'Distrito Federal',
            },
            {
                code: 'DUR',
                name: 'Durango',
            },
            {
                code: 'GUA',
                name: 'Guanajuato',
            },
            {
                code: 'GRO',
                name: 'Guerrero',
            },
            {
                code: 'HID',
                name: 'Hidalgo',
            },
            {
                code: 'JAL',
                name: 'Jalisco',
            },
            {
                code: 'MEX',
                name: 'México',
            },
            {
                code: 'MIC',
                name: 'Michoacán',
            },
            {
                code: 'MOR',
                name: 'Morelos',
            },
            {
                code: 'NAY',
                name: 'Nayarit',
            },
            {
                code: 'NLE',
                name: 'Nuevo León',
            },
            {
                code: 'OAX',
                name: 'Oaxaca',
            },
            {
                code: 'PUE',
                name: 'Puebla',
            },
            {
                code: 'QUE',
                name: 'Querétaro',
            },
            {
                code: 'ROO',
                name: 'Quintana Roo',
            },
            {
                code: 'SLP',
                name: 'San Luis Potosí',
            },
            {
                code: 'SIN',
                name: 'Sinaloa',
            },
            {
                code: 'SON',
                name: 'Sonora',
            },
            {
                code: 'TAB',
                name: 'Tabasco',
            },
            {
                code: 'TAM',
                name: 'Tamaulipas',
            },
            {
                code: 'TLA',
                name: 'Tlaxcala',
            },
            {
                code: 'VER',
                name: 'Veracruz',
            },
            {
                code: 'YUC',
                name: 'Yucatán',
            },
            {
                code: 'ZAC',
                name: 'Zacatecas',
            },
        ],
    },
    {
        code: 'FM',
        id: 2297,
        name: 'Micronesia; Federated States of',
        states: [
            {
                code: 'FM03',
                name: 'Chuuk',
            },
            {
                code: 'FM01',
                name: 'Kosrae',
            },
            {
                code: 'FM02',
                name: 'Pohnpei',
            },
            {
                code: 'FM04',
                name: 'Yap',
            },
        ],
    },
    {
        code: 'MD',
        id: 2395,
        name: 'Moldova; Republic of',
        states: [],
    },
    {
        code: 'MC',
        id: 2299,
        name: 'Monaco',
        states: [],
    },
    {
        code: 'MN',
        id: 2300,
        name: 'Mongolia',
        states: [],
    },
    {
        code: 'MJ',
        id: 2396,
        name: 'Montenegro',
        states: [
            {
                code: 'ME-1',
                name: 'Andrijevica',
            },
            {
                code: 'ME-2',
                name: 'Bar',
            },
            {
                code: 'ME-3',
                name: 'Berane',
            },
            {
                code: 'ME-4',
                name: 'Bijelo Polje',
            },
            {
                code: 'ME-5',
                name: 'Budva',
            },
            {
                code: 'ME-6',
                name: 'Cetinje',
            },
            {
                code: 'ME-7',
                name: 'Danilovgrad',
            },
            {
                code: 'ME-8',
                name: 'Herceg Novi',
            },
            {
                code: 'ME-9',
                name: 'Kolašin',
            },
            {
                code: 'ME-10',
                name: 'Kotor',
            },
            {
                code: 'ME-11',
                name: 'Mojkovac',
            },
            {
                code: 'ME-12',
                name: 'Nikšic',
            },
            {
                code: 'ME-13',
                name: 'Plav',
            },
            {
                code: 'ME-14',
                name: 'Pljevlja',
            },
            {
                code: 'ME-15',
                name: 'Plužine',
            },
            {
                code: 'ME-16',
                name: 'Podgorica',
            },
            {
                code: 'ME-17',
                name: 'Rožaje',
            },
            {
                code: 'ME-18',
                name: 'Šavnik',
            },
            {
                code: 'ME-19',
                name: 'Tivat',
            },
            {
                code: 'ME-20',
                name: 'Ulcinj',
            },
            {
                code: 'ME-21',
                name: 'Žabljak',
            },
        ],
    },
    {
        code: 'MS',
        id: 2424,
        name: 'Montserrat',
        states: [],
    },
    {
        code: 'MA',
        id: 2301,
        name: 'Morocco',
        states: [
            {
                code: 'MA.BK',
                name: 'Béni Mellal-Khénifra',
            },
            {
                code: 'MA.CS',
                name: 'Casablanca-Settat',
            },
            {
                code: 'MA.OL',
                name: 'Dakhla-Oued Ed-Dahab',
            },
            {
                code: 'MA.DT',
                name: 'Drâa-Tafilalet',
            },
            {
                code: 'MA.FK',
                name: 'Fès-Meknès',
            },
            {
                code: 'MA.GN',
                name: 'Guelmim-Oued Noun',
            },
            {
                code: 'MA.OF',
                name: "L'oriental",
            },
            {
                code: 'MA.LS',
                name: 'Laâyoune-Sakia al Hamra',
            },
            {
                code: 'MA.MS',
                name: 'Marrakech-Safi',
            },
            {
                code: 'MA.RK',
                name: 'Rabat-Salé-Kénitra',
            },
            {
                code: 'MA.SS',
                name: 'Souss-Massa',
            },
            {
                code: 'MA.TC',
                name: 'Tanger-Tétouan-Al Hoceima',
            },
        ],
    },
    {
        code: 'MZ',
        id: 2302,
        name: 'Mozambique',
        states: [
            {
                code: 'MZ01',
                name: 'Cabo Delgado',
            },
            {
                code: 'MZ02',
                name: 'Gaza',
            },
            {
                code: 'MZ03',
                name: 'Inhambane',
            },
            {
                code: 'MZ10',
                name: 'Manica',
            },
            {
                code: 'MZ11',
                name: 'Maputo [city]',
            },
            {
                code: 'MZ04',
                name: 'Maputo',
            },
            {
                code: 'MZ06',
                name: 'Nampula',
            },
            {
                code: 'MZ07',
                name: 'Niassa',
            },
            {
                code: 'MZ05',
                name: 'Sofala',
            },
            {
                code: 'MZ08',
                name: 'Tete',
            },
            {
                code: 'MZ09',
                name: 'Zambézia',
            },
        ],
    },
    {
        code: 'MM',
        id: 2303,
        name: 'Myanmar',
        states: [
            {
                code: 'MM.AY',
                name: 'Ayeyarwady',
            },
            {
                code: 'MM.BA',
                name: 'Bago',
            },
            {
                code: 'MM.CH',
                name: 'Chin',
            },
            {
                code: 'MM.KC',
                name: 'Kachin',
            },
            {
                code: 'MM.KH',
                name: 'Kayah',
            },
            {
                code: 'MM.KN',
                name: 'Kayin',
            },
            {
                code: 'MM.MG',
                name: 'Magway',
            },
            {
                code: 'MM.ML',
                name: 'Mandalay',
            },
            {
                code: 'MM.MO',
                name: 'Mon',
            },
            {
                code: 'MM.NY',
                name: 'Naypyidaw',
            },
            {
                code: 'MM.RA',
                name: 'Rakhine',
            },
            {
                code: 'MM.SA',
                name: 'Sagaing',
            },
            {
                code: 'MM.SH',
                name: 'Shan',
            },
            {
                code: 'MM.TN',
                name: 'Tanintharyi',
            },
            {
                code: 'MM.YA',
                name: 'Yangon',
            },
        ],
    },
    {
        code: 'NA',
        id: 2304,
        name: 'Namibia',
        states: [
            {
                code: 'WA29',
                name: 'Erongo',
            },
            {
                code: 'WA30',
                name: 'Hardap',
            },
            {
                code: 'WA31',
                name: 'Karas',
            },
            {
                code: 'WA40',
                name: 'Kavango East',
            },
            {
                code: 'WA41',
                name: 'Kavango West',
            },
            {
                code: 'WA21',
                name: 'Khomas',
            },
            {
                code: 'WA32',
                name: 'Kunene',
            },
            {
                code: 'WA33',
                name: 'Ohangwena',
            },
            {
                code: 'WA35',
                name: 'Omaheke',
            },
            {
                code: 'WA36',
                name: 'Omusati',
            },
            {
                code: 'WA37',
                name: 'Oshana',
            },
            {
                code: 'WA38',
                name: 'Oshikoto',
            },
            {
                code: 'WA39',
                name: 'Otjozondjupa',
            },
            {
                code: 'WA28',
                name: 'Zambezi',
            },
        ],
    },
    {
        code: 'NR',
        id: 2397,
        name: 'Nauru',
        states: [],
    },
    {
        code: 'NP',
        id: 2305,
        name: 'Nepal',
        states: [
            {
                code: 'NP.FI',
                name: 'Five',
            },
            {
                code: 'NP.FO',
                name: 'Four',
            },
            {
                code: 'NP.ON',
                name: 'One',
            },
            {
                code: 'NP.SE',
                name: 'Seven',
            },
            {
                code: 'NP.SI',
                name: 'Six',
            },
            {
                code: 'NP.TH',
                name: 'Three',
            },
            {
                code: 'NP.TW',
                name: 'Two',
            },
        ],
    },
    {
        code: 'NL',
        id: 2306,
        name: 'Netherlands',
        states: [
            {
                code: 'DR',
                name: 'Drenthe',
            },
            {
                code: 'FL',
                name: 'Flevoland',
            },
            {
                code: 'FR',
                name: 'Friesland',
            },
            {
                code: 'GE',
                name: 'Gelderland',
            },
            {
                code: 'GR',
                name: 'Groningen',
            },
            {
                code: 'LI',
                name: 'Limburg',
            },
            {
                code: 'NB',
                name: 'Noord-Brabant',
            },
            {
                code: 'NH',
                name: 'Noord-Holland',
            },
            {
                code: 'OV',
                name: 'Overijssel',
            },
            {
                code: 'UT',
                name: 'Utrecht',
            },
            {
                code: 'ZE',
                name: 'Zeeland',
            },
            {
                code: 'ZH',
                name: 'Zuid-Holland',
            },
        ],
    },
    {
        code: 'AN',
        id: 2425,
        name: 'Netherlands Antilles',
        states: [],
    },
    {
        code: 'NC',
        id: 2426,
        name: 'New Caledonia',
        states: [],
    },
    {
        code: 'NZ',
        id: 2307,
        name: 'New Zealand',
        states: [
            {
                code: 'AUK',
                name: 'Auckland',
            },
            {
                code: 'BOP',
                name: 'Bay of Plenty',
            },
            {
                code: 'CAN',
                name: 'Canterbury',
            },
            {
                code: 'CIT',
                name: 'Chatham Islands Territory',
            },
            {
                code: 'GIS',
                name: 'Gisborne',
            },
            {
                code: 'HKB',
                name: "Hawke's Bay",
            },
            {
                code: 'MWT',
                name: 'Manawatu-Wanganui',
            },
            {
                code: 'MBH',
                name: 'Marlborough',
            },
            {
                code: 'NSN',
                name: 'Nelson',
            },
            {
                code: 'N',
                name: 'North Island',
            },
            {
                code: 'NTL',
                name: 'Northland',
            },
            {
                code: 'OTA',
                name: 'Otago',
            },
            {
                code: 'S',
                name: 'South Island',
            },
            {
                code: 'STL',
                name: 'Southland',
            },
            {
                code: 'TKI',
                name: 'Taranaki',
            },
            {
                code: 'TAS',
                name: 'Tasman District',
            },
            {
                code: 'WKO',
                name: 'Waikato',
            },
            {
                code: 'WGN',
                name: 'Wellington',
            },
            {
                code: 'WTC',
                name: 'West Coast',
            },
        ],
    },
    {
        code: 'NI',
        id: 2308,
        name: 'Nicaragua',
        states: [
            {
                code: 'NU01',
                name: 'Boaco',
            },
            {
                code: 'NU02',
                name: 'Carazo',
            },
            {
                code: 'NU03',
                name: 'Chinandega',
            },
            {
                code: 'NU04',
                name: 'Chontales',
            },
            {
                code: 'NU05',
                name: 'Estelí',
            },
            {
                code: 'NU06',
                name: 'Granada',
            },
            {
                code: 'NU07',
                name: 'Jinotega',
            },
            {
                code: 'NU08',
                name: 'León',
            },
            {
                code: 'NU09',
                name: 'Madriz',
            },
            {
                code: 'NU10',
                name: 'Managua',
            },
            {
                code: 'NU11',
                name: 'Masaya',
            },
            {
                code: 'NU12',
                name: 'Matagalpa',
            },
            {
                code: 'NU13',
                name: 'Nueva Segovia',
            },
            {
                code: 'NU17',
                name: 'Región Autónoma del Caribe Norte',
            },
            {
                code: 'NU18',
                name: 'Región Autónoma del Caribe Sur',
            },
            {
                code: 'NU14',
                name: 'Río San Juan',
            },
            {
                code: 'NU15',
                name: 'Rivas',
            },
        ],
    },
    {
        code: 'NE',
        id: 2309,
        name: 'Niger',
        states: [
            {
                code: 'NG01',
                name: 'Agadez',
            },
            {
                code: 'NG02',
                name: 'Diffa',
            },
            {
                code: 'NG03',
                name: 'Dosso',
            },
            {
                code: 'NG04',
                name: 'Maradi',
            },
            {
                code: 'NG08',
                name: 'Niamey',
            },
            {
                code: 'NG06',
                name: 'Tahoua',
            },
            {
                code: 'NG09',
                name: 'Tillabéri',
            },
            {
                code: 'NG07',
                name: 'Zinder',
            },
        ],
    },
    {
        code: 'NG',
        id: 2310,
        name: 'Nigeria',
        states: [
            {
                code: 'NI45',
                name: 'Abia',
            },
            {
                code: 'NI35',
                name: 'Adamawa',
            },
            {
                code: 'NI21',
                name: 'Akwa Ibom',
            },
            {
                code: 'NI25',
                name: 'Anambra',
            },
            {
                code: 'NI46',
                name: 'Bauchi',
            },
            {
                code: 'NI52',
                name: 'Bayelsa',
            },
            {
                code: 'NI26',
                name: 'Benue',
            },
            {
                code: 'NI27',
                name: 'Borno',
            },
            {
                code: 'NI22',
                name: 'Cross River',
            },
            {
                code: 'NI36',
                name: 'Delta',
            },
            {
                code: 'NI53',
                name: 'Ebonyi',
            },
            {
                code: 'NI37',
                name: 'Edo',
            },
            {
                code: 'NI54',
                name: 'Ekiti',
            },
            {
                code: 'NI47',
                name: 'Enugu',
            },
            {
                code: 'NI11',
                name: 'Federal Capital Territory',
            },
            {
                code: 'NI55',
                name: 'Gombe',
            },
            {
                code: 'NI28',
                name: 'Imo',
            },
            {
                code: 'NI39',
                name: 'Jigawa',
            },
            {
                code: 'NI23',
                name: 'Kaduna',
            },
            {
                code: 'NI29',
                name: 'Kano',
            },
            {
                code: 'NI24',
                name: 'Katsina',
            },
            {
                code: 'NI40',
                name: 'Kebbi',
            },
            {
                code: 'NI41',
                name: 'Kogi',
            },
            {
                code: 'NI30',
                name: 'Kwara',
            },
            {
                code: 'NI05',
                name: 'Lagos',
            },
            {
                code: 'NI56',
                name: 'Nassarawa',
            },
            {
                code: 'NI31',
                name: 'Niger',
            },
            {
                code: 'NI16',
                name: 'Ogun',
            },
            {
                code: 'NI48',
                name: 'Ondo',
            },
            {
                code: 'NI42',
                name: 'Osun',
            },
            {
                code: 'NI32',
                name: 'Oyo',
            },
            {
                code: 'NI49',
                name: 'Plateau',
            },
            {
                code: 'NI50',
                name: 'Rivers',
            },
            {
                code: 'NI51',
                name: 'Sokoto',
            },
            {
                code: 'NI43',
                name: 'Taraba',
            },
            {
                code: 'NI44',
                name: 'Yobe',
            },
            {
                code: 'NI57',
                name: 'Zamfara',
            },
        ],
    },
    {
        code: 'NU',
        id: 2427,
        name: 'Niue',
        states: [],
    },
    {
        code: 'NF',
        id: 2428,
        name: 'Norfolk Island',
        states: [],
    },
    {
        code: 'MP',
        id: 2429,
        name: 'Northern Mariana Islands',
        states: [],
    },
    {
        code: 'NO',
        id: 2311,
        name: 'Norway',
        states: [
            {
                code: 'NO02',
                name: 'Akershus',
            },
            {
                code: 'NO09',
                name: 'Aust-Agder',
            },
            {
                code: 'NO06',
                name: 'Buskerud',
            },
            {
                code: 'NO20',
                name: 'Finnmark',
            },
            {
                code: 'NO04',
                name: 'Hedmark',
            },
            {
                code: 'NO12',
                name: 'Hordaland',
            },
            {
                code: 'NO22',
                name: 'Jan Mayen (Arctic Region)',
            },
            {
                code: 'NO15',
                name: 'Møre og Romsdal',
            },
            {
                code: 'NO17',
                name: 'Nord-Trøndelag',
            },
            {
                code: 'NO18',
                name: 'Nordland',
            },
            {
                code: 'NO05',
                name: 'Oppland',
            },
            {
                code: 'NO03',
                name: 'Oslo',
            },
            {
                code: 'NO01',
                name: 'Østfold',
            },
            {
                code: 'NO11',
                name: 'Rogaland',
            },
            {
                code: 'NO14',
                name: 'Sogn og Fjordane',
            },
            {
                code: 'NO16',
                name: 'Sør-Trøndelag',
            },
            {
                code: 'NO21',
                name: 'Svalbard (Arctic Region)',
            },
            {
                code: 'NO08',
                name: 'Telemark',
            },
            {
                code: 'NO19',
                name: 'Troms',
            },
            {
                code: 'NO10',
                name: 'Vest-Agder',
            },
            {
                code: 'NO07',
                name: 'Vestfold',
            },
        ],
    },
    {
        code: 'OM',
        id: 2312,
        name: 'Oman',
        states: [
            {
                code: 'MU01',
                name: 'Ad Dakhliyah',
            },
            {
                code: 'MU09',
                name: 'Adh Dhahirah',
            },
            {
                code: 'MU11',
                name: 'Al Batinah North',
            },
            {
                code: 'MU02',
                name: 'Al Batinah South',
            },
            {
                code: 'MU10',
                name: 'Al Buraymi',
            },
            {
                code: 'MU03',
                name: 'Al Wusta',
            },
            {
                code: 'MU12',
                name: 'Ash Sharqiyah North',
            },
            {
                code: 'MU04',
                name: 'Ash Sharqiyah South',
            },
            {
                code: 'MU08',
                name: 'Dhofar',
            },
            {
                code: 'MU07',
                name: 'Musandam',
            },
            {
                code: 'MU06',
                name: 'Muscat',
            },
        ],
    },
    {
        code: 'PK',
        id: 2313,
        name: 'Pakistan',
        states: [
            {
                code: 'PK06',
                name: 'Azad Kashmir',
            },
            {
                code: 'PK02',
                name: 'Balochistan',
            },
            {
                code: 'PK01',
                name: 'Federally Administered Tribal Areas',
            },
            {
                code: 'PK07',
                name: 'Gilgit-Baltistan',
            },
            {
                code: 'PK08',
                name: 'Islamabad',
            },
            {
                code: 'PK03',
                name: 'Khyber-Pakhtunkhwa',
            },
            {
                code: 'PK04',
                name: 'Punjab',
            },
            {
                code: 'PK05',
                name: 'Sindh',
            },
        ],
    },
    {
        code: 'PW',
        id: 2314,
        name: 'Palau',
        states: [],
    },
    {
        code: 'PS',
        id: 2430,
        name: 'Palestinian Territory; Occupied',
        states: [],
    },
    {
        code: 'PA',
        id: 2315,
        name: 'Panama',
        states: [
            {
                code: 'PM01',
                name: 'Bocas del Toro',
            },
            {
                code: 'PM02\t',
                name: 'Chiriquí',
            },
            {
                code: 'PM03',
                name: 'Coclé',
            },
            {
                code: 'PM04',
                name: 'Coclé',
            },
            {
                code: 'PM05',
                name: 'Darién',
            },
            {
                code: 'PM11',
                name: 'Emberá',
            },
            {
                code: 'PM06',
                name: 'Herrera',
            },
            {
                code: 'PM09',
                name: 'Kuna Yala',
            },
            {
                code: 'PM07',
                name: 'Los Santos',
            },
            {
                code: 'PM12',
                name: 'Ngäbe Buglé',
            },
            {
                code: 'PM13',
                name: 'Panamá Oeste',
            },
            {
                code: 'PM08',
                name: 'Panamá',
            },
            {
                code: 'PM10',
                name: 'Veraguas',
            },
        ],
    },
    {
        code: 'PG',
        id: 2316,
        name: 'Papua New Guinea',
        states: [
            {
                code: 'PP07',
                name: 'Bougainville',
            },
            {
                code: 'PP01',
                name: 'Central',
            },
            {
                code: 'PP08',
                name: 'Chimbu',
            },
            {
                code: 'PP10',
                name: 'East New Britain',
            },
            {
                code: 'PP11',
                name: 'East Sepik',
            },
            {
                code: 'PP09',
                name: 'Eastern Highlands',
            },
            {
                code: 'PP19',
                name: 'Enga',
            },
            {
                code: 'PP02',
                name: 'Gulf',
            },
            {
                code: 'PP21',
                name: 'Hela',
            },
            {
                code: 'PP22',
                name: 'Jiwaka',
            },
            {
                code: 'PP12',
                name: 'Madang',
            },
            {
                code: 'PP13',
                name: 'Manus',
            },
            {
                code: 'PP03',
                name: 'Milne Bay',
            },
            {
                code: 'PP14',
                name: 'Morobe',
            },
            {
                code: 'PP20',
                name: 'National Capital District',
            },
            {
                code: 'PP15',
                name: 'New Ireland',
            },
            {
                code: 'PP04',
                name: 'Northern',
            },
            {
                code: 'PP18',
                name: 'Sandaun',
            },
            {
                code: 'PP05',
                name: 'Southern Highlands',
            },
            {
                code: 'PP17',
                name: 'West New Britain',
            },
            {
                code: 'PP06',
                name: 'Western',
            },
            {
                code: 'PP16',
                name: 'Western Highlands',
            },
        ],
    },
    {
        code: 'PY',
        id: 2317,
        name: 'Paraguay',
        states: [
            {
                code: 'PA23',
                name: 'Alto Paraguay',
            },
            {
                code: 'PA01',
                name: 'Alto Paraná',
            },
            {
                code: 'PA02',
                name: 'Amambay',
            },
            {
                code: 'PA22',
                name: 'Asunción',
            },
            {
                code: 'PA24',
                name: 'Boquerón',
            },
            {
                code: 'PA04',
                name: 'Caaguazú',
            },
            {
                code: 'PA05',
                name: 'Caazapá',
            },
            {
                code: 'PA19',
                name: 'Canindeyú',
            },
            {
                code: 'PA06',
                name: 'Central',
            },
            {
                code: 'PA07',
                name: 'Concepción',
            },
            {
                code: 'PA08',
                name: 'Cordillera',
            },
            {
                code: 'PA10',
                name: 'Guairá',
            },
            {
                code: 'PA11',
                name: 'Itapúa',
            },
            {
                code: 'PA12',
                name: 'Misiones',
            },
            {
                code: 'PA15',
                name: 'Paraguarí',
            },
            {
                code: 'PA16',
                name: 'Presidente Hayes',
            },
            {
                code: 'PA17',
                name: 'San Pedro',
            },
            {
                code: 'PA13',
                name: 'Ñeembucú',
            },
        ],
    },
    {
        code: 'PE',
        id: 2318,
        name: 'Peru',
        states: [
            {
                code: 'PE01',
                name: 'Amazonas',
            },
            {
                code: 'PE02',
                name: 'Ancash',
            },
            {
                code: 'PE03',
                name: 'Apurímac',
            },
            {
                code: 'PE04',
                name: 'Arequipa',
            },
            {
                code: 'PE05',
                name: 'Ayacucho',
            },
            {
                code: 'PE06',
                name: 'Cajamarca',
            },
            {
                code: 'PE07',
                name: 'Callao',
            },
            {
                code: 'PE08',
                name: 'Cusco',
            },
            {
                code: 'PE09',
                name: 'Huancavelica',
            },
            {
                code: 'PE10',
                name: 'Huánuco',
            },
            {
                code: 'PE11',
                name: 'Ica',
            },
            {
                code: 'PE12',
                name: 'Junín',
            },
            {
                code: 'PE13',
                name: 'La Libertad',
            },
            {
                code: 'PE14',
                name: 'Lambayeque',
            },
            {
                code: 'PE15',
                name: 'Lima',
            },
            {
                code: 'PE26',
                name: 'Lima [Province]',
            },
            {
                code: 'PE16',
                name: 'Loreto',
            },
            {
                code: 'PE17',
                name: 'Madre de Dios',
            },
            {
                code: 'PE18',
                name: 'Moquegua',
            },
            {
                code: 'PE19',
                name: 'Pasco',
            },
            {
                code: 'PE20',
                name: 'Piura',
            },
            {
                code: 'PE21',
                name: 'Puno',
            },
            {
                code: 'PE22',
                name: 'San Martín',
            },
            {
                code: 'PE23',
                name: 'Tacna',
            },
            {
                code: 'PE24',
                name: 'Tumbes',
            },
            {
                code: 'PE25',
                name: 'Ucayali',
            },
        ],
    },
    {
        code: 'PH',
        id: 2319,
        name: 'Philippines',
        states: [
            {
                code: 'RP01',
                name: 'Abra',
            },
            {
                code: 'RP02',
                name: 'Agusan del Norte',
            },
            {
                code: 'RP03',
                name: 'Agusan del Sur',
            },
            {
                code: 'RP04',
                name: 'Aklan',
            },
            {
                code: 'RP05',
                name: 'Albay',
            },
            {
                code: 'RP06',
                name: 'Antique',
            },
            {
                code: 'RPH6',
                name: 'Apayao',
            },
            {
                code: 'RPG8',
                name: 'Aurora',
            },
            {
                code: 'RP22',
                name: 'Basilan',
            },
            {
                code: 'RP07',
                name: 'Bataan',
            },
            {
                code: 'RP08',
                name: 'Batanes',
            },
            {
                code: 'RP09',
                name: 'Batangas',
            },
            {
                code: 'RP10',
                name: 'Benguet',
            },
            {
                code: 'RPH9',
                name: 'Biliran',
            },
            {
                code: 'RP11',
                name: 'Bohol',
            },
            {
                code: 'RP12',
                name: 'Bukidnon',
            },
            {
                code: 'RP13',
                name: 'Bulacan',
            },
            {
                code: 'RP14',
                name: 'Cagayan',
            },
            {
                code: 'RP15',
                name: 'Camarines Norte',
            },
            {
                code: 'RP16',
                name: 'Camarines Sur',
            },
            {
                code: 'RP17',
                name: 'Camiguin',
            },
            {
                code: 'RP18',
                name: 'Capiz',
            },
            {
                code: 'RP19',
                name: 'Catanduanes',
            },
            {
                code: 'RP20',
                name: 'Cavite',
            },
            {
                code: 'RP21',
                name: 'Cebu',
            },
            {
                code: 'RPI6',
                name: 'Compostela Valley',
            },
            {
                code: 'RP57',
                name: 'Cotabato',
            },
            {
                code: 'RP26',
                name: 'Davao Oriental',
            },
            {
                code: 'RPI7',
                name: 'Davao del Norte',
            },
            {
                code: 'RP25',
                name: 'Davao del Sur',
            },
            {
                code: 'RPI9',
                name: 'Dinagat Islands',
            },
            {
                code: 'RP23',
                name: 'Eastern Samar',
            },
            {
                code: 'RPJ3',
                name: 'Guimaras',
            },
            {
                code: 'RP27',
                name: 'Ifugao',
            },
            {
                code: 'RP28',
                name: 'Ilocos Norte',
            },
            {
                code: 'RP29',
                name: 'Ilocos Sur',
            },
            {
                code: 'RP30',
                name: 'Iloilo',
            },
            {
                code: 'RP31',
                name: 'Isabela',
            },
            {
                code: 'RPJ7',
                name: 'Kalinga',
            },
            {
                code: 'RP36',
                name: 'La Union',
            },
            {
                code: 'RP33',
                name: 'Laguna',
            },
            {
                code: 'RP34',
                name: 'Lanao del Norte',
            },
            {
                code: 'RP35',
                name: 'Lanao del Sur',
            },
            {
                code: 'RP37',
                name: 'Leyte',
            },
            {
                code: 'RP56',
                name: 'Maguindanao',
            },
            {
                code: 'RP38',
                name: 'Marinduque',
            },
            {
                code: 'RP39',
                name: 'Masbate',
            },
            {
                code: 'RPD9',
                name: 'Metropolitan Manila',
            },
            {
                code: 'RP42',
                name: 'Misamis Occidental',
            },
            {
                code: 'RP43',
                name: 'Misamis Oriental',
            },
            {
                code: 'RP44',
                name: 'Mountain',
            },
            {
                code: 'RPH3',
                name: 'Negros Occidental',
            },
            {
                code: 'RP46',
                name: 'Negros Oriental',
            },
            {
                code: 'RP67',
                name: 'Northern Samar',
            },
            {
                code: 'RP47',
                name: 'Nueva Ecija',
            },
            {
                code: 'RP48',
                name: 'Nueva Vizcaya',
            },
            {
                code: 'RP40',
                name: 'Occidental Mindoro',
            },
            {
                code: 'RP41',
                name: 'Oriental Mindoro',
            },
            {
                code: 'RP49',
                name: 'Palawan',
            },
            {
                code: 'RP50',
                name: 'Pampanga',
            },
            {
                code: 'RP51',
                name: 'Pangasinan',
            },
            {
                code: 'RPH2',
                name: 'Quezon',
            },
            {
                code: 'RP68',
                name: 'Quirino',
            },
            {
                code: 'RP53',
                name: 'Rizal',
            },
            {
                code: 'RP54',
                name: 'Romblon',
            },
            {
                code: 'RP55',
                name: 'Samar',
            },
            {
                code: 'PH72',
                name: 'Sarangani',
            },
            {
                code: 'RP69',
                name: 'Siquijor',
            },
            {
                code: 'RP58',
                name: 'Sorsogon',
            },
            {
                code: 'RP70',
                name: 'South Cotabato',
            },
            {
                code: 'RP59',
                name: 'Southern Leyte',
            },
            {
                code: 'RP71',
                name: 'Sultan Kudarat',
            },
            {
                code: 'RP60',
                name: 'Sulu',
            },
            {
                code: 'RP61',
                name: 'Surigao del Norte',
            },
            {
                code: 'RP62',
                name: 'Surigao del Sur',
            },
            {
                code: 'RPO3',
                name: 'Tarlac',
            },
            {
                code: 'RPO4',
                name: 'Tawi-Tawi',
            },
            {
                code: 'RPP1',
                name: 'Zambales',
            },
            {
                code: 'RPG7',
                name: 'Zamboanga del Norte',
            },
            {
                code: 'RP65',
                name: 'Zamboanga del Sur',
            },
            {
                code: 'RP66',
                name: 'Zamboanga-Sibugay',
            },
        ],
    },
    {
        code: 'PN',
        id: 2431,
        name: 'Pitcairn',
        states: [],
    },
    {
        code: 'PL',
        id: 2320,
        name: 'Poland',
        states: [
            {
                code: 'PL-DS',
                name: 'Dolnoslaskie',
            },
            {
                code: 'PL-KP',
                name: 'Kujawsko-pomorskie',
            },
            {
                code: 'PL-LD',
                name: 'Lódzkie',
            },
            {
                code: 'PL-LU',
                name: 'Lubelskie',
            },
            {
                code: 'PL-LB',
                name: 'Lubuskie',
            },
            {
                code: 'PL-MA',
                name: 'Malopolskie',
            },
            {
                code: 'PL-MZ',
                name: 'Mazowieckie',
            },
            {
                code: 'PL-OP',
                name: 'Opolskie',
            },
            {
                code: 'PL-PK',
                name: 'Podkarpackie',
            },
            {
                code: 'PL-PD',
                name: 'Podlaskie',
            },
            {
                code: 'PL-PM',
                name: 'Pomorskie',
            },
            {
                code: 'PL-SL',
                name: 'Slaskie',
            },
            {
                code: 'PL-SK',
                name: 'Swietokrzyskie',
            },
            {
                code: 'PL-WN',
                name: 'Warminsko-mazurskie',
            },
            {
                code: 'PL-WP',
                name: 'Wielkopolskie',
            },
        ],
    },
    {
        code: 'PT',
        id: 2321,
        name: 'Portugal',
        states: [
            {
                code: 'PO23',
                name: 'Acores Autonomous',
            },
            {
                code: 'PO02',
                name: 'Aveiro',
            },
            {
                code: 'PO03',
                name: 'Beja',
            },
            {
                code: 'PO04',
                name: 'Braga',
            },
            {
                code: 'PO05',
                name: 'Braganca',
            },
            {
                code: 'PO06',
                name: 'Castelo Branco',
            },
            {
                code: 'PO07',
                name: 'Coimbra',
            },
            {
                code: 'PO08',
                name: 'Evora',
            },
            {
                code: 'PO09',
                name: 'Faro',
            },
            {
                code: 'PO11',
                name: 'Guarda',
            },
            {
                code: 'PO13',
                name: 'Leiria',
            },
            {
                code: 'PO14',
                name: 'Lisboa',
            },
            {
                code: 'PO10',
                name: 'Madeira Autonomous',
            },
            {
                code: 'PO16',
                name: 'Portalegre',
            },
            {
                code: 'PO17',
                name: 'Porto',
            },
            {
                code: 'PO18',
                name: 'Santarem',
            },
            {
                code: 'PO19',
                name: 'Setubal',
            },
            {
                code: 'PO20',
                name: 'Viana do Castelo',
            },
            {
                code: 'PO21',
                name: 'Vila Real',
            },
            {
                code: 'PO22',
                name: 'Viseu',
            },
        ],
    },
    {
        code: 'PR',
        id: 2374,
        name: 'Puerto Rico',
        states: [
            {
                code: 'PR.AJ',
                name: 'Adjuntas',
            },
            {
                code: 'PR.AD',
                name: 'Aguada',
            },
            {
                code: 'PR.AL',
                name: 'Aguadilla',
            },
            {
                code: 'PR.AB',
                name: 'Aguas Buenas',
            },
            {
                code: 'PR.AI',
                name: 'Aibonito',
            },
            {
                code: 'PR.AN',
                name: 'Añasco',
            },
            {
                code: 'PR.AC',
                name: 'Arecibo',
            },
            {
                code: 'PR.AR',
                name: 'Arroyo',
            },
            {
                code: 'PR.BC',
                name: 'Barceloneta',
            },
            {
                code: 'PR.BQ',
                name: 'Barranquitas',
            },
            {
                code: 'PR.BY',
                name: 'Bayamón',
            },
            {
                code: 'PR.CR',
                name: 'Cabo Rojo',
            },
            {
                code: 'PR.CG',
                name: 'Caguas',
            },
            {
                code: 'PR.CA',
                name: 'Camuy',
            },
            {
                code: 'PR.CV',
                name: 'Canóvanas',
            },
            {
                code: 'PR.CN',
                name: 'Carolina',
            },
            {
                code: 'PR.CT',
                name: 'Cataño',
            },
            {
                code: 'PR.CY',
                name: 'Cayey',
            },
            {
                code: 'PR.CB',
                name: 'Ceiba',
            },
            {
                code: 'PR.CL',
                name: 'Ciales',
            },
            {
                code: 'PR.CD',
                name: 'Cidra',
            },
            {
                code: 'PR.CO',
                name: 'Coamo',
            },
            {
                code: 'PR.CM',
                name: 'Comerío',
            },
            {
                code: 'PR.CZ',
                name: 'Corozal',
            },
            {
                code: 'PR.CU',
                name: 'Culebra',
            },
            {
                code: 'PR.DO',
                name: 'Dorado',
            },
            {
                code: 'PR.FJ',
                name: 'Fajardo',
            },
            {
                code: 'PR.FL',
                name: 'Florida',
            },
            {
                code: 'PR.GC',
                name: 'Guánica',
            },
            {
                code: 'PR.GM',
                name: 'Guayama',
            },
            {
                code: 'PR.GL',
                name: 'Guayanilla',
            },
            {
                code: 'PR.GB',
                name: 'Guaynabo',
            },
            {
                code: 'PR.GR',
                name: 'Gurabo',
            },
            {
                code: 'PR.HA',
                name: 'Hatillo',
            },
            {
                code: 'PR.HO',
                name: 'Hormigueros',
            },
            {
                code: 'PR.HU',
                name: 'Humacao',
            },
            {
                code: 'PR.IS',
                name: 'Isabela',
            },
            {
                code: 'PR.JY',
                name: 'Jayuya',
            },
            {
                code: 'PR.JD',
                name: 'Juana Díaz',
            },
            {
                code: 'PR.JC',
                name: 'Juncos',
            },
            {
                code: 'PR.LJ',
                name: 'Lajas',
            },
            {
                code: 'PR.LR',
                name: 'Lares',
            },
            {
                code: 'PR.LM',
                name: 'Las Marías',
            },
            {
                code: 'PR.LP',
                name: 'Las Piedras',
            },
            {
                code: 'PR.LZ',
                name: 'Loíza',
            },
            {
                code: 'PR.LQ',
                name: 'Luquillo',
            },
            {
                code: 'PR.MT',
                name: 'Manatí',
            },
            {
                code: 'PR.MR',
                name: 'Maricao',
            },
            {
                code: 'PR.MB',
                name: 'Maunabo',
            },
            {
                code: 'PR.MG',
                name: 'Mayagüez',
            },
            {
                code: 'PR.MC',
                name: 'Moca',
            },
            {
                code: 'PR.MV',
                name: 'Morovis',
            },
            {
                code: 'PR.NG',
                name: 'Naguabo',
            },
            {
                code: 'PR.NR',
                name: 'Naranjito',
            },
            {
                code: 'PR.OR',
                name: 'Orocovis',
            },
            {
                code: 'PR.PT',
                name: 'Patillas',
            },
            {
                code: 'PR.PN\t',
                name: 'Peñuelas',
            },
            {
                code: 'PR.PO',
                name: 'Ponce',
            },
            {
                code: 'PR.QB',
                name: 'Quebradillas',
            },
            {
                code: 'PR.RC',
                name: 'Rincón',
            },
            {
                code: 'PR.RG',
                name: 'Río Grande',
            },
            {
                code: 'PR.SB',
                name: 'Sabana Grande',
            },
            {
                code: 'PR.SA',
                name: 'Salinas',
            },
            {
                code: 'PR.SG',
                name: 'San Germán',
            },
            {
                code: 'PR.SJ',
                name: 'San Juan',
            },
            {
                code: 'PR.SL',
                name: 'San Lorenzo',
            },
            {
                code: 'PR.SS',
                name: 'San Sebastián',
            },
            {
                code: 'PR.SI',
                name: 'Santa Isabel',
            },
            {
                code: 'PR.TA',
                name: 'Toa Alta',
            },
            {
                code: 'PR.TB',
                name: 'Toa Baja',
            },
            {
                code: 'PR.TJ',
                name: 'Trujillo Alto',
            },
            {
                code: 'PR.UT',
                name: 'Utuado',
            },
            {
                code: 'PR.VA',
                name: 'Vega Alta',
            },
            {
                code: 'PR.VB',
                name: 'Vega Baja',
            },
            {
                code: 'PR.VQ',
                name: 'Vieques',
            },
            {
                code: 'PR.VL',
                name: 'Villalba',
            },
            {
                code: 'PR.YB',
                name: 'Yabucoa',
            },
            {
                code: 'PR.YU',
                name: 'Yauco',
            },
        ],
    },
    {
        code: 'QA',
        id: 2322,
        name: 'Qatar',
        states: [
            {
                code: 'QA01',
                name: 'Ad Dawhah',
            },
            {
                code: 'QA13',
                name: 'Al Daayen',
            },
            {
                code: 'QA04',
                name: 'Al Khawr',
            },
            {
                code: 'QA10',
                name: 'Al Wakrah',
            },
            {
                code: 'QA14',
                name: 'Al-Shahaniya',
            },
            {
                code: 'QA06',
                name: 'Ar Rayyan',
            },
            {
                code: 'QA08',
                name: 'Madinat ach Shamal',
            },
            {
                code: 'QA09',
                name: 'Umm Salal',
            },
        ],
    },
    {
        code: 'R999',
        id: 2398,
        name: 'Reunion',
        states: [],
    },
    {
        code: 'RO',
        id: 2323,
        name: 'Romania',
        states: [
            {
                code: 'RO-AB',
                name: 'Alba',
            },
            {
                code: 'RO-AR',
                name: 'Arad',
            },
            {
                code: 'RO-AG',
                name: 'Arges',
            },
            {
                code: 'RO-BC',
                name: 'Bacau',
            },
            {
                code: 'RO-BH',
                name: 'Bihor',
            },
            {
                code: 'RO-BN',
                name: 'Bistrita-Nasaud',
            },
            {
                code: 'RO-BT',
                name: 'Botosani',
            },
            {
                code: 'RO-BR',
                name: 'Braila',
            },
            {
                code: 'RO-BV',
                name: 'Brasov',
            },
            {
                code: 'RO-B',
                name: 'Bucuresti',
            },
            {
                code: 'RO-BZ',
                name: 'Buzau',
            },
            {
                code: 'RO-CL',
                name: 'Calarasi',
            },
            {
                code: 'RO-CS',
                name: 'Caras-Severin',
            },
            {
                code: 'RO-CJ',
                name: 'Cluj',
            },
            {
                code: 'RO-CT',
                name: 'Constanta',
            },
            {
                code: 'RO-CV',
                name: 'Covasna',
            },
            {
                code: 'RO-DB',
                name: 'Dâmbovita',
            },
            {
                code: 'RO-DJ',
                name: 'Dolj',
            },
            {
                code: 'RO-GL',
                name: 'Galati',
            },
            {
                code: 'RO-GR',
                name: 'Giurgiu',
            },
            {
                code: 'RO-GJ',
                name: 'Gorj',
            },
            {
                code: 'RO-HR',
                name: 'Harghita',
            },
            {
                code: 'RO-HD',
                name: 'Hunedoara',
            },
            {
                code: 'RO-IL',
                name: 'Ialomita',
            },
            {
                code: 'RO-IS',
                name: 'Iasi',
            },
            {
                code: 'RO-IF',
                name: 'Ilfov',
            },
            {
                code: 'RO-MM',
                name: 'Maramures',
            },
            {
                code: 'RO-MH',
                name: 'Mehedinti',
            },
            {
                code: 'RO-MS',
                name: 'Mures',
            },
            {
                code: 'RO-NT',
                name: 'Neamt',
            },
            {
                code: 'RO-OT',
                name: 'Olt',
            },
            {
                code: 'RO-PH',
                name: 'Prahova',
            },
            {
                code: 'RO-SJ',
                name: 'Salaj',
            },
            {
                code: 'RO-SM',
                name: 'Satu Mare',
            },
            {
                code: 'RO-SB',
                name: 'Sibiu',
            },
            {
                code: 'RO-SV',
                name: 'Suceava',
            },
            {
                code: 'RO-TR',
                name: 'Teleorman',
            },
            {
                code: 'RO-TM',
                name: 'Timis',
            },
            {
                code: 'RO-TL',
                name: 'Tulcea',
            },
            {
                code: 'RO-VL',
                name: 'Vâlcea',
            },
            {
                code: 'RO-VS',
                name: 'Vaslui',
            },
            {
                code: 'RO-VN',
                name: 'Vrancea',
            },
        ],
    },
    {
        code: 'RU',
        id: 2324,
        name: 'Russian Federation',
        states: [
            {
                code: 'RS01',
                name: 'Adygeya Republic',
            },
            {
                code: 'RS02',
                name: 'Aginskiy Buryatskiy Avtonomnyy Okrug',
            },
            {
                code: 'RS03',
                name: 'Altay Republic',
            },
            {
                code: 'RS04',
                name: 'Altayskiy Kray',
            },
            {
                code: 'RS05',
                name: "Amurskaya Oblast'",
            },
            {
                code: 'RS06',
                name: "Arkhangel'skaya Oblast'",
            },
            {
                code: 'RS07',
                name: "Astrakhanskaya Oblast'",
            },
            {
                code: 'RS08',
                name: 'Bashkortostan Republic',
            },
            {
                code: 'RS09',
                name: "Belgorodskaya Oblast'",
            },
            {
                code: 'RS10',
                name: "Bryanskaya Oblast'",
            },
            {
                code: 'RS11',
                name: 'Buryatiya Republic',
            },
            {
                code: 'RSCI',
                name: 'Chechnya Republic',
            },
            {
                code: 'RS13',
                name: "Chelyabinskaya Oblast'",
            },
            {
                code: 'RS14',
                name: "Chitinskaya Oblast'",
            },
            {
                code: 'RS15',
                name: 'Chukotskiy Avtonomnyy Okrug',
            },
            {
                code: 'RS16',
                name: 'Chuvashiya Republic',
            },
            {
                code: 'RS17',
                name: 'Dagestan Republic',
            },
            {
                code: 'RS18',
                name: 'Evenkiyskiy Avtonomnyy Okrug',
            },
            {
                code: 'RS20',
                name: "Irkutskaya Oblast'",
            },
            {
                code: 'RS21',
                name: "Ivanovskaya Oblast'",
            },
            {
                code: 'RS22',
                name: 'Kabardino-Balkariya Republic',
            },
            {
                code: 'RS23',
                name: "Kaliningradskaya Oblast'",
            },
            {
                code: 'RS24',
                name: 'Kalmykiya Republic',
            },
            {
                code: 'RS25',
                name: "Kaluzhskaya Oblast'",
            },
            {
                code: 'RS26',
                name: "Kamchatskaya Oblast'",
            },
            {
                code: 'RS27',
                name: 'Karachayevo-Cherkesiya Republic',
            },
            {
                code: 'RS28',
                name: 'Kareliya Republic',
            },
            {
                code: 'RS29',
                name: "Kemerovskaya Oblast'",
            },
            {
                code: 'RS30',
                name: 'Khabarovskiy Kray',
            },
            {
                code: 'RS31',
                name: 'Khakasiya Republic',
            },
            {
                code: 'RS32',
                name: 'Khanty-Mansiyskiy Avtonomnyy Okrug',
            },
            {
                code: 'RS33',
                name: "Kirovskaya Oblast'",
            },
            {
                code: 'RS34',
                name: 'Komi Republic',
            },
            {
                code: 'RS36',
                name: 'Koryakskiy Avtonomnyy Okrug',
            },
            {
                code: 'RS37',
                name: "Kostromskaya Oblast'",
            },
            {
                code: 'RS38',
                name: 'Krasnodarskiy Kray',
            },
            {
                code: 'RS39',
                name: 'Krasnoyarskiy Kray',
            },
            {
                code: 'RS40',
                name: "Kurganskaya Oblast'",
            },
            {
                code: 'RS41',
                name: "Kurskaya Oblast'",
            },
            {
                code: 'RS42',
                name: "Leningradskaya Oblast'",
            },
            {
                code: 'RS43',
                name: "Lipetskaya Oblast'",
            },
            {
                code: 'RS44',
                name: "Magadanskaya Oblast'",
            },
            {
                code: 'RS45',
                name: 'Mariy-El Republic',
            },
            {
                code: 'RS46',
                name: 'Mordoviya Republic',
            },
            {
                code: 'RS47',
                name: "Moskovskaya Oblast'",
            },
            {
                code: 'RS48',
                name: 'Moskva Federal City',
            },
            {
                code: 'RS49',
                name: "Murmanskaya Oblast'",
            },
            {
                code: 'RS50',
                name: 'Nenetskiy Avtonomnyy Okrug',
            },
            {
                code: 'RS51',
                name: "Nizhegorodskaya Oblast'",
            },
            {
                code: 'RS52',
                name: "Novgorodskaya Oblast'",
            },
            {
                code: 'RS53',
                name: "Novosibirskaya Oblast'",
            },
            {
                code: 'RS54',
                name: "Omskaya Oblast'",
            },
            {
                code: 'RS55',
                name: "Orenburgskaya Oblast'",
            },
            {
                code: 'RS56',
                name: "Orlovskaya Oblast'",
            },
            {
                code: 'RS57',
                name: "Penzenskaya Oblast'",
            },
            {
                code: 'RS90',
                name: 'Permskiy Kray',
            },
            {
                code: 'RS59',
                name: 'Primorskiy Kray',
            },
            {
                code: 'RS60',
                name: "Pskovskaya Oblast'",
            },
            {
                code: 'RS61',
                name: "Rostovskaya Oblast'",
            },
            {
                code: 'RS62',
                name: "Ryazanskaya Oblast'",
            },
            {
                code: 'RS63',
                name: 'Sakha (Yakutiya) Republic',
            },
            {
                code: 'RS64',
                name: "Sakhalinskaya Oblast'",
            },
            {
                code: 'RS65',
                name: "Samarskaya Oblast'",
            },
            {
                code: 'RS66',
                name: 'Sankt-Peterburg Federal City',
            },
            {
                code: 'RS67',
                name: "Saratovskaya Oblast'",
            },
            {
                code: 'RS68',
                name: 'Severnaya Osetiya-Alaniya Respublika',
            },
            {
                code: 'RS69',
                name: "Smolenskaya Oblast'",
            },
            {
                code: 'RS70',
                name: "Stavropol'skiy Kray",
            },
            {
                code: 'RS71',
                name: "Sverdlovskaya Oblast'",
            },
            {
                code: 'RS72',
                name: "Tambovskaya Oblast'",
            },
            {
                code: 'RS73',
                name: 'Tatarstan Republic',
            },
            {
                code: 'RS74',
                name: 'Taymyrskiy (Dolgano-Nenetskiy) Avtonomnyy Okrug',
            },
            {
                code: 'RS75',
                name: "Tomskaya Oblast'",
            },
            {
                code: 'RS76',
                name: "Tul'skaya Oblast'",
            },
            {
                code: 'RS77',
                name: "Tverskaya Oblast'",
            },
            {
                code: 'RS78',
                name: "Tyumenskaya Oblast'",
            },
            {
                code: 'RS79',
                name: 'Tyva Republic',
            },
            {
                code: 'RS80',
                name: 'Udmurtiya Republic',
            },
            {
                code: 'RS81',
                name: "Ul'yanovskaya Oblast'",
            },
            {
                code: 'RS82',
                name: "Ust'-Ordynskiy Buryatskiy Avtonomnyy Okrug",
            },
            {
                code: 'RS83',
                name: "Vladimirskaya Oblast'",
            },
            {
                code: 'RS84',
                name: "Volgogradskaya Oblast'",
            },
            {
                code: 'RS85',
                name: "Vologodskaya Oblast'",
            },
            {
                code: 'RS86',
                name: "Voronezhskaya Oblast'",
            },
            {
                code: 'RS87',
                name: 'Yamalo-Nenetskiy Avtonomnyy Okrug',
            },
            {
                code: 'RS88',
                name: "Yaroslavskaya Oblast'",
            },
            {
                code: 'RS89',
                name: "Yevreyskaya Avtonomnaya Oblast'",
            },
        ],
    },
    {
        code: 'RW',
        id: 2325,
        name: 'Rwanda',
        states: [
            {
                code: 'RW11',
                name: 'Eastern',
            },
            {
                code: 'RW12',
                name: 'Kigali City',
            },
            {
                code: 'RW13',
                name: 'Northern',
            },
            {
                code: 'RW15',
                name: 'Southern',
            },
            {
                code: 'RW14',
                name: 'Western',
            },
        ],
    },
    {
        code: 'BL',
        id: 2432,
        name: 'Saint Barthélemy',
        states: [],
    },
    {
        code: 'SH',
        id: 2433,
        name: 'Saint Helena; Ascension and Tristan Da Cunha',
        states: [],
    },
    {
        code: 'KN',
        id: 2399,
        name: 'Saint Kitts and Nevis',
        states: [],
    },
    {
        code: 'LC',
        id: 2326,
        name: 'Saint Lucia',
        states: [],
    },
    {
        code: 'MF',
        id: 2434,
        name: 'Saint Martin',
        states: [
            {
                code: 'MF.SM',
                name: 'Saint Martin',
            },
        ],
    },
    {
        code: 'PM',
        id: 2435,
        name: 'Saint Pierre And Miquelon',
        states: [],
    },
    {
        code: 'VC',
        id: 2400,
        name: 'Saint Vincent and Grenadines',
        states: [],
    },
    {
        code: 'WS',
        id: 2401,
        name: 'Samoa',
        states: [
            {
                code: 'WS01',
                name: "A'ana",
            },
            {
                code: 'WS02',
                name: 'Aiga-i-le-Tai',
            },
            {
                code: 'WS03',
                name: 'Atua',
            },
            {
                code: 'WS04',
                name: "Fa'asaleleaga",
            },
            {
                code: 'WS05',
                name: "Gaga'emauga",
            },
            {
                code: 'WS07',
                name: 'Gagaifomauga',
            },
            {
                code: 'WS08',
                name: 'Palauli',
            },
            {
                code: 'WS09',
                name: "Satupa'itea",
            },
            {
                code: 'WS10',
                name: 'Tuamasaga',
            },
            {
                code: 'WS06',
                name: "Va'a-o-Fonoti",
            },
            {
                code: 'WS11',
                name: 'Vaisigano',
            },
        ],
    },
    {
        code: 'SM',
        id: 2327,
        name: 'San Marino',
        states: [],
    },
    {
        code: 'TP',
        id: 2403,
        name: 'Sao Tome and Principe',
        states: [],
    },
    {
        code: 'SA',
        id: 2328,
        name: 'Saudi Arabia',
        states: [
            {
                code: 'SA02',
                name: 'Al Bahah',
            },
            {
                code: 'SA15',
                name: 'Al Hudud ash Shamaliyah',
            },
            {
                code: 'SA20',
                name: 'Al Jawf',
            },
            {
                code: 'SA05',
                name: 'Al Madinah',
            },
            {
                code: 'SA08',
                name: 'Al Qasim',
            },
            {
                code: 'SA10',
                name: 'Ar Riyad',
            },
            {
                code: 'SA06',
                name: 'Ash Sharqiyah',
            },
            {
                code: 'SA11',
                name: 'Asir',
            },
            {
                code: 'SA13',
                name: "Ha'il",
            },
            {
                code: 'SA17',
                name: 'Jizan',
            },
            {
                code: 'SA14',
                name: 'Makkah',
            },
            {
                code: 'SA16',
                name: 'Najran',
            },
            {
                code: 'SA19',
                name: 'Tabuk',
            },
        ],
    },
    {
        code: 'SN',
        id: 2329,
        name: 'Senegal',
        states: [
            {
                code: 'SG01',
                name: 'Dakar',
            },
            {
                code: 'SG03',
                name: 'Diourbel',
            },
            {
                code: 'SG09',
                name: 'Fatick',
            },
            {
                code: 'SG16',
                name: 'Kaffrine',
            },
            {
                code: 'SG10',
                name: 'Kaolack',
            },
            {
                code: 'SG17',
                name: 'Kédougou',
            },
            {
                code: 'SG11',
                name: 'Kolda',
            },
            {
                code: 'SG13',
                name: 'Louga',
            },
            {
                code: 'SG15',
                name: 'Matam',
            },
            {
                code: 'SG14',
                name: 'Saint-Louis',
            },
            {
                code: 'SG18',
                name: 'Sédhiou',
            },
            {
                code: 'SG05',
                name: 'Tambacounda',
            },
            {
                code: 'SG07',
                name: 'Thiès',
            },
            {
                code: 'SG12',
                name: 'Ziguinchor',
            },
        ],
    },
    {
        code: 'RI',
        id: 2402,
        name: 'Serbia',
        states: [
            {
                code: 'RS-00',
                name: 'Belgrade',
            },
            {
                code: 'RS-14',
                name: 'Borski okrug',
            },
            {
                code: 'RS-11',
                name: 'Branicevski okrug',
            },
            {
                code: 'RS-23',
                name: 'Jablanicki okrug',
            },
            {
                code: 'RS-06',
                name: 'Južnobanatski okrug',
            },
            {
                code: 'RS-04',
                name: 'Južnobanatski okrug',
            },
            {
                code: 'RS-09',
                name: 'Kolubarski okrug',
            },
            {
                code: 'RS-25',
                name: 'Kosovski okrug',
            },
            {
                code: 'RS-28',
                name: 'Kosovsko-Mitrovacki okrug',
            },
            {
                code: 'RS-29',
                name: 'Kosovsko-Pomoravski okrug',
            },
            {
                code: 'RS-08',
                name: 'Macvanski okrug',
            },
            {
                code: 'RS-17',
                name: 'Moravicki okrug',
            },
            {
                code: 'RS-20',
                name: 'Nišavski okrug',
            },
            {
                code: 'RS-24',
                name: 'Pcinjski okrug',
            },
            {
                code: 'RS-26',
                name: 'Pecki okrug',
            },
            {
                code: 'RS-22',
                name: 'Pirotski okrug',
            },
            {
                code: 'RS-10',
                name: 'Podunavski okrug',
            },
            {
                code: 'RS-13',
                name: 'Pomoravski okrug',
            },
            {
                code: 'RS-27',
                name: 'Prizrenski okrug',
            },
            {
                code: 'RS-19',
                name: 'Rasinski okrug',
            },
            {
                code: 'RS-18',
                name: 'Raška okrug',
            },
            {
                code: 'RS-01',
                name: 'Severnobacki okrug',
            },
            {
                code: 'RS-03',
                name: 'Severnobanatski okrug',
            },
            {
                code: 'RS-02',
                name: 'Srednjebanatski okrug',
            },
            {
                code: 'RS-07',
                name: 'Sremski okrug',
            },
            {
                code: 'RS-12',
                name: 'Šumadijski okrug',
            },
            {
                code: 'RS-21',
                name: 'Toplièki okrug',
            },
            {
                code: 'RS-15',
                name: 'Zajeèarski okrug',
            },
            {
                code: 'RS-05',
                name: 'Zapadnobaèki okrug',
            },
            {
                code: 'RS-16',
                name: 'Zlatiborski okrug',
            },
        ],
    },
    {
        code: 'SC',
        id: 2331,
        name: 'Seychelles',
        states: [],
    },
    {
        code: 'SL',
        id: 2332,
        name: 'Sierra Leone',
        states: [
            {
                code: 'SL01',
                name: 'Eastern',
            },
            {
                code: 'SL02',
                name: 'Northern',
            },
            {
                code: 'SL03',
                name: 'Southern',
            },
            {
                code: 'SL04',
                name: 'Western',
            },
        ],
    },
    {
        code: 'SG',
        id: 2333,
        name: 'Singapore',
        states: [
            {
                code: 'SG01',
                name: 'Central Singapore',
            },
            {
                code: 'SG02',
                name: 'North East',
            },
            {
                code: 'SG03',
                name: 'North West',
            },
            {
                code: 'SG04',
                name: 'South East',
            },
            {
                code: 'SG05',
                name: 'South West',
            },
        ],
    },
    {
        code: 'SX',
        id: 2448,
        name: 'Sint Maarten',
        states: [
            {
                code: 'SX.SM',
                name: 'Sint Maarten',
            },
        ],
    },
    {
        code: 'SK',
        id: 2334,
        name: 'Slovakia',
        states: [
            {
                code: 'SK-BC',
                name: 'Banskobystrický kraj',
            },
            {
                code: 'SK-BL',
                name: 'Bratislavský kraj',
            },
            {
                code: 'SK-KI',
                name: 'Košický kraj',
            },
            {
                code: 'SK-NI',
                name: 'Nitriansky kraj',
            },
            {
                code: 'SK-PV',
                name: 'Prešovský kraj',
            },
            {
                code: 'SK-TC',
                name: 'Trenciansky kraj',
            },
            {
                code: 'SK-TA',
                name: 'Trnavský kraj',
            },
            {
                code: 'SK-ZI',
                name: 'Žilinský kraj',
            },
        ],
    },
    {
        code: 'SI',
        id: 2335,
        name: 'Slovenia',
        states: [
            {
                code: 'SI-001',
                name: 'Ajdovšcina',
            },
            {
                code: 'SI-195',
                name: 'Apace',
            },
            {
                code: 'SI-002',
                name: 'Beltinci',
            },
            {
                code: 'SI-148',
                name: 'Benedikt',
            },
            {
                code: 'SI-149',
                name: 'Bistrica ob Sotli',
            },
            {
                code: 'SI-003',
                name: 'Bled',
            },
            {
                code: 'SI-150',
                name: 'Bloke',
            },
            {
                code: 'SI-004',
                name: 'Bohinj',
            },
            {
                code: 'SI-005',
                name: 'Borovnica',
            },
            {
                code: 'SI-006',
                name: 'Bovec',
            },
            {
                code: 'SI-151',
                name: 'Braslovce',
            },
            {
                code: 'SI-007',
                name: 'Brda',
            },
            {
                code: 'SI-009',
                name: 'Brežice',
            },
            {
                code: 'SI-008',
                name: 'Brezovica',
            },
            {
                code: 'SI-152',
                name: 'Cankova',
            },
            {
                code: 'SI-011',
                name: 'Celje',
            },
            {
                code: 'SI-012',
                name: 'Cerklje na Gorenjskem',
            },
            {
                code: 'SI-013',
                name: 'Cerknica',
            },
            {
                code: 'SI-014',
                name: 'Cerkno',
            },
            {
                code: 'SI-153',
                name: 'Cerkvenjak',
            },
            {
                code: 'SI-197',
                name: 'Cirkulane',
            },
            {
                code: 'SI-015',
                name: 'Crenšovci',
            },
            {
                code: 'SI-016',
                name: 'Crna na Koroškem',
            },
            {
                code: 'SI-017',
                name: 'Crnomelj',
            },
            {
                code: 'SI-018',
                name: 'Destrnik',
            },
            {
                code: 'SI-019',
                name: 'Divaca',
            },
            {
                code: 'SI-154',
                name: 'Dobje',
            },
            {
                code: 'SI-020',
                name: 'Dobrepolje',
            },
            {
                code: 'SI-155',
                name: 'Dobrna',
            },
            {
                code: 'SI-021',
                name: 'Dobrova-Polhov Gradec',
            },
            {
                code: 'SI-156',
                name: 'Dobrovnik/Dobronak',
            },
            {
                code: 'SI-022',
                name: 'Dol pri Ljubljani',
            },
            {
                code: 'SI-157',
                name: 'Dolenjske Toplice',
            },
            {
                code: 'SI-023',
                name: 'Domžale',
            },
            {
                code: 'SI-024',
                name: 'Dornava',
            },
            {
                code: 'SI-025',
                name: 'Dravograd',
            },
            {
                code: 'SI-026',
                name: 'Duplek',
            },
            {
                code: 'SI-027',
                name: 'Gorenja vas-Poljane',
            },
            {
                code: 'SI-028',
                name: 'Gorišnica',
            },
            {
                code: 'SI-207',
                name: 'Gorje',
            },
            {
                code: 'SI-029',
                name: 'Gornja Radgona',
            },
            {
                code: 'SI-030',
                name: 'Gornji Grad',
            },
            {
                code: 'SI-031',
                name: 'Gornji Petrovci',
            },
            {
                code: 'SI-158',
                name: 'Grad',
            },
            {
                code: 'SI-032',
                name: 'Grosuplje',
            },
            {
                code: 'SI-159',
                name: 'Hajdina',
            },
            {
                code: 'SI-160',
                name: 'Hoce-Slivnica',
            },
            {
                code: 'SI-161',
                name: 'Hodoš/Hodos',
            },
            {
                code: 'SI-162',
                name: 'Horjul',
            },
            {
                code: 'SI-034',
                name: 'Hrastnik',
            },
            {
                code: 'SI-035',
                name: 'Hrpelje-Kozina',
            },
            {
                code: 'SI-036',
                name: 'Idrija',
            },
            {
                code: 'SI-037',
                name: 'Ig',
            },
            {
                code: 'SI-038',
                name: 'Ilirska Bistrica',
            },
            {
                code: 'SI-039',
                name: 'Ivancna Gorica',
            },
            {
                code: 'SI-040',
                name: 'Izola/Isola',
            },
            {
                code: 'SI-041',
                name: 'Jesenice',
            },
            {
                code: 'SI-163',
                name: 'Jezersko',
            },
            {
                code: 'SI-042',
                name: 'Juršinci',
            },
            {
                code: 'SI-043',
                name: 'Kamnik',
            },
            {
                code: 'SI-044',
                name: 'Kanal',
            },
            {
                code: 'SI-045',
                name: 'Kidricevo',
            },
            {
                code: 'SI-046',
                name: 'Kobarid',
            },
            {
                code: 'SI-047',
                name: 'Kobilje',
            },
            {
                code: 'SI-048',
                name: 'Kocevje',
            },
            {
                code: 'SI-049',
                name: 'Komen',
            },
            {
                code: 'SI-164',
                name: 'Komenda',
            },
            {
                code: 'SI-050',
                name: 'Koper/Capodistria',
            },
            {
                code: 'SI-196',
                name: 'Kosanjevica na Krki',
            },
            {
                code: 'SI-165',
                name: 'Kostel',
            },
            {
                code: 'SI-051',
                name: 'Kozje',
            },
            {
                code: 'SI-052',
                name: 'Kranj',
            },
            {
                code: 'SI-053',
                name: 'Kranjska Gora',
            },
            {
                code: 'SI-166',
                name: 'Križevci',
            },
            {
                code: 'SI-054',
                name: 'Krško',
            },
            {
                code: 'SI-055',
                name: 'Kungota',
            },
            {
                code: 'SI-056',
                name: 'Kuzma',
            },
            {
                code: 'SI-057',
                name: 'Laško',
            },
            {
                code: 'SI-058',
                name: 'Lenart',
            },
            {
                code: 'SI-059',
                name: 'Lendava/Lendva',
            },
            {
                code: 'SI-060',
                name: 'Litija',
            },
            {
                code: 'SI-061',
                name: 'Ljubljana',
            },
            {
                code: 'SI-062',
                name: 'Ljubno',
            },
            {
                code: 'SI-063',
                name: 'Ljutomer',
            },
            {
                code: 'SI-208',
                name: 'Log-Dragomer',
            },
            {
                code: 'SI-064',
                name: 'Logatec',
            },
            {
                code: 'SI-065',
                name: 'Loška dolina',
            },
            {
                code: 'SI-066',
                name: 'Loški Potok',
            },
            {
                code: 'SI-167',
                name: 'Lovrenc na Pohorju',
            },
            {
                code: 'SI-067',
                name: 'Luce',
            },
            {
                code: 'SI-068',
                name: 'Lukovica',
            },
            {
                code: 'SI-069',
                name: 'Majšperk',
            },
            {
                code: 'SI-198',
                name: 'Makole',
            },
            {
                code: 'SI-070',
                name: 'Maribor',
            },
            {
                code: 'SI-168',
                name: 'Markovci',
            },
            {
                code: 'SI-071',
                name: 'Medvode',
            },
            {
                code: 'SI-072',
                name: 'Mengeš',
            },
            {
                code: 'SI-073',
                name: 'Metlika',
            },
            {
                code: 'SI-074',
                name: 'Mežica',
            },
            {
                code: 'SI-169',
                name: 'Miklavž na Dravskem polju',
            },
            {
                code: 'SI-075',
                name: 'Miren-Kostanjevica',
            },
            {
                code: 'SI-170',
                name: 'Mirna Pec',
            },
            {
                code: 'SI-076',
                name: 'Mislinja',
            },
            {
                code: 'SI-199',
                name: 'Mokronog-Trebelno',
            },
            {
                code: 'SI-077',
                name: 'Moravce',
            },
            {
                code: 'SI-078',
                name: 'Moravske Toplice',
            },
            {
                code: 'SI-079',
                name: 'Mozirje',
            },
            {
                code: 'SI-080',
                name: 'Murska Sobota',
            },
            {
                code: 'SI-081',
                name: 'Muta',
            },
            {
                code: 'SI-082',
                name: 'Naklo',
            },
            {
                code: 'SI-083',
                name: 'Nazarje',
            },
            {
                code: 'SI-084',
                name: 'Nova Gorica',
            },
            {
                code: 'SI-085',
                name: 'Novo mesto',
            },
            {
                code: 'SI-086',
                name: 'Odranci',
            },
            {
                code: 'SI-171',
                name: 'Oplotnica',
            },
            {
                code: 'SI-087',
                name: 'Ormož',
            },
            {
                code: 'SI-088',
                name: 'Osilnica',
            },
            {
                code: 'SI-089',
                name: 'Pesnica',
            },
            {
                code: 'SI-090',
                name: 'Piran/Pirano',
            },
            {
                code: 'SI-091',
                name: 'Pivka',
            },
            {
                code: 'SI-092',
                name: 'Podcetrtek',
            },
            {
                code: 'SI-172',
                name: 'Podlehnik',
            },
            {
                code: 'SI-093',
                name: 'Podvelka',
            },
            {
                code: 'SI-200',
                name: 'Poljcane',
            },
            {
                code: 'SI-173',
                name: 'Polzela',
            },
            {
                code: 'SI-094',
                name: 'Postojna',
            },
            {
                code: 'SI-174',
                name: 'Prebold',
            },
            {
                code: 'SI-095',
                name: 'Preddvor',
            },
            {
                code: 'SI-175',
                name: 'Prevalje',
            },
            {
                code: 'SI-096',
                name: 'Ptuj',
            },
            {
                code: 'SI-097',
                name: 'Puconci',
            },
            {
                code: 'SI-098',
                name: 'Race-Fram',
            },
            {
                code: 'SI-099',
                name: 'Radece',
            },
            {
                code: 'SI-100',
                name: 'Radenci',
            },
            {
                code: 'SI-101',
                name: 'Radlje ob Dravi',
            },
            {
                code: 'SI-102',
                name: 'Radovljica',
            },
            {
                code: 'SI-103',
                name: 'Ravne na Koroškem',
            },
            {
                code: 'SI-176',
                name: 'Razkrižje',
            },
            {
                code: 'SI-209',
                name: 'Recica ob Savinji',
            },
            {
                code: 'SI-201',
                name: 'Rence-Vogrsko',
            },
            {
                code: 'SI-177',
                name: 'Ribnica na Pohorju',
            },
            {
                code: 'SI-104',
                name: 'Ribnica',
            },
            {
                code: 'SI-106',
                name: 'Rogaška Slatina',
            },
            {
                code: 'SI-105',
                name: 'Rogašovci',
            },
            {
                code: 'SI-107',
                name: 'Rogatec',
            },
            {
                code: 'SI-108',
                name: 'Ruše',
            },
            {
                code: 'SI-033',
                name: 'Šalovci',
            },
            {
                code: 'SI-178',
                name: 'Selnica ob Dravi',
            },
            {
                code: 'SI-109',
                name: 'Semic',
            },
            {
                code: 'SI-183',
                name: 'Šempeter-Vrtojba',
            },
            {
                code: 'SI-117',
                name: 'Šencur',
            },
            {
                code: 'SI-118',
                name: 'Šentilj',
            },
            {
                code: 'SI-119',
                name: 'Šentjernej',
            },
            {
                code: 'SI-120',
                name: 'Šentjur pri Celju',
            },
            {
                code: 'SI-211',
                name: 'Šentrupert',
            },
            {
                code: 'SI-110',
                name: 'Sevnica',
            },
            {
                code: 'SI-111',
                name: 'Sežana',
            },
            {
                code: 'SI-121',
                name: 'Škocjan',
            },
            {
                code: 'SI-122',
                name: 'Škofja Loka',
            },
            {
                code: 'SI-123',
                name: 'Škofljica',
            },
            {
                code: 'SI-112',
                name: 'Slovenj Gradec',
            },
            {
                code: 'SI-113',
                name: 'Slovenska Bistrica',
            },
            {
                code: 'SI-114',
                name: 'Slovenske Konjice',
            },
            {
                code: 'SI-124',
                name: 'Šmarje pri Jelšah',
            },
            {
                code: 'SI-206',
                name: 'Šmarješke Toplice',
            },
            {
                code: 'SI-125',
                name: 'Šmartno ob Paki',
            },
            {
                code: 'SI-194',
                name: 'Šmartno pri Litiji',
            },
            {
                code: 'SI-194',
                name: 'Šmartno pri Litiji',
            },
            {
                code: 'SI-179',
                name: 'Sodražica',
            },
            {
                code: 'SI-180',
                name: 'Solcava',
            },
            {
                code: 'SI-126',
                name: 'Šoštanj',
            },
            {
                code: 'SI-202',
                name: 'Središce ob Dravi',
            },
            {
                code: 'SI-115',
                name: 'Starše',
            },
            {
                code: 'SI-127',
                name: 'Štore',
            },
            {
                code: 'SI-203',
                name: 'Straža',
            },
            {
                code: 'SI-181',
                name: 'Sveta Ana',
            },
            {
                code: 'SI-204',
                name: 'Sveta Trojica v Slovenskih Goricah',
            },
            {
                code: 'SI-182',
                name: 'Sveti Andraž v Slovenskih goricah',
            },
            {
                code: 'SI-116',
                name: 'Sveti Jurij',
            },
            {
                code: 'SI-210',
                name: 'Sveti Jurij v Slovenskih Goricah',
            },
            {
                code: 'SI-205',
                name: 'Sveti Tomaž',
            },
            {
                code: 'SI-184',
                name: 'Tabor',
            },
            {
                code: 'SI-010',
                name: 'Tišina',
            },
            {
                code: 'SI-128',
                name: 'Tolmin',
            },
            {
                code: 'SI-129',
                name: 'Trbovlje',
            },
            {
                code: 'SI-130',
                name: 'Trebnje',
            },
            {
                code: 'SI-185',
                name: 'Trnovska vas',
            },
            {
                code: 'SI-131',
                name: 'Tržic',
            },
            {
                code: 'SI-186',
                name: 'Trzin',
            },
            {
                code: 'SI-132',
                name: 'Turnišce',
            },
            {
                code: 'SI-133',
                name: 'Velenje',
            },
            {
                code: 'SI-187',
                name: 'Velika Polana',
            },
            {
                code: 'SI-134',
                name: 'Velike Lašce',
            },
            {
                code: 'SI-188',
                name: 'Veržej',
            },
            {
                code: 'SI-135',
                name: 'Videm',
            },
            {
                code: 'SI-136',
                name: 'Vipava',
            },
            {
                code: 'SI-137',
                name: 'Vitanje',
            },
            {
                code: 'SI-138',
                name: 'Vodice',
            },
            {
                code: 'SI-139',
                name: 'Vojnik',
            },
            {
                code: 'SI-189',
                name: 'Vransko',
            },
            {
                code: 'SI-140',
                name: 'Vrhnika',
            },
            {
                code: 'SI-141',
                name: 'Vuzenica',
            },
            {
                code: 'SI-142',
                name: 'Zagorje ob Savi',
            },
            {
                code: 'SI-190',
                name: 'Žalec',
            },
            {
                code: 'SI-143',
                name: 'Zavrc',
            },
            {
                code: 'SI-146',
                name: 'Železniki',
            },
            {
                code: 'SI-191',
                name: 'Žetale',
            },
            {
                code: 'SI-147',
                name: 'Žiri',
            },
            {
                code: 'SI-192',
                name: 'Žirovnica',
            },
            {
                code: 'SI-144',
                name: 'Zrece',
            },
            {
                code: 'SI-193',
                name: 'Žužemberk',
            },
        ],
    },
    {
        code: 'SB',
        id: 2336,
        name: 'Solomon Islands',
        states: [],
    },
    {
        code: 'SO',
        id: 2337,
        name: 'Somalia',
        states: [
            {
                code: 'SO21',
                name: 'Awdal',
            },
            {
                code: 'SO01',
                name: 'Bakool',
            },
            {
                code: 'SO02',
                name: 'Banaadir',
            },
            {
                code: 'SO03',
                name: 'Bari',
            },
            {
                code: 'SO04',
                name: 'Bay',
            },
            {
                code: 'SO05',
                name: 'Galguduud',
            },
            {
                code: 'SO06',
                name: 'Gedo',
            },
            {
                code: 'SO07',
                name: 'Hiiraan',
            },
            {
                code: 'SO08',
                name: 'Jubbada Dhexe',
            },
            {
                code: 'SO09',
                name: 'Jubbada Hoose',
            },
            {
                code: 'SO10',
                name: 'Mudug',
            },
            {
                code: 'SO18',
                name: 'Nugaal',
            },
            {
                code: 'SO12',
                name: 'Sanaag',
            },
            {
                code: 'SO13',
                name: 'Shabeellaha Dhexe',
            },
            {
                code: 'SO14',
                name: 'Shabeellaha Hoose',
            },
            {
                code: 'SO22',
                name: 'Sool',
            },
            {
                code: 'SO19',
                name: 'Togdheer',
            },
            {
                code: 'SO20',
                name: 'Woqooyi Galbeed',
            },
        ],
    },
    {
        code: 'ZA',
        id: 2338,
        name: 'South Africa',
        states: [
            {
                code: 'SF01',
                name: 'Cape Province',
            },
            {
                code: 'SF05',
                name: 'Eastern Cape',
            },
            {
                code: 'SF03',
                name: 'Free State',
            },
            {
                code: 'SF06',
                name: 'Gauteng',
            },
            {
                code: 'SF02',
                name: 'KwaZulu-Natal',
            },
            {
                code: 'SF09',
                name: 'Limpopo',
            },
            {
                code: 'SF07',
                name: 'Mpumalanga',
            },
            {
                code: 'SF10',
                name: 'North-West',
            },
            {
                code: 'SF08',
                name: 'Northern Cape',
            },
            {
                code: 'SF04',
                name: 'Transvaal',
            },
            {
                code: 'SF11',
                name: 'Western Cape',
            },
        ],
    },
    {
        code: 'GS',
        id: 2436,
        name: 'South Georgia and the South Sandwich Islands',
        states: [],
    },
    {
        code: 'SS',
        id: 2447,
        name: 'South Sudan',
        states: [
            {
                code: 'OD01',
                name: 'Central Equatoria',
            },
            {
                code: 'OD02',
                name: 'East Equatoria',
            },
            {
                code: 'OD03',
                name: 'Jungoli',
            },
            {
                code: 'OD04',
                name: 'Lakes',
            },
            {
                code: 'OD05',
                name: 'North Bahr-al-Ghazal',
            },
            {
                code: 'OD06',
                name: 'Unity',
            },
            {
                code: 'OD07',
                name: 'Upper Nile',
            },
            {
                code: 'OD08',
                name: 'Warap',
            },
            {
                code: 'OD09',
                name: 'West Bahr-al-Ghazal',
            },
            {
                code: 'OD10',
                name: 'West Equatoria',
            },
        ],
    },
    {
        code: 'ES',
        id: 2339,
        name: 'Spain',
        states: [
            {
                code: 'SP23',
                name: 'A Coruña',
            },
            {
                code: 'SP01',
                name: 'Alava',
            },
            {
                code: 'SP02',
                name: 'Albacete',
            },
            {
                code: 'SP03',
                name: 'Alicante',
            },
            {
                code: 'SP04',
                name: 'Almeria',
            },
            {
                code: 'SP51',
                name: 'Andalucia',
            },
            {
                code: 'SP52',
                name: 'Aragon',
            },
            {
                code: 'SP34',
                name: 'Asturias',
            },
            {
                code: 'SP05',
                name: 'Avila',
            },
            {
                code: 'SP06',
                name: 'Badajoz',
            },
            {
                code: 'SP08',
                name: 'Barcelona',
            },
            {
                code: 'SP09',
                name: 'Burgos',
            },
            {
                code: 'SP10',
                name: 'Caceres',
            },
            {
                code: 'SP11',
                name: 'Cadiz',
            },
            {
                code: 'SP53',
                name: 'Canarias',
            },
            {
                code: 'SP39',
                name: 'Cantabria',
            },
            {
                code: 'SP12',
                name: 'Castellon',
            },
            {
                code: 'SP55',
                name: 'Castilla y Leon',
            },
            {
                code: 'SP54',
                name: 'Castilla-La Mancha',
            },
            {
                code: 'SP56',
                name: 'Cataluna',
            },
            {
                code: 'SP13',
                name: 'Ciudad Real',
            },
            {
                code: 'SP14',
                name: 'Cordoba',
            },
            {
                code: 'SP15',
                name: 'Cuenca',
            },
            {
                code: 'SP57',
                name: 'Extremadura',
            },
            {
                code: 'SP58',
                name: 'Galicia',
            },
            {
                code: 'SP16',
                name: 'Gerona',
            },
            {
                code: 'SP17',
                name: 'Granada',
            },
            {
                code: 'SP18',
                name: 'Guadalajara',
            },
            {
                code: 'SP19',
                name: 'Guipuzcoa',
            },
            {
                code: 'SP20',
                name: 'Huelva',
            },
            {
                code: 'SP21',
                name: 'Huesca',
            },
            {
                code: 'SP07',
                name: 'Islas Baleares',
            },
            {
                code: 'SP22',
                name: 'Jaen',
            },
            {
                code: 'SP23',
                name: 'La Coruna',
            },
            {
                code: 'SP27',
                name: 'La Rioja',
            },
            {
                code: 'SP24',
                name: 'Las Palmas',
            },
            {
                code: 'SP25',
                name: 'Leon',
            },
            {
                code: 'SP26',
                name: 'Lerida',
            },
            {
                code: 'SP28',
                name: 'Lugo',
            },
            {
                code: 'SP29',
                name: 'Madrid',
            },
            {
                code: 'SP30',
                name: 'Malaga',
            },
            {
                code: 'SP31',
                name: 'Murcia',
            },
            {
                code: 'SP32',
                name: 'Navarra',
            },
            {
                code: 'SP33',
                name: 'Orense',
            },
            {
                code: 'SP59',
                name: 'Pais Vasco',
            },
            {
                code: 'SP35',
                name: 'Palencia',
            },
            {
                code: 'SP36',
                name: 'Pontevedra',
            },
            {
                code: 'SP37',
                name: 'Salamanca',
            },
            {
                code: 'SP38',
                name: 'Santa Cruz de Tenerife',
            },
            {
                code: 'SP40',
                name: 'Segovia',
            },
            {
                code: 'SP41',
                name: 'Sevilla',
            },
            {
                code: 'SP42',
                name: 'Soria',
            },
            {
                code: 'SP43',
                name: 'Tarragona',
            },
            {
                code: 'SP44',
                name: 'Teruel',
            },
            {
                code: 'SP45',
                name: 'Toledo',
            },
            {
                code: 'SP46',
                name: 'Valencia',
            },
            {
                code: 'SP60',
                name: 'Valenciana',
            },
            {
                code: 'SP47',
                name: 'Valladolid',
            },
            {
                code: 'SP48',
                name: 'Vizcaya',
            },
            {
                code: 'SP49',
                name: 'Zamora',
            },
            {
                code: 'SP50',
                name: 'Zaragoza',
            },
        ],
    },
    {
        code: 'LK',
        id: 2340,
        name: 'Sri Lanka',
        states: [],
    },
    {
        code: 'SD',
        id: 2341,
        name: 'Sudan',
        states: [
            {
                code: 'SU42',
                name: 'Blue Nile',
            },
            {
                code: 'SU61',
                name: 'Central Darfur',
            },
            {
                code: 'SU60',
                name: 'East Darfur',
            },
            {
                code: 'SU39',
                name: 'Gedarif',
            },
            {
                code: 'SU38',
                name: 'Gezira',
            },
            {
                code: 'SU52',
                name: 'Kassala',
            },
            {
                code: 'SU29',
                name: 'Khartoum',
            },
            {
                code: 'SU55',
                name: 'North Darfur',
            },
            {
                code: 'SU56',
                name: 'North Kordofan',
            },
            {
                code: 'SU43',
                name: 'Northern',
            },
            {
                code: 'SU36',
                name: 'Red Sea',
            },
            {
                code: 'SU53',
                name: 'River Nile',
            },
            {
                code: 'SU58',
                name: 'Sennar',
            },
            {
                code: 'SU49',
                name: 'South Darfur',
            },
            {
                code: 'SU50',
                name: 'South Kordofan',
            },
            {
                code: 'SU47',
                name: 'West Darfur',
            },
            {
                code: 'SU62',
                name: 'West Kordofan',
            },
            {
                code: 'SU41',
                name: 'White Nile',
            },
        ],
    },
    {
        code: 'SR',
        id: 2342,
        name: 'Suriname',
        states: [
            {
                code: 'NS10',
                name: 'Brokopondo',
            },
            {
                code: 'NS11',
                name: 'Commewijne',
            },
            {
                code: 'NS12',
                name: 'Coronie',
            },
            {
                code: 'NS13',
                name: 'Marowijne',
            },
            {
                code: 'NS14',
                name: 'Nickerie',
            },
            {
                code: 'NS16',
                name: 'Paramaribo',
            },
            {
                code: 'NS15',
                name: 'Para',
            },
            {
                code: 'NS17',
                name: 'Saramacca',
            },
            {
                code: 'NS18',
                name: 'Sipaliwini',
            },
            {
                code: 'NS19',
                name: 'Wanica',
            },
        ],
    },
    {
        code: 'SJ',
        id: 2437,
        name: 'Svalbard And Jan Mayen',
        states: [],
    },
    {
        code: 'SZ',
        id: 2343,
        name: 'Swaziland',
        states: [
            {
                code: 'WZ01',
                name: 'Hhohho',
            },
            {
                code: 'WZ02',
                name: 'Lubombo',
            },
            {
                code: 'WZ03',
                name: 'Manzini',
            },
            {
                code: 'WZ04',
                name: 'Shiselweni',
            },
        ],
    },
    {
        code: 'SE',
        id: 2344,
        name: 'Sweden',
        states: [
            {
                code: 'SE-K',
                name: 'Blekinge län',
            },
            {
                code: 'SE-W',
                name: 'Dalarnas län',
            },
            {
                code: 'SE-X',
                name: 'Gävleborgs län',
            },
            {
                code: 'SE-I',
                name: 'Gotlands län',
            },
            {
                code: 'SE-N',
                name: 'Hallands län',
            },
            {
                code: 'SE-Z',
                name: 'Jämtlands län',
            },
            {
                code: 'SE-F',
                name: 'Jönköpings län',
            },
            {
                code: 'SE-H',
                name: 'Kalmar län',
            },
            {
                code: 'SE-G',
                name: 'Kronobergs län',
            },
            {
                code: 'SE-BD',
                name: 'Norrbottens län',
            },
            {
                code: 'SE-M',
                name: 'Skåne län',
            },
            {
                code: 'SE-D',
                name: 'Södermanlands län',
            },
            {
                code: 'SE-AB',
                name: 'Stockholms län',
            },
            {
                code: 'SE-C',
                name: 'Uppsala län',
            },
            {
                code: 'SE-S',
                name: 'Värmlands län',
            },
            {
                code: 'SE-AC',
                name: 'Västerbottens län',
            },
            {
                code: 'SE-Y',
                name: 'Västernorrlands län',
            },
            {
                code: 'SE-U',
                name: 'Västmanlands län',
            },
            {
                code: 'SE-O',
                name: 'Västra Götalands län',
            },
            {
                code: 'SE-T',
                name: 'Örebro län',
            },
            {
                code: 'SE-E',
                name: 'Östergötlands län',
            },
        ],
    },
    {
        code: 'CH',
        id: 2345,
        name: 'Switzerland',
        states: [
            {
                code: 'AG',
                name: 'Aargau',
            },
            {
                code: 'AR',
                name: 'Appenzell Ausserrhoden',
            },
            {
                code: 'AI',
                name: 'Appenzell Innerrhoden',
            },
            {
                code: 'BL',
                name: 'Basel-Landschaft',
            },
            {
                code: 'BS',
                name: 'Basel-Stadt',
            },
            {
                code: 'BE',
                name: 'Bern',
            },
            {
                code: 'FR',
                name: 'Fribourg',
            },
            {
                code: 'GE',
                name: 'Genève',
            },
            {
                code: 'GL',
                name: 'Glarus',
            },
            {
                code: 'GR',
                name: 'Graubünden',
            },
            {
                code: 'JU',
                name: 'Jura',
            },
            {
                code: 'LU',
                name: 'Luzern',
            },
            {
                code: 'NE',
                name: 'Neuchâtel',
            },
            {
                code: 'NW',
                name: 'Nidwalden',
            },
            {
                code: 'OW',
                name: 'Obwalden',
            },
            {
                code: 'SG',
                name: 'Sankt Gallen',
            },
            {
                code: 'SH',
                name: 'Schaffhausen',
            },
            {
                code: 'SZ',
                name: 'Schwyz',
            },
            {
                code: 'SO',
                name: 'Solothurn',
            },
            {
                code: 'TG',
                name: 'Thurgau',
            },
            {
                code: 'TI',
                name: 'Ticino',
            },
            {
                code: 'UR',
                name: 'Uri',
            },
            {
                code: 'VS',
                name: 'Valais',
            },
            {
                code: 'VD',
                name: 'Vaud',
            },
            {
                code: 'ZG',
                name: 'Zug',
            },
            {
                code: 'ZH',
                name: 'Zürich',
            },
        ],
    },
    {
        code: 'SY',
        id: 2381,
        name: 'Syrian Arab Republic',
        states: [
            {
                code: 'SY01',
                name: 'Al Hasakah',
            },
            {
                code: 'SY09',
                name: 'Aleppo',
            },
            {
                code: 'SY04',
                name: 'Ar Raqqah',
            },
            {
                code: 'SY05',
                name: "As Suwayda'",
            },
            {
                code: 'SY13',
                name: 'Damascus',
            },
            {
                code: 'SY06',
                name: 'Dar`a',
            },
            {
                code: 'SY07',
                name: 'Dayr az Zawr',
            },
            {
                code: 'SY10',
                name: 'Hama',
            },
            {
                code: 'SY11',
                name: 'Hims',
            },
            {
                code: 'SY12',
                name: 'Idlib',
            },
            {
                code: 'SY02',
                name: 'Latakia',
            },
            {
                code: 'SY03',
                name: 'Quneitra',
            },
            {
                code: 'SY08',
                name: 'Rif Dimashq',
            },
            {
                code: 'SY14',
                name: 'Tartus',
            },
        ],
    },
    {
        code: 'TW',
        id: 2375,
        name: 'Taiwan',
        states: [
            {
                code: 'TW02',
                name: 'Kaohsiung',
            },
            {
                code: 'TW03',
                name: 'Taipei',
            },
        ],
    },
    {
        code: 'TJ',
        id: 2348,
        name: 'Tajikistan',
        states: [
            {
                code: 'TI01',
                name: 'Badakhshoni Kuni',
            },
            {
                code: 'TI04',
                name: 'Dushanbe',
            },
            {
                code: 'TI02',
                name: 'Khatlon',
            },
            {
                code: 'TI05',
                name: 'Regions of Republican Subordination',
            },
            {
                code: 'TI03',
                name: 'Sogd',
            },
        ],
    },
    {
        code: 'TZ',
        id: 2349,
        name: 'Tanzania',
        states: [
            {
                code: 'TZ26',
                name: 'Arusha',
            },
            {
                code: 'TZ23',
                name: 'Dar es Salaam',
            },
            {
                code: 'TZ03',
                name: 'Dodoma',
            },
            {
                code: 'TZ28',
                name: 'Geita',
            },
            {
                code: 'TZ04',
                name: 'Iringa',
            },
            {
                code: 'TZ19',
                name: 'Kagera',
            },
            {
                code: 'TZ29',
                name: 'Katavi',
            },
            {
                code: 'TZ05',
                name: 'Kigoma',
            },
            {
                code: 'TZ06',
                name: 'Kilimanjaro',
            },
            {
                code: 'TZ07',
                name: 'Lindi',
            },
            {
                code: 'TZ27',
                name: 'Manyara',
            },
            {
                code: 'TZ08',
                name: 'Mara',
            },
            {
                code: 'TZ09',
                name: 'Mbeya',
            },
            {
                code: 'TZ10',
                name: 'Morogoro',
            },
            {
                code: 'TZ11',
                name: 'Mtwara',
            },
            {
                code: 'TZ12',
                name: 'Mwanza',
            },
            {
                code: 'TZ30',
                name: 'Njombe',
            },
            {
                code: 'TZ13',
                name: 'Pemba North',
            },
            {
                code: 'TZ20',
                name: 'Pemba South',
            },
            {
                code: 'TZ02',
                name: 'Pwani',
            },
            {
                code: 'TZ24',
                name: 'Rukwa',
            },
            {
                code: 'TZ14',
                name: 'Ruvuma',
            },
            {
                code: 'TZ15',
                name: 'Shinyanga',
            },
            {
                code: 'TZ31',
                name: 'Simiyu',
            },
            {
                code: 'TZ16',
                name: 'Singida',
            },
            {
                code: 'TZ17',
                name: 'Tabora',
            },
            {
                code: 'TZ18',
                name: 'Tanga',
            },
            {
                code: 'TZ22',
                name: 'Zanzibar North',
            },
            {
                code: 'TZ21',
                name: 'Zanzibar South and Central',
            },
            {
                code: 'TZ25',
                name: 'Zanzibar West',
            },
        ],
    },
    {
        code: 'TH',
        id: 2350,
        name: 'Thailand',
        states: [
            {
                code: 'TH77',
                name: 'Amnat Charoen',
            },
            {
                code: 'TH35',
                name: 'Ang Thong',
            },
            {
                code: 'TH40',
                name: 'Bangkok Metropolis',
            },
            {
                code: 'TH81',
                name: 'Bueng Kan',
            },
            {
                code: 'TH28',
                name: 'Buri Ram',
            },
            {
                code: 'TH44',
                name: 'Chachoengsao',
            },
            {
                code: 'TH32',
                name: 'Chai Nat',
            },
            {
                code: 'TH26',
                name: 'Chaiyaphum',
            },
            {
                code: 'TH48',
                name: 'Chanthaburi',
            },
            {
                code: 'TH02',
                name: 'Chiang Mai',
            },
            {
                code: 'TH03',
                name: 'Chiang Rai',
            },
            {
                code: 'TH46',
                name: 'Chon Buri',
            },
            {
                code: 'TH58',
                name: 'Chumphon',
            },
            {
                code: 'TH23',
                name: 'Kalasin',
            },
            {
                code: 'TH11',
                name: 'Kamphaeng Phet',
            },
            {
                code: 'TH50',
                name: 'Kanchanaburi',
            },
            {
                code: 'TH22',
                name: 'Khon Kaen',
            },
            {
                code: 'TH63',
                name: 'Krabi',
            },
            {
                code: 'TH06',
                name: 'Lampang',
            },
            {
                code: 'TH05',
                name: 'Lamphun',
            },
            {
                code: 'TH18',
                name: 'Loei',
            },
            {
                code: 'TH34',
                name: 'Lop Buri',
            },
            {
                code: 'TH01',
                name: 'Mae Hong Son',
            },
            {
                code: 'TH24',
                name: 'Maha Sarakham',
            },
            {
                code: 'TH78',
                name: 'Mukdahan',
            },
            {
                code: 'TH43',
                name: 'Nakhon Nayok',
            },
            {
                code: 'TH53',
                name: 'Nakhon Pathom',
            },
            {
                code: 'TH73',
                name: 'Nakhon Phanom',
            },
            {
                code: 'TH27',
                name: 'Nakhon Ratchasima',
            },
            {
                code: 'TH16',
                name: 'Nakhon Sawan',
            },
            {
                code: 'TH64',
                name: 'Nakhon Si Thammarat',
            },
            {
                code: 'TH04',
                name: 'Nan',
            },
            {
                code: 'TH31',
                name: 'Narathiwat',
            },
            {
                code: 'TH79',
                name: 'Nong Bua Lam Phu',
            },
            {
                code: 'TH17',
                name: 'Nong Khai',
            },
            {
                code: 'TH38',
                name: 'Nonthaburi',
            },
            {
                code: 'TH39',
                name: 'Pathum Thani',
            },
            {
                code: 'TH69',
                name: 'Pattani',
            },
            {
                code: 'TH61',
                name: 'Phangnga',
            },
            {
                code: 'TH66',
                name: 'Phatthalung',
            },
            {
                code: 'TH41',
                name: 'Phayao',
            },
            {
                code: 'TH14',
                name: 'Phetchabun',
            },
            {
                code: 'TH56',
                name: 'Phetchaburi',
            },
            {
                code: 'TH13',
                name: 'Phichit',
            },
            {
                code: 'TH12',
                name: 'Phitsanulok',
            },
            {
                code: 'TH36',
                name: 'Phra Nakhon Si Ayutthaya',
            },
            {
                code: 'TH07',
                name: 'Phrae',
            },
            {
                code: 'TH62',
                name: 'Phuket',
            },
            {
                code: 'TH74',
                name: 'Prachin Buri',
            },
            {
                code: 'TH57',
                name: 'Prachuap Khiri Khan',
            },
            {
                code: 'TH59',
                name: 'Ranong',
            },
            {
                code: 'TH52',
                name: 'Ratchaburi',
            },
            {
                code: 'TH47',
                name: 'Rayong',
            },
            {
                code: 'TH25',
                name: 'Roi Et',
            },
            {
                code: 'TH80',
                name: 'Sa Kaeo',
            },
            {
                code: 'TH20',
                name: 'Sakon Nakhon',
            },
            {
                code: 'TH42',
                name: 'Samut Prakan',
            },
            {
                code: 'TH55',
                name: 'Samut Sakhon',
            },
            {
                code: 'TH54',
                name: 'Samut Songkhram',
            },
            {
                code: 'TH37',
                name: 'Saraburi',
            },
            {
                code: 'TH67',
                name: 'Satun',
            },
            {
                code: 'TH30',
                name: 'Si Sa Ket',
            },
            {
                code: 'TH33',
                name: 'Sing Buri',
            },
            {
                code: 'TH68',
                name: 'Songkhla',
            },
            {
                code: 'TH09',
                name: 'Sukhothai',
            },
            {
                code: 'TH51',
                name: 'Suphan Buri',
            },
            {
                code: 'TH60',
                name: 'Surat Thani',
            },
            {
                code: 'TH29',
                name: 'Surin',
            },
            {
                code: 'TH08',
                name: 'Tak',
            },
            {
                code: 'TH65',
                name: 'Trang',
            },
            {
                code: 'TH49',
                name: 'Trat',
            },
            {
                code: 'TH75',
                name: 'Ubon Ratchathani',
            },
            {
                code: 'TH76',
                name: 'Udon Thani',
            },
            {
                code: 'TH15',
                name: 'Uthai Thani',
            },
            {
                code: 'TH10',
                name: 'Uttaradit',
            },
            {
                code: 'TH70',
                name: 'Yala',
            },
            {
                code: 'TH72',
                name: 'Yasothon',
            },
        ],
    },
    {
        code: 'TL',
        id: 2404,
        name: 'Timor-Leste',
        states: [],
    },
    {
        code: 'TG',
        id: 2351,
        name: 'Togo',
        states: [
            {
                code: 'TO22',
                name: 'Centrale',
            },
            {
                code: 'TO23',
                name: 'Kara',
            },
            {
                code: 'TO24',
                name: 'Maritime',
            },
            {
                code: 'TO25',
                name: 'Plateaux',
            },
            {
                code: 'TO26',
                name: 'Savanes',
            },
        ],
    },
    {
        code: 'TK',
        id: 2438,
        name: 'Tokelau',
        states: [],
    },
    {
        code: 'TO',
        id: 2405,
        name: 'Tonga',
        states: [],
    },
    {
        code: 'TT',
        id: 2352,
        name: 'Trinidad and Tobago',
        states: [
            {
                code: 'TD01',
                name: 'Arima',
            },
            {
                code: 'TD13',
                name: 'Chaguanas',
            },
            {
                code: 'TD14',
                name: 'Couva/Tabaquite/Talparo',
            },
            {
                code: 'TD15',
                name: 'Diego Martin',
            },
            {
                code: 'TD11',
                name: 'Eastern Tobago',
            },
            {
                code: 'TD16',
                name: 'Mayaro/Rio Claro',
            },
            {
                code: 'TD17',
                name: 'Penal/Debe',
            },
            {
                code: 'TD18',
                name: 'Point Fortin',
            },
            {
                code: 'TD05',
                name: 'Port of Spain',
            },
            {
                code: 'TD19',
                name: 'Princes Town',
            },
            {
                code: 'TD10',
                name: 'San Fernando',
            },
            {
                code: 'TD20',
                name: 'San Juan/Laventille',
            },
            {
                code: 'TD21',
                name: 'Sangre Grande',
            },
            {
                code: 'TD22',
                name: 'Siparia',
            },
            {
                code: 'TD23',
                name: 'Tunapuna/Piarco',
            },
            {
                code: 'TD11',
                name: 'Western Tobago',
            },
        ],
    },
    {
        code: 'TN',
        id: 2353,
        name: 'Tunisia',
        states: [
            {
                code: 'TS38',
                name: 'Ariana',
            },
            {
                code: 'TS17',
                name: 'Béja',
            },
            {
                code: 'TS27',
                name: 'Ben Arous',
            },
            {
                code: 'TS18',
                name: 'Bizerte',
            },
            {
                code: 'TS29',
                name: 'Gabès',
            },
            {
                code: 'TS30',
                name: 'Gafsa',
            },
            {
                code: 'TS06',
                name: 'Jendouba',
            },
            {
                code: 'TS03',
                name: 'Kairouan',
            },
            {
                code: 'TS02',
                name: 'Kassérine',
            },
            {
                code: 'TS31',
                name: 'Kebili',
            },
            {
                code: 'TS14',
                name: 'Le Kef',
            },
            {
                code: 'TS15',
                name: 'Mahdia',
            },
            {
                code: 'TS39',
                name: 'Manouba',
            },
            {
                code: 'TS28',
                name: 'Médenine',
            },
            {
                code: 'TS16',
                name: 'Monastir',
            },
            {
                code: 'TS19',
                name: 'Nabeul',
            },
            {
                code: 'TS32',
                name: 'Sfax',
            },
            {
                code: 'TS33',
                name: 'Sidi Bou Zid',
            },
            {
                code: 'TS22',
                name: 'Siliana',
            },
            {
                code: 'TS23',
                name: 'Sousse',
            },
            {
                code: 'TS34',
                name: 'Tataouine',
            },
            {
                code: 'TS35',
                name: 'Tozeur',
            },
            {
                code: 'TS36',
                name: 'Tunis',
            },
            {
                code: 'TS37',
                name: 'Zaghouan',
            },
        ],
    },
    {
        code: 'TR',
        id: 2354,
        name: 'Turkey',
        states: [
            {
                code: 'TU81',
                name: 'Adana',
            },
            {
                code: 'TU02',
                name: 'Adiyaman',
            },
            {
                code: 'TU03',
                name: 'Afyonkarahisar',
            },
            {
                code: 'TU04',
                name: 'Agri',
            },
            {
                code: 'TU75',
                name: 'Aksaray',
            },
            {
                code: 'TU05',
                name: 'Amasya',
            },
            {
                code: 'TU68',
                name: 'Ankara',
            },
            {
                code: 'TU07',
                name: 'Antalya',
            },
            {
                code: 'TU86',
                name: 'Ardahan',
            },
            {
                code: 'TU08',
                name: 'Artvin',
            },
            {
                code: 'TU09',
                name: 'Aydin',
            },
            {
                code: 'TU10',
                name: 'Balikesir',
            },
            {
                code: 'TU87',
                name: 'Bartin',
            },
            {
                code: 'TU76',
                name: 'Batman',
            },
            {
                code: 'TU77',
                name: 'Bayburt',
            },
            {
                code: 'TU11',
                name: 'Bilecik',
            },
            {
                code: 'TU12',
                name: 'Bingöl',
            },
            {
                code: 'TU13',
                name: 'Bitlis',
            },
            {
                code: 'TU14',
                name: 'Bolu',
            },
            {
                code: 'TU15',
                name: 'Burdur',
            },
            {
                code: 'TU16',
                name: 'Bursa',
            },
            {
                code: 'TU17',
                name: 'Çanakkale',
            },
            {
                code: 'TU82',
                name: 'Çankiri',
            },
            {
                code: 'TU19',
                name: 'Çorum',
            },
            {
                code: 'TU20',
                name: 'Denizli',
            },
            {
                code: 'TU21',
                name: 'Diyarbakir',
            },
            {
                code: 'TU93',
                name: 'Düzce',
            },
            {
                code: 'TU22',
                name: 'Edirne',
            },
            {
                code: 'TU23',
                name: 'Elazig',
            },
            {
                code: 'TU24',
                name: 'Erzincan',
            },
            {
                code: 'TU25',
                name: 'Erzurum',
            },
            {
                code: 'TU26',
                name: 'Eskisehir',
            },
            {
                code: 'TU83',
                name: 'Gaziantep',
            },
            {
                code: 'TU28',
                name: 'Giresun',
            },
            {
                code: 'TU69',
                name: 'Gümüshane',
            },
            {
                code: 'TU70',
                name: 'Hakkari',
            },
            {
                code: 'TU31',
                name: 'Hatay',
            },
            {
                code: 'TU88',
                name: 'Igdir',
            },
            {
                code: 'TU33',
                name: 'Isparta',
            },
            {
                code: 'TU34',
                name: 'Istanbul',
            },
            {
                code: 'TU35',
                name: 'Izmir',
            },
            {
                code: 'TU46',
                name: 'Kahramanmaras',
            },
            {
                code: 'TU89',
                name: 'Karabük',
            },
            {
                code: 'TU78',
                name: 'Karaman',
            },
            {
                code: 'TU84',
                name: 'Kars',
            },
            {
                code: 'TU37',
                name: 'Kastamonu',
            },
            {
                code: 'TU38',
                name: 'Kayseri',
            },
            {
                code: 'TU90',
                name: 'Kilis',
            },
            {
                code: 'TU79',
                name: 'Kirikkale',
            },
            {
                code: 'TU39',
                name: 'Kirklareli',
            },
            {
                code: 'TU40',
                name: 'Kirsehir',
            },
            {
                code: 'TU41',
                name: 'Kocaeli',
            },
            {
                code: 'TU71',
                name: 'Konya',
            },
            {
                code: 'TU43',
                name: 'Kütahya',
            },
            {
                code: 'TU44',
                name: 'Malatya',
            },
            {
                code: 'TU45',
                name: 'Manisa',
            },
            {
                code: 'TU72',
                name: 'Mardin',
            },
            {
                code: 'TU32',
                name: 'Mersin',
            },
            {
                code: 'TU48',
                name: 'Mugla',
            },
            {
                code: 'TU49',
                name: 'Mus',
            },
            {
                code: 'TU50',
                name: 'Nevsehir',
            },
            {
                code: 'TU73',
                name: 'Nigde',
            },
            {
                code: 'TU52',
                name: 'Ordu',
            },
            {
                code: 'TU91',
                name: 'Osmaniye',
            },
            {
                code: 'TU53',
                name: 'Rize',
            },
            {
                code: 'TU54',
                name: 'Sakarya',
            },
            {
                code: 'TU55',
                name: 'Samsun',
            },
            {
                code: 'TU63',
                name: 'Sanliurfa',
            },
            {
                code: 'TU74',
                name: 'Siirt',
            },
            {
                code: 'TU57',
                name: 'Sinop',
            },
            {
                code: 'TU80',
                name: 'Sirnak',
            },
            {
                code: 'TU58',
                name: 'Sivas',
            },
            {
                code: 'TU59',
                name: 'Tekirdag',
            },
            {
                code: 'TU60',
                name: 'Tokat',
            },
            {
                code: 'TU61',
                name: 'Trabzon',
            },
            {
                code: 'TU62',
                name: 'Tunceli',
            },
            {
                code: 'TU64',
                name: 'Usak',
            },
            {
                code: 'TU65',
                name: 'Van',
            },
            {
                code: 'TU92',
                name: 'Yalova',
            },
            {
                code: 'TU66',
                name: 'Yozgat',
            },
            {
                code: 'TU85',
                name: 'Zonguldak',
            },
        ],
    },
    {
        code: 'TM',
        id: 2355,
        name: 'Turkmenistan',
        states: [
            {
                code: 'TX01',
                name: 'Ahal',
            },
            {
                code: 'TM.AB',
                name: 'Ashgabat',
            },
            {
                code: 'TX02',
                name: 'Balkan',
            },
            {
                code: 'TX03',
                name: 'Dashoguz',
            },
            {
                code: 'TX04',
                name: 'Lebap',
            },
            {
                code: 'TX05',
                name: 'Mary',
            },
        ],
    },
    {
        code: 'TC',
        id: 2439,
        name: 'Turks and Caicos Islands',
        states: [],
    },
    {
        code: 'TV',
        id: 2440,
        name: 'Tuvalu',
        states: [],
    },
    {
        code: 'UG',
        id: 2356,
        name: 'Uganda',
        states: [
            {
                code: 'UG.AI',
                name: 'Abim',
            },
            {
                code: 'UG.AD',
                name: 'Adjumani',
            },
            {
                code: 'UG.AG',
                name: 'Agago',
            },
            {
                code: 'UG.AL',
                name: 'Alebtong',
            },
            {
                code: 'UG.AT',
                name: 'Amolatar',
            },
            {
                code: 'UG.AZ',
                name: 'Amudat',
            },
            {
                code: 'UG.AM',
                name: 'Amuria',
            },
            {
                code: 'UG.AY',
                name: 'Amuru',
            },
            {
                code: 'UG.AQ',
                name: 'Apac',
            },
            {
                code: 'UG.AX',
                name: 'Arua',
            },
            {
                code: 'UG.BD',
                name: 'Budaka',
            },
            {
                code: 'UG.BA',
                name: 'Bududa',
            },
            {
                code: 'UG.BI',
                name: 'Bugiri',
            },
            {
                code: 'UG.BH',
                name: 'Buhweju',
            },
            {
                code: 'UG.BZ',
                name: 'Buikwe',
            },
            {
                code: 'UG.BE',
                name: 'Bukedea',
            },
            {
                code: 'UG.BM',
                name: 'Bukomansimbi',
            },
            {
                code: 'UG.BW',
                name: 'Bukwo',
            },
            {
                code: 'UG.BB',
                name: 'Bulambuli',
            },
            {
                code: 'UG.BL',
                name: 'Buliisa',
            },
            {
                code: 'UG.BX',
                name: 'Bundibugyo',
            },
            {
                code: 'UG.BC',
                name: 'Bushenyi',
            },
            {
                code: 'UG.BU',
                name: 'Busia',
            },
            {
                code: 'UG.BJ',
                name: 'Butaleja',
            },
            {
                code: 'UG.BT',
                name: 'Butambala',
            },
            {
                code: 'UG.BV',
                name: 'Buvuma',
            },
            {
                code: 'UG.BY',
                name: 'Buyende',
            },
            {
                code: 'UG.DO',
                name: 'Dokolo',
            },
            {
                code: 'UG.GM',
                name: 'Gomba',
            },
            {
                code: 'UG.GL',
                name: 'Gulu',
            },
            {
                code: 'UG.HO',
                name: 'Hoima',
            },
            {
                code: 'UG.IB',
                name: 'Ibanda',
            },
            {
                code: 'UG.IC',
                name: 'Iganga',
            },
            {
                code: 'UG.NG',
                name: 'Isingiro',
            },
            {
                code: 'UG.JI',
                name: 'Jinja',
            },
            {
                code: 'UG.AB',
                name: 'Kaabong',
            },
            {
                code: 'UG.KA',
                name: 'Kabale',
            },
            {
                code: 'UG.BR',
                name: 'Kabarole',
            },
            {
                code: 'UG.KD',
                name: 'Kaberamaido',
            },
            {
                code: 'UG.KN',
                name: 'Kalangala',
            },
            {
                code: 'UG.RO',
                name: 'Kaliro',
            },
            {
                code: 'UG.QA',
                name: 'Kalungu',
            },
            {
                code: 'UG.KM',
                name: 'Kampala',
            },
            {
                code: 'UG.QU',
                name: 'Kamuli',
            },
            {
                code: 'UG.KE',
                name: 'Kamwenge',
            },
            {
                code: 'UG.UU',
                name: 'Kanungu',
            },
            {
                code: 'UG.QP',
                name: 'Kapchorwa',
            },
            {
                code: 'UG.KS',
                name: 'Kasese',
            },
            {
                code: 'UG.KK',
                name: 'Katakwi',
            },
            {
                code: 'UG.KY',
                name: 'Kayunga',
            },
            {
                code: 'UG.KI',
                name: 'Kibaale',
            },
            {
                code: 'UG.QO',
                name: 'Kiboga',
            },
            {
                code: 'UG.QB',
                name: 'Kibuku',
            },
            {
                code: 'UG.KH',
                name: 'Kiruhuura',
            },
            {
                code: 'UG.QD',
                name: 'Kiryandongo',
            },
            {
                code: 'UG.KR',
                name: 'Kisoro',
            },
            {
                code: 'UG.QT',
                name: 'Kitgum',
            },
            {
                code: 'UG.OK',
                name: 'Koboko',
            },
            {
                code: 'UG.QL',
                name: 'Kole',
            },
            {
                code: 'UG.KF',
                name: 'Kotido',
            },
            {
                code: 'UG.QM',
                name: 'Kumi',
            },
            {
                code: 'UG.QW',
                name: 'Kween',
            },
            {
                code: 'UG.QZ',
                name: 'Kyankwanzi',
            },
            {
                code: 'UG.QG',
                name: 'Kyegegwa',
            },
            {
                code: 'UG.QJ',
                name: 'Kyenjojo',
            },
            {
                code: 'UG.LM',
                name: 'Lamwo',
            },
            {
                code: 'UG.LL',
                name: 'Lira',
            },
            {
                code: 'UG.LK',
                name: 'Luuka',
            },
            {
                code: 'UG.LW',
                name: 'Luwero',
            },
            {
                code: 'UG.LE',
                name: 'Lwengo',
            },
            {
                code: 'UG.LY',
                name: 'Lyantonde',
            },
            {
                code: 'UG.MW',
                name: 'Manafwa',
            },
            {
                code: 'UG.MQ',
                name: 'Masaka',
            },
            {
                code: 'UG.MZ',
                name: 'Masindi',
            },
            {
                code: 'UG.MG',
                name: 'Mayuge',
            },
            {
                code: 'UG.ME',
                name: 'Mbale',
            },
            {
                code: 'UG.RR',
                name: 'Mbarara',
            },
            {
                code: 'UG.MM',
                name: 'Mitoma',
            },
            {
                code: 'UG.TY',
                name: 'Mityana',
            },
            {
                code: 'UG.MX',
                name: 'Moroto',
            },
            {
                code: 'UG.MY',
                name: 'Moyo',
            },
            {
                code: 'UG.MJ',
                name: 'Mpigi',
            },
            {
                code: 'UG.MD',
                name: 'Mubende',
            },
            {
                code: 'UG.MV',
                name: 'Mukono',
            },
            {
                code: 'UG.NI',
                name: 'Nakapiripirit',
            },
            {
                code: 'UG.NK',
                name: 'Nakaseke',
            },
            {
                code: 'UG.NA',
                name: 'Nakasongola',
            },
            {
                code: 'UG.NY',
                name: 'Namayingo',
            },
            {
                code: 'UG.BK',
                name: 'Namutumba',
            },
            {
                code: 'UG.NQ',
                name: 'Napak',
            },
            {
                code: 'UG.NB',
                name: 'Nebbi',
            },
            {
                code: 'UG.NR',
                name: 'Ngora',
            },
            {
                code: 'UG.NO',
                name: 'Ntoroko',
            },
            {
                code: 'UG.NT',
                name: 'Ntungamo',
            },
            {
                code: 'UG.NW',
                name: 'Nwoya',
            },
            {
                code: 'UG.MH',
                name: 'Nyadri',
            },
            {
                code: 'UG.OT',
                name: 'Otuke',
            },
            {
                code: 'UG.OY',
                name: 'Oyam',
            },
            {
                code: 'UG.PR',
                name: 'Pader',
            },
            {
                code: 'UG.PS',
                name: 'Pallisa',
            },
            {
                code: 'UG.RI',
                name: 'Rakai',
            },
            {
                code: 'UG.RZ',
                name: 'Rubirizi',
            },
            {
                code: 'UG.RK',
                name: 'Rukungiri',
            },
            {
                code: 'UG.SE',
                name: 'Sembabule',
            },
            {
                code: 'UG.SX',
                name: 'Serere',
            },
            {
                code: 'UG.SH',
                name: 'Sheema',
            },
            {
                code: 'UG.SK',
                name: 'Sironko',
            },
            {
                code: 'UG.ST',
                name: 'Soroti',
            },
            {
                code: 'UG.TR',
                name: 'Tororo',
            },
            {
                code: 'UG.WA',
                name: 'Wakiso',
            },
            {
                code: 'UG.YU',
                name: 'Yumbe',
            },
            {
                code: 'UG.ZO',
                name: 'Zombo',
            },
        ],
    },
    {
        code: 'UA',
        id: 2357,
        name: 'Ukraine',
        states: [
            {
                code: 'UP01',
                name: 'Cherkasy',
            },
            {
                code: 'UP02',
                name: 'Chernihiv',
            },
            {
                code: 'UP03',
                name: 'Chernivtsi',
            },
            {
                code: 'UP11',
                name: 'Crimea',
            },
            {
                code: 'UP04',
                name: "Dnipropetrovs'k",
            },
            {
                code: 'UP05',
                name: "Donets'k",
            },
            {
                code: 'UP06',
                name: "Ivano-Frankivs'k",
            },
            {
                code: 'UP07',
                name: 'Kharkiv',
            },
            {
                code: 'UP08',
                name: 'Kherson',
            },
            {
                code: 'UP09',
                name: "Khmel'nyts'kyy",
            },
            {
                code: 'UP13',
                name: 'Kiev',
            },
            {
                code: 'UP12',
                name: 'Kiev City',
            },
            {
                code: 'UP10',
                name: 'Kirovohrad',
            },
            {
                code: 'UP15',
                name: "L'viv",
            },
            {
                code: 'UP14',
                name: "Luhans'k",
            },
            {
                code: 'UP16',
                name: 'Mykolayiv',
            },
            {
                code: 'UP17',
                name: 'Odessa',
            },
            {
                code: 'UP18',
                name: 'Poltava',
            },
            {
                code: 'UP19',
                name: 'Rivne',
            },
            {
                code: 'UP20',
                name: "Sevastopol' City",
            },
            {
                code: 'UP21',
                name: 'Sumy',
            },
            {
                code: 'UP22',
                name: "Ternopil'",
            },
            {
                code: 'UP25',
                name: 'Transcarpathia',
            },
            {
                code: 'UP23',
                name: 'Vinnytsya',
            },
            {
                code: 'UP24',
                name: 'Volyn',
            },
            {
                code: 'UP26',
                name: 'Zaporizhzhya',
            },
            {
                code: 'UP27',
                name: 'Zhytomyr',
            },
        ],
    },
    {
        code: 'AE',
        id: 2358,
        name: 'United Arab Emirates',
        states: [
            {
                code: 'AE02',
                name: "'Ajman",
            },
            {
                code: 'AE01',
                name: 'Abu Dhabi',
            },
            {
                code: 'AE04',
                name: 'Al Fujayrah',
            },
            {
                code: 'AE03',
                name: 'Dubai',
            },
            {
                code: 'AE05',
                name: "Ra's al Khaymah",
            },
            {
                code: 'AE06',
                name: 'Sharjah',
            },
            {
                code: 'AE07',
                name: 'Umm al Qaywayn',
            },
        ],
    },
    {
        code: 'UM',
        id: 2441,
        name: 'United States Minor Outlying Islands',
        states: [],
    },
    {
        code: 'UY',
        id: 2360,
        name: 'Uruguay',
        states: [],
    },
    {
        code: 'UZ',
        id: 2361,
        name: 'Uzbekistan',
        states: [
            {
                code: 'UZ01',
                name: 'Andijon',
            },
            {
                code: 'UZ02',
                name: 'Buxoro',
            },
            {
                code: 'UZ03',
                name: 'Farg`ona',
            },
            {
                code: 'UZ15',
                name: 'Jizzax',
            },
            {
                code: 'UZ09',
                name: 'Karakalpakstan',
            },
            {
                code: 'UZ08',
                name: 'Kashkadarya',
            },
            {
                code: 'UZ06',
                name: 'Namangan',
            },
            {
                code: 'UZ07',
                name: 'Navoi',
            },
            {
                code: 'UZ10',
                name: 'Samarkand',
            },
            {
                code: 'UZ16',
                name: 'Sirdaryo',
            },
            {
                code: 'UZ12',
                name: 'Surxondaryo',
            },
            {
                code: 'UZ13',
                name: 'Tashkent City',
            },
            {
                code: 'UZ14',
                name: 'Tashkent',
            },
            {
                code: 'UZ05',
                name: 'Xorazm',
            },
        ],
    },
    {
        code: 'NH',
        id: 2406,
        name: 'Vanuatu',
        states: [],
    },
    {
        code: 'VE',
        id: 2363,
        name: 'Venezuela; Bolivarian Republic of',
        states: [
            {
                code: 'VE01',
                name: 'Amazonas',
            },
            {
                code: 'VE02',
                name: 'Anzoátegui',
            },
            {
                code: 'VE03',
                name: 'Apure',
            },
            {
                code: 'VE04',
                name: 'Aragua',
            },
            {
                code: 'VE05',
                name: 'Barinas',
            },
            {
                code: 'VE06',
                name: 'Bolívar',
            },
            {
                code: 'VE07',
                name: 'Carabobo',
            },
            {
                code: 'VE08',
                name: 'Cojedes',
            },
            {
                code: 'VE09',
                name: 'Delta Amacuro',
            },
            {
                code: 'VE24',
                name: 'Dependencias Federales',
            },
            {
                code: 'VE25',
                name: 'Distrito Capital',
            },
            {
                code: 'VE11',
                name: 'Falcón',
            },
            {
                code: 'VE12',
                name: 'Guárico',
            },
            {
                code: 'VE13',
                name: 'Lara',
            },
            {
                code: 'VE14',
                name: 'Mérida',
            },
            {
                code: 'VE15',
                name: 'Miranda',
            },
            {
                code: 'VE16',
                name: 'Monagas',
            },
            {
                code: 'VE17',
                name: 'Nueva Esparta',
            },
            {
                code: 'VE18',
                name: 'Portuguesa',
            },
            {
                code: 'VE19',
                name: 'Sucre',
            },
            {
                code: 'VE20',
                name: 'Táchira',
            },
            {
                code: 'VE21',
                name: 'Trujillo',
            },
            {
                code: 'VE26',
                name: 'Vargas',
            },
            {
                code: 'VE22',
                name: 'Yaracuy',
            },
            {
                code: 'VE23',
                name: 'Zulia',
            },
        ],
    },
    {
        code: 'VN',
        id: 2364,
        name: 'Vietnam',
        states: [
            {
                code: 'VM01',
                name: 'An Giang',
            },
            {
                code: 'VM45',
                name: 'Ba Ria-Vung Tau',
            },
            {
                code: 'VM72',
                name: 'Bac Can',
            },
            {
                code: 'VM71',
                name: 'Bac Giang',
            },
            {
                code: 'VM73',
                name: 'Bac Lieu',
            },
            {
                code: 'VM74',
                name: 'Bac Ninh',
            },
            {
                code: 'VM03',
                name: 'Ben Tre',
            },
            {
                code: 'VM46',
                name: 'Binh Dinh',
            },
            {
                code: 'VM75',
                name: 'Binh Duong',
            },
            {
                code: 'VM76',
                name: 'Binh Phuoc',
            },
            {
                code: 'VM47',
                name: 'Binh Thuan',
            },
            {
                code: 'VM77',
                name: 'Ca Mau',
            },
            {
                code: 'VM87',
                name: 'Can Tho',
            },
            {
                code: 'VM05',
                name: 'Cao Bang',
            },
            {
                code: 'VM78',
                name: 'Da Nang',
            },
            {
                code: 'VM88',
                name: 'Dac Lac',
            },
            {
                code: 'VM91',
                name: 'Dac Nong',
            },
            {
                code: 'VM92',
                name: 'Dien Bien',
            },
            {
                code: 'VM43',
                name: 'Dong Nai',
            },
            {
                code: 'VM09',
                name: 'Dong Thap',
            },
            {
                code: 'VM49',
                name: 'Gia Lai',
            },
            {
                code: 'VM50',
                name: 'Ha Giang',
            },
            {
                code: 'VM80',
                name: 'Ha Nam',
            },
            {
                code: 'VM52',
                name: 'Ha Tinh',
            },
            {
                code: 'VM79',
                name: 'Hai Duong',
            },
            {
                code: 'VM13',
                name: 'Haiphong',
            },
            {
                code: 'VM44',
                name: 'Hanoi',
            },
            {
                code: 'VM93',
                name: 'Hau Giang',
            },
            {
                code: 'VM20',
                name: 'Ho Chi Minh',
            },
            {
                code: 'VM53',
                name: 'Hoa Binh',
            },
            {
                code: 'VM81',
                name: 'Hung Yen',
            },
            {
                code: 'VM54',
                name: 'Khanh Hoa',
            },
            {
                code: 'VM21',
                name: 'Kien Giang',
            },
            {
                code: 'VM55',
                name: 'Kon Tum',
            },
            {
                code: 'VM89',
                name: 'Lai Chau',
            },
            {
                code: 'VM23',
                name: 'Lam Dong',
            },
            {
                code: 'VM39',
                name: 'Lang Son',
            },
            {
                code: 'VM90',
                name: 'Lao Cai',
            },
            {
                code: 'VM24',
                name: 'Long An',
            },
            {
                code: 'VM82',
                name: 'Nam Dinh',
            },
            {
                code: 'VM58',
                name: 'Nghe An',
            },
            {
                code: 'VM59',
                name: 'Ninh Binh',
            },
            {
                code: 'VM60',
                name: 'Ninh Thuan',
            },
            {
                code: 'VM83',
                name: 'Phu Tho',
            },
            {
                code: 'VM61',
                name: 'Phu Yen',
            },
            {
                code: 'VM62',
                name: 'Quang Binh',
            },
            {
                code: 'VM84',
                name: 'Quang Nam',
            },
            {
                code: 'VM63',
                name: 'Quang Ngai',
            },
            {
                code: 'VM30',
                name: 'Quang Ninh',
            },
            {
                code: 'VM64',
                name: 'Quang Tri',
            },
            {
                code: 'VM65',
                name: 'Soc Trang',
            },
            {
                code: 'VM32',
                name: 'Son La',
            },
            {
                code: 'VM33',
                name: 'Tay Ninh',
            },
            {
                code: 'VM35',
                name: 'Thai Binh',
            },
            {
                code: 'VM85',
                name: 'Thai Nguyen',
            },
            {
                code: 'VM34',
                name: 'Thanh Hoa',
            },
            {
                code: 'VM66',
                name: 'Thua Thien-Hue',
            },
            {
                code: 'VM37',
                name: 'Tien Giang',
            },
            {
                code: 'VM67',
                name: 'Tra Vinh',
            },
            {
                code: 'VM68',
                name: 'Tuyen Quang',
            },
            {
                code: 'VM69',
                name: 'Vinh Long',
            },
            {
                code: 'VM86',
                name: 'Vinh Phuc',
            },
            {
                code: 'VM70',
                name: 'Yen Bai',
            },
        ],
    },
    {
        code: 'VG',
        id: 2446,
        name: 'Virgin Islands; British',
        states: [
            {
                code: 'VG.VI',
                name: 'British Virgin Islands',
            },
        ],
    },
    {
        code: 'VI',
        id: 2442,
        name: 'Virgin Islands; U.S.',
        states: [
            {
                code: '010',
                name: 'Saint Croix',
            },
            {
                code: '020',
                name: 'Saint John',
            },
            {
                code: '030',
                name: 'Saint Thomas',
            },
        ],
    },
    {
        code: 'WF',
        id: 2443,
        name: 'Wallis and Futuna',
        states: [],
    },
    {
        code: 'EH',
        id: 2444,
        name: 'Western Sahara',
        states: [],
    },
    {
        code: 'YE',
        id: 2382,
        name: 'Yemen',
        states: [
            {
                code: 'YM01',
                name: 'Abyan',
            },
            {
                code: 'YM20',
                name: "Al Bayda'",
            },
            {
                code: 'YM18',
                name: "Al Dali'",
            },
            {
                code: 'YM08',
                name: 'Al Hudaydah',
            },
            {
                code: 'YM21',
                name: 'Al Jawf',
            },
            {
                code: 'YM03',
                name: 'Al Mahrah',
            },
            {
                code: 'YM10',
                name: 'Al Mahwit',
            },
            {
                code: 'YM19',
                name: 'Amran',
            },
            {
                code: 'YM11',
                name: 'Dhamar',
            },
            {
                code: 'YM04',
                name: 'Hadramawt',
            },
            {
                code: 'YM22',
                name: 'Hajjah',
            },
            {
                code: 'YM23',
                name: 'Ibb',
            },
            {
                code: 'YM24',
                name: 'Lahij',
            },
            {
                code: 'YM14',
                name: "Ma'rib",
            },
            {
                code: 'YM27',
                name: 'Raymah',
            },
            {
                code: 'YM15',
                name: 'Sa`dah',
            },
            {
                code: 'YM16',
                name: "San`a'",
            },
            {
                code: 'YM26',
                name: "San`a' [City]",
            },
            {
                code: 'YM05',
                name: 'Shabwah',
            },
            {
                code: 'YM28',
                name: 'Socotra',
            },
            {
                code: 'YM25',
                name: 'Ta`izz',
            },
            {
                code: 'YM02',
                name: '`Adan',
            },
        ],
    },
    {
        code: 'ZM',
        id: 2369,
        name: 'Zambia',
        states: [
            {
                code: 'ZA02',
                name: 'Central',
            },
            {
                code: 'ZA08',
                name: 'Copperbelt',
            },
            {
                code: 'ZA03',
                name: 'Eastern',
            },
            {
                code: 'ZA04',
                name: 'Luapula',
            },
            {
                code: 'ZA09',
                name: 'Lusaka',
            },
            {
                code: 'ZA10',
                name: 'Muchinga',
            },
            {
                code: 'ZA06',
                name: 'North-Western',
            },
            {
                code: 'ZA05',
                name: 'Northern',
            },
            {
                code: 'ZA07',
                name: 'Southern',
            },
            {
                code: 'ZA01',
                name: 'Western',
            },
        ],
    },
    {
        code: 'ZW',
        id: 2370,
        name: 'Zimbabwe',
        states: [
            {
                code: 'ZI09',
                name: 'Bulawayo',
            },
            {
                code: 'ZI10',
                name: 'Harare',
            },
            {
                code: 'ZI01',
                name: 'Manicaland',
            },
            {
                code: 'ZI03',
                name: 'Mashonaland Central',
            },
            {
                code: 'ZI04',
                name: 'Mashonaland East',
            },
            {
                code: 'ZI05',
                name: 'Mashonaland West',
            },
            {
                code: 'ZI08',
                name: 'Masvingo',
            },
            {
                code: 'ZI06',
                name: 'Matabeleland North',
            },
            {
                code: 'ZI07',
                name: 'Matabeleland South',
            },
            {
                code: 'ZI02',
                name: 'Midlands',
            },
        ],
    },
    {
        code: 'NONE',
        id: 2378,
        name: '- None Specified -',
        states: [],
    },
];
/**
 * Gets all countries
 */
function getCountries() {
    return COUNTRIES.map((country) => country.name);
}
/**
 * Gets a country by country ID
 */
function findByCountryId(id) {
    return COUNTRIES.find((country) => country.id === id);
}
/**
 * Gets a country by country name
 * @param name - Name of country to find
 */
function findByCountryName(name) {
    return COUNTRIES.find((country) => country.name === name.trim());
}
/**
 * Gets a country by country code
 * @param code - Code of country to find
 */
function findByCountryCode(code) {
    return COUNTRIES.find((country) => country.code === code.trim());
}
/**
 * Gets states by country name
 * @param name - Name of the country to search by
 */
function getStateObjects(name) {
    if (name) {
        const foundCountry = COUNTRIES.find((country) => country.name === name.trim());
        return (foundCountry && foundCountry.states) || [];
    }
    return [];
}
/**
 * Gets state names by country name
 * @param name - Name of the country to search by
 */
function getStates(name) {
    return getStateObjects(name).map((state) => state.name);
}

function BooleanInput() {
    return (target, propertyKey) => {
        const key = Symbol();
        return {
            get() {
                return this[key] || false;
            },
            set(value) {
                this[key] = coerceBooleanProperty(value);
            },
        };
    };
}

function Deferred() {
    const temp = {};
    const promise = new Promise((resolve, reject) => {
        temp.resolve = resolve;
        temp.reject = reject;
    });
    promise.resolve = temp.resolve;
    promise.reject = temp.reject;
    return promise;
}

// NG2
class ControlConfig {
    constructor() {
        this.isEmbedded = false;
        this.isInlineEmbedded = false;
    }
}
class BaseControl extends ControlConfig {
    constructor(type = 'BaseControl', config = {}) {
        super();
        this.__type = 'BaseControl';
        this.__type = type;
        this.__config = config;
        this.alwaysActive = config.alwaysActive;
        this.validators = config.validators || [];
        this.asyncValidators = config.asyncValidators || [];
        this.value = config.value;
        this.key = config.key || '';
        this.label = config.label || '';
        this.checkboxLabel = config.checkboxLabel;
        this.name = config.name || '';
        this.required = !!config.required;
        this.hidden = !!config.hidden;
        this.encrypted = !!config.encrypted;
        this.sortOrder = config.sortOrder === undefined ? 1 : config.sortOrder;
        this.controlType = config.controlType || '';
        this.type = config.type;
        this.subType = config.subType;
        this.metaType = config.metaType;
        this.placeholder = config.placeholder || '';
        this.config = config.config || null;
        this.dirty = !!(config.value !== undefined && config.value !== null);
        this.multiple = !!config.multiple;
        this.headerConfig = config.headerConfig || null;
        this.currencyFormat = config.currencyFormat || null;
        this.associatedEntity = config.associatedEntity || null;
        this.optionsType = config.optionsType || null;
        this.options = config.options || [];
        this.forceClear = new EventEmitter();
        this.readOnly = !!config.readOnly || !!config.disabled;
        this.disabled = !!config.disabled;
        this.layoutOptions = config.layoutOptions || {};
        this.military = !!config.military;
        this.dateFormat = config.dateFormat;
        this.textMaskEnabled = config.textMaskEnabled;
        this.maskOptions = config.maskOptions;
        this.allowInvalidDate = config.allowInvalidDate;
        this.startDate = config.startDate;
        this.endDate = config.endDate;
        this.restrictFieldInteractions = !!config.restrictFieldInteractions;
        if (!Helpers.isEmpty(config.warning)) {
            this.warning = config.warning;
        }
        if (this.required) {
            this.validators.push(Validators.required);
        }
        if (!Helpers.isBlank(config.maxlength)) {
            this.maxlength = config.maxlength;
            this.validators.push(Validators.maxLength(this.maxlength));
        }
        if (!Helpers.isBlank(config.minlength)) {
            this.minlength = config.minlength;
            this.validators.push(Validators.minLength(this.minlength));
        }
        this.closeOnSelect = !!config.closeOnSelect;
        this.interactions = config.interactions;
        this.dataSpecialization = config.dataSpecialization;
        this.dataType = config.dataType;
        this.appendToBody = !!config.appendToBody;
        if (this.appendToBody) {
            notify(`'appendToBody' has been deprecated. Please remove this attribute.`);
        }
        this.parentScrollSelector = config.parentScrollSelector;
        this.description = config.description;
        if (config.tooltip) {
            this.tooltip = config.tooltip;
            this.tooltipPosition = config.tooltipPosition;
            this.tooltipSize = config.tooltipSize;
            this.tooltipPreline = config.tooltipPreline;
            this.removeTooltipArrow = config.removeTooltipArrow;
            this.tooltipAutoPosition = config.tooltipAutoPosition;
        }
        this.template = config.template;
        this.customControlConfig = config.customControlConfig;
        this.tipWell = config.tipWell;
        this.width = config.width;
        this.startupFocus = !!config.startupFocus;
        if (config.fileBrowserImageUploadUrl) {
            this.fileBrowserImageUploadUrl = config.fileBrowserImageUploadUrl;
        }
        if (config.isEmpty) {
            this.isEmpty = config.isEmpty;
        }
        this.weekStart = config.weekStart || 0;
    }
}

// APP
class AceEditorControl extends BaseControl {
    constructor(config) {
        super('AceEditorControl', config);
        this.controlType = 'ace-editor';
    }
}

const MAX_INTEGER = 2147483647;
const MIN_YEAR = 1753;
class FormValidators {
    showStateRequiredFlag(subfield, control) {
        return (subfield === 'state' &&
            !Helpers.isEmpty(control.config.state) &&
            control.config.state.required &&
            Helpers.isBlank(control.value.state) &&
            control.config.state.updated &&
            !Helpers.isBlank(control.value.countryName) &&
            control.config.state.pickerConfig &&
            control.config.state.pickerConfig.defaultOptions &&
            control.config.state.pickerConfig.defaultOptions.length > 0);
    }
    // Makes sure the control value does not exceed the max integer value
    static maxInteger(control) {
        return control.value < MAX_INTEGER ? null : { integerTooLarge: true };
    }
    // Makes sure the control value is above the minimum year
    static minYear(control) {
        if (!control.value) {
            return null;
        }
        return control.value >= MIN_YEAR ? null : { minYear: true };
    }
    // Makes sure the control value does not exceed the max number value
    static maxDouble(control) {
        return control.value < Number.MAX_SAFE_INTEGER ? null : { doubleTooLarge: true };
    }
    // Make sure the control value is an email
    static isEmail(control) {
        const EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;
        return !control.value || EMAIL_REGEXP.test(control.value) ? null : { invalidEmail: true };
    }
    // Makes sure the control value is a valid address
    static isValidAddress(control) {
        const fieldList = ['address1', 'address2', 'city', 'state', 'zip', 'countryID'];
        const invalidAddressFields = [];
        const maxlengthFields = [];
        let returnVal = null;
        let maxlengthError = false;
        const showCountryRequiredFlag = (subfield, ctrl) => {
            return (subfield === 'countryID' &&
                !Helpers.isEmpty(ctrl.config.countryID) &&
                ctrl.config.countryID.required &&
                Helpers.isBlank(ctrl.value.countryName) &&
                ctrl.config.countryID.updated);
        };
        const showStateRequiredFlag = (subfield, ctrl) => {
            return (subfield === 'state' &&
                !Helpers.isEmpty(ctrl.config.state) &&
                ctrl.config.state.required &&
                Helpers.isBlank(ctrl.value.state) &&
                ctrl.config.state.updated &&
                !Helpers.isBlank(ctrl.value.countryName) &&
                ctrl.config.state.pickerConfig &&
                ctrl.config.state.pickerConfig.defaultOptions &&
                ctrl.config.state.pickerConfig.defaultOptions.length > 0);
        };
        if (control.value && control.config) {
            let valid = true;
            let formValidity = true;
            fieldList.forEach((subfield) => {
                if (!Helpers.isEmpty(control.config[subfield])) {
                    if ((['countryID', 'state'].indexOf(subfield) === -1 &&
                        control.config[subfield].required &&
                        !Helpers.isBlank(control.value[subfield]) &&
                        Helpers.isEmpty(control.value[subfield])) ||
                        showCountryRequiredFlag(subfield, control) ||
                        showStateRequiredFlag(subfield, control)) {
                        valid = false;
                        invalidAddressFields.push(control.config[subfield].label);
                    }
                    if (((subfield !== 'countryID' && control.config[subfield].required && Helpers.isEmpty(control.value[subfield])) ||
                        (subfield === 'countryID' &&
                            !Helpers.isEmpty(control.config.countryID) &&
                            control.config.countryID.required &&
                            Helpers.isEmpty(control.value.countryName))) &&
                        !(subfield === 'state' &&
                            !Helpers.isBlank(control.value.countryName) &&
                            control.config.state.pickerConfig &&
                            control.config.state.pickerConfig.defaultOptions &&
                            control.config.state.pickerConfig.defaultOptions.length === 0)) {
                        formValidity = false;
                    }
                    if (!Helpers.isEmpty(control.config[subfield].maxlength) &&
                        !Helpers.isEmpty(control.value[subfield]) &&
                        control.value[subfield].length > control.config[subfield].maxlength) {
                        maxlengthError = true;
                        maxlengthFields.push(subfield);
                        formValidity = false;
                    }
                }
            });
            if (!valid || !formValidity || maxlengthError) {
                returnVal = {};
            }
            if (!valid) {
                returnVal.invalidAddress = true;
                returnVal.invalidAddressFields = invalidAddressFields;
            }
            if (!formValidity) {
                returnVal.invalidAddressForForm = true;
            }
            if (maxlengthError) {
                returnVal.maxlength = true;
                returnVal.maxlengthFields = maxlengthFields;
            }
            return returnVal;
        }
        return null;
    }
}

// APP
class AddressControl extends BaseControl {
    constructor(config) {
        super('AddressControl', config);
        this.controlType = 'address';
        this.validators.push(FormValidators.isValidAddress);
    }
}

// APP
class CheckListControl extends BaseControl {
    constructor(config) {
        super('CheckListControl', config);
        this.controlType = 'checklist';
        this.options = config.options || [];
    }
}

// APP
class CheckboxControl extends BaseControl {
    constructor(config) {
        super('CheckboxControl', config);
        this.controlType = 'checkbox';
    }
}

// APP
class CustomControl extends BaseControl {
    constructor(config) {
        super(config.template, config);
        this.controlType = 'custom';
        this.controlType = config.template;
    }
}

// APP
class DateControl extends BaseControl {
    constructor(config) {
        super('DateControl', config);
        this.controlType = 'date';
    }
}

// APP
class DateTimeControl extends BaseControl {
    constructor(config) {
        super('DateTimeControl', config);
        this.controlType = 'date-time';
    }
}

// APP
class EditorControl extends BaseControl {
    constructor(config) {
        super('EditorControl', config);
        this.controlType = 'editor';
        this.minimal = false;
    }
}

// APP
class FileControl extends BaseControl {
    constructor(config) {
        super('FileControl', config);
        this.controlType = 'file';
        // TODO - translate
        this.placeholder = config.placeholder;
        this.multiple = config.multiple;
    }
}

class GroupedControl {
    constructor(config) {
        this.__type = 'GroupedControl';
        Object.keys(config).forEach((key) => (this[key] = config[key]));
    }
}

// APP
class NativeSelectControl extends BaseControl {
    constructor(config) {
        super('NativeSelectControl', config);
        this.controlType = 'native-select';
        this.options = [];
        this.options = config.options || [];
    }
}

// APP
class PickerControl extends BaseControl {
    constructor(config) {
        super('PickerControl', config);
        this.controlType = 'picker';
        this.options = [];
        this.options = config.options || [];
    }
}
class TablePickerControl extends PickerControl {
    constructor(config) {
        super(Object.assign(config, { parentScrollSelector: '.table-container' }));
        this.__type = 'TablePickerControl';
    }
}

// APP
class QuickNoteControl extends BaseControl {
    constructor(config) {
        super('QuickNoteControl', config);
        this.controlType = 'quick-note';
        this.options = [];
        this.options = config.options || [];
    }
}

// APP
class RadioControl extends BaseControl {
    constructor(config) {
        super('RadioControl', config);
        this.controlType = 'radio';
        this.options = [];
        this.options = config.options || [];
    }
}

// APP
class ReadOnlyControl extends BaseControl {
    constructor(config) {
        super('ReadOnlyControl', config);
        this.controlType = 'read-only';
        config.readOnly = true;
    }
}

// APP
class SelectControl extends BaseControl {
    constructor(config) {
        super('SelectControl', config);
        this.controlType = 'select';
        this.options = [];
        this.options = config.options || [];
        this.placeholder = config.placeholder || '';
    }
}

// APP
class TextAreaControl extends BaseControl {
    constructor(config) {
        super('TextAreaControl', config);
        this.controlType = 'text-area';
    }
}

// APP
class TextBoxControl extends BaseControl {
    constructor(config) {
        super('TextBoxControl', config);
        this.controlType = 'textbox';
        this.type = this.getTextboxType(config.type) || '';
        this.subType = config.type || '';
        this.setValidators(this.subType);
    }
    setValidators(type) {
        switch (type) {
            case 'email':
                this.validators.push(FormValidators.isEmail);
                break;
            case 'number':
            case 'currency':
                this.validators.push(FormValidators.maxInteger);
                break;
            case 'float':
            case 'percentage':
                this.validators.push(FormValidators.maxDouble);
                break;
            case 'year':
                this.validators.push(FormValidators.minYear);
                break;
            default:
                break;
        }
    }
    getTextboxType(type) {
        switch (type) {
            case 'percentage':
            case 'currency':
            case 'float':
            case 'year':
                return 'number';
            default:
                return type;
        }
    }
}

// APP
class TilesControl extends BaseControl {
    constructor(config) {
        super('TilesControl', config);
        this.controlType = 'tiles';
        this.options = [];
        this.options = config.options || [];
    }
}

// APP
class TimeControl extends BaseControl {
    constructor(config) {
        super('TimeControl', config);
        this.controlType = 'time';
    }
}

// APP
class TimezoneControl extends BaseControl {
    constructor(config) {
        super('TimezoneControl', config);
        this.controlType = 'timezone';
        this.options = [];
        this.buildTimezones = (compareDate) => {
            const timezones = listTimeZones()
                .map((zone) => {
                const timezone = findTimeZone(zone);
                const zonedTime = getZonedTime(compareDate, timezone);
                const formatted = formatZonedTime(zonedTime, `z - [${zone}] ([GMT] Z)`).replace('_', ' ');
                const option = {
                    value: zone,
                    label: formatted,
                    offset: zonedTime.zone.offset,
                };
                // if (this.props.mapLabels) {
                //   option.label = this.props.mapLabels(option);
                // }
                return option;
            })
                // Formats 'noisy' timezones without a letter acronym.
                .map((option) => {
                const rgx = /(^(\+|-)\d+\s- )/;
                const matches = option.label.match(rgx);
                if (matches) {
                    const prefix = matches[0];
                    option.label = option.label.split(prefix)[1];
                }
                return option;
            })
                // Sorts W -> E, prioritizes america. could be more nuanced based on system tz but simple for now
                .sort((a, b) => {
                const offsetDelta = b.offset - a.offset;
                if (offsetDelta !== 0) {
                    return offsetDelta;
                }
                if (a.label < b.label) {
                    return -1;
                }
                if (a.label > b.label) {
                    return 1;
                }
                return 0;
            });
            return timezones;
        };
        this.options = this.buildTimezones(new Date());
        this.placeholder = config.placeholder || '';
        // current timezone
        const tz = Intl.DateTimeFormat().resolvedOptions().timeZone;
        this.value = tz;
    }
}

class ControlFactory {
    static create(type, config) {
        switch (type) {
            case 'AddressControl':
                return new AddressControl(config);
            case 'CheckboxControl':
                return new CheckboxControl(config);
            case 'CheckListControl':
                return new CheckListControl(config);
            case 'CheckListControl':
                return new CheckListControl(config);
            case 'DateTimeControl':
                return new DateTimeControl(config);
            case 'EditorControl':
                return new EditorControl(config);
            case 'FileControl':
                return new FileControl(config);
            case 'NativeSelectControl':
                return new NativeSelectControl(config);
            case 'PickerControl':
                return new PickerControl(config);
            case 'TablePickerControl':
                return new TablePickerControl(config);
            case 'QuickNoteControl':
                return new QuickNoteControl(config);
            case 'RadioControl':
                return new RadioControl(config);
            case 'ReadOnlyControl':
                return new ReadOnlyControl(config);
            case 'TextAreaControl':
                return new TextAreaControl(config);
            case 'TextBoxControl':
                return new TextBoxControl(config);
            case 'SelectControl':
                return new SelectControl(config);
            case 'TilesControl':
                return new TilesControl(config);
            case 'TimeControl':
                return new TimeControl(config);
            default:
                console.warn('[ControlFactory] - unable to find control for type. Make sure to set "editorType" and "editorConfig" on your column', type);
                return null;
        }
    }
}

// NG2
class NovoFormControl extends FormControl {
    constructor(value, control) {
        super(value, control.validators, control.asyncValidators);
        this.displayValueChanges = new EventEmitter();
        this.valueHistory = [];
        this.validators = control.validators;
        this.initialValue = value;
        this.valueHistory.push(value);
        this.key = control.key;
        this.label = control.label;
        this.readOnly = control.readOnly;
        this.hidden = control.hidden;
        this.encrypted = control.encrypted;
        this.config = control.config;
        this.type = control.type;
        this.subType = control.subType;
        this.required = control.required;
        this.hasRequiredValidator = this.required;
        this.tooltip = control.tooltip;
        this.tooltipPosition = control.tooltipPosition;
        this.tooltipSize = control.tooltipSize;
        this.tooltipPreline = control.tooltipPreline;
        this.removeTooltipArrow = control.removeTooltipArrow;
        this.tooltipAutoPosition = control.tooltipAutoPosition;
        this.label = control.label;
        this.name = control.name;
        this.required = control.required;
        this.sortOrder = control.sortOrder;
        this.controlType = control.controlType;
        this.placeholder = control.placeholder;
        this.minimal = control.minimal;
        this.multiple = control.multiple;
        this.headerConfig = control.headerConfig;
        this.optionsType = control.optionsType;
        this.readOnly = control.readOnly;
        this.layoutOptions = control.layoutOptions;
        this.military = control.military;
        this.dateFormat = control.dateFormat;
        this.currencyFormat = control.currencyFormat;
        this.startDate = control.startDate;
        this.endDate = control.endDate;
        this.weekStart = control.weekStart;
        this.textMaskEnabled = control.textMaskEnabled;
        this.textMaskEnabled = control.textMaskEnabled;
        this.maskOptions = control.maskOptions;
        this.allowInvalidDate = control.allowInvalidDate;
        this.maxlength = control.maxlength;
        this.minlength = control.minlength;
        this.closeOnSelect = control.closeOnSelect;
        this.interactions = control.interactions;
        this.checkboxLabel = control.checkboxLabel;
        this.restrictFieldInteractions = control.restrictFieldInteractions;
        this.appendToBody = control.appendToBody;
        if (this.appendToBody) {
            notify(`'appendToBody' has been deprecated. Please remove this attribute.`);
        }
        this.parentScrollSelector = control.parentScrollSelector;
        this.description = control.description;
        this.options = control.options;
        this.tipWell = control.tipWell;
        this.customControlConfig = control.customControlConfig;
        this.warning = control.warning;
        // Reactive Form, need to enable/disable, can't bind to [disabled]
        if (this.readOnly) {
            this.disable();
        }
        else {
            this.enable();
        }
    }
    /**
     * @param clearValue - flag to reset the control's value
     */
    hide(clearValue = true) {
        this.hidden = true;
        if (clearValue) {
            this.setValue(null);
        }
    }
    show() {
        this.hidden = false;
    }
    setRequired(isRequired) {
        this.required = isRequired;
        // Update validators to have the required
        if (this.required && !this.hasRequiredValidator) {
            const validators = [...this.validators];
            validators.push(Validators.required);
            // TODO: duplicated below
            this.setValidators(validators);
            this.updateValueAndValidity({ emitEvent: false });
            this.hasRequiredValidator = this.required;
        }
        else if (!this.required && this.hasRequiredValidator) {
            let validators = [...this.validators];
            validators = validators.filter((val) => val !== Validators.required);
            // TODO: duplicated above
            this.setValidators(validators);
            this.updateValueAndValidity({ emitEvent: false });
            this.hasRequiredValidator = this.required;
        }
    }
    setValue(value, { onlySelf, emitEvent, emitModelToViewChange, emitViewToModelChange, } = {}) {
        this.markAsDirty();
        this.markAsTouched();
        this.displayValueChanges.emit(value);
        super.setValue(value, { onlySelf, emitEvent, emitModelToViewChange, emitViewToModelChange });
        // History
        clearTimeout(this.historyTimeout);
        this.historyTimeout = setTimeout(() => {
            this.valueHistory.push(value);
        }, 300);
    }
    setReadOnly(isReadOnly) {
        this.readOnly = isReadOnly;
        if (this.readOnly) {
            this.disable();
        }
        else {
            this.enable();
        }
    }
    /**
     * Disables the control. This means the control will be exempt from validation checks and
     * excluded from the aggregate value of any parent. Its status is `DISABLED`.
     *
     * If the control has children, all children will be disabled to maintain the model.
     */
    disable(opts = { emitEvent: false }) {
        if (typeof opts.emitEvent === 'undefined') {
            opts.emitEvent = false;
        }
        super.disable(opts);
    }
    enable(opts = { emitEvent: false }) {
        if (typeof opts.emitEvent === 'undefined') {
            opts.emitEvent = false;
        }
        super.enable(opts);
    }
    markAsInvalid(message) {
        this.markAsDirty();
        this.markAsTouched();
        this.setErrors(Object.assign({}, this.errors, { custom: message }));
    }
}

// NG
class NovoFormGroup extends FormGroup {
    constructor() {
        super(...arguments);
        this.fieldInteractionEvents = new EventEmitter();
    }
    enableAllControls() {
        for (const key in this.controls) {
            if (this.controls[key].readOnly) {
                this.controls[key].readOnly = false;
                this.controls[key].enable();
            }
        }
    }
    disableAllControls() {
        for (const key in this.controls) {
            if (!this.controls[key].readOnly) {
                this.controls[key].readOnly = true;
                this.controls[key].disable();
            }
        }
    }
}

// NG2
class NovoLabelService {
    constructor(userLocale = 'en-US') {
        this.userLocale = userLocale;
        this.filters = 'Filter';
        this.clear = 'Clear';
        this.sort = 'Sort';
        this.distributionListOwner = 'Owner';
        this.dateAdded = 'Date Added';
        this.emptyTableMessage = 'No Records to display...';
        this.noMatchingRecordsMessage = 'No Matching Records';
        this.erroredTableMessage = 'Oops! An error occurred.';
        this.pickerError = 'Oops! An error occurred.';
        this.pickerTextFieldEmpty = 'Begin typing to see results.';
        this.pickerEmpty = 'No results to display...';
        this.tabbedGroupPickerEmpty = 'No results found';
        this.quickNoteError = 'Oops! An error occurred.';
        this.quickNoteEmpty = 'No results to display...';
        this.required = 'Required';
        this.numberTooLarge = 'Number is too large';
        this.save = 'Save';
        this.cancel = 'Cancel';
        this.next = 'Next';
        this.itemsPerPage = 'Items per page:';
        this.select = 'Select...';
        this.selected = 'Selected';
        this.selectAllOnPage = 'Select all on page';
        this.deselectAll = 'Deselect all';
        this.refresh = 'Refresh';
        this.close = 'Close';
        this.move = 'Move';
        this.startDate = 'Start Date';
        this.endDate = 'End Date';
        this.rate = 'Rate';
        this.more = 'more';
        this.clearAll = 'CLEAR ALL';
        this.clearAllNormalCase = 'Clear All';
        this.clearSort = 'Clear Sort';
        this.clearFilter = 'Clear Filter';
        this.today = 'Today';
        this.now = 'Now';
        this.isRequired = 'is required';
        this.notValidYear = 'is not a valid year';
        this.isTooLarge = 'is too large';
        this.invalidAddress = 'requires at least one field filled out';
        this.invalidEmail = 'requires a valid email (ex. abc@123.com)';
        this.minLength = 'is required to be a minimum length of';
        this.past1Day = 'Past 1 Day';
        this.past7Days = 'Past 7 Days';
        this.past30Days = 'Past 30 Days';
        this.past90Days = 'Past 90 Days';
        this.past1Year = 'Past 1 Year';
        this.next1Day = 'Next 1 Day';
        this.next7Days = 'Next 7 Days';
        this.next30Days = 'Next 30 Days';
        this.next90Days = 'Next 90 Days';
        this.next1Year = 'Next 1 Year';
        this.customDateRange = 'Custom Date Range';
        this.backToPresetFilters = 'Back to Preset Filters';
        this.okGotIt = 'Ok, Got it';
        this.address = 'Address';
        this.address1 = 'Address';
        this.apt = 'Apt'; // TODO delete
        this.address2 = 'Apt';
        this.city = 'City / Locality';
        this.state = 'State / Region';
        this.zip = 'Postal Code';
        this.zipCode = 'Postal Code'; // TODO delete
        this.country = 'Country';
        this.or = 'or';
        this.clickToBrowse = 'click to browse';
        this.chooseAFile = 'Choose a file';
        this.no = 'No';
        this.yes = 'Yes';
        this.search = 'SEARCH';
        this.noItems = 'There are no items';
        this.dateFormat = 'MM/dd/yyyy';
        this.dateFormatPlaceholder = 'MM/DD/YYYY';
        this.timeFormatPlaceholderAM = 'hh:mm AM';
        this.timeFormatPlaceholder24Hour = 'HH:mm';
        this.timeFormatAM = 'AM';
        this.timeFormatPM = 'PM';
        this.confirmChangesModalMessage = 'Are you sure you want to change this field?';
        this.promptModalMessage = 'Do you want to perform the following changes?';
        this.asyncFailure = 'Async validation was not called within the 10s threshold, you might want to reload the page to try again';
        this.previous = 'Previous';
        this.actions = 'Actions';
        this.all = 'All';
        this.groupedMultiPickerEmpty = 'No items to display';
        this.groupedMultiPickerSelectCategory = 'Select a category from the right to get started';
        this.add = 'Add';
        this.encryptedFieldTooltip = 'This data has been stored at the highest level of security';
        this.noStatesForCountry = 'No states available for the selected country';
        this.selectCountryFirst = 'Please select a country before selecting a state';
        this.invalidIntegerInput = 'Special characters are not allowed for';
        this.maxRecordsReached = 'Sorry, you have reached the maximum number of records allowed for this field';
        this.selectFilterOptions = 'Please select one or more filter options below.';
    }
    maxlengthMetWithField(field, maxlength) {
        return `Sorry, you have reached the maximum character count of ${maxlength} for ${field}.`;
    }
    maxlengthMet(maxlength) {
        return `Sorry, you have reached the maximum character count of ${maxlength} for this field.`;
    }
    invalidMaxlengthWithField(field, maxlength) {
        return `Sorry, you have exceeded the maximum character count of ${maxlength} for ${field}.`;
    }
    invalidMaxlength(maxlength) {
        return `Sorry, you have exceeded the maximum character count of ${maxlength} for this field.`;
    }
    getToManyPlusMore(toMany) {
        return `+${toMany.quantity} more`;
    }
    selectedRecords(selected) {
        return `${selected} records are selected.`;
    }
    showingXofXResults(shown, total) {
        return `Showing ${shown} of ${total} Results.`;
    }
    totalRecords(total, select = false) {
        return select ? `Select all ${total} records.` : `De-select remaining ${total} records.`;
    }
    dateFormatString() {
        return this.dateFormat;
    }
    tabbedGroupClearSuggestion(tabLabelPlural) {
        return `Clear your search to see all ${tabLabelPlural}.`;
    }
    formatDateWithFormat(value, format) {
        const date = value instanceof Date ? value : new Date(value);
        if (date.getTime() !== date.getTime()) {
            return value;
        }
        return new Intl.DateTimeFormat(this.userLocale, format).format(date);
    }
    formatToTimeOnly(param) { }
    formatToDateOnly(param) { }
    formatTimeWithFormat(value, format) {
        const date = value instanceof Date ? value : new Date(value);
        if (date.getTime() !== date.getTime()) {
            return value;
        }
        const timeParts = Intl.DateTimeFormat(this.userLocale, format)
            .formatToParts(date)
            .reduce((obj, part) => {
            obj[part.type] = part.value;
            return obj;
        }, {});
        const dayPeriod = timeParts.dayPeriod ? timeParts.dayPeriod : '';
        const res = `${timeParts.hour}:${timeParts.minute} ${dayPeriod}`;
        return res;
    }
    getWeekdays(weekStartsOn = 0) {
        function getDay(dayOfWeek) {
            const dt = new Date();
            return dt.setDate(dt.getDate() - dt.getDay() + dayOfWeek);
        }
        let weekdays = [getDay(0), getDay(1), getDay(2), getDay(3), getDay(4), getDay(5), getDay(6)].reduce((weekdays, dt) => {
            weekdays.push(new Intl.DateTimeFormat(this.userLocale, { weekday: 'long' }).format(dt));
            return weekdays;
        }, []);
        if (weekStartsOn > 0 && weekStartsOn <= 6) {
            const newStart = weekdays.splice(weekStartsOn);
            weekdays = [...newStart, ...weekdays];
        }
        return weekdays;
    }
    getMonths() {
        function getMonth(month) {
            const dt = new Date();
            return dt.setMonth(month, 1);
        }
        return [
            getMonth(0),
            getMonth(1),
            getMonth(2),
            getMonth(3),
            getMonth(4),
            getMonth(5),
            getMonth(6),
            getMonth(7),
            getMonth(8),
            getMonth(9),
            getMonth(10),
            getMonth(11),
        ].reduce((months, dt) => {
            months.push(new Intl.DateTimeFormat(this.userLocale, { month: 'long' }).format(dt));
            return months;
        }, []);
    }
    getProperty(value) {
        return this[value];
    }
    getRangeText(page, pageSize, length, short) {
        if (length === 0 || pageSize === 0) {
            return `Displaying 0 of ${length}`;
        }
        length = Math.max(length, 0);
        const startIndex = page * pageSize;
        // If the start index exceeds the list length, do not try and fix the end index to the end.
        const endIndex = startIndex < length ? Math.min(startIndex + pageSize, length) : startIndex + pageSize;
        return short ? `${startIndex + 1} - ${endIndex}/${length}` : `Displaying ${startIndex + 1} - ${endIndex} of ${length}`;
    }
    formatCurrency(value) {
        const options = { style: 'currency', currency: 'USD' };
        return new Intl.NumberFormat(this.userLocale, options).format(value);
    }
    formatBigDecimal(value) {
        let valueAsString = value ? value.toString() : '0';
        // truncate at two decimals (do not round)
        const decimalIndex = valueAsString.indexOf('.');
        if (decimalIndex > -1 && decimalIndex + 3 < valueAsString.length) {
            valueAsString = valueAsString.substring(0, valueAsString.indexOf('.') + 3);
        }
        // convert back to number
        const truncatedValue = Number(valueAsString);
        const options = { style: 'decimal', minimumFractionDigits: 2, maximumFractionDigits: 2 };
        let _value = new Intl.NumberFormat(this.userLocale, options).format(truncatedValue);
        if (value < 0) {
            _value = `(${_value.slice(1)})`;
        }
        return _value;
    }
    formatNumber(value, options) {
        return new Intl.NumberFormat(this.userLocale, options).format(value);
    }
    formatDateShort(value) {
        const options = {
            // DD/MM/YYYY, HH:MM A - 02/14/2017, 1:17 PM
            month: '2-digit',
            day: '2-digit',
            year: 'numeric',
            hour: 'numeric',
            minute: '2-digit',
        };
        const _value = value === null || value === undefined || value === '' ? new Date() : new Date(value);
        return new Intl.DateTimeFormat(this.userLocale, options).format(_value);
    }
    formatTime(value) {
        const options = {
            // HH:MM A - 1:17 PM
            hour: 'numeric',
            minute: '2-digit',
        };
        const _value = value === null || value === undefined || value === '' ? new Date() : new Date(value);
        return new Intl.DateTimeFormat(this.userLocale, options).format(_value);
    }
    formatDate(value) {
        const options = {
            // DD/MM/YYYY - 02/14/2017
            month: '2-digit',
            day: '2-digit',
            year: 'numeric',
        };
        const _value = value === null || value === undefined || value === '' ? new Date() : new Date(value);
        return new Intl.DateTimeFormat(this.userLocale, options).format(_value);
    }
}
NovoLabelService.ɵfac = function NovoLabelService_Factory(t) { return new (t || NovoLabelService)(ɵɵinject(LOCALE_ID, 8)); };
NovoLabelService.ɵprov = ɵɵdefineInjectable({ token: NovoLabelService, factory: NovoLabelService.ɵfac });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoLabelService, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [LOCALE_ID]
            }] }]; }, null); })();
const NOVO_ELEMENTS_LABELS_PROVIDERS = [{ provide: NovoLabelService, useClass: NovoLabelService }];

/**
 * @description This is the actual list of matches that gets injected into the DOM. It's also the piece that can be
 * overwritten if custom list options are needed.
 */
class BasePickerResults {
    constructor(element, ref) {
        this._term = '';
        this.selected = [];
        this.matches = [];
        this.hasError = false;
        this.isLoading = false;
        this.isStatic = true;
        this.page = 0;
        this.lastPage = false;
        this.autoSelectFirstOption = true;
        this.optionsFunctionHasChanged = false;
        this.selectingMatches = false;
        this.element = element;
        this.ref = ref;
        this.scrollHandler = this.onScrollDown.bind(this);
    }
    cleanUp() {
        const element = this.getListElement();
        if (element && element.hasAttribute('scrollListener')) {
            element.removeAttribute('scrollListener');
            element.removeEventListener('scroll', this.scrollHandler);
        }
    }
    onScrollDown(event) {
        const element = event.target;
        if (element) {
            const offset = element.offsetHeight + element.scrollTop;
            const bottom = element.scrollHeight - 300;
            if (offset >= bottom) {
                event.stopPropagation();
                if (!this.lastPage && !this.isLoading) {
                    this.processSearch();
                }
            }
        }
    }
    get term() {
        return this._term;
    }
    set term(value) {
        if (this.shouldSearch(value)) {
            this._term = value;
            this.page = 0;
            this.optionsFunctionHasChanged = false;
            this.matches = [];
            this.processSearch(true);
        }
        else {
            this.addScrollListener();
        }
    }
    set config(value) {
        if (this.config && this.config.options !== value.options) {
            this.optionsFunctionHasChanged = true; // reset page so that new options call is used to search
        }
        this._config = value;
    }
    get config() {
        return this._config;
    }
    shouldSearch(value) {
        const termHasChanged = value !== this._term;
        const optionsNotYetCalled = this.page === 0;
        return termHasChanged || optionsNotYetCalled || this.optionsFunctionHasChanged;
    }
    addScrollListener() {
        if (this.config.enableInfiniteScroll) {
            const element = this.getListElement();
            if (element && !element.hasAttribute('scrollListener')) {
                element.setAttribute('scrollListener', 'true');
                element.addEventListener('scroll', this.scrollHandler);
            }
        }
    }
    processSearch(shouldReset) {
        this.hasError = false;
        this.isLoading = true;
        this.ref.markForCheck();
        this.search(this.term).subscribe((results) => {
            if (shouldReset) {
                this.matches = [];
            }
            if (this.isStatic) {
                this.matches = this.filterData(results);
            }
            else {
                this.matches = this.matches.concat(results);
                this.lastPage = results && !results.length;
            }
            if (this.matches.length > 0 && this.autoSelectFirstOption && !this.selectingMatches) {
                this.nextActiveMatch();
            }
            this.isLoading = false;
            this.ref.markForCheck();
            setTimeout(() => {
                this.overlay.updatePosition();
                this.addScrollListener();
            }); // @bkimball: This was added for Dylan Schulte, 9.18.2017 4:14PM EST, you're welcome!
        }, (err) => {
            this.hasError = this.term && this.term.length !== 0;
            this.isLoading = false;
            this.lastPage = true;
            if (this.term && this.term.length !== 0) {
                console.error(err); // tslint:disable-lineno
            }
            this.ref.markForCheck();
        });
    }
    search(term, mode) {
        const options = this.config.options;
        return from(new Promise((resolve, reject) => {
            // Check if there is match data
            if (options) {
                // Resolve the data
                if (Array.isArray(options)) {
                    this.isStatic = true;
                    // Arrays are returned immediately
                    resolve(this.structureArray(options));
                }
                else if (this.shouldCallOptionsFunction(term)) {
                    if ((options.hasOwnProperty('reject') && options.hasOwnProperty('resolve')) ||
                        Object.getPrototypeOf(options).hasOwnProperty('then')) {
                        this.isStatic = false;
                        // Promises (ES6 or Deferred) are resolved whenever they resolve
                        options.then(this.structureArray.bind(this)).then(resolve, reject);
                    }
                    else if (typeof options === 'function') {
                        this.isStatic = false;
                        // Promises (ES6 or Deferred) are resolved whenever they resolve
                        options(term, ++this.page)
                            .then(this.structureArray.bind(this))
                            .then(resolve, reject);
                    }
                    else {
                        // All other kinds of data are rejected
                        reject('The data provided is not an array or a promise');
                        throw new Error('The data provided is not an array or a promise');
                    }
                }
                else {
                    if (this.config.defaultOptions) {
                        this.isStatic = false;
                        if (typeof this.config.defaultOptions === 'function') {
                            const defaultOptions = this.config.defaultOptions(term, ++this.page);
                            if (Object.getPrototypeOf(defaultOptions).hasOwnProperty('then')) {
                                defaultOptions.then(this.structureArray.bind(this)).then(resolve, reject);
                            }
                            else {
                                resolve(this.structureArray(defaultOptions));
                            }
                        }
                        else {
                            resolve(this.structureArray(this.config.defaultOptions));
                        }
                    }
                    else {
                        // No search term gets rejected
                        reject('No search term');
                    }
                }
            }
            else {
                // No data gets rejected
                reject('error');
            }
        }));
    }
    shouldCallOptionsFunction(term) {
        if (this.config && 'minSearchLength' in this.config && Number.isInteger(this.config.minSearchLength)) {
            return typeof term === 'string' && term.length >= this.config.minSearchLength;
        }
        else {
            return !!(term && term.length);
        }
    }
    /**
     * @param collection - the data once getData resolves it
     *
     * @description This function structures an array of nodes into an array of objects with a
     * 'name' field by default.
     */
    structureArray(collection) {
        const dataArray = collection.data ? collection.data : collection;
        if (dataArray && (typeof dataArray[0] === 'string' || typeof dataArray[0] === 'number')) {
            return collection.map((item) => {
                return {
                    value: item,
                    label: item,
                };
            });
        }
        return dataArray.map((data) => {
            let value = this.config.field ? data[this.config.field] : data.value || data;
            if (this.config.valueFormat) {
                value = Helpers.interpolate(this.config.valueFormat, data);
            }
            const label = this.config.format ? Helpers.interpolate(this.config.format, data) : data.label || String(value);
            return { value, label, data };
        });
    }
    /**
     * @param matches - Collection of objects=
     *
     * @description This function loops through the picker options and creates a filtered list of objects that contain
     * the newSearch.
     */
    filterData(matches) {
        if (this.term && matches) {
            return matches.filter((match) => {
                return ~String(match.label).toLowerCase().indexOf(this.term.toLowerCase());
            });
        }
        // Show no recent results template
        return matches;
    }
    /**
     * @description This function is called when the user presses the enter key to call the selectMatch method.
     */
    selectActiveMatch() {
        this.selectMatch();
    }
    /**
     * @description This function sets activeMatch to the match before the current node.
     */
    prevActiveMatch() {
        const index = this.matches.indexOf(this.activeMatch);
        this.activeMatch = this.matches[index - 1 < 0 ? this.matches.length - 1 : index - 1];
        this.scrollToActive();
        this.ref.markForCheck();
    }
    /**
     * @description This function sets activeMatch to the match after the current node.
     */
    nextActiveMatch() {
        const index = this.matches.indexOf(this.activeMatch);
        this.activeMatch = this.matches[index + 1 > this.matches.length - 1 ? 0 : index + 1];
        this.scrollToActive();
        this.ref.markForCheck();
    }
    getListElement() {
        return this.element.nativeElement;
    }
    getChildrenOfListElement() {
        let children = [];
        if (this.getListElement()) {
            children = this.getListElement().children;
        }
        return children;
    }
    scrollToActive() {
        const list = this.getListElement();
        const items = this.getChildrenOfListElement();
        const index = this.matches.indexOf(this.activeMatch);
        const item = items[index];
        if (item) {
            list.scrollTop = item.offsetTop;
        }
    }
    /**
     * @description
     */
    selectActive(match) {
        this.activeMatch = match;
    }
    /**
     * @description
     */
    isActive(match) {
        return this.activeMatch === match;
    }
    /**
     * @description
     */
    selectMatch(event, item) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        const selected = this.activeMatch;
        if (selected && this.parent) {
            this.parent.value = selected;
            this.selectingMatches = true;
            if (this.parent.closeOnSelect) {
                this.parent.hideResults();
                this.selectingMatches = false;
            }
        }
        this.ref.markForCheck();
        return false;
    }
    /**
     * @description This function captures the whole query string and replace it with the string that will be used to
     * match.
     */
    escapeRegexp(queryToEscape) {
        // Ex: if the capture is "a" the result will be \a
        return queryToEscape.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
    }
    /**
     * @description This function should return a <strong>-tag wrapped HTML string.
     */
    highlight(match, query) {
        // Replaces the capture string with a the same string inside of a "strong" tag
        return query ? match.replace(new RegExp(this.escapeRegexp(query.trim()), 'gi'), '<strong>$&</strong>') : match;
    }
    preselected(match) {
        let selected = this.selected;
        if (this.config && this.config.selected) {
            selected = [...this.selected, ...this.config.selected];
        }
        if (this.config && this.config.preselected) {
            const preselectedFunc = this.config.preselected;
            return (selected.findIndex((item) => {
                return preselectedFunc(match, item);
            }) !== -1);
        }
        return (selected.findIndex((item) => {
            let isPreselected = false;
            if (item && item.value && match && match.value) {
                if (item.value.id && match.value.id) {
                    isPreselected = item.value.id === match.value.id;
                }
                else if (item.value instanceof Object && item.value.hasOwnProperty('value')) {
                    isPreselected = item.value.value === match.value;
                }
                else {
                    isPreselected = item.value === match.value;
                }
            }
            return isPreselected;
        }) !== -1);
    }
}
BasePickerResults.ɵfac = function BasePickerResults_Factory(t) { return new (t || BasePickerResults)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ChangeDetectorRef)); };
BasePickerResults.ɵdir = ɵɵdefineDirective({ type: BasePickerResults, inputs: { matches: "matches" } });
/*@__PURE__*/ (function () { ɵsetClassMetadata(BasePickerResults, [{
        type: Directive
    }], function () { return [{ type: ElementRef }, { type: ChangeDetectorRef }]; }, { matches: [{
            type: Input
        }] }); })();

// NG2
const _c0$2 = ["*"];
function NovoItemAvatarElement_i_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 1);
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵproperty("ngClass", ctx_r0.classMap);
} }
const _c1 = [[["item-avatar"]], [["item-title"]], [["item-header-end"]]];
const _c2 = ["item-avatar", "item-title", "item-header-end"];
const _c3 = function (a0) { return { avatar: a0 }; };
function NovoListItemElement_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 1);
    ɵɵprojection(1, 2);
    ɵɵprojection(2, 3);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵproperty("ngClass", ɵɵpureFunction1(1, _c3, ctx_r0.avatar));
} }
const _c4 = ["*", [["item-end"]], [["item-header"]], [["item-content"]]];
const _c5 = ["*", "item-end", "item-header", "item-content"];
class NovoListElement {
    constructor(element) {
        this.element = element;
    }
}
NovoListElement.ɵfac = function NovoListElement_Factory(t) { return new (t || NovoListElement)(ɵɵdirectiveInject(ElementRef)); };
NovoListElement.ɵcmp = ɵɵdefineComponent({ type: NovoListElement, selectors: [["novo-list"]], hostVars: 5, hostBindings: function NovoListElement_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵattribute("theme", ctx.theme);
        ɵɵclassProp("vertical-list", ctx.direction === "vertical")("horizontal-list", ctx.direction === "horizontal");
    } }, inputs: { theme: "theme", direction: "direction" }, ngContentSelectors: _c0$2, decls: 1, vars: 0, template: function NovoListElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoListElement, [{
        type: Component,
        args: [{
                selector: 'novo-list',
                host: {
                    '[class.vertical-list]': 'direction === "vertical"',
                    '[class.horizontal-list]': 'direction === "horizontal"',
                    '[attr.theme]': 'theme',
                },
                template: ` <ng-content></ng-content> `,
            }]
    }], function () { return [{ type: ElementRef }]; }, { theme: [{
            type: Input
        }], direction: [{
            type: Input
        }] }); })();
class NovoItemAvatarElement {
    ngOnChanges(changes) {
        this.iconClass = this.icon ? `bhi-${this.icon}` : null;
        this.classMap = [this.iconClass, this.icon];
    }
    ngOnInit() {
        this.ngOnChanges();
    }
}
NovoItemAvatarElement.ɵfac = function NovoItemAvatarElement_Factory(t) { return new (t || NovoItemAvatarElement)(); };
NovoItemAvatarElement.ɵcmp = ɵɵdefineComponent({ type: NovoItemAvatarElement, selectors: [["item-avatar"]], inputs: { icon: "icon" }, features: [ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [["theme", "contained", 3, "ngClass", 4, "ngIf"], ["theme", "contained", 3, "ngClass"]], template: function NovoItemAvatarElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵtemplate(0, NovoItemAvatarElement_i_0_Template, 1, 1, "i", 0);
    } if (rf & 2) {
        ɵɵproperty("ngIf", ctx.iconClass);
    } }, directives: [NgIf, NgClass], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoItemAvatarElement, [{
        type: Component,
        args: [{
                selector: 'item-avatar',
                template: ` <i *ngIf="iconClass" [ngClass]="classMap" theme="contained"></i> `,
            }]
    }], null, { icon: [{
            type: Input
        }] }); })();
class NovoItemTitleElement {
}
NovoItemTitleElement.ɵfac = function NovoItemTitleElement_Factory(t) { return new (t || NovoItemTitleElement)(); };
NovoItemTitleElement.ɵcmp = ɵɵdefineComponent({ type: NovoItemTitleElement, selectors: [["item-title"]], ngContentSelectors: _c0$2, decls: 2, vars: 0, template: function NovoItemTitleElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵelementStart(0, "h6");
        ɵɵprojection(1);
        ɵɵelementEnd();
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoItemTitleElement, [{
        type: Component,
        args: [{
                selector: 'item-title',
                template: ` <h6><ng-content></ng-content></h6> `,
            }]
    }], null, null); })();
class NovoItemHeaderElement {
}
NovoItemHeaderElement.ɵfac = function NovoItemHeaderElement_Factory(t) { return new (t || NovoItemHeaderElement)(); };
NovoItemHeaderElement.ɵcmp = ɵɵdefineComponent({ type: NovoItemHeaderElement, selectors: [["item-header"]], ngContentSelectors: _c2, decls: 3, vars: 0, template: function NovoItemHeaderElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef(_c1);
        ɵɵprojection(0);
        ɵɵprojection(1, 1);
        ɵɵprojection(2, 2);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoItemHeaderElement, [{
        type: Component,
        args: [{
                selector: 'item-header',
                template: `
    <ng-content select="item-avatar"></ng-content>
    <ng-content select="item-title"></ng-content>
    <ng-content select="item-header-end"></ng-content>
  `,
            }]
    }], null, null); })();
class NovoItemDateElement {
}
NovoItemDateElement.ɵfac = function NovoItemDateElement_Factory(t) { return new (t || NovoItemDateElement)(); };
NovoItemDateElement.ɵcmp = ɵɵdefineComponent({ type: NovoItemDateElement, selectors: [["item-header-end"]], ngContentSelectors: _c0$2, decls: 1, vars: 0, template: function NovoItemDateElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoItemDateElement, [{
        type: Component,
        args: [{
                selector: 'item-header-end',
                template: ` <ng-content></ng-content> `,
            }]
    }], null, null); })();
class NovoItemContentElement {
}
NovoItemContentElement.ɵfac = function NovoItemContentElement_Factory(t) { return new (t || NovoItemContentElement)(); };
NovoItemContentElement.ɵcmp = ɵɵdefineComponent({ type: NovoItemContentElement, selectors: [["item-content"]], hostVars: 4, hostBindings: function NovoItemContentElement_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵclassProp("vertical-list", ctx.direction === "vertical")("horizontal-list", ctx.direction === "horizontal");
    } }, inputs: { direction: "direction" }, ngContentSelectors: _c0$2, decls: 1, vars: 0, template: function NovoItemContentElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoItemContentElement, [{
        type: Component,
        args: [{
                selector: 'item-content',
                host: {
                    '[class.vertical-list]': 'direction === "vertical"',
                    '[class.horizontal-list]': 'direction === "horizontal"',
                },
                template: ` <ng-content></ng-content> `,
            }]
    }], null, { direction: [{
            type: Input
        }] }); })();
class NovoItemEndElement {
}
NovoItemEndElement.ɵfac = function NovoItemEndElement_Factory(t) { return new (t || NovoItemEndElement)(); };
NovoItemEndElement.ɵcmp = ɵɵdefineComponent({ type: NovoItemEndElement, selectors: [["item-end"]], ngContentSelectors: _c0$2, decls: 1, vars: 0, template: function NovoItemEndElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoItemEndElement, [{
        type: Component,
        args: [{
                selector: 'item-end',
                template: ` <ng-content></ng-content> `,
            }]
    }], null, null); })();
class NovoListItemElement {
    constructor(element) {
        this.element = element;
        this.avatar = false;
    }
    ngOnInit() {
        this.avatar = !!this.element.nativeElement.querySelector('item-avatar');
    }
}
NovoListItemElement.ɵfac = function NovoListItemElement_Factory(t) { return new (t || NovoListItemElement)(ɵɵdirectiveInject(ElementRef)); };
NovoListItemElement.ɵcmp = ɵɵdefineComponent({ type: NovoListItemElement, selectors: [["novo-list-item"], ["a", "list-item", ""], ["button", "list-item", ""]], contentQueries: function NovoListItemElement_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵɵcontentQuery(dirIndex, NovoItemContentElement, true);
        ɵɵcontentQuery(dirIndex, NovoItemHeaderElement, true);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx._content = _t.first);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx._header = _t.first);
    } }, ngContentSelectors: _c5, decls: 3, vars: 1, consts: [["class", "list-item", 3, "ngClass", 4, "ngIf"], [1, "list-item", 3, "ngClass"]], template: function NovoListItemElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef(_c4);
        ɵɵtemplate(0, NovoListItemElement_div_0_Template, 3, 3, "div", 0);
        ɵɵprojection(1);
        ɵɵprojection(2, 1);
    } if (rf & 2) {
        ɵɵproperty("ngIf", ctx._content || ctx._header);
    } }, directives: [NgIf, NgClass], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoListItemElement, [{
        type: Component,
        args: [{
                selector: 'novo-list-item, a[list-item], button[list-item]',
                template: `
    <div class="list-item" [ngClass]="{ avatar: avatar }" *ngIf="_content || _header">
      <ng-content select="item-header"></ng-content>
      <ng-content select="item-content"></ng-content>
    </div>
    <ng-content></ng-content>
    <ng-content select="item-end"></ng-content>
  `,
            }]
    }], function () { return [{ type: ElementRef }]; }, { _content: [{
            type: ContentChild,
            args: [NovoItemContentElement]
        }], _header: [{
            type: ContentChild,
            args: [NovoItemHeaderElement]
        }] }); })();

// NG2
class NovoLoadingElement {
    constructor() {
        this._small = false;
        this._large = false;
    }
    get small() {
        return this._small;
    }
    set small(value) {
        this._small = coerceBooleanProperty(value);
    }
    get large() {
        return this._large;
    }
}
NovoLoadingElement.ɵfac = function NovoLoadingElement_Factory(t) { return new (t || NovoLoadingElement)(); };
NovoLoadingElement.ɵcmp = ɵɵdefineComponent({ type: NovoLoadingElement, selectors: [["novo-loading"]], hostVars: 4, hostBindings: function NovoLoadingElement_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵclassMap(ctx.theme || "");
        ɵɵclassProp("small", ctx.small);
    } }, inputs: { theme: "theme", small: "small" }, decls: 5, vars: 0, consts: [[1, "dot"]], template: function NovoLoadingElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵelement(0, "span", 0);
        ɵɵelement(1, "span", 0);
        ɵɵelement(2, "span", 0);
        ɵɵelement(3, "span", 0);
        ɵɵelement(4, "span", 0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoLoadingElement, [{
        type: Component,
        args: [{
                selector: 'novo-loading',
                host: {
                    '[class]': 'theme || ""',
                },
                template: `
    <span class="dot"></span>
    <span class="dot"></span>
    <span class="dot"></span>
    <span class="dot"></span>
    <span class="dot"></span>
  `,
            }]
    }], null, { theme: [{
            type: Input
        }], small: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['class.small']
        }] }); })();
class NovoSpinnerElement {
    constructor() {
        this.theme = 'multicolor';
        this._small = false;
        this._large = false;
    }
    get small() {
        return this._small;
    }
    set small(value) {
        this._small = coerceBooleanProperty(value);
    }
    get large() {
        return this._large;
    }
    set large(value) {
        this._large = coerceBooleanProperty(value);
    }
    get inverse() {
        return this._inverse;
    }
    set inverse(value) {
        this._inverse = coerceBooleanProperty(value);
    }
    get hb_class() {
        return this.inverse ? 'white' : this.theme;
    }
}
NovoSpinnerElement.ɵfac = function NovoSpinnerElement_Factory(t) { return new (t || NovoSpinnerElement)(); };
NovoSpinnerElement.ɵcmp = ɵɵdefineComponent({ type: NovoSpinnerElement, selectors: [["novo-spinner"]], hostVars: 6, hostBindings: function NovoSpinnerElement_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵclassMap(ctx.hb_class);
        ɵɵclassProp("small", ctx.small)("large", ctx.large);
    } }, inputs: { theme: "theme", small: "small", large: "large", inverse: "inverse" }, decls: 12, vars: 0, consts: [[1, "dot1", "dot"], [1, "dot2", "dot"], [1, "dot3", "dot"], [1, "dot4", "dot"], [1, "dot5", "dot"], [1, "dot6", "dot"], [1, "dot7", "dot"], [1, "dot8", "dot"], [1, "dot9", "dot"], [1, "dot10", "dot"], [1, "dot11", "dot"], [1, "dot12", "dot"]], template: function NovoSpinnerElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵelement(0, "div", 0);
        ɵɵelement(1, "div", 1);
        ɵɵelement(2, "div", 2);
        ɵɵelement(3, "div", 3);
        ɵɵelement(4, "div", 4);
        ɵɵelement(5, "div", 5);
        ɵɵelement(6, "div", 6);
        ɵɵelement(7, "div", 7);
        ɵɵelement(8, "div", 8);
        ɵɵelement(9, "div", 9);
        ɵɵelement(10, "div", 10);
        ɵɵelement(11, "div", 11);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSpinnerElement, [{
        type: Component,
        args: [{
                selector: 'novo-spinner',
                template: `
    <div class="dot1 dot"></div>
    <div class="dot2 dot"></div>
    <div class="dot3 dot"></div>
    <div class="dot4 dot"></div>
    <div class="dot5 dot"></div>
    <div class="dot6 dot"></div>
    <div class="dot7 dot"></div>
    <div class="dot8 dot"></div>
    <div class="dot9 dot"></div>
    <div class="dot10 dot"></div>
    <div class="dot11 dot"></div>
    <div class="dot12 dot"></div>
  `,
            }]
    }], null, { theme: [{
            type: Input
        }], small: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['class.small']
        }], large: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['class.large']
        }], inverse: [{
            type: Input
        }], hb_class: [{
            type: HostBinding,
            args: ['class']
        }] }); })();
class NovoSkeletonDirective {
    constructor() {
        this.skeleton = true;
    }
}
NovoSkeletonDirective.ɵfac = function NovoSkeletonDirective_Factory(t) { return new (t || NovoSkeletonDirective)(); };
NovoSkeletonDirective.ɵdir = ɵɵdefineDirective({ type: NovoSkeletonDirective, selectors: [["", "skeleton", ""]], hostVars: 2, hostBindings: function NovoSkeletonDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵclassProp("skeleton", ctx.skeleton);
    } } });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSkeletonDirective, [{
        type: Directive,
        args: [{
                selector: '[skeleton]',
            }]
    }], null, { skeleton: [{
            type: HostBinding,
            args: ['class.skeleton']
        }] }); })();
class NovoLoadedDirective {
}
NovoLoadedDirective.ɵfac = function NovoLoadedDirective_Factory(t) { return new (t || NovoLoadedDirective)(); };
NovoLoadedDirective.ɵdir = ɵɵdefineDirective({ type: NovoLoadedDirective, selectors: [["", "loaded", ""]] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoLoadedDirective, [{
        type: Directive,
        args: [{
                selector: '[loaded]',
            }]
    }], null, null); })();
class NovoIsLoadingDirective {
    constructor(viewContainer) {
        this.viewContainer = viewContainer;
        this.hasView = false;
        this.skeletonViews = [];
        this.loadedViews = [];
    }
    set isLoading(condition) {
        if (!condition && !this.hasView) {
            this.destroyViews(this.loadedViews);
            this.skeletonViews = this.createViews(this.skeletonTemplates);
            this.hasView = true;
        }
        else if (condition && this.hasView) {
            this.destroyViews(this.skeletonViews);
            this.loadedViews = this.createViews(this.loadedTemplates);
            this.hasView = false;
        }
    }
    createViews(templates) {
        return templates && templates.map((v) => this.viewContainer.createEmbeddedView(v));
    }
    destroyViews(views) {
        if (views) {
            for (const view of views) {
                view.destroy();
            }
        }
    }
}
NovoIsLoadingDirective.ɵfac = function NovoIsLoadingDirective_Factory(t) { return new (t || NovoIsLoadingDirective)(ɵɵdirectiveInject(ViewContainerRef)); };
NovoIsLoadingDirective.ɵdir = ɵɵdefineDirective({ type: NovoIsLoadingDirective, selectors: [["", "isLoading", ""]], contentQueries: function NovoIsLoadingDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵɵcontentQuery(dirIndex, NovoSkeletonDirective, false, TemplateRef);
        ɵɵcontentQuery(dirIndex, NovoLoadedDirective, false, TemplateRef);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.skeletonTemplates = _t);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.loadedTemplates = _t);
    } }, inputs: { isLoading: "isLoading" } });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoIsLoadingDirective, [{
        type: Directive,
        args: [{
                selector: '[isLoading]',
            }]
    }], function () { return [{ type: ViewContainerRef }]; }, { skeletonTemplates: [{
            type: ContentChildren,
            args: [NovoSkeletonDirective, { read: TemplateRef }]
        }], loadedTemplates: [{
            type: ContentChildren,
            args: [NovoLoadedDirective, { read: TemplateRef }]
        }], isLoading: [{
            type: Input
        }] }); })();

// NG2
function EntityPickerResult_novo_list_item_0_p_6_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 19);
    ɵɵelement(1, "i", 20);
    ɵɵelement(2, "span", 3);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵproperty("innerHtml", ctx_r1.highlight(ctx_r1.match.data.companyName || (ctx_r1.match.data == null ? null : ctx_r1.match.data.clientCorporation == null ? null : ctx_r1.match.data.clientCorporation.name), ctx_r1.term), ɵɵsanitizeHtml);
} }
function EntityPickerResult_novo_list_item_0_p_7_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 21);
    ɵɵelement(1, "i", 22);
    ɵɵelement(2, "span", 3);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵproperty("innerHtml", ctx_r2.highlight(ctx_r2.match.data.clientContact.firstName + " " + ctx_r2.match.data.clientContact.lastName, ctx_r2.term), ɵɵsanitizeHtml);
} }
function EntityPickerResult_novo_list_item_0_p_8_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 23);
    ɵɵelement(1, "i", 24);
    ɵɵelement(2, "span", 3);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵproperty("innerHtml", ctx_r3.highlight(ctx_r3.match.data.candidate.firstName + " " + ctx_r3.match.data.candidate.lastName, ctx_r3.term), ɵɵsanitizeHtml);
} }
function EntityPickerResult_novo_list_item_0_p_9_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 25);
    ɵɵelement(1, "i", 26);
    ɵɵelement(2, "span", 3);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵproperty("innerHtml", ctx_r4.renderTimestamp(ctx_r4.match.data.dateBegin) + " - " + ctx_r4.renderTimestamp(ctx_r4.match.data.dateEnd), ɵɵsanitizeHtml);
} }
function EntityPickerResult_novo_list_item_0_p_10_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 25);
    ɵɵelement(1, "i", 26);
    ɵɵelement(2, "span", 3);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵproperty("innerHtml", ctx_r5.renderTimestamp(ctx_r5.match.data.startTime), ɵɵsanitizeHtml);
} }
function EntityPickerResult_novo_list_item_0_p_11_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 27);
    ɵɵelement(1, "i", 28);
    ɵɵelement(2, "span", 3);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵproperty("innerHtml", ctx_r6.renderTimeNoOffset(ctx_r6.match.data.startTime) + " - " + ctx_r6.renderTimeNoOffset(ctx_r6.match.data.endTime), ɵɵsanitizeHtml);
} }
function EntityPickerResult_novo_list_item_0_p_12_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 29);
    ɵɵelement(1, "i", 30);
    ɵɵelement(2, "span", 3);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵproperty("innerHtml", ctx_r7.highlight(ctx_r7.match.data.jobOrder.title, ctx_r7.term), ɵɵsanitizeHtml);
} }
function EntityPickerResult_novo_list_item_0_p_13_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 31);
    ɵɵelement(1, "i", 24);
    ɵɵelementStart(2, "span");
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r8 = ɵɵnextContext(2);
    ɵɵadvance(3);
    ɵɵtextInterpolate2("", ctx_r8.match.data.numAssigned, " / ", ctx_r8.match.data.openings, "");
} }
function EntityPickerResult_novo_list_item_0_p_14_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 32);
    ɵɵelement(1, "i", 33);
    ɵɵelement(2, "span", 3);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r9 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵproperty("innerHtml", ctx_r9.highlight(ctx_r9.match.data.email, ctx_r9.term), ɵɵsanitizeHtml);
} }
function EntityPickerResult_novo_list_item_0_p_15_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 34);
    ɵɵelement(1, "i", 35);
    ɵɵelement(2, "span", 3);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵproperty("innerHtml", ctx_r10.highlight(ctx_r10.match.data.phone, ctx_r10.term), ɵɵsanitizeHtml);
} }
function EntityPickerResult_novo_list_item_0_p_16_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "span", 3);
} if (rf & 2) {
    const ctx_r16 = ɵɵnextContext(3);
    ɵɵproperty("innerHtml", ctx_r16.highlight(ctx_r16.match.data.address.city, ctx_r16.term), ɵɵsanitizeHtml);
} }
function EntityPickerResult_novo_list_item_0_p_16_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵtext(1, ", ");
    ɵɵelementEnd();
} }
function EntityPickerResult_novo_list_item_0_p_16_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "span", 3);
} if (rf & 2) {
    const ctx_r18 = ɵɵnextContext(3);
    ɵɵproperty("innerHtml", ctx_r18.highlight(ctx_r18.match.data.address.state, ctx_r18.term), ɵɵsanitizeHtml);
} }
function EntityPickerResult_novo_list_item_0_p_16_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 36);
    ɵɵelement(1, "i", 37);
    ɵɵtemplate(2, EntityPickerResult_novo_list_item_0_p_16_span_2_Template, 1, 1, "span", 38);
    ɵɵtemplate(3, EntityPickerResult_novo_list_item_0_p_16_span_3_Template, 2, 0, "span", 39);
    ɵɵtemplate(4, EntityPickerResult_novo_list_item_0_p_16_span_4_Template, 1, 1, "span", 38);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r11 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵproperty("ngIf", ctx_r11.match.data.address.city);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r11.match.data.address.city && ctx_r11.match.data.address.state);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r11.match.data.address.state);
} }
function EntityPickerResult_novo_list_item_0_p_17_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 40);
    ɵɵelement(1, "i", 41);
    ɵɵelement(2, "span", 3);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵproperty("innerHtml", ctx_r12.highlight(ctx_r12.match.data.status, ctx_r12.term), ɵɵsanitizeHtml);
} }
function EntityPickerResult_novo_list_item_0_p_18_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 42);
    ɵɵelement(1, "i", 43);
    ɵɵelement(2, "span", 3);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r13 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵproperty("innerHtml", ctx_r13.highlight(ctx_r13.match.data.owner.name, ctx_r13.term), ɵɵsanitizeHtml);
} }
function EntityPickerResult_novo_list_item_0_p_19_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 44);
    ɵɵelement(1, "i", 45);
    ɵɵelement(2, "span", 3);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r14 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵproperty("innerHtml", ctx_r14.highlight(ctx_r14.match.data.primaryDepartment.name, ctx_r14.term), ɵɵsanitizeHtml);
} }
function EntityPickerResult_novo_list_item_0_p_20_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 46);
    ɵɵelement(1, "i", 47);
    ɵɵelement(2, "span", 3);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r15 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵproperty("innerHtml", ctx_r15.highlight(ctx_r15.match.data.occupation, ctx_r15.term), ɵɵsanitizeHtml);
} }
function EntityPickerResult_novo_list_item_0_Template(rf, ctx) { if (rf & 1) {
    const _r20 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-list-item", 1);
    ɵɵlistener("click", function EntityPickerResult_novo_list_item_0_Template_novo_list_item_click_0_listener() { ɵɵrestoreView(_r20); const ctx_r19 = ɵɵnextContext(); return ctx_r19.select.next(ctx_r19.match.data); });
    ɵɵelementStart(1, "item-header");
    ɵɵelement(2, "item-avatar", 2);
    ɵɵelementStart(3, "item-title");
    ɵɵelement(4, "span", 3);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementStart(5, "item-content", 4);
    ɵɵtemplate(6, EntityPickerResult_novo_list_item_0_p_6_Template, 3, 1, "p", 5);
    ɵɵtemplate(7, EntityPickerResult_novo_list_item_0_p_7_Template, 3, 1, "p", 6);
    ɵɵtemplate(8, EntityPickerResult_novo_list_item_0_p_8_Template, 3, 1, "p", 7);
    ɵɵtemplate(9, EntityPickerResult_novo_list_item_0_p_9_Template, 3, 1, "p", 8);
    ɵɵtemplate(10, EntityPickerResult_novo_list_item_0_p_10_Template, 3, 1, "p", 8);
    ɵɵtemplate(11, EntityPickerResult_novo_list_item_0_p_11_Template, 3, 1, "p", 9);
    ɵɵtemplate(12, EntityPickerResult_novo_list_item_0_p_12_Template, 3, 1, "p", 10);
    ɵɵtemplate(13, EntityPickerResult_novo_list_item_0_p_13_Template, 4, 2, "p", 11);
    ɵɵtemplate(14, EntityPickerResult_novo_list_item_0_p_14_Template, 3, 1, "p", 12);
    ɵɵtemplate(15, EntityPickerResult_novo_list_item_0_p_15_Template, 3, 1, "p", 13);
    ɵɵtemplate(16, EntityPickerResult_novo_list_item_0_p_16_Template, 5, 3, "p", 14);
    ɵɵtemplate(17, EntityPickerResult_novo_list_item_0_p_17_Template, 3, 1, "p", 15);
    ɵɵtemplate(18, EntityPickerResult_novo_list_item_0_p_18_Template, 3, 1, "p", 16);
    ɵɵtemplate(19, EntityPickerResult_novo_list_item_0_p_19_Template, 3, 1, "p", 17);
    ɵɵtemplate(20, EntityPickerResult_novo_list_item_0_p_20_Template, 3, 1, "p", 18);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵproperty("icon", ctx_r0.getIconForResult(ctx_r0.match.data));
    ɵɵadvance(2);
    ɵɵproperty("innerHtml", ctx_r0.highlight(ctx_r0.getNameForResult(ctx_r0.match.data), ctx_r0.term), ɵɵsanitizeHtml);
    ɵɵadvance(2);
    ɵɵproperty("ngIf", ctx_r0.match.data.companyName || (ctx_r0.match.data == null ? null : ctx_r0.match.data.clientCorporation == null ? null : ctx_r0.match.data.clientCorporation.name));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.match.data == null ? null : ctx_r0.match.data.clientContact == null ? null : ctx_r0.match.data.clientContact.firstName);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.match.data.candidate && ctx_r0.match.data.searchEntity === "Placement");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.match.data.dateBegin && ctx_r0.match.data.searchEntity === "Placement");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.match.data.startTime && ctx_r0.match.data.searchEntity === "JobShift");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.match.data.startTime && ctx_r0.match.data.searchEntity === "JobShift");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.match.data.jobOrder && ctx_r0.match.data.searchEntity === "JobShift");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.match.data.openings && ctx_r0.match.data.searchEntity === "JobShift");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.match.data.email);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.match.data.phone);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.match.data.address && (ctx_r0.match.data.address.city || ctx_r0.match.data.address.state));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.match.data.status);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.match.data.owner && ctx_r0.match.data.owner.name && ctx_r0.match.data.searchEntity === "Candidate");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.match.data.primaryDepartment && ctx_r0.match.data.primaryDepartment.name && ctx_r0.match.data.searchEntity === "CorporateUser");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.match.data.occupation && ctx_r0.match.data.searchEntity === "CorporateUser");
} }
const _c0$3 = function (a0) { return { active: a0 }; };
function EntityPickerResults_novo_list_0_entity_picker_result_1_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "entity-picker-result", 6);
    ɵɵlistener("mousedown", function EntityPickerResults_novo_list_0_entity_picker_result_1_Template_entity_picker_result_mousedown_0_listener($event) { ɵɵrestoreView(_r8); const match_r6 = ctx.$implicit; const ctx_r7 = ɵɵnextContext(2); return ctx_r7.selectMatch($event, match_r6); })("mouseenter", function EntityPickerResults_novo_list_0_entity_picker_result_1_Template_entity_picker_result_mouseenter_0_listener() { ɵɵrestoreView(_r8); const match_r6 = ctx.$implicit; const ctx_r9 = ɵɵnextContext(2); return ctx_r9.selectActive(match_r6); });
    ɵɵelementEnd();
} if (rf & 2) {
    const match_r6 = ctx.$implicit;
    const ctx_r4 = ɵɵnextContext(2);
    ɵɵclassProp("disabled", ctx_r4.preselected(match_r6));
    ɵɵproperty("match", match_r6)("term", ctx_r4.term)("ngClass", ɵɵpureFunction1(5, _c0$3, ctx_r4.isActive(match_r6)));
} }
function EntityPickerResults_novo_list_0_novo_loading_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-loading", 7);
} }
function EntityPickerResults_novo_list_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-list", 3);
    ɵɵtemplate(1, EntityPickerResults_novo_list_0_entity_picker_result_1_Template, 1, 7, "entity-picker-result", 4);
    ɵɵtemplate(2, EntityPickerResults_novo_list_0_novo_loading_2_Template, 1, 0, "novo-loading", 5);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r0.matches);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.isLoading && ctx_r0.matches.length > 0);
} }
function EntityPickerResults_p_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 8);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r1.labels.pickerError);
} }
function EntityPickerResults_p_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 9);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r2.labels.pickerEmpty);
} }
function EntityPickerResults_p_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 9);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r3.labels.pickerTextFieldEmpty);
} }
class EntityPickerResult {
    constructor(labels) {
        this.labels = labels;
        this.select = new EventEmitter();
    }
    /**
     * @description This function captures the whole query string and replace it with the string that will be used to
     * match.
     */
    escapeRegexp(queryToEscape) {
        // Ex: if the capture is "a" the result will be \a
        return queryToEscape.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
    }
    /**
     * @description This function should return a <strong>-tag wrapped HTML string.
     */
    highlight(match, query) {
        // Replaces the capture string with a the same string inside of a "strong" tag
        return query && match ? match.replace(new RegExp(this.escapeRegexp(query.trim()), 'gi'), '<strong>$&</strong>') : match;
    }
    getIconForResult(result) {
        if (result) {
            switch (result.searchEntity) {
                case 'ClientContact':
                    return 'person contact';
                case 'ClientCorporation':
                    return 'company';
                case 'Opportunity':
                    return 'opportunity';
                case 'Candidate':
                    return 'candidate';
                case 'Lead':
                    return 'lead';
                case 'JobOrder':
                    return 'job';
                case 'Placement':
                    return 'star placement';
                case 'CorporateUser':
                    return 'user';
                case 'CorporationDepartment':
                    return 'department';
                case 'JobShift':
                    return 'timetable contract';
                default:
                    return '';
            }
        }
        return '';
    }
    renderTimestamp(date) {
        let timestamp = '';
        if (date) {
            timestamp = this.labels.formatDateWithFormat(date, { year: 'numeric', month: 'numeric', day: 'numeric' });
        }
        return timestamp;
    }
    renderTime(dateStr) {
        let timestamp = '';
        if (dateStr) {
            timestamp = this.labels.formatTime(new Date(dateStr));
        }
        return timestamp;
    }
    renderTimeNoOffset(dateStr) {
        let timestamp = '';
        if (dateStr) {
            dateStr = dateStr.slice(0, 19);
            timestamp = this.labels.formatTime(dateStr);
        }
        return timestamp;
    }
    getNameForResult(result) {
        var _a, _b, _c;
        if (result) {
            switch (result.searchEntity) {
                case 'Lead':
                case 'CorporateUser':
                case 'ClientContact':
                case 'Candidate':
                case 'Person':
                    if ('firstName' in result) {
                        return `${result.firstName} ${result.lastName}`.trim();
                    }
                    return `${result.name || ''}`.trim();
                case 'ClientCorporation':
                    return `${result.name || ''}`.trim();
                case 'Opportunity':
                case 'JobOrder':
                    return `${result.id} | ${result.title || ''}`.trim();
                case 'Placement':
                    let label = `${result.id}`;
                    if (result.candidate || result.jobOrder) {
                        if (result.candidate && result.jobOrder) {
                            label = `${label} | ${result.candidate.firstName} ${result.candidate.lastName} - ${result.jobOrder.title}`.trim();
                        }
                        else if (result.jobOrder) {
                            label = `${label} | ${result.jobOrder.title}`.trim();
                        }
                        else {
                            label = `${label} | ${result.candidate.firstName} ${result.candidate.lastName}`.trim();
                        }
                    }
                    return label;
                case 'JobShift':
                    return `${(_a = result.jobOrder) === null || _a === void 0 ? void 0 : _a.title} @ ${((_c = (_b = result.jobOrder) === null || _b === void 0 ? void 0 : _b.clientCorporation) === null || _c === void 0 ? void 0 : _c.name) || ''}`.trim();
                default:
                    return `${result.name || ''}`.trim();
            }
        }
        return '';
    }
}
EntityPickerResult.ɵfac = function EntityPickerResult_Factory(t) { return new (t || EntityPickerResult)(ɵɵdirectiveInject(NovoLabelService)); };
EntityPickerResult.ɵcmp = ɵɵdefineComponent({ type: EntityPickerResult, selectors: [["entity-picker-result"]], inputs: { match: "match", term: "term" }, outputs: { select: "select" }, decls: 1, vars: 1, consts: [[3, "click", 4, "ngIf"], [3, "click"], [3, "icon"], [3, "innerHtml"], ["direction", "horizontal"], ["class", "company", 4, "ngIf"], ["class", "contact", 4, "ngIf"], ["class", "candidate", 4, "ngIf"], ["class", "start-date", 4, "ngIf"], ["class", "start-time", 4, "ngIf"], ["class", "job", 4, "ngIf"], ["class", "openings", 4, "ngIf"], ["class", "email", 4, "ngIf"], ["class", "phone", 4, "ngIf"], ["class", "location", 4, "ngIf"], ["class", "status", 4, "ngIf"], ["class", "owner", 4, "ngIf"], ["class", "primary-department", 4, "ngIf"], ["class", "occupation", 4, "ngIf"], [1, "company"], [1, "bhi-company"], [1, "contact"], [1, "bhi-person", "contact", "person"], [1, "candidate"], [1, "bhi-candidate"], [1, "start-date"], [1, "bhi-calendar"], [1, "start-time"], [1, "bhi-clock"], [1, "job"], [1, "bhi-job"], [1, "openings"], [1, "email"], [1, "bhi-email"], [1, "phone"], [1, "bhi-phone"], [1, "location"], [1, "bhi-location"], [3, "innerHtml", 4, "ngIf"], [4, "ngIf"], [1, "status"], [1, "bhi-info"], [1, "owner"], [1, "bhi-person"], [1, "primary-department"], [1, "bhi-department"], [1, "occupation"], [1, "bhi-occupation"]], template: function EntityPickerResult_Template(rf, ctx) { if (rf & 1) {
        ɵɵtemplate(0, EntityPickerResult_novo_list_item_0_Template, 21, 17, "novo-list-item", 0);
    } if (rf & 2) {
        ɵɵproperty("ngIf", ctx.match.data);
    } }, directives: [NgIf, NovoListItemElement, NovoItemHeaderElement, NovoItemAvatarElement, NovoItemTitleElement, NovoItemContentElement], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(EntityPickerResult, [{
        type: Component,
        args: [{
                selector: 'entity-picker-result',
                template: `
    <novo-list-item *ngIf="match.data" (click)="select.next(match.data)">
      <item-header>
        <item-avatar [icon]="getIconForResult(match.data)"></item-avatar>
        <item-title> <span [innerHtml]="highlight(getNameForResult(match.data), term)"></span> </item-title>
      </item-header>
      <item-content direction="horizontal">
        <!-- COMPANY 1 -->
        <p class="company" *ngIf="match.data.companyName || match.data?.clientCorporation?.name">
          <i class="bhi-company"></i>
          <span [innerHtml]="highlight(match.data.companyName || match.data?.clientCorporation?.name, term)"></span>
        </p>
        <!-- CLIENT CONTACT -->
        <p class="contact" *ngIf="match.data?.clientContact?.firstName">
          <i class="bhi-person contact person"></i>
          <span [innerHtml]="highlight(match.data.clientContact.firstName + ' ' + match.data.clientContact.lastName, term)"></span>
        </p>
        <!-- CANDIDATE -->
        <p class="candidate" *ngIf="match.data.candidate && match.data.searchEntity === 'Placement'">
          <i class="bhi-candidate"></i>
          <span [innerHtml]="highlight(match.data.candidate.firstName + ' ' + match.data.candidate.lastName, term)"></span>
        </p>
        <!-- START & END DATE -->
        <p class="start-date" *ngIf="match.data.dateBegin && match.data.searchEntity === 'Placement'">
          <i class="bhi-calendar"></i>
          <span [innerHtml]="renderTimestamp(match.data.dateBegin) + ' - ' + renderTimestamp(match.data.dateEnd)"></span>
        </p>
        <!-- START Date -->
        <p class="start-date" *ngIf="match.data.startTime && match.data.searchEntity === 'JobShift'">
          <i class="bhi-calendar"></i>
          <span [innerHtml]="renderTimestamp(match.data.startTime)"></span>
        </p>
        <!-- START & END TIME -->
        <p class="start-time" *ngIf="match.data.startTime && match.data.searchEntity === 'JobShift'">
          <i class="bhi-clock"></i>
          <span [innerHtml]="renderTimeNoOffset(match.data.startTime) + ' - ' + renderTimeNoOffset(match.data.endTime)"></span>
        </p>
        <!-- JOBORDER -->
        <p class="job" *ngIf="match.data.jobOrder && match.data.searchEntity === 'JobShift'">
          <i class="bhi-job"></i>
          <span [innerHtml]="highlight(match.data.jobOrder.title, term)"></span>
        </p>
        <!-- OPENINGS -->
        <p class="openings" *ngIf="match.data.openings && match.data.searchEntity === 'JobShift'">
          <i class="bhi-candidate"></i>
          <span>{{ match.data.numAssigned }} / {{ match.data.openings }}</span>
        </p>
        <!-- EMAIL -->
        <p class="email" *ngIf="match.data.email">
          <i class="bhi-email"></i> <span [innerHtml]="highlight(match.data.email, term)"></span>
        </p>
        <!-- PHONE -->
        <p class="phone" *ngIf="match.data.phone">
          <i class="bhi-phone"></i> <span [innerHtml]="highlight(match.data.phone, term)"></span>
        </p>
        <!-- ADDRESS -->
        <p class="location" *ngIf="match.data.address && (match.data.address.city || match.data.address.state)">
          <i class="bhi-location"></i> <span *ngIf="match.data.address.city" [innerHtml]="highlight(match.data.address.city, term)"></span>
          <span *ngIf="match.data.address.city && match.data.address.state">, </span>
          <span *ngIf="match.data.address.state" [innerHtml]="highlight(match.data.address.state, term)"></span>
        </p>
        <!-- STATUS -->
        <p class="status" *ngIf="match.data.status">
          <i class="bhi-info"></i> <span [innerHtml]="highlight(match.data.status, term)"></span>
        </p>
        <!-- OWNER -->
        <p class="owner" *ngIf="match.data.owner && match.data.owner.name && match.data.searchEntity === 'Candidate'">
          <i class="bhi-person"></i> <span [innerHtml]="highlight(match.data.owner.name, term)"></span>
        </p>
        <!-- PRIMARY DEPARTMENT -->
        <p
          class="primary-department"
          *ngIf="match.data.primaryDepartment && match.data.primaryDepartment.name && match.data.searchEntity === 'CorporateUser'"
        >
          <i class="bhi-department"></i> <span [innerHtml]="highlight(match.data.primaryDepartment.name, term)"></span>
        </p>
        <!-- OCCUPATION -->
        <p class="occupation" *ngIf="match.data.occupation && match.data.searchEntity === 'CorporateUser'">
          <i class="bhi-occupation"></i> <span [innerHtml]="highlight(match.data.occupation, term)"></span>
        </p>
      </item-content>
    </novo-list-item>
  `,
            }]
    }], function () { return [{ type: NovoLabelService }]; }, { match: [{
            type: Input
        }], term: [{
            type: Input
        }], select: [{
            type: Output
        }] }); })();
class EntityPickerResults extends BasePickerResults {
    constructor(element, labels, ref) {
        super(element, ref);
        this.labels = labels;
        this.select = new EventEmitter();
    }
    get hasNonErrorMessage() {
        return !this.isLoading && !this.matches.length && !this.hasError;
    }
    getListElement() {
        return this.element.nativeElement.querySelector('novo-list');
    }
    selectMatch(event, item) {
        this.select.next(item);
        return super.selectMatch(event, item);
    }
}
EntityPickerResults.ɵfac = function EntityPickerResults_Factory(t) { return new (t || EntityPickerResults)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(ChangeDetectorRef)); };
EntityPickerResults.ɵcmp = ɵɵdefineComponent({ type: EntityPickerResults, selectors: [["entity-picker-results"]], outputs: { select: "select" }, features: [ɵɵInheritDefinitionFeature], decls: 4, vars: 4, consts: [["direction", "vertical", 4, "ngIf"], ["class", "picker-error", 4, "ngIf"], ["class", "picker-null-results", 4, "ngIf"], ["direction", "vertical"], [3, "match", "term", "ngClass", "disabled", "mousedown", "mouseenter", 4, "ngFor", "ngForOf"], ["theme", "line", 4, "ngIf"], [3, "match", "term", "ngClass", "mousedown", "mouseenter"], ["theme", "line"], [1, "picker-error"], [1, "picker-null-results"]], template: function EntityPickerResults_Template(rf, ctx) { if (rf & 1) {
        ɵɵtemplate(0, EntityPickerResults_novo_list_0_Template, 3, 2, "novo-list", 0);
        ɵɵtemplate(1, EntityPickerResults_p_1_Template, 2, 1, "p", 1);
        ɵɵtemplate(2, EntityPickerResults_p_2_Template, 2, 1, "p", 2);
        ɵɵtemplate(3, EntityPickerResults_p_3_Template, 2, 1, "p", 2);
    } if (rf & 2) {
        ɵɵproperty("ngIf", ctx.matches.length > 0);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.hasError);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.hasNonErrorMessage && ctx.term !== "");
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.hasNonErrorMessage && ctx.term === "");
    } }, directives: [NgIf, NovoListElement, NgForOf, EntityPickerResult, NgClass, NovoLoadingElement], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(EntityPickerResults, [{
        type: Component,
        args: [{
                selector: 'entity-picker-results',
                template: `
    <novo-list *ngIf="matches.length > 0" direction="vertical">
      <entity-picker-result
        *ngFor="let match of matches"
        [match]="match"
        [term]="term"
        [ngClass]="{ active: isActive(match) }"
        (mousedown)="selectMatch($event, match)"
        (mouseenter)="selectActive(match)"
        [class.disabled]="preselected(match)"
      >
      </entity-picker-result>
      <novo-loading theme="line" *ngIf="isLoading && matches.length > 0"></novo-loading>
    </novo-list>
    <p class="picker-error" *ngIf="hasError">{{ labels.pickerError }}</p>
    <p class="picker-null-results" *ngIf="hasNonErrorMessage && term !== ''">{{ labels.pickerEmpty }}</p>
    <p class="picker-null-results" *ngIf="hasNonErrorMessage && term === ''">{{ labels.pickerTextFieldEmpty }}</p>
  `,
            }]
    }], function () { return [{ type: ElementRef }, { type: NovoLabelService }, { type: ChangeDetectorRef }]; }, { select: [{
            type: Output
        }] }); })();

// App
class OptionsService {
    constructor() { }
    getOptionsConfig(http, field, config) {
        return {
            field: 'value',
            format: '$label',
            options: (query) => {
                return new Promise((resolve, reject) => {
                    if (query && query.length) {
                        const exp = new RegExp('^(?:[a-z]+:)?//', 'i');
                        let endpoint;
                        if (exp.test(field.optionsUrl)) {
                            const url = new URL(field.optionsUrl);
                            url.searchParams.set('filter', query || '');
                            endpoint = url.toString();
                        }
                        else {
                            // Construct relative url (host will not be used but is required for construction)
                            const url = new URL(`http://placeholder.com/${field.optionsUrl}`);
                            url.searchParams.set('filter', query || '');
                            endpoint = `${url.pathname}${url.search}`;
                        }
                        http.get(endpoint).subscribe(resolve, reject);
                    }
                    else {
                        resolve([]);
                    }
                });
            },
        };
    }
}
OptionsService.ɵfac = function OptionsService_Factory(t) { return new (t || OptionsService)(); };
OptionsService.ɵprov = ɵɵdefineInjectable({ token: OptionsService, factory: OptionsService.ɵfac });
/*@__PURE__*/ (function () { ɵsetClassMetadata(OptionsService, [{
        type: Injectable
    }], function () { return []; }, null); })();

// NG
class FormUtils {
    constructor(labels, optionsService) {
        this.labels = labels;
        this.optionsService = optionsService;
        this.ASSOCIATED_ENTITY_LIST = [
            'Candidate',
            'ClientContact',
            'ClientCorporation',
            'CorporationDepartment',
            'Lead',
            'Opportunity',
            'JobOrder',
            'CorporateUser',
            'Person',
            'Placement',
            'JobShift',
        ];
        this.ENTITY_PICKER_LIST = [
            'Candidate',
            'CandidateText',
            'Client',
            'ClientText',
            'ClientContact',
            'ClientContactText',
            'ClientCorporation',
            'ClientCorporationText',
            'Lead',
            'LeadText',
            'Opportunity',
            'OpportunityText',
            'JobOrder',
            'JobOrderText',
            'CorporateUser',
            'CorporateUserText',
            'Person',
            'PersonText',
            'Placement',
            'JobShift',
        ];
    }
    toFormGroup(controls) {
        const group = {};
        controls.forEach((control) => {
            const value = Helpers.isBlank(control.value) ? '' : control.value;
            group[control.key] = new NovoFormControl(value, control);
        });
        return new NovoFormGroup(group);
    }
    emptyFormGroup() {
        return new NovoFormGroup({});
    }
    addControls(formGroup, controls) {
        controls.forEach((control) => {
            const value = Helpers.isBlank(control.value) ? '' : control.value;
            const formControl = new NovoFormControl(value, control);
            formGroup.addControl(control.key, formControl);
        });
    }
    removeControls(formGroup, controls) {
        controls.forEach((control) => {
            formGroup.removeControl(control.key);
        });
    }
    toFormGroupFromFieldset(fieldsets) {
        const controls = [];
        fieldsets.forEach((fieldset) => {
            controls.push(...fieldset.controls);
        });
        return this.toFormGroup(controls);
    }
    hasAssociatedEntity(field) {
        return !!(field.associatedEntity && ~this.ASSOCIATED_ENTITY_LIST.indexOf(field.associatedEntity.entity));
    }
    determineInputType(field) {
        let type;
        const dataSpecializationTypeMap = {
            DATETIME: 'datetime',
            TIME: 'time',
            MONEY: 'currency',
            PERCENTAGE: 'percentage',
            HTML: 'editor',
            'HTML-MINIMAL': 'editor-minimal',
            YEAR: 'year',
            WORKFLOW_OPTIONS: 'select',
            SPECIALIZED_OPTIONS: 'select',
            WorkflowOptionsLookup: 'select',
            SpecializedOptionsLookup: 'select',
            SimplifiedOptionsLookup: 'select',
        };
        const dataTypeToTypeMap = {
            Timestamp: 'date',
            Date: 'date',
            Boolean: 'tiles',
        };
        const inputTypeToTypeMap = {
            CHECKBOX: 'radio',
            RADIO: 'radio',
            SELECT: 'select',
            TILES: 'tiles',
        };
        const inputTypeMultiToTypeMap = {
            CHECKBOX: 'checklist',
            RADIO: 'checklist',
            SELECT: 'chips',
        };
        const typeToTypeMap = {
            file: 'file',
            COMPOSITE: 'address',
        };
        const numberDataTypeToTypeMap = {
            Double: 'float',
            BigDecimal: 'float',
            Integer: 'number',
        };
        if (field.type === 'TO_MANY') {
            if (this.hasAssociatedEntity(field)) {
                if (field.multiValue === false) {
                    type = 'entitypicker';
                }
                else {
                    type = 'entitychips';
                }
            }
            else {
                if (field.multiValue === false) {
                    type = 'picker';
                }
                else {
                    type = 'chips';
                }
            }
        }
        else if (field.type === 'TO_ONE') {
            if ('SYSTEM' === field.dataSpecialization && ['WorkflowOptionsLookup', 'SpecializedOptionsLookup'].includes(field.dataType)) {
                type = dataSpecializationTypeMap[field.dataType];
            }
            else if (['WORKFLOW_OPTIONS', 'SPECIALIZED_OPTIONS'].includes(field.dataSpecialization)) {
                type = dataSpecializationTypeMap[field.dataSpecialization];
            }
            else if (['SimplifiedOptionsLookup', 'SpecializedOptionsLookup'].includes(field.dataType)) {
                if (field.options && Object.keys(inputTypeToTypeMap).indexOf(field.inputType) > -1 && !field.multiValue) {
                    type = inputTypeToTypeMap[field.inputType];
                }
                else if (field.options && Object.keys(inputTypeMultiToTypeMap).indexOf(field.inputType) > -1 && field.multiValue) {
                    type = inputTypeMultiToTypeMap[field.inputType];
                }
                else {
                    type = dataSpecializationTypeMap[field.dataType];
                }
            }
            else if (this.hasAssociatedEntity(field)) {
                type = 'entitypicker'; // TODO!
            }
            else {
                type = 'picker';
            }
        }
        else if (field.optionsUrl && field.inputType === 'SELECT') {
            if (field.optionsType && ~this.ENTITY_PICKER_LIST.indexOf(field.optionsType)) {
                type = 'entitypicker'; // TODO!
            }
            else {
                type = 'picker';
            }
        }
        else if (Object.keys(dataSpecializationTypeMap).indexOf(field.dataSpecialization) > -1) {
            type = dataSpecializationTypeMap[field.dataSpecialization];
        }
        else if (Object.keys(dataTypeToTypeMap).indexOf(field.dataType) > -1) {
            type = dataTypeToTypeMap[field.dataType];
        }
        else if (field.inputType === 'TEXTAREA') {
            type = 'textarea';
        }
        else if (field.options && Object.keys(inputTypeToTypeMap).indexOf(field.inputType) > -1 && !field.multiValue) {
            type = inputTypeToTypeMap[field.inputType];
        }
        else if (field.options && Object.keys(inputTypeMultiToTypeMap).indexOf(field.inputType) > -1 && field.multiValue) {
            type = inputTypeMultiToTypeMap[field.inputType];
        }
        else if (Object.keys(typeToTypeMap).indexOf(field.type) > -1) {
            type = typeToTypeMap[field.type];
        }
        else if (Object.keys(numberDataTypeToTypeMap).indexOf(field.dataType) > -1) {
            type = numberDataTypeToTypeMap[field.dataType];
        } /* else {
                throw new Error('FormUtils: This field type is unsupported.');
            }*/
        return type;
    }
    isFieldEncrypted(key) {
        return key.indexOf('customEncrypted') > -1;
    }
    getControlForField(field, http, config, overrides, forTable = false, fieldData) {
        // TODO: if field.type overrides `determineInputType` we should use it in that method or use this method
        // TODO: (cont.) as the setter of the field argument
        let type = this.determineInputType(field) || field.type;
        let control;
        const controlConfig = {
            metaType: field.type,
            type,
            key: field.name,
            label: field.label,
            placeholder: field.hint || '',
            required: field.required || field.systemRequired,
            hidden: !field.required,
            encrypted: this.isFieldEncrypted(field.name ? field.name.toString() : ''),
            value: field.value || field.defaultValue,
            sortOrder: field.sortOrder,
            associatedEntity: field.associatedEntity,
            optionsType: field.optionsType,
            multiple: field.multiValue,
            readOnly: !!field.disabled || !!field.readOnly,
            disabled: field.disabled,
            maxlength: field.maxLength,
            interactions: field.interactions,
            dataSpecialization: field.dataSpecialization,
            dataType: field.dataType,
            description: field.description || '',
            tooltip: field.tooltip,
            tooltipPosition: field.tooltipPosition,
            customControl: field.customControl,
            template: field.template,
            customControlConfig: field.customControlConfig,
            restrictFieldInteractions: field.restrictFieldInteractions,
            validators: field.validators,
            warning: field.warning,
            config: field.config || {},
            closeOnSelect: field.closeOnSelect,
            layoutOptions: field.layoutOptions,
        };
        this.inferStartDate(controlConfig, field);
        // TODO: getControlOptions should always return the correct format
        const optionsConfig = this.getControlOptions(field, http, config, fieldData);
        if (Array.isArray(optionsConfig) && !(type === 'chips' || type === 'picker')) {
            controlConfig.options = optionsConfig;
        }
        else if (Array.isArray(optionsConfig) && (type === 'chips' || type === 'picker')) {
            controlConfig.config = {
                options: optionsConfig,
            };
        }
        else if (optionsConfig) {
            controlConfig.config = Object.assign(Object.assign({}, optionsConfig), (controlConfig && controlConfig.config));
        }
        if (type === 'year') {
            controlConfig.maxlength = 4;
        }
        // TODO: Overrides should be an iterable of all properties (potentially a private method)
        let overrideResultsTemplate;
        let overridePreviewTemplate;
        if (overrides && overrides[field.name]) {
            if (overrides[field.name].resultsTemplate) {
                overrideResultsTemplate = overrides[field.name].resultsTemplate;
                controlConfig.config.resultsTemplate = overrideResultsTemplate;
                delete overrides[field.name].resultsTemplate;
            }
            if (overrides[field.name].overridePreviewTemplate) {
                overrideResultsTemplate = overrides[field.name].overridePreviewTemplate;
                controlConfig.config.overridePreviewTemplate = overrideResultsTemplate;
                delete overrides[field.name].overridePreviewTemplate;
            }
            if (overrides[field.name].pickerCallback) {
                controlConfig.config.callback = overrides[field.name].pickerCallback;
            }
            if (overrides[field.name].type) {
                type = overrides[field.name].type;
            }
            if (overrides[field.name].columns) {
                controlConfig.config.columns = overrides[field.name].columns;
                controlConfig.closeOnSelect = true;
                delete controlConfig.label;
            }
            if (overrides[field.name].warning) {
                controlConfig.warning = overrides[field.name].warning;
            }
            Object.assign(controlConfig, overrides[field.name]);
        }
        switch (type) {
            case 'entitychips':
                // TODO: This doesn't belong in this codebase
                controlConfig.multiple = true;
                controlConfig.config.resultsTemplate = overrideResultsTemplate || EntityPickerResults;
                controlConfig.config.previewTemplate = overridePreviewTemplate || EntityPickerResult;
                // TODO: When appendToBody picker works better in table/form
                control = new PickerControl(controlConfig);
                break;
            case 'chips':
                controlConfig.multiple = true;
                // TODO: When appendToBody picker works better in table/form
                control = new PickerControl(controlConfig);
                break;
            case 'entitypicker':
                // TODO: This doesn't belong in this codebase
                controlConfig.config.resultsTemplate = overrideResultsTemplate || EntityPickerResults;
                // TODO: When appendToBody picker works better in table/form
                control = new PickerControl(controlConfig);
                break;
            case 'picker':
                // TODO: When appendToBody picker works better in table/form
                control = new PickerControl(controlConfig);
                break;
            case 'datetime':
                controlConfig.military = config ? !!config.military : false;
                controlConfig.weekStart = config && config.weekStart ? config.weekStart : 0;
                control = new DateTimeControl(controlConfig);
                break;
            case 'date':
                controlConfig.dateFormat = field.dateFormat;
                controlConfig.textMaskEnabled = field.textMaskEnabled;
                controlConfig.allowInvalidDate = field.allowInvalidDate;
                controlConfig.military = config ? !!config.military : false;
                controlConfig.weekStart = config && config.weekStart ? config.weekStart : 0;
                control = new DateControl(controlConfig);
                break;
            case 'time':
                controlConfig.military = config ? !!config.military : false;
                control = new TimeControl(controlConfig);
                break;
            case 'native-time':
            case 'native-date':
            case 'native-week':
            case 'native-year':
            case 'native-datetime-local':
            case 'native-tel':
            case 'native-email':
            case 'native-url':
            case 'native-number':
                control = new CustomControl(Object.assign(Object.assign({}, controlConfig), { template: 'native-input', type: type.replace('native-', ''), alwaysActive: true }));
                break;
            case 'timezone':
                control = new TimezoneControl(controlConfig);
                break;
            case 'currency':
            case 'money':
            case 'email':
            case 'percentage':
            case 'float':
            case 'number':
            case 'year':
                // TODO: Only types from `determineInputType` should be used in this class
                if (type === 'money') {
                    type = 'currency';
                }
                controlConfig.type = type;
                control = new TextBoxControl(controlConfig);
                break;
            case 'text':
                control = new TextBoxControl(controlConfig);
                break;
            case 'textarea':
                control = new TextAreaControl(controlConfig);
                break;
            case 'editor':
                control = new EditorControl(controlConfig);
                break;
            case 'editor-minimal':
                control = new EditorControl(controlConfig);
                control.minimal = true;
                break;
            case 'tiles':
                control = new TilesControl(controlConfig);
                break;
            case 'checkbox':
                controlConfig.checkboxLabel = field.checkboxLabel;
                control = new CheckboxControl(controlConfig);
                break;
            case 'checklist':
                control = new CheckListControl(controlConfig);
                break;
            case 'radio':
                control = new RadioControl(controlConfig);
                break;
            case 'select':
                control = new SelectControl(controlConfig);
                break;
            case 'address':
                controlConfig.required = field.required || false;
                if (Helpers.isBlank(controlConfig.config)) {
                    controlConfig.config = {};
                }
                controlConfig.config.required = field.required;
                controlConfig.config.readOnly = controlConfig.readOnly;
                if (field.fields && field.fields.length) {
                    for (const subfield of field.fields) {
                        controlConfig.config[subfield.name] = {
                            required: !!subfield.required,
                            hidden: !!subfield.readOnly,
                        };
                        if (!Helpers.isEmpty(subfield.label)) {
                            controlConfig.config[subfield.name].label = subfield.label;
                        }
                        if (!Helpers.isEmpty(subfield.maxLength)) {
                            controlConfig.config[subfield.name].maxlength = subfield.maxLength;
                        }
                        controlConfig.required = controlConfig.required || subfield.required;
                        if (subfield.defaultValue) {
                            if (Helpers.isBlank(controlConfig.value)) {
                                controlConfig.value = {};
                            }
                            controlConfig.value[subfield.name] = subfield.defaultValue;
                        }
                        else if (subfield.name === 'countryID') {
                            if (Helpers.isBlank(controlConfig.value)) {
                                controlConfig.value = {};
                            }
                            controlConfig.value[subfield.name] = 1;
                        }
                        if (subfield.name === 'state' || subfield.name === 'countryID') {
                            if (subfield.name === 'countryID') {
                                subfield.optionsType = 'Country';
                            }
                            if (!subfield.optionsUrl) {
                                subfield.optionsUrl = `options/${subfield.optionsType}`;
                            }
                            controlConfig.config[subfield.name].pickerConfig = this.getControlOptions(subfield, http, config, fieldData);
                        }
                    }
                }
                controlConfig.isEmpty = this.isAddressEmpty;
                control = new AddressControl(controlConfig);
                break;
            case 'file':
                control = new FileControl(controlConfig);
                break;
            case 'custom':
                control = new CustomControl(controlConfig);
                break;
            default:
                control = new TextBoxControl(controlConfig);
                break;
        }
        return control;
    }
    shouldCreateControl(field) {
        if (field.systemRequired) {
            field.readOnly = false;
        }
        return (field.name !== 'id' &&
            (!['SYSTEM', 'SECTION_HEADER'].includes(field.dataSpecialization) ||
                ['address', 'billingAddress', 'secondaryAddress'].includes(field.name)) &&
            !field.readOnly);
    }
    toControls(meta, currencyFormat, http, config, overrides, forTable = false) {
        const controls = [];
        if (meta && meta.fields) {
            const fields = meta.fields;
            fields.forEach((field) => {
                if (this.shouldCreateControl(field)) {
                    const control = this.getControlForField(field, http, config, overrides, forTable);
                    // Set currency format
                    if (control.subType === 'currency') {
                        control.currencyFormat = currencyFormat;
                    }
                    // Add to controls
                    controls.push(control);
                }
            });
        }
        return controls;
    }
    toTableControls(meta, currencyFormat, http, config, overrides) {
        const controls = this.toControls(meta, currencyFormat, http, config, overrides, true);
        const ret = {};
        controls.forEach((control) => {
            ret[control.key] = {
                editorType: control.__type,
                editorConfig: control.__config,
            };
        });
        return ret;
    }
    toFieldSets(meta, currencyFormat, http, config, overrides, data) {
        const fieldsets = [];
        let formFields = [];
        if (meta && meta.fields) {
            formFields = this.getFormFields(meta);
            formFields.forEach((field) => {
                if (this.isHeader(field)) {
                    if (field.enabled) {
                        this.insertHeaderToFieldsets(fieldsets, field);
                    }
                }
                else if (this.isEmbeddedField(field)) {
                    this.insertHeaderToFieldsets(fieldsets, field);
                    const embeddedFields = this.getEmbeddedFields(field);
                    embeddedFields.forEach((embeddedField) => {
                        if (this.shouldCreateControl(embeddedField)) {
                            let control = this.createControl(embeddedField, data, http, config, overrides, currencyFormat);
                            control = this.markControlAsEmbedded(control, field.dataSpecialization ? field.dataSpecialization.toLowerCase() : null);
                            fieldsets[fieldsets.length - 1].controls.push(control);
                        }
                        else if (this.isHeader(embeddedField)) {
                            this.insertHeaderToFieldsets(fieldsets, embeddedField);
                        }
                    });
                }
                else if (this.shouldCreateControl(field)) {
                    let control = this.createControl(field, data, http, config, overrides, currencyFormat);
                    if (field.inlineEmbeddedAssociatedEntityField) {
                        control = this.markControlAsEmbedded(control, 'inline_embedded');
                    }
                    if (fieldsets.length === 0) {
                        fieldsets.push({ controls: [] });
                    }
                    fieldsets[fieldsets.length - 1].controls.push(control);
                }
            });
        }
        if (fieldsets.length > 0) {
            return fieldsets;
        }
        else {
            return [
                {
                    controls: this.toControls(meta, currencyFormat, http, config),
                },
            ];
        }
    }
    isEmbeddedField(field) {
        return field.dataSpecialization && ['embedded'].includes(field.dataSpecialization.toLowerCase()) && !field.readOnly;
    }
    createControl(field, data, http, config, overrides, currencyFormat) {
        const fieldData = this.isEmbeddedFieldData(field, data) ? this.getEmbeddedFieldData(field, data) : this.getFieldData(field, data);
        const control = this.getControlForField(field, http, config, overrides, undefined, fieldData);
        // Set currency format
        if (control.subType === 'currency') {
            control.currencyFormat = currencyFormat;
        }
        return control;
    }
    isEmbeddedFieldData(field, data) {
        return data && field.name.includes('.');
    }
    getFieldData(field, data) {
        return (data && data[field.name]) || null;
    }
    getEmbeddedFieldData(field, data) {
        const [parentFieldName, fieldName] = field.name.split('.');
        return (data && data[parentFieldName] && data[parentFieldName][fieldName]) || null;
    }
    getFormFields(meta) {
        const sectionHeaders = meta.sectionHeaders
            ? meta.sectionHeaders.map((element) => {
                element.isSectionHeader = true;
                return element;
            })
            : [];
        let fields = meta.fields.map((field) => {
            if (!field.hasOwnProperty('sortOrder')) {
                field.sortOrder = Number.MAX_SAFE_INTEGER - 1;
            }
            return field;
        });
        // build list of fields that should be displayed inline but belong to associated entities
        const inlineEmbeddedAssociatedEntityFields = this.getInlineEmbeddedFields(fields);
        // remove the inline embedded fields because the associated entity fields were extracted above
        // and will be added to the regular list of fields. This prevents the fields from being added multiple times.
        fields = fields.filter((f) => !f.dataSpecialization || f.dataSpecialization.toLowerCase() !== 'inline_embedded');
        // sort fields
        return [...sectionHeaders, ...fields, ...inlineEmbeddedAssociatedEntityFields].sort(Helpers.sortByField(['sortOrder', 'name']));
    }
    getInlineEmbeddedFields(fields) {
        let inlineEmbeddedAssociatedEntityFields = [];
        fields
            .filter((f) => f.dataSpecialization && f.dataSpecialization.toLowerCase() === 'inline_embedded')
            .forEach((f) => {
            inlineEmbeddedAssociatedEntityFields = [...inlineEmbeddedAssociatedEntityFields, ...this.getAssociatedFieldsForInlineEmbedded(f)];
        });
        return inlineEmbeddedAssociatedEntityFields;
    }
    getAssociatedFieldsForInlineEmbedded(field) {
        let associatedEntityFields = [];
        associatedEntityFields = this.getEmbeddedFields(field).map((aef) => {
            aef.inlineEmbeddedAssociatedEntityField = true;
            return aef;
        });
        return associatedEntityFields;
    }
    getEmbeddedFields(subHeader) {
        return subHeader.associatedEntity.fields
            .filter((field) => field.name !== 'id')
            .map((field) => {
            if (!field.name.startsWith(`${subHeader.name}.`)) {
                field.name = `${subHeader.name}.${field.name}`;
            }
            return field;
        })
            .sort(Helpers.sortByField(['sortOrder', 'name']));
    }
    isHeader(field) {
        return (!Helpers.isBlank(field) &&
            ((field.hasOwnProperty('isSectionHeader') && field.isSectionHeader) ||
                (field.dataSpecialization && field.dataSpecialization.toLowerCase() === 'section_header')));
    }
    insertHeaderToFieldsets(fieldsets, field) {
        const constantProperties = {
            controls: [],
            isEmbedded: field.dataSpecialization && field.dataSpecialization.toLowerCase() === 'embedded',
            isInlineEmbedded: field.dataSpecialization && field.dataSpecialization.toLowerCase() === 'inline_embedded',
            key: field.name,
        };
        if (field.name && field.name.startsWith('customObject') && field.associatedEntity && field.associatedEntity.label) {
            fieldsets.push(Object.assign({ title: field.associatedEntity.label || field.label, icon: field.icon || 'bhi-card-expand' }, constantProperties));
        }
        else {
            fieldsets.push(Object.assign({ title: field.label, icon: field.icon || 'bhi-section' }, constantProperties));
        }
    }
    markControlAsEmbedded(control, dataSpecialization) {
        if (Helpers.isBlank(control.config)) {
            control.config = {};
        }
        control.config.embedded = true;
        control.isEmbedded = dataSpecialization === 'embedded';
        control.isInlineEmbedded = dataSpecialization === 'inline_embedded';
        return control;
    }
    getControlOptions(field, http, config, fieldData) {
        // TODO: The token property of config is the only property used; just pass in `token: string`
        if (field.dataType === 'Boolean' && !field.options) {
            // TODO: dataType should only be determined by `determineInputType` which doesn't ever return 'Boolean' it
            // TODO: (cont.) returns `tiles`
            return [
                { value: false, label: this.labels.no },
                { value: true, label: this.labels.yes },
            ];
        }
        else if (field.workflowOptions && fieldData) {
            return this.getWorkflowOptions(field.workflowOptions, fieldData);
        }
        else if (field.dataSpecialization === 'SPECIALIZED_OPTIONS' ||
            (field.options && ['SpecializedOptionsLookup', 'SimplifiedOptionsLookup'].includes(field.dataType))) {
            return field.options.filter((o) => !o.readOnly);
        }
        else if (field.optionsUrl) {
            return this.optionsService.getOptionsConfig(http, field, config);
        }
        else if (Array.isArray(field.options) && field.type === 'chips') {
            const options = field.options;
            return {
                field: 'value',
                format: '$label',
                options,
            };
        }
        else if (field.options) {
            return field.options;
        }
        return null;
    }
    getWorkflowOptions(workflowOptions, fieldData) {
        let currentValue;
        if (fieldData.id) {
            currentValue = { value: fieldData.id, label: fieldData.label ? fieldData.label : fieldData.id };
        }
        const currentWorkflowOption = fieldData.id ? fieldData.id : 'initial';
        const updateWorkflowOptions = workflowOptions[currentWorkflowOption] || [];
        if (currentValue && !updateWorkflowOptions.find((option) => option.value === currentValue.value)) {
            updateWorkflowOptions.unshift(currentValue);
        }
        return updateWorkflowOptions;
    }
    setInitialValues(controls, values, keepClean, keyOverride) {
        for (let i = 0; i < controls.length; i++) {
            const control = controls[i];
            const key = keyOverride ? control.key.replace(keyOverride, '') : control.key;
            let value = values[key];
            if (Helpers.isBlank(value)) {
                continue;
            }
            if (Array.isArray(value) && value.length === 0) {
                continue;
            }
            if (Array.isArray(value) && value.length > 0) {
                value = value.filter((val) => !(Object.keys(val).length === 0 && val.constructor === Object));
                if (value.length === 0) {
                    continue;
                }
            }
            if (value.data && value.data.length === 0) {
                continue;
            }
            if (Object.keys(value).length === 0 && value.constructor === Object) {
                continue;
            }
            if (control.dataType === 'Date' && typeof value === 'string' && control.optionsType !== 'skipConversion') {
                value = startOfDay(value);
            }
            control.value = value;
            // TODO: keepClean is not required, but is always used. It should default (to true?)
            control.dirty = !keepClean;
        }
    }
    setInitialValuesFieldsets(fieldsets, values, keepClean) {
        fieldsets.forEach((fieldset) => {
            this.setInitialValues(fieldset.controls, values, keepClean);
        });
    }
    forceShowAllControls(controls) {
        controls.forEach((control) => {
            control.hidden = false;
        });
    }
    forceShowAllControlsInFieldsets(fieldsets) {
        fieldsets.forEach((fieldset) => {
            fieldset.controls.forEach((control) => {
                control.hidden = false;
            });
        });
    }
    forceValidation(form) {
        Object.keys(form.controls).forEach((key) => {
            const control = form.controls[key];
            if (control.required && Helpers.isBlank(form.value[control.key])) {
                control.markAsDirty();
                control.markAsTouched();
            }
        });
    }
    isAddressEmpty(control) {
        const fieldList = ['address1', 'address2', 'city', 'state', 'zip', 'countryID'];
        let valid = true;
        if (control.value && control.config) {
            fieldList.forEach((subfield) => {
                if (((subfield !== 'countryID' &&
                    !Helpers.isEmpty(control.config[subfield]) &&
                    control.config[subfield].required &&
                    (Helpers.isBlank(control.value[subfield]) || Helpers.isEmpty(control.value[subfield]))) ||
                    (subfield === 'countryID' &&
                        !Helpers.isEmpty(control.config.countryID) &&
                        control.config.countryID.required &&
                        Helpers.isEmpty(control.value.countryName))) &&
                    !(subfield === 'state' &&
                        !Helpers.isBlank(control.value.countryName) &&
                        control.config.state.pickerConfig &&
                        control.config.state.pickerConfig.defaultOptions &&
                        control.config.state.pickerConfig.defaultOptions.length === 0)) {
                    valid = false;
                }
            });
        }
        return valid;
    }
    getStartDateFromRange(dateRange) {
        if (dateRange.minDate) {
            return parse(dateRange.minDate);
        }
        else if (dateRange.minOffset) {
            return addDays(startOfToday(), dateRange.minOffset);
        }
    }
    /**
     * Get the min start date of a Date base on field data.
     */
    getStartDate(field) {
        if (field.allowedDateRange) {
            return this.getStartDateFromRange(field.allowedDateRange);
        }
        // there is no restriction on the start date
        return null;
    }
    inferStartDate(controlConfig, field) {
        if (field.dataType === 'Date') {
            const startDate = this.getStartDate(field);
            if (startDate) {
                controlConfig.startDate = startDate;
            }
            return startDate;
        }
    }
    inflateEmbeddedProperties(data) {
        if (data) {
            Object.keys(data)
                .filter((fieldName) => fieldName.includes('.'))
                .forEach((field) => {
                const [parentFieldName, fieldName] = field.split('.');
                if (!data[parentFieldName]) {
                    data[parentFieldName] = {};
                }
                data[parentFieldName][fieldName] = data[field];
                delete data[field];
            });
        }
        return data;
    }
}
FormUtils.ɵfac = function FormUtils_Factory(t) { return new (t || FormUtils)(ɵɵinject(NovoLabelService), ɵɵinject(OptionsService)); };
FormUtils.ɵprov = ɵɵdefineInjectable({ token: FormUtils, factory: FormUtils.ɵfac });
/*@__PURE__*/ (function () { ɵsetClassMetadata(FormUtils, [{
        type: Injectable
    }], function () { return [{ type: NovoLabelService }, { type: OptionsService }]; }, null); })();

// Helper to keep track of key codes
const KeyCodes = {
    BACKSPACE: 8,
    TAB: 9,
    NUM_CENTER: 12,
    ENTER: 13,
    RETURN: 13,
    SHIFT: 16,
    CTRL: 17,
    ALT: 18,
    PAUSE: 19,
    CAPS_LOCK: 20,
    ESC: 27,
    SPACE: 32,
    PAGE_UP: 33,
    PAGE_DOWN: 34,
    HASH_SYMBOL: 35,
    HOME: 36,
    LEFT: 37,
    UP: 38,
    RIGHT: 39,
    DOWN: 40,
    PRINT_SCREEN: 44,
    INSERT: 45,
    DELETE: 46,
    ZERO: 48,
    ONE: 49,
    TWO: 50,
    THREE: 51,
    FOUR: 52,
    FIVE: 53,
    SIX: 54,
    SEVEN: 55,
    EIGHT: 56,
    NINE: 57,
    AT_SYMBOL: 64,
    A: 65,
    B: 66,
    C: 67,
    D: 68,
    E: 69,
    F: 70,
    G: 71,
    H: 72,
    I: 73,
    J: 74,
    K: 75,
    L: 76,
    M: 77,
    N: 78,
    O: 79,
    P: 80,
    Q: 81,
    R: 82,
    S: 83,
    T: 84,
    U: 85,
    V: 86,
    W: 87,
    X: 88,
    Y: 89,
    Z: 90,
    CONTEXT_MENU: 93,
    NUM_ZERO: 96,
    NUM_ONE: 97,
    NUM_TWO: 98,
    NUM_THREE: 99,
    NUM_FOUR: 100,
    NUM_FIVE: 101,
    NUM_SIX: 102,
    NUM_SEVEN: 103,
    NUM_EIGHT: 104,
    NUM_NINE: 105,
    NUM_MULTIPLY: 106,
    NUM_PLUS: 107,
    NUM_MINUS: 109,
    NUM_PERIOD: 110,
    NUM_DIVISION: 111,
    F1: 112,
    F2: 113,
    F3: 114,
    F4: 115,
    F5: 116,
    F6: 117,
    F7: 118,
    F8: 119,
    F9: 120,
    F10: 121,
    F11: 122,
    F12: 123,
    DASH: 189,
    PERIOD: 190,
    FORWARD_SLASH: 191,
};

// NG2
/**
 * Outside click helper, makes to set the element as inactive when clicking outside of it
 */
class OutsideClick {
    constructor(element) {
        this.active = false;
        this.onActiveChange = new EventEmitter();
        // Component element
        this.element = element;
        // Outside click handler
        // Property because `this.func.bind(this)` returns a new function each time
        this.onOutsideClick = this.handleOutsideClick.bind(this);
    }
    /**
     * When the element is destroyed, make sure to remove the handler
     */
    ngOnDestroy() {
        window.removeEventListener('click', this.onOutsideClick);
    }
    /**
     * Toggles the element as active and adds/removes the outside click handler
     */
    toggleActive(event, forceValue) {
        // Reverse the active property (if forceValue, use that)
        this.active = !Helpers.isBlank(forceValue) ? forceValue : !this.active;
        // Bind window click events to hide on outside click
        if (this.active) {
            window.addEventListener('click', this.onOutsideClick);
        }
        else {
            window.removeEventListener('click', this.onOutsideClick);
        }
        // Fire the active change event
        this.onActiveChange.emit(this.active);
    }
    /**
     * When clicking outside, checks the element and closes if outside
     */
    handleOutsideClick(event) {
        // If the elements doesn't contain the target element, it is an outside click
        let outsideClick = !this.element.nativeElement.contains(event.target);
        if (this.otherElement && outsideClick) {
            outsideClick = !this.otherElement.nativeElement.contains(event.target);
        }
        if (outsideClick) {
            this.toggleActive(event, false);
        }
    }
}
OutsideClick.ɵfac = function OutsideClick_Factory(t) { return new (t || OutsideClick)(ɵɵinject(ElementRef)); };
OutsideClick.ɵprov = ɵɵdefineInjectable({ token: OutsideClick, factory: OutsideClick.ɵfac });
/*@__PURE__*/ (function () { ɵsetClassMetadata(OutsideClick, [{
        type: Injectable
    }], function () { return [{ type: ElementRef }]; }, null); })();

const _c0$4 = ["theme", ""];
function NovoButtonElement_i_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 4);
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵproperty("ngClass", ctx_r0.icon);
} }
function NovoButtonElement_i_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 4);
} if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵproperty("ngClass", ctx_r2.icon);
} }
function NovoButtonElement_i_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "i", 5);
    ɵɵnamespaceSVG();
    ɵɵelementStart(1, "svg", 6);
    ɵɵelementStart(2, "style", 7);
    ɵɵtext(3, " .spinner { fill: #ffffff; } ");
    ɵɵelementEnd();
    ɵɵelement(4, "path", 8);
    ɵɵelementEnd();
    ɵɵelementEnd();
} }
const _c1$1 = ["*"];
class NovoButtonElement {
    constructor(element) {
        this.element = element;
        this.side = 'right';
        this.theme = 'dialogue';
        this.disabled = false;
    }
    set icon(icon) {
        if (icon) {
            this._icon = `bhi-${icon}`;
        }
    }
    get icon() {
        return this._icon;
    }
}
NovoButtonElement.ɵfac = function NovoButtonElement_Factory(t) { return new (t || NovoButtonElement)(ɵɵdirectiveInject(ElementRef)); };
NovoButtonElement.ɵcmp = ɵɵdefineComponent({ type: NovoButtonElement, selectors: [["button", "theme", ""], ["novo-button"]], hostAttrs: [1, "novo-button"], hostVars: 8, hostBindings: function NovoButtonElement_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵattribute("theme", ctx.theme)("color", ctx.color)("icon", ctx.icon)("loading", ctx.loading)("side", ctx.side)("size", ctx.size);
        ɵɵclassProp("novo-button-disabled", ctx.disabled);
    } }, inputs: { color: "color", side: "side", size: "size", theme: "theme", loading: "loading", icon: "icon", disabled: "disabled" }, attrs: _c0$4, ngContentSelectors: _c1$1, decls: 6, vars: 3, consts: [[3, "ngClass", 4, "ngIf"], [1, "button-contents"], ["textContent", ""], ["class", "loading", 4, "ngIf"], [3, "ngClass"], [1, "loading"], ["version", "1.1", "xmlns", "http://www.w3.org/2000/svg", 0, "xmlns", "xlink", "http://www.w3.org/1999/xlink", 0, "xmlns", "a", "http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/", "x", "0px", "y", "0px", "width", "18.2px", "height", "18.5px", "viewBox", "0 0 18.2 18.5", 0, "xml", "space", "preserve", 2, "enable-background", "new 0 0 18.2 18.5"], ["type", "text/css"], ["d", "M9.2,18.5C4.1,18.5,0,14.4,0,9.2S4.1,0,9.2,0c0.9,0,1.9,0.1,2.7,0.4c0.8,0.2,1.2,1.1,1,1.9\n                        c-0.2,0.8-1.1,1.2-1.9,1C10.5,3.1,9.9,3,9.2,3C5.8,3,3,5.8,3,9.2s2.8,6.2,6.2,6.2c2.8,0,5.3-1.9,6-4.7c0.2-0.8,1-1.3,1.8-1.1\n                        c0.8,0.2,1.3,1,1.1,1.8C17.1,15.7,13.4,18.5,9.2,18.5z", 1, "spinner"]], template: function NovoButtonElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵtemplate(0, NovoButtonElement_i_0_Template, 1, 1, "i", 0);
        ɵɵelementStart(1, "span", 1, 2);
        ɵɵprojection(3);
        ɵɵelementEnd();
        ɵɵtemplate(4, NovoButtonElement_i_4_Template, 1, 1, "i", 0);
        ɵɵtemplate(5, NovoButtonElement_i_5_Template, 5, 0, "i", 3);
    } if (rf & 2) {
        ɵɵproperty("ngIf", ctx.icon && ctx.side === "left" && !ctx.loading);
        ɵɵadvance(4);
        ɵɵproperty("ngIf", ctx.icon && ctx.side === "right" && !ctx.loading);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.loading);
    } }, directives: [NgIf, NgClass], styles: ["@-webkit-keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}[_nghost-%COMP%]{-moz-user-select:none;-webkit-user-select:none;align-items:center;background:transparent;border:none;border-radius:3px;cursor:pointer;display:inline-flex;flex-direction:row;font-size:1.2rem;gap:.4rem;justify-content:center;line-height:3.2rem;overflow:hidden;padding:0 1.2rem;text-overflow:clip;text-transform:uppercase;transition:all .2s ease-in-out;user-select:none;white-space:nowrap}[_nghost-%COMP%]   .button-contents[_ngcontent-%COMP%]{color:inherit;display:contents}[_nghost-%COMP%]   .button-contents[_ngcontent-%COMP%], [_nghost-%COMP%]   i[_ngcontent-%COMP%]{font-size:inherit;line-height:inherit}[_nghost-%COMP%]   i[_ngcontent-%COMP%]:before{vertical-align:top}[size=small][_nghost-%COMP%]{font-size:1rem;line-height:2.4rem;padding:0 .8rem}[size=large][_nghost-%COMP%]{font-size:1.8rem;line-height:4rem;padding:0 1.6rem}[_nghost-%COMP%]:focus{outline:none}[_nghost-%COMP%]   .novo-button-disabled[_ngcontent-%COMP%], [disabled][_nghost-%COMP%]{cursor:not-allowed;opacity:.5;pointer-events:none}[disabled=false][_nghost-%COMP%]{cursor:pointer;opacity:1;pointer-events:auto}[loading=true][_nghost-%COMP%]{cursor:not-allowed;opacity:.5;pointer-events:none}[loading=true][_nghost-%COMP%]   i.loading[_ngcontent-%COMP%]{-webkit-animation:rotate 1.2s linear infinite;align-items:center;animation:rotate 1.2s linear infinite;display:flex;justify-content:center}[loading=true][_nghost-%COMP%]   i.loading[_ngcontent-%COMP%]   svg[_ngcontent-%COMP%]{height:100%;max-height:15px;max-width:15px;width:100%}[loading=true][_nghost-%COMP%]   i.loading[_ngcontent-%COMP%]   svg[_ngcontent-%COMP%]   .spinner[_ngcontent-%COMP%]{fill:currentColor}@keyframes rotate{0%{transform:rotate(0deg)}to{transform:rotate(1turn)}}", "@-webkit-keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}[theme=standard][_nghost-%COMP%]{background:#bebebe;color:#3d464d}[theme=standard][_nghost-%COMP%]:focus, [theme=standard][_nghost-%COMP%]:hover{box-shadow:0 3px 7px rgba(0,0,0,.15),0 1px 2px rgba(0,0,0,.15)}[theme=standard][_nghost-%COMP%]:active{box-shadow:0 1px 1px rgba(0,0,0,.05)}[theme=standard][color=positive][_nghost-%COMP%]{background:#4a89dc;color:#fff}[theme=standard][color=success][_nghost-%COMP%]{background:#8cc152;color:#fff}[theme=standard][color=negative][_nghost-%COMP%]{background:#da4453;color:#fff}[theme=standard][color=warning][_nghost-%COMP%]{background:#f6b042;color:#fff}[theme=standard][color=background][_nghost-%COMP%]{background:#f4f4f4;color:#fff}[theme=standard][color=black][_nghost-%COMP%]{background:#000;color:#fff}[theme=standard][color=white][_nghost-%COMP%]{background:#fff;color:#fff}[theme=standard][color=grey][_nghost-%COMP%]{background:#999;color:#fff}[theme=standard][color=off-white][_nghost-%COMP%]{background:#f4f4f4;color:#fff}[theme=standard][color=dark][_nghost-%COMP%]{background:#3d464d;color:#fff}[theme=standard][color=light][_nghost-%COMP%]{background:#bebebe;color:#fff}[theme=standard][color=pulse][_nghost-%COMP%]{background:#3bafda;color:#fff}[theme=standard][color=neutral][_nghost-%COMP%]{background:#4f5361;color:#fff}[theme=standard][color=empty][_nghost-%COMP%]{background:#cccdcc;color:#fff}[theme=standard][color=sand][_nghost-%COMP%]{background:#f4f4f4;color:#fff}[theme=standard][color=silver][_nghost-%COMP%]{background:#e2e2e2;color:#fff}[theme=standard][color=stone][_nghost-%COMP%]{background:#bebebe;color:#fff}[theme=standard][color=ash][_nghost-%COMP%]{background:#a0a0a0;color:#fff}[theme=standard][color=slate][_nghost-%COMP%]{background:#707070;color:#fff}[theme=standard][color=charcoal][_nghost-%COMP%]{background:#282828;color:#fff}[theme=standard][color=aqua][_nghost-%COMP%]{background:#3bafda;color:#fff}[theme=standard][color=ocean][_nghost-%COMP%]{background:#4a89dc;color:#fff}[theme=standard][color=mint][_nghost-%COMP%]{background:#37bc9b;color:#fff}[theme=standard][color=grass][_nghost-%COMP%]{background:#8cc152;color:#fff}[theme=standard][color=sunflower][_nghost-%COMP%]{background:#f6b042;color:#fff}[theme=standard][color=bittersweet][_nghost-%COMP%]{background:#eb6845;color:#fff}[theme=standard][color=grapefruit][_nghost-%COMP%]{background:#da4453;color:#fff}[theme=standard][color=carnation][_nghost-%COMP%]{background:#d770ad;color:#fff}[theme=standard][color=lavender][_nghost-%COMP%]{background:#967adc;color:#fff}[theme=standard][color=mountain][_nghost-%COMP%]{background:#9678b6;color:#fff}[theme=standard][color=background][_nghost-%COMP%], [theme=standard][color=gray][_nghost-%COMP%], [theme=standard][color=light][_nghost-%COMP%], [theme=standard][color=off-white][_nghost-%COMP%], [theme=standard][color=white][_nghost-%COMP%]{color:#3d464d}", "@-webkit-keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}[theme=primary][_nghost-%COMP%]{background:#4a89dc;color:#fff;text-align:left}[theme=primary][_nghost-%COMP%]:focus, [theme=primary][_nghost-%COMP%]:hover{background:#75a5e4}[theme=primary][_nghost-%COMP%]:active{background:#357bd8}[theme=primary][color=white][_nghost-%COMP%]{color:#4a89dc}[theme=primary][color=white][_nghost-%COMP%]:focus, [theme=primary][color=white][_nghost-%COMP%]:hover{background:#f4f4f4}[theme=primary][color=white][_nghost-%COMP%]:active{background:#e7e7e7}[theme=primary][color=white][_nghost-%COMP%]   i[_ngcontent-%COMP%]{background:rgba(0,0,0,.05)}[theme=primary][color=company][_nghost-%COMP%]{background:#39d}[theme=primary][color=company][_nghost-%COMP%]:focus, [theme=primary][color=company][_nghost-%COMP%]:hover{background:#5fafe4}[theme=primary][color=company][_nghost-%COMP%]:active{background:#238dd3}[theme=primary][color=candidate][_nghost-%COMP%]{background:#4b7}[theme=primary][color=candidate][_nghost-%COMP%]:focus, [theme=primary][color=candidate][_nghost-%COMP%]:hover{background:#69c992}[theme=primary][color=candidate][_nghost-%COMP%]:active{background:#3da86b}[theme=primary][color=navigation][_nghost-%COMP%]{background:#2f384f}[theme=primary][color=navigation][_nghost-%COMP%]:focus, [theme=primary][color=navigation][_nghost-%COMP%]:hover{background:#424f6f}[theme=primary][color=navigation][_nghost-%COMP%]:active{background:#252d3f}[theme=primary][color=lead][_nghost-%COMP%]{background:#a69}[theme=primary][color=lead][_nghost-%COMP%]:focus, [theme=primary][color=lead][_nghost-%COMP%]:hover{background:#bc87af}[theme=primary][color=lead][_nghost-%COMP%]:active{background:#9e588d}[theme=primary][color=contact][_nghost-%COMP%]{background:#fa4}[theme=primary][color=contact][_nghost-%COMP%]:focus, [theme=primary][color=contact][_nghost-%COMP%]:hover{background:#ffc177}[theme=primary][color=contact][_nghost-%COMP%]:active{background:#ff9e2b}[theme=primary][color=opportunity][_nghost-%COMP%]{background:#625}[theme=primary][color=opportunity][_nghost-%COMP%]:focus, [theme=primary][color=opportunity][_nghost-%COMP%]:hover{background:#8c2f75}[theme=primary][color=opportunity][_nghost-%COMP%]:active{background:#531c45}[theme=primary][color=job][_nghost-%COMP%]{background:#b56}[theme=primary][color=job][_nghost-%COMP%]:focus, [theme=primary][color=job][_nghost-%COMP%]:hover{background:#ca7987}[theme=primary][color=job][_nghost-%COMP%]:active{background:#b04658}[theme=primary][color=jobCode][_nghost-%COMP%]{background:#696d79}[theme=primary][color=jobCode][_nghost-%COMP%]:focus, [theme=primary][color=jobCode][_nghost-%COMP%]:hover{background:#828693}[theme=primary][color=jobCode][_nghost-%COMP%]:active{background:#5d616b}[theme=primary][color=earnCode][_nghost-%COMP%]{background:#696d79}[theme=primary][color=earnCode][_nghost-%COMP%]:focus, [theme=primary][color=earnCode][_nghost-%COMP%]:hover{background:#828693}[theme=primary][color=earnCode][_nghost-%COMP%]:active{background:#5d616b}[theme=primary][color=sendout][_nghost-%COMP%]{background:#747884}[theme=primary][color=sendout][_nghost-%COMP%]:focus, [theme=primary][color=sendout][_nghost-%COMP%]:hover{background:#8f929c}[theme=primary][color=sendout][_nghost-%COMP%]:active{background:#686c76}[theme=primary][color=placement][_nghost-%COMP%]{background:#0b344f}[theme=primary][color=placement][_nghost-%COMP%]:focus, [theme=primary][color=placement][_nghost-%COMP%]:hover{background:#11517c}[theme=primary][color=placement][_nghost-%COMP%]:active{background:#082539}[theme=primary][color=task][_nghost-%COMP%]{background:#4f5361}[theme=primary][color=task][_nghost-%COMP%]:focus, [theme=primary][color=task][_nghost-%COMP%]:hover{background:#666b7d}[theme=primary][color=task][_nghost-%COMP%]:active{background:#444753}[theme=primary][color=distributionList][_nghost-%COMP%]{background:#4f5361}[theme=primary][color=distributionList][_nghost-%COMP%]:focus, [theme=primary][color=distributionList][_nghost-%COMP%]:hover{background:#666b7d}[theme=primary][color=distributionList][_nghost-%COMP%]:active{background:#444753}[theme=primary][color=credential][_nghost-%COMP%]{background:#4f5361}[theme=primary][color=credential][_nghost-%COMP%]:focus, [theme=primary][color=credential][_nghost-%COMP%]:hover{background:#666b7d}[theme=primary][color=credential][_nghost-%COMP%]:active{background:#444753}[theme=primary][color=user][_nghost-%COMP%]{background:#4f5361}[theme=primary][color=user][_nghost-%COMP%]:focus, [theme=primary][color=user][_nghost-%COMP%]:hover{background:#666b7d}[theme=primary][color=user][_nghost-%COMP%]:active{background:#444753}[theme=primary][color=corporateuser][_nghost-%COMP%]{background:#4f5361}[theme=primary][color=corporateuser][_nghost-%COMP%]:focus, [theme=primary][color=corporateuser][_nghost-%COMP%]:hover{background:#666b7d}[theme=primary][color=corporateuser][_nghost-%COMP%]:active{background:#444753}[theme=primary][color=aqua][_nghost-%COMP%]{background:#3bafda}[theme=primary][color=aqua][_nghost-%COMP%]:focus, [theme=primary][color=aqua][_nghost-%COMP%]:hover{background:#66c1e2}[theme=primary][color=aqua][_nghost-%COMP%]:active{background:#28a5d4}[theme=primary][color=ocean][_nghost-%COMP%]{background:#4a89dc}[theme=primary][color=ocean][_nghost-%COMP%]:focus, [theme=primary][color=ocean][_nghost-%COMP%]:hover{background:#75a5e4}[theme=primary][color=ocean][_nghost-%COMP%]:active{background:#357bd8}[theme=primary][color=mint][_nghost-%COMP%]{background:#37bc9b}[theme=primary][color=mint][_nghost-%COMP%]:focus, [theme=primary][color=mint][_nghost-%COMP%]:hover{background:#58ceb1}[theme=primary][color=mint][_nghost-%COMP%]:active{background:#31a88b}[theme=primary][color=grass][_nghost-%COMP%]{background:#8cc152}[theme=primary][color=grass][_nghost-%COMP%]:focus, [theme=primary][color=grass][_nghost-%COMP%]:hover{background:#a5ce78}[theme=primary][color=grass][_nghost-%COMP%]:active{background:#7fb842}[theme=primary][color=sunflower][_nghost-%COMP%]{background:#f6b042}[theme=primary][color=sunflower][_nghost-%COMP%]:focus, [theme=primary][color=sunflower][_nghost-%COMP%]:hover{background:#f8c473}[theme=primary][color=sunflower][_nghost-%COMP%]:active{background:#f5a62a}[theme=primary][color=bittersweet][_nghost-%COMP%]{background:#eb6845}[theme=primary][color=bittersweet][_nghost-%COMP%]:focus, [theme=primary][color=bittersweet][_nghost-%COMP%]:hover{background:#f08d73}[theme=primary][color=bittersweet][_nghost-%COMP%]:active{background:#e9552e}[theme=primary][color=grapefruit][_nghost-%COMP%]{background:#da4453}[theme=primary][color=grapefruit][_nghost-%COMP%]:focus, [theme=primary][color=grapefruit][_nghost-%COMP%]:hover{background:#e26f7a}[theme=primary][color=grapefruit][_nghost-%COMP%]:active{background:#d62f3f}[theme=primary][color=carnation][_nghost-%COMP%]{background:#d770ad}[theme=primary][color=carnation][_nghost-%COMP%]:focus, [theme=primary][color=carnation][_nghost-%COMP%]:hover{background:#e298c4}[theme=primary][color=carnation][_nghost-%COMP%]:active{background:#d15ca2}[theme=primary][color=lavender][_nghost-%COMP%]{background:#967adc}[theme=primary][color=lavender][_nghost-%COMP%]:focus, [theme=primary][color=lavender][_nghost-%COMP%]:hover{background:#b6a2e7}[theme=primary][color=lavender][_nghost-%COMP%]:active{background:#8666d7}[theme=primary][color=positive][_nghost-%COMP%]{background:#4a89dc}[theme=primary][color=positive][_nghost-%COMP%]:focus, [theme=primary][color=positive][_nghost-%COMP%]:hover{background:#75a5e4}[theme=primary][color=positive][_nghost-%COMP%]:active{background:#357bd8}[theme=primary][color=success][_nghost-%COMP%]{background:#8cc152}[theme=primary][color=success][_nghost-%COMP%]:focus, [theme=primary][color=success][_nghost-%COMP%]:hover{background:#a5ce78}[theme=primary][color=success][_nghost-%COMP%]:active{background:#7fb842}[theme=primary][color=negative][_nghost-%COMP%]{background:#da4453}[theme=primary][color=negative][_nghost-%COMP%]:focus, [theme=primary][color=negative][_nghost-%COMP%]:hover{background:#e26f7a}[theme=primary][color=negative][_nghost-%COMP%]:active{background:#d62f3f}[theme=primary][color=warning][_nghost-%COMP%]{background:#f6b042}[theme=primary][color=warning][_nghost-%COMP%]:focus, [theme=primary][color=warning][_nghost-%COMP%]:hover{background:#f8c473}[theme=primary][color=warning][_nghost-%COMP%]:active{background:#f5a62a}[theme=primary][color=black][_nghost-%COMP%]{background:#000}[theme=primary][color=black][_nghost-%COMP%]:focus, [theme=primary][color=black][_nghost-%COMP%]:hover{background:#1a1a1a}[theme=primary][color=black][_nghost-%COMP%]:active{background:#000}[theme=primary][color=dark][_nghost-%COMP%]{background:#3d464d}[theme=primary][color=dark][_nghost-%COMP%]:focus, [theme=primary][color=dark][_nghost-%COMP%]:hover{background:#546069}[theme=primary][color=dark][_nghost-%COMP%]:active{background:#32393f}[theme=primary][color=pulse][_nghost-%COMP%]{background:#3bafda}[theme=primary][color=pulse][_nghost-%COMP%]:focus, [theme=primary][color=pulse][_nghost-%COMP%]:hover{background:#66c1e2}[theme=primary][color=pulse][_nghost-%COMP%]:active{background:#28a5d4}[theme=primary][color=neutral][_nghost-%COMP%]{background:#4f5361}[theme=primary][color=neutral][_nghost-%COMP%]:focus, [theme=primary][color=neutral][_nghost-%COMP%]:hover{background:#666b7d}[theme=primary][color=neutral][_nghost-%COMP%]:active{background:#444753}[theme=primary][color=navy][_nghost-%COMP%]{background:#0d2d42}[theme=primary][color=navy][_nghost-%COMP%]:focus, [theme=primary][color=navy][_nghost-%COMP%]:hover{background:#154a6d}[theme=primary][color=navy][_nghost-%COMP%]:active{background:#091e2d}[theme=primary][color=contract][_nghost-%COMP%]{background:#454ea0}[theme=primary][color=contract][_nghost-%COMP%]:focus, [theme=primary][color=contract][_nghost-%COMP%]:hover{background:#5e67ba}[theme=primary][color=contract][_nghost-%COMP%]:active{background:#3d458e}[theme=primary][color=mountain][_nghost-%COMP%]{background:#9678b6}[theme=primary][color=mountain][_nghost-%COMP%]:focus, [theme=primary][color=mountain][_nghost-%COMP%]:hover{background:#b099c8}[theme=primary][color=mountain][_nghost-%COMP%]:active{background:#8967ad}[theme=primary][color=billableCharge][_nghost-%COMP%]{background:#696d79}[theme=primary][color=billableCharge][_nghost-%COMP%]:focus, [theme=primary][color=billableCharge][_nghost-%COMP%]:hover{background:#828693}[theme=primary][color=billableCharge][_nghost-%COMP%]:active{background:#5d616b}[theme=primary][color=payableCharge][_nghost-%COMP%]{background:#696d79}[theme=primary][color=payableCharge][_nghost-%COMP%]:focus, [theme=primary][color=payableCharge][_nghost-%COMP%]:hover{background:#828693}[theme=primary][color=payableCharge][_nghost-%COMP%]:active{background:#5d616b}[theme=primary][color=invoiceStatement][_nghost-%COMP%]{background:#696d79}[theme=primary][color=invoiceStatement][_nghost-%COMP%]:focus, [theme=primary][color=invoiceStatement][_nghost-%COMP%]:hover{background:#828693}[theme=primary][color=invoiceStatement][_nghost-%COMP%]:active{background:#5d616b}[theme=primary][color=submission][_nghost-%COMP%]{background:#a9adbb}[theme=primary][color=submission][_nghost-%COMP%]:focus, [theme=primary][color=submission][_nghost-%COMP%]:hover{background:#c5c8d2}[theme=primary][color=submission][_nghost-%COMP%]:active{background:#9b9fb0}[theme=primary][color=note][_nghost-%COMP%]{background:#747884}[theme=primary][color=note][_nghost-%COMP%]:focus, [theme=primary][color=note][_nghost-%COMP%]:hover{background:#8f929c}[theme=primary][color=note][_nghost-%COMP%]:active{background:#686c76}[theme=primary][color=ash][_nghost-%COMP%]{background:#a0a0a0}[theme=primary][color=ash][_nghost-%COMP%]:focus, [theme=primary][color=ash][_nghost-%COMP%]:hover{background:#bababa}[theme=primary][color=ash][_nghost-%COMP%]:active{background:#939393}[theme=primary][color=slate][_nghost-%COMP%]{background:#707070}[theme=primary][color=slate][_nghost-%COMP%]:focus, [theme=primary][color=slate][_nghost-%COMP%]:hover{background:#8a8a8a}[theme=primary][color=slate][_nghost-%COMP%]:active{background:#636363}[theme=primary][color=charcoal][_nghost-%COMP%]{background:#282828}[theme=primary][color=charcoal][_nghost-%COMP%]:focus, [theme=primary][color=charcoal][_nghost-%COMP%]:hover{background:#424242}[theme=primary][color=charcoal][_nghost-%COMP%]:active{background:#1b1b1b}[theme=primary][color=midnight][_nghost-%COMP%]{background:#0b0f1a}[theme=primary][color=midnight][_nghost-%COMP%]:focus, [theme=primary][color=midnight][_nghost-%COMP%]:hover{background:#1a243e}[theme=primary][color=midnight][_nghost-%COMP%]:active{background:#030508}[theme=primary][color=background][_nghost-%COMP%]{background:#f4f4f4}[theme=primary][color=background][_nghost-%COMP%]:focus, [theme=primary][color=background][_nghost-%COMP%]:hover{background:#fff}[theme=primary][color=background][_nghost-%COMP%]:active{background:#e7e7e7}[theme=primary][color=background-dark][_nghost-%COMP%]{background:#e2e2e2}[theme=primary][color=background-dark][_nghost-%COMP%]:focus, [theme=primary][color=background-dark][_nghost-%COMP%]:hover{background:#fcfcfc}[theme=primary][color=background-dark][_nghost-%COMP%]:active{background:#d5d5d5}[theme=primary][color=white][_nghost-%COMP%], [theme=primary][color=white][_nghost-%COMP%]:focus, [theme=primary][color=white][_nghost-%COMP%]:hover{background:#fff}[theme=primary][color=white][_nghost-%COMP%]:active{background:#f2f2f2}[theme=primary][color=grey][_nghost-%COMP%]{background:#999}[theme=primary][color=grey][_nghost-%COMP%]:focus, [theme=primary][color=grey][_nghost-%COMP%]:hover{background:#b3b3b3}[theme=primary][color=grey][_nghost-%COMP%]:active{background:#8c8c8c}[theme=primary][color=off-white][_nghost-%COMP%]{background:#f4f4f4}[theme=primary][color=off-white][_nghost-%COMP%]:focus, [theme=primary][color=off-white][_nghost-%COMP%]:hover{background:#fff}[theme=primary][color=off-white][_nghost-%COMP%]:active{background:#e7e7e7}[theme=primary][color=light][_nghost-%COMP%]{background:#bebebe}[theme=primary][color=light][_nghost-%COMP%]:focus, [theme=primary][color=light][_nghost-%COMP%]:hover{background:#d8d8d8}[theme=primary][color=light][_nghost-%COMP%]:active{background:#b1b1b1}[theme=primary][color=empty][_nghost-%COMP%]{background:#cccdcc}[theme=primary][color=empty][_nghost-%COMP%]:focus, [theme=primary][color=empty][_nghost-%COMP%]:hover{background:#e6e6e6}[theme=primary][color=empty][_nghost-%COMP%]:active{background:#bfc0bf}[theme=primary][color=disabled][_nghost-%COMP%]{background:#bebebe}[theme=primary][color=disabled][_nghost-%COMP%]:focus, [theme=primary][color=disabled][_nghost-%COMP%]:hover{background:#d8d8d8}[theme=primary][color=disabled][_nghost-%COMP%]:active{background:#b1b1b1}[theme=primary][color=sand][_nghost-%COMP%]{background:#f4f4f4}[theme=primary][color=sand][_nghost-%COMP%]:focus, [theme=primary][color=sand][_nghost-%COMP%]:hover{background:#fff}[theme=primary][color=sand][_nghost-%COMP%]:active{background:#e7e7e7}[theme=primary][color=silver][_nghost-%COMP%]{background:#e2e2e2}[theme=primary][color=silver][_nghost-%COMP%]:focus, [theme=primary][color=silver][_nghost-%COMP%]:hover{background:#fcfcfc}[theme=primary][color=silver][_nghost-%COMP%]:active{background:#d5d5d5}[theme=primary][color=stone][_nghost-%COMP%]{background:#bebebe}[theme=primary][color=stone][_nghost-%COMP%]:focus, [theme=primary][color=stone][_nghost-%COMP%]:hover{background:#d8d8d8}[theme=primary][color=stone][_nghost-%COMP%]:active{background:#b1b1b1}", "@-webkit-keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}[theme=secondary][_nghost-%COMP%]{align-items:center;background:#fff;border:1px solid #4a89dc;color:#4a89dc;line-height:calc(3.2rem - 2px);padding:0 calc(1.2rem - 1px);text-align:left}[theme=secondary][size=small][_nghost-%COMP%]{line-height:calc(2.4rem - 2px)}[theme=secondary][size=large][_nghost-%COMP%]{line-height:calc(4rem - 2px)}[theme=secondary][color=company][_nghost-%COMP%]{border:1px solid #39d;color:#39d}[theme=secondary][color=candidate][_nghost-%COMP%]{border:1px solid #4b7;color:#4b7}[theme=secondary][color=navigation][_nghost-%COMP%]{border:1px solid #2f384f;color:#2f384f}[theme=secondary][color=lead][_nghost-%COMP%]{border:1px solid #a69;color:#a69}[theme=secondary][color=contact][_nghost-%COMP%]{border:1px solid #fa4;color:#fa4}[theme=secondary][color=opportunity][_nghost-%COMP%]{border:1px solid #625;color:#625}[theme=secondary][color=job][_nghost-%COMP%]{border:1px solid #b56;color:#b56}[theme=secondary][color=earnCode][_nghost-%COMP%], [theme=secondary][color=jobCode][_nghost-%COMP%]{border:1px solid #696d79;color:#696d79}[theme=secondary][color=sendout][_nghost-%COMP%]{border:1px solid #747884;color:#747884}[theme=secondary][color=placement][_nghost-%COMP%]{border:1px solid #0b344f;color:#0b344f}[theme=secondary][color=corporateuser][_nghost-%COMP%], [theme=secondary][color=credential][_nghost-%COMP%], [theme=secondary][color=distributionList][_nghost-%COMP%], [theme=secondary][color=task][_nghost-%COMP%], [theme=secondary][color=user][_nghost-%COMP%]{border:1px solid #4f5361;color:#4f5361}[theme=secondary][color=aqua][_nghost-%COMP%]{border:1px solid #3bafda;color:#3bafda}[theme=secondary][color=ocean][_nghost-%COMP%]{border:1px solid #4a89dc;color:#4a89dc}[theme=secondary][color=mint][_nghost-%COMP%]{border:1px solid #37bc9b;color:#37bc9b}[theme=secondary][color=grass][_nghost-%COMP%]{border:1px solid #8cc152;color:#8cc152}[theme=secondary][color=sunflower][_nghost-%COMP%]{border:1px solid #f6b042;color:#f6b042}[theme=secondary][color=bittersweet][_nghost-%COMP%]{border:1px solid #eb6845;color:#eb6845}[theme=secondary][color=grapefruit][_nghost-%COMP%]{border:1px solid #da4453;color:#da4453}[theme=secondary][color=carnation][_nghost-%COMP%]{border:1px solid #d770ad;color:#d770ad}[theme=secondary][color=lavender][_nghost-%COMP%]{border:1px solid #967adc;color:#967adc}[theme=secondary][color=positive][_nghost-%COMP%]{border:1px solid #4a89dc;color:#4a89dc}[theme=secondary][color=success][_nghost-%COMP%]{border:1px solid #8cc152;color:#8cc152}[theme=secondary][color=negative][_nghost-%COMP%]{border:1px solid #da4453;color:#da4453}[theme=secondary][color=warning][_nghost-%COMP%]{border:1px solid #f6b042;color:#f6b042}[theme=secondary][color=black][_nghost-%COMP%]{border:1px solid #000;color:#000}[theme=secondary][color=dark][_nghost-%COMP%]{border:1px solid #3d464d;color:#3d464d}[theme=secondary][color=pulse][_nghost-%COMP%]{border:1px solid #3bafda;color:#3bafda}[theme=secondary][color=neutral][_nghost-%COMP%]{border:1px solid #4f5361;color:#4f5361}[theme=secondary][color=navy][_nghost-%COMP%]{border:1px solid #0d2d42;color:#0d2d42}[theme=secondary][color=contract][_nghost-%COMP%]{border:1px solid #454ea0;color:#454ea0}[theme=secondary][color=mountain][_nghost-%COMP%]{border:1px solid #9678b6;color:#9678b6}[theme=secondary][color=billableCharge][_nghost-%COMP%], [theme=secondary][color=invoiceStatement][_nghost-%COMP%], [theme=secondary][color=payableCharge][_nghost-%COMP%]{border:1px solid #696d79;color:#696d79}[theme=secondary][color=submission][_nghost-%COMP%]{border:1px solid #a9adbb;color:#a9adbb}[theme=secondary][color=note][_nghost-%COMP%]{border:1px solid #747884;color:#747884}[theme=secondary][color=ash][_nghost-%COMP%]{border:1px solid #a0a0a0;color:#a0a0a0}[theme=secondary][color=slate][_nghost-%COMP%]{border:1px solid #707070;color:#707070}[theme=secondary][color=charcoal][_nghost-%COMP%]{border:1px solid #282828;color:#282828}[theme=secondary][color=midnight][_nghost-%COMP%]{border:1px solid #0b0f1a;color:#0b0f1a}[theme=secondary][color=background][_nghost-%COMP%]{border:1px solid #f4f4f4;color:#f4f4f4}[theme=secondary][color=background-dark][_nghost-%COMP%]{border:1px solid #e2e2e2;color:#e2e2e2}[theme=secondary][color=white][_nghost-%COMP%]{border:1px solid #fff;color:#fff}[theme=secondary][color=grey][_nghost-%COMP%]{border:1px solid #999;color:#999}[theme=secondary][color=off-white][_nghost-%COMP%]{border:1px solid #f4f4f4;color:#f4f4f4}[theme=secondary][color=light][_nghost-%COMP%]{border:1px solid #bebebe;color:#bebebe}[theme=secondary][color=empty][_nghost-%COMP%]{border:1px solid #cccdcc;color:#cccdcc}[theme=secondary][color=disabled][_nghost-%COMP%]{border:1px solid #bebebe;color:#bebebe}[theme=secondary][color=sand][_nghost-%COMP%]{border:1px solid #f4f4f4;color:#f4f4f4}[theme=secondary][color=silver][_nghost-%COMP%]{border:1px solid #e2e2e2;color:#e2e2e2}[theme=secondary][color=stone][_nghost-%COMP%]{border:1px solid #bebebe;color:#bebebe}[theme=secondary][_nghost-%COMP%]   i.loading[_ngcontent-%COMP%]{margin-left:.8rem}[theme=secondary][_nghost-%COMP%]   i.loading[_ngcontent-%COMP%]   svg[_ngcontent-%COMP%]   .spinner[_ngcontent-%COMP%]{fill:#4a89dc}[theme=secondary][_nghost-%COMP%]:focus, [theme=secondary][_nghost-%COMP%]:hover{box-shadow:0 3px 7px rgba(0,0,0,.15),0 1px 2px rgba(0,0,0,.15)}[theme=secondary][_nghost-%COMP%]:active{box-shadow:0 1px 1px rgba(0,0,0,.05)}[theme=secondary][inverse][_nghost-%COMP%]{background:rgba(0,0,0,.25);border:1px solid #fff;color:#fff}[theme=secondary][inverse][_nghost-%COMP%]:focus, [theme=secondary][inverse][_nghost-%COMP%]:hover{background:rgba(0,0,0,.35)}[theme=secondary][inverse][_nghost-%COMP%]:active{background:rgba(0,0,0,.45)}[theme=secondary][inverse][_nghost-%COMP%]   i.loading[_ngcontent-%COMP%]   svg[_ngcontent-%COMP%]   .spinner[_ngcontent-%COMP%]{fill:#fff}", "@-webkit-keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}[theme=fab][_nghost-%COMP%]{align-items:center;border-radius:50%!important;display:inline-flex;font-size:1.2rem;height:3.2rem;justify-content:center;line-height:1.6rem;padding:0;width:3.2rem}[theme=fab][inverse][_nghost-%COMP%]{color:#fff}[theme=fab][color=company][_nghost-%COMP%]{background:#39d;color:#fff}[theme=fab][color=candidate][_nghost-%COMP%]{background:#4b7;color:#fff}[theme=fab][color=navigation][_nghost-%COMP%]{background:#2f384f;color:#fff}[theme=fab][color=lead][_nghost-%COMP%]{background:#a69;color:#fff}[theme=fab][color=contact][_nghost-%COMP%]{background:#fa4;color:#fff}[theme=fab][color=opportunity][_nghost-%COMP%]{background:#625;color:#fff}[theme=fab][color=job][_nghost-%COMP%]{background:#b56;color:#fff}[theme=fab][color=earnCode][_nghost-%COMP%], [theme=fab][color=jobCode][_nghost-%COMP%]{background:#696d79;color:#fff}[theme=fab][color=sendout][_nghost-%COMP%]{background:#747884;color:#fff}[theme=fab][color=placement][_nghost-%COMP%]{background:#0b344f;color:#fff}[theme=fab][color=corporateuser][_nghost-%COMP%], [theme=fab][color=credential][_nghost-%COMP%], [theme=fab][color=distributionList][_nghost-%COMP%], [theme=fab][color=task][_nghost-%COMP%], [theme=fab][color=user][_nghost-%COMP%]{background:#4f5361;color:#fff}[theme=fab][color=aqua][_nghost-%COMP%]{background:#3bafda;color:#fff}[theme=fab][color=ocean][_nghost-%COMP%]{background:#4a89dc;color:#fff}[theme=fab][color=mint][_nghost-%COMP%]{background:#37bc9b;color:#fff}[theme=fab][color=grass][_nghost-%COMP%]{background:#8cc152;color:#fff}[theme=fab][color=sunflower][_nghost-%COMP%]{background:#f6b042;color:#fff}[theme=fab][color=bittersweet][_nghost-%COMP%]{background:#eb6845;color:#fff}[theme=fab][color=grapefruit][_nghost-%COMP%]{background:#da4453;color:#fff}[theme=fab][color=carnation][_nghost-%COMP%]{background:#d770ad;color:#fff}[theme=fab][color=lavender][_nghost-%COMP%]{background:#967adc;color:#fff}[theme=fab][color=positive][_nghost-%COMP%]{background:#4a89dc;color:#fff}[theme=fab][color=success][_nghost-%COMP%]{background:#8cc152;color:#fff}[theme=fab][color=negative][_nghost-%COMP%]{background:#da4453;color:#fff}[theme=fab][color=warning][_nghost-%COMP%]{background:#f6b042;color:#fff}[theme=fab][color=black][_nghost-%COMP%]{background:#000;color:#fff}[theme=fab][color=dark][_nghost-%COMP%]{background:#3d464d;color:#fff}[theme=fab][color=pulse][_nghost-%COMP%]{background:#3bafda;color:#fff}[theme=fab][color=neutral][_nghost-%COMP%]{background:#4f5361;color:#fff}[theme=fab][color=navy][_nghost-%COMP%]{background:#0d2d42;color:#fff}[theme=fab][color=contract][_nghost-%COMP%]{background:#454ea0;color:#fff}[theme=fab][color=mountain][_nghost-%COMP%]{background:#9678b6;color:#fff}[theme=fab][color=billableCharge][_nghost-%COMP%], [theme=fab][color=invoiceStatement][_nghost-%COMP%], [theme=fab][color=payableCharge][_nghost-%COMP%]{background:#696d79;color:#fff}[theme=fab][color=submission][_nghost-%COMP%]{background:#a9adbb;color:#fff}[theme=fab][color=note][_nghost-%COMP%]{background:#747884;color:#fff}[theme=fab][color=ash][_nghost-%COMP%]{background:#a0a0a0;color:#fff}[theme=fab][color=slate][_nghost-%COMP%]{background:#707070;color:#fff}[theme=fab][color=charcoal][_nghost-%COMP%]{background:#282828;color:#fff}[theme=fab][color=midnight][_nghost-%COMP%]{background:#0b0f1a;color:#fff}[theme=fab][color=background][_nghost-%COMP%]{background:#f4f4f4;color:#fff}[theme=fab][color=background-dark][_nghost-%COMP%]{background:#e2e2e2;color:#fff}[theme=fab][color=white][_nghost-%COMP%]{background:#fff;color:#fff}[theme=fab][color=grey][_nghost-%COMP%]{background:#999;color:#fff}[theme=fab][color=off-white][_nghost-%COMP%]{background:#f4f4f4;color:#fff}[theme=fab][color=light][_nghost-%COMP%]{background:#bebebe;color:#fff}[theme=fab][color=empty][_nghost-%COMP%]{background:#cccdcc;color:#fff}[theme=fab][color=disabled][_nghost-%COMP%]{background:#bebebe;color:#fff}[theme=fab][color=sand][_nghost-%COMP%]{background:#f4f4f4;color:#fff}[theme=fab][color=silver][_nghost-%COMP%]{background:#e2e2e2;color:#fff}[theme=fab][color=stone][_nghost-%COMP%]{background:#bebebe;color:#fff}[theme=fab][_nghost-%COMP%]:active, [theme=fab][_nghost-%COMP%]:hover{box-shadow:0 1px 2px -1px rgba(0,0,0,.2),0 1px 1px 0 rgba(0,0,0,.14),0 1px 3px 0 rgba(0,0,0,.12)}[theme=fab][_nghost-%COMP%]   i[_ngcontent-%COMP%]{margin:0;padding:0}[theme=fab][_nghost-%COMP%]   i[_ngcontent-%COMP%]:before{display:block}", "@-webkit-keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}[theme=icon][_nghost-%COMP%]{font-size:1.6rem;line-height:1.6rem;padding:.8rem}[theme=icon][inverse][_nghost-%COMP%]{color:#fff}[theme=icon][_nghost-%COMP%]   i[_ngcontent-%COMP%]{margin:0!important}[theme=icon][_nghost-%COMP%]:hover{background:rgba(0,0,0,.1)}[theme=icon][_nghost-%COMP%]:active{background:rgba(0,0,0,.25)}[theme=icon][color=company][_nghost-%COMP%]{color:#39d}[theme=icon][color=candidate][_nghost-%COMP%]{color:#4b7}[theme=icon][color=navigation][_nghost-%COMP%]{color:#2f384f}[theme=icon][color=lead][_nghost-%COMP%]{color:#a69}[theme=icon][color=contact][_nghost-%COMP%]{color:#fa4}[theme=icon][color=opportunity][_nghost-%COMP%]{color:#625}[theme=icon][color=job][_nghost-%COMP%]{color:#b56}[theme=icon][color=earnCode][_nghost-%COMP%], [theme=icon][color=jobCode][_nghost-%COMP%]{color:#696d79}[theme=icon][color=sendout][_nghost-%COMP%]{color:#747884}[theme=icon][color=placement][_nghost-%COMP%]{color:#0b344f}[theme=icon][color=corporateuser][_nghost-%COMP%], [theme=icon][color=credential][_nghost-%COMP%], [theme=icon][color=distributionList][_nghost-%COMP%], [theme=icon][color=task][_nghost-%COMP%], [theme=icon][color=user][_nghost-%COMP%]{color:#4f5361}[theme=icon][color=aqua][_nghost-%COMP%]{color:#3bafda}[theme=icon][color=ocean][_nghost-%COMP%]{color:#4a89dc}[theme=icon][color=mint][_nghost-%COMP%]{color:#37bc9b}[theme=icon][color=grass][_nghost-%COMP%]{color:#8cc152}[theme=icon][color=sunflower][_nghost-%COMP%]{color:#f6b042}[theme=icon][color=bittersweet][_nghost-%COMP%]{color:#eb6845}[theme=icon][color=grapefruit][_nghost-%COMP%]{color:#da4453}[theme=icon][color=carnation][_nghost-%COMP%]{color:#d770ad}[theme=icon][color=lavender][_nghost-%COMP%]{color:#967adc}[theme=icon][color=positive][_nghost-%COMP%]{color:#4a89dc}[theme=icon][color=success][_nghost-%COMP%]{color:#8cc152}[theme=icon][color=negative][_nghost-%COMP%]{color:#da4453}[theme=icon][color=warning][_nghost-%COMP%]{color:#f6b042}[theme=icon][color=black][_nghost-%COMP%]{color:#000}[theme=icon][color=dark][_nghost-%COMP%]{color:#3d464d}[theme=icon][color=pulse][_nghost-%COMP%]{color:#3bafda}[theme=icon][color=neutral][_nghost-%COMP%]{color:#4f5361}[theme=icon][color=navy][_nghost-%COMP%]{color:#0d2d42}[theme=icon][color=contract][_nghost-%COMP%]{color:#454ea0}[theme=icon][color=mountain][_nghost-%COMP%]{color:#9678b6}[theme=icon][color=billableCharge][_nghost-%COMP%], [theme=icon][color=invoiceStatement][_nghost-%COMP%], [theme=icon][color=payableCharge][_nghost-%COMP%]{color:#696d79}[theme=icon][color=submission][_nghost-%COMP%]{color:#a9adbb}[theme=icon][color=note][_nghost-%COMP%]{color:#747884}[theme=icon][color=ash][_nghost-%COMP%]{color:#a0a0a0}[theme=icon][color=slate][_nghost-%COMP%]{color:#707070}[theme=icon][color=charcoal][_nghost-%COMP%]{color:#282828}[theme=icon][color=midnight][_nghost-%COMP%]{color:#0b0f1a}[theme=icon][color=background][_nghost-%COMP%]{color:#f4f4f4}[theme=icon][color=background-dark][_nghost-%COMP%]{color:#e2e2e2}[theme=icon][color=white][_nghost-%COMP%]{color:#fff}[theme=icon][color=grey][_nghost-%COMP%]{color:#999}[theme=icon][color=off-white][_nghost-%COMP%]{color:#f4f4f4}[theme=icon][color=light][_nghost-%COMP%]{color:#bebebe}[theme=icon][color=empty][_nghost-%COMP%]{color:#cccdcc}[theme=icon][color=disabled][_nghost-%COMP%]{color:#bebebe}[theme=icon][color=sand][_nghost-%COMP%]{color:#f4f4f4}[theme=icon][color=silver][_nghost-%COMP%]{color:#e2e2e2}[theme=icon][color=stone][_nghost-%COMP%]{color:#bebebe}[theme=icon][size=small][_nghost-%COMP%]{font-size:1.2rem;line-height:1.2rem;padding:.8rem}[theme=icon][size=large][_nghost-%COMP%]{font-size:2rem;line-height:2rem;padding:1.2rem}", "@-webkit-keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}[theme=dialogue][_nghost-%COMP%]{background:transparent;color:#4a89dc}[theme=dialogue][_nghost-%COMP%]:focus, [theme=dialogue][_nghost-%COMP%]:hover{background:#d0d0d0}[theme=dialogue][_nghost-%COMP%]:active{background:#c3c3c3}[theme=dialogue][inverse][_nghost-%COMP%]:focus, [theme=dialogue][inverse][_nghost-%COMP%]:hover{background:rgba(0,0,0,.2)}[theme=dialogue][inverse][_nghost-%COMP%]:active{background:rgba(0,0,0,.35)}[theme=dialogue][color=positive][_nghost-%COMP%], [theme=dialogue][color=positive][_nghost-%COMP%]   i[_ngcontent-%COMP%]{color:#4a89dc}[theme=dialogue][color=success][_nghost-%COMP%], [theme=dialogue][color=success][_nghost-%COMP%]   i[_ngcontent-%COMP%]{color:#8cc152}[theme=dialogue][color=negative][_nghost-%COMP%], [theme=dialogue][color=negative][_nghost-%COMP%]   i[_ngcontent-%COMP%]{color:#da4453}[theme=dialogue][color=warning][_nghost-%COMP%], [theme=dialogue][color=warning][_nghost-%COMP%]   i[_ngcontent-%COMP%]{color:#f6b042}[theme=dialogue][color=background][_nghost-%COMP%], [theme=dialogue][color=background][_nghost-%COMP%]   i[_ngcontent-%COMP%]{color:#f4f4f4}[theme=dialogue][color=black][_nghost-%COMP%], [theme=dialogue][color=black][_nghost-%COMP%]   i[_ngcontent-%COMP%]{color:#000}[theme=dialogue][color=white][_nghost-%COMP%], [theme=dialogue][color=white][_nghost-%COMP%]   i[_ngcontent-%COMP%]{color:#fff}[theme=dialogue][color=grey][_nghost-%COMP%], [theme=dialogue][color=grey][_nghost-%COMP%]   i[_ngcontent-%COMP%]{color:#999}[theme=dialogue][color=off-white][_nghost-%COMP%], [theme=dialogue][color=off-white][_nghost-%COMP%]   i[_ngcontent-%COMP%]{color:#f4f4f4}[theme=dialogue][color=dark][_nghost-%COMP%], [theme=dialogue][color=dark][_nghost-%COMP%]   i[_ngcontent-%COMP%]{color:#3d464d}[theme=dialogue][color=light][_nghost-%COMP%], [theme=dialogue][color=light][_nghost-%COMP%]   i[_ngcontent-%COMP%]{color:#bebebe}[theme=dialogue][color=pulse][_nghost-%COMP%], [theme=dialogue][color=pulse][_nghost-%COMP%]   i[_ngcontent-%COMP%]{color:#3bafda}[theme=dialogue][color=neutral][_nghost-%COMP%], [theme=dialogue][color=neutral][_nghost-%COMP%]   i[_ngcontent-%COMP%]{color:#4f5361}[theme=dialogue][color=empty][_nghost-%COMP%], [theme=dialogue][color=empty][_nghost-%COMP%]   i[_ngcontent-%COMP%]{color:#cccdcc}[theme=dialogue][color=sand][_nghost-%COMP%], [theme=dialogue][color=sand][_nghost-%COMP%]   i[_ngcontent-%COMP%]{color:#f4f4f4}[theme=dialogue][color=silver][_nghost-%COMP%], [theme=dialogue][color=silver][_nghost-%COMP%]   i[_ngcontent-%COMP%]{color:#e2e2e2}[theme=dialogue][color=stone][_nghost-%COMP%], [theme=dialogue][color=stone][_nghost-%COMP%]   i[_ngcontent-%COMP%]{color:#bebebe}[theme=dialogue][color=ash][_nghost-%COMP%], [theme=dialogue][color=ash][_nghost-%COMP%]   i[_ngcontent-%COMP%]{color:#a0a0a0}[theme=dialogue][color=slate][_nghost-%COMP%], [theme=dialogue][color=slate][_nghost-%COMP%]   i[_ngcontent-%COMP%]{color:#707070}[theme=dialogue][color=charcoal][_nghost-%COMP%], [theme=dialogue][color=charcoal][_nghost-%COMP%]   i[_ngcontent-%COMP%]{color:#282828}[theme=dialogue][color=aqua][_nghost-%COMP%], [theme=dialogue][color=aqua][_nghost-%COMP%]   i[_ngcontent-%COMP%]{color:#3bafda}[theme=dialogue][color=ocean][_nghost-%COMP%], [theme=dialogue][color=ocean][_nghost-%COMP%]   i[_ngcontent-%COMP%]{color:#4a89dc}[theme=dialogue][color=mint][_nghost-%COMP%], [theme=dialogue][color=mint][_nghost-%COMP%]   i[_ngcontent-%COMP%]{color:#37bc9b}[theme=dialogue][color=grass][_nghost-%COMP%], [theme=dialogue][color=grass][_nghost-%COMP%]   i[_ngcontent-%COMP%]{color:#8cc152}[theme=dialogue][color=sunflower][_nghost-%COMP%], [theme=dialogue][color=sunflower][_nghost-%COMP%]   i[_ngcontent-%COMP%]{color:#f6b042}[theme=dialogue][color=bittersweet][_nghost-%COMP%], [theme=dialogue][color=bittersweet][_nghost-%COMP%]   i[_ngcontent-%COMP%]{color:#eb6845}[theme=dialogue][color=grapefruit][_nghost-%COMP%], [theme=dialogue][color=grapefruit][_nghost-%COMP%]   i[_ngcontent-%COMP%]{color:#da4453}[theme=dialogue][color=carnation][_nghost-%COMP%], [theme=dialogue][color=carnation][_nghost-%COMP%]   i[_ngcontent-%COMP%]{color:#d770ad}[theme=dialogue][color=lavender][_nghost-%COMP%], [theme=dialogue][color=lavender][_nghost-%COMP%]   i[_ngcontent-%COMP%]{color:#967adc}[theme=dialogue][color=mountain][_nghost-%COMP%], [theme=dialogue][color=mountain][_nghost-%COMP%]   i[_ngcontent-%COMP%]{color:#9678b6}", "@-webkit-keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}[theme=field][_nghost-%COMP%]{background:transparent;border:none;border-bottom:1px solid #3d464d;border-radius:0;color:#3d464d;font-size:1.2rem;line-height:1.8rem;margin-bottom:4px;padding:.4rem .8rem;text-align:left}[theme=field][_nghost-%COMP%]:active, [theme=field][_nghost-%COMP%]:focus, [theme=field][_nghost-%COMP%]:hover{border-bottom:1px solid #4a89dc}[theme=select][_nghost-%COMP%]{align-items:center;background-color:transparent;border:none;border-bottom:1px solid #afb9c0;border-radius:0;color:#3d464d;cursor:pointer;display:flex;font-size:1.2rem;height:2rem;justify-content:space-between;line-height:1.8rem;min-height:2rem;padding:0;position:relative;text-align:left;text-shadow:none;text-transform:none;width:100%;z-index:1}[theme=select].empty[_nghost-%COMP%]{color:#a9a9a9}[theme=select][_nghost-%COMP%]:focus, [theme=select][_nghost-%COMP%]:hover{outline:none}[theme=select][_nghost-%COMP%]:hover{border-bottom:1px solid #5f6d78}[theme=select][_nghost-%COMP%]:hover   i[_ngcontent-%COMP%]{opacity:.75}[theme=select][_nghost-%COMP%]:focus{border-bottom:1px solid #4a89dc}[theme=select][_nghost-%COMP%]:focus   i[_ngcontent-%COMP%]{color:rgba(0,0,0,.73)}[theme=select][_nghost-%COMP%]   i[_ngcontent-%COMP%]{color:#3d464d;font-size:.8rem;opacity:.45}"], changeDetection: 0 });
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoButtonElement.prototype, "disabled", void 0);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoButtonElement, [{
        type: Component,
        args: [{
                selector: 'button[theme],novo-button',
                host: {
                    class: 'novo-button',
                    '[attr.theme]': 'theme',
                    '[attr.color]': 'color',
                    '[attr.icon]': 'icon',
                    '[attr.loading]': 'loading',
                    '[attr.side]': 'side',
                    '[attr.size]': 'size',
                },
                styleUrls: [
                    './styles/button.scss',
                    './styles/button-standard.scss',
                    './styles/button-primary.scss',
                    './styles/button-secondary.scss',
                    './styles/button-fab.scss',
                    './styles/button-icon.scss',
                    './styles/button-dialogue.scss',
                    './styles/button-other.scss',
                ],
                template: `
    <!--Left Icon-->
    <i *ngIf="icon && side === 'left' && !loading" [ngClass]="icon"></i>
    <!--Transcluded Content-->
    <span #textContent class="button-contents"><ng-content></ng-content></span>
    <!--Right Icon-->
    <i *ngIf="icon && side === 'right' && !loading" [ngClass]="icon"></i>
    <!--Loading-->
    <i *ngIf="loading" class="loading">
      <svg
        version="1.1"
        xmlns="http://www.w3.org/2000/svg"
        xmlns:xlink="http://www.w3.org/1999/xlink"
        xmlns:a="http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/"
        x="0px"
        y="0px"
        width="18.2px"
        height="18.5px"
        viewBox="0 0 18.2 18.5"
        style="enable-background:new 0 0 18.2 18.5;"
        xml:space="preserve"
      >
        <style type="text/css">
          .spinner {
            fill: #ffffff;
          }
        </style>
        <path
          class="spinner"
          d="M9.2,18.5C4.1,18.5,0,14.4,0,9.2S4.1,0,9.2,0c0.9,0,1.9,0.1,2.7,0.4c0.8,0.2,1.2,1.1,1,1.9
                        c-0.2,0.8-1.1,1.2-1.9,1C10.5,3.1,9.9,3,9.2,3C5.8,3,3,5.8,3,9.2s2.8,6.2,6.2,6.2c2.8,0,5.3-1.9,6-4.7c0.2-0.8,1-1.3,1.8-1.1
                        c0.8,0.2,1.3,1,1.1,1.8C17.1,15.7,13.4,18.5,9.2,18.5z"
        />
      </svg>
    </i>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: ElementRef }]; }, { color: [{
            type: Input
        }], side: [{
            type: Input
        }], size: [{
            type: Input
        }], theme: [{
            type: Input
        }], loading: [{
            type: Input
        }], icon: [{
            type: Input
        }], disabled: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['class.novo-button-disabled']
        }] }); })();

// NG2
class NovoButtonModule {
}
NovoButtonModule.ɵmod = ɵɵdefineNgModule({ type: NovoButtonModule });
NovoButtonModule.ɵinj = ɵɵdefineInjector({ factory: function NovoButtonModule_Factory(t) { return new (t || NovoButtonModule)(); }, imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoButtonModule, { declarations: [NovoButtonElement], imports: [CommonModule], exports: [NovoButtonElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoButtonModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [NovoButtonElement],
                exports: [NovoButtonElement],
            }]
    }], null, null); })();

// tslint:disable: directive-selector
/*
Prop	CSS Property	Theme Field
m, margin	margin	space
mt, marginTop	margin-top	space
mr, marginRight	margin-right	space
mb, marginBottom	margin-bottom	space
ml, marginLeft	margin-left	space
mx	margin-left and margin-right	space
my	margin-top and margin-bottom	space
p, padding	padding	space
pt, paddingTop	padding-top	space
pr, paddingRight	padding-right	space
pb, paddingBottom	padding-bottom	space
pl, paddingLeft	padding-left	space
px	padding-left and padding-right	space
py	padding-top and padding-bottom	space
*/
/*
// Selectors generated with the following code
const directions = ['Top', 'Right', 'Bottom', 'Left', 'X', 'Y'];
const abbrDirections = directions.map((d) => d.slice(0, 1).toLowerCase());
const marginAttrs = [
  '[m]',
  '[margin]',
  ...directions.map((dir) => `[margin${dir}]`),
  ...abbrDirections.map((dir) => `[m${dir}]`),
];
const paddingAttrs = [
  '[p]',
  '[padding]',
  ...directions.map((dir) => `[padding${dir}]`),
  ...abbrDirections.map((dir) => `[p${dir}]`),
];

const selectors = [...marginAttrs, ...paddingAttrs];
*/
class MarginDirective {
    get hb_margin() {
        return this.margin || this.m;
    }
    get hb_margin_left() {
        return this.marginLeft || this.ml || this.mx || this.marginX;
    }
    get hb_margin_right() {
        return this.marginRight || this.mr || this.mx || this.marginX;
    }
    get hb_margin_top() {
        return this.marginTop || this.mt || this.my || this.marginY;
    }
    get hb_margin_bottom() {
        return this.marginBottom || this.mb || this.my || this.marginY;
    }
}
MarginDirective.ɵfac = function MarginDirective_Factory(t) { return new (t || MarginDirective)(); };
MarginDirective.ɵdir = ɵɵdefineDirective({ type: MarginDirective, selectors: [["", "m", ""], ["", "margin", ""], ["", "marginTop", ""], ["", "marginRight", ""], ["", "marginBottom", ""], ["", "marginLeft", ""], ["", "marginX", ""], ["", "marginY", ""], ["", "mt", ""], ["", "mr", ""], ["", "mb", ""], ["", "ml", ""], ["", "mx", ""], ["", "my", ""]], hostVars: 10, hostBindings: function MarginDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵstyleProp("margin", ctx.hb_margin)("margin-left", ctx.hb_margin_left)("margin-right", ctx.hb_margin_right)("margin-top", ctx.hb_margin_top)("margin-bottom", ctx.hb_margin_bottom);
    } }, inputs: { margin: "margin", m: "m", marginLeft: "marginLeft", ml: "ml", marginRight: "marginRight", mr: "mr", marginTop: "marginTop", mt: "mt", marginBottom: "marginBottom", mb: "mb", marginX: "marginX", mx: "mx", marginY: "marginY", my: "my" } });
/*@__PURE__*/ (function () { ɵsetClassMetadata(MarginDirective, [{
        type: Directive,
        args: [{
                // tslint:disable-next-line: max-line-length
                selector: '[m],[margin],[marginTop],[marginRight],[marginBottom],[marginLeft],[marginX],[marginY],[mt],[mr],[mb],[ml],[mx],[my]',
            }]
    }], null, { margin: [{
            type: Input
        }], m: [{
            type: Input
        }], marginLeft: [{
            type: Input
        }], ml: [{
            type: Input
        }], marginRight: [{
            type: Input
        }], mr: [{
            type: Input
        }], marginTop: [{
            type: Input
        }], mt: [{
            type: Input
        }], marginBottom: [{
            type: Input
        }], mb: [{
            type: Input
        }], marginX: [{
            type: Input
        }], mx: [{
            type: Input
        }], marginY: [{
            type: Input
        }], my: [{
            type: Input
        }], hb_margin: [{
            type: HostBinding,
            args: ['style.margin']
        }], hb_margin_left: [{
            type: HostBinding,
            args: ['style.margin-left']
        }], hb_margin_right: [{
            type: HostBinding,
            args: ['style.margin-right']
        }], hb_margin_top: [{
            type: HostBinding,
            args: ['style.margin-top']
        }], hb_margin_bottom: [{
            type: HostBinding,
            args: ['style.margin-bottom']
        }] }); })();
class PaddingDirective {
    get hb_padding() {
        return this.padding || this.p;
    }
    get hb_padding_left() {
        return this.paddingLeft || this.pl || this.px || this.paddingX;
    }
    get hb_padding_right() {
        return this.paddingRight || this.pr || this.px || this.paddingX;
    }
    get hb_padding_top() {
        return this.paddingTop || this.pt || this.py || this.paddingY;
    }
    get hb_padding_bottom() {
        return this.paddingBottom || this.pb || this.py || this.paddingY;
    }
}
PaddingDirective.ɵfac = function PaddingDirective_Factory(t) { return new (t || PaddingDirective)(); };
PaddingDirective.ɵdir = ɵɵdefineDirective({ type: PaddingDirective, selectors: [["", "p", ""], ["", "padding", ""], ["", "paddingTop", ""], ["", "paddingRight", ""], ["", "paddingBottom", ""], ["", "paddingLeft", ""], ["", "paddingX", ""], ["", "paddingY", ""], ["", "pt", ""], ["", "pr", ""], ["", "pb", ""], ["", "pl", ""], ["", "px", ""], ["", "py", ""]], hostVars: 10, hostBindings: function PaddingDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵstyleProp("padding", ctx.hb_padding)("padding-left", ctx.hb_padding_left)("padding-right", ctx.hb_padding_right)("padding-top", ctx.hb_padding_top)("padding-bottom", ctx.hb_padding_bottom);
    } }, inputs: { padding: "padding", p: "p", paddingLeft: "paddingLeft", pl: "pl", paddingRight: "paddingRight", pr: "pr", paddingTop: "paddingTop", pt: "pt", paddingBottom: "paddingBottom", pb: "pb", paddingX: "paddingX", px: "px", paddingY: "paddingY", py: "py" } });
/*@__PURE__*/ (function () { ɵsetClassMetadata(PaddingDirective, [{
        type: Directive,
        args: [{
                // tslint:disable-next-line: max-line-length
                selector: '[p],[padding],[paddingTop],[paddingRight],[paddingBottom],[paddingLeft],[paddingX],[paddingY],[pt],[pr],[pb],[pl],[px],[py]',
            }]
    }], null, { padding: [{
            type: Input
        }], p: [{
            type: Input
        }], paddingLeft: [{
            type: Input
        }], pl: [{
            type: Input
        }], paddingRight: [{
            type: Input
        }], pr: [{
            type: Input
        }], paddingTop: [{
            type: Input
        }], pt: [{
            type: Input
        }], paddingBottom: [{
            type: Input
        }], pb: [{
            type: Input
        }], paddingX: [{
            type: Input
        }], px: [{
            type: Input
        }], paddingY: [{
            type: Input
        }], py: [{
            type: Input
        }], hb_padding: [{
            type: HostBinding,
            args: ['style.padding']
        }], hb_padding_left: [{
            type: HostBinding,
            args: ['style.padding-left']
        }], hb_padding_right: [{
            type: HostBinding,
            args: ['style.padding-right']
        }], hb_padding_top: [{
            type: HostBinding,
            args: ['style.padding-top']
        }], hb_padding_bottom: [{
            type: HostBinding,
            args: ['style.padding-bottom']
        }] }); })();

class NovoTemplate {
    constructor(template) {
        this.template = template;
    }
    getType() {
        return this.name;
    }
}
NovoTemplate.ɵfac = function NovoTemplate_Factory(t) { return new (t || NovoTemplate)(ɵɵdirectiveInject(TemplateRef)); };
NovoTemplate.ɵdir = ɵɵdefineDirective({ type: NovoTemplate, selectors: [["", "novoTemplate", ""]], inputs: { type: "type", name: ["novoTemplate", "name"] } });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTemplate, [{
        type: Directive,
        args: [{
                selector: '[novoTemplate]',
            }]
    }], function () { return [{ type: TemplateRef }]; }, { type: [{
            type: Input
        }], name: [{
            type: Input,
            args: ['novoTemplate']
        }] }); })();

/**
 * Component that shows a simplified checkbox without including any kind of "real" checkbox.
 * Meant to be used when the checkbox is purely decorative and a large number of them will be
 * included, such as for the options in a multi-select. Uses no SVGs or complex animations.
 * Note that theming is meant to be handled by the parent element, e.g.
 * `novo-primary .novo-pseudo-checkbox`.
 *
 * Note that this component will be completely invisible to screen-reader users. This is *not*
 * interchangeable with `<novo-checkbox>` and should *not* be used if the user would directly
 * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail
 * of more complex components that appropriately handle selected / checked state.
 * @docs-private
 */
class NovoPseudoCheckbox {
    constructor(_animationMode) {
        this._animationMode = _animationMode;
        /** Display state of the checkbox. */
        this.state = 'unchecked';
        /** Display state of the checkbox. */
        this.shape = 'box';
        /** Whether the checkbox is disabled. */
        this.disabled = false;
    }
}
NovoPseudoCheckbox.ɵfac = function NovoPseudoCheckbox_Factory(t) { return new (t || NovoPseudoCheckbox)(ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };
NovoPseudoCheckbox.ɵcmp = ɵɵdefineComponent({ type: NovoPseudoCheckbox, selectors: [["novo-pseudo-checkbox"]], hostAttrs: [1, "novo-pseudo-checkbox"], hostVars: 8, hostBindings: function NovoPseudoCheckbox_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵclassProp("novo-pseudo-checkbox-indeterminate", ctx.state === "indeterminate")("novo-pseudo-checkbox-checked", ctx.state === "checked")("novo-pseudo-checkbox-disabled", ctx.disabled)("_novo-animation-noopable", ctx._animationMode === "NoopAnimations");
    } }, inputs: { state: "state", shape: "shape", disabled: "disabled" }, decls: 1, vars: 18, template: function NovoPseudoCheckbox_Template(rf, ctx) { if (rf & 1) {
        ɵɵelement(0, "i");
    } if (rf & 2) {
        ɵɵclassProp("bhi-checkbox-empty", ctx.state === "unchecked" && ctx.shape === "box")("bhi-checkbox-filled", ctx.state === "checked" && ctx.shape === "box")("bhi-checkbox-indeterminate", ctx.state === "indeterminate" && ctx.shape === "box")("bhi-circle-o", ctx.state === "unchecked" && ctx.shape === "circle")("bhi-check-circle-filled", ctx.state === "checked" && ctx.shape === "circle")("bhi-circle", ctx.state === "indeterminate" && ctx.shape === "circle")("bhi-box-empty", ctx.state === "unchecked" && ctx.shape === "line")("bhi-check", ctx.state === "checked" && ctx.shape === "line")("bhi-box-minus-o", ctx.state === "indeterminate" && ctx.shape === "line");
    } }, styles: ["@-webkit-keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}.novo-pseudo-checkbox{box-sizing:border-box;cursor:pointer;display:inline-block;flex-shrink:0;height:16px;position:relative;transition:color .3s ease-in-out;vertical-align:middle;width:16px}.novo-pseudo-checkbox.novo-pseudo-checkbox-checked,.novo-pseudo-checkbox.novo-pseudo-checkbox-indeterminate{-webkit-animation:iconEnter .16s ease-in-out;animation:iconEnter .16s ease-in-out;color:#4a89dc}.novo-pseudo-checkbox i{font-size:1.4rem;line-height:1rem}.novo-pseudo-checkbox-disabled{cursor:default}"], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoPseudoCheckbox, [{
        type: Component,
        args: [{
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                selector: 'novo-pseudo-checkbox',
                styleUrls: ['pseudo-checkbox.component.scss'],
                template: ` <i
    [class.bhi-checkbox-empty]="state === 'unchecked' && shape === 'box'"
    [class.bhi-checkbox-filled]="state === 'checked' && shape === 'box'"
    [class.bhi-checkbox-indeterminate]="state === 'indeterminate' && shape === 'box'"
    [class.bhi-circle-o]="state === 'unchecked' && shape === 'circle'"
    [class.bhi-check-circle-filled]="state === 'checked' && shape === 'circle'"
    [class.bhi-circle]="state === 'indeterminate' && shape === 'circle'"
    [class.bhi-box-empty]="state === 'unchecked' && shape === 'line'"
    [class.bhi-check]="state === 'checked' && shape === 'line'"
    [class.bhi-box-minus-o]="state === 'indeterminate' && shape === 'line'"
  ></i>`,
                host: {
                    class: 'novo-pseudo-checkbox',
                    '[class.novo-pseudo-checkbox-indeterminate]': 'state === "indeterminate"',
                    '[class.novo-pseudo-checkbox-checked]': 'state === "checked"',
                    '[class.novo-pseudo-checkbox-disabled]': 'disabled',
                    '[class._novo-animation-noopable]': '_animationMode === "NoopAnimations"',
                },
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [ANIMATION_MODULE_TYPE]
            }] }]; }, { state: [{
            type: Input
        }], shape: [{
            type: Input
        }], disabled: [{
            type: Input
        }] }); })();

// import {NovoCommonModule} from '../common-behaviors/common-module';
class NovoPseudoCheckboxModule {
}
NovoPseudoCheckboxModule.ɵmod = ɵɵdefineNgModule({ type: NovoPseudoCheckboxModule });
NovoPseudoCheckboxModule.ɵinj = ɵɵdefineInjector({ factory: function NovoPseudoCheckboxModule_Factory(t) { return new (t || NovoPseudoCheckboxModule)(); }, imports: [[]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoPseudoCheckboxModule, { declarations: [NovoPseudoCheckbox], exports: [NovoPseudoCheckbox] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoPseudoCheckboxModule, [{
        type: NgModule,
        args: [{
                imports: [],
                exports: [NovoPseudoCheckbox],
                declarations: [NovoPseudoCheckbox],
            }]
    }], null, null); })();

/** Mixin to augment a directive with a `disabled` property. */
function mixinDisabled(base) {
    return class extends base {
        constructor(...args) {
            super(...args);
            this._disabled = false;
        }
        get disabled() {
            return this._disabled;
        }
        set disabled(value) {
            this._disabled = coerceBooleanProperty(value);
        }
    };
}

/**
 * Injection token used to provide the parent component to options.
 */
const NOVO_OPTION_PARENT_COMPONENT = new InjectionToken('NOVO_OPTION_PARENT_COMPONENT');

const _c0$5 = ["*", [["novo-option"], ["ng-container"], ["novo-divider"]]];
const _c1$2 = ["*", "novo-option, ng-container, novo-divider"];
// Notes on the accessibility pattern used for `novo-optgroup`.
// The option group has two different "modes": regular and inert. The regular mode uses the
// recommended a11y pattern which has `role="group"` on the group element with `aria-labelledby`
// pointing to the label. This works for `novo-select`, but it seems to hit a bug for autocomplete
// under VoiceOver where the group doesn't get read out at all. The bug appears to be that if
// there's __any__ a11y-related attribute on the group (e.g. `role` or `aria-labelledby`),
// VoiceOver on Safari won't read it out.
// We've introduced the `inert` mode as a workaround. Under this mode, all a11y attributes are
// removed from the group, and we get the screen reader to read out the group label by mirroring it
// inside an invisible element in the option. This is sub-optimal, because the screen reader will
// repeat the group label on each navigation, whereas the default pattern only reads the group when
// the user enters a new group. The following alternate approaches were considered:
// 1. Reading out the group label using the `LiveAnnouncer` solves the problem, but we can't control
//    when the text will be read out so sometimes it comes in too late or never if the user
//    navigates quickly.
// 2. `<novo-option aria-describedby="groupLabel"` - This works on Safari, but VoiceOver in Chrome
//    won't read out the description at all.
// 3. `<novo-option aria-labelledby="optionLabel groupLabel"` - This works on Chrome, but Safari
//     doesn't read out the text at all. Furthermore, on
// Boilerplate for applying mixins to NovoOptgroup.
class NovoOptgroupBase {
    constructor() {
        /** Unique id for the underlying label. */
        this._labelId = `novo-optgroup-label-${_uniqueOptgroupIdCounter++}`;
    }
}
NovoOptgroupBase.ɵfac = function NovoOptgroupBase_Factory(t) { return new (t || NovoOptgroupBase)(); };
NovoOptgroupBase.ɵdir = ɵɵdefineDirective({ type: NovoOptgroupBase, inputs: { label: "label" } });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoOptgroupBase, [{
        type: Directive
    }], null, { label: [{
            type: Input
        }] }); })();
const NovoOptgroupMixinBase = mixinDisabled(NovoOptgroupBase);
// Counter for unique group ids.
let _uniqueOptgroupIdCounter = 0;
/**
 * Injection token that can be used to reference instances of `NovoOptgroup`. It serves as
 * alternative token to the actual `NovoOptgroup` class which could cause unnecessary
 * retention of the class and its component metadata.
 */
const NOVO_OPTGROUP = new InjectionToken('NovoOptgroup');
/**
 * Component that is used to group instances of `novo-option`.
 */
class NovoOptgroup extends NovoOptgroupMixinBase {
    constructor(parent) {
        var _a;
        super();
        this._inert = (_a = parent === null || parent === void 0 ? void 0 : parent.inertGroups) !== null && _a !== void 0 ? _a : false;
    }
}
NovoOptgroup.ɵfac = function NovoOptgroup_Factory(t) { return new (t || NovoOptgroup)(ɵɵdirectiveInject(NOVO_OPTION_PARENT_COMPONENT, 8)); };
NovoOptgroup.ɵcmp = ɵɵdefineComponent({ type: NovoOptgroup, selectors: [["novo-optgroup"]], hostAttrs: [1, "novo-optgroup"], hostVars: 5, hostBindings: function NovoOptgroup_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵattribute("role", ctx._inert ? null : "group")("aria-disabled", ctx._inert ? null : ctx.disabled.toString())("aria-labelledby", ctx._inert ? null : ctx._labelId);
        ɵɵclassProp("novo-optgroup-disabled", ctx.disabled);
    } }, inputs: { disabled: "disabled" }, exportAs: ["novoOptgroup"], features: [ɵɵProvidersFeature([{ provide: NOVO_OPTGROUP, useExisting: NovoOptgroup }]), ɵɵInheritDefinitionFeature], ngContentSelectors: _c1$2, decls: 4, vars: 2, consts: [["aria-hidden", "true", 1, "novo-optgroup-label", 3, "id"]], template: function NovoOptgroup_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef(_c0$5);
        ɵɵelementStart(0, "span", 0);
        ɵɵtext(1);
        ɵɵprojection(2);
        ɵɵelementEnd();
        ɵɵprojection(3, 1);
    } if (rf & 2) {
        ɵɵproperty("id", ctx._labelId);
        ɵɵadvance(1);
        ɵɵtextInterpolate1("", ctx.label, " ");
    } }, styles: ["@-webkit-keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}@keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}.novo-optgroup-label{color:#707070;color:#999;cursor:default;display:inline;display:block;flex:1;font-size:1.1rem;font-weight:500;line-height:1.2rem;overflow-wrap:break-word;padding:5px 10px;text-transform:uppercase;transition:.2s ease-out;word-break:word-break}div.filter-search input{background:transparent;border:none;border-bottom:2px solid #bebebe;margin:0 auto;width:90%}div.filter-search input:focus{border-bottom:2px solid #4a89dc;outline:none}div.filter-search input:focus~i.bhi-search{color:#4a89dc}"], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoOptgroup, [{
        type: Component,
        args: [{
                selector: 'novo-optgroup',
                exportAs: 'novoOptgroup',
                templateUrl: 'optgroup.component.html',
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                inputs: ['disabled'],
                styleUrls: ['optgroup.component.scss'],
                host: {
                    class: 'novo-optgroup',
                    '[attr.role]': '_inert ? null : "group"',
                    '[attr.aria-disabled]': '_inert ? null : disabled.toString()',
                    '[attr.aria-labelledby]': '_inert ? null : _labelId',
                    '[class.novo-optgroup-disabled]': 'disabled',
                },
                providers: [{ provide: NOVO_OPTGROUP, useExisting: NovoOptgroup }],
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [NOVO_OPTION_PARENT_COMPONENT]
            }, {
                type: Optional
            }] }]; }, null); })();

function NovoOption_novo_pseudo_checkbox_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-pseudo-checkbox", 4);
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵproperty("state", ctx_r0.selected ? "checked" : "unchecked")("disabled", ctx_r0.disabled);
} }
function NovoOption_novo_pseudo_checkbox_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-pseudo-checkbox", 5);
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵproperty("disabled", ctx_r1.disabled);
} }
function NovoOption_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 6);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate1("(", ctx_r2.group.label, ")");
} }
const _c0$6 = ["*"];
/**
 * Option IDs need to be unique across components, so this counter exists outside of
 * the component definition.
 */
let _uniqueIdCounter = 0;
/** Event object emitted by NovoOption when selected or deselected. */
class NovoOptionSelectionChange {
    constructor(
    /** Reference to the option that emitted the event. */
    source, 
    /** Whether the change in the option's value was a result of a user action. */
    isUserInput = false) {
        this.source = source;
        this.isUserInput = isUserInput;
    }
}
class NovoOptionBase {
    constructor(_element, _changeDetectorRef, _parent, group) {
        this._element = _element;
        this._changeDetectorRef = _changeDetectorRef;
        this._parent = _parent;
        this.group = group;
        this._selected = false;
        this._active = false;
        this._disabled = false;
        this._mostRecentViewValue = '';
        /** The unique ID of the option. */
        this.id = `novo-option-${_uniqueIdCounter++}`;
        /** Event emitted when the option is selected or deselected. */
        // tslint:disable-next-line:no-output-on-prefix
        this.onSelectionChange = new EventEmitter();
        /** Emits when the state of the option changes and any parents have to be notified. */
        this._stateChanges = new Subject();
        this._element.nativeElement.addEventListener('click', this._handleDisabledClick, false);
    }
    /** Whether the wrapping component is in multiple selection mode. */
    get multiple() {
        return this._parent && this._parent.multiple;
    }
    /** Whether or not the option is currently selected. */
    get selected() {
        return this._selected;
    }
    /** Whether the option is disabled. */
    get disabled() {
        return (this.group && this.group.disabled) || this._disabled;
    }
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
    }
    /**
     * Whether or not the option is currently active and ready to be selected.
     * An active option displays styles as if it is focused, but the
     * focus is actually retained somewhere else. This comes in handy
     * for components like autocomplete where focus must remain on the input.
     */
    get active() {
        return this._active;
    }
    /**
     * The displayed value of the option. It is necessary to show the selected option in the
     * select's trigger.
     */
    get viewValue() {
        return (this._getHostElement().textContent || '').trim();
    }
    /** Selects the option. */
    select() {
        if (!this._selected) {
            this._selected = true;
            this._changeDetectorRef.markForCheck();
            this._emitSelectionChangeEvent();
        }
    }
    /** Deselects the option. */
    deselect() {
        if (this._selected) {
            this._selected = false;
            this._changeDetectorRef.markForCheck();
            this._emitSelectionChangeEvent();
        }
    }
    /** Sets focus onto this option. */
    focus(_origin, options) {
        // Note that we aren't using `_origin`, but we need to keep it because some internal consumers
        // use `NovoOption` in a `FocusKeyManager` and we need it to match `FocusableOption`.
        const element = this._getHostElement();
        if (typeof element.focus === 'function') {
            element.focus(options);
        }
    }
    /**
     * This method sets display styles on the option to make it appear
     * active. This is used by the ActiveDescendantKeyManager so key
     * events will display the proper options as active on arrow key events.
     */
    setActiveStyles() {
        if (!this._active) {
            this._active = true;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * This method removes display styles on the option that made it appear
     * active. This is used by the ActiveDescendantKeyManager so key
     * events will display the proper options as active on arrow key events.
     */
    setInactiveStyles() {
        if (this._active) {
            this._active = false;
            this._changeDetectorRef.markForCheck();
        }
    }
    /** Gets the label to be used when determining whether the option should be focused. */
    getLabel() {
        return this.viewValue;
    }
    _handleDisabledClick(event) {
        if (this.disabled) {
            event.preventDefault();
            event.stopPropagation();
            event.stopImmediatePropagation();
        }
    }
    /** Ensures the option is selected when activated from the keyboard. */
    _handleKeydown(event) {
        if ((event.key === "Enter" /* Enter */ || event.key === " " /* Space */) && !hasModifierKey(event)) {
            this._selectViaInteraction();
            // Prevent the page from scrolling down and form submits.
            event.preventDefault();
        }
    }
    /**
     * `Selects the option while indicating the selection came from the user. Used to
     * determine if the select's view -> model callback should be invoked.`
     */
    _selectViaInteraction() {
        if (!this.disabled) {
            this._selected = this.multiple ? !this._selected : true;
            this._changeDetectorRef.markForCheck();
            this._emitSelectionChangeEvent(true);
        }
    }
    /**
     * Force a click event
     */
    _clickViaInteraction() {
        if (!this.disabled) {
            this._element.nativeElement.click();
        }
    }
    /**
     * Gets the `aria-selected` value for the option. We explicitly omit the `aria-selected`
     * attribute from single-selection, unselected options. Including the `aria-selected="false"`
     * attributes adds a significant amount of noise to screen-reader users without providing useful
     * information.
     */
    _getAriaSelected() {
        return this.selected || (this.multiple ? false : null);
    }
    /** Returns the correct tabindex for the option depending on disabled state. */
    _getTabIndex() {
        return this.disabled ? '-1' : '0';
    }
    /** Gets the host DOM element. */
    _getHostElement() {
        return this._element.nativeElement;
    }
    ngAfterViewChecked() {
        // Since parent components could be using the option's label to display the selected values
        // (e.g. `novo-select`) and they don't have a way of knowing if the option's label has changed
        // we have to check for changes in the DOM ourselves and dispatch an event. These checks are
        // relatively cheap, however we still limit them only to selected options in order to avoid
        // hitting the DOM too often.
        if (this._selected) {
            const viewValue = this.viewValue;
            if (viewValue !== this._mostRecentViewValue) {
                this._mostRecentViewValue = viewValue;
                this._stateChanges.next();
            }
        }
    }
    ngOnDestroy() {
        this._stateChanges.complete();
        this._element.nativeElement.removeEventListener('click', this._handleDisabledClick, false);
    }
    /** Emits the selection change event. */
    _emitSelectionChangeEvent(isUserInput = false) {
        this.onSelectionChange.emit(new NovoOptionSelectionChange(this, isUserInput));
    }
}
NovoOptionBase.ɵfac = function NovoOptionBase_Factory(t) { ɵɵinvalidFactory(); };
NovoOptionBase.ɵdir = ɵɵdefineDirective({ type: NovoOptionBase, inputs: { value: "value", id: "id", disabled: "disabled" }, outputs: { onSelectionChange: "onSelectionChange" } });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoOptionBase, [{
        type: Directive
    }], function () { return [{ type: ElementRef }, { type: ChangeDetectorRef }, { type: undefined }, { type: NovoOptgroupBase }]; }, { value: [{
            type: Input
        }], id: [{
            type: Input
        }], disabled: [{
            type: Input
        }], onSelectionChange: [{
            type: Output
        }] }); })();
/**
 * Single option inside of a `<novo-select>` element.
 */
class NovoOption extends NovoOptionBase {
    constructor(element, changeDetectorRef, parent, group) {
        super(element, changeDetectorRef, parent, group);
    }
}
NovoOption.ɵfac = function NovoOption_Factory(t) { return new (t || NovoOption)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(NOVO_OPTION_PARENT_COMPONENT, 8), ɵɵdirectiveInject(NOVO_OPTGROUP, 8)); };
NovoOption.ɵcmp = ɵɵdefineComponent({ type: NovoOption, selectors: [["novo-option"]], hostAttrs: ["role", "option", 1, "novo-option", "novo-focus-indicator"], hostVars: 12, hostBindings: function NovoOption_HostBindings(rf, ctx) { if (rf & 1) {
        ɵɵlistener("click", function NovoOption_click_HostBindingHandler() { return ctx._selectViaInteraction(); })("keydown", function NovoOption_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); });
    } if (rf & 2) {
        ɵɵhostProperty("id", ctx.id);
        ɵɵattribute("tabindex", ctx._getTabIndex())("aria-selected", ctx._getAriaSelected())("aria-disabled", ctx.disabled.toString());
        ɵɵclassProp("novo-active", ctx.active)("novo-selected", ctx.selected)("novo-option-multiple", ctx.multiple)("novo-option-disabled", ctx.disabled);
    } }, exportAs: ["novoOption"], features: [ɵɵInheritDefinitionFeature], ngContentSelectors: _c0$6, decls: 5, vars: 3, consts: [["class", "novo-option-pseudo-checkbox", 3, "state", "disabled", 4, "ngIf"], [1, "novo-option-text"], ["class", "novo-option-pseudo-checkbox", "state", "checked", "shape", "line", 3, "disabled", 4, "ngIf"], ["class", "cdk-visually-hidden", 4, "ngIf"], [1, "novo-option-pseudo-checkbox", 3, "state", "disabled"], ["state", "checked", "shape", "line", 1, "novo-option-pseudo-checkbox", 3, "disabled"], [1, "cdk-visually-hidden"]], template: function NovoOption_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵtemplate(0, NovoOption_novo_pseudo_checkbox_0_Template, 1, 2, "novo-pseudo-checkbox", 0);
        ɵɵelementStart(1, "span", 1);
        ɵɵprojection(2);
        ɵɵelementEnd();
        ɵɵtemplate(3, NovoOption_novo_pseudo_checkbox_3_Template, 1, 1, "novo-pseudo-checkbox", 2);
        ɵɵtemplate(4, NovoOption_span_4_Template, 2, 1, "span", 3);
    } if (rf & 2) {
        ɵɵproperty("ngIf", ctx.multiple);
        ɵɵadvance(3);
        ɵɵproperty("ngIf", !ctx.multiple && ctx.selected);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.group && ctx.group._inert);
    } }, directives: [NgIf, NovoPseudoCheckbox], styles: ["@-webkit-keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}@keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}.novo-option{-webkit-tap-highlight-color:transparent;align-items:center;box-sizing:border-box;color:inherit;cursor:pointer;display:inline;display:flex;flex:1;flex-direction:row;font-size:1.2rem;font-weight:400;gap:1rem;line-height:1.5rem;margin:0;max-width:100%;outline:none;padding:1rem 1rem 1rem 1.6rem;position:relative}.novo-option:hover{background:rgba(74,137,220,.1);color:#3d464d}.novo-option.novo-active,.novo-option:active{background:rgba(74,137,220,.3)}.novo-option.novo-selected{color:#4a89dc}.novo-option.disabled,.novo-option[aria-disabled=true]{color:#bebebe;cursor:not-allowed}.novo-option.disabled:hover,.novo-option[aria-disabled=true]:hover{background:rgba(218,68,83,.1)}.novo-optgroup .novo-option:not(.novo-option-multiple){padding-left:1rem}[dir=rtl] .novo-optgroup .novo-option:not(.novo-option-multiple){padding-left:.5rem;padding-right:1rem}.novo-option-text{align-items:center;display:inline-block;display:inline-flex;flex-direction:row;flex-grow:1;gap:1rem;overflow:hidden;text-overflow:ellipsis}.novo-option-pseudo-checkbox{margin-right:.25rem}[dir=rtl] .novo-option-pseudo-checkbox{margin-left:.25rem;margin-right:0}"], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoOption, [{
        type: Component,
        args: [{
                selector: 'novo-option',
                exportAs: 'novoOption',
                host: {
                    role: 'option',
                    '[id]': 'id',
                    '[attr.tabindex]': '_getTabIndex()',
                    '[attr.aria-selected]': '_getAriaSelected()',
                    '[attr.aria-disabled]': 'disabled.toString()',
                    '[class.novo-active]': 'active',
                    '[class.novo-selected]': 'selected',
                    '[class.novo-option-multiple]': 'multiple',
                    '[class.novo-option-disabled]': 'disabled',
                    '(click)': '_selectViaInteraction()',
                    '(keydown)': '_handleKeydown($event)',
                    class: 'novo-option novo-focus-indicator',
                },
                styleUrls: ['option.component.scss'],
                templateUrl: 'option.component.html',
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: ElementRef }, { type: ChangeDetectorRef }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [NOVO_OPTION_PARENT_COMPONENT]
            }] }, { type: NovoOptgroup, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [NOVO_OPTGROUP]
            }] }]; }, null); })();
/**
 * Counts the amount of option group labels that precede the specified option.
 * @param optionIndex Index of the option at which to start counting.
 * @param options Flat list of all of the options.
 * @param optionGroups Flat list of all of the option groups.
 * @docs-private
 */
function _countGroupLabelsBeforeOption(optionIndex, options, optionGroups) {
    if (optionGroups.length) {
        let optionsArray = options.toArray();
        let groups = optionGroups.toArray();
        let groupCounter = 0;
        for (let i = 0; i < optionIndex + 1; i++) {
            if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {
                groupCounter++;
            }
        }
        return groupCounter;
    }
    return 0;
}
/**
 * Determines the position to which to scroll a panel in order for an option to be into view.
 * @param optionOffset Offset of the option from the top of the panel.
 * @param optionHeight Height of the options.
 * @param currentScrollPosition Current scroll position of the panel.
 * @param panelHeight Height of the panel.
 * @docs-private
 */
function _getOptionScrollPosition(optionOffset, optionHeight, currentScrollPosition, panelHeight) {
    if (optionOffset < currentScrollPosition) {
        return optionOffset;
    }
    if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {
        return Math.max(0, optionOffset - panelHeight + optionHeight);
    }
    return currentScrollPosition;
}

class NovoOptionModule {
}
NovoOptionModule.ɵmod = ɵɵdefineNgModule({ type: NovoOptionModule });
NovoOptionModule.ɵinj = ɵɵdefineInjector({ factory: function NovoOptionModule_Factory(t) { return new (t || NovoOptionModule)(); }, imports: [[CommonModule, NovoPseudoCheckboxModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoOptionModule, { declarations: [NovoOption, NovoOptgroup], imports: [CommonModule, NovoPseudoCheckboxModule], exports: [NovoOption, NovoOptgroup] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoOptionModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, NovoPseudoCheckboxModule],
                exports: [NovoOption, NovoOptgroup],
                declarations: [NovoOption, NovoOptgroup],
            }]
    }], null, null); })();

class NovoBaseTextElement {
    constructor(element) {
        this.element = element;
    }
    get hb_isSizeSmall() {
        return this.size === 'small';
    }
    get hb_isSizeLarge() {
        return this.size === 'large';
    }
    get hb_isSizeDefault() {
        return !['small', 'large'].includes(this.size);
    }
    get hb_isWeightThin() {
        return this.weight === 'thin';
    }
    get hb_isWeightMedium() {
        return this.weight === 'medium';
    }
    get hb_isWeightBold() {
        return this.weight === 'bold';
    }
    get hb_isWeightDefault() {
        return !['thin', 'medium', 'bold'].includes(this.weight);
    }
    get hb_classBinding() {
        return [this.color ? `text-color-${this.color}` : null, this.lineLength ? `text-length-${this.lineLength}` : null]
            .filter(Boolean)
            .join(' ');
    }
    get nativeElement() {
        return this.element.nativeElement;
    }
}
NovoBaseTextElement.ɵfac = function NovoBaseTextElement_Factory(t) { return new (t || NovoBaseTextElement)(ɵɵdirectiveInject(ElementRef)); };
NovoBaseTextElement.ɵdir = ɵɵdefineDirective({ type: NovoBaseTextElement, hostVars: 26, hostBindings: function NovoBaseTextElement_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵclassMap(ctx.hb_classBinding);
        ɵɵclassProp("text-size-small", ctx.hb_isSizeSmall)("text-size-large", ctx.hb_isSizeLarge)("text-size-default", ctx.hb_isSizeDefault)("text-weight-thin", ctx.hb_isWeightThin)("text-weight-medium", ctx.hb_isWeightMedium)("text-weight-bold", ctx.hb_isWeightBold)("text-weight-default", ctx.hb_isWeightDefault)("text-disabled", ctx.disabled)("text-color-empty", ctx.muted)("text-color-negative", ctx.error)("margin-before", ctx.marginBefore)("margin-after", ctx.marginAfter);
    } }, inputs: { size: "size", weight: "weight", lineLength: "lineLength", color: "color", disabled: "disabled", muted: "muted", error: "error", marginBefore: "marginBefore", marginAfter: "marginAfter" } });
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoBaseTextElement.prototype, "disabled", void 0);
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoBaseTextElement.prototype, "muted", void 0);
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoBaseTextElement.prototype, "error", void 0);
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoBaseTextElement.prototype, "marginBefore", void 0);
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoBaseTextElement.prototype, "marginAfter", void 0);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoBaseTextElement, [{
        type: Directive
    }], function () { return [{ type: ElementRef }]; }, { size: [{
            type: Input
        }], weight: [{
            type: Input
        }], lineLength: [{
            type: Input
        }], color: [{
            type: Input
        }], hb_isSizeSmall: [{
            type: HostBinding,
            args: ['class.text-size-small']
        }], hb_isSizeLarge: [{
            type: HostBinding,
            args: ['class.text-size-large']
        }], hb_isSizeDefault: [{
            type: HostBinding,
            args: ['class.text-size-default']
        }], hb_isWeightThin: [{
            type: HostBinding,
            args: ['class.text-weight-thin']
        }], hb_isWeightMedium: [{
            type: HostBinding,
            args: ['class.text-weight-medium']
        }], hb_isWeightBold: [{
            type: HostBinding,
            args: ['class.text-weight-bold']
        }], hb_isWeightDefault: [{
            type: HostBinding,
            args: ['class.text-weight-default']
        }], hb_classBinding: [{
            type: HostBinding,
            args: ['class']
        }], disabled: [{
            type: HostBinding,
            args: ['class.text-disabled']
        }, {
            type: Input
        }], muted: [{
            type: HostBinding,
            args: ['class.text-color-empty']
        }, {
            type: Input
        }], error: [{
            type: HostBinding,
            args: ['class.text-color-negative']
        }, {
            type: Input
        }], marginBefore: [{
            type: HostBinding,
            args: ['class.margin-before']
        }, {
            type: Input
        }], marginAfter: [{
            type: HostBinding,
            args: ['class.margin-after']
        }, {
            type: Input
        }] }); })();

// NG2
const _c0$7 = ["*"];
/**
 * Tag Example
 * <novo-title size="sm" disabled>Label</novo-title
 * <novo-title small disabled>Label</novo-title>
 * <novo-title large disabled>Label</novo-title>
 * <novo-title error>Label</novo-title>
 * <novo-title muted>Label</novo-title>
 * <novo-title class="tc-grapefruit">Label</novo-title>
 * <novo-title color="grapefruit">Label</novo-title>
 */
class NovoCaption extends NovoBaseTextElement {
}
NovoCaption.ɵfac = function NovoCaption_Factory(t) { return ɵNovoCaption_BaseFactory(t || NovoCaption); };
NovoCaption.ɵcmp = ɵɵdefineComponent({ type: NovoCaption, selectors: [["novo-caption"], ["", "novo-caption", ""]], features: [ɵɵInheritDefinitionFeature], ngContentSelectors: _c0$7, decls: 1, vars: 0, template: function NovoCaption_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵprojection(0);
    } }, styles: ["@-webkit-keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}@keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}[_nghost-%COMP%]{color:#4f5361;display:inline;font-family:Roboto,sans-serif;font-weight:400;line-height:1.2rem}[_nghost-%COMP%], .text-size-default[_nghost-%COMP%]{font-size:.9rem}.text-size-small[_nghost-%COMP%]{font-size:.8rem}.text-size-large[_nghost-%COMP%]{font-size:1rem}.text-color-company[_nghost-%COMP%]{color:#39d}.text-color-candidate[_nghost-%COMP%]{color:#4b7}.text-color-navigation[_nghost-%COMP%]{color:#2f384f}.text-color-lead[_nghost-%COMP%]{color:#a69}.text-color-contact[_nghost-%COMP%]{color:#fa4}.text-color-opportunity[_nghost-%COMP%]{color:#625}.text-color-job[_nghost-%COMP%]{color:#b56}.text-color-earnCode[_nghost-%COMP%], .text-color-jobCode[_nghost-%COMP%]{color:#696d79}.text-color-sendout[_nghost-%COMP%]{color:#747884}.text-color-placement[_nghost-%COMP%]{color:#0b344f}.text-color-corporateuser[_nghost-%COMP%], .text-color-credential[_nghost-%COMP%], .text-color-distributionList[_nghost-%COMP%], .text-color-task[_nghost-%COMP%], .text-color-user[_nghost-%COMP%]{color:#4f5361}.text-color-aqua[_nghost-%COMP%]{color:#3bafda}.text-color-ocean[_nghost-%COMP%]{color:#4a89dc}.text-color-mint[_nghost-%COMP%]{color:#37bc9b}.text-color-grass[_nghost-%COMP%]{color:#8cc152}.text-color-sunflower[_nghost-%COMP%]{color:#f6b042}.text-color-bittersweet[_nghost-%COMP%]{color:#eb6845}.text-color-grapefruit[_nghost-%COMP%]{color:#da4453}.text-color-carnation[_nghost-%COMP%]{color:#d770ad}.text-color-lavender[_nghost-%COMP%]{color:#967adc}.text-color-positive[_nghost-%COMP%]{color:#4a89dc}.text-color-success[_nghost-%COMP%]{color:#8cc152}.text-color-negative[_nghost-%COMP%]{color:#da4453}.text-color-warning[_nghost-%COMP%]{color:#f6b042}.text-color-black[_nghost-%COMP%]{color:#000}.text-color-dark[_nghost-%COMP%]{color:#3d464d}.text-color-pulse[_nghost-%COMP%]{color:#3bafda}.text-color-neutral[_nghost-%COMP%]{color:#4f5361}.text-color-navy[_nghost-%COMP%]{color:#0d2d42}.text-color-contract[_nghost-%COMP%]{color:#454ea0}.text-color-mountain[_nghost-%COMP%]{color:#9678b6}.text-color-billableCharge[_nghost-%COMP%], .text-color-invoiceStatement[_nghost-%COMP%], .text-color-payableCharge[_nghost-%COMP%]{color:#696d79}.text-color-submission[_nghost-%COMP%]{color:#a9adbb}.text-color-note[_nghost-%COMP%]{color:#747884}.text-color-ash[_nghost-%COMP%]{color:#a0a0a0}.text-color-slate[_nghost-%COMP%]{color:#707070}.text-color-charcoal[_nghost-%COMP%]{color:#282828}.text-color-midnight[_nghost-%COMP%]{color:#0b0f1a}.text-color-background[_nghost-%COMP%]{color:#f4f4f4}.text-color-background-dark[_nghost-%COMP%]{color:#e2e2e2}.text-color-white[_nghost-%COMP%]{color:#fff}.text-color-grey[_nghost-%COMP%]{color:#999}.text-color-off-white[_nghost-%COMP%]{color:#f4f4f4}.text-color-light[_nghost-%COMP%]{color:#bebebe}.text-color-empty[_nghost-%COMP%]{color:#cccdcc}.text-color-disabled[_nghost-%COMP%]{color:#bebebe}.text-color-sand[_nghost-%COMP%]{color:#f4f4f4}.text-color-silver[_nghost-%COMP%]{color:#e2e2e2}.text-color-stone[_nghost-%COMP%]{color:#bebebe}.text-weight-thin[_nghost-%COMP%]{font-weight:200}.text-weight-default[_nghost-%COMP%]{font-weight:400}.text-weight-medium[_nghost-%COMP%]{font-weight:500}.text-weight-bold[_nghost-%COMP%]{font-weight:700}.margin-before[_nghost-%COMP%]{margin-top:.4rem}.margin-after[_nghost-%COMP%]{margin-bottom:.8rem}.text-length-small[_nghost-%COMP%]{max-width:40ch}.text-length-medium[_nghost-%COMP%]{max-width:55ch}.text-length-large[_nghost-%COMP%]{max-width:70ch}[_nghost-%COMP%]   novo-icon[_ngcontent-%COMP%]{font-size:1em;vertical-align:top}"] });
const ɵNovoCaption_BaseFactory = /*@__PURE__*/ ɵɵgetInheritedFactory(NovoCaption);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoCaption, [{
        type: Component,
        args: [{
                selector: 'novo-caption,[novo-caption]',
                template: ` <ng-content></ng-content> `,
                styleUrls: ['./caption.scss'],
            }]
    }], null, null); })();

// NG2
const _c0$8 = ["*"];
/**
 * Tag Example
 * <novo-label size="sm" disabled>Label</novo-label
 * <novo-label small disabled>Label</novo-label>
 * <novo-label large disabled>Label</novo-label>
 * <novo-label error>Label</novo-label>
 * <novo-label muted>Label</novo-label>
 * <novo-label class="tc-grapefruit">Label</novo-label>
 * <novo-label color="grapefruit">Label</novo-label>
 */
class NovoLabel extends NovoBaseTextElement {
}
NovoLabel.ɵfac = function NovoLabel_Factory(t) { return ɵNovoLabel_BaseFactory(t || NovoLabel); };
NovoLabel.ɵcmp = ɵɵdefineComponent({ type: NovoLabel, selectors: [["novo-label"], ["", "novo-label", ""]], features: [ɵɵInheritDefinitionFeature], ngContentSelectors: _c0$8, decls: 1, vars: 0, template: function NovoLabel_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵprojection(0);
    } }, styles: ["@-webkit-keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}@keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}[_nghost-%COMP%]{color:inherit;display:inline-block;font-family:Roboto,sans-serif;font-size:1.1rem;font-weight:500;line-height:1.2rem;overflow-wrap:break-word;text-transform:uppercase;transition:.2s ease-out;word-break:word-break}[_nghost-%COMP%]  novo-icon{font-size:1em;vertical-align:top}.text-size-default[_nghost-%COMP%]{font-size:1.1rem}.text-size-small[_nghost-%COMP%]{font-size:1rem}.text-size-large[_nghost-%COMP%]{font-size:1.2rem}.text-color-company[_nghost-%COMP%]{color:#39d}.text-color-candidate[_nghost-%COMP%]{color:#4b7}.text-color-navigation[_nghost-%COMP%]{color:#2f384f}.text-color-lead[_nghost-%COMP%]{color:#a69}.text-color-contact[_nghost-%COMP%]{color:#fa4}.text-color-opportunity[_nghost-%COMP%]{color:#625}.text-color-job[_nghost-%COMP%]{color:#b56}.text-color-earnCode[_nghost-%COMP%], .text-color-jobCode[_nghost-%COMP%]{color:#696d79}.text-color-sendout[_nghost-%COMP%]{color:#747884}.text-color-placement[_nghost-%COMP%]{color:#0b344f}.text-color-corporateuser[_nghost-%COMP%], .text-color-credential[_nghost-%COMP%], .text-color-distributionList[_nghost-%COMP%], .text-color-task[_nghost-%COMP%], .text-color-user[_nghost-%COMP%]{color:#4f5361}.text-color-aqua[_nghost-%COMP%]{color:#3bafda}.text-color-ocean[_nghost-%COMP%]{color:#4a89dc}.text-color-mint[_nghost-%COMP%]{color:#37bc9b}.text-color-grass[_nghost-%COMP%]{color:#8cc152}.text-color-sunflower[_nghost-%COMP%]{color:#f6b042}.text-color-bittersweet[_nghost-%COMP%]{color:#eb6845}.text-color-grapefruit[_nghost-%COMP%]{color:#da4453}.text-color-carnation[_nghost-%COMP%]{color:#d770ad}.text-color-lavender[_nghost-%COMP%]{color:#967adc}.text-color-positive[_nghost-%COMP%]{color:#4a89dc}.text-color-success[_nghost-%COMP%]{color:#8cc152}.text-color-negative[_nghost-%COMP%]{color:#da4453}.text-color-warning[_nghost-%COMP%]{color:#f6b042}.text-color-black[_nghost-%COMP%]{color:#000}.text-color-dark[_nghost-%COMP%]{color:#3d464d}.text-color-pulse[_nghost-%COMP%]{color:#3bafda}.text-color-neutral[_nghost-%COMP%]{color:#4f5361}.text-color-navy[_nghost-%COMP%]{color:#0d2d42}.text-color-contract[_nghost-%COMP%]{color:#454ea0}.text-color-mountain[_nghost-%COMP%]{color:#9678b6}.text-color-billableCharge[_nghost-%COMP%], .text-color-invoiceStatement[_nghost-%COMP%], .text-color-payableCharge[_nghost-%COMP%]{color:#696d79}.text-color-submission[_nghost-%COMP%]{color:#a9adbb}.text-color-note[_nghost-%COMP%]{color:#747884}.text-color-ash[_nghost-%COMP%]{color:#a0a0a0}.text-color-slate[_nghost-%COMP%]{color:#707070}.text-color-charcoal[_nghost-%COMP%]{color:#282828}.text-color-midnight[_nghost-%COMP%]{color:#0b0f1a}.text-color-background[_nghost-%COMP%]{color:#f4f4f4}.text-color-background-dark[_nghost-%COMP%]{color:#e2e2e2}.text-color-white[_nghost-%COMP%]{color:#fff}.text-color-grey[_nghost-%COMP%]{color:#999}.text-color-off-white[_nghost-%COMP%]{color:#f4f4f4}.text-color-light[_nghost-%COMP%]{color:#bebebe}.text-color-empty[_nghost-%COMP%]{color:#cccdcc}.text-color-disabled[_nghost-%COMP%]{color:#bebebe}.text-color-sand[_nghost-%COMP%]{color:#f4f4f4}.text-color-silver[_nghost-%COMP%]{color:#e2e2e2}.text-color-stone[_nghost-%COMP%]{color:#bebebe}.margin-before[_nghost-%COMP%]{margin-top:.4rem}.margin-after[_nghost-%COMP%]{margin-bottom:.8rem}"] });
const ɵNovoLabel_BaseFactory = /*@__PURE__*/ ɵɵgetInheritedFactory(NovoLabel);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoLabel, [{
        type: Component,
        args: [{
                selector: 'novo-label,[novo-label]',
                template: ` <ng-content></ng-content> `,
                styleUrls: ['./label.scss'],
            }]
    }], null, null); })();

// NG2
const _c0$9 = ["*"];
/**
 * Tag Example
 * <novo-text size="small" disabled>Label</novo-text
 * <novo-text small disabled>Label</novo-text>
 * <novo-text large disabled>Label</novo-text>
 * <novo-text error>Label</novo-text>
 * <novo-text muted>Label</novo-text>
 * <novo-text class="tc-grapefruit">Label</novo-text>
 * <novo-text color="grapefruit">Label</novo-text>
 */
class NovoLink extends NovoBaseTextElement {
}
NovoLink.ɵfac = function NovoLink_Factory(t) { return ɵNovoLink_BaseFactory(t || NovoLink); };
NovoLink.ɵcmp = ɵɵdefineComponent({ type: NovoLink, selectors: [["novo-link"]], inputs: { href: "href" }, features: [ɵɵInheritDefinitionFeature], ngContentSelectors: _c0$9, decls: 2, vars: 1, template: function NovoLink_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵelementStart(0, "a");
        ɵɵprojection(1);
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵattribute("href", ctx.href, ɵɵsanitizeUrl);
    } }, styles: ["@-webkit-keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}@keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}:host{display:inline;font-family:Roboto,sans-serif;font-size:1em;font-weight:400;line-height:inherit}:host::ng-deep novo-icon{font-size:1em;vertical-align:top}:host.text-size-default{font-size:1em}:host.text-size-small{font-size:.8em}:host.text-size-large{font-size:1.2em}:host.text-color-company{color:#39d}:host.text-color-candidate{color:#4b7}:host.text-color-navigation{color:#2f384f}:host.text-color-lead{color:#a69}:host.text-color-contact{color:#fa4}:host.text-color-opportunity{color:#625}:host.text-color-job{color:#b56}:host.text-color-earnCode,:host.text-color-jobCode{color:#696d79}:host.text-color-sendout{color:#747884}:host.text-color-placement{color:#0b344f}:host.text-color-corporateuser,:host.text-color-credential,:host.text-color-distributionList,:host.text-color-task,:host.text-color-user{color:#4f5361}:host.text-color-aqua{color:#3bafda}:host.text-color-ocean{color:#4a89dc}:host.text-color-mint{color:#37bc9b}:host.text-color-grass{color:#8cc152}:host.text-color-sunflower{color:#f6b042}:host.text-color-bittersweet{color:#eb6845}:host.text-color-grapefruit{color:#da4453}:host.text-color-carnation{color:#d770ad}:host.text-color-lavender{color:#967adc}:host.text-color-positive{color:#4a89dc}:host.text-color-success{color:#8cc152}:host.text-color-negative{color:#da4453}:host.text-color-warning{color:#f6b042}:host.text-color-black{color:#000}:host.text-color-dark{color:#3d464d}:host.text-color-pulse{color:#3bafda}:host.text-color-neutral{color:#4f5361}:host.text-color-navy{color:#0d2d42}:host.text-color-contract{color:#454ea0}:host.text-color-mountain{color:#9678b6}:host.text-color-billableCharge,:host.text-color-invoiceStatement,:host.text-color-payableCharge{color:#696d79}:host.text-color-submission{color:#a9adbb}:host.text-color-note{color:#747884}:host.text-color-ash{color:#a0a0a0}:host.text-color-slate{color:#707070}:host.text-color-charcoal{color:#282828}:host.text-color-midnight{color:#0b0f1a}:host.text-color-background{color:#f4f4f4}:host.text-color-background-dark{color:#e2e2e2}:host.text-color-white{color:#fff}:host.text-color-grey{color:#999}:host.text-color-off-white{color:#f4f4f4}:host.text-color-light{color:#bebebe}:host.text-color-empty{color:#cccdcc}:host.text-color-disabled{color:#bebebe}:host.text-color-sand{color:#f4f4f4}:host.text-color-silver{color:#e2e2e2}:host.text-color-stone{color:#bebebe}:host.text-weight-thin{font-weight:200}:host.text-weight-default{font-weight:400}:host.text-weight-medium{font-weight:500}:host.text-weight-bold{font-weight:700}:host.margin-before{margin-top:.4rem}:host.margin-after{margin-bottom:.8rem}"], encapsulation: 2 });
const ɵNovoLink_BaseFactory = /*@__PURE__*/ ɵɵgetInheritedFactory(NovoLink);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoLink, [{
        type: Component,
        args: [{
                selector: 'novo-link',
                template: `<a [attr.href]="href"><ng-content></ng-content></a>`,
                styleUrls: ['./link.scss'],
                encapsulation: ViewEncapsulation.None,
            }]
    }], null, { href: [{
            type: Input
        }] }); })();

const _c0$a = ["*"];
/**
 * Tag Example
 * <novo-text size="small" disabled>Label</novo-text
 * <novo-text small disabled>Label</novo-text>
 * <novo-text large disabled>Label</novo-text>
 * <novo-text error>Label</novo-text>
 * <novo-text muted>Label</novo-text>
 * <novo-text class="tc-grapefruit">Label</novo-text>
 * <novo-text color="grapefruit">Label</novo-text>
 */
class NovoText extends NovoBaseTextElement {
}
NovoText.ɵfac = function NovoText_Factory(t) { return ɵNovoText_BaseFactory(t || NovoText); };
NovoText.ɵcmp = ɵɵdefineComponent({ type: NovoText, selectors: [["novo-text"], ["", "novo-text", ""]], hostVars: 2, hostBindings: function NovoText_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵclassProp("text-block", ctx.block);
    } }, inputs: { block: "block" }, features: [ɵɵInheritDefinitionFeature], ngContentSelectors: _c0$a, decls: 1, vars: 0, template: function NovoText_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵprojection(0);
    } }, styles: ["@-webkit-keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}@keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}[_nghost-%COMP%]{color:inherit;display:inline;font-family:Roboto,sans-serif;font-size:1.2rem;font-weight:400;line-height:1.5rem}.text-block[_nghost-%COMP%]{display:block;line-height:1.5rem;max-width:75ch;min-width:55ch}[_nghost-%COMP%]  novo-icon{font-size:1.2em;vertical-align:top}.text-size-default[_nghost-%COMP%]{font-size:1.2rem}.text-size-small[_nghost-%COMP%]{font-size:1rem}.text-size-large[_nghost-%COMP%]{font-size:1.4rem}.text-color-company[_nghost-%COMP%]{color:#39d}.text-color-candidate[_nghost-%COMP%]{color:#4b7}.text-color-navigation[_nghost-%COMP%]{color:#2f384f}.text-color-lead[_nghost-%COMP%]{color:#a69}.text-color-contact[_nghost-%COMP%]{color:#fa4}.text-color-opportunity[_nghost-%COMP%]{color:#625}.text-color-job[_nghost-%COMP%]{color:#b56}.text-color-earnCode[_nghost-%COMP%], .text-color-jobCode[_nghost-%COMP%]{color:#696d79}.text-color-sendout[_nghost-%COMP%]{color:#747884}.text-color-placement[_nghost-%COMP%]{color:#0b344f}.text-color-corporateuser[_nghost-%COMP%], .text-color-credential[_nghost-%COMP%], .text-color-distributionList[_nghost-%COMP%], .text-color-task[_nghost-%COMP%], .text-color-user[_nghost-%COMP%]{color:#4f5361}.text-color-aqua[_nghost-%COMP%]{color:#3bafda}.text-color-ocean[_nghost-%COMP%]{color:#4a89dc}.text-color-mint[_nghost-%COMP%]{color:#37bc9b}.text-color-grass[_nghost-%COMP%]{color:#8cc152}.text-color-sunflower[_nghost-%COMP%]{color:#f6b042}.text-color-bittersweet[_nghost-%COMP%]{color:#eb6845}.text-color-grapefruit[_nghost-%COMP%]{color:#da4453}.text-color-carnation[_nghost-%COMP%]{color:#d770ad}.text-color-lavender[_nghost-%COMP%]{color:#967adc}.text-color-positive[_nghost-%COMP%]{color:#4a89dc}.text-color-success[_nghost-%COMP%]{color:#8cc152}.text-color-negative[_nghost-%COMP%]{color:#da4453}.text-color-warning[_nghost-%COMP%]{color:#f6b042}.text-color-black[_nghost-%COMP%]{color:#000}.text-color-dark[_nghost-%COMP%]{color:#3d464d}.text-color-pulse[_nghost-%COMP%]{color:#3bafda}.text-color-neutral[_nghost-%COMP%]{color:#4f5361}.text-color-navy[_nghost-%COMP%]{color:#0d2d42}.text-color-contract[_nghost-%COMP%]{color:#454ea0}.text-color-mountain[_nghost-%COMP%]{color:#9678b6}.text-color-billableCharge[_nghost-%COMP%], .text-color-invoiceStatement[_nghost-%COMP%], .text-color-payableCharge[_nghost-%COMP%]{color:#696d79}.text-color-submission[_nghost-%COMP%]{color:#a9adbb}.text-color-note[_nghost-%COMP%]{color:#747884}.text-color-ash[_nghost-%COMP%]{color:#a0a0a0}.text-color-slate[_nghost-%COMP%]{color:#707070}.text-color-charcoal[_nghost-%COMP%]{color:#282828}.text-color-midnight[_nghost-%COMP%]{color:#0b0f1a}.text-color-background[_nghost-%COMP%]{color:#f4f4f4}.text-color-background-dark[_nghost-%COMP%]{color:#e2e2e2}.text-color-white[_nghost-%COMP%]{color:#fff}.text-color-grey[_nghost-%COMP%]{color:#999}.text-color-off-white[_nghost-%COMP%]{color:#f4f4f4}.text-color-light[_nghost-%COMP%]{color:#bebebe}.text-color-empty[_nghost-%COMP%]{color:#cccdcc}.text-color-disabled[_nghost-%COMP%]{color:#bebebe}.text-color-sand[_nghost-%COMP%]{color:#f4f4f4}.text-color-silver[_nghost-%COMP%]{color:#e2e2e2}.text-color-stone[_nghost-%COMP%]{color:#bebebe}.text-weight-thin[_nghost-%COMP%]{font-weight:200}.text-weight-default[_nghost-%COMP%]{font-weight:400}.text-weight-medium[_nghost-%COMP%]{font-weight:500}.text-weight-bold[_nghost-%COMP%]{font-weight:700}.margin-before[_nghost-%COMP%]{margin-top:.4rem}.margin-after[_nghost-%COMP%]{margin-bottom:.8rem}.text-length-small[_nghost-%COMP%]{max-width:40ch}.text-length-medium[_nghost-%COMP%]{max-width:55ch}.text-length-large[_nghost-%COMP%]{max-width:70ch}"] });
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoText.prototype, "block", void 0);
const ɵNovoText_BaseFactory = /*@__PURE__*/ ɵɵgetInheritedFactory(NovoText);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoText, [{
        type: Component,
        args: [{
                selector: 'novo-text,[novo-text]',
                template: ` <ng-content></ng-content> `,
                styleUrls: ['./text.scss'],
            }]
    }], null, { block: [{
            type: HostBinding,
            args: ['class.text-block']
        }, {
            type: Input
        }] }); })();

// NG2
const _c0$b = ["*"];
/**
 * Tag Example
 * <novo-title size="sm" disabled>Label</novo-title
 * <novo-title small disabled>Label</novo-title>
 * <novo-title large disabled>Label</novo-title>
 * <novo-title error>Label</novo-title>
 * <novo-title muted>Label</novo-title>
 * <novo-title class="tc-grapefruit">Label</novo-title>
 * <novo-title color="grapefruit">Label</novo-title>
 */
class NovoTitle extends NovoBaseTextElement {
}
NovoTitle.ɵfac = function NovoTitle_Factory(t) { return ɵNovoTitle_BaseFactory(t || NovoTitle); };
NovoTitle.ɵcmp = ɵɵdefineComponent({ type: NovoTitle, selectors: [["novo-title"], ["", "novo-title", ""]], features: [ɵɵInheritDefinitionFeature], ngContentSelectors: _c0$b, decls: 1, vars: 0, template: function NovoTitle_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵprojection(0);
    } }, styles: ["@-webkit-keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}@keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}[_nghost-%COMP%]{color:inherit;display:block;font-family:Roboto,sans-serif;font-weight:500;line-height:1.2rem;text-overflow:ellipsis;white-space:nowrap}[_nghost-%COMP%], .text-size-default[_nghost-%COMP%]{font-size:1.8rem}.text-size-small[_nghost-%COMP%]{font-size:1.5rem}.text-size-large[_nghost-%COMP%]{font-size:2.1rem}.text-color-company[_nghost-%COMP%]{color:#39d}.text-color-candidate[_nghost-%COMP%]{color:#4b7}.text-color-navigation[_nghost-%COMP%]{color:#2f384f}.text-color-lead[_nghost-%COMP%]{color:#a69}.text-color-contact[_nghost-%COMP%]{color:#fa4}.text-color-opportunity[_nghost-%COMP%]{color:#625}.text-color-job[_nghost-%COMP%]{color:#b56}.text-color-earnCode[_nghost-%COMP%], .text-color-jobCode[_nghost-%COMP%]{color:#696d79}.text-color-sendout[_nghost-%COMP%]{color:#747884}.text-color-placement[_nghost-%COMP%]{color:#0b344f}.text-color-corporateuser[_nghost-%COMP%], .text-color-credential[_nghost-%COMP%], .text-color-distributionList[_nghost-%COMP%], .text-color-task[_nghost-%COMP%], .text-color-user[_nghost-%COMP%]{color:#4f5361}.text-color-aqua[_nghost-%COMP%]{color:#3bafda}.text-color-ocean[_nghost-%COMP%]{color:#4a89dc}.text-color-mint[_nghost-%COMP%]{color:#37bc9b}.text-color-grass[_nghost-%COMP%]{color:#8cc152}.text-color-sunflower[_nghost-%COMP%]{color:#f6b042}.text-color-bittersweet[_nghost-%COMP%]{color:#eb6845}.text-color-grapefruit[_nghost-%COMP%]{color:#da4453}.text-color-carnation[_nghost-%COMP%]{color:#d770ad}.text-color-lavender[_nghost-%COMP%]{color:#967adc}.text-color-positive[_nghost-%COMP%]{color:#4a89dc}.text-color-success[_nghost-%COMP%]{color:#8cc152}.text-color-negative[_nghost-%COMP%]{color:#da4453}.text-color-warning[_nghost-%COMP%]{color:#f6b042}.text-color-black[_nghost-%COMP%]{color:#000}.text-color-dark[_nghost-%COMP%]{color:#3d464d}.text-color-pulse[_nghost-%COMP%]{color:#3bafda}.text-color-neutral[_nghost-%COMP%]{color:#4f5361}.text-color-navy[_nghost-%COMP%]{color:#0d2d42}.text-color-contract[_nghost-%COMP%]{color:#454ea0}.text-color-mountain[_nghost-%COMP%]{color:#9678b6}.text-color-billableCharge[_nghost-%COMP%], .text-color-invoiceStatement[_nghost-%COMP%], .text-color-payableCharge[_nghost-%COMP%]{color:#696d79}.text-color-submission[_nghost-%COMP%]{color:#a9adbb}.text-color-note[_nghost-%COMP%]{color:#747884}.text-color-ash[_nghost-%COMP%]{color:#a0a0a0}.text-color-slate[_nghost-%COMP%]{color:#707070}.text-color-charcoal[_nghost-%COMP%]{color:#282828}.text-color-midnight[_nghost-%COMP%]{color:#0b0f1a}.text-color-background[_nghost-%COMP%]{color:#f4f4f4}.text-color-background-dark[_nghost-%COMP%]{color:#e2e2e2}.text-color-white[_nghost-%COMP%]{color:#fff}.text-color-grey[_nghost-%COMP%]{color:#999}.text-color-off-white[_nghost-%COMP%]{color:#f4f4f4}.text-color-light[_nghost-%COMP%]{color:#bebebe}.text-color-empty[_nghost-%COMP%]{color:#cccdcc}.text-color-disabled[_nghost-%COMP%]{color:#bebebe}.text-color-sand[_nghost-%COMP%]{color:#f4f4f4}.text-color-silver[_nghost-%COMP%]{color:#e2e2e2}.text-color-stone[_nghost-%COMP%]{color:#bebebe}.margin-before[_nghost-%COMP%]{margin-top:.4rem}.margin-after[_nghost-%COMP%]{margin-bottom:.8rem}[_nghost-%COMP%]  novo-icon{font-size:1em;vertical-align:top}"] });
const ɵNovoTitle_BaseFactory = /*@__PURE__*/ ɵɵgetInheritedFactory(NovoTitle);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTitle, [{
        type: Component,
        args: [{
                selector: 'novo-title,[novo-title]',
                template: ` <ng-content></ng-content> `,
                styleUrls: ['./title.scss'],
            }]
    }], null, null); })();

class NovoCommonModule {
}
NovoCommonModule.ɵmod = ɵɵdefineNgModule({ type: NovoCommonModule });
NovoCommonModule.ɵinj = ɵɵdefineInjector({ factory: function NovoCommonModule_Factory(t) { return new (t || NovoCommonModule)(); }, imports: [[CommonModule, NovoOptionModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoCommonModule, { declarations: [NovoTemplate, NovoText, NovoTitle, NovoCaption, NovoLabel, NovoLink, MarginDirective, PaddingDirective], imports: [CommonModule, NovoOptionModule], exports: [NovoTemplate, NovoText, NovoTitle, NovoCaption, NovoLabel, NovoLink, MarginDirective, PaddingDirective] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoCommonModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, NovoOptionModule],
                exports: [NovoTemplate, NovoText, NovoTitle, NovoCaption, NovoLabel, NovoLink, MarginDirective, PaddingDirective],
                declarations: [NovoTemplate, NovoText, NovoTitle, NovoCaption, NovoLabel, NovoLink, MarginDirective, PaddingDirective],
            }]
    }], null, null); })();

/** Error state matcher that matches when a control is invalid and dirty. */
class ShowOnDirtyErrorStateMatcher {
    isErrorState(control, form) {
        return !!(control && control.invalid && (control.dirty || (form && form.submitted)));
    }
}
ShowOnDirtyErrorStateMatcher.ɵfac = function ShowOnDirtyErrorStateMatcher_Factory(t) { return new (t || ShowOnDirtyErrorStateMatcher)(); };
ShowOnDirtyErrorStateMatcher.ɵprov = ɵɵdefineInjectable({ token: ShowOnDirtyErrorStateMatcher, factory: ShowOnDirtyErrorStateMatcher.ɵfac });
/*@__PURE__*/ (function () { ɵsetClassMetadata(ShowOnDirtyErrorStateMatcher, [{
        type: Injectable
    }], null, null); })();
/** Provider that defines how form controls behave with regards to displaying error messages. */
class ErrorStateMatcher {
    isErrorState(control, form) {
        return !!(control && control.invalid && (control.touched || (form && form.submitted)));
    }
}
ErrorStateMatcher.ɵfac = function ErrorStateMatcher_Factory(t) { return new (t || ErrorStateMatcher)(); };
ErrorStateMatcher.ɵprov = ɵɵdefineInjectable({ token: ErrorStateMatcher, factory: ErrorStateMatcher.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { ɵsetClassMetadata(ErrorStateMatcher, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], null, null); })();

/** Mixin to augment a directive with a `color` property. */
function mixinColor(base, defaultColor) {
    return class extends base {
        constructor(...args) {
            super(...args);
            this.defaultColor = defaultColor;
            // Set the default color that can be specified from the mixin.
            this.color = defaultColor;
        }
        get color() {
            return this._color;
        }
        set color(value) {
            const colorPalette = value || this.defaultColor;
            if (colorPalette !== this._color) {
                if (this._color) {
                    this._elementRef.nativeElement.classList.remove(`novo-${this._color}`);
                }
                if (colorPalette) {
                    this._elementRef.nativeElement.classList.add(`novo-${colorPalette}`);
                }
                this._color = colorPalette;
            }
        }
    };
}

/**
 * Mixin to augment a directive with updateErrorState method.
 * For component with `errorState` and need to update `errorState`.
 */
function mixinErrorState(base) {
    return class extends base {
        constructor(...args) {
            super(...args);
            /** Whether the component is in an error state. */
            this.errorState = false;
            /**
             * Stream that emits whenever the state of the input changes such that the wrapping
             * `MatFormField` needs to run change detection.
             */
            this.stateChanges = new Subject();
        }
        updateErrorState() {
            const oldState = this.errorState;
            const parent = this._parentFormGroup || this._parentForm;
            const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;
            const control = this.ngControl ? this.ngControl.control : null;
            const newState = matcher.isErrorState(control, parent);
            if (newState !== oldState) {
                this.errorState = newState;
                this.stateChanges.next();
            }
        }
    };
}

/** Mixin to augment a directive with a `overlay` property. */
function mixinOverlay(base) {
    // Note: We cast `base` to `unknown` and then `Constructor`. It could be an abstract class,
    // but given we `extend` it from another class, we can assume a constructor being accessible.
    class Mixin extends base {
        constructor(...args) {
            super(...args);
        }
        openPanel() {
            if (!this.disabled) {
                this.overlay.openPanel();
            }
        }
        closePanel() {
            this.overlay.closePanel();
        }
        togglePanel() {
            if (this.panelOpen) {
                this.closePanel();
            }
            else {
                this.openPanel();
            }
        }
        get panelOpen() {
            return this.overlay && this.overlay.panelOpen;
        }
    }
    // Since we don't directly extend from `base` with it's original types, and we instruct
    // TypeScript that `T` actually is instantiatable through `new`, the types don't overlap.
    // This is a limitation in TS as abstract classes cannot be typed properly dynamically.
    return Mixin;
}

/** Mixin to augment a directive with a `required` property. */
function mixinRequired(base) {
    return class extends base {
        constructor(...args) {
            super(...args);
            this._required = false;
        }
        get required() {
            return this._required;
        }
        set required(value) {
            this._required = coerceBooleanProperty(value);
        }
    };
}

/** Mixin to augment a directive with a `tabIndex` property. */
function mixinTabIndex(base, defaultTabIndex = 0) {
    // Note: We cast `base` to `unknown` and then `Constructor`. It could be an abstract class,
    // but given we `extend` it from another class, we can assume a constructor being accessible.
    class Mixin extends base {
        constructor(...args) {
            super(...args);
            this._tabIndex = defaultTabIndex;
            this.defaultTabIndex = defaultTabIndex;
        }
        get tabIndex() {
            return this.disabled ? -1 : this._tabIndex;
        }
        set tabIndex(value) {
            // If the specified tabIndex value is null or undefined, fall back to the default value.
            this._tabIndex = value != null ? coerceNumberProperty(value) : this.defaultTabIndex;
        }
    }
    // Since we don't directly extend from `base` with it's original types, and we instruct
    // TypeScript that `T` actually is instantiatable through `new`, the types don't overlap.
    // This is a limitation in TS as abstract classes cannot be typed properly dynamically.
    return Mixin;
}

// Angular
const _c0$c = ["panel"];
function NovoOverlayTemplateComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 0, 1);
    ɵɵprojection(2);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵproperty("id", ctx_r0.id);
} }
const _c1$3 = ["*"];
class NovoOverlayTemplateComponent {
    constructor(overlay, viewContainerRef, zone, changeDetectorRef, document) {
        this.overlay = overlay;
        this.viewContainerRef = viewContainerRef;
        this.zone = zone;
        this.changeDetectorRef = changeDetectorRef;
        this.document = document;
        this.id = `novo-overlay-${Date.now()}`;
        this.position = 'default';
        this.scrollStrategy = 'reposition';
        this.closeOnSelect = true;
        this.select = new EventEmitter();
        this.closing = new EventEmitter();
    }
    ngOnDestroy() {
        this.destroyOverlay();
    }
    get panelOpen() {
        return this.overlayRef && this.overlayRef.hasAttached();
    }
    set parent(value) {
        this._parent = value;
        this.checkSizes();
    }
    get parent() {
        return this._parent;
    }
    openPanel() {
        if (!this.overlayRef) {
            this.createOverlay(this.template);
        }
        else {
            this.checkSizes();
        }
        if (this.overlayRef && !this.overlayRef.hasAttached()) {
            this.overlayRef.attach(this.portal);
            this.closingActionsSubscription = this.subscribeToClosingActions();
        }
        this.changeDetectorRef.markForCheck();
        setTimeout(() => {
            if (this.overlayRef) {
                this.overlayRef.updatePosition();
            }
        });
    }
    closePanel() {
        this.zone.run(() => {
            if (this.overlayRef && this.overlayRef.hasAttached()) {
                this.overlayRef.detach();
                this.closingActionsSubscription.unsubscribe();
            }
            this.closing.emit(true);
            if (this.panelOpen) {
                this.changeDetectorRef.markForCheck();
            }
        });
    }
    onClosingAction(event) {
        this.closePanel();
    }
    /**
     * A stream of actions that should close the autocomplete panel, including
     * when an option is selected, on blur, and when TAB is pressed.
     */
    get panelClosingActions() {
        return merge(
        // this.overlayTemplate._keyManager.tabOut,
        this.outsideClickStream);
    }
    /** Stream of clicks outside of the autocomplete panel. */
    get outsideClickStream() {
        if (!this.document) {
            return of();
        }
        return merge(fromEvent(this.document, 'mouseup'), fromEvent(this.document, 'touchend')).pipe(filter((event) => {
            const clickTarget = event.target;
            const clicked = this.panelOpen &&
                clickTarget !== this.getConnectedElement().nativeElement &&
                !this.getConnectedElement().nativeElement.contains(clickTarget) &&
                !!this.overlayRef &&
                !this.overlayRef.overlayElement.contains(clickTarget);
            // &&!Array.from(document.querySelectorAll('.cdk-overlay-container')).some((el) => el.contains(clickTarget));
            if (this.panelOpen && !!this.overlayRef && this.overlayRef.overlayElement.contains(clickTarget) && this.closeOnSelect) {
                this.select.emit(event);
            }
            return clicked;
        }));
    }
    /**
     * This method listens to a stream of panel closing actions and resets the
     * stream every time the option list changes.
     */
    subscribeToClosingActions() {
        const firstStable = this.zone.onStable.asObservable().pipe(first());
        // const valueChanges = Observable.from(this.value);
        // When the zone is stable initially, and when the option list changes...
        return (merge(firstStable)
            .pipe(
        // create a new stream of panelClosingActions, replacing any previous streams
        // that were created, and flatten it so our stream only emits closing events...
        switchMap(() => {
            return this.panelClosingActions;
        }), 
        // when the first closing event occurs...
        first())
            // set the value, close the panel, and complete.
            .subscribe((event) => this.onClosingAction(event)));
    }
    createOverlay(template) {
        this.portal = new TemplatePortal(template, this.viewContainerRef);
        this.overlayRef = this.overlay.create(this.getOverlayConfig());
        this.overlayRef.backdropClick().subscribe(() => this.closePanel());
    }
    destroyOverlay() {
        if (this.overlayRef) {
            this.closePanel();
            this.overlayRef.dispose();
            this.overlayRef = undefined;
        }
    }
    getOverlayConfig() {
        const config = new OverlayConfig();
        if (!this.width) {
            config.width = this.getHostWidth();
        }
        else {
            config.width = this.width;
        }
        if (this.height) {
            config.height = this.height;
        }
        config.positionStrategy = this.getPosition();
        config.hasBackdrop = false;
        config.direction = 'ltr';
        config.scrollStrategy = this.getScrollStrategy();
        return config;
    }
    /**
     * Supports the following position strategies:
     * 'default', 'right', 'bottom', 'center', 'bottom-left', 'bottom-right', 'top-left', 'top-right'
     */
    getPosition() {
        if (this.position === 'center') {
            return this.overlay
                .position()
                .connectedTo(this.getConnectedElement(), { originX: 'start', originY: 'center' }, { overlayX: 'start', overlayY: 'center' })
                .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'top' })
                .withFallbackPosition({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'bottom' });
        }
        const [originX, fallbackX] = this.position.includes('right') ? ['end', 'start'] : ['start', 'end'];
        const [originY, overlayY] = this.position.includes('top') ? ['top', 'bottom'] : ['bottom', 'top'];
        let strategy = this.overlay
            .position()
            .connectedTo(this.getConnectedElement(), { originX, originY }, { overlayX: originX, overlayY })
            .withDirection('ltr');
        if (this.position === 'bottom') {
            strategy = strategy.withFallbackPosition({ originX: fallbackX, originY: 'bottom' }, { overlayX: fallbackX, overlayY: 'top' });
        }
        else if (this.position === 'right' || this.position === 'default' || this.position.includes('above-below')) {
            strategy = strategy
                .withFallbackPosition({ originX, originY: 'top' }, { overlayX: originX, overlayY: 'bottom' })
                .withFallbackPosition({ originX: fallbackX, originY: 'bottom' }, { overlayX: fallbackX, overlayY: 'top' })
                .withFallbackPosition({ originX: fallbackX, originY: 'top' }, { overlayX: fallbackX, overlayY: 'bottom' });
            if (!this.position.includes('above-below')) {
                strategy = strategy
                    .withFallbackPosition({ originX, originY: 'center' }, { overlayX: originX, overlayY: 'center' })
                    .withFallbackPosition({ originX: fallbackX, originY: 'center' }, { overlayX: fallbackX, overlayY: 'center' });
            }
        }
        return strategy;
    }
    getScrollStrategy() {
        switch (this.scrollStrategy) {
            case 'block':
                return this.overlay.scrollStrategies.block();
            case 'reposition':
                return this.overlay.scrollStrategies.reposition();
            default:
                return this.overlay.scrollStrategies.close();
        }
    }
    checkSizes() {
        if (this.overlayRef) {
            if (!this.width) {
                this.overlayRef.getConfig().width = this.getHostWidth();
            }
            if (this.height) {
                this.overlayRef.getConfig().height = this.height;
            }
            this.overlayRef.updateSize(this.overlayRef.getConfig());
            this.overlayRef.updatePosition();
            this.changeDetectorRef.markForCheck();
        }
    }
    getConnectedElement() {
        return this.parent;
    }
    getHostWidth() {
        return this.getConnectedElement().nativeElement.getBoundingClientRect().width;
    }
}
NovoOverlayTemplateComponent.ɵfac = function NovoOverlayTemplateComponent_Factory(t) { return new (t || NovoOverlayTemplateComponent)(ɵɵdirectiveInject(Overlay), ɵɵdirectiveInject(ViewContainerRef), ɵɵdirectiveInject(NgZone), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(DOCUMENT, 8)); };
NovoOverlayTemplateComponent.ɵcmp = ɵɵdefineComponent({ type: NovoOverlayTemplateComponent, selectors: [["novo-overlay-template"]], viewQuery: function NovoOverlayTemplateComponent_Query(rf, ctx) { if (rf & 1) {
        ɵɵviewQuery(TemplateRef, true);
        ɵɵviewQuery(_c0$c, true);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.template = _t.first);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.panel = _t.first);
    } }, inputs: { position: "position", scrollStrategy: "scrollStrategy", width: "width", height: "height", closeOnSelect: "closeOnSelect", parent: "parent" }, outputs: { select: "select", closing: "closing" }, ngContentSelectors: _c1$3, decls: 1, vars: 0, consts: [["role", "listbox", 1, "novo-overlay-panel", 3, "id"], ["panel", ""]], template: function NovoOverlayTemplateComponent_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵtemplate(0, NovoOverlayTemplateComponent_ng_template_0_Template, 3, 1, "ng-template");
    } }, encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoOverlayTemplateComponent, [{
        type: Component,
        args: [{
                selector: 'novo-overlay-template',
                template: `
    <ng-template>
      <div class="novo-overlay-panel" role="listbox" [id]="id" #panel><ng-content></ng-content></div>
    </ng-template>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: Overlay }, { type: ViewContainerRef }, { type: NgZone }, { type: ChangeDetectorRef }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [DOCUMENT]
            }] }]; }, { template: [{
            type: ViewChild,
            args: [TemplateRef]
        }], panel: [{
            type: ViewChild,
            args: ['panel']
        }], position: [{
            type: Input
        }], scrollStrategy: [{
            type: Input
        }], width: [{
            type: Input
        }], height: [{
            type: Input
        }], closeOnSelect: [{
            type: Input
        }], select: [{
            type: Output
        }], closing: [{
            type: Output
        }], parent: [{
            type: Input
        }] }); })();

// NG2
const _c0$d = ["panel"];
const _c1$4 = [[["button"], ["novo-button"]], "*"];
const _c2$1 = ["button,novo-button", "*"];
const _c3$1 = ["*"];
// Create Base Class from Mixins
// Boilerplate for applying mixins
class NovoDropdownBase {
    constructor() { }
}
const NovoDropdowMixins = mixinOverlay(mixinTabIndex(mixinDisabled(NovoDropdownBase), 1));
class NovoDropdownElement extends NovoDropdowMixins {
    constructor(element, ref) {
        super();
        this.element = element;
        this.ref = ref;
        this.parentScrollAction = 'close';
        this.side = 'default';
        this.scrollStrategy = 'reposition';
        this.width = -1; // Defaults to dynamic width (no hardcoded width value and no host width lookup)
        this.appendToBody = false; // Deprecated
        this.toggled = new EventEmitter();
        this._selectedOptionChanges = Subscription.EMPTY;
        /** The Subject to complete all subscriptions when destroyed. */
        this._onDestroy = new Subject();
        this._multiple = false;
        this.clickHandler = this.togglePanel.bind(this);
        this.closeHandler = this.closePanel.bind(this);
    }
    /** Whether the user should be allowed to select multiple options. */
    get multiple() {
        return this._multiple;
    }
    set multiple(value) {
        this._multiple = coerceBooleanProperty(value);
    }
    ngOnInit() {
        if (this.appendToBody) {
            notify(`'appendToBody' has been deprecated. Please remove this attribute.`);
        }
    }
    ngAfterContentInit() {
        // Add a click handler to the button to toggle the menu
        this.button.element.nativeElement.addEventListener('click', this.clickHandler);
        this.button.element.nativeElement.tabIndex = -1;
        this._initKeyManager();
        this._watchSelectionEvents();
        this.focus();
    }
    ngOnDestroy() {
        this._onDestroy.next();
        this._onDestroy.complete();
        // Remove listener
        const button = this.element.nativeElement.querySelector('button');
        if (button) {
            button.removeEventListener('click', this.clickHandler);
        }
    }
    focus(options) {
        if (!this.disabled) {
            this.element.nativeElement.focus(options);
        }
    }
    set items(items) {
        // this._items = items;
        // this.activeIndex = -1;
        // // Get the innerText of all the items to allow for searching
        // this._textItems = items.map((item: NovoItemElement) => {
        //   return item.element.nativeElement.innerText;
        // });
    }
    /** Handles all keydown events on the select. */
    _handleKeydown(event) {
        if (!this.disabled) {
            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);
        }
    }
    /** Handles keyboard events while the select is closed. */
    _handleClosedKeydown(event) {
        const key = event.key;
        const isArrowKey = key === "ArrowDown" /* ArrowDown */ || key === "ArrowUp" /* ArrowUp */ || key === "ArrowLeft" /* ArrowLeft */ || key === "ArrowRight" /* ArrowRight */;
        const isOpenKey = key === "Enter" /* Enter */ || key === " " /* Space */;
        const manager = this._keyManager;
        // Open the select on ALT + arrow key to match the native <select>
        if ((!manager.isTyping() && isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {
            event.preventDefault(); // prevents the page from scrolling down when pressing space
            this.openPanel();
        }
    }
    /** Handles keyboard events when the selected is open. */
    _handleOpenKeydown(event) {
        const manager = this._keyManager;
        const key = event.key;
        const isArrowKey = key === "ArrowDown" /* ArrowDown */ || key === "ArrowUp" /* ArrowUp */;
        const isTyping = manager.isTyping();
        if (isArrowKey && event.altKey) {
            // Close the select on ALT + arrow key to match the native <select>
            event.preventDefault();
            this.closePanel();
            // Don't do anything in this case if the user is typing,
            // because the typing sequence can include the space key.
        }
        else if (!isTyping && (key === "Enter" /* Enter */ || key === " " /* Space */) && manager.activeItem && !hasModifierKey(event)) {
            event.preventDefault();
            this._multiple ? manager.activeItem._selectViaInteraction() : manager.activeItem._clickViaInteraction();
        }
        else if (!isTyping && this._multiple && ['a', 'A'].includes(key) && event.ctrlKey) {
            event.preventDefault();
            const hasDeselectedOptions = this.options.some((opt) => !opt.disabled && !opt.selected);
            this.options.forEach((option) => {
                if (!option.disabled) {
                    hasDeselectedOptions ? option.select() : option.deselect();
                }
            });
        }
        else {
            const previouslyFocusedIndex = manager.activeItemIndex;
            manager.onKeydown(event);
            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem && manager.activeItemIndex !== previouslyFocusedIndex) {
                manager.activeItem._selectViaInteraction();
            }
        }
    }
    _watchSelectionEvents() {
        const selectionEvents = this.options ? merge(...this.options.map((option) => option.onSelectionChange)) : of();
        this._selectedOptionChanges.unsubscribe();
        this._selectedOptionChanges = selectionEvents.pipe(takeUntil(this._onDestroy)).subscribe((event) => {
            // this.handleSelection(event.source, event.isUserInput);
            if (event.isUserInput && !this.multiple && this.panelOpen) {
                this._clearPreviousSelectedOption(this._keyManager.activeItem);
                this.closePanel();
                this.focus();
            }
        });
    }
    /**
     * Clear any previous selected option and emit a selection change event for this option
     */
    _clearPreviousSelectedOption(skip) {
        this.options.forEach((option) => {
            if (option !== skip && option.selected) {
                option.deselect();
            }
        });
    }
    /** Sets up a key manager to listen to keyboard events on the overlay panel. */
    _initKeyManager() {
        this._keyManager = new ActiveDescendantKeyManager(this.options).withTypeAhead(100).withHomeAndEnd();
        // .withAllowedModifierKeys(['shiftKey']);
        this._keyManager.tabOut.pipe(takeUntil(this._onDestroy)).subscribe(() => {
            if (this.panelOpen) {
                // Restore focus to the trigger before closing. Ensures that the focus
                // position won't be lost if the user got focus into the overlay.
                this.focus();
                this.closePanel();
            }
        });
        this._keyManager.change.pipe(takeUntil(this._onDestroy)).subscribe(() => {
            if (this.panelOpen && this.overlay) {
                this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);
            }
        });
    }
    /** Scrolls the active option into view. */
    _scrollOptionIntoView(index) {
        const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);
        const itemHeight = this._getItemHeight();
        this.panel.nativeElement.scrollTop = _getOptionScrollPosition((index + labelCount) * itemHeight, itemHeight, this.panel.nativeElement.scrollTop, this.panel.nativeElement.offsetHeight);
    }
    /** Calculates the height of the select's options. */
    _getItemHeight() {
        let [first] = this.options;
        if (first) {
            return first._getHostElement().offsetHeight;
        }
        return 0;
    }
}
NovoDropdownElement.ɵfac = function NovoDropdownElement_Factory(t) { return new (t || NovoDropdownElement)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ChangeDetectorRef)); };
NovoDropdownElement.ɵcmp = ɵɵdefineComponent({ type: NovoDropdownElement, selectors: [["novo-dropdown"]], contentQueries: function NovoDropdownElement_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵɵcontentQuery(dirIndex, NovoButtonElement, true);
        ɵɵcontentQuery(dirIndex, NovoOptgroup, true);
        ɵɵcontentQuery(dirIndex, NovoOption, true);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.button = _t.first);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.optionGroups = _t);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.options = _t);
    } }, viewQuery: function NovoDropdownElement_Query(rf, ctx) { if (rf & 1) {
        ɵɵviewQuery(NovoOverlayTemplateComponent, true);
        ɵɵviewQuery(_c0$d, true);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.overlay = _t.first);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.panel = _t.first);
    } }, hostVars: 1, hostBindings: function NovoDropdownElement_HostBindings(rf, ctx) { if (rf & 1) {
        ɵɵlistener("keydown", function NovoDropdownElement_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); });
    } if (rf & 2) {
        ɵɵattribute("tabIndex", ctx.disabled ? 0 - 1 : 0);
    } }, inputs: { parentScrollSelector: "parentScrollSelector", parentScrollAction: "parentScrollAction", containerClass: "containerClass", side: "side", scrollStrategy: "scrollStrategy", height: "height", width: "width", appendToBody: "appendToBody", multiple: "multiple" }, outputs: { toggled: "toggled" }, features: [ɵɵProvidersFeature([{ provide: NOVO_OPTION_PARENT_COMPONENT, useExisting: NovoDropdownElement }]), ɵɵInheritDefinitionFeature], ngContentSelectors: _c2$1, decls: 5, vars: 11, consts: [[3, "parent", "width", "position", "scrollStrategy"], ["panel", ""]], template: function NovoDropdownElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef(_c1$4);
        ɵɵprojection(0, 0, ["#trigger", ""]);
        ɵɵelementStart(1, "novo-overlay-template", 0);
        ɵɵelementStart(2, "div", null, 1);
        ɵɵprojection(4, 1);
        ɵɵelementEnd();
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵadvance(1);
        ɵɵproperty("parent", ctx.element)("width", ctx.width)("position", ctx.side)("scrollStrategy", ctx.scrollStrategy);
        ɵɵadvance(1);
        ɵɵclassMapInterpolate1("dropdown-container ", ctx.containerClass, "");
        ɵɵstyleProp("height", ctx.height, "px");
        ɵɵclassProp("has-height", !!ctx.height);
    } }, directives: [NovoOverlayTemplateComponent], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDropdownElement, [{
        type: Component,
        args: [{
                selector: 'novo-dropdown',
                template: `
    <ng-content select="button,novo-button" #trigger></ng-content>
    <novo-overlay-template [parent]="element" [width]="width" [position]="side" [scrollStrategy]="scrollStrategy">
      <div #panel class="dropdown-container {{ containerClass }}" [style.height.px]="height" [class.has-height]="!!height">
        <ng-content></ng-content>
      </div>
    </novo-overlay-template>
  `,
                providers: [{ provide: NOVO_OPTION_PARENT_COMPONENT, useExisting: NovoDropdownElement }],
                host: {
                    '[attr.tabIndex]': 'disabled ? -1 : 0',
                },
            }]
    }], function () { return [{ type: ElementRef }, { type: ChangeDetectorRef }]; }, { parentScrollSelector: [{
            type: Input
        }], parentScrollAction: [{
            type: Input
        }], containerClass: [{
            type: Input
        }], side: [{
            type: Input
        }], scrollStrategy: [{
            type: Input
        }], height: [{
            type: Input
        }], width: [{
            type: Input
        }], appendToBody: [{
            type: Input
        }], toggled: [{
            type: Output
        }], overlay: [{
            type: ViewChild,
            args: [NovoOverlayTemplateComponent]
        }], button: [{
            type: ContentChild,
            args: [NovoButtonElement]
        }], optionGroups: [{
            type: ContentChildren,
            args: [NovoOptgroup, { descendants: true }]
        }], options: [{
            type: ContentChildren,
            args: [NovoOption, { descendants: true }]
        }], panel: [{
            type: ViewChild,
            args: ['panel']
        }], multiple: [{
            type: Input
        }], _handleKeydown: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }] }); })();
// Deprecated below here ---------------------------
class NovoItemElement {
    constructor(dropdown, element) {
        this.dropdown = dropdown;
        this.element = element;
        this.keepOpen = false;
        this.action = new EventEmitter();
        this.active = false;
        notify(`'item' element has been deprecated. Please use 'novo-option' and 'novo-optgroup'.`);
    }
    onClick(event) {
        // Poor man's disable
        if (!this.disabled) {
            // Close if keepOpen is false
            if (!this.keepOpen) {
                this.dropdown.closePanel();
            }
            // Emit the action
            this.action.emit({ originalEvent: event });
        }
    }
}
NovoItemElement.ɵfac = function NovoItemElement_Factory(t) { return new (t || NovoItemElement)(ɵɵdirectiveInject(NovoDropdownElement), ɵɵdirectiveInject(ElementRef)); };
NovoItemElement.ɵcmp = ɵɵdefineComponent({ type: NovoItemElement, selectors: [["item"]], hostVars: 4, hostBindings: function NovoItemElement_HostBindings(rf, ctx) { if (rf & 1) {
        ɵɵlistener("click", function NovoItemElement_click_HostBindingHandler($event) { return ctx.onClick($event); });
    } if (rf & 2) {
        ɵɵclassProp("disabled", ctx.disabled)("active", ctx.active);
    } }, inputs: { disabled: "disabled", keepOpen: "keepOpen" }, outputs: { action: "action" }, ngContentSelectors: _c3$1, decls: 2, vars: 0, template: function NovoItemElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵelementStart(0, "novo-option");
        ɵɵprojection(1);
        ɵɵelementEnd();
    } }, directives: [NovoOption], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoItemElement, [{
        type: Component,
        args: [{
                selector: 'item',
                template: '<novo-option><ng-content></ng-content></novo-option>',
                host: {
                    '[class.disabled]': 'disabled',
                    '[class.active]': 'active',
                },
            }]
    }], function () { return [{ type: NovoDropdownElement }, { type: ElementRef }]; }, { disabled: [{
            type: Input
        }], keepOpen: [{
            type: Input
        }], action: [{
            type: Output
        }], onClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }] }); })();
class NovoDropdownListElement {
    constructor(dropdown) {
        this.dropdown = dropdown;
        notify(`'list' element has been deprecated. Please use novo-option and novo-optgroup.`);
    }
    ngAfterContentInit() {
        this.dropdown.items = this.items;
        this.items.changes.subscribe(() => {
            this.dropdown.items = this.items;
        });
    }
}
NovoDropdownListElement.ɵfac = function NovoDropdownListElement_Factory(t) { return new (t || NovoDropdownListElement)(ɵɵdirectiveInject(NovoDropdownElement)); };
NovoDropdownListElement.ɵcmp = ɵɵdefineComponent({ type: NovoDropdownListElement, selectors: [["list"]], contentQueries: function NovoDropdownListElement_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵɵcontentQuery(dirIndex, NovoItemElement, false);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.items = _t);
    } }, ngContentSelectors: _c3$1, decls: 1, vars: 0, template: function NovoDropdownListElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDropdownListElement, [{
        type: Component,
        args: [{
                selector: 'list',
                template: '<ng-content></ng-content>',
            }]
    }], function () { return [{ type: NovoDropdownElement }]; }, { items: [{
            type: ContentChildren,
            args: [NovoItemElement]
        }] }); })();
class NovoDropDownItemHeaderElement {
    constructor() {
        notify(`'dropdown-item-header' element has been deprecated. Please use novo-option and novo-optgroup.`);
    }
}
NovoDropDownItemHeaderElement.ɵfac = function NovoDropDownItemHeaderElement_Factory(t) { return new (t || NovoDropDownItemHeaderElement)(); };
NovoDropDownItemHeaderElement.ɵcmp = ɵɵdefineComponent({ type: NovoDropDownItemHeaderElement, selectors: [["dropdown-item-header"]], ngContentSelectors: _c3$1, decls: 1, vars: 0, template: function NovoDropDownItemHeaderElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDropDownItemHeaderElement, [{
        type: Component,
        args: [{
                selector: 'dropdown-item-header',
                template: '<ng-content></ng-content>',
            }]
    }], function () { return []; }, null); })();

const _c0$e = ["*"];
class NovoIconComponent {
    constructor(element, cdr) {
        this.element = element;
        this.cdr = cdr;
        this.role = 'img';
    }
    set alt(value) {
        this.ariaLabel = value;
    }
    get alt() {
        return this.ariaLabel;
    }
    set name(iconName) {
        this.iconName = `bhi-${iconName}`;
    }
    get name() {
        return this.iconName;
    }
    ngAfterViewInit() {
        if (this.element.nativeElement.textContent.trim()) {
            Promise.resolve().then(() => {
                this.name = this.element.nativeElement.textContent.trim();
                this.cdr.markForCheck();
            });
        }
    }
    projectContentChanged(record) {
        this.name = this.element.nativeElement.textContent.trim();
        this.cdr.detectChanges();
    }
}
NovoIconComponent.ɵfac = function NovoIconComponent_Factory(t) { return new (t || NovoIconComponent)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ChangeDetectorRef)); };
NovoIconComponent.ɵcmp = ɵɵdefineComponent({ type: NovoIconComponent, selectors: [["novo-icon"]], hostVars: 6, hostBindings: function NovoIconComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵattribute("raised", ctx.raised)("size", ctx.size)("theme", ctx.theme)("color", ctx.color)("role", ctx.role)("aria-label", ctx.ariaLabel);
    } }, inputs: { raised: "raised", size: "size", theme: "theme", color: "color", alt: "alt", name: "name" }, ngContentSelectors: _c0$e, decls: 3, vars: 2, consts: [[3, "cdkObserveContent"]], template: function NovoIconComponent_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵelementStart(0, "i");
        ɵɵelementStart(1, "span", 0);
        ɵɵlistener("cdkObserveContent", function NovoIconComponent_Template_span_cdkObserveContent_1_listener($event) { return ctx.projectContentChanged($event); });
        ɵɵprojection(2);
        ɵɵelementEnd();
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵclassMap(ctx.iconName);
    } }, directives: [CdkObserveContent], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoIconComponent, [{
        type: Component,
        args: [{
                selector: 'novo-icon',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
    <i [class]="iconName"
      ><span (cdkObserveContent)="projectContentChanged($event)"><ng-content></ng-content></span
    ></i>
  `,
            }]
    }], function () { return [{ type: ElementRef }, { type: ChangeDetectorRef }]; }, { raised: [{
            type: HostBinding,
            args: ['attr.raised']
        }, {
            type: Input
        }], size: [{
            type: HostBinding,
            args: ['attr.size']
        }, {
            type: Input
        }], theme: [{
            type: HostBinding,
            args: ['attr.theme']
        }, {
            type: Input
        }], color: [{
            type: HostBinding,
            args: ['attr.color']
        }, {
            type: Input
        }], role: [{
            type: HostBinding,
            args: ['attr.role']
        }], ariaLabel: [{
            type: HostBinding,
            args: ['attr.aria-label']
        }], alt: [{
            type: Input
        }], name: [{
            type: Input
        }] }); })();

// NG2
const _c0$f = function (a0, a1, a2, a3, a4) { return [a0, a1, a2, a3, a4]; };
class NovoTooltip {
}
NovoTooltip.ɵfac = function NovoTooltip_Factory(t) { return new (t || NovoTooltip)(); };
NovoTooltip.ɵcmp = ɵɵdefineComponent({ type: NovoTooltip, selectors: [["novo-tooltip"]], decls: 2, vars: 9, consts: [[3, "ngClass"]], template: function NovoTooltip_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "div", 0);
        ɵɵtext(1);
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵproperty("@state", ctx.noAnimate ? "no-animation" : "visible")("ngClass", ɵɵpureFunction5(3, _c0$f, ctx.tooltipType, ctx.rounded ? "rounded" : "", ctx.size ? ctx.size : "", ctx.preline ? "preline" : "", ctx.position));
        ɵɵadvance(1);
        ɵɵtextInterpolate(ctx.message);
    } }, directives: [NgClass], styles: ["novo-tooltip[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]{background:#383838;box-shadow:4px 4px 8px rgba(0,0,0,.3);color:#fff;font-family:Helvetica Neue,Helvetica,Arial,sans-serif;font-size:12px;line-height:12px;padding:8px 10px;text-shadow:0 -1px 0 #000;white-space:nowrap}novo-tooltip[_ngcontent-%COMP%]   div.error[_ngcontent-%COMP%]{background-color:#b34e4d;text-shadow:0 -1px 0 #592726}novo-tooltip[_ngcontent-%COMP%]   div.info[_ngcontent-%COMP%]{background-color:#3986ac;text-shadow:0 -1px 0 #1a3c4d}novo-tooltip[_ngcontent-%COMP%]   div.warning[_ngcontent-%COMP%]{background-color:#c09854;text-shadow:0 -1px 0 #6c5328}novo-tooltip[_ngcontent-%COMP%]   div.success[_ngcontent-%COMP%]{background-color:#458746;text-shadow:0 -1px 0 #1a321a}novo-tooltip[_ngcontent-%COMP%]   div.rounded[_ngcontent-%COMP%]{border-radius:4px}novo-tooltip[_ngcontent-%COMP%]   div.extra-large[_ngcontent-%COMP%], novo-tooltip[_ngcontent-%COMP%]   div.large[_ngcontent-%COMP%], novo-tooltip[_ngcontent-%COMP%]   div.medium[_ngcontent-%COMP%], novo-tooltip[_ngcontent-%COMP%]   div.small[_ngcontent-%COMP%]{line-height:1.4em;white-space:normal;word-wrap:break-word}novo-tooltip[_ngcontent-%COMP%]   div.extra-large[_ngcontent-%COMP%]{font-size:1.2vh;width:400px}novo-tooltip[_ngcontent-%COMP%]   div.large[_ngcontent-%COMP%]{width:300px}novo-tooltip[_ngcontent-%COMP%]   div.medium[_ngcontent-%COMP%]{width:150px}novo-tooltip[_ngcontent-%COMP%]   div.small[_ngcontent-%COMP%]{width:80px}novo-tooltip[_ngcontent-%COMP%]   div.preline[_ngcontent-%COMP%]{white-space:pre-line}novo-tooltip[_ngcontent-%COMP%]   div.top[_ngcontent-%COMP%]:before{border-top-color:#383838;bottom:0;left:calc(50% - 6px);margin-bottom:-11px}novo-tooltip[_ngcontent-%COMP%]   div.top.error[_ngcontent-%COMP%]:before{border-top-color:#b34e4d}novo-tooltip[_ngcontent-%COMP%]   div.top.info[_ngcontent-%COMP%]:before{border-top-color:#3986ac}novo-tooltip[_ngcontent-%COMP%]   div.top.warning[_ngcontent-%COMP%]:before{border-top-color:#c09854}novo-tooltip[_ngcontent-%COMP%]   div.top.success[_ngcontent-%COMP%]:before{border-top-color:#458746}novo-tooltip[_ngcontent-%COMP%]   div.top-left[_ngcontent-%COMP%]:before{border-top-color:#383838;bottom:0;margin-bottom:-11px;margin-right:0;right:0}novo-tooltip[_ngcontent-%COMP%]   div.top-left.error[_ngcontent-%COMP%]:before{border-top-color:#b34e4d}novo-tooltip[_ngcontent-%COMP%]   div.top-left.info[_ngcontent-%COMP%]:before{border-top-color:#3986ac}novo-tooltip[_ngcontent-%COMP%]   div.top-left.warning[_ngcontent-%COMP%]:before{border-top-color:#c09854}novo-tooltip[_ngcontent-%COMP%]   div.top-left.success[_ngcontent-%COMP%]:before{border-top-color:#458746}novo-tooltip[_ngcontent-%COMP%]   div.top-right[_ngcontent-%COMP%]:before{border-top-color:#383838;bottom:0;left:0;margin-bottom:-11px;margin-left:0}novo-tooltip[_ngcontent-%COMP%]   div.top-right.error[_ngcontent-%COMP%]:before{border-top-color:#b34e4d}novo-tooltip[_ngcontent-%COMP%]   div.top-right.info[_ngcontent-%COMP%]:before{border-top-color:#3986ac}novo-tooltip[_ngcontent-%COMP%]   div.top-right.warning[_ngcontent-%COMP%]:before{border-top-color:#c09854}novo-tooltip[_ngcontent-%COMP%]   div.top-right.success[_ngcontent-%COMP%]:before{border-top-color:#458746}novo-tooltip[_ngcontent-%COMP%]   div.bottom[_ngcontent-%COMP%]:before{border-bottom-color:#383838;left:calc(50% - 6px);margin-top:-11px;top:0}novo-tooltip[_ngcontent-%COMP%]   div.bottom.error[_ngcontent-%COMP%]:before{border-top-color:#b34e4d}novo-tooltip[_ngcontent-%COMP%]   div.bottom.info[_ngcontent-%COMP%]:before{border-top-color:#3986ac}novo-tooltip[_ngcontent-%COMP%]   div.bottom.warning[_ngcontent-%COMP%]:before{border-top-color:#c09854}novo-tooltip[_ngcontent-%COMP%]   div.bottom.success[_ngcontent-%COMP%]:before{border-top-color:#458746}novo-tooltip[_ngcontent-%COMP%]   div.bottom-left[_ngcontent-%COMP%]:before{border-bottom-color:#383838;margin-right:0;margin-top:-11px;right:0;top:0}novo-tooltip[_ngcontent-%COMP%]   div.bottom-left.error[_ngcontent-%COMP%]:before{border-bottom-color:#b34e4d}novo-tooltip[_ngcontent-%COMP%]   div.bottom-left.info[_ngcontent-%COMP%]:before{border-bottom-color:#3986ac}novo-tooltip[_ngcontent-%COMP%]   div.bottom-left.warning[_ngcontent-%COMP%]:before{border-bottom-color:#c09854}novo-tooltip[_ngcontent-%COMP%]   div.bottom-left.success[_ngcontent-%COMP%]:before{border-bottom-color:#458746}novo-tooltip[_ngcontent-%COMP%]   div.bottom-right[_ngcontent-%COMP%]:before{border-bottom-color:#383838;left:0;margin-left:0;margin-top:-11px;top:0}novo-tooltip[_ngcontent-%COMP%]   div.bottom-right.error[_ngcontent-%COMP%]:before{border-bottom-color:#b34e4d}novo-tooltip[_ngcontent-%COMP%]   div.bottom-right.info[_ngcontent-%COMP%]:before{border-bottom-color:#3986ac}novo-tooltip[_ngcontent-%COMP%]   div.bottom-right.warning[_ngcontent-%COMP%]:before{border-bottom-color:#c09854}novo-tooltip[_ngcontent-%COMP%]   div.bottom-right.success[_ngcontent-%COMP%]:before{border-bottom-color:#458746}novo-tooltip[_ngcontent-%COMP%]   div.left[_ngcontent-%COMP%]:before{border-left-color:#383838;bottom:50%;margin-bottom:-6px;margin-right:-11px;right:0}novo-tooltip[_ngcontent-%COMP%]   div.left.error[_ngcontent-%COMP%]:before{border-left-color:#b34e4d}novo-tooltip[_ngcontent-%COMP%]   div.left.info[_ngcontent-%COMP%]:before{border-left-color:#3986ac}novo-tooltip[_ngcontent-%COMP%]   div.left.warning[_ngcontent-%COMP%]:before{border-left-color:#c09854}novo-tooltip[_ngcontent-%COMP%]   div.left.success[_ngcontent-%COMP%]:before{border-left-color:#458746}novo-tooltip[_ngcontent-%COMP%]   div.right[_ngcontent-%COMP%]:before{border-right-color:#383838;bottom:50%;left:0;margin-bottom:-6px;margin-left:-11px}novo-tooltip[_ngcontent-%COMP%]   div.right.error[_ngcontent-%COMP%]:before{border-right-color:#b34e4d}novo-tooltip[_ngcontent-%COMP%]   div.right.info[_ngcontent-%COMP%]:before{border-right-color:#3986ac}novo-tooltip[_ngcontent-%COMP%]   div.right.warning[_ngcontent-%COMP%]:before{border-right-color:#c09854}novo-tooltip[_ngcontent-%COMP%]   div.right.success[_ngcontent-%COMP%]:before{border-right-color:#458746}novo-tooltip[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:before{background:0 0;border:6px solid transparent;box-sizing:border-box;content:\"\";position:absolute}"], data: { animation: [
            trigger('state', [
                state('initial, void, hidden', style({ opacity: '0' })),
                state('visible', style({ opacity: '1' })),
                transition('* => visible', [
                    style({
                        opacity: 0,
                        visibility: 'visible',
                    }),
                    animate('0.3s ease-in'),
                ]),
                transition('* => hidden', [
                    style({
                        opacity: 1,
                        visibility: 'hidden',
                    }),
                    animate('0.3s ease-in'),
                ]),
            ]),
        ] } });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTooltip, [{
        type: Component,
        args: [{
                selector: 'novo-tooltip',
                templateUrl: './Tooltip.html',
                styleUrls: ['./Tooltip.scss'],
                animations: [
                    trigger('state', [
                        state('initial, void, hidden', style({ opacity: '0' })),
                        state('visible', style({ opacity: '1' })),
                        transition('* => visible', [
                            style({
                                opacity: 0,
                                visibility: 'visible',
                            }),
                            animate('0.3s ease-in'),
                        ]),
                        transition('* => hidden', [
                            style({
                                opacity: 1,
                                visibility: 'hidden',
                            }),
                            animate('0.3s ease-in'),
                        ]),
                    ]),
                ],
            }]
    }], null, null); })();

// NG
class TooltipDirective {
    constructor(overlay, viewContainerRef, elementRef) {
        this.overlay = overlay;
        this.viewContainerRef = viewContainerRef;
        this.elementRef = elementRef;
        this.position = 'top';
        this.type = 'normal';
        this.active = true;
        this.removeArrow = false;
        this.autoPosition = false;
    }
    isPosition(position) {
        return position.toLowerCase() === (this.position || '').toLowerCase();
    }
    isType(type) {
        return type.toLowerCase() === (this.type || '').toLowerCase();
    }
    isSize(size) {
        return size.toLowerCase() === (this.size || '').toLowerCase();
    }
    onMouseEnter() {
        if (this.tooltip && this.active && !this.always) {
            this.show();
        }
    }
    onMouseLeave() {
        if (this.overlayRef && !this.always) {
            this.hide();
            this.overlayRef.dispose();
        }
    }
    ngOnInit() {
        if (this.tooltip && this.always && this.active) {
            this.show();
        }
    }
    ngOnDestroy() {
        if (this.overlayRef && !this.always) {
            this.hide();
            this.overlayRef.dispose();
        }
    }
    show() {
        const overlayState = new OverlayConfig();
        overlayState.positionStrategy = this.getPosition();
        if (this.always) {
            overlayState.scrollStrategy = this.overlay.scrollStrategies.reposition();
        }
        else {
            overlayState.scrollStrategy = this.overlay.scrollStrategies.close();
        }
        overlayState.scrollStrategy.enable();
        this.overlayRef = this.overlay.create(overlayState);
        this.overlayRef.detach();
        this.portal = this.portal || new ComponentPortal(NovoTooltip, this.viewContainerRef);
        const tooltipInstance = this.overlayRef.attach(this.portal).instance;
        tooltipInstance.message = this.tooltip;
        tooltipInstance.tooltipType = this.type;
        tooltipInstance.rounded = this.rounded;
        tooltipInstance.size = this.size;
        tooltipInstance.preline = this.preline;
        tooltipInstance.noAnimate = this.noAnimate;
        tooltipInstance.position = this.removeArrow ? 'no-arrow' : this.position;
    }
    hide() {
        if (this.overlayRef) {
            this.overlayRef.detach();
        }
    }
    getPosition() {
        let strategy;
        let originPosition;
        let overlayPosition;
        let offsetX;
        let offsetY;
        switch (this.position) {
            case 'right':
                originPosition = { originX: 'end', originY: 'center' };
                overlayPosition = { overlayX: 'start', overlayY: 'center' };
                offsetX = 8;
                offsetY = 0;
                break;
            case 'bottom':
                originPosition = { originX: 'center', originY: 'bottom' };
                overlayPosition = { overlayX: 'center', overlayY: 'top' };
                offsetX = 0;
                offsetY = 8;
                break;
            case 'top':
                originPosition = { originX: 'center', originY: 'top' };
                overlayPosition = { overlayX: 'center', overlayY: 'bottom' };
                offsetX = 0;
                offsetY = -8;
                break;
            case 'left':
                originPosition = { originX: 'start', originY: 'center' };
                overlayPosition = { overlayX: 'end', overlayY: 'center' };
                offsetX = -8;
                offsetY = 0;
                break;
            case 'top-left':
                originPosition = { originX: 'start', originY: 'top' };
                overlayPosition = { overlayX: 'end', overlayY: 'bottom' };
                offsetX = 8;
                offsetY = -8;
                break;
            case 'bottom-left':
                originPosition = { originX: 'start', originY: 'bottom' };
                overlayPosition = { overlayX: 'end', overlayY: 'top' };
                offsetX = 8;
                offsetY = 8;
                break;
            case 'top-right':
                originPosition = { originX: 'end', originY: 'top' };
                overlayPosition = { overlayX: 'start', overlayY: 'bottom' };
                offsetX = -8;
                offsetY = -8;
                break;
            case 'bottom-right':
                originPosition = { originX: 'end', originY: 'bottom' };
                overlayPosition = { overlayX: 'start', overlayY: 'top' };
                offsetX = -8;
                offsetY = 8;
                break;
            default:
                break;
        }
        strategy = this.overlay
            .position()
            .connectedTo(this.elementRef, originPosition, overlayPosition)
            .withOffsetX(offsetX)
            .withOffsetY(offsetY);
        return this.autoPosition ? this.withFallbackStrategy(strategy) : strategy;
    }
    withFallbackStrategy(strategy) {
        strategy
            .withFallbackPosition({ originX: 'center', originY: 'bottom' }, { overlayX: 'center', overlayY: 'top' }, 0, 8)
            .withFallbackPosition({ originX: 'end', originY: 'bottom' }, { overlayX: 'end', overlayY: 'top' }, 0, 8)
            .withFallbackPosition({ originX: 'end', originY: 'center' }, { overlayX: 'start', overlayY: 'center' }, 8, 0)
            .withFallbackPosition({ originX: 'start', originY: 'center' }, { overlayX: 'end', overlayY: 'center' }, -8, 0)
            .withFallbackPosition({ originX: 'center', originY: 'top' }, { overlayX: 'center', overlayY: 'bottom' }, 0, -8)
            .withFallbackPosition({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }, 0, 8)
            .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' }, 0, -8)
            .withFallbackPosition({ originX: 'end', originY: 'top' }, { overlayX: 'end', overlayY: 'bottom' }, 0, -8)
            .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'end', overlayY: 'bottom' }, 8, -8)
            .withFallbackPosition({ originX: 'start', originY: 'bottom' }, { overlayX: 'end', overlayY: 'top' }, 8, 8)
            .withFallbackPosition({ originX: 'end', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' }, -8, -8)
            .withFallbackPosition({ originX: 'end', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }, -8, 8);
        return strategy;
    }
}
TooltipDirective.ɵfac = function TooltipDirective_Factory(t) { return new (t || TooltipDirective)(ɵɵdirectiveInject(Overlay), ɵɵdirectiveInject(ViewContainerRef), ɵɵdirectiveInject(ElementRef)); };
TooltipDirective.ɵdir = ɵɵdefineDirective({ type: TooltipDirective, selectors: [["", "tooltip", ""]], hostVars: 1, hostBindings: function TooltipDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵɵlistener("mouseenter", function TooltipDirective_mouseenter_HostBindingHandler() { return ctx.onMouseEnter(); })("mouseleave", function TooltipDirective_mouseleave_HostBindingHandler() { return ctx.onMouseLeave(); });
    } if (rf & 2) {
        ɵɵattribute("data-hint", ctx.tooltip);
    } }, inputs: { tooltip: "tooltip", position: ["tooltipPosition", "position"], type: ["tooltipType", "type"], size: ["tooltipSize", "size"], bounce: ["tooltipBounce", "bounce"], noAnimate: ["tooltipNoAnimate", "noAnimate"], rounded: ["tooltipRounded", "rounded"], always: ["tooltipAlways", "always"], active: ["tooltipActive", "active"], preline: ["tooltipPreline", "preline"], removeArrow: ["removeTooltipArrow", "removeArrow"], autoPosition: ["tooltipAutoPosition", "autoPosition"] } });
/*@__PURE__*/ (function () { ɵsetClassMetadata(TooltipDirective, [{
        type: Directive,
        args: [{
                selector: '[tooltip]',
                host: {
                    '[attr.data-hint]': 'tooltip',
                },
            }]
    }], function () { return [{ type: Overlay }, { type: ViewContainerRef }, { type: ElementRef }]; }, { tooltip: [{
            type: Input
        }], position: [{
            type: Input,
            args: ['tooltipPosition']
        }], type: [{
            type: Input,
            args: ['tooltipType']
        }], size: [{
            type: Input,
            args: ['tooltipSize']
        }], bounce: [{
            type: Input,
            args: ['tooltipBounce']
        }], noAnimate: [{
            type: Input,
            args: ['tooltipNoAnimate']
        }], rounded: [{
            type: Input,
            args: ['tooltipRounded']
        }], always: [{
            type: Input,
            args: ['tooltipAlways']
        }], active: [{
            type: Input,
            args: ['tooltipActive']
        }], preline: [{
            type: Input,
            args: ['tooltipPreline']
        }], removeArrow: [{
            type: Input,
            args: ['removeTooltipArrow']
        }], autoPosition: [{
            type: Input,
            args: ['tooltipAutoPosition']
        }], onMouseEnter: [{
            type: HostListener,
            args: ['mouseenter']
        }], onMouseLeave: [{
            type: HostListener,
            args: ['mouseleave']
        }] }); })();

// NG2
const _c0$g = ["input"];
const _c1$5 = ["*"];
// Value accessor for the component (supports ngModel)
const SEARCH_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoSearchBoxElement),
    multi: true,
};
class NovoSearchBoxElement {
    constructor(element, labels, _changeDetectorRef, _zone) {
        this.element = element;
        this.labels = labels;
        this._changeDetectorRef = _changeDetectorRef;
        this._zone = _zone;
        this.icon = 'search';
        this.position = 'bottom-left';
        this.placeholder = 'Search...';
        this.alwaysOpen = false;
        this.color = 'positive';
        this.closeOnSelect = true;
        this.searchChanged = new EventEmitter();
        this.focused = false;
        /** View -> model callback called when value changes */
        this._onChange = () => { };
        /** View -> model callback called when autocomplete has been touched */
        this._onTouched = () => { };
    }
    /**
     * @name showFasterFind
     * @description This function shows the picker and adds the active class (for animation)
     */
    showSearch(event, forceClose = false) {
        if (!this.panelOpen) {
            // Reset search
            // Set focus on search
            setTimeout(() => {
                const element = this.input.nativeElement;
                if (element) {
                    element.focus();
                }
            }, 10);
        }
        else {
            this.closePanel();
        }
    }
    onFocus() {
        this._zone.run(() => {
            this.focused = true;
            this.openPanel();
        });
    }
    onBlur() {
        this.focused = false;
    }
    /** BEGIN: Convenient Panel Methods. */
    openPanel() {
        this.overlay.openPanel();
    }
    closePanel() {
        this.overlay.closePanel();
    }
    get panelOpen() {
        return this.overlay && this.overlay.panelOpen;
    }
    get active() {
        return this.panelOpen || this.alwaysOpen;
    }
    /** END: Convenient Panel Methods. */
    _handleKeydown(event) {
        if ((event.key === "Escape" /* Escape */ || event.key === "Enter" /* Enter */ || event.key === "Tab" /* Tab */) && this.panelOpen) {
            this.closePanel();
            event.stopPropagation();
        }
    }
    _handleInput(event) {
        if (document.activeElement === event.target) {
            this.value = event.target.value;
            this._onChange(event.target.value);
            if (this.debounceSearchChange) {
                clearTimeout(this.debounceSearchChange);
            }
            this.debounceSearchChange = setTimeout(() => {
                this.searchChanged.emit(event.target.value);
            }, 400);
        }
    }
    writeValue(value) {
        this._setValue(value);
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    _setValue(value) {
        this.value = value;
        let toDisplay = value;
        if (value && this.displayField) {
            toDisplay = value.hasOwnProperty(this.displayField) ? value[this.displayField] : value;
        }
        // Simply falling back to an empty string if the display value is falsy does not work properly.
        // The display value can also be the number zero and shouldn't fall back to an empty string.
        this.displayValue = toDisplay ? toDisplay : '';
        this.input.nativeElement.value = this.displayValue;
        this._changeDetectorRef.markForCheck();
    }
    /**
     * This method closes the panel, and if a value is specified, also sets the associated
     * control to that value. It will also mark the control as dirty if this interaction
     * stemmed from the user.
     */
    setValueAndClose(event) {
        if (event && event.value) {
            this._setValue(event.value);
            this._onChange(event.value);
        }
        this.closePanel();
    }
    /**
     * Clear any previous selected option and emit a selection change event for this option
     */
    clearValue(skip) {
        this.writeValue(null);
        this._onChange(null);
    }
}
NovoSearchBoxElement.ɵfac = function NovoSearchBoxElement_Factory(t) { return new (t || NovoSearchBoxElement)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(NgZone)); };
NovoSearchBoxElement.ɵcmp = ɵɵdefineComponent({ type: NovoSearchBoxElement, selectors: [["novo-search"]], viewQuery: function NovoSearchBoxElement_Query(rf, ctx) { if (rf & 1) {
        ɵɵviewQuery(NovoOverlayTemplateComponent, true);
        ɵɵstaticViewQuery(_c0$g, true);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.overlay = _t.first);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.input = _t.first);
    } }, hostVars: 6, hostBindings: function NovoSearchBoxElement_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵclassProp("always-open", ctx.alwaysOpen)("focused", ctx.focused)("active", ctx.active);
    } }, inputs: { name: "name", icon: "icon", position: "position", placeholder: "placeholder", alwaysOpen: "alwaysOpen", theme: "theme", color: "color", closeOnSelect: "closeOnSelect", displayField: "displayField", displayValue: "displayValue", hint: "hint" }, outputs: { searchChanged: "searchChanged" }, features: [ɵɵProvidersFeature([SEARCH_VALUE_ACCESSOR])], ngContentSelectors: _c1$5, decls: 6, vars: 8, consts: [["tooltipPosition", "bottom", 3, "tooltip", "click"], ["type", "text", "data-automation-id", "novo-search-input", 3, "focus", "blur", "keydown", "input"], ["input", ""], [3, "parent", "closeOnSelect", "position", "select", "closing"]], template: function NovoSearchBoxElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵelementStart(0, "novo-icon", 0);
        ɵɵlistener("click", function NovoSearchBoxElement_Template_novo_icon_click_0_listener($event) { return ctx.showSearch($event); });
        ɵɵtext(1);
        ɵɵelementEnd();
        ɵɵelementStart(2, "input", 1, 2);
        ɵɵlistener("focus", function NovoSearchBoxElement_Template_input_focus_2_listener() { return ctx.onFocus(); })("blur", function NovoSearchBoxElement_Template_input_blur_2_listener() { return ctx.onBlur(); })("keydown", function NovoSearchBoxElement_Template_input_keydown_2_listener($event) { return ctx._handleKeydown($event); })("input", function NovoSearchBoxElement_Template_input_input_2_listener($event) { return ctx._handleInput($event); });
        ɵɵelementEnd();
        ɵɵelementStart(4, "novo-overlay-template", 3);
        ɵɵlistener("select", function NovoSearchBoxElement_Template_novo_overlay_template_select_4_listener() { return ctx.closePanel(); })("closing", function NovoSearchBoxElement_Template_novo_overlay_template_closing_4_listener() { return ctx.onBlur(); });
        ɵɵprojection(5);
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵproperty("tooltip", ctx.hint);
        ɵɵadvance(1);
        ɵɵtextInterpolate(ctx.icon);
        ɵɵadvance(1);
        ɵɵattribute("name", ctx.name)("value", ctx.displayValue)("placeholder", ctx.placeholder);
        ɵɵadvance(2);
        ɵɵproperty("parent", ctx.element)("closeOnSelect", ctx.closeOnSelect)("position", ctx.position);
    } }, directives: [NovoIconComponent, TooltipDirective, NovoOverlayTemplateComponent], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSearchBoxElement, [{
        type: Component,
        args: [{
                selector: 'novo-search',
                providers: [SEARCH_VALUE_ACCESSOR],
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
    <!-- SEARCH ICON -->
    <novo-icon (click)="showSearch($event)" [tooltip]="hint" tooltipPosition="bottom">{{ icon }}</novo-icon>
    <!-- SEARCH INPUT -->
    <input
      type="text"
      [attr.name]="name"
      [attr.value]="displayValue"
      [attr.placeholder]="placeholder"
      (focus)="onFocus()"
      (blur)="onBlur()"
      (keydown)="_handleKeydown($event)"
      (input)="_handleInput($event)"
      #input
      data-automation-id="novo-search-input"
    />
    <!-- SEARCH OVERLAY -->
    <novo-overlay-template
      [parent]="element"
      [closeOnSelect]="closeOnSelect"
      [position]="position"
      (select)="closePanel()"
      (closing)="onBlur()"
    >
      <ng-content></ng-content>
    </novo-overlay-template>
  `,
            }]
    }], function () { return [{ type: ElementRef }, { type: NovoLabelService }, { type: ChangeDetectorRef }, { type: NgZone }]; }, { name: [{
            type: Input
        }], icon: [{
            type: Input
        }], position: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], alwaysOpen: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['class.always-open']
        }], theme: [{
            type: Input
        }], color: [{
            type: Input
        }], closeOnSelect: [{
            type: Input
        }], displayField: [{
            type: Input
        }], displayValue: [{
            type: Input
        }], hint: [{
            type: Input
        }], searchChanged: [{
            type: Output
        }], focused: [{
            type: HostBinding,
            args: ['class.focused']
        }], overlay: [{
            type: ViewChild,
            args: [NovoOverlayTemplateComponent]
        }], input: [{
            type: ViewChild,
            args: ['input', { static: true }]
        }], active: [{
            type: HostBinding,
            args: ['class.active']
        }] }); })();

function BreadcrumbItemElement_ng_container_0_ng_template_3_Template(rf, ctx) { }
function BreadcrumbItemElement_ng_container_0_div_7_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 13);
    ɵɵelementStart(1, "novo-search", 14);
    ɵɵlistener("searchFn", function BreadcrumbItemElement_ng_container_0_div_7_Template_novo_search_searchFn_1_listener($event) { ɵɵrestoreView(_r13); const ctx_r12 = ɵɵnextContext(2); return ctx_r12.searchEvent($event); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    ɵɵadvance(1);
    ɵɵclassMap("search-in-dropdown");
} }
function BreadcrumbItemElement_ng_container_0_item_8_a_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "a", 18);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const item_r14 = ɵɵnextContext().$implicit;
    ɵɵproperty("href", item_r14.link, ɵɵsanitizeUrl)("target", item_r14.target ? item_r14.target : "_self");
    ɵɵadvance(1);
    ɵɵtextInterpolate(item_r14.name);
} }
function BreadcrumbItemElement_ng_container_0_item_8_a_2_Template(rf, ctx) { if (rf & 1) {
    const _r19 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "a", 19);
    ɵɵlistener("click", function BreadcrumbItemElement_ng_container_0_item_8_a_2_Template_a_click_0_listener($event) { ɵɵrestoreView(_r19); const item_r14 = ɵɵnextContext().$implicit; const ctx_r18 = ɵɵnextContext(2); return ctx_r18.navigateTo($event, item_r14); });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const item_r14 = ɵɵnextContext().$implicit;
    ɵɵproperty("target", item_r14.target)("href", item_r14.link, ɵɵsanitizeUrl);
    ɵɵadvance(1);
    ɵɵtextInterpolate(item_r14.name);
} }
function BreadcrumbItemElement_ng_container_0_item_8_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "item", 15);
    ɵɵtemplate(1, BreadcrumbItemElement_ng_container_0_item_8_a_1_Template, 2, 3, "a", 16);
    ɵɵtemplate(2, BreadcrumbItemElement_ng_container_0_item_8_a_2_Template, 2, 3, "a", 17);
    ɵɵelementEnd();
} if (rf & 2) {
    const item_r14 = ctx.$implicit;
    ɵɵpropertyInterpolate("title", item_r14.name);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !item_r14.linkType || item_r14.linkType === "hrefLink");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", item_r14.linkType === "routerLink");
} }
const _c0$h = function (a0) { return { "novo-breadcrumb-item-active": a0 }; };
function BreadcrumbItemElement_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵelementStart(1, "span", 6, 7);
    ɵɵtemplate(3, BreadcrumbItemElement_ng_container_0_ng_template_3_Template, 0, 0, "ng-template", 8);
    ɵɵelementStart(4, "novo-dropdown");
    ɵɵelement(5, "button", 9);
    ɵɵelementStart(6, "list", 10);
    ɵɵtemplate(7, BreadcrumbItemElement_ng_container_0_div_7_Template, 2, 2, "div", 11);
    ɵɵtemplate(8, BreadcrumbItemElement_ng_container_0_item_8_Template, 3, 3, "item", 12);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    const _r1 = ɵɵreference(2);
    ɵɵadvance(1);
    ɵɵproperty("ngClass", ɵɵpureFunction1(4, _c0$h, ctx_r0.isOpen));
    ɵɵadvance(2);
    ɵɵproperty("ngTemplateOutlet", _r1);
    ɵɵadvance(4);
    ɵɵproperty("ngIf", ctx_r0.isSearch);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r0.menuListDisplay);
} }
function BreadcrumbItemElement_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 20);
    ɵɵprojection(1);
    ɵɵelementEnd();
} }
function BreadcrumbItemElement_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div");
    ɵɵtext(1, "test");
    ɵɵelementEnd();
} }
function BreadcrumbItemElement_ng_template_6_Template(rf, ctx) { }
function BreadcrumbItemElement_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 3);
    ɵɵtext(1, " / ");
    ɵɵelementEnd();
} }
const _c1$6 = function (a0) { return { $implicit: a0 }; };
const _c2$2 = ["*"];
class BreadcrumbItemElement {
    constructor(breadcrumbComponent, breadcrumbService) {
        this.breadcrumbComponent = breadcrumbComponent;
        this.breadcrumbService = breadcrumbService;
        this.showMenu = false;
        this.isSearch = false;
        this.toggleEvent = new EventEmitter();
    }
    ngOnInit() {
        this.menuListDisplay = this.menuList;
    }
    onToggle($event) {
        this.isOpen = $event;
        this.toggleEvent.emit($event);
    }
    searchEvent($event) {
        if (this.menuList) {
            this.menuListDisplay = this.menuList.filter((item) => item.name.toLowerCase().includes($event.toLowerCase()));
        }
    }
    navigateTo($event, item) {
        this.breadcrumbService.navigateTo($event, item);
    }
}
BreadcrumbItemElement.ɵfac = function BreadcrumbItemElement_Factory(t) { return new (t || BreadcrumbItemElement)(ɵɵdirectiveInject(BreadcrumbElement), ɵɵdirectiveInject(BreadcrumbService)); };
BreadcrumbItemElement.ɵcmp = ɵɵdefineComponent({ type: BreadcrumbItemElement, selectors: [["novo-breadcrumb-item"]], inputs: { showMenu: "showMenu", customMenuTemplate: "customMenuTemplate", menuList: "menuList", isSearch: "isSearch" }, outputs: { toggleEvent: "toggleEvent" }, ngContentSelectors: _c2$2, decls: 9, vars: 6, consts: [[4, "ngIf", "ngIfElse"], ["breadcrumbContentTpl", ""], ["dropDownMenuTpl", ""], [1, "novo-breadcrumb-separator"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], ["defaultSeparator", ""], [1, "novo-dropdown-no-border", "novo-dropdown-origin", "novo-breadcrumb-dropdown-origin", 3, "ngClass"], ["origin", ""], [3, "ngTemplateOutlet"], ["theme", "icon", "icon", "collapse", "size", "small"], [1, "novo-breadcrumb-dropdown-menu"], ["class", "dropdown-search-container", 4, "ngIf"], [3, "title", 4, "ngFor", "ngForOf"], [1, "dropdown-search-container"], ["alwaysOpen", "true", 3, "searchFn"], [3, "title"], ["rel", "noopener", 3, "href", "target", 4, "ngIf"], ["rel", "noopener", 3, "target", "href", "click", 4, "ngIf"], ["rel", "noopener", 3, "href", "target"], ["rel", "noopener", 3, "target", "href", "click"], [1, "novo-breadcrumb-item"]], template: function BreadcrumbItemElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵtemplate(0, BreadcrumbItemElement_ng_container_0_Template, 9, 6, "ng-container", 0);
        ɵɵtemplate(1, BreadcrumbItemElement_ng_template_1_Template, 2, 0, "ng-template", null, 1, ɵɵtemplateRefExtractor);
        ɵɵtemplate(3, BreadcrumbItemElement_ng_template_3_Template, 2, 0, "ng-template", null, 2, ɵɵtemplateRefExtractor);
        ɵɵelementStart(5, "span", 3);
        ɵɵtemplate(6, BreadcrumbItemElement_ng_template_6_Template, 0, 0, "ng-template", 4);
        ɵɵelementEnd();
        ɵɵtemplate(7, BreadcrumbItemElement_ng_template_7_Template, 2, 0, "ng-template", null, 5, ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r1 = ɵɵreference(2);
        const _r6 = ɵɵreference(8);
        ɵɵproperty("ngIf", ctx.showMenu)("ngIfElse", _r1);
        ɵɵadvance(6);
        ɵɵproperty("ngTemplateOutlet", ctx.breadcrumbComponent.separatorIcon ? ctx.breadcrumbComponent.separatorIcon : _r6)("ngTemplateOutletContext", ɵɵpureFunction1(4, _c1$6, ctx));
    } }, directives: [NgIf, NgTemplateOutlet, NgClass, NovoDropdownElement, NovoButtonElement, NovoDropdownListElement, NgForOf, NovoSearchBoxElement, NovoItemElement], styles: ["@-webkit-keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}@keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}.novo-breadcrumb-font-style[_ngcontent-%COMP%], [_nghost-%COMP%]   .novo-breadcrumb-item[_ngcontent-%COMP%], [_nghost-%COMP%]   .novo-breadcrumb-item[_ngcontent-%COMP%]     a, [_nghost-%COMP%]   .novo-breadcrumb-separator[_ngcontent-%COMP%]{color:inherit;display:inline;font-size:1.2rem;font-weight:400;line-height:1.5rem}[_nghost-%COMP%], [_nghost-%COMP%]   .novo-breadcrumb-item[_ngcontent-%COMP%]{align-items:center;display:flex;flex-flow:row nowrap}[_nghost-%COMP%]   .novo-breadcrumb-item[_ngcontent-%COMP%]{cursor:auto}[_nghost-%COMP%]   .novo-breadcrumb-item[_ngcontent-%COMP%]     a:hover{text-decoration:none}[_nghost-%COMP%]   .novo-breadcrumb-item[_ngcontent-%COMP%]     a{color:#4a89dc;cursor:pointer}[_nghost-%COMP%]   .novo-breadcrumb-item[_ngcontent-%COMP%]     a:focus{text-decoration:none}[_nghost-%COMP%]   .novo-breadcrumb-down-icon[_ngcontent-%COMP%]{cursor:pointer;display:inline-block;height:16px;margin-right:-5px;outline:none;text-align:center;vertical-align:middle;width:16px}[_nghost-%COMP%]   .novo-breadcrumb-down-icon[_ngcontent-%COMP%]:hover   svg[_ngcontent-%COMP%]   g[_ngcontent-%COMP%]   polygon[_ngcontent-%COMP%]{fill:#3d464d}[_nghost-%COMP%]   .novo-breadcrumb-item-active[_ngcontent-%COMP%]{color:#3d464d}[_nghost-%COMP%]   .novo-breadcrumb-item-active[_ngcontent-%COMP%]     a{color:#3d464d;text-decoration:none}[_nghost-%COMP%]   .novo-breadcrumb-item-active[_ngcontent-%COMP%]   svg[_ngcontent-%COMP%]   g[_ngcontent-%COMP%]   polygon[_ngcontent-%COMP%]{fill:#3d464d}[_nghost-%COMP%]   .novo-breadcrumb-item-active[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{color:#3d464d}[_nghost-%COMP%]   .novo-breadcrumb-separator[_ngcontent-%COMP%]{margin:0 3px}[_nghost-%COMP%]   .novo-breadcrumb-dropdown-menu[_ngcontent-%COMP%]{max-width:200px;padding:10px 0}[_nghost-%COMP%]   .novo-breadcrumb-dropdown-menu[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]{cursor:pointer;font-size:12px;line-height:36px;overflow:hidden;padding:0 15px;text-overflow:ellipsis;white-space:nowrap;width:200px}[_nghost-%COMP%]   .novo-breadcrumb-dropdown-menu[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{color:#3d464d;display:inline-block;line-height:36px;width:170px}[_nghost-%COMP%]   .novo-breadcrumb-dropdown-menu[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:focus{text-decoration:none}[_nghost-%COMP%]   .novo-breadcrumb-dropdown-menu[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]:hover{background:#bebebe}[_nghost-%COMP%]   .novo-breadcrumb-dropdown-menu[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]:hover   a[_ngcontent-%COMP%]{text-decoration:none}[_nghost-%COMP%]   .novo-search-container[_ngcontent-%COMP%]{max-width:200px}[_nghost-%COMP%]   span.novo-breadcrumb-dropdown-origin[_ngcontent-%COMP%]{display:inline-flex;min-width:unset;padding:0}[_nghost-%COMP%]   novo-search[_ngcontent-%COMP%]{width:100%}"], changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(BreadcrumbItemElement, [{
        type: Component,
        args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                selector: 'novo-breadcrumb-item',
                templateUrl: './BreadcrumbItem.html',
                styleUrls: ['./BreadcrumbItem.scss'],
            }]
    }], function () { return [{ type: BreadcrumbElement }, { type: BreadcrumbService }]; }, { showMenu: [{
            type: Input
        }], customMenuTemplate: [{
            type: Input
        }], menuList: [{
            type: Input
        }], isSearch: [{
            type: Input
        }], toggleEvent: [{
            type: Output
        }] }); })();

// NG2
class NovoOverlayModule {
}
NovoOverlayModule.ɵmod = ɵɵdefineNgModule({ type: NovoOverlayModule });
NovoOverlayModule.ɵinj = ɵɵdefineInjector({ factory: function NovoOverlayModule_Factory(t) { return new (t || NovoOverlayModule)(); }, imports: [[CommonModule, FormsModule, OverlayModule, ScrollingModule], ScrollingModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoOverlayModule, { declarations: [NovoOverlayTemplateComponent], imports: [CommonModule, FormsModule, OverlayModule, ScrollingModule], exports: [NovoOverlayTemplateComponent, ScrollingModule] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoOverlayModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, FormsModule, OverlayModule, ScrollingModule],
                declarations: [NovoOverlayTemplateComponent],
                exports: [NovoOverlayTemplateComponent, ScrollingModule],
            }]
    }], null, null); })();

// NG2
class NovoDropdownModule {
}
NovoDropdownModule.ɵmod = ɵɵdefineNgModule({ type: NovoDropdownModule });
NovoDropdownModule.ɵinj = ɵɵdefineInjector({ factory: function NovoDropdownModule_Factory(t) { return new (t || NovoDropdownModule)(); }, imports: [[NovoOverlayModule, NovoOptionModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoDropdownModule, { declarations: [NovoDropdownElement, NovoItemElement, NovoDropdownListElement, NovoDropDownItemHeaderElement], imports: [NovoOverlayModule, NovoOptionModule], exports: [NovoDropdownElement, NovoItemElement, NovoDropdownListElement, NovoDropDownItemHeaderElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDropdownModule, [{
        type: NgModule,
        args: [{
                imports: [NovoOverlayModule, NovoOptionModule],
                declarations: [NovoDropdownElement, NovoItemElement, NovoDropdownListElement, NovoDropDownItemHeaderElement],
                exports: [NovoDropdownElement, NovoItemElement, NovoDropdownListElement, NovoDropDownItemHeaderElement],
            }]
    }], null, null); })();

class NovoIconModule {
}
NovoIconModule.ɵmod = ɵɵdefineNgModule({ type: NovoIconModule });
NovoIconModule.ɵinj = ɵɵdefineInjector({ factory: function NovoIconModule_Factory(t) { return new (t || NovoIconModule)(); }, imports: [[ObserversModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoIconModule, { declarations: [NovoIconComponent], imports: [ObserversModule], exports: [NovoIconComponent] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoIconModule, [{
        type: NgModule,
        args: [{
                imports: [ObserversModule],
                exports: [NovoIconComponent],
                declarations: [NovoIconComponent],
            }]
    }], null, null); })();

// NG2
class NovoListModule {
}
NovoListModule.ɵmod = ɵɵdefineNgModule({ type: NovoListModule });
NovoListModule.ɵinj = ɵɵdefineInjector({ factory: function NovoListModule_Factory(t) { return new (t || NovoListModule)(); }, imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoListModule, { declarations: [NovoListElement,
        NovoListItemElement,
        NovoItemAvatarElement,
        NovoItemTitleElement,
        NovoItemContentElement,
        NovoItemEndElement,
        NovoItemHeaderElement,
        NovoItemDateElement], imports: [CommonModule], exports: [NovoListElement,
        NovoListItemElement,
        NovoItemAvatarElement,
        NovoItemTitleElement,
        NovoItemHeaderElement,
        NovoItemContentElement,
        NovoItemEndElement,
        NovoItemDateElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoListModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [
                    NovoListElement,
                    NovoListItemElement,
                    NovoItemAvatarElement,
                    NovoItemTitleElement,
                    NovoItemContentElement,
                    NovoItemEndElement,
                    NovoItemHeaderElement,
                    NovoItemDateElement,
                ],
                exports: [
                    NovoListElement,
                    NovoListItemElement,
                    NovoItemAvatarElement,
                    NovoItemTitleElement,
                    NovoItemHeaderElement,
                    NovoItemContentElement,
                    NovoItemEndElement,
                    NovoItemDateElement,
                ],
            }]
    }], null, null); })();

// NG2
class NovoLoadingModule {
}
NovoLoadingModule.ɵmod = ɵɵdefineNgModule({ type: NovoLoadingModule });
NovoLoadingModule.ɵinj = ɵɵdefineInjector({ factory: function NovoLoadingModule_Factory(t) { return new (t || NovoLoadingModule)(); }, imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoLoadingModule, { declarations: [NovoLoadingElement, NovoSpinnerElement, NovoIsLoadingDirective, NovoLoadedDirective, NovoSkeletonDirective], imports: [CommonModule], exports: [NovoLoadingElement, NovoSpinnerElement, NovoIsLoadingDirective, NovoLoadedDirective, NovoSkeletonDirective] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoLoadingModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [NovoLoadingElement, NovoSpinnerElement, NovoIsLoadingDirective, NovoLoadedDirective, NovoSkeletonDirective],
                exports: [NovoLoadingElement, NovoSpinnerElement, NovoIsLoadingDirective, NovoLoadedDirective, NovoSkeletonDirective],
            }]
    }], null, null); })();

// NG2
const _c0$i = ["*"];
// Value accessor for the component (supports ngModel)
const SWITCH_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoSwitchElement),
    multi: true,
};
class NovoSwitchElement {
    constructor(ref) {
        this.ref = ref;
        this.onChange = new EventEmitter();
        this._disabled = false;
        this.onModelChange = () => { };
        this.onModelTouched = () => { };
    }
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = !value;
    }
    onKeydown(event) {
        if (event.key === " " /* Space */) {
            event.preventDefault();
            this.toggle(event);
        }
    }
    toggle(event) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        if (this.disabled) {
            return;
        }
        this.model = !this.model;
        this.onChange.next(this.model);
        this.onModelChange(this.model);
        this.ref.markForCheck();
    }
    writeValue(model) {
        this.model = model;
        this.ref.markForCheck();
    }
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
}
NovoSwitchElement.ɵfac = function NovoSwitchElement_Factory(t) { return new (t || NovoSwitchElement)(ɵɵdirectiveInject(ChangeDetectorRef)); };
NovoSwitchElement.ɵcmp = ɵɵdefineComponent({ type: NovoSwitchElement, selectors: [["novo-switch"]], hostAttrs: ["role", "checkbox"], hostVars: 4, hostBindings: function NovoSwitchElement_HostBindings(rf, ctx) { if (rf & 1) {
        ɵɵlistener("keydown", function NovoSwitchElement_keydown_HostBindingHandler($event) { return ctx.onKeydown($event); });
    } if (rf & 2) {
        ɵɵattribute("aria-checked", ctx.model)("aria-disabled", ctx.disabled);
        ɵɵclassMap(ctx.theme);
    } }, inputs: { theme: "theme", disabled: "disabled" }, outputs: { onChange: "onChange" }, features: [ɵɵProvidersFeature([SWITCH_VALUE_ACCESSOR])], ngContentSelectors: _c0$i, decls: 7, vars: 0, consts: [[3, "click"], [1, "novo-switch-container"], [1, "novo-switch-bar"], [1, "novo-switch-thumb-container"], [1, "novo-switch-thumb"], [1, "novo-switch-label"]], template: function NovoSwitchElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵelementStart(0, "div", 0);
        ɵɵlistener("click", function NovoSwitchElement_Template_div_click_0_listener($event) { return ctx.toggle($event); });
        ɵɵelementStart(1, "div", 1);
        ɵɵelement(2, "div", 2);
        ɵɵelementStart(3, "div", 3);
        ɵɵelement(4, "div", 4);
        ɵɵelementEnd();
        ɵɵelementEnd();
        ɵɵelementStart(5, "div", 5);
        ɵɵprojection(6);
        ɵɵelementEnd();
        ɵɵelementEnd();
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSwitchElement, [{
        type: Component,
        args: [{
                selector: 'novo-switch',
                providers: [SWITCH_VALUE_ACCESSOR],
                template: `
    <div (click)="toggle($event)">
      <div class="novo-switch-container">
        <div class="novo-switch-bar"></div>
        <div class="novo-switch-thumb-container">
          <div class="novo-switch-thumb"></div>
        </div>
      </div>
      <div class="novo-switch-label"><ng-content></ng-content></div>
    </div>
  `,
                host: {
                    role: 'checkbox',
                    '[attr.aria-checked]': 'model',
                    '[attr.aria-disabled]': 'disabled',
                    '(keydown)': 'onKeydown($event)',
                    '[class]': 'theme',
                },
            }]
    }], function () { return [{ type: ChangeDetectorRef }]; }, { theme: [{
            type: Input
        }], onChange: [{
            type: Output
        }], disabled: [{
            type: Input,
            args: ['disabled']
        }] }); })();

// NG2
class NovoSwitchModule {
}
NovoSwitchModule.ɵmod = ɵɵdefineNgModule({ type: NovoSwitchModule });
NovoSwitchModule.ɵinj = ɵɵdefineInjector({ factory: function NovoSwitchModule_Factory(t) { return new (t || NovoSwitchModule)(); }, imports: [[CommonModule, FormsModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoSwitchModule, { declarations: [NovoSwitchElement], imports: [CommonModule, FormsModule], exports: [NovoSwitchElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSwitchModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, FormsModule],
                declarations: [NovoSwitchElement],
                exports: [NovoSwitchElement],
            }]
    }], null, null); })();

// NG2
function ChecklistPickerResults_novo_loading_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-loading", 4);
} }
function ChecklistPickerResults_ul_1_span_1_li_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "li", 8);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const section_r5 = ɵɵnextContext().$implicit;
    ɵɵadvance(1);
    ɵɵtextInterpolate(section_r5.label || section_r5.type);
} }
const _c0$j = function (a0) { return { checked: a0 }; };
const _c1$7 = function (a0, a1, a2) { return { "bhi-checkbox-empty": a0, "bhi-checkbox-filled": a1, "bhi-checkbox-indeterminate": a2 }; };
function ChecklistPickerResults_ul_1_span_1_li_2_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "li", 9);
    ɵɵlistener("click", function ChecklistPickerResults_ul_1_span_1_li_2_Template_li_click_0_listener($event) { ɵɵrestoreView(_r13); const match_r10 = ctx.$implicit; const ctx_r12 = ɵɵnextContext(3); return ctx_r12.selectMatch($event, match_r10); })("mouseenter", function ChecklistPickerResults_ul_1_span_1_li_2_Template_li_mouseenter_0_listener() { ɵɵrestoreView(_r13); const match_r10 = ctx.$implicit; const ctx_r14 = ɵɵnextContext(3); return ctx_r14.selectActive(match_r10); });
    ɵɵelementStart(1, "label");
    ɵɵelement(2, "i", 10);
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const match_r10 = ctx.$implicit;
    const ctx_r8 = ɵɵnextContext(3);
    ɵɵclassProp("active", match_r10 === ctx_r8.activeMatch);
    ɵɵproperty("ngClass", ɵɵpureFunction1(5, _c0$j, match_r10.checked));
    ɵɵadvance(2);
    ɵɵproperty("ngClass", ɵɵpureFunction3(7, _c1$7, !match_r10.checked, match_r10.checked, match_r10.indeterminate));
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", match_r10.label, " ");
} }
function ChecklistPickerResults_ul_1_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵtemplate(1, ChecklistPickerResults_ul_1_span_1_li_1_Template, 2, 1, "li", 6);
    ɵɵtemplate(2, ChecklistPickerResults_ul_1_span_1_li_2_Template, 4, 11, "li", 7);
    ɵɵelementEnd();
} if (rf & 2) {
    const section_r5 = ctx.$implicit;
    ɵɵadvance(1);
    ɵɵproperty("ngIf", section_r5.data.length > 0);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", section_r5.data);
} }
function ChecklistPickerResults_ul_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "ul");
    ɵɵtemplate(1, ChecklistPickerResults_ul_1_span_1_Template, 3, 2, "span", 5);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r1.matches);
} }
function ChecklistPickerResults_p_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 11);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r2.labels.pickerError);
} }
function ChecklistPickerResults_p_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 12);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r3.labels.pickerEmpty);
} }
/**
 * @description This is the actual list of matches that gets injected into the DOM.
 */
class ChecklistPickerResults extends BasePickerResults {
    constructor(element, labels, ref) {
        super(element, ref);
        this.labels = labels;
    }
    search() {
        const options = this.config.options;
        // only set this the first time
        return from(new Promise((resolve, reject) => {
            // Check if there is match data
            if (options) {
                // Resolve the data
                if (Array.isArray(options)) {
                    this.isStatic = true;
                    // Arrays are returned immediately
                    resolve(options);
                }
                else {
                    // All other kinds of data are rejected
                    reject('The data provided is not an array or a promise');
                    throw new Error('The data provided is not an array or a promise');
                }
            }
            else {
                // No data gets rejected
                reject('error');
            }
        }));
    }
    /**
     * @param matches - Collection of objects=
     *
     * @description This function loops through the picker options and creates a filtered list of objects that contain
     * the newSearch.
     */
    filterData(matches) {
        if (this.term && matches) {
            this.filteredMatches = matches.map((section) => {
                const items = section.originalData.filter((match) => {
                    return ~String(match.label).toLowerCase().indexOf(this.term.toLowerCase());
                });
                section.data = items;
                return section;
            }, this);
            return this.filteredMatches;
        }
        else if (this.term === '') {
            matches.forEach((section) => {
                section.data = section.originalData;
            });
            return matches;
        }
        // Show no recent results template
        return matches;
    }
    selectMatch(event, item) {
        Helpers.swallowEvent(event);
        if (item.indeterminate) {
            item.indeterminate = false;
            item.checked = true;
        }
        else {
            item.checked = !item.checked;
        }
        const selected = this.activeMatch;
        if (selected) {
            this.parent.value = selected;
        }
        this.ref.markForCheck();
        return false;
    }
}
ChecklistPickerResults.ɵfac = function ChecklistPickerResults_Factory(t) { return new (t || ChecklistPickerResults)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(ChangeDetectorRef)); };
ChecklistPickerResults.ɵcmp = ɵɵdefineComponent({ type: ChecklistPickerResults, selectors: [["checklist-picker-results"]], hostAttrs: [1, "active", "picker-results"], features: [ɵɵInheritDefinitionFeature], decls: 4, vars: 4, consts: [["theme", "line", 4, "ngIf"], [4, "ngIf"], ["class", "picker-error", 4, "ngIf"], ["class", "picker-null-results", 4, "ngIf"], ["theme", "line"], [4, "ngFor", "ngForOf"], ["class", "header caption", 4, "ngIf"], [3, "ngClass", "active", "click", "mouseenter", 4, "ngFor", "ngForOf"], [1, "header", "caption"], [3, "ngClass", "click", "mouseenter"], [3, "ngClass"], [1, "picker-error"], [1, "picker-null-results"]], template: function ChecklistPickerResults_Template(rf, ctx) { if (rf & 1) {
        ɵɵtemplate(0, ChecklistPickerResults_novo_loading_0_Template, 1, 0, "novo-loading", 0);
        ɵɵtemplate(1, ChecklistPickerResults_ul_1_Template, 2, 1, "ul", 1);
        ɵɵtemplate(2, ChecklistPickerResults_p_2_Template, 2, 1, "p", 2);
        ɵɵtemplate(3, ChecklistPickerResults_p_3_Template, 2, 1, "p", 3);
    } if (rf & 2) {
        ɵɵproperty("ngIf", ctx.isLoading && !ctx.matches.length);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.matches.length > 0);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.hasError);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", !ctx.isLoading && !ctx.matches.length && !ctx.hasError && ctx.term !== "");
    } }, directives: [NgIf, NovoLoadingElement, NgForOf, NgClass], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(ChecklistPickerResults, [{
        type: Component,
        args: [{
                selector: 'checklist-picker-results',
                host: {
                    class: 'active picker-results',
                },
                template: `
    <novo-loading theme="line" *ngIf="isLoading && !matches.length"></novo-loading>
    <ul *ngIf="matches.length > 0">
      <span *ngFor="let section of matches; let i = index">
        <li class="header caption" *ngIf="section.data.length > 0">{{ section.label || section.type }}</li>
        <li
          *ngFor="let match of section.data; let i = index"
          [ngClass]="{ checked: match.checked }"
          (click)="selectMatch($event, match)"
          [class.active]="match === activeMatch"
          (mouseenter)="selectActive(match)"
        >
          <label>
            <i
              [ngClass]="{
                'bhi-checkbox-empty': !match.checked,
                'bhi-checkbox-filled': match.checked,
                'bhi-checkbox-indeterminate': match.indeterminate
              }"
            ></i>
            {{ match.label }}
          </label>
        </li>
      </span>
    </ul>
    <p class="picker-error" *ngIf="hasError">{{ labels.pickerError }}</p>
    <p class="picker-null-results" *ngIf="!isLoading && !matches.length && !hasError && term !== ''">{{ labels.pickerEmpty }}</p>
  `,
            }]
    }], function () { return [{ type: ElementRef }, { type: NovoLabelService }, { type: ChangeDetectorRef }]; }, null); })();

// NG2
function DistributionListPickerResults_section_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "section", 2);
    ɵɵelement(1, "novo-loading", 3);
    ɵɵelementEnd();
} }
const _c0$k = function () { return { year: "numeric", month: "numeric", day: "numeric" }; };
function DistributionListPickerResults_novo_list_1_novo_list_item_1_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-list-item", 7);
    ɵɵlistener("click", function DistributionListPickerResults_novo_list_1_novo_list_item_1_Template_novo_list_item_click_0_listener($event) { ɵɵrestoreView(_r6); const ctx_r5 = ɵɵnextContext(2); return ctx_r5.selectMatch($event); })("mouseenter", function DistributionListPickerResults_novo_list_1_novo_list_item_1_Template_novo_list_item_mouseenter_0_listener() { ɵɵrestoreView(_r6); const match_r4 = ctx.$implicit; const ctx_r7 = ɵɵnextContext(2); return ctx_r7.selectActive(match_r4); });
    ɵɵelementStart(1, "item-header");
    ɵɵelementStart(2, "item-title");
    ɵɵelement(3, "span", 8);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementStart(4, "item-content", 9);
    ɵɵelementStart(5, "p");
    ɵɵelementStart(6, "span", 10);
    ɵɵtext(7);
    ɵɵelementEnd();
    ɵɵelementStart(8, "span");
    ɵɵtext(9);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementStart(10, "p");
    ɵɵelementStart(11, "span", 10);
    ɵɵtext(12);
    ɵɵelementEnd();
    ɵɵelementStart(13, "span");
    ɵɵtext(14);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const match_r4 = ctx.$implicit;
    const ctx_r2 = ɵɵnextContext(2);
    ɵɵclassProp("active", match_r4 === ctx_r2.activeMatch)("disabled", ctx_r2.preselected(match_r4));
    ɵɵadvance(3);
    ɵɵproperty("innerHtml", ctx_r2.sanitizeHTML(match_r4.label), ɵɵsanitizeHtml);
    ɵɵadvance(4);
    ɵɵtextInterpolate1("", ctx_r2.labels.distributionListOwner, ": ");
    ɵɵadvance(2);
    ɵɵtextInterpolate(match_r4 == null ? null : match_r4.data == null ? null : match_r4.data.owner == null ? null : match_r4.data.owner.name);
    ɵɵadvance(3);
    ɵɵtextInterpolate1("", ctx_r2.labels.dateAdded, ": ");
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r2.labels.formatDateWithFormat(match_r4 == null ? null : match_r4.data == null ? null : match_r4.data.dateAdded, ɵɵpureFunction0(9, _c0$k)));
} }
function DistributionListPickerResults_novo_list_1_novo_loading_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-loading", 3);
} }
function DistributionListPickerResults_novo_list_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-list", 4);
    ɵɵtemplate(1, DistributionListPickerResults_novo_list_1_novo_list_item_1_Template, 15, 10, "novo-list-item", 5);
    ɵɵtemplate(2, DistributionListPickerResults_novo_list_1_novo_loading_2_Template, 1, 0, "novo-loading", 6);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r1.matches);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r1.isLoading && (ctx_r1.matches == null ? null : ctx_r1.matches.length) > 0);
} }
class DistributionListPickerResults extends BasePickerResults {
    constructor(element, sanitizer, labels, ref) {
        super(element, ref);
        this.sanitizer = sanitizer;
        this.labels = labels;
        this.active = true;
        this.sanitizer = sanitizer;
    }
    get isHidden() {
        return this.matches.length === 0;
    }
    getListElement() {
        return this.element.nativeElement.querySelector('novo-list');
    }
    sanitizeHTML(html) {
        return this.sanitizer.bypassSecurityTrustHtml(html);
    }
}
DistributionListPickerResults.ɵfac = function DistributionListPickerResults_Factory(t) { return new (t || DistributionListPickerResults)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(DomSanitizer), ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(ChangeDetectorRef)); };
DistributionListPickerResults.ɵcmp = ɵɵdefineComponent({ type: DistributionListPickerResults, selectors: [["distribution-list-picker-results"]], hostVars: 3, hostBindings: function DistributionListPickerResults_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵhostProperty("hidden", ctx.isHidden);
        ɵɵclassProp("active", ctx.active);
    } }, features: [ɵɵInheritDefinitionFeature], decls: 2, vars: 2, consts: [["class", "picker-loading", 4, "ngIf"], ["direction", "vertical", 4, "ngIf"], [1, "picker-loading"], ["theme", "line"], ["direction", "vertical"], [3, "active", "disabled", "click", "mouseenter", 4, "ngFor", "ngForOf"], ["theme", "line", 4, "ngIf"], [3, "click", "mouseenter"], [3, "innerHtml"], ["direction", "horizontal"], [1, "label"]], template: function DistributionListPickerResults_Template(rf, ctx) { if (rf & 1) {
        ɵɵtemplate(0, DistributionListPickerResults_section_0_Template, 2, 0, "section", 0);
        ɵɵtemplate(1, DistributionListPickerResults_novo_list_1_Template, 3, 2, "novo-list", 1);
    } if (rf & 2) {
        ɵɵproperty("ngIf", ctx.isLoading && !(ctx.matches == null ? null : ctx.matches.length));
        ɵɵadvance(1);
        ɵɵproperty("ngIf", (ctx.matches == null ? null : ctx.matches.length) > 0 && !ctx.hasError);
    } }, directives: [NgIf, NovoLoadingElement, NovoListElement, NgForOf, NovoListItemElement, NovoItemHeaderElement, NovoItemTitleElement, NovoItemContentElement], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(DistributionListPickerResults, [{
        type: Component,
        args: [{
                selector: 'distribution-list-picker-results',
                template: `
    <section class="picker-loading" *ngIf="isLoading && !matches?.length">
      <novo-loading theme="line"></novo-loading>
    </section>
    <novo-list direction="vertical" *ngIf="matches?.length > 0 && !hasError">
      <novo-list-item
        *ngFor="let match of matches"
        (click)="selectMatch($event)"
        [class.active]="match === activeMatch"
        (mouseenter)="selectActive(match)"
        [class.disabled]="preselected(match)"
      >
        <item-header>
          <item-title>
            <span [innerHtml]="sanitizeHTML(match.label)"></span>
          </item-title>
        </item-header>
        <item-content direction="horizontal">
          <p>
            <span class="label">{{ labels.distributionListOwner }}: </span><span>{{ match?.data?.owner?.name }}</span>
          </p>
          <p>
            <span class="label">{{ labels.dateAdded }}: </span
            ><span>{{ labels.formatDateWithFormat(match?.data?.dateAdded, { year: 'numeric', month: 'numeric', day: 'numeric' }) }}</span>
          </p>
        </item-content>
      </novo-list-item>
      <novo-loading theme="line" *ngIf="isLoading && matches?.length > 0"></novo-loading>
    </novo-list>
  `,
            }]
    }], function () { return [{ type: ElementRef }, { type: DomSanitizer }, { type: NovoLabelService }, { type: ChangeDetectorRef }]; }, { active: [{
            type: HostBinding,
            args: ['class.active']
        }], isHidden: [{
            type: HostBinding,
            args: ['hidden']
        }] }); })();

const _c0$l = ["input"];
const _c1$8 = ["list"];
function GroupedMultiPickerResults_novo_list_item_2_Template(rf, ctx) { if (rf & 1) {
    const _r12 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-list-item", 17);
    ɵɵlistener("click", function GroupedMultiPickerResults_novo_list_item_2_Template_novo_list_item_click_0_listener() { ɵɵrestoreView(_r12); const ctx_r11 = ɵɵnextContext(); return ctx_r11.selectCategory({ value: "all", label: "all" }); });
    ɵɵelementStart(1, "item-content");
    ɵɵelementStart(2, "span", 18);
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementStart(4, "item-end");
    ɵɵelement(5, "i", 19);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵclassProp("active", (ctx_r0.selectedCategory == null ? null : ctx_r0.selectedCategory.value) === "all")("disabled", ctx_r0.isLoading);
    ɵɵadvance(3);
    ɵɵtextInterpolate(ctx_r0.labels.all);
} }
function GroupedMultiPickerResults_novo_list_item_3_i_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i");
} if (rf & 2) {
    const category_r13 = ɵɵnextContext().$implicit;
    ɵɵclassMap(category_r13.iconClass);
} }
function GroupedMultiPickerResults_novo_list_item_3_Template(rf, ctx) { if (rf & 1) {
    const _r17 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-list-item", 20);
    ɵɵlistener("click", function GroupedMultiPickerResults_novo_list_item_3_Template_novo_list_item_click_0_listener() { ɵɵrestoreView(_r17); const category_r13 = ctx.$implicit; const ctx_r16 = ɵɵnextContext(); return ctx_r16.selectCategory(category_r13); });
    ɵɵelementStart(1, "item-content");
    ɵɵtemplate(2, GroupedMultiPickerResults_novo_list_item_3_i_2_Template, 1, 2, "i", 21);
    ɵɵelementStart(3, "span", 18);
    ɵɵtext(4);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementStart(5, "item-end");
    ɵɵelement(6, "i", 19);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const category_r13 = ctx.$implicit;
    const ctx_r1 = ɵɵnextContext();
    ɵɵclassProp("active", (ctx_r1.selectedCategory == null ? null : ctx_r1.selectedCategory.value) === category_r13.value)("disabled", ctx_r1.isLoading);
    ɵɵattribute("data-automation-id", category_r13.label);
    ɵɵadvance(2);
    ɵɵproperty("ngIf", category_r13.iconClass);
    ɵɵadvance(2);
    ɵɵtextInterpolate(category_r13.label);
} }
function GroupedMultiPickerResults_footer_4_Template(rf, ctx) { if (rf & 1) {
    const _r19 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "footer", 22);
    ɵɵelementStart(1, "novo-switch", 23);
    ɵɵlistener("ngModelChange", function GroupedMultiPickerResults_footer_4_Template_novo_switch_ngModelChange_1_listener($event) { ɵɵrestoreView(_r19); const ctx_r18 = ɵɵnextContext(); return ctx_r18.customFilterValue = $event; })("onChange", function GroupedMultiPickerResults_footer_4_Template_novo_switch_onChange_1_listener($event) { ɵɵrestoreView(_r19); const ctx_r20 = ɵɵnextContext(); return ctx_r20.fireCustomFilter($event); });
    ɵɵelementEnd();
    ɵɵelementStart(2, "label", 18);
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵclassProp("disabled", ctx_r2.isLoading);
    ɵɵadvance(1);
    ɵɵproperty("ngModel", ctx_r2.customFilterValue);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r2.customFilterLabel);
} }
function GroupedMultiPickerResults_i_9_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 24);
} if (rf & 2) {
    const ctx_r4 = ɵɵnextContext();
    ɵɵclassProp("disabled", ctx_r4.isLoading);
} }
function GroupedMultiPickerResults_i_10_Template(rf, ctx) { if (rf & 1) {
    const _r22 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "i", 25);
    ɵɵlistener("click", function GroupedMultiPickerResults_i_10_Template_i_click_0_listener($event) { ɵɵrestoreView(_r22); const ctx_r21 = ɵɵnextContext(); return ctx_r21.clearSearchTerm($event); });
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵɵnextContext();
    ɵɵclassProp("disabled", ctx_r5.isLoading);
} }
function GroupedMultiPickerResults_novo_list_item_14_Template(rf, ctx) { if (rf & 1) {
    const _r25 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-list-item", 26);
    ɵɵlistener("click", function GroupedMultiPickerResults_novo_list_item_14_Template_novo_list_item_click_0_listener($event) { ɵɵrestoreView(_r25); const ctx_r24 = ɵɵnextContext(); return ctx_r24.selectMatch($event); })("mouseenter", function GroupedMultiPickerResults_novo_list_item_14_Template_novo_list_item_mouseenter_0_listener() { ɵɵrestoreView(_r25); const match_r23 = ctx.$implicit; const ctx_r26 = ɵɵnextContext(); return ctx_r26.selectActive(match_r23); });
    ɵɵelementStart(1, "item-content");
    ɵɵelementStart(2, "span");
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const match_r23 = ctx.$implicit;
    const ctx_r7 = ɵɵnextContext();
    ɵɵclassProp("active", match_r23 === ctx_r7.activeMatch)("disabled", ctx_r7.preselected(match_r23) || ctx_r7.isLoading);
    ɵɵattribute("data-automation-id", match_r23.label);
    ɵɵadvance(3);
    ɵɵtextInterpolate(match_r23.label);
} }
function GroupedMultiPickerResults_div_15_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 27);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r8 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r8.labels.groupedMultiPickerEmpty, " ");
} }
function GroupedMultiPickerResults_div_16_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 28);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r9 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r9.labels.groupedMultiPickerSelectCategory, " ");
} }
function GroupedMultiPickerResults_div_17_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 29);
    ɵɵelement(1, "novo-loading", 30);
    ɵɵelementEnd();
} }
class GroupedMultiPickerResults extends BasePickerResults {
    constructor(element, renderer, labels, ref) {
        super(element, ref);
        this.renderer = renderer;
        this.labels = labels;
        this.customFilterEnabled = false;
        this.placeholder = '';
        this.internalMap = new Map();
    }
    set term(value) {
        // Display all only will work for static categories
        if (this.config.displayAll && this.config.getItemsForCategoryAsync) {
            throw new Error('[GroupedMultiPickerResults] - you can only have `displayAll` with a static `categoryMap`. Not available with `getItemsForCategoryAsync`');
        }
        // Custom filter
        if (this.config.customFilter) {
            this.customFilterEnabled = true;
            this.customFilterLabel = this.config.customFilter.label;
            this.customFilterValue = !!this.config.customFilter.defaultFilterValue;
            this.ref.markForCheck();
            if (!this.customFilterLabel || !this.config.customFilter.matchFunction) {
                throw new Error('[GroupedMultiPickerResults] - custom filter/matchFunction set no label was provided!');
            }
        }
        else {
            this.customFilterEnabled = false;
        }
        // Configure ALL
        if (this.config.displayAll && !this.selectedCategory) {
            this.setAllCategory();
        }
        // Placeholder
        if (this.config.placeholder) {
            this.placeholder = this.config.placeholder;
        }
        // Focus
        setTimeout(() => {
            this.inputElement.nativeElement.focus();
        });
    }
    get categories() {
        if (this.config.categories || this.config.categoryMap) {
            return (this.config.categories ||
                Array.from(this.config.categoryMap.values()).filter((category) => {
                    return category.value !== 'all';
                }));
        }
        return [];
    }
    ngOnInit() {
        // Subscribe to keyboard events and debounce
        this.keyboardSubscription = fromEvent(this.inputElement.nativeElement, 'keyup')
            .pipe(debounceTime(350), distinctUntilChanged())
            .subscribe((event) => {
            this.searchTerm = event.target.value;
            this.matches = this.filterData();
            this.ref.markForCheck();
        });
    }
    ngOnDestroy() {
        // Cleanup
        this.keyboardSubscription.unsubscribe();
    }
    setAllCategory() {
        // If we have display all, set the all categories up
        if (this.config.displayAll) {
            this.selectedCategory = { value: 'all', label: 'all' };
            const allItems = [];
            Array.from(this.config.categoryMap.values())
                .filter((category) => {
                return category.value !== 'all';
            })
                .forEach((v) => allItems.push(...v.items));
            this.matches = this.filter(allItems);
            this.config.categoryMap.set('all', { value: 'all', label: 'All', items: allItems });
            this.ref.markForCheck();
        }
    }
    selectCategory(category) {
        // Scroll to top
        this.renderer.setProperty(this.listElement.element.nativeElement, 'scrollTop', 0);
        // Set focus
        this.inputElement.nativeElement.focus();
        // Find new items
        const key = category.value;
        this.selectedCategory = category;
        // Clear
        this.matches = [];
        this.ref.markForCheck();
        // New matches
        this.getNewMatches(category, key);
    }
    clearSearchTerm(event) {
        Helpers.swallowEvent(event);
        this.searchTerm = '';
        this.selectCategory({ value: this.selectedCategory.value, label: this.selectedCategory.label });
        this.ref.markForCheck();
    }
    selectMatch(event, item) {
        // Set focus
        this.inputElement.nativeElement.focus();
        return super.selectMatch(event);
    }
    fireCustomFilter(value) {
        this.customFilterValue = value;
        // Clear cache map
        this.internalMap.clear();
        // Only fire if we have a selected category
        if (this.selectCategory) {
            // Find new items
            const key = this.selectedCategory.value;
            // Get new matches
            this.getNewMatches(this.selectedCategory, key);
            this.ref.markForCheck();
        }
        // Focus
        setTimeout(() => {
            this.inputElement.nativeElement.focus();
        });
    }
    filterData() {
        if (this.selectedCategory) {
            if (this.config.categoryMap) {
                return this.filter(this.config.categoryMap.get(this.selectedCategory.value).items);
            }
            else {
                return this.filter(this.internalMap.get(this.selectedCategory.value).items);
            }
        }
        return [];
    }
    getNewMatches(category, key) {
        // Get new matches
        if (this.config.categoryMap) {
            this.matches = this.filter(this.config.categoryMap.get(key).items);
            this.ref.markForCheck();
        }
        else {
            if (!this.config.getItemsForCategoryAsync) {
                throw new Error('The "config" for the Chips must include a function "getItemsForCategoryAsync(categoryKey: string)" to retrieve the items by category. Or if you have static data provide a "categoryMap"');
            }
            if (!this.internalMap.get(key)) {
                this.isLoading = true;
                this.config.getItemsForCategoryAsync(key, this.customFilterValue).then((items) => {
                    this.internalMap.set(key, { value: category.value, label: category.label, items });
                    this.matches = this.filter(items, true);
                    this.isLoading = false;
                    this.ref.markForCheck();
                    setTimeout(() => {
                        this.inputElement.nativeElement.focus();
                    });
                });
            }
            else {
                this.matches = this.filter(this.internalMap.get(key).items);
                this.ref.markForCheck();
            }
        }
    }
    filter(array, ignoreCustomFilter = false) {
        let matches = array;
        if (this.searchTerm && this.searchTerm.length !== 0 && this.selectedCategory) {
            matches = matches.filter((match) => {
                const searchTerm = this.searchTerm.toLowerCase();
                return match.label.toLowerCase().indexOf(searchTerm) > -1 || match.value.toLowerCase().indexOf(searchTerm) > -1;
            });
        }
        if (this.customFilterEnabled && this.config.customFilter.matchFunction && !ignoreCustomFilter) {
            matches = matches.filter((match) => this.config.customFilter.matchFunction(match, this.customFilterValue));
        }
        return matches;
    }
}
GroupedMultiPickerResults.ɵfac = function GroupedMultiPickerResults_Factory(t) { return new (t || GroupedMultiPickerResults)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(ChangeDetectorRef)); };
GroupedMultiPickerResults.ɵcmp = ɵɵdefineComponent({ type: GroupedMultiPickerResults, selectors: [["grouped-multi-picker-results"]], viewQuery: function GroupedMultiPickerResults_Query(rf, ctx) { if (rf & 1) {
        ɵɵstaticViewQuery(_c0$l, true);
        ɵɵviewQuery(_c1$8, true);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.inputElement = _t.first);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.listElement = _t.first);
    } }, features: [ɵɵInheritDefinitionFeature], decls: 18, vars: 13, consts: [[1, "grouped-multi-picker-groups"], ["direction", "vertical"], ["data-automation-id", "display-all", 3, "active", "disabled", "click", 4, "ngIf"], [3, "active", "disabled", "click", 4, "ngFor", "ngForOf"], ["class", "grouped-multi-picker-groups-footer", "data-automation-id", "footer", 3, "disabled", 4, "ngIf"], [1, "grouped-multi-picker-matches"], ["data-automation-id", "input-container", 1, "grouped-multi-picker-input-container", 3, "hidden"], ["autofocus", "", "data-automation-id", "input", 3, "ngModel", "disabled", "placeholder", "ngModelChange"], ["input", ""], ["class", "bhi-search", "data-automation-id", "seach-icon", 3, "disabled", 4, "ngIf"], ["class", "bhi-times", "data-automation-id", "remove-icon", 3, "disabled", "click", 4, "ngIf"], [1, "grouped-multi-picker-list-container"], ["list", ""], [3, "active", "disabled", "click", "mouseenter", 4, "ngFor", "ngForOf"], ["class", "grouped-multi-picker-no-results", "data-automation-id", "empty-message", 4, "ngIf"], ["class", "grouped-multi-picker-no-category", "data-automation-id", "select-category-message", 4, "ngIf"], ["class", "grouped-multi-picker-loading", "data-automation-id", "loading-message", 4, "ngIf"], ["data-automation-id", "display-all", 3, "click"], ["data-automation-id", "label"], [1, "bhi-next"], [3, "click"], [3, "class", 4, "ngIf"], ["data-automation-id", "footer", 1, "grouped-multi-picker-groups-footer"], ["data-automation-id", "switch", 3, "ngModel", "ngModelChange", "onChange"], ["data-automation-id", "seach-icon", 1, "bhi-search"], ["data-automation-id", "remove-icon", 1, "bhi-times", 3, "click"], [3, "click", "mouseenter"], ["data-automation-id", "empty-message", 1, "grouped-multi-picker-no-results"], ["data-automation-id", "select-category-message", 1, "grouped-multi-picker-no-category"], ["data-automation-id", "loading-message", 1, "grouped-multi-picker-loading"], ["theme", "line"]], template: function GroupedMultiPickerResults_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "div", 0);
        ɵɵelementStart(1, "novo-list", 1);
        ɵɵtemplate(2, GroupedMultiPickerResults_novo_list_item_2_Template, 6, 5, "novo-list-item", 2);
        ɵɵtemplate(3, GroupedMultiPickerResults_novo_list_item_3_Template, 7, 7, "novo-list-item", 3);
        ɵɵelementEnd();
        ɵɵtemplate(4, GroupedMultiPickerResults_footer_4_Template, 4, 4, "footer", 4);
        ɵɵelementEnd();
        ɵɵelementStart(5, "div", 5);
        ɵɵelementStart(6, "div", 6);
        ɵɵelementStart(7, "input", 7, 8);
        ɵɵlistener("ngModelChange", function GroupedMultiPickerResults_Template_input_ngModelChange_7_listener($event) { return ctx.searchTerm = $event; });
        ɵɵelementEnd();
        ɵɵtemplate(9, GroupedMultiPickerResults_i_9_Template, 1, 2, "i", 9);
        ɵɵtemplate(10, GroupedMultiPickerResults_i_10_Template, 1, 2, "i", 10);
        ɵɵelementEnd();
        ɵɵelementStart(11, "div", 11);
        ɵɵelementStart(12, "novo-list", 1, 12);
        ɵɵtemplate(14, GroupedMultiPickerResults_novo_list_item_14_Template, 4, 6, "novo-list-item", 13);
        ɵɵelementEnd();
        ɵɵtemplate(15, GroupedMultiPickerResults_div_15_Template, 2, 1, "div", 14);
        ɵɵtemplate(16, GroupedMultiPickerResults_div_16_Template, 2, 1, "div", 15);
        ɵɵtemplate(17, GroupedMultiPickerResults_div_17_Template, 2, 0, "div", 16);
        ɵɵelementEnd();
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵadvance(2);
        ɵɵproperty("ngIf", ctx.config.displayAll);
        ɵɵadvance(1);
        ɵɵproperty("ngForOf", ctx.categories);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.customFilterEnabled);
        ɵɵadvance(2);
        ɵɵproperty("hidden", !ctx.selectedCategory);
        ɵɵadvance(1);
        ɵɵproperty("ngModel", ctx.searchTerm)("disabled", ctx.isLoading)("placeholder", ctx.placeholder);
        ɵɵadvance(2);
        ɵɵproperty("ngIf", !ctx.searchTerm);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.searchTerm);
        ɵɵadvance(4);
        ɵɵproperty("ngForOf", ctx.matches);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.matches.length === 0 && !ctx.isLoading && ctx.selectedCategory);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.matches.length === 0 && !ctx.isLoading && !ctx.selectedCategory);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.isLoading);
    } }, directives: [NovoListElement, NgIf, NgForOf, DefaultValueAccessor, NgControlStatus, NgModel, NovoListItemElement, NovoItemContentElement, NovoItemEndElement, NovoSwitchElement, NovoLoadingElement], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(GroupedMultiPickerResults, [{
        type: Component,
        args: [{
                selector: 'grouped-multi-picker-results',
                template: `
    <div class="grouped-multi-picker-groups">
      <novo-list direction="vertical">
        <novo-list-item
          *ngIf="config.displayAll"
          (click)="selectCategory({ value: 'all', label: 'all' })"
          [class.active]="selectedCategory?.value === 'all'"
          data-automation-id="display-all"
          [class.disabled]="isLoading"
        >
          <item-content>
            <span data-automation-id="label">{{ labels.all }}</span>
          </item-content>
          <item-end>
            <i class="bhi-next"></i>
          </item-end>
        </novo-list-item>
        <novo-list-item
          *ngFor="let category of categories"
          (click)="selectCategory(category)"
          [class.active]="selectedCategory?.value === category.value"
          [attr.data-automation-id]="category.label"
          [class.disabled]="isLoading"
        >
          <item-content>
            <i *ngIf="category.iconClass" [class]="category.iconClass"></i>
            <span data-automation-id="label">{{ category.label }}</span>
          </item-content>
          <item-end>
            <i class="bhi-next"></i>
          </item-end>
        </novo-list-item>
      </novo-list>
      <footer
        class="grouped-multi-picker-groups-footer"
        *ngIf="customFilterEnabled"
        data-automation-id="footer"
        [class.disabled]="isLoading"
      >
        <novo-switch [(ngModel)]="customFilterValue" (onChange)="fireCustomFilter($event)" data-automation-id="switch"></novo-switch>
        <label data-automation-id="label">{{ customFilterLabel }}</label>
      </footer>
    </div>
    <div class="grouped-multi-picker-matches">
      <div class="grouped-multi-picker-input-container" [hidden]="!selectedCategory" data-automation-id="input-container">
        <input autofocus #input [(ngModel)]="searchTerm" [disabled]="isLoading" data-automation-id="input" [placeholder]="placeholder" />
        <i class="bhi-search" *ngIf="!searchTerm" [class.disabled]="isLoading" data-automation-id="seach-icon"></i>
        <i
          class="bhi-times"
          *ngIf="searchTerm"
          (click)="clearSearchTerm($event)"
          [class.disabled]="isLoading"
          data-automation-id="remove-icon"
        ></i>
      </div>
      <div class="grouped-multi-picker-list-container">
        <novo-list direction="vertical" #list>
          <novo-list-item
            *ngFor="let match of matches"
            (click)="selectMatch($event)"
            [class.active]="match === activeMatch"
            (mouseenter)="selectActive(match)"
            [class.disabled]="preselected(match) || isLoading"
            [attr.data-automation-id]="match.label"
          >
            <item-content>
              <span>{{ match.label }}</span>
            </item-content>
          </novo-list-item>
        </novo-list>
        <div
          class="grouped-multi-picker-no-results"
          *ngIf="matches.length === 0 && !isLoading && selectedCategory"
          data-automation-id="empty-message"
        >
          {{ labels.groupedMultiPickerEmpty }}
        </div>
        <div
          class="grouped-multi-picker-no-category"
          *ngIf="matches.length === 0 && !isLoading && !selectedCategory"
          data-automation-id="select-category-message"
        >
          {{ labels.groupedMultiPickerSelectCategory }}
        </div>
        <div class="grouped-multi-picker-loading" *ngIf="isLoading" data-automation-id="loading-message">
          <novo-loading theme="line"></novo-loading>
        </div>
      </div>
    </div>
  `,
            }]
    }], function () { return [{ type: ElementRef }, { type: Renderer2 }, { type: NovoLabelService }, { type: ChangeDetectorRef }]; }, { inputElement: [{
            type: ViewChild,
            args: ['input', { static: true }]
        }], listElement: [{
            type: ViewChild,
            args: ['list']
        }] }); })();

// NG2
function PickerResults_novo_list_0_novo_list_item_1_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-list-item", 7);
    ɵɵlistener("click", function PickerResults_novo_list_0_novo_list_item_1_Template_novo_list_item_click_0_listener($event) { ɵɵrestoreView(_r8); const ctx_r7 = ɵɵnextContext(2); return ctx_r7.selectMatch($event); })("mouseenter", function PickerResults_novo_list_0_novo_list_item_1_Template_novo_list_item_mouseenter_0_listener() { ɵɵrestoreView(_r8); const match_r6 = ctx.$implicit; const ctx_r9 = ɵɵnextContext(2); return ctx_r9.selectActive(match_r6); });
    ɵɵelementStart(1, "item-content");
    ɵɵelement(2, "span", 8);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const match_r6 = ctx.$implicit;
    const ctx_r4 = ɵɵnextContext(2);
    ɵɵclassProp("active", match_r6 === ctx_r4.activeMatch)("disabled", ctx_r4.preselected(match_r6));
    ɵɵadvance(2);
    ɵɵproperty("innerHtml", ctx_r4.highlight(match_r6.label, ctx_r4.term), ɵɵsanitizeHtml);
} }
function PickerResults_novo_list_0_novo_loading_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-loading", 9);
} }
function PickerResults_novo_list_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-list", 4);
    ɵɵtemplate(1, PickerResults_novo_list_0_novo_list_item_1_Template, 3, 5, "novo-list-item", 5);
    ɵɵtemplate(2, PickerResults_novo_list_0_novo_loading_2_Template, 1, 0, "novo-loading", 6);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r0.matches);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.isLoading && ctx_r0.matches.length > 0);
} }
function PickerResults_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 10);
    ɵɵelement(1, "novo-loading", 9);
    ɵɵelementEnd();
} }
function PickerResults_p_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 11);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r2.labels.pickerError);
} }
function PickerResults_p_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 12);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r3.getEmptyMessage());
} }
class PickerResults extends BasePickerResults {
    constructor(element, labels, ref) {
        super(element, ref);
        this.labels = labels;
    }
    get hasNonErrorMessage() {
        return !this.isLoading && !this.matches.length && !this.hasError;
    }
    getEmptyMessage() {
        if (this.shouldShowMessageForZeroLengthSearch()) {
            // this property comes from Field Interactions
            return this.config.emptyPickerMessage;
        }
        else {
            return this.term === '' ? this.labels.pickerTextFieldEmpty : this.labels.pickerEmpty;
        }
    }
    shouldShowMessageForZeroLengthSearch() {
        return this.config && this.config.minSearchLength === 0 && this.term === '' && this.config.emptyPickerMessage;
    }
    getListElement() {
        return this.element.nativeElement.querySelector('novo-list');
    }
}
PickerResults.ɵfac = function PickerResults_Factory(t) { return new (t || PickerResults)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(ChangeDetectorRef)); };
PickerResults.ɵcmp = ɵɵdefineComponent({ type: PickerResults, selectors: [["picker-results"]], hostAttrs: [1, "active"], features: [ɵɵInheritDefinitionFeature], decls: 4, vars: 4, consts: [["direction", "vertical", 4, "ngIf"], ["class", "picker-loader", 4, "ngIf"], ["class", "picker-error", 4, "ngIf"], ["class", "picker-null-results", 4, "ngIf"], ["direction", "vertical"], [3, "active", "disabled", "click", "mouseenter", 4, "ngFor", "ngForOf"], ["theme", "line", 4, "ngIf"], [3, "click", "mouseenter"], [3, "innerHtml"], ["theme", "line"], [1, "picker-loader"], [1, "picker-error"], [1, "picker-null-results"]], template: function PickerResults_Template(rf, ctx) { if (rf & 1) {
        ɵɵtemplate(0, PickerResults_novo_list_0_Template, 3, 2, "novo-list", 0);
        ɵɵtemplate(1, PickerResults_div_1_Template, 2, 0, "div", 1);
        ɵɵtemplate(2, PickerResults_p_2_Template, 2, 1, "p", 2);
        ɵɵtemplate(3, PickerResults_p_3_Template, 2, 1, "p", 3);
    } if (rf & 2) {
        ɵɵproperty("ngIf", ctx.matches.length > 0);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.isLoading && ctx.matches.length === 0);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.hasError);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.hasNonErrorMessage);
    } }, directives: [NgIf, NovoListElement, NgForOf, NovoListItemElement, NovoItemContentElement, NovoLoadingElement], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(PickerResults, [{
        type: Component,
        args: [{
                selector: 'picker-results',
                host: {
                    class: 'active',
                },
                template: `
    <novo-list *ngIf="matches.length > 0" direction="vertical">
      <novo-list-item
        *ngFor="let match of matches"
        (click)="selectMatch($event)"
        [class.active]="match === activeMatch"
        (mouseenter)="selectActive(match)"
        [class.disabled]="preselected(match)"
      >
        <item-content> <span [innerHtml]="highlight(match.label, term)"></span> </item-content>
      </novo-list-item>
      <novo-loading *ngIf="isLoading && matches.length > 0" theme="line"></novo-loading>
    </novo-list>
    <div class="picker-loader" *ngIf="isLoading && matches.length === 0"><novo-loading theme="line"></novo-loading></div>
    <p class="picker-error" *ngIf="hasError">{{ labels.pickerError }}</p>
    <p class="picker-null-results" *ngIf="hasNonErrorMessage">{{ getEmptyMessage() }}</p>
  `,
            }]
    }], function () { return [{ type: ElementRef }, { type: NovoLabelService }, { type: ChangeDetectorRef }]; }, null); })();

// NG2
function SkillsSpecialtyPickerResults_section_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "section", 4);
    ɵɵelement(1, "novo-loading", 5);
    ɵɵelementEnd();
} }
function SkillsSpecialtyPickerResults_novo_list_1_novo_list_item_1_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-list-item", 10);
    ɵɵlistener("click", function SkillsSpecialtyPickerResults_novo_list_1_novo_list_item_1_Template_novo_list_item_click_0_listener($event) { ɵɵrestoreView(_r9); const ctx_r8 = ɵɵnextContext(2); return ctx_r8.selectMatch($event); })("mouseenter", function SkillsSpecialtyPickerResults_novo_list_1_novo_list_item_1_Template_novo_list_item_mouseenter_0_listener() { ɵɵrestoreView(_r9); const match_r7 = ctx.$implicit; const ctx_r10 = ɵɵnextContext(2); return ctx_r10.selectActive(match_r7); });
    ɵɵelementStart(1, "item-content");
    ɵɵelementStart(2, "h6");
    ɵɵelement(3, "span", 11);
    ɵɵelementEnd();
    ɵɵelementStart(4, "div", 12);
    ɵɵelement(5, "i", 13);
    ɵɵelement(6, "span", 11);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const match_r7 = ctx.$implicit;
    const ctx_r4 = ɵɵnextContext(2);
    ɵɵclassProp("active", match_r7 === ctx_r4.activeMatch)("disabled", ctx_r4.preselected(match_r7));
    ɵɵadvance(3);
    ɵɵproperty("innerHtml", ctx_r4.highlight(match_r7.label, ctx_r4.term), ɵɵsanitizeHtml);
    ɵɵadvance(3);
    ɵɵproperty("innerHtml", ctx_r4.highlight(match_r7.data.categories || match_r7.data.parentCategory.name, ctx_r4.term), ɵɵsanitizeHtml);
} }
function SkillsSpecialtyPickerResults_novo_list_1_novo_list_item_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-list-item");
    ɵɵelementStart(1, "div");
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r5.labels.showingXofXResults(ctx_r5.limit, ctx_r5.total));
} }
function SkillsSpecialtyPickerResults_novo_list_1_novo_loading_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-loading", 5);
} }
function SkillsSpecialtyPickerResults_novo_list_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-list", 6);
    ɵɵtemplate(1, SkillsSpecialtyPickerResults_novo_list_1_novo_list_item_1_Template, 7, 6, "novo-list-item", 7);
    ɵɵtemplate(2, SkillsSpecialtyPickerResults_novo_list_1_novo_list_item_2_Template, 3, 1, "novo-list-item", 8);
    ɵɵtemplate(3, SkillsSpecialtyPickerResults_novo_list_1_novo_loading_3_Template, 1, 0, "novo-loading", 9);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r1.matches);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r1.limitedTo);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r1.isLoading && ctx_r1.matches.length > 0);
} }
function SkillsSpecialtyPickerResults_p_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 14);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r2.labels.pickerError);
} }
function SkillsSpecialtyPickerResults_p_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 15);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r3.labels.pickerEmpty);
} }
class SkillsSpecialtyPickerResults extends BasePickerResults {
    constructor(element, labels, ref) {
        super(element, ref);
        this.element = element;
        this.labels = labels;
        this.active = true;
        this.limitedTo = false;
        this.limit = 200;
    }
    getListElement() {
        return this.element.nativeElement.querySelector('novo-list');
    }
    /**
     * @name structureArray
     * @param collection - the data once getData resolves it
     *
     * @description This function structures an array of nodes into an array of objects with a
     * 'name' field by default.
     */
    structureArray(collection) {
        let data = collection;
        if (collection.hasOwnProperty('data')) {
            this.limitedTo = collection.limitedTo200;
            this.total = collection.total;
            data = collection.data;
        }
        else if (data.length > this.limit) {
            this.limitedTo = true;
            this.total = data.length;
            data = data.slice(0, this.limit);
        }
        return super.structureArray(data);
    }
}
SkillsSpecialtyPickerResults.ɵfac = function SkillsSpecialtyPickerResults_Factory(t) { return new (t || SkillsSpecialtyPickerResults)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(ChangeDetectorRef)); };
SkillsSpecialtyPickerResults.ɵcmp = ɵɵdefineComponent({ type: SkillsSpecialtyPickerResults, selectors: [["skill-specialty-picker-results"]], hostVars: 2, hostBindings: function SkillsSpecialtyPickerResults_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵclassProp("active", ctx.active);
    } }, features: [ɵɵInheritDefinitionFeature], decls: 4, vars: 4, consts: [["class", "picker-loading", 4, "ngIf"], ["direction", "vertical", 4, "ngIf"], ["class", "picker-error", 4, "ngIf"], ["class", "picker-null", 4, "ngIf"], [1, "picker-loading"], ["theme", "line"], ["direction", "vertical"], [3, "active", "disabled", "click", "mouseenter", 4, "ngFor", "ngForOf"], [4, "ngIf"], ["theme", "line", 4, "ngIf"], [3, "click", "mouseenter"], [3, "innerHtml"], [1, "category"], [1, "bhi-category-tags"], [1, "picker-error"], [1, "picker-null"]], template: function SkillsSpecialtyPickerResults_Template(rf, ctx) { if (rf & 1) {
        ɵɵtemplate(0, SkillsSpecialtyPickerResults_section_0_Template, 2, 0, "section", 0);
        ɵɵtemplate(1, SkillsSpecialtyPickerResults_novo_list_1_Template, 4, 3, "novo-list", 1);
        ɵɵtemplate(2, SkillsSpecialtyPickerResults_p_2_Template, 2, 1, "p", 2);
        ɵɵtemplate(3, SkillsSpecialtyPickerResults_p_3_Template, 2, 1, "p", 3);
    } if (rf & 2) {
        ɵɵproperty("ngIf", ctx.isLoading && !(ctx.matches == null ? null : ctx.matches.length));
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.matches.length > 0);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.hasError);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", !ctx.isLoading && !ctx.matches.length && !ctx.hasError);
    } }, directives: [NgIf, NovoLoadingElement, NovoListElement, NgForOf, NovoListItemElement, NovoItemContentElement], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(SkillsSpecialtyPickerResults, [{
        type: Component,
        args: [{
                selector: 'skill-specialty-picker-results',
                template: `
    <section class="picker-loading" *ngIf="isLoading && !matches?.length"><novo-loading theme="line"></novo-loading></section>
    <novo-list *ngIf="matches.length > 0" direction="vertical">
      <novo-list-item
        *ngFor="let match of matches"
        (click)="selectMatch($event)"
        [class.active]="match === activeMatch"
        (mouseenter)="selectActive(match)"
        [class.disabled]="preselected(match)"
      >
        <item-content>
          <h6><span [innerHtml]="highlight(match.label, term)"></span></h6>
          <div class="category">
            <i class="bhi-category-tags"></i
            ><span [innerHtml]="highlight(match.data.categories || match.data.parentCategory.name, term)"></span>
          </div>
        </item-content>
      </novo-list-item>
      <novo-list-item *ngIf="limitedTo"
        ><div>{{ labels.showingXofXResults(limit, total) }}</div></novo-list-item
      >
      <novo-loading theme="line" *ngIf="isLoading && matches.length > 0"></novo-loading>
    </novo-list>
    <p class="picker-error" *ngIf="hasError">{{ labels.pickerError }}</p>
    <p class="picker-null" *ngIf="!isLoading && !matches.length && !hasError">{{ labels.pickerEmpty }}</p>
  `,
            }]
    }], function () { return [{ type: ElementRef }, { type: NovoLabelService }, { type: ChangeDetectorRef }]; }, { active: [{
            type: HostBinding,
            args: ['class.active']
        }] }); })();

// NG2
function WorkersCompCodesPickerResults_section_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "section", 2);
    ɵɵelement(1, "novo-loading", 3);
    ɵɵelementEnd();
} }
const _c0$m = function () { return { year: "numeric", month: "numeric", day: "numeric" }; };
function WorkersCompCodesPickerResults_novo_list_1_novo_list_item_1_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-list-item", 7);
    ɵɵlistener("click", function WorkersCompCodesPickerResults_novo_list_1_novo_list_item_1_Template_novo_list_item_click_0_listener($event) { ɵɵrestoreView(_r6); const ctx_r5 = ɵɵnextContext(2); return ctx_r5.selectMatch($event); })("mouseenter", function WorkersCompCodesPickerResults_novo_list_1_novo_list_item_1_Template_novo_list_item_mouseenter_0_listener() { ɵɵrestoreView(_r6); const match_r4 = ctx.$implicit; const ctx_r7 = ɵɵnextContext(2); return ctx_r7.selectActive(match_r4); });
    ɵɵelementStart(1, "item-header");
    ɵɵelementStart(2, "item-title");
    ɵɵelement(3, "span", 8);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementStart(4, "item-content", 9);
    ɵɵelementStart(5, "p");
    ɵɵelementStart(6, "span", 10);
    ɵɵtext(7);
    ɵɵelementEnd();
    ɵɵelementStart(8, "span");
    ɵɵtext(9);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementStart(10, "p");
    ɵɵelementStart(11, "span", 10);
    ɵɵtext(12);
    ɵɵelementEnd();
    ɵɵelementStart(13, "span");
    ɵɵtext(14);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementStart(15, "item-content", 9);
    ɵɵelementStart(16, "p");
    ɵɵelementStart(17, "span", 10);
    ɵɵtext(18);
    ɵɵelementEnd();
    ɵɵelementStart(19, "span");
    ɵɵtext(20);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementStart(21, "p");
    ɵɵelementStart(22, "span", 10);
    ɵɵtext(23);
    ɵɵelementEnd();
    ɵɵelementStart(24, "span");
    ɵɵtext(25);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const match_r4 = ctx.$implicit;
    const ctx_r2 = ɵɵnextContext(2);
    ɵɵclassProp("active", match_r4 === ctx_r2.activeMatch)("disabled", ctx_r2.preselected(match_r4));
    ɵɵadvance(3);
    ɵɵproperty("innerHtml", ctx_r2.sanitizeHTML(match_r4 == null ? null : match_r4.data == null ? null : match_r4.data.compensation == null ? null : match_r4.data.compensation.code, match_r4 == null ? null : match_r4.data == null ? null : match_r4.data.compensation == null ? null : match_r4.data.compensation.name), ɵɵsanitizeHtml);
    ɵɵadvance(4);
    ɵɵtextInterpolate1("", ctx_r2.labels.state, ": ");
    ɵɵadvance(2);
    ɵɵtextInterpolate(match_r4 == null ? null : match_r4.data == null ? null : match_r4.data.compensation == null ? null : match_r4.data.compensation.state);
    ɵɵadvance(3);
    ɵɵtextInterpolate1("", ctx_r2.labels.rate, ": ");
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r2.labels.formatCurrency(match_r4 == null ? null : match_r4.data == null ? null : match_r4.data.rate));
    ɵɵadvance(4);
    ɵɵtextInterpolate1("", ctx_r2.labels.startDate, ": ");
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r2.labels.formatDateWithFormat(match_r4 == null ? null : match_r4.data == null ? null : match_r4.data.startDate, ɵɵpureFunction0(13, _c0$m)));
    ɵɵadvance(3);
    ɵɵtextInterpolate1("", ctx_r2.labels.endDate, ": ");
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r2.labels.formatDateWithFormat(match_r4 == null ? null : match_r4.data == null ? null : match_r4.data.endDate, ɵɵpureFunction0(14, _c0$m)));
} }
function WorkersCompCodesPickerResults_novo_list_1_novo_loading_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-loading", 3);
} }
function WorkersCompCodesPickerResults_novo_list_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-list", 4);
    ɵɵtemplate(1, WorkersCompCodesPickerResults_novo_list_1_novo_list_item_1_Template, 26, 15, "novo-list-item", 5);
    ɵɵtemplate(2, WorkersCompCodesPickerResults_novo_list_1_novo_loading_2_Template, 1, 0, "novo-loading", 6);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r1.matches);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r1.isLoading && (ctx_r1.matches == null ? null : ctx_r1.matches.length) > 0);
} }
class WorkersCompCodesPickerResults extends BasePickerResults {
    constructor(element, sanitizer, labels, ref) {
        super(element, ref);
        this.sanitizer = sanitizer;
        this.labels = labels;
        this.active = true;
        this.sanitizer = sanitizer;
    }
    get isHidden() {
        return this.matches.length === 0;
    }
    getListElement() {
        return this.element.nativeElement.querySelector('novo-list');
    }
    sanitizeHTML(compCode, name) {
        return this.sanitizer.bypassSecurityTrustHtml(`${compCode} | ${name}`);
    }
}
WorkersCompCodesPickerResults.ɵfac = function WorkersCompCodesPickerResults_Factory(t) { return new (t || WorkersCompCodesPickerResults)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(DomSanitizer), ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(ChangeDetectorRef)); };
WorkersCompCodesPickerResults.ɵcmp = ɵɵdefineComponent({ type: WorkersCompCodesPickerResults, selectors: [["workers-comp-codes-picker-results"]], hostVars: 3, hostBindings: function WorkersCompCodesPickerResults_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵhostProperty("hidden", ctx.isHidden);
        ɵɵclassProp("active", ctx.active);
    } }, features: [ɵɵInheritDefinitionFeature], decls: 2, vars: 2, consts: [["class", "picker-loading", 4, "ngIf"], ["direction", "vertical", 4, "ngIf"], [1, "picker-loading"], ["theme", "line"], ["direction", "vertical"], [3, "active", "disabled", "click", "mouseenter", 4, "ngFor", "ngForOf"], ["theme", "line", 4, "ngIf"], [3, "click", "mouseenter"], [3, "innerHtml"], ["direction", "horizontal"], [1, "label"]], template: function WorkersCompCodesPickerResults_Template(rf, ctx) { if (rf & 1) {
        ɵɵtemplate(0, WorkersCompCodesPickerResults_section_0_Template, 2, 0, "section", 0);
        ɵɵtemplate(1, WorkersCompCodesPickerResults_novo_list_1_Template, 3, 2, "novo-list", 1);
    } if (rf & 2) {
        ɵɵproperty("ngIf", ctx.isLoading && !(ctx.matches == null ? null : ctx.matches.length));
        ɵɵadvance(1);
        ɵɵproperty("ngIf", (ctx.matches == null ? null : ctx.matches.length) > 0 && !ctx.hasError);
    } }, directives: [NgIf, NovoLoadingElement, NovoListElement, NgForOf, NovoListItemElement, NovoItemHeaderElement, NovoItemTitleElement, NovoItemContentElement], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(WorkersCompCodesPickerResults, [{
        type: Component,
        args: [{
                selector: 'workers-comp-codes-picker-results',
                template: `
    <section class="picker-loading" *ngIf="isLoading && !matches?.length">
      <novo-loading theme="line"></novo-loading>
    </section>
    <novo-list direction="vertical" *ngIf="matches?.length > 0 && !hasError">
      <novo-list-item
        *ngFor="let match of matches"
        (click)="selectMatch($event)"
        [class.active]="match === activeMatch"
        (mouseenter)="selectActive(match)"
        [class.disabled]="preselected(match)"
      >
        <item-header>
          <item-title>
            <span [innerHtml]="sanitizeHTML(match?.data?.compensation?.code, match?.data?.compensation?.name)"></span>
          </item-title>
        </item-header>
        <item-content direction="horizontal">
          <p>
            <span class="label">{{ labels.state }}: </span><span>{{ match?.data?.compensation?.state }}</span>
          </p>
          <p>
            <span class="label">{{ labels.rate }}: </span><span>{{ labels.formatCurrency(match?.data?.rate) }}</span>
          </p>
        </item-content>
        <item-content direction="horizontal">
          <p>
            <span class="label">{{ labels.startDate }}: </span
            ><span>{{ labels.formatDateWithFormat(match?.data?.startDate, { year: 'numeric', month: 'numeric', day: 'numeric' }) }}</span>
          </p>
          <p>
            <span class="label">{{ labels.endDate }}: </span
            ><span>{{ labels.formatDateWithFormat(match?.data?.endDate, { year: 'numeric', month: 'numeric', day: 'numeric' }) }}</span>
          </p>
        </item-content>
      </novo-list-item>
      <novo-loading theme="line" *ngIf="isLoading && matches?.length > 0"></novo-loading>
    </novo-list>
  `,
            }]
    }], function () { return [{ type: ElementRef }, { type: DomSanitizer }, { type: NovoLabelService }, { type: ChangeDetectorRef }]; }, { active: [{
            type: HostBinding,
            args: ['class.active']
        }], isHidden: [{
            type: HostBinding,
            args: ['hidden']
        }] }); })();

// NG2
const _c0$n = ["results"];
const _c1$9 = ["input"];
function NovoPickerElement_i_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 8);
} }
function NovoPickerElement_i_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i");
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵclassMapInterpolate2("bhi-", ctx_r1.config == null ? null : ctx_r1.config.entityIcon, " entity-icon ", ctx_r1.config == null ? null : ctx_r1.config.entityIcon, "");
} }
function NovoPickerElement_i_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 9);
} }
function NovoPickerElement_i_5_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "i", 10);
    ɵɵlistener("click", function NovoPickerElement_i_5_Template_i_click_0_listener() { ɵɵrestoreView(_r7); const ctx_r6 = ɵɵnextContext(); return ctx_r6.clearValue(true); });
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵɵnextContext();
    ɵɵclassProp("entity-selected", (ctx_r4.config == null ? null : ctx_r4.config.entityIcon) && ctx_r4._value);
} }
const _c2$3 = ["*"];
// Value accessor for the component (supports ngModel)
const PICKER_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoPickerElement),
    multi: true,
};
/**
 * @description This class is the directive definition of the Picker. If you add and attribute of `picker` to an input,
 * it will create an instance of the picker which wraps the input in all of the picker HTML elements and functionality.
 * Picker should be added as a two-way bound ngModel instance `[(picker)]=""` in order to have the picker options
 * dynamically populate.
 */
class NovoPickerElement {
    constructor(element, componentUtils, ref) {
        this.element = element;
        this.componentUtils = componentUtils;
        this.ref = ref;
        this.closeOnSelect = true;
        this.selected = [];
        // Deprecated
        this.appendToBody = false;
        // Deprecated
        this.parentScrollAction = 'close';
        // Side the dropdown will open
        this.side = 'left';
        // Autoselects the first option in the results
        this.autoSelectFirstOption = true;
        this._disablePickerInput = false;
        // Emitter for selects
        this.changed = new EventEmitter();
        this.select = new EventEmitter();
        this.focus = new EventEmitter();
        this.blur = new EventEmitter();
        this.typing = new EventEmitter();
        this.term = '';
        this.onModelChange = () => { };
        this.onModelTouched = () => { };
    }
    // Disable from typing into the picker (result template does everything)
    set disablePickerInput(v) {
        this._disablePickerInput = coerceBooleanProperty(v);
    }
    get disablePickerInput() {
        return this._disablePickerInput;
    }
    ngOnInit() {
        if (this.overrideElement) {
            this.element = this.overrideElement;
        }
        if (this.appendToBody) {
            notify(`'appendToBody' has been deprecated. Please remove this attribute.`);
        }
        // Custom results template
        this.resultsComponent = this.config.resultsTemplate || PickerResults;
        // Get all distinct key up events from the input and only fire if long enough and distinct
        // let input = this.element.nativeElement.querySelector('input');
        const pasteObserver = fromEvent(this.input.nativeElement, 'paste').pipe(debounceTime(250), distinctUntilChanged());
        pasteObserver.subscribe((event) => this.onDebouncedKeyup(event), (err) => this.hideResults(err));
        const keyboardObserver = fromEvent(this.input.nativeElement, 'keyup').pipe(debounceTime(250), distinctUntilChanged());
        keyboardObserver.subscribe((event) => this.onDebouncedKeyup(event), (err) => this.hideResults(err));
    }
    onDebouncedKeyup(event) {
        if (["Escape" /* Escape */, "ArrowDown" /* ArrowDown */, "ArrowUp" /* ArrowUp */, "Enter" /* Enter */, "Tab" /* Tab */].some((key) => key === event.key)) {
            return;
        }
        this.show(event.target.value);
    }
    openPanel() {
        this.container.openPanel();
    }
    closePanel() {
        this.container.closePanel();
    }
    get panelOpen() {
        return this.container && this.container.panelOpen;
    }
    show(term) {
        this.openPanel();
        // Show the results inside
        this.showResults(term);
    }
    onKeyDown(event) {
        if (this.disablePickerInput) {
            Helpers.swallowEvent(event);
            return;
        }
        if (this.panelOpen && !this.disablePickerInput) {
            if (event.key === "Escape" /* Escape */ || event.key === "Tab" /* Tab */) {
                this.hideResults();
                return;
            }
            if (event.key === "ArrowUp" /* ArrowUp */) {
                this.popup.instance.prevActiveMatch();
                this.ref.markForCheck();
                return;
            }
            if (event.key === "ArrowDown" /* ArrowDown */) {
                this.popup.instance.nextActiveMatch();
                this.ref.markForCheck();
                return;
            }
            if (event.key === "Enter" /* Enter */) {
                const activeMatch = this.popup.instance.activeMatch;
                if (!this.selected.find((selected) => activeMatch && activeMatch.value && selected.value === activeMatch.value)) {
                    this.popup.instance.selectActiveMatch();
                    this.ref.markForCheck();
                }
                return;
            }
            if ((event.key === "Backspace" /* Backspace */ || event.key === "Delete" /* Delete */) && !Helpers.isBlank(this._value)) {
                this.clearValue(false);
                this.closePanel();
            }
            if (event.key === "Delete" /* Delete */ && Helpers.isBlank(this._value)) {
                this.clearValue(true);
            }
        }
    }
    clearValue(wipeTerm) {
        this._value = null;
        this.select.emit(this._value);
        this.changed.emit({ value: this._value, rawValue: { label: '', value: this._value } });
        this.onModelChange(this._value);
        if (wipeTerm) {
            this.term = '';
            this.hideResults();
        }
        this.ref.markForCheck();
    }
    /**
     * @description When the input's focus event is called this method calls the debounced function that displays the
     * results.
     */
    onFocus(event) {
        if (!this.panelOpen) {
            this.show();
        }
        this.focus.emit(event);
    }
    // Creates an instance of the results (called popup) and adds all the bindings to that instance.
    showResults(term) {
        // Update Matches
        if (this.popup) {
            // Update existing list or create the DOM element
            this.popup.instance.config = this.config;
            this.popup.instance.term = this.term;
            this.popup.instance.selected = this.selected;
            this.popup.instance.autoSelectFirstOption = this.autoSelectFirstOption;
            this.ref.markForCheck();
        }
        else {
            this.popup = this.componentUtils.append(this.resultsComponent, this.results);
            this.popup.instance.parent = this;
            this.popup.instance.config = this.config;
            this.popup.instance.term = this.term;
            this.popup.instance.selected = this.selected;
            this.popup.instance.autoSelectFirstOption = this.autoSelectFirstOption;
            this.popup.instance.overlay = this.container.overlayRef;
            this.ref.markForCheck();
        }
    }
    // Tells the overlay component to hide the picker results from the DOM without deleting the dynamically allocated popup instance created in
    // showResults. The popup instance will remain in memory from the first time the results are shown until this component is destroyed.
    hideResults(err) {
        this.closePanel();
        this.ref.markForCheck();
    }
    // Cleans up listeners for the popup - will get executed no matter how the popup is closed.
    onOverlayClosed() {
        if (this.popup && this.popup.instance && this.popup.instance.cleanUp) {
            this.popup.instance.cleanUp();
        }
    }
    // get accessor
    get value() {
        return this._value;
    }
    // set accessor including call the onchange callback
    set value(selected) {
        if (!selected) {
            this.term = '';
            this._value = null;
            this.onModelChange(this._value);
        }
        else if (selected.value !== this._value) {
            this.term = this.clearValueOnSelect ? '' : selected.label;
            this._value = selected.value;
            this.changed.emit({ value: selected.value, rawValue: { label: this.term, value: selected.value } });
            this.select.emit(selected);
            this.onModelChange(selected.value);
            if (this.popup) {
                this.popup.instance.selected = this.selected;
            }
        }
        else {
            this.changed.emit({ value: selected.value, rawValue: { label: this.term, value: this._value } });
            this.select.emit(selected);
        }
        this.ref.markForCheck();
    }
    // Makes sure to clear the model if the user clears the text box
    checkTerm(event) {
        this.typing.emit(event);
        if (!event || !event.length) {
            this._value = null;
            this.onModelChange(this._value);
        }
        this.ref.markForCheck();
    }
    // Set touched on blur
    onTouched(event) {
        this.onModelTouched();
        this.blur.emit(event);
    }
    // From ControlValueAccessor interface
    writeValue(value) {
        if (this.clearValueOnSelect) {
            this.term = '';
        }
        else {
            if (typeof value === 'string' && !this.config.useGetLabels) {
                this.term = value;
            }
            else if (value && value.label) {
                this.term = value.label;
            }
            else if (value && value.firstName) {
                this.term = `${value.firstName} ${value.lastName}`;
            }
            else if (value && value.name) {
                this.term = value.name;
            }
            else if (typeof this.config.getLabels === 'function') {
                this.config.getLabels(value).then((result) => {
                    if (result) {
                        this.term = result.length ? result[0].label || '' : result.label || '';
                    }
                    else {
                        this.term = value;
                    }
                    this.ref.markForCheck();
                });
            }
            else if (value && value.title) {
                this.term = value.title;
            }
            else {
                this.term = value || '';
            }
        }
        this._value = value;
        this.ref.markForCheck();
    }
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    setDisabledState(disabled) {
        this._disablePickerInput = disabled;
    }
}
NovoPickerElement.ɵfac = function NovoPickerElement_Factory(t) { return new (t || NovoPickerElement)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ComponentUtils), ɵɵdirectiveInject(ChangeDetectorRef)); };
NovoPickerElement.ɵcmp = ɵɵdefineComponent({ type: NovoPickerElement, selectors: [["novo-picker"]], viewQuery: function NovoPickerElement_Query(rf, ctx) { if (rf & 1) {
        ɵɵstaticViewQuery(_c0$n, true, ViewContainerRef);
        ɵɵstaticViewQuery(NovoOverlayTemplateComponent, true);
        ɵɵstaticViewQuery(_c1$9, true);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.results = _t.first);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.container = _t.first);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.input = _t.first);
    } }, inputs: { config: "config", placeholder: "placeholder", clearValueOnSelect: "clearValueOnSelect", closeOnSelect: "closeOnSelect", selected: "selected", appendToBody: "appendToBody", parentScrollSelector: "parentScrollSelector", parentScrollAction: "parentScrollAction", containerClass: "containerClass", side: "side", autoSelectFirstOption: "autoSelectFirstOption", overrideElement: "overrideElement", disablePickerInput: "disablePickerInput" }, outputs: { changed: "changed", select: "select", focus: "focus", blur: "blur", typing: "typing" }, features: [ɵɵProvidersFeature([PICKER_VALUE_ACCESSOR])], ngContentSelectors: _c2$3, decls: 10, vars: 12, consts: [["class", "bhi-more", 4, "ngIf"], [3, "class", 4, "ngIf"], ["type", "text", "autocomplete", "off", 1, "picker-input", 3, "ngModel", "placeholder", "disabled", "ngModelChange", "keydown", "focus", "click", "blur"], ["input", ""], ["class", "bhi-search", 4, "ngIf"], ["class", "bhi-times", 3, "entity-selected", "click", 4, "ngIf"], ["position", "above-below", 1, "picker-results-container", 3, "parent", "closing"], ["results", ""], [1, "bhi-more"], [1, "bhi-search"], [1, "bhi-times", 3, "click"]], template: function NovoPickerElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵtemplate(0, NovoPickerElement_i_0_Template, 1, 0, "i", 0);
        ɵɵtemplate(1, NovoPickerElement_i_1_Template, 1, 4, "i", 1);
        ɵɵelementStart(2, "input", 2, 3);
        ɵɵlistener("ngModelChange", function NovoPickerElement_Template_input_ngModelChange_2_listener($event) { return ctx.term = $event; })("ngModelChange", function NovoPickerElement_Template_input_ngModelChange_2_listener($event) { return ctx.checkTerm($event); })("keydown", function NovoPickerElement_Template_input_keydown_2_listener($event) { return ctx.onKeyDown($event); })("focus", function NovoPickerElement_Template_input_focus_2_listener($event) { return ctx.onFocus($event); })("click", function NovoPickerElement_Template_input_click_2_listener($event) { return ctx.onFocus($event); })("blur", function NovoPickerElement_Template_input_blur_2_listener($event) { return ctx.onTouched($event); });
        ɵɵelementEnd();
        ɵɵtemplate(4, NovoPickerElement_i_4_Template, 1, 0, "i", 4);
        ɵɵtemplate(5, NovoPickerElement_i_5_Template, 1, 2, "i", 5);
        ɵɵelementStart(6, "novo-overlay-template", 6);
        ɵɵlistener("closing", function NovoPickerElement_Template_novo_overlay_template_closing_6_listener() { return ctx.onOverlayClosed(); });
        ɵɵelement(7, "span", null, 7);
        ɵɵprojection(9);
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵproperty("ngIf", (ctx.config == null ? null : ctx.config.entityIcon) && !ctx._value);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", (ctx.config == null ? null : ctx.config.entityIcon) && ctx._value);
        ɵɵadvance(1);
        ɵɵclassProp("entity-picker", ctx.config == null ? null : ctx.config.entityIcon)("entity-selected", (ctx.config == null ? null : ctx.config.entityIcon) && ctx._value);
        ɵɵproperty("ngModel", ctx.term)("placeholder", ctx.placeholder)("disabled", ctx.disablePickerInput);
        ɵɵadvance(2);
        ɵɵproperty("ngIf", (!ctx._value || ctx.clearValueOnSelect) && !ctx.disablePickerInput);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx._value && !ctx.clearValueOnSelect && !ctx.disablePickerInput);
        ɵɵadvance(1);
        ɵɵproperty("parent", ctx.element);
    } }, directives: [NgIf, DefaultValueAccessor, NgControlStatus, NgModel, NovoOverlayTemplateComponent], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoPickerElement, [{
        type: Component,
        args: [{
                selector: 'novo-picker',
                providers: [PICKER_VALUE_ACCESSOR],
                template: `
    <i class="bhi-more" *ngIf="config?.entityIcon && !_value"></i>
    <i class="bhi-{{ config?.entityIcon }} entity-icon {{ config?.entityIcon }}" *ngIf="config?.entityIcon && _value"></i>
    <input
      type="text"
      class="picker-input"
      [(ngModel)]="term"
      [class.entity-picker]="config?.entityIcon"
      [class.entity-selected]="config?.entityIcon && _value"
      (ngModelChange)="checkTerm($event)"
      [placeholder]="placeholder"
      (keydown)="onKeyDown($event)"
      (focus)="onFocus($event)"
      (click)="onFocus($event)"
      (blur)="onTouched($event)"
      autocomplete="off"
      #input
      [disabled]="disablePickerInput"
    />
    <i class="bhi-search" *ngIf="(!_value || clearValueOnSelect) && !disablePickerInput"></i>
    <i
      class="bhi-times"
      [class.entity-selected]="config?.entityIcon && _value"
      *ngIf="_value && !clearValueOnSelect && !disablePickerInput"
      (click)="clearValue(true)"
    ></i>
    <novo-overlay-template class="picker-results-container" [parent]="element" position="above-below" (closing)="onOverlayClosed()">
      <span #results></span>
      <ng-content></ng-content>
    </novo-overlay-template>
  `,
            }]
    }], function () { return [{ type: ElementRef }, { type: ComponentUtils }, { type: ChangeDetectorRef }]; }, { results: [{
            type: ViewChild,
            args: ['results', { read: ViewContainerRef, static: true }]
        }], config: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], clearValueOnSelect: [{
            type: Input
        }], closeOnSelect: [{
            type: Input
        }], selected: [{
            type: Input
        }], appendToBody: [{
            type: Input
        }], parentScrollSelector: [{
            type: Input
        }], parentScrollAction: [{
            type: Input
        }], containerClass: [{
            type: Input
        }], side: [{
            type: Input
        }], autoSelectFirstOption: [{
            type: Input
        }], overrideElement: [{
            type: Input
        }], disablePickerInput: [{
            type: Input
        }], changed: [{
            type: Output
        }], select: [{
            type: Output
        }], focus: [{
            type: Output
        }], blur: [{
            type: Output
        }], typing: [{
            type: Output
        }], container: [{
            type: ViewChild,
            args: [NovoOverlayTemplateComponent, { static: true }]
        }], input: [{
            type: ViewChild,
            args: ['input', { static: true }]
        }] }); })();

// NG2
class NovoPickerModule {
}
NovoPickerModule.ɵmod = ɵɵdefineNgModule({ type: NovoPickerModule });
NovoPickerModule.ɵinj = ɵɵdefineInjector({ factory: function NovoPickerModule_Factory(t) { return new (t || NovoPickerModule)(); }, imports: [[CommonModule, FormsModule, NovoLoadingModule, NovoListModule, NovoOverlayModule, NovoSwitchModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoPickerModule, { declarations: [NovoPickerElement,
        PickerResults,
        EntityPickerResult,
        EntityPickerResults,
        ChecklistPickerResults,
        GroupedMultiPickerResults,
        DistributionListPickerResults,
        WorkersCompCodesPickerResults,
        SkillsSpecialtyPickerResults], imports: [CommonModule, FormsModule, NovoLoadingModule, NovoListModule, NovoOverlayModule, NovoSwitchModule], exports: [NovoPickerElement,
        PickerResults,
        EntityPickerResult,
        EntityPickerResults,
        ChecklistPickerResults,
        GroupedMultiPickerResults,
        DistributionListPickerResults,
        WorkersCompCodesPickerResults,
        SkillsSpecialtyPickerResults] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoPickerModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, FormsModule, NovoLoadingModule, NovoListModule, NovoOverlayModule, NovoSwitchModule],
                declarations: [
                    NovoPickerElement,
                    PickerResults,
                    EntityPickerResult,
                    EntityPickerResults,
                    ChecklistPickerResults,
                    GroupedMultiPickerResults,
                    DistributionListPickerResults,
                    WorkersCompCodesPickerResults,
                    SkillsSpecialtyPickerResults,
                ],
                exports: [
                    NovoPickerElement,
                    PickerResults,
                    EntityPickerResult,
                    EntityPickerResults,
                    ChecklistPickerResults,
                    GroupedMultiPickerResults,
                    DistributionListPickerResults,
                    WorkersCompCodesPickerResults,
                    SkillsSpecialtyPickerResults,
                ],
            }]
    }], null, null); })();

// NG2
class NovoTooltipModule {
}
NovoTooltipModule.ɵmod = ɵɵdefineNgModule({ type: NovoTooltipModule });
NovoTooltipModule.ɵinj = ɵɵdefineInjector({ factory: function NovoTooltipModule_Factory(t) { return new (t || NovoTooltipModule)(); }, imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoTooltipModule, { declarations: [TooltipDirective, NovoTooltip], imports: [CommonModule], exports: [TooltipDirective] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTooltipModule, [{
        type: NgModule,
        args: [{
                declarations: [TooltipDirective, NovoTooltip],
                exports: [TooltipDirective],
                imports: [CommonModule],
            }]
    }], null, null); })();

// NG2
class NovoSearchBoxModule {
}
NovoSearchBoxModule.ɵmod = ɵɵdefineNgModule({ type: NovoSearchBoxModule });
NovoSearchBoxModule.ɵinj = ɵɵdefineInjector({ factory: function NovoSearchBoxModule_Factory(t) { return new (t || NovoSearchBoxModule)(); }, imports: [[CommonModule, NovoIconModule, NovoPickerModule, NovoTooltipModule, NovoOverlayModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoSearchBoxModule, { declarations: [NovoSearchBoxElement], imports: [CommonModule, NovoIconModule, NovoPickerModule, NovoTooltipModule, NovoOverlayModule], exports: [NovoSearchBoxElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSearchBoxModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, NovoIconModule, NovoPickerModule, NovoTooltipModule, NovoOverlayModule],
                declarations: [NovoSearchBoxElement],
                exports: [NovoSearchBoxElement],
            }]
    }], null, null); })();

class NovoBreadcrumbModule {
}
NovoBreadcrumbModule.ɵmod = ɵɵdefineNgModule({ type: NovoBreadcrumbModule });
NovoBreadcrumbModule.ɵinj = ɵɵdefineInjector({ factory: function NovoBreadcrumbModule_Factory(t) { return new (t || NovoBreadcrumbModule)(); }, providers: [BreadcrumbService], imports: [[CommonModule, RouterModule, NovoDropdownModule, NovoSearchBoxModule, NovoButtonModule, NovoIconModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoBreadcrumbModule, { declarations: [BreadcrumbElement, BreadcrumbItemElement], imports: [CommonModule, RouterModule, NovoDropdownModule, NovoSearchBoxModule, NovoButtonModule, NovoIconModule], exports: [BreadcrumbElement, BreadcrumbItemElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoBreadcrumbModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, RouterModule, NovoDropdownModule, NovoSearchBoxModule, NovoButtonModule, NovoIconModule],
                exports: [BreadcrumbElement, BreadcrumbItemElement],
                declarations: [BreadcrumbElement, BreadcrumbItemElement],
                providers: [BreadcrumbService],
            }]
    }], null, null); })();
ɵɵsetComponentScope(BreadcrumbElement, [NgClass, NgComponentOutlet, NgForOf, NgIf, NgTemplateOutlet, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase, RouterOutlet, RouterLink, RouterLinkWithHref, RouterLinkActive, ɵangular_packages_router_router_l, NovoDropdownElement, NovoItemElement, NovoDropdownListElement, NovoDropDownItemHeaderElement, NovoSearchBoxElement, NovoButtonElement, NovoIconComponent, BreadcrumbElement, BreadcrumbItemElement], [AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, TitleCasePipe, CurrencyPipe, DatePipe, I18nPluralPipe, I18nSelectPipe, KeyValuePipe]);

// NG2
class DecodeURIPipe {
    transform(encodedString) {
        let decodedString = '';
        if (!Helpers.isBlank(encodedString) && typeof encodedString === 'string') {
            decodedString = decodeURIComponent(encodedString);
        }
        return decodedString;
    }
}
DecodeURIPipe.ɵfac = function DecodeURIPipe_Factory(t) { return new (t || DecodeURIPipe)(); };
DecodeURIPipe.ɵpipe = ɵɵdefinePipe({ name: "decodeURI", type: DecodeURIPipe, pure: true });
DecodeURIPipe.ɵprov = ɵɵdefineInjectable({ token: DecodeURIPipe, factory: DecodeURIPipe.ɵfac });
/*@__PURE__*/ (function () { ɵsetClassMetadata(DecodeURIPipe, [{
        type: Pipe,
        args: [{ name: 'decodeURI' }]
    }, {
        type: Injectable
    }], null, null); })();

// NG2
class DefaultPipe {
    transform(value, defaultValue) {
        return value || defaultValue;
    }
}
DefaultPipe.ɵfac = function DefaultPipe_Factory(t) { return new (t || DefaultPipe)(); };
DefaultPipe.ɵpipe = ɵɵdefinePipe({ name: "default", type: DefaultPipe, pure: true });
DefaultPipe.ɵprov = ɵɵdefineInjectable({ token: DefaultPipe, factory: DefaultPipe.ɵfac });
/*@__PURE__*/ (function () { ɵsetClassMetadata(DefaultPipe, [{
        type: Pipe,
        args: [{ name: 'default', pure: true }]
    }, {
        type: Injectable
    }], null, null); })();

class GroupByPipe {
    transform(input, prop) {
        if (!Array.isArray(input)) {
            return input;
        }
        const arr = {};
        for (const value of input) {
            const field = can(value).have(prop);
            if (Helpers.isBlank(arr[field])) {
                arr[field] = [];
            }
            arr[field].push(value);
        }
        return Object.keys(arr).map((key) => ({ key, value: arr[key] }));
    }
}
GroupByPipe.ɵfac = function GroupByPipe_Factory(t) { return new (t || GroupByPipe)(); };
GroupByPipe.ɵpipe = ɵɵdefinePipe({ name: "groupBy", type: GroupByPipe, pure: true });
/*@__PURE__*/ (function () { ɵsetClassMetadata(GroupByPipe, [{
        type: Pipe,
        args: [{
                name: 'groupBy',
            }]
    }], null, null); })();

class IsoDateRangePipe {
    constructor() { }
    transform(dates) {
        // TODO: Lookup Locale to convert to Users DateFormat
        const [start, end] = dates.map((date) => {
            if (date instanceof Date) {
                return date.toISOString().slice(0, 10);
            }
            return date.slice(0, 10);
        });
        return `${start} - ${end}`;
    }
}
IsoDateRangePipe.ɵfac = function IsoDateRangePipe_Factory(t) { return new (t || IsoDateRangePipe)(); };
IsoDateRangePipe.ɵpipe = ɵɵdefinePipe({ name: "isoDateRange", type: IsoDateRangePipe, pure: true });
/*@__PURE__*/ (function () { ɵsetClassMetadata(IsoDateRangePipe, [{
        type: Pipe,
        args: [{ name: 'isoDateRange' }]
    }], function () { return []; }, null); })();

class IsoDatePipe {
    constructor() { }
    transform(date) {
        if (date instanceof Date) {
            return date.toISOString().slice(0, 10);
        }
        return date.slice(0, 10);
    }
}
IsoDatePipe.ɵfac = function IsoDatePipe_Factory(t) { return new (t || IsoDatePipe)(); };
IsoDatePipe.ɵpipe = ɵɵdefinePipe({ name: "isoDate", type: IsoDatePipe, pure: true });
/*@__PURE__*/ (function () { ɵsetClassMetadata(IsoDatePipe, [{
        type: Pipe,
        args: [{ name: 'isoDate' }]
    }], function () { return []; }, null); })();

class IsoTimeRangePipe {
    constructor() { }
    transform(dates) {
        // TODO: Lookup Locale to convert to 12hour
        const [start, end] = dates.map((date) => {
            if (date instanceof Date) {
                return date.toISOString().slice(11, 16);
            }
            return date.slice(11, 16);
        });
        return `${start} - ${end}`;
    }
}
IsoTimeRangePipe.ɵfac = function IsoTimeRangePipe_Factory(t) { return new (t || IsoTimeRangePipe)(); };
IsoTimeRangePipe.ɵpipe = ɵɵdefinePipe({ name: "isoTimeRange", type: IsoTimeRangePipe, pure: true });
/*@__PURE__*/ (function () { ɵsetClassMetadata(IsoTimeRangePipe, [{
        type: Pipe,
        args: [{ name: 'isoTimeRange' }]
    }], function () { return []; }, null); })();

class IsoTimePipe {
    constructor() { }
    transform(date) {
        // TODO: Lookup Locale to convert to 12hour
        if (date instanceof Date) {
            return date.toISOString().slice(11, 16);
        }
        return date.slice(11, 16);
    }
}
IsoTimePipe.ɵfac = function IsoTimePipe_Factory(t) { return new (t || IsoTimePipe)(); };
IsoTimePipe.ɵpipe = ɵɵdefinePipe({ name: "isoTime", type: IsoTimePipe, pure: true });
/*@__PURE__*/ (function () { ɵsetClassMetadata(IsoTimePipe, [{
        type: Pipe,
        args: [{ name: 'isoTime' }]
    }], function () { return []; }, null); })();

// NG2
// Rule storage - pluralize and singularize need to be run sequentially,
// while other rules can be optimized using an object for instant lookups.
const pluralRules = [];
const singularRules = [];
const uncountables = {};
const irregularPlurals = {};
const irregularSingles = {};
/**
 * Title case a string.
 */
function toTitleCase(str) {
    return str.charAt(0).toUpperCase() + str.substr(1).toLowerCase();
}
/**
 * Sanitize a pluralization rule to a usable regular expression.
 */
function sanitizeRule(rule) {
    if (typeof rule === 'string') {
        return new RegExp('^' + rule + '$', 'i');
    }
    return rule;
}
/**
 * Pass in a word token to produce a function that can replicate the case on
 * another word.
 */
function restoreCase(word, token) {
    // Upper cased words. E.g. "HELLO".
    if (word === word.toUpperCase()) {
        return token.toUpperCase();
    }
    // Title cased words. E.g. "Title".
    if (word[0] === word[0].toUpperCase()) {
        return toTitleCase(token);
    }
    // Lower cased words. E.g. "test".
    return token.toLowerCase();
}
/**
 * Interpolate a regexp string.
 */
function interpolate(str, args) {
    return str.replace(/\$(\d{1,2})/g, (match, index) => {
        return args[index] || '';
    });
}
/**
 * Sanitize a word by passing in the word and sanitization rules.
 */
function sanitizeWord(token, word, collection) {
    // Empty string or doesn't need fixing.
    if (!token.length || uncountables.hasOwnProperty(token)) {
        return word;
    }
    let len = collection.length;
    // Iterate over the sanitization rules and use the first one to match.
    while (len--) {
        const rule = collection[len];
        // If the rule passes, return the replacement.
        if (rule[0].test(word)) {
            return word.replace(rule[0], (match, index, words) => {
                const result = interpolate(rule[1], [match, index, words]);
                if (match === '') {
                    return restoreCase(words[index - 1], result);
                }
                return restoreCase(match, result);
            });
        }
    }
    return word;
}
/**
 * Replace a word with the updated word.
 */
function replaceWord(replaceMap, keepMap, rules) {
    return (word) => {
        // Get the correct token and case restoration functions.
        const token = word.toLowerCase();
        // Check against the keep object map.
        if (keepMap.hasOwnProperty(token)) {
            return restoreCase(word, token);
        }
        // Check against the replacement map for a direct word replacement.
        if (replaceMap.hasOwnProperty(token)) {
            return restoreCase(word, replaceMap[token]);
        }
        // Run all the rules against the word.
        return sanitizeWord(token, word, rules);
    };
}
class Pluralize {
    static pluralize(word, count = 1, inclusive) {
        const pluralized = count === 1 ? Pluralize.singular(word) : Pluralize.plural(word);
        return (inclusive ? `${count} ` : '') + pluralized;
    }
    static singular(word) {
        return replaceWord(irregularSingles, irregularPlurals, pluralRules)(word);
    }
    static plural(word) {
        return replaceWord(irregularPlurals, irregularSingles, singularRules)(word);
    }
    static addPluralRule(rule, replacement) {
        pluralRules.push([sanitizeRule(rule), replacement]);
    }
    static addSingularRule(rule, replacement) {
        singularRules.push([sanitizeRule(rule), replacement]);
    }
    static addUncountableRule(word) {
        if (typeof word === 'string') {
            uncountables[word.toLowerCase()] = true;
            return;
        }
        // Set singular and plural references for the word.
        Pluralize.addPluralRule(word, '$0');
        Pluralize.addSingularRule(word, '$0');
    }
    static addIrregularRule(single, plural) {
        const one = plural.toLowerCase();
        const many = single.toLowerCase();
        irregularSingles[one] = many;
        irregularPlurals[many] = one;
    }
}
/**
 * Irregular rules.
 */
[
    // Pronouns.
    ['I', 'we'],
    ['me', 'us'],
    ['he', 'they'],
    ['she', 'they'],
    ['them', 'them'],
    ['myself', 'ourselves'],
    ['yourself', 'yourselves'],
    ['itself', 'themselves'],
    ['herself', 'themselves'],
    ['himself', 'themselves'],
    ['themself', 'themselves'],
    ['is', 'are'],
    ['this', 'these'],
    ['that', 'those'],
    // Words ending in with a consonant and `o`.
    ['echo', 'echoes'],
    ['dingo', 'dingoes'],
    ['volcano', 'volcanoes'],
    ['tornado', 'tornadoes'],
    ['torpedo', 'torpedoes'],
    // Ends with `us`.
    ['genus', 'genera'],
    ['viscus', 'viscera'],
    // Ends with `ma`.
    ['stigma', 'stigmata'],
    ['stoma', 'stomata'],
    ['dogma', 'dogmata'],
    ['lemma', 'lemmata'],
    ['schema', 'schemata'],
    ['anathema', 'anathemata'],
    // Other irregular rules.
    ['ox', 'oxen'],
    ['axe', 'axes'],
    ['die', 'dice'],
    ['yes', 'yeses'],
    ['foot', 'feet'],
    ['eave', 'eaves'],
    ['goose', 'geese'],
    ['tooth', 'teeth'],
    ['quiz', 'quizzes'],
    ['human', 'humans'],
    ['proof', 'proofs'],
    ['carve', 'carves'],
    ['valve', 'valves'],
    ['thief', 'thieves'],
    ['genie', 'genies'],
    ['groove', 'grooves'],
    ['pickaxe', 'pickaxes'],
    ['whiskey', 'whiskies'],
].forEach((rule) => {
    return Pluralize.addIrregularRule(rule[0], rule[1]);
});
/**
 * Pluralization rules.
 */
[
    [/s?$/i, 's'],
    [/([^aeiou]ese)$/i, '$1'],
    [/(ax|test)is$/i, '$1es'],
    [/(alias|[^aou]us|tlas|gas|ris)$/i, '$1es'],
    [/(e[mn]u)s?$/i, '$1s'],
    [/([^l]ias|[aeiou]las|[emjzr]as|[iu]am)$/i, '$1'],
    [/(alumn|syllab|octop|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1i'],
    [/(alumn|alg|vertebr)(?:a|ae)$/i, '$1ae'],
    [/(seraph|cherub)(?:im)?$/i, '$1im'],
    [/(her|at|gr)o$/i, '$1oes'],
    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$/i, '$1a'],
    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)(?:a|on)$/i, '$1a'],
    [/sis$/i, 'ses'],
    [/(?:(kni|wi|li)fe|(ar|l|ea|eo|oa|hoo)f)$/i, '$1$2ves'],
    [/([^aeiouy]|qu)y$/i, '$1ies'],
    [/([^ch][ieo][ln])ey$/i, '$1ies'],
    [/(x|ch|ss|sh|zz)$/i, '$1es'],
    [/(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$/i, '$1ices'],
    [/(m|l)(?:ice|ouse)$/i, '$1ice'],
    [/(pe)(?:rson|ople)$/i, '$1ople'],
    [/(child)(?:ren)?$/i, '$1ren'],
    [/eaux$/i, '$0'],
    [/m[ae]n$/i, 'men'],
    ['thou', 'you'],
].forEach((rule) => {
    return Pluralize.addPluralRule(rule[0], rule[1]);
});
/**
 * Singularization rules.
 */
[
    [/s$/i, ''],
    [/(ss)$/i, '$1'],
    [/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)(?:sis|ses)$/i, '$1sis'],
    [/(^analy)(?:sis|ses)$/i, '$1sis'],
    [/(wi|kni|(?:after|half|high|low|mid|non|night|[^\w]|^)li)ves$/i, '$1fe'],
    [/(ar|(?:wo|[ae])l|[eo][ao])ves$/i, '$1f'],
    [/([^aeiouy]|qu)ies$/i, '$1y'],
    [/(^[pl]|zomb|^(?:neck)?t|[aeo][lt]|cut)ies$/i, '$1ie'],
    [/(\b(?:mon|smil))ies$/i, '$1ey'],
    [/(m|l)ice$/i, '$1ouse'],
    [/(seraph|cherub)im$/i, '$1'],
    [/(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|tlas|gas|(?:her|at|gr)o|ris)(?:es)?$/i, '$1'],
    [/(e[mn]u)s?$/i, '$1'],
    [/(movie|twelve)s$/i, '$1'],
    [/(cris|test|diagnos)(?:is|es)$/i, '$1is'],
    [/(alumn|syllab|octop|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1us'],
    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$/i, '$1um'],
    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$/i, '$1on'],
    [/(alumn|alg|vertebr)ae$/i, '$1a'],
    [/(cod|mur|sil|vert|ind)ices$/i, '$1ex'],
    [/(matr|append)ices$/i, '$1ix'],
    [/(pe)(rson|ople)$/i, '$1rson'],
    [/(child)ren$/i, '$1'],
    [/(eau)x?$/i, '$1'],
    [/men$/i, 'man'],
].forEach((rule) => {
    return Pluralize.addSingularRule(rule[0], rule[1]);
});
/**
 * Uncountable rules.
 */
[
    // Singular words with no plurals.
    'advice',
    'adulthood',
    'agenda',
    'aid',
    'alcohol',
    'ammo',
    'athletics',
    'bison',
    'blood',
    'bream',
    'buffalo',
    'butter',
    'carp',
    'cash',
    'chassis',
    'chess',
    'clothing',
    'commerce',
    'cod',
    'cooperation',
    'corps',
    'digestion',
    'debris',
    'diabetes',
    'energy',
    'equipment',
    'elk',
    'excretion',
    'expertise',
    'flounder',
    'fun',
    'gallows',
    'garbage',
    'graffiti',
    'headquarters',
    'health',
    'herpes',
    'highjinks',
    'homework',
    'housework',
    'information',
    'jeans',
    'justice',
    'kudos',
    'labour',
    'literature',
    'machinery',
    'mackerel',
    'media',
    'mews',
    'moose',
    'music',
    'news',
    'pike',
    'plankton',
    'pliers',
    'pollution',
    'premises',
    'rain',
    'research',
    'rice',
    'salmon',
    'scissors',
    'series',
    'sewage',
    'shambles',
    'shrimp',
    'species',
    'staff',
    'swine',
    'trout',
    'traffic',
    'transporation',
    'tuna',
    'wealth',
    'welfare',
    'whiting',
    'wildebeest',
    'wildlife',
    'you',
    // Regexes.
    /pox$/i,
    /ois$/i,
    /deer$/i,
    /fish$/i,
    /sheep$/i,
    /measles$/i,
    /[^aeiou]ese$/i,
].forEach(Pluralize.addUncountableRule);
class PluralPipe {
    transform(value) {
        return Pluralize.pluralize(value);
    }
}
PluralPipe.ɵfac = function PluralPipe_Factory(t) { return new (t || PluralPipe)(); };
PluralPipe.ɵpipe = ɵɵdefinePipe({ name: "plural", type: PluralPipe, pure: true });
PluralPipe.ɵprov = ɵɵdefineInjectable({ token: PluralPipe, factory: PluralPipe.ɵfac });
/*@__PURE__*/ (function () { ɵsetClassMetadata(PluralPipe, [{
        type: Pipe,
        args: [{ name: 'plural' }]
    }, {
        type: Injectable
    }], null, null); })();

// NG2
class NovoPipesModule {
}
NovoPipesModule.ɵmod = ɵɵdefineNgModule({ type: NovoPipesModule });
NovoPipesModule.ɵinj = ɵɵdefineInjector({ factory: function NovoPipesModule_Factory(t) { return new (t || NovoPipesModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoPipesModule, { declarations: [PluralPipe, DecodeURIPipe, GroupByPipe, DefaultPipe, IsoTimePipe, IsoDatePipe, IsoTimeRangePipe, IsoDateRangePipe], exports: [PluralPipe, DecodeURIPipe, GroupByPipe, DefaultPipe, IsoTimePipe, IsoDatePipe, IsoTimeRangePipe, IsoDateRangePipe] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoPipesModule, [{
        type: NgModule,
        args: [{
                declarations: [PluralPipe, DecodeURIPipe, GroupByPipe, DefaultPipe, IsoTimePipe, IsoDatePipe, IsoTimeRangePipe, IsoDateRangePipe],
                exports: [PluralPipe, DecodeURIPipe, GroupByPipe, DefaultPipe, IsoTimePipe, IsoDatePipe, IsoTimeRangePipe, IsoDateRangePipe],
            }]
    }], null, null); })();

class MonthPipe {
    constructor(locale = 'en-US') {
        this.locale = locale;
    }
    transform(date, locale = this.locale, method = 'long') {
        return new Intl.DateTimeFormat(locale, { month: method }).format(date);
    }
}
MonthPipe.ɵfac = function MonthPipe_Factory(t) { return new (t || MonthPipe)(ɵɵdirectiveInject(LOCALE_ID)); };
MonthPipe.ɵpipe = ɵɵdefinePipe({ name: "month", type: MonthPipe, pure: true });
/*@__PURE__*/ (function () { ɵsetClassMetadata(MonthPipe, [{
        type: Pipe,
        args: [{ name: 'month' }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [LOCALE_ID]
            }] }]; }, null); })();

class YearPipe {
    constructor(locale = 'en-US') {
        this.locale = locale;
    }
    transform(date, locale = this.locale, method = 'numeric') {
        return new Intl.DateTimeFormat(locale, { year: method }).format(date);
    }
}
YearPipe.ɵfac = function YearPipe_Factory(t) { return new (t || YearPipe)(ɵɵdirectiveInject(LOCALE_ID)); };
YearPipe.ɵpipe = ɵɵdefinePipe({ name: "year", type: YearPipe, pure: true });
/*@__PURE__*/ (function () { ɵsetClassMetadata(YearPipe, [{
        type: Pipe,
        args: [{ name: 'year' }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [LOCALE_ID]
            }] }]; }, null); })();

class MonthDayPipe {
    constructor(locale = 'en-US') {
        this.locale = locale;
    }
    transform(date, locale = this.locale, method = 'short') {
        return new Intl.DateTimeFormat(locale, { month: method, day: 'numeric' }).format(date);
    }
}
MonthDayPipe.ɵfac = function MonthDayPipe_Factory(t) { return new (t || MonthDayPipe)(ɵɵdirectiveInject(LOCALE_ID)); };
MonthDayPipe.ɵpipe = ɵɵdefinePipe({ name: "monthday", type: MonthDayPipe, pure: true });
/*@__PURE__*/ (function () { ɵsetClassMetadata(MonthDayPipe, [{
        type: Pipe,
        args: [{ name: 'monthday' }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [LOCALE_ID]
            }] }]; }, null); })();

class EndOfWeekDisplayPipe {
    constructor(locale = 'en-US') {
        this.locale = locale;
    }
    transform(endOfWeek, startOfWeek, locale = this.locale, method = 'short') {
        if (endOfWeek.getMonth() === startOfWeek.getMonth()) {
            return new Intl.DateTimeFormat(locale, { day: 'numeric' }).format(endOfWeek);
        }
        return new Intl.DateTimeFormat(locale, { month: method, day: 'numeric' }).format(endOfWeek);
    }
}
EndOfWeekDisplayPipe.ɵfac = function EndOfWeekDisplayPipe_Factory(t) { return new (t || EndOfWeekDisplayPipe)(ɵɵdirectiveInject(LOCALE_ID)); };
EndOfWeekDisplayPipe.ɵpipe = ɵɵdefinePipe({ name: "endofweekdisplay", type: EndOfWeekDisplayPipe, pure: true });
/*@__PURE__*/ (function () { ɵsetClassMetadata(EndOfWeekDisplayPipe, [{
        type: Pipe,
        args: [{ name: 'endofweekdisplay' }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [LOCALE_ID]
            }] }]; }, null); })();

class WeekdayPipe {
    constructor(locale = 'en-US') {
        this.locale = locale;
    }
    transform(date, locale = this.locale, method = 'short') {
        return new Intl.DateTimeFormat(locale, { weekday: method }).format(date);
    }
}
WeekdayPipe.ɵfac = function WeekdayPipe_Factory(t) { return new (t || WeekdayPipe)(ɵɵdirectiveInject(LOCALE_ID)); };
WeekdayPipe.ɵpipe = ɵɵdefinePipe({ name: "weekday", type: WeekdayPipe, pure: true });
/*@__PURE__*/ (function () { ɵsetClassMetadata(WeekdayPipe, [{
        type: Pipe,
        args: [{ name: 'weekday' }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [LOCALE_ID]
            }] }]; }, null); })();

class DayOfMonthPipe {
    constructor(locale = 'en-US') {
        this.locale = locale;
    }
    transform(date, locale = this.locale, method = 'numeric') {
        return new Intl.DateTimeFormat(locale, { day: method }).format(date);
    }
}
DayOfMonthPipe.ɵfac = function DayOfMonthPipe_Factory(t) { return new (t || DayOfMonthPipe)(ɵɵdirectiveInject(LOCALE_ID)); };
DayOfMonthPipe.ɵpipe = ɵɵdefinePipe({ name: "dayofmonth", type: DayOfMonthPipe, pure: true });
/*@__PURE__*/ (function () { ɵsetClassMetadata(DayOfMonthPipe, [{
        type: Pipe,
        args: [{ name: 'dayofmonth' }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [LOCALE_ID]
            }] }]; }, null); })();

function NovoCalendarDateChangeElement_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵtext(1);
    ɵɵpipe(2, "month");
    ɵɵpipe(3, "year");
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ɵɵpipeBind2(2, 1, ctx_r0.viewDate, ctx_r0.locale) + " " + ɵɵpipeBind2(3, 4, ctx_r0.viewDate, ctx_r0.locale));
} }
function NovoCalendarDateChangeElement_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵtext(1);
    ɵɵpipe(2, "monthday");
    ɵɵpipe(3, "endofweekdisplay");
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ɵɵpipeBind3(2, 1, ctx_r1.startOfWeek, ctx_r1.locale, "long") + " - " + ɵɵpipeBind4(3, 5, ctx_r1.endOfWeek, ctx_r1.startOfWeek, ctx_r1.locale, "long"));
} }
function NovoCalendarDateChangeElement_span_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵtext(1);
    ɵɵpipe(2, "weekday");
    ɵɵpipe(3, "month");
    ɵɵpipe(4, "dayofmonth");
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ɵɵpipeBind3(2, 1, ctx_r2.viewDate, ctx_r2.locale, "long") + ", " + ɵɵpipeBind2(3, 5, ctx_r2.viewDate, ctx_r2.locale) + " " + ɵɵpipeBind2(4, 8, ctx_r2.viewDate, ctx_r2.locale));
} }
class NovoCalendarDateChangeElement {
    constructor(locale) {
        /**
         * Called when the view date is changed
         */
        this.viewDateChange = new EventEmitter();
        this.locale = locale;
    }
    /**
     * @hidden
     */
    subtractDate() {
        this.changeDate(-1);
    }
    addDate() {
        this.changeDate(1);
    }
    changeDate(unit) {
        const addFn = {
            day: addDays,
            week: addWeeks,
            month: addMonths,
        }[this.view];
        this.viewDateChange.emit(addFn(this.viewDate, unit));
    }
    get startOfWeek() {
        return startOfWeek(this.viewDate);
    }
    get endOfWeek() {
        return endOfWeek(this.viewDate);
    }
}
NovoCalendarDateChangeElement.ɵfac = function NovoCalendarDateChangeElement_Factory(t) { return new (t || NovoCalendarDateChangeElement)(ɵɵdirectiveInject(LOCALE_ID)); };
NovoCalendarDateChangeElement.ɵcmp = ɵɵdefineComponent({ type: NovoCalendarDateChangeElement, selectors: [["novo-calendar-date-change"]], inputs: { view: "view", viewDate: "viewDate", locale: "locale" }, outputs: { viewDateChange: "viewDateChange" }, decls: 7, vars: 4, consts: [[1, "cal-date-change"], [1, "bhi-arrow-left", 3, "click"], [3, "ngSwitch"], [4, "ngSwitchCase"], [1, "bhi-arrow-right", 3, "click"]], template: function NovoCalendarDateChangeElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "div", 0);
        ɵɵelementStart(1, "i", 1);
        ɵɵlistener("click", function NovoCalendarDateChangeElement_Template_i_click_1_listener() { return ctx.subtractDate(); });
        ɵɵelementEnd();
        ɵɵelementStart(2, "span", 2);
        ɵɵtemplate(3, NovoCalendarDateChangeElement_span_3_Template, 4, 7, "span", 3);
        ɵɵtemplate(4, NovoCalendarDateChangeElement_span_4_Template, 4, 10, "span", 3);
        ɵɵtemplate(5, NovoCalendarDateChangeElement_span_5_Template, 5, 11, "span", 3);
        ɵɵelementEnd();
        ɵɵelementStart(6, "i", 4);
        ɵɵlistener("click", function NovoCalendarDateChangeElement_Template_i_click_6_listener() { return ctx.addDate(); });
        ɵɵelementEnd();
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵadvance(2);
        ɵɵproperty("ngSwitch", ctx.view);
        ɵɵadvance(1);
        ɵɵproperty("ngSwitchCase", "month");
        ɵɵadvance(1);
        ɵɵproperty("ngSwitchCase", "week");
        ɵɵadvance(1);
        ɵɵproperty("ngSwitchCase", "day");
    } }, directives: [NgSwitch, NgSwitchCase], pipes: [MonthPipe, YearPipe, MonthDayPipe, EndOfWeekDisplayPipe, WeekdayPipe, DayOfMonthPipe], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoCalendarDateChangeElement, [{
        type: Component,
        args: [{
                selector: 'novo-calendar-date-change',
                template: `
    <div class="cal-date-change">
      <i class="bhi-arrow-left" (click)="subtractDate()"></i>
      <span [ngSwitch]="view">
        <span *ngSwitchCase="'month'">{{ (viewDate | month: locale) + ' ' + (viewDate | year: locale) }}</span>
        <span *ngSwitchCase="'week'">{{
          (startOfWeek | monthday: locale:'long') + ' - ' + (endOfWeek | endofweekdisplay: startOfWeek:locale:'long')
        }}</span>
        <span *ngSwitchCase="'day'">{{
          (viewDate | weekday: locale:'long') + ', ' + (viewDate | month: locale) + ' ' + (viewDate | dayofmonth: locale)
        }}</span>
      </span>
      <i class="bhi-arrow-right" (click)="addDate()"></i>
    </div>
  `,
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [LOCALE_ID]
            }] }]; }, { view: [{
            type: Input
        }], viewDate: [{
            type: Input
        }], locale: [{
            type: Input
        }], viewDateChange: [{
            type: Output
        }] }); })();

function NovoEventTypeLegendElement_ng_template_0_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 4);
    ɵɵlistener("click", function NovoEventTypeLegendElement_ng_template_0_div_1_Template_div_click_0_listener($event) { ɵɵrestoreView(_r6); const type_r4 = ctx.$implicit; const ctx_r5 = ɵɵnextContext(2); $event.stopPropagation(); return ctx_r5.eventTypeClicked.emit({ event: type_r4 == null ? null : type_r4.key }); });
    ɵɵelement(1, "div", 5);
    ɵɵelementStart(2, "div");
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const type_r4 = ctx.$implicit;
    ɵɵadvance(3);
    ɵɵtextInterpolate(type_r4 == null ? null : type_r4.key);
} }
function NovoEventTypeLegendElement_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 2);
    ɵɵtemplate(1, NovoEventTypeLegendElement_ng_template_0_div_1_Template, 4, 1, "div", 3);
    ɵɵpipe(2, "groupBy");
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ɵɵpipeBind2(2, 1, ctx_r1.events, "type"));
} }
function NovoEventTypeLegendElement_ng_template_2_Template(rf, ctx) { }
const _c0$o = function (a0, a1) { return { events: a0, eventTypeClicked: a1 }; };
class NovoEventTypeLegendElement {
    constructor() {
        this.eventTypeClicked = new EventEmitter();
    }
}
NovoEventTypeLegendElement.ɵfac = function NovoEventTypeLegendElement_Factory(t) { return new (t || NovoEventTypeLegendElement)(); };
NovoEventTypeLegendElement.ɵcmp = ɵɵdefineComponent({ type: NovoEventTypeLegendElement, selectors: [["novo-event-type-legend"]], inputs: { events: "events", customTemplate: "customTemplate" }, outputs: { eventTypeClicked: "eventTypeClicked" }, decls: 3, vars: 5, consts: [["defaultTemplate", ""], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "cal-event-legend"], ["class", "cal-event-type", 3, "click", 4, "ngFor", "ngForOf"], [1, "cal-event-type", 3, "click"], [1, "cal-event-type-swatch"]], template: function NovoEventTypeLegendElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵtemplate(0, NovoEventTypeLegendElement_ng_template_0_Template, 3, 4, "ng-template", null, 0, ɵɵtemplateRefExtractor);
        ɵɵtemplate(2, NovoEventTypeLegendElement_ng_template_2_Template, 0, 0, "ng-template", 1);
    } if (rf & 2) {
        const _r0 = ɵɵreference(1);
        ɵɵadvance(2);
        ɵɵproperty("ngTemplateOutlet", ctx.customTemplate || _r0)("ngTemplateOutletContext", ɵɵpureFunction2(2, _c0$o, ctx.events, ctx.eventTypeClicked));
    } }, directives: [NgTemplateOutlet, NgForOf], pipes: [GroupByPipe], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoEventTypeLegendElement, [{
        type: Component,
        args: [{
                selector: 'novo-event-type-legend',
                template: `
    <ng-template #defaultTemplate>
      <div class="cal-event-legend">
        <div
          class="cal-event-type"
          *ngFor="let type of events | groupBy: 'type'"
          (click)="$event.stopPropagation(); eventTypeClicked.emit({ event: type?.key })"
        >
          <div class="cal-event-type-swatch"></div>
          <div>{{ type?.key }}</div>
        </div>
      </div>
    </ng-template>
    <ng-template
      [ngTemplateOutlet]="customTemplate || defaultTemplate"
      [ngTemplateOutletContext]="{ events: events, eventTypeClicked: eventTypeClicked }"
    >
    </ng-template>
  `,
            }]
    }], null, { events: [{
            type: Input
        }], customTemplate: [{
            type: Input
        }], eventTypeClicked: [{
            type: Output
        }] }); })();

function NovoCalendarAllDayEventElement_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 2);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵstyleProp("background-color", ctx_r1.event.color.secondary)("border-color", ctx_r1.event.color.primary);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r1.event.title, " ");
} }
function NovoCalendarAllDayEventElement_ng_template_2_Template(rf, ctx) { }
const _c0$p = function (a0, a1) { return { event: a0, eventClicked: a1 }; };
class NovoCalendarAllDayEventElement {
    constructor() {
        this.eventClicked = new EventEmitter();
    }
}
NovoCalendarAllDayEventElement.ɵfac = function NovoCalendarAllDayEventElement_Factory(t) { return new (t || NovoCalendarAllDayEventElement)(); };
NovoCalendarAllDayEventElement.ɵcmp = ɵɵdefineComponent({ type: NovoCalendarAllDayEventElement, selectors: [["novo-calendar-all-day-event"]], inputs: { event: "event", customTemplate: "customTemplate" }, outputs: { eventClicked: "eventClicked" }, decls: 3, vars: 5, consts: [["defaultTemplate", ""], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "cal-all-day-event"]], template: function NovoCalendarAllDayEventElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵtemplate(0, NovoCalendarAllDayEventElement_ng_template_0_Template, 2, 5, "ng-template", null, 0, ɵɵtemplateRefExtractor);
        ɵɵtemplate(2, NovoCalendarAllDayEventElement_ng_template_2_Template, 0, 0, "ng-template", 1);
    } if (rf & 2) {
        const _r0 = ɵɵreference(1);
        ɵɵadvance(2);
        ɵɵproperty("ngTemplateOutlet", ctx.customTemplate || _r0)("ngTemplateOutletContext", ɵɵpureFunction2(2, _c0$p, ctx.event, ctx.eventClicked));
    } }, directives: [NgTemplateOutlet], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoCalendarAllDayEventElement, [{
        type: Component,
        args: [{
                selector: 'novo-calendar-all-day-event',
                template: `
    <ng-template #defaultTemplate>
      <div class="cal-all-day-event" [style.backgroundColor]="event.color.secondary" [style.borderColor]="event.color.primary">
        {{ event.title }}
        <!--<novo-calendar-event-title
          [event]="event"
          view="day"
          (click)="eventClicked.emit()">
        </novo-calendar-event-title>
        <novo-calendar-event-actions [event]="event"></novo-calendar-event-actions>-->
      </div>
    </ng-template>
    <ng-template
      [ngTemplateOutlet]="customTemplate || defaultTemplate"
      [ngTemplateOutletContext]="{
        event: event,
        eventClicked: eventClicked
      }"
    >
    </ng-template>
  `,
            }]
    }], null, { event: [{
            type: Input
        }], customTemplate: [{
            type: Input
        }], eventClicked: [{
            type: Output
        }] }); })();

function NovoCalendarDayEventElement_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 2);
    ɵɵlistener("click", function NovoCalendarDayEventElement_ng_template_0_Template_div_click_0_listener() { ɵɵrestoreView(_r4); const ctx_r3 = ɵɵnextContext(); return ctx_r3.eventClicked.emit({ event: ctx_r3.dayEvent.event }); });
    ɵɵelement(1, "div", 3);
    ɵɵelementStart(2, "div", 4);
    ɵɵelementStart(3, "div", 5);
    ɵɵtext(4);
    ɵɵelementEnd();
    ɵɵelementStart(5, "div", 6);
    ɵɵtext(6);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵstyleProp("border-color", ctx_r1.dayEvent.event.color.secondary);
    ɵɵclassProp("cal-starts-within-day", !ctx_r1.dayEvent.startsBeforeDay)("cal-ends-within-day", !ctx_r1.dayEvent.endsAfterDay);
    ɵɵproperty("ngClass", ctx_r1.dayEvent.event.cssClass)("tooltip", ctx_r1.dayEvent.event.description)("tooltipPosition", ctx_r1.tooltipPosition);
    ɵɵadvance(1);
    ɵɵstyleProp("background-color", ctx_r1.dayEvent.event.color.primary);
    ɵɵadvance(3);
    ɵɵtextInterpolate(ctx_r1.dayEvent.event.title);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r1.dayEvent.event == null ? null : ctx_r1.dayEvent.event.description);
} }
function NovoCalendarDayEventElement_ng_template_2_Template(rf, ctx) { }
const _c0$q = function (a0, a1, a2) { return { dayEvent: a0, tooltipPosition: a1, eventClicked: a2 }; };
class NovoCalendarDayEventElement {
    constructor() {
        this.eventClicked = new EventEmitter();
    }
}
NovoCalendarDayEventElement.ɵfac = function NovoCalendarDayEventElement_Factory(t) { return new (t || NovoCalendarDayEventElement)(); };
NovoCalendarDayEventElement.ɵcmp = ɵɵdefineComponent({ type: NovoCalendarDayEventElement, selectors: [["novo-calendar-day-event"]], inputs: { dayEvent: "dayEvent", tooltipPosition: "tooltipPosition", customTemplate: "customTemplate" }, outputs: { eventClicked: "eventClicked" }, decls: 3, vars: 6, consts: [["defaultTemplate", ""], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "cal-event", 3, "ngClass", "tooltip", "tooltipPosition", "click"], [1, "cal-event-ribbon"], [1, "cal-event-group"], [1, "cal-event-title"], [1, "cal-event-description"]], template: function NovoCalendarDayEventElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵtemplate(0, NovoCalendarDayEventElement_ng_template_0_Template, 7, 13, "ng-template", null, 0, ɵɵtemplateRefExtractor);
        ɵɵtemplate(2, NovoCalendarDayEventElement_ng_template_2_Template, 0, 0, "ng-template", 1);
    } if (rf & 2) {
        const _r0 = ɵɵreference(1);
        ɵɵadvance(2);
        ɵɵproperty("ngTemplateOutlet", ctx.customTemplate || _r0)("ngTemplateOutletContext", ɵɵpureFunction3(2, _c0$q, ctx.dayEvent, ctx.tooltipPosition, ctx.eventClicked));
    } }, directives: [NgTemplateOutlet, NgClass, TooltipDirective], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoCalendarDayEventElement, [{
        type: Component,
        args: [{
                selector: 'novo-calendar-day-event',
                template: `
    <ng-template #defaultTemplate>
      <div
        class="cal-event"
        [style.borderColor]="dayEvent.event.color.secondary"
        [class.cal-starts-within-day]="!dayEvent.startsBeforeDay"
        [class.cal-ends-within-day]="!dayEvent.endsAfterDay"
        [ngClass]="dayEvent.event.cssClass"
        [tooltip]="dayEvent.event.description"
        [tooltipPosition]="tooltipPosition"
        (click)="eventClicked.emit({ event: dayEvent.event })"
      >
        <div class="cal-event-ribbon" [style.backgroundColor]="dayEvent.event.color.primary"></div>
        <div class="cal-event-group">
          <div class="cal-event-title">{{ dayEvent.event.title }}</div>
          <div class="cal-event-description">{{ dayEvent.event?.description }}</div>
        </div>
      </div>
    </ng-template>
    <ng-template
      [ngTemplateOutlet]="customTemplate || defaultTemplate"
      [ngTemplateOutletContext]="{ dayEvent: dayEvent, tooltipPosition: tooltipPosition, eventClicked: eventClicked }"
    >
    </ng-template>
  `,
            }]
    }], null, { dayEvent: [{
            type: Input
        }], tooltipPosition: [{
            type: Input
        }], customTemplate: [{
            type: Input
        }], eventClicked: [{
            type: Output
        }] }); })();

class HoursPipe {
    constructor(locale = 'en-US') {
        this.locale = locale;
    }
    transform(date, locale = this.locale, method = 'numeric') {
        return new Intl.DateTimeFormat(locale, { hour: method }).format(date);
    }
}
HoursPipe.ɵfac = function HoursPipe_Factory(t) { return new (t || HoursPipe)(ɵɵdirectiveInject(LOCALE_ID)); };
HoursPipe.ɵpipe = ɵɵdefinePipe({ name: "hours", type: HoursPipe, pure: true });
/*@__PURE__*/ (function () { ɵsetClassMetadata(HoursPipe, [{
        type: Pipe,
        args: [{ name: 'hours' }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [LOCALE_ID]
            }] }]; }, null); })();

function NovoCalendarHourSegmentElement_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 2);
    ɵɵelementStart(1, "div", 3);
    ɵɵtext(2);
    ɵɵpipe(3, "hours");
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵclassProp("cal-hour-start", ctx_r1.segment.isStart)("cal-after-hour-start", !ctx_r1.segment.isStart);
    ɵɵproperty("ngClass", ctx_r1.segment.cssClass);
    ɵɵadvance(2);
    ɵɵtextInterpolate1(" ", ɵɵpipeBind2(3, 6, ctx_r1.segment.date, ctx_r1.locale), " ");
} }
function NovoCalendarHourSegmentElement_ng_template_2_Template(rf, ctx) { }
const _c0$r = function (a0, a1) { return { segment: a0, locale: a1 }; };
class NovoCalendarHourSegmentElement {
}
NovoCalendarHourSegmentElement.ɵfac = function NovoCalendarHourSegmentElement_Factory(t) { return new (t || NovoCalendarHourSegmentElement)(); };
NovoCalendarHourSegmentElement.ɵcmp = ɵɵdefineComponent({ type: NovoCalendarHourSegmentElement, selectors: [["novo-calendar-day-hour-segment"]], inputs: { segment: "segment", locale: "locale", customTemplate: "customTemplate" }, decls: 3, vars: 5, consts: [["defaultTemplate", ""], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "cal-hour-segment", 3, "ngClass"], [1, "cal-time"]], template: function NovoCalendarHourSegmentElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵtemplate(0, NovoCalendarHourSegmentElement_ng_template_0_Template, 4, 9, "ng-template", null, 0, ɵɵtemplateRefExtractor);
        ɵɵtemplate(2, NovoCalendarHourSegmentElement_ng_template_2_Template, 0, 0, "ng-template", 1);
    } if (rf & 2) {
        const _r0 = ɵɵreference(1);
        ɵɵadvance(2);
        ɵɵproperty("ngTemplateOutlet", ctx.customTemplate || _r0)("ngTemplateOutletContext", ɵɵpureFunction2(2, _c0$r, ctx.segment, ctx.locale));
    } }, directives: [NgTemplateOutlet, NgClass], pipes: [HoursPipe], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoCalendarHourSegmentElement, [{
        type: Component,
        args: [{
                selector: 'novo-calendar-day-hour-segment',
                template: `
    <ng-template #defaultTemplate>
      <div
        class="cal-hour-segment"
        [class.cal-hour-start]="segment.isStart"
        [class.cal-after-hour-start]="!segment.isStart"
        [ngClass]="segment.cssClass"
      >
        <div class="cal-time">
          {{ segment.date | hours: locale }}
        </div>
      </div>
    </ng-template>
    <ng-template
      [ngTemplateOutlet]="customTemplate || defaultTemplate"
      [ngTemplateOutletContext]="{
        segment: segment,
        locale: locale
      }"
    >
    </ng-template>
  `,
            }]
    }], null, { segment: [{
            type: Input
        }], locale: [{
            type: Input
        }], customTemplate: [{
            type: Input
        }] }); })();

function NovoCalendarDayViewElement_novo_calendar_all_day_event_2_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-calendar-all-day-event", 7);
    ɵɵlistener("eventClicked", function NovoCalendarDayViewElement_novo_calendar_all_day_event_2_Template_novo_calendar_all_day_event_eventClicked_0_listener() { ɵɵrestoreView(_r6); const event_r4 = ctx.$implicit; const ctx_r5 = ɵɵnextContext(); return ctx_r5.eventClicked.emit({ event: event_r4 }); });
    ɵɵelementEnd();
} if (rf & 2) {
    const event_r4 = ctx.$implicit;
    const ctx_r1 = ɵɵnextContext();
    ɵɵproperty("event", event_r4)("customTemplate", ctx_r1.allDayEventTemplate);
} }
function NovoCalendarDayViewElement_div_5_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 8, 9);
    ɵɵelementStart(2, "novo-calendar-day-event", 10);
    ɵɵlistener("eventClicked", function NovoCalendarDayViewElement_div_5_Template_novo_calendar_day_event_eventClicked_2_listener($event) { ɵɵrestoreView(_r10); const ctx_r9 = ɵɵnextContext(); return ctx_r9.eventClicked.emit($event); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const dayEvent_r7 = ctx.$implicit;
    const ctx_r2 = ɵɵnextContext();
    ɵɵstyleProp("margin-top", dayEvent_r7.top, "px")("height", dayEvent_r7.height, "px")("margin-left", dayEvent_r7.left + 70, "px")("width", dayEvent_r7.width - 1, "px");
    ɵɵadvance(2);
    ɵɵproperty("dayEvent", dayEvent_r7)("tooltipPosition", ctx_r2.tooltipPosition)("customTemplate", ctx_r2.eventTemplate);
} }
function NovoCalendarDayViewElement_div_6_novo_calendar_day_hour_segment_1_Template(rf, ctx) { if (rf & 1) {
    const _r15 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-calendar-day-hour-segment", 13);
    ɵɵlistener("click", function NovoCalendarDayViewElement_div_6_novo_calendar_day_hour_segment_1_Template_novo_calendar_day_hour_segment_click_0_listener() { ɵɵrestoreView(_r15); const segment_r13 = ctx.$implicit; const ctx_r14 = ɵɵnextContext(2); return ctx_r14.hourSegmentClicked.emit({ date: segment_r13.date }); });
    ɵɵelementEnd();
} if (rf & 2) {
    const segment_r13 = ctx.$implicit;
    const ctx_r12 = ɵɵnextContext(2);
    ɵɵproperty("segment", segment_r13)("locale", ctx_r12.locale)("customTemplate", ctx_r12.hourSegmentTemplate);
} }
function NovoCalendarDayViewElement_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 11);
    ɵɵtemplate(1, NovoCalendarDayViewElement_div_6_novo_calendar_day_hour_segment_1_Template, 1, 3, "novo-calendar-day-hour-segment", 12);
    ɵɵelementEnd();
} if (rf & 2) {
    const hour_r11 = ctx.$implicit;
    const ctx_r3 = ɵɵnextContext();
    ɵɵstyleProp("min-width", (ctx_r3.view == null ? null : ctx_r3.view.width) + 70, "px");
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", hour_r11.segments);
} }
/**
 * @hidden
 */
const SEGMENT_HEIGHT = 30;
/**
 * @hidden
 */
const MINUTES_IN_HOUR$1 = 60;
/**
 * Shows all events on a given day. Example usage:
 *
 * ```typescript
 * &lt;novo-calendar-day
 *  [viewDate]="viewDate"
 *  [events]="events"&gt;
 * &lt;/novo-calendar-day&gt;
 * ```
 */
class NovoCalendarDayViewElement {
    /**
     * @hidden
     */
    constructor(cdr, locale) {
        this.cdr = cdr;
        /**
         * An array of events to display on view
         */
        this.events = [];
        /**
         * The number of segments in an hour. Must be <= 6
         */
        this.hourSegments = 2;
        /**
         * The day start hours in 24 hour time. Must be 0-23
         */
        this.dayStartHour = 0;
        /**
         * The day start minutes. Must be 0-59
         */
        this.dayStartMinute = 0;
        /**
         * The day end hours in 24 hour time. Must be 0-23
         */
        this.dayEndHour = 23;
        /**
         * The day end minutes. Must be 0-59
         */
        this.dayEndMinute = 59;
        /**
         * The width in pixels of each event on the view
         */
        this.eventWidth = 150;
        /**
         * The grid size to snap resizing and dragging of events to
         */
        this.eventSnapSize = 30;
        /**
         * The placement of the event tooltip
         */
        this.tooltipPosition = 'top';
        /**
         * Called when an event title is clicked
         */
        this.eventClicked = new EventEmitter();
        /**
         * Called when an hour segment is clicked
         */
        this.hourSegmentClicked = new EventEmitter();
        /**
         * Called when an event is resized or dragged and dropped
         */
        this.eventTimesChanged = new EventEmitter();
        /**
         * @hidden
         */
        this.hours = [];
        /**
         * @hidden
         */
        this.width = 0;
        this.locale = locale;
    }
    /**
     * @hidden
     */
    ngOnInit() {
        if (this.refresh) {
            this.refreshSubscription = this.refresh.subscribe(() => {
                this.refreshAll();
                this.cdr.detectChanges();
            });
        }
    }
    /**
     * @hidden
     */
    ngOnDestroy() {
        if (this.refreshSubscription) {
            this.refreshSubscription.unsubscribe();
        }
    }
    /**
     * @hidden
     */
    ngOnChanges(changes) {
        if (changes.viewDate || changes.dayStartHour || changes.dayStartMinute || changes.dayEndHour || changes.dayEndMinute) {
            this.refreshHourGrid();
        }
        if (changes.viewDate ||
            changes.events ||
            changes.dayStartHour ||
            changes.dayStartMinute ||
            changes.dayEndHour ||
            changes.dayEndMinute ||
            changes.eventWidth) {
            this.refreshView();
        }
    }
    /*
      eventDropped(dropEvent: {dropData?: {event?: CalendarEvent}}, segment: DayViewHourSegment): void {
        if (dropEvent.dropData && dropEvent.dropData.event) {
          this.eventTimesChanged.emit({event: dropEvent.dropData.event, newStart: segment.date});
        }
      }
  
      resizeStarted(event: DayViewEvent, resizeEvent: ResizeEvent, dayViewContainer: HTMLElement): void {
        this.currentResize = {
          originalTop: event.top,
          originalHeight: event.height,
          edge: typeof resizeEvent.edges.top !== 'undefined' ? 'top' : 'bottom'
        };
        const resizeHelper: CalendarResizeHelper = new CalendarResizeHelper(dayViewContainer);
        this.validateResize = ({rectangle}) => resizeHelper.validateResize({rectangle});
        this.cdr.detectChanges();
      }
  
      resizing(event: DayViewEvent, resizeEvent: ResizeEvent): void {
        if (resizeEvent.edges.top) {
          event.top = this.currentResize.originalTop + +resizeEvent.edges.top;
          event.height = this.currentResize.originalHeight - +resizeEvent.edges.top;
        } else if (resizeEvent.edges.bottom) {
          event.height = this.currentResize.originalHeight + +resizeEvent.edges.bottom;
        }
      }
  
      resizeEnded(dayEvent: DayViewEvent): void {
  
        let pixelsMoved: number;
        if (this.currentResize.edge === 'top') {
          pixelsMoved = (dayEvent.top - this.currentResize.originalTop);
        } else {
          pixelsMoved = (dayEvent.height - this.currentResize.originalHeight);
        }
  
        dayEvent.top = this.currentResize.originalTop;
        dayEvent.height = this.currentResize.originalHeight;
  
        const pixelAmountInMinutes: number = MINUTES_IN_HOUR / (this.hourSegments * SEGMENT_HEIGHT);
        const minutesMoved: number = pixelsMoved * pixelAmountInMinutes;
        let newStart: Date = dayEvent.event.start;
        let newEnd: Date = dayEvent.event.end;
        if (this.currentResize.edge === 'top') {
          newStart = addMinutes(newStart, minutesMoved);
        } else if (newEnd) {
          newEnd = addMinutes(newEnd, minutesMoved);
        }
  
        this.eventTimesChanged.emit({newStart, newEnd, event: dayEvent.event});
        this.currentResize = null;
  
      }
  
      dragStart(event: HTMLElement, dayViewContainer: HTMLElement): void {
        const dragHelper: CalendarDragHelper = new CalendarDragHelper(dayViewContainer, event);
        this.validateDrag = ({x, y}) => !this.currentResize && dragHelper.validateDrag({x, y});
        this.cdr.detectChanges();
      }
  
      eventDragged(dayEvent: DayViewEvent, draggedInPixels: number): void {
        const pixelAmountInMinutes: number = MINUTES_IN_HOUR / (this.hourSegments * SEGMENT_HEIGHT);
        const minutesMoved: number = draggedInPixels * pixelAmountInMinutes;
        const newStart: Date = addMinutes(dayEvent.event.start, minutesMoved);
        let newEnd: Date;
        if (dayEvent.event.end) {
          newEnd = addMinutes(dayEvent.event.end, minutesMoved);
        }
        this.eventTimesChanged.emit({newStart, newEnd, event: dayEvent.event});
      }
      */
    refreshHourGrid() {
        this.hours = getDayViewHourGrid({
            viewDate: this.viewDate,
            hourSegments: this.hourSegments,
            dayStart: {
                hour: this.dayStartHour,
                minute: this.dayStartMinute,
            },
            dayEnd: {
                hour: this.dayEndHour,
                minute: this.dayEndMinute,
            },
        });
        if (this.hourSegmentModifier) {
            this.hours.forEach((hour) => {
                hour.segments.forEach((segment) => this.hourSegmentModifier(segment));
            });
        }
    }
    refreshView() {
        this.view = getDayView({
            events: this.events,
            viewDate: this.viewDate,
            hourSegments: this.hourSegments,
            dayStart: {
                hour: this.dayStartHour,
                minute: this.dayStartMinute,
            },
            dayEnd: {
                hour: this.dayEndHour,
                minute: this.dayEndMinute,
            },
            eventWidth: this.eventWidth,
            segmentHeight: SEGMENT_HEIGHT,
        });
    }
    refreshAll() {
        this.refreshHourGrid();
        this.refreshView();
    }
}
NovoCalendarDayViewElement.ɵfac = function NovoCalendarDayViewElement_Factory(t) { return new (t || NovoCalendarDayViewElement)(ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(LOCALE_ID)); };
NovoCalendarDayViewElement.ɵcmp = ɵɵdefineComponent({ type: NovoCalendarDayViewElement, selectors: [["novo-calendar-day"]], inputs: { viewDate: "viewDate", events: "events", hourSegments: "hourSegments", dayStartHour: "dayStartHour", dayStartMinute: "dayStartMinute", dayEndHour: "dayEndHour", dayEndMinute: "dayEndMinute", eventWidth: "eventWidth", refresh: "refresh", locale: "locale", hourSegmentModifier: "hourSegmentModifier", eventSnapSize: "eventSnapSize", tooltipPosition: "tooltipPosition", hourSegmentTemplate: "hourSegmentTemplate", allDayEventTemplate: "allDayEventTemplate", eventTemplate: "eventTemplate" }, outputs: { eventClicked: "eventClicked", hourSegmentClicked: "hourSegmentClicked", eventTimesChanged: "eventTimesChanged" }, features: [ɵɵNgOnChangesFeature], decls: 7, vars: 3, consts: [[1, "cal-day-view"], ["dayViewContainer", ""], [3, "event", "customTemplate", "eventClicked", 4, "ngFor", "ngForOf"], [1, "cal-hour-rows"], [1, "cal-events"], ["class", "cal-event-container", 3, "marginTop", "height", "marginLeft", "width", 4, "ngFor", "ngForOf"], ["class", "cal-hour", 3, "minWidth", 4, "ngFor", "ngForOf"], [3, "event", "customTemplate", "eventClicked"], [1, "cal-event-container"], ["event", ""], [3, "dayEvent", "tooltipPosition", "customTemplate", "eventClicked"], [1, "cal-hour"], [3, "segment", "locale", "customTemplate", "click", 4, "ngFor", "ngForOf"], [3, "segment", "locale", "customTemplate", "click"]], template: function NovoCalendarDayViewElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "div", 0, 1);
        ɵɵtemplate(2, NovoCalendarDayViewElement_novo_calendar_all_day_event_2_Template, 1, 2, "novo-calendar-all-day-event", 2);
        ɵɵelementStart(3, "div", 3);
        ɵɵelementStart(4, "div", 4);
        ɵɵtemplate(5, NovoCalendarDayViewElement_div_5_Template, 3, 11, "div", 5);
        ɵɵelementEnd();
        ɵɵtemplate(6, NovoCalendarDayViewElement_div_6_Template, 2, 3, "div", 6);
        ɵɵelementEnd();
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵadvance(2);
        ɵɵproperty("ngForOf", ctx.view.allDayEvents);
        ɵɵadvance(3);
        ɵɵproperty("ngForOf", ctx.view == null ? null : ctx.view.events);
        ɵɵadvance(1);
        ɵɵproperty("ngForOf", ctx.hours);
    } }, directives: [NgForOf, NovoCalendarAllDayEventElement, NovoCalendarDayEventElement, NovoCalendarHourSegmentElement], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoCalendarDayViewElement, [{
        type: Component,
        args: [{
                selector: 'novo-calendar-day',
                template: `
    <div class="cal-day-view" #dayViewContainer>
      <novo-calendar-all-day-event
        *ngFor="let event of view.allDayEvents"
        [event]="event"
        [customTemplate]="allDayEventTemplate"
        (eventClicked)="eventClicked.emit({ event: event })"
      >
      </novo-calendar-all-day-event>
      <div class="cal-hour-rows">
        <div class="cal-events">
          <div
            #event
            *ngFor="let dayEvent of view?.events"
            class="cal-event-container"
            [style.marginTop.px]="dayEvent.top"
            [style.height.px]="dayEvent.height"
            [style.marginLeft.px]="dayEvent.left + 70"
            [style.width.px]="dayEvent.width - 1"
          >
            <novo-calendar-day-event
              [dayEvent]="dayEvent"
              [tooltipPosition]="tooltipPosition"
              [customTemplate]="eventTemplate"
              (eventClicked)="eventClicked.emit($event)"
            >
            </novo-calendar-day-event>
          </div>
        </div>
        <div class="cal-hour" *ngFor="let hour of hours" [style.minWidth.px]="view?.width + 70">
          <novo-calendar-day-hour-segment
            *ngFor="let segment of hour.segments"
            [segment]="segment"
            [locale]="locale"
            [customTemplate]="hourSegmentTemplate"
            (click)="hourSegmentClicked.emit({ date: segment.date })"
          >
          </novo-calendar-day-hour-segment>
        </div>
      </div>
    </div>
  `,
            }]
    }], function () { return [{ type: ChangeDetectorRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [LOCALE_ID]
            }] }]; }, { viewDate: [{
            type: Input
        }], events: [{
            type: Input
        }], hourSegments: [{
            type: Input
        }], dayStartHour: [{
            type: Input
        }], dayStartMinute: [{
            type: Input
        }], dayEndHour: [{
            type: Input
        }], dayEndMinute: [{
            type: Input
        }], eventWidth: [{
            type: Input
        }], refresh: [{
            type: Input
        }], locale: [{
            type: Input
        }], hourSegmentModifier: [{
            type: Input
        }], eventSnapSize: [{
            type: Input
        }], tooltipPosition: [{
            type: Input
        }], hourSegmentTemplate: [{
            type: Input
        }], allDayEventTemplate: [{
            type: Input
        }], eventTemplate: [{
            type: Input
        }], eventClicked: [{
            type: Output
        }], hourSegmentClicked: [{
            type: Output
        }], eventTimesChanged: [{
            type: Output
        }] }); })();

function NovoCalendarMonthDayElement_ng_template_0_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 7);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r3.day.badgeTotal);
} }
function NovoCalendarMonthDayElement_ng_template_0_div_6_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 8);
    ɵɵlistener("click", function NovoCalendarMonthDayElement_ng_template_0_div_6_Template_div_click_0_listener($event) { ɵɵrestoreView(_r7); const type_r5 = ctx.$implicit; const ctx_r6 = ɵɵnextContext(2); $event.stopPropagation(); return ctx_r6.eventClicked.emit({ event: type_r5 == null ? null : type_r5.value[0] }); });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const type_r5 = ctx.$implicit;
    ɵɵstyleProp("background-color", type_r5 == null ? null : type_r5.value[0] == null ? null : type_r5.value[0].color.primary);
    ɵɵproperty("ngClass", type_r5 == null ? null : type_r5.value[0] == null ? null : type_r5.value[0].cssClass);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", type_r5 == null ? null : type_r5.value.length, " ");
} }
function NovoCalendarMonthDayElement_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 2);
    ɵɵtemplate(1, NovoCalendarMonthDayElement_ng_template_0_span_1_Template, 2, 1, "span", 3);
    ɵɵelementStart(2, "span", 4);
    ɵɵtext(3);
    ɵɵpipe(4, "dayofmonth");
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementStart(5, "div", 5);
    ɵɵtemplate(6, NovoCalendarMonthDayElement_ng_template_0_div_6_Template, 2, 4, "div", 6);
    ɵɵpipe(7, "groupBy");
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r1.day.badgeTotal > 0);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ɵɵpipeBind2(4, 3, ctx_r1.day.date, ctx_r1.locale));
    ɵɵadvance(3);
    ɵɵproperty("ngForOf", ɵɵpipeBind2(7, 6, ctx_r1.day.events, "type"));
} }
function NovoCalendarMonthDayElement_ng_template_2_Template(rf, ctx) { }
const _c0$s = function (a0, a1, a2, a3, a4, a5, a6) { return { day: a0, locale: a1, tooltipPosition: a2, eventClicked: a3, accepted: a4, rejected: a5, maybes: a6 }; };
class NovoCalendarMonthDayElement {
    constructor() {
        this.eventClicked = new EventEmitter();
    }
    get accepted() {
        if (!this.day) {
            return [];
        }
        return this.day.events.filter((evt) => {
            return evt.response === CalendarEventResponse.Accepted;
        });
    }
    get rejected() {
        if (!this.day) {
            return [];
        }
        return this.day.events.filter((evt) => {
            return evt.response === CalendarEventResponse.Rejected;
        });
    }
    get maybes() {
        if (!this.day) {
            return [];
        }
        return this.day.events.filter((evt) => {
            return evt.response === CalendarEventResponse.Maybe;
        });
    }
}
NovoCalendarMonthDayElement.ɵfac = function NovoCalendarMonthDayElement_Factory(t) { return new (t || NovoCalendarMonthDayElement)(); };
NovoCalendarMonthDayElement.ɵcmp = ɵɵdefineComponent({ type: NovoCalendarMonthDayElement, selectors: [["novo-calendar-month-day"]], hostVars: 22, hostBindings: function NovoCalendarMonthDayElement_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵclassMap("calendar-cell calendar-day-cell " + (ctx.day == null ? null : ctx.day.cssClass));
        ɵɵstyleProp("background-color", ctx.day.backgroundColor);
        ɵɵclassProp("calendar-day-accepted", ctx.accepted.length)("calendar-day-rejected", ctx.rejected.length)("calendar-past", ctx.day.isPast)("calendar-today", ctx.day.isToday)("calendar-future", ctx.day.isFuture)("calendar-weekend", ctx.day.isWeekend)("calendar-in-month", ctx.day.inMonth)("calendar-out-month", !ctx.day.inMonth)("calendar-has-events", ctx.day.events.length > 0);
    } }, inputs: { day: "day", locale: "locale", tooltipPosition: "tooltipPosition", customTemplate: "customTemplate" }, outputs: { eventClicked: "eventClicked" }, decls: 3, vars: 10, consts: [["defaultTemplate", ""], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "calendar-day-top"], ["class", "calendar-day-badge", 4, "ngIf"], [1, "calendar-day-number"], [1, "calendar-events"], ["class", "calendar-event", 3, "backgroundColor", "ngClass", "click", 4, "ngFor", "ngForOf"], [1, "calendar-day-badge"], [1, "calendar-event", 3, "ngClass", "click"]], template: function NovoCalendarMonthDayElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵtemplate(0, NovoCalendarMonthDayElement_ng_template_0_Template, 8, 9, "ng-template", null, 0, ɵɵtemplateRefExtractor);
        ɵɵtemplate(2, NovoCalendarMonthDayElement_ng_template_2_Template, 0, 0, "ng-template", 1);
    } if (rf & 2) {
        const _r0 = ɵɵreference(1);
        ɵɵadvance(2);
        ɵɵproperty("ngTemplateOutlet", ctx.customTemplate || _r0)("ngTemplateOutletContext", ɵɵpureFunction7(2, _c0$s, ctx.day, ctx.locale, ctx.tooltipPosition, ctx.eventClicked, ctx.accepted, ctx.rejected, ctx.maybes));
    } }, directives: [NgTemplateOutlet, NgIf, NgForOf, NgClass], pipes: [DayOfMonthPipe, GroupByPipe], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoCalendarMonthDayElement, [{
        type: Component,
        args: [{
                selector: 'novo-calendar-month-day',
                template: `
    <ng-template #defaultTemplate>
      <div class="calendar-day-top">
        <span class="calendar-day-badge" *ngIf="day.badgeTotal > 0">{{ day.badgeTotal }}</span>
        <span class="calendar-day-number">{{ day.date | dayofmonth: locale }}</span>
      </div>
      <div class="calendar-events">
        <div
          class="calendar-event"
          *ngFor="let type of day.events | groupBy: 'type'"
          [style.backgroundColor]="type?.value[0]?.color.primary"
          [ngClass]="type?.value[0]?.cssClass"
          (click)="$event.stopPropagation(); eventClicked.emit({ event: type?.value[0] })"
        >
          {{ type?.value.length }}
        </div>
      </div>
    </ng-template>
    <ng-template
      [ngTemplateOutlet]="customTemplate || defaultTemplate"
      [ngTemplateOutletContext]="{
        day: day,
        locale: locale,
        tooltipPosition: tooltipPosition,
        eventClicked: eventClicked,
        accepted: accepted,
        rejected: rejected,
        maybes: maybes
      }"
    >
    </ng-template>
  `,
                host: {
                    '[class]': '"calendar-cell calendar-day-cell " + day?.cssClass',
                    '[class.calendar-day-accepted]': 'accepted.length',
                    '[class.calendar-day-rejected]': 'rejected.length',
                    '[class.calendar-past]': 'day.isPast',
                    '[class.calendar-today]': 'day.isToday',
                    '[class.calendar-future]': 'day.isFuture',
                    '[class.calendar-weekend]': 'day.isWeekend',
                    '[class.calendar-in-month]': 'day.inMonth',
                    '[class.calendar-out-month]': '!day.inMonth',
                    '[class.calendar-has-events]': 'day.events.length > 0',
                    '[style.backgroundColor]': 'day.backgroundColor',
                },
            }]
    }], null, { day: [{
            type: Input
        }], locale: [{
            type: Input
        }], tooltipPosition: [{
            type: Input
        }], customTemplate: [{
            type: Input
        }], eventClicked: [{
            type: Output
        }] }); })();

function NovoCalendarMonthHeaderElement_ng_template_0_div_8_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 9);
    ɵɵtext(1);
    ɵɵpipe(2, "weekday");
    ɵɵelementEnd();
} if (rf & 2) {
    const day_r4 = ctx.$implicit;
    const ctx_r3 = ɵɵnextContext(2);
    ɵɵclassProp("calendar-past", day_r4.isPast)("calendar-today", day_r4.isToday)("calendar-future", day_r4.isFuture)("calendar-weekend", day_r4.isWeekend);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ɵɵpipeBind2(2, 9, day_r4.date, ctx_r3.locale), " ");
} }
function NovoCalendarMonthHeaderElement_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 2);
    ɵɵelementStart(1, "div", 3);
    ɵɵelementStart(2, "button", 4);
    ɵɵlistener("click", function NovoCalendarMonthHeaderElement_ng_template_0_Template_button_click_2_listener($event) { ɵɵrestoreView(_r6); const ctx_r5 = ɵɵnextContext(); return ctx_r5.prevMonth($event); });
    ɵɵelementEnd();
    ɵɵelementStart(3, "div", 5);
    ɵɵtext(4);
    ɵɵpipe(5, "month");
    ɵɵelementEnd();
    ɵɵelementStart(6, "button", 6);
    ɵɵlistener("click", function NovoCalendarMonthHeaderElement_ng_template_0_Template_button_click_6_listener($event) { ɵɵrestoreView(_r6); const ctx_r7 = ɵɵnextContext(); return ctx_r7.nextMonth($event); });
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementStart(7, "div", 7);
    ɵɵtemplate(8, NovoCalendarMonthHeaderElement_ng_template_0_div_8_Template, 3, 12, "div", 8);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(4);
    ɵɵtextInterpolate(ɵɵpipeBind2(5, 2, ctx_r1.viewDate, ctx_r1.locale));
    ɵɵadvance(4);
    ɵɵproperty("ngForOf", ctx_r1.days);
} }
function NovoCalendarMonthHeaderElement_ng_template_2_Template(rf, ctx) { }
const _c0$t = function (a0, a1, a2) { return { days: a0, locale: a1, viewDate: a2 }; };
class NovoCalendarMonthHeaderElement {
    constructor() {
        /**
         * Called when the view date is changed
         */
        this.viewDateChange = new EventEmitter();
    }
    prevMonth(event) {
        this.viewDateChange.emit(subMonths(this.viewDate, 1));
    }
    nextMonth(event) {
        this.viewDateChange.emit(addMonths(this.viewDate, 1));
    }
}
NovoCalendarMonthHeaderElement.ɵfac = function NovoCalendarMonthHeaderElement_Factory(t) { return new (t || NovoCalendarMonthHeaderElement)(); };
NovoCalendarMonthHeaderElement.ɵcmp = ɵɵdefineComponent({ type: NovoCalendarMonthHeaderElement, selectors: [["novo-calendar-month-header"]], inputs: { viewDate: "viewDate", days: "days", locale: "locale", customTemplate: "customTemplate" }, outputs: { viewDateChange: "viewDateChange" }, decls: 3, vars: 6, consts: [["defaultTemplate", ""], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "calendar-header"], [1, "calendar-header-top"], ["theme", "icon", "icon", "previous", 3, "click"], [1, "calendar-month"], ["theme", "icon", "icon", "next", 3, "click"], [1, "calendar-weekdays"], ["class", "calendar-weekday", 3, "calendar-past", "calendar-today", "calendar-future", "calendar-weekend", 4, "ngFor", "ngForOf"], [1, "calendar-weekday"]], template: function NovoCalendarMonthHeaderElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵtemplate(0, NovoCalendarMonthHeaderElement_ng_template_0_Template, 9, 5, "ng-template", null, 0, ɵɵtemplateRefExtractor);
        ɵɵtemplate(2, NovoCalendarMonthHeaderElement_ng_template_2_Template, 0, 0, "ng-template", 1);
    } if (rf & 2) {
        const _r0 = ɵɵreference(1);
        ɵɵadvance(2);
        ɵɵproperty("ngTemplateOutlet", ctx.customTemplate || _r0)("ngTemplateOutletContext", ɵɵpureFunction3(2, _c0$t, ctx.days, ctx.locale, ctx.viewDate));
    } }, directives: [NgTemplateOutlet, NovoButtonElement, NgForOf], pipes: [MonthPipe, WeekdayPipe], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoCalendarMonthHeaderElement, [{
        type: Component,
        args: [{
                selector: 'novo-calendar-month-header',
                template: `
    <ng-template #defaultTemplate>
      <div class="calendar-header">
        <div class="calendar-header-top">
          <button theme="icon" icon="previous" (click)="prevMonth($event)"></button>
          <div class="calendar-month">{{ viewDate | month: locale }}</div>
          <button theme="icon" icon="next" (click)="nextMonth($event)"></button>
        </div>
        <div class="calendar-weekdays">
          <div
            class="calendar-weekday"
            *ngFor="let day of days"
            [class.calendar-past]="day.isPast"
            [class.calendar-today]="day.isToday"
            [class.calendar-future]="day.isFuture"
            [class.calendar-weekend]="day.isWeekend"
          >
            {{ day.date | weekday: locale }}
          </div>
        </div>
      </div>
    </ng-template>
    <ng-template
      [ngTemplateOutlet]="customTemplate || defaultTemplate"
      [ngTemplateOutletContext]="{ days: days, locale: locale, viewDate: viewDate }"
    >
    </ng-template>
  `,
            }]
    }], null, { viewDate: [{
            type: Input
        }], days: [{
            type: Input
        }], locale: [{
            type: Input
        }], customTemplate: [{
            type: Input
        }], viewDateChange: [{
            type: Output
        }] }); })();

function NovoCalendarMonthViewElement_div_3_novo_calendar_month_day_2_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-calendar-month-day", 6);
    ɵɵlistener("click", function NovoCalendarMonthViewElement_div_3_novo_calendar_month_day_2_Template_novo_calendar_month_day_click_0_listener() { ɵɵrestoreView(_r5); const day_r3 = ctx.$implicit; const ctx_r4 = ɵɵnextContext(2); return ctx_r4.dayClicked.emit({ day: day_r3 }); })("eventClicked", function NovoCalendarMonthViewElement_div_3_novo_calendar_month_day_2_Template_novo_calendar_month_day_eventClicked_0_listener($event) { ɵɵrestoreView(_r5); const day_r3 = ctx.$implicit; const ctx_r6 = ɵɵnextContext(2); return ctx_r6.eventClicked.emit({ day: day_r3, event: $event.event }); });
    ɵɵelementEnd();
} if (rf & 2) {
    const day_r3 = ctx.$implicit;
    const ctx_r2 = ɵɵnextContext(2);
    ɵɵproperty("day", day_r3)("locale", ctx_r2.locale)("customTemplate", ctx_r2.cellTemplate);
} }
function NovoCalendarMonthViewElement_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div");
    ɵɵelementStart(1, "div", 4);
    ɵɵtemplate(2, NovoCalendarMonthViewElement_div_3_novo_calendar_month_day_2_Template, 1, 3, "novo-calendar-month-day", 5);
    ɵɵpipe(3, "slice");
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const rowIndex_r1 = ctx.$implicit;
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵproperty("ngForOf", ɵɵpipeBind3(3, 1, ctx_r0.view.days, rowIndex_r1, rowIndex_r1 + ctx_r0.view.totalDaysVisibleInWeek));
} }
/**
 * Shows all events on a given month. Example usage:
 *
 * ```
 * &lt;novo-calendar-month-view
 *  [viewDate]="viewDate"
 *  [events]="events"&gt;
 * &lt;/novo-calendar-month-view&gt;
 * ```
 */
class NovoCalendarMonthViewElement {
    /**
     * @hidden
     */
    constructor(cdr, locale) {
        this.cdr = cdr;
        /**
         * An array of events to display on view
         */
        this.events = [];
        /**
         * An array of day indexes (0 = sunday, 1 = monday etc) that will be hidden on the view
         */
        this.excludeDays = [];
        /**
         * The locale used to format dates
         */
        this.locale = 'en-US';
        /**
         * The placement of the event tooltip
         */
        this.tooltipPosition = 'top';
        /**
         * Called when the day cell is clicked
         */
        this.dayClicked = new EventEmitter();
        /**
         * Called when the event title is clicked
         */
        this.eventClicked = new EventEmitter();
        /**
         * Called when an event is dragged and dropped
         */
        this.eventTimesChanged = new EventEmitter();
        this.viewDateChange = new EventEmitter();
        this.locale = locale;
    }
    /**
     * @hidden
     */
    ngOnInit() {
        if (this.refresh) {
            this.refreshSubscription = this.refresh.subscribe(() => {
                this.refreshAll();
                this.cdr.markForCheck();
            });
        }
    }
    /**
     * @hidden
     */
    ngOnChanges(changes) {
        if (changes.viewDate || changes.excludeDays) {
            this.refreshHeader();
        }
        if (changes.viewDate || changes.events || changes.excludeDays) {
            this.refreshBody();
        }
    }
    /**
     * @hidden
     */
    ngOnDestroy() {
        if (this.refreshSubscription) {
            this.refreshSubscription.unsubscribe();
        }
    }
    /**
     * @hidden
     */
    eventDropped(day, event) {
        const year = getYear(day.date);
        const month = getMonth(day.date);
        const date = getDate(day.date);
        const newStart = setYear(setMonth(setDate(event.start, date), month), year);
        let newEnd;
        if (event.end) {
            const secondsDiff = differenceInSeconds(newStart, event.start);
            newEnd = addSeconds(event.end, secondsDiff);
        }
        this.eventTimesChanged.emit({ event, newStart, newEnd });
    }
    refreshHeader() {
        this.columnHeaders = getWeekViewHeader({
            viewDate: this.viewDate,
            weekStartsOn: this.weekStartsOn,
            excluded: this.excludeDays,
        });
    }
    refreshBody() {
        this.view = getMonthView({
            events: this.events,
            viewDate: this.viewDate,
            weekStartsOn: this.weekStartsOn,
            excluded: this.excludeDays,
        });
        if (this.dayModifier) {
            this.view.days.forEach((day) => this.dayModifier(day));
        }
    }
    refreshAll() {
        this.refreshHeader();
        this.refreshBody();
        this.viewDateChange.emit(this.viewDate);
    }
}
NovoCalendarMonthViewElement.ɵfac = function NovoCalendarMonthViewElement_Factory(t) { return new (t || NovoCalendarMonthViewElement)(ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(LOCALE_ID)); };
NovoCalendarMonthViewElement.ɵcmp = ɵɵdefineComponent({ type: NovoCalendarMonthViewElement, selectors: [["novo-calendar-month"]], inputs: { viewDate: "viewDate", events: "events", excludeDays: "excludeDays", dayModifier: "dayModifier", refresh: "refresh", locale: "locale", tooltipPosition: "tooltipPosition", weekStartsOn: "weekStartsOn", headerTemplate: "headerTemplate", cellTemplate: "cellTemplate" }, outputs: { dayClicked: "dayClicked", eventClicked: "eventClicked", eventTimesChanged: "eventTimesChanged", viewDateChange: "viewDateChange" }, features: [ɵɵNgOnChangesFeature], decls: 4, vars: 5, consts: [[1, "calendar-month-view"], [3, "viewDate", "days", "locale", "customTemplate", "viewDateChange"], [1, "calendar-days"], [4, "ngFor", "ngForOf"], [1, "calendar-cell-row"], [3, "day", "locale", "customTemplate", "click", "eventClicked", 4, "ngFor", "ngForOf"], [3, "day", "locale", "customTemplate", "click", "eventClicked"]], template: function NovoCalendarMonthViewElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "div", 0);
        ɵɵelementStart(1, "novo-calendar-month-header", 1);
        ɵɵlistener("viewDateChange", function NovoCalendarMonthViewElement_Template_novo_calendar_month_header_viewDateChange_1_listener($event) { return ctx.viewDate = $event; })("viewDateChange", function NovoCalendarMonthViewElement_Template_novo_calendar_month_header_viewDateChange_1_listener() { return ctx.refreshAll(); });
        ɵɵelementEnd();
        ɵɵelementStart(2, "div", 2);
        ɵɵtemplate(3, NovoCalendarMonthViewElement_div_3_Template, 4, 5, "div", 3);
        ɵɵelementEnd();
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵadvance(1);
        ɵɵproperty("viewDate", ctx.viewDate)("days", ctx.columnHeaders)("locale", ctx.locale)("customTemplate", ctx.headerTemplate);
        ɵɵadvance(2);
        ɵɵproperty("ngForOf", ctx.view.rowOffsets);
    } }, directives: [NovoCalendarMonthHeaderElement, NgForOf, NovoCalendarMonthDayElement], pipes: [SlicePipe], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoCalendarMonthViewElement, [{
        type: Component,
        args: [{
                selector: 'novo-calendar-month',
                template: `
    <div class="calendar-month-view">
      <novo-calendar-month-header
        [(viewDate)]="viewDate"
        [days]="columnHeaders"
        [locale]="locale"
        [customTemplate]="headerTemplate"
        (viewDateChange)="refreshAll()"
      >
      </novo-calendar-month-header>
      <div class="calendar-days">
        <div *ngFor="let rowIndex of view.rowOffsets">
          <div class="calendar-cell-row">
            <novo-calendar-month-day
              *ngFor="let day of view.days | slice: rowIndex:rowIndex + view.totalDaysVisibleInWeek"
              [day]="day"
              [locale]="locale"
              [customTemplate]="cellTemplate"
              (click)="dayClicked.emit({ day: day })"
              (eventClicked)="eventClicked.emit({ day: day, event: $event.event })"
            >
            </novo-calendar-month-day>
          </div>
        </div>
      </div>
    </div>
  `,
            }]
    }], function () { return [{ type: ChangeDetectorRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [LOCALE_ID]
            }] }]; }, { viewDate: [{
            type: Input
        }], events: [{
            type: Input
        }], excludeDays: [{
            type: Input
        }], dayModifier: [{
            type: Input
        }], refresh: [{
            type: Input
        }], locale: [{
            type: Input
        }], tooltipPosition: [{
            type: Input
        }], weekStartsOn: [{
            type: Input
        }], headerTemplate: [{
            type: Input
        }], cellTemplate: [{
            type: Input
        }], dayClicked: [{
            type: Output
        }], eventClicked: [{
            type: Output
        }], eventTimesChanged: [{
            type: Output
        }], viewDateChange: [{
            type: Output
        }] }); })();

function NovoCalendarWeekEventElement_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 2);
    ɵɵlistener("click", function NovoCalendarWeekEventElement_ng_template_0_Template_div_click_0_listener() { ɵɵrestoreView(_r4); const ctx_r3 = ɵɵnextContext(); return ctx_r3.eventClicked.emit({ event: ctx_r3.weekEvent.event }); });
    ɵɵelement(1, "div", 3);
    ɵɵelementStart(2, "div", 4);
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementStart(4, "div", 5);
    ɵɵtext(5);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵclassProp("cal-starts-within-week", !ctx_r1.weekEvent.startsBeforeWeek)("cal-ends-within-week", !ctx_r1.weekEvent.endsAfterWeek);
    ɵɵproperty("ngClass", ctx_r1.weekEvent.event == null ? null : ctx_r1.weekEvent.event.cssClass)("tooltip", ctx_r1.weekEvent.event.description)("tooltipPosition", ctx_r1.tooltipPosition);
    ɵɵadvance(1);
    ɵɵstyleProp("background-color", ctx_r1.weekEvent.event.color.primary);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r1.weekEvent.event == null ? null : ctx_r1.weekEvent.event.title);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r1.weekEvent.event == null ? null : ctx_r1.weekEvent.event.description);
} }
function NovoCalendarWeekEventElement_ng_template_2_Template(rf, ctx) { }
const _c0$u = function (a0, a1, a2) { return { weekEvent: a0, tooltipPosition: a1, eventClicked: a2 }; };
class NovoCalendarWeekEventElement {
    constructor() {
        this.eventClicked = new EventEmitter();
    }
}
NovoCalendarWeekEventElement.ɵfac = function NovoCalendarWeekEventElement_Factory(t) { return new (t || NovoCalendarWeekEventElement)(); };
NovoCalendarWeekEventElement.ɵcmp = ɵɵdefineComponent({ type: NovoCalendarWeekEventElement, selectors: [["novo-calendar-week-event"]], inputs: { weekEvent: "weekEvent", tooltipPosition: "tooltipPosition", customTemplate: "customTemplate" }, outputs: { eventClicked: "eventClicked" }, decls: 3, vars: 6, consts: [["defaultTemplate", ""], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "cal-event", 3, "ngClass", "tooltip", "tooltipPosition", "click"], [1, "cal-event-ribbon"], [1, "cal-event-title"], [1, "cal-event-description"]], template: function NovoCalendarWeekEventElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵtemplate(0, NovoCalendarWeekEventElement_ng_template_0_Template, 6, 11, "ng-template", null, 0, ɵɵtemplateRefExtractor);
        ɵɵtemplate(2, NovoCalendarWeekEventElement_ng_template_2_Template, 0, 0, "ng-template", 1);
    } if (rf & 2) {
        const _r0 = ɵɵreference(1);
        ɵɵadvance(2);
        ɵɵproperty("ngTemplateOutlet", ctx.customTemplate || _r0)("ngTemplateOutletContext", ɵɵpureFunction3(2, _c0$u, ctx.weekEvent, ctx.tooltipPosition, ctx.eventClicked));
    } }, directives: [NgTemplateOutlet, NgClass, TooltipDirective], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoCalendarWeekEventElement, [{
        type: Component,
        args: [{
                selector: 'novo-calendar-week-event',
                template: `
    <ng-template #defaultTemplate>
      <div
        class="cal-event"
        [class.cal-starts-within-week]="!weekEvent.startsBeforeWeek"
        [class.cal-ends-within-week]="!weekEvent.endsAfterWeek"
        [ngClass]="weekEvent.event?.cssClass"
        [tooltip]="weekEvent.event.description"
        [tooltipPosition]="tooltipPosition"
        (click)="eventClicked.emit({ event: weekEvent.event })"
      >
        <div class="cal-event-ribbon" [style.backgroundColor]="weekEvent.event.color.primary"></div>
        <div class="cal-event-title">{{ weekEvent.event?.title }}</div>
        <div class="cal-event-description">{{ weekEvent.event?.description }}</div>
      </div>
    </ng-template>
    <ng-template
      [ngTemplateOutlet]="customTemplate || defaultTemplate"
      [ngTemplateOutletContext]="{ weekEvent: weekEvent, tooltipPosition: tooltipPosition, eventClicked: eventClicked }"
    >
    </ng-template>
  `,
            }]
    }], null, { weekEvent: [{
            type: Input
        }], tooltipPosition: [{
            type: Input
        }], customTemplate: [{
            type: Input
        }], eventClicked: [{
            type: Output
        }] }); })();

function NovoCalendarWeekHeaderElement_ng_template_0_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 4);
    ɵɵlistener("click", function NovoCalendarWeekHeaderElement_ng_template_0_div_1_Template_div_click_0_listener() { ɵɵrestoreView(_r6); const day_r4 = ctx.$implicit; const ctx_r5 = ɵɵnextContext(2); return ctx_r5.dayClicked.emit({ date: day_r4.date }); })("dragEnter", function NovoCalendarWeekHeaderElement_ng_template_0_div_1_Template_div_dragEnter_0_listener() { const day_r4 = ctx.$implicit; return day_r4.dragOver = true; })("dragLeave", function NovoCalendarWeekHeaderElement_ng_template_0_div_1_Template_div_dragLeave_0_listener() { const day_r4 = ctx.$implicit; return day_r4.dragOver = false; })("drop", function NovoCalendarWeekHeaderElement_ng_template_0_div_1_Template_div_drop_0_listener($event) { ɵɵrestoreView(_r6); const day_r4 = ctx.$implicit; const ctx_r9 = ɵɵnextContext(2); day_r4.dragOver = false; return ctx_r9.eventDropped.emit({ event: $event.dropData.event, newStart: day_r4.date }); });
    ɵɵelementStart(1, "b");
    ɵɵtext(2);
    ɵɵpipe(3, "weekday");
    ɵɵelementEnd();
    ɵɵelement(4, "br");
    ɵɵelementStart(5, "span");
    ɵɵtext(6);
    ɵɵpipe(7, "monthday");
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const day_r4 = ctx.$implicit;
    const ctx_r3 = ɵɵnextContext(2);
    ɵɵclassProp("cal-past", day_r4.isPast)("cal-today", day_r4.isToday)("cal-future", day_r4.isFuture)("cal-weekend", day_r4.isWeekend)("cal-drag-over", day_r4.dragOver);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ɵɵpipeBind3(3, 12, day_r4.date, ctx_r3.locale, "long"));
    ɵɵadvance(4);
    ɵɵtextInterpolate(ɵɵpipeBind2(7, 16, day_r4.date, ctx_r3.locale));
} }
function NovoCalendarWeekHeaderElement_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 2);
    ɵɵtemplate(1, NovoCalendarWeekHeaderElement_ng_template_0_div_1_Template, 8, 19, "div", 3);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r1.days);
} }
function NovoCalendarWeekHeaderElement_ng_template_2_Template(rf, ctx) { }
const _c0$v = function (a0, a1, a2, a3) { return { days: a0, locale: a1, dayClicked: a2, eventDropped: a3 }; };
class NovoCalendarWeekHeaderElement {
    constructor() {
        this.dayClicked = new EventEmitter();
        this.eventDropped = new EventEmitter();
    }
}
NovoCalendarWeekHeaderElement.ɵfac = function NovoCalendarWeekHeaderElement_Factory(t) { return new (t || NovoCalendarWeekHeaderElement)(); };
NovoCalendarWeekHeaderElement.ɵcmp = ɵɵdefineComponent({ type: NovoCalendarWeekHeaderElement, selectors: [["novo-calendar-week-header"]], inputs: { days: "days", locale: "locale", customTemplate: "customTemplate" }, outputs: { dayClicked: "dayClicked", eventDropped: "eventDropped" }, decls: 3, vars: 7, consts: [["defaultTemplate", ""], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "cal-day-headers"], ["class", "cal-header", "mwlDroppable", "", 3, "cal-past", "cal-today", "cal-future", "cal-weekend", "cal-drag-over", "click", "dragEnter", "dragLeave", "drop", 4, "ngFor", "ngForOf"], ["mwlDroppable", "", 1, "cal-header", 3, "click", "dragEnter", "dragLeave", "drop"]], template: function NovoCalendarWeekHeaderElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵtemplate(0, NovoCalendarWeekHeaderElement_ng_template_0_Template, 2, 1, "ng-template", null, 0, ɵɵtemplateRefExtractor);
        ɵɵtemplate(2, NovoCalendarWeekHeaderElement_ng_template_2_Template, 0, 0, "ng-template", 1);
    } if (rf & 2) {
        const _r0 = ɵɵreference(1);
        ɵɵadvance(2);
        ɵɵproperty("ngTemplateOutlet", ctx.customTemplate || _r0)("ngTemplateOutletContext", ɵɵpureFunction4(2, _c0$v, ctx.days, ctx.locale, ctx.dayClicked, ctx.eventDropped));
    } }, directives: [NgTemplateOutlet, NgForOf], pipes: [WeekdayPipe, MonthDayPipe], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoCalendarWeekHeaderElement, [{
        type: Component,
        args: [{
                selector: 'novo-calendar-week-header',
                template: `
    <ng-template #defaultTemplate>
      <div class="cal-day-headers">
        <div
          class="cal-header"
          *ngFor="let day of days"
          [class.cal-past]="day.isPast"
          [class.cal-today]="day.isToday"
          [class.cal-future]="day.isFuture"
          [class.cal-weekend]="day.isWeekend"
          [class.cal-drag-over]="day.dragOver"
          (click)="dayClicked.emit({ date: day.date })"
          mwlDroppable
          (dragEnter)="day.dragOver = true"
          (dragLeave)="day.dragOver = false"
          (drop)="day.dragOver = false; eventDropped.emit({ event: $event.dropData.event, newStart: day.date })"
        >
          <b>{{ day.date | weekday: locale:'long' }}</b
          ><br />
          <span>{{ day.date | monthday: locale }}</span>
        </div>
      </div>
    </ng-template>
    <ng-template
      [ngTemplateOutlet]="customTemplate || defaultTemplate"
      [ngTemplateOutletContext]="{ days: days, locale: locale, dayClicked: dayClicked, eventDropped: eventDropped }"
    >
    </ng-template>
  `,
            }]
    }], null, { days: [{
            type: Input
        }], locale: [{
            type: Input
        }], customTemplate: [{
            type: Input
        }], dayClicked: [{
            type: Output
        }], eventDropped: [{
            type: Output
        }] }); })();

function NovoCalendarWeekViewElement_div_3_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 7, 8);
    ɵɵelementStart(2, "novo-calendar-week-event", 9);
    ɵɵlistener("eventClicked", function NovoCalendarWeekViewElement_div_3_div_2_Template_novo_calendar_week_event_eventClicked_2_listener($event) { ɵɵrestoreView(_r9); const ctx_r8 = ɵɵnextContext(2); return ctx_r8.eventClicked.emit($event); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const weekEvent_r6 = ctx.$implicit;
    const ctx_r5 = ɵɵnextContext(2);
    ɵɵstyleProp("width", 100 / ctx_r5.days.length * weekEvent_r6.span + "%")("margin-top", weekEvent_r6.top, "px")("height", weekEvent_r6.height, "px")("margin-left", 100 / ctx_r5.days.length * weekEvent_r6.offset + "%");
    ɵɵadvance(2);
    ɵɵproperty("weekEvent", weekEvent_r6)("tooltipPosition", ctx_r5.tooltipPosition)("customTemplate", ctx_r5.eventTemplate);
} }
function NovoCalendarWeekViewElement_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", null, 5);
    ɵɵtemplate(2, NovoCalendarWeekViewElement_div_3_div_2_Template, 3, 11, "div", 6);
    ɵɵelementEnd();
} if (rf & 2) {
    const eventRow_r3 = ctx.$implicit;
    ɵɵadvance(2);
    ɵɵproperty("ngForOf", eventRow_r3.row);
} }
function NovoCalendarWeekViewElement_div_4_novo_calendar_day_hour_segment_1_Template(rf, ctx) { if (rf & 1) {
    const _r14 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-calendar-day-hour-segment", 12);
    ɵɵlistener("click", function NovoCalendarWeekViewElement_div_4_novo_calendar_day_hour_segment_1_Template_novo_calendar_day_hour_segment_click_0_listener() { ɵɵrestoreView(_r14); const segment_r12 = ctx.$implicit; const ctx_r13 = ɵɵnextContext(2); return ctx_r13.hourSegmentClicked.emit({ date: segment_r12.date }); });
    ɵɵelementEnd();
} if (rf & 2) {
    const segment_r12 = ctx.$implicit;
    const ctx_r11 = ɵɵnextContext(2);
    ɵɵproperty("segment", segment_r12)("locale", ctx_r11.locale)("customTemplate", ctx_r11.hourSegmentTemplate);
} }
function NovoCalendarWeekViewElement_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 10);
    ɵɵtemplate(1, NovoCalendarWeekViewElement_div_4_novo_calendar_day_hour_segment_1_Template, 1, 3, "novo-calendar-day-hour-segment", 11);
    ɵɵelementEnd();
} if (rf & 2) {
    const hour_r10 = ctx.$implicit;
    ɵɵstyleProp("min-width", 70, "px");
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", hour_r10.segments);
} }
/**
 * @hidden
 */
const SEGMENT_HEIGHT$1 = 30;
/**
 * @hidden
 */
const MINUTES_IN_HOUR$2 = 60;
/**
 * Shows all events on a given week. Example usage:
 *
 * ```typescript
 * &lt;novo-calendar-week
 *  [viewDate]="viewDate"
 *  [events]="events"&gt;
 * &lt;/novo-calendar-week&gt;
 * ```
 */
class NovoCalendarWeekViewElement {
    /**
     * @hidden
     */
    constructor(cdr, locale) {
        this.cdr = cdr;
        /**
         * An array of events to display on view
         */
        this.events = [];
        /**
         * An array of day indexes (0 = sunday, 1 = monday etc) that will be hidden on the view
         */
        this.excludeDays = [];
        /**
         * The placement of the event tooltip
         */
        this.tooltipPosition = 'bottom';
        /**
         * The precision to display events.
         * `days` will round event start and end dates to the nearest day and `minutes` will not do this rounding
         */
        this.precision = 'days';
        /**
         * The number of segments in an hour. Must be <= 6
         */
        this.hourSegments = 2;
        /**
         * The day start hours in 24 hour time. Must be 0-23
         */
        this.dayStartHour = 0;
        /**
         * The day start minutes. Must be 0-59
         */
        this.dayStartMinute = 0;
        /**
         * The day end hours in 24 hour time. Must be 0-23
         */
        this.dayEndHour = 23;
        /**
         * The day end minutes. Must be 0-59
         */
        this.dayEndMinute = 59;
        /**
         * Called when an hour segment is clicked
         */
        this.hourSegmentClicked = new EventEmitter();
        /**
         * Called when a header week day is clicked
         */
        this.dayClicked = new EventEmitter();
        /**
         * Called when the event title is clicked
         */
        this.eventClicked = new EventEmitter();
        /**
         * Called when an event is resized or dragged and dropped
         */
        this.eventTimesChanged = new EventEmitter();
        /**
         * @hidden
         */
        this.hours = [];
        /**
         * @hidden
         */
        this.eventRows = [];
        this.locale = locale;
    }
    /**
     * @hidden
     */
    ngOnInit() {
        if (this.refresh) {
            this.refreshSubscription = this.refresh.subscribe(() => {
                this.refreshAll();
                this.cdr.detectChanges();
            });
        }
    }
    /**
     * @hidden
     */
    ngOnChanges(changes) {
        if (changes.viewDate || changes.excludeDays) {
            this.refreshHeader();
        }
        if (changes.events || changes.viewDate || changes.excludeDays) {
            this.refreshBody();
        }
        if (changes.viewDate || changes.dayStartHour || changes.dayStartMinute || changes.dayEndHour || changes.dayEndMinute) {
            this.refreshHourGrid();
        }
    }
    /**
     * @hidden
     */
    ngOnDestroy() {
        if (this.refreshSubscription) {
            this.refreshSubscription.unsubscribe();
        }
    }
    /*
      resizeStarted(weekViewContainer: HTMLElement, weekEvent: WeekViewEvent, resizeEvent: ResizeEvent): void {
        this.currentResize = {
          originalOffset: weekEvent.offset,
          originalSpan: weekEvent.span,
          edge: typeof resizeEvent.edges.left !== 'undefined' ? 'left' : 'right'
        };
        const resizeHelper: CalendarResizeHelper = new CalendarResizeHelper(weekViewContainer, this.getDayColumnWidth(weekViewContainer));
        this.validateResize = ({rectangle}) => resizeHelper.validateResize({rectangle});
        this.cdr.detectChanges();
      }
  
      resizing(weekEvent: WeekViewEvent, resizeEvent: ResizeEvent, dayWidth: number): void {
        if (resizeEvent.edges.left) {
          const diff: number = Math.round(+resizeEvent.edges.left / dayWidth);
          weekEvent.offset = this.currentResize.originalOffset + diff;
          weekEvent.span = this.currentResize.originalSpan - diff;
        } else if (resizeEvent.edges.right) {
          const diff: number = Math.round(+resizeEvent.edges.right / dayWidth);
          weekEvent.span = this.currentResize.originalSpan + diff;
        }
      }
  
      resizeEnded(weekEvent: WeekViewEvent): void {
  
        let daysDiff: number;
        if (this.currentResize.edge === 'left') {
          daysDiff = weekEvent.offset - this.currentResize.originalOffset;
        } else {
          daysDiff = weekEvent.span - this.currentResize.originalSpan;
        }
  
        weekEvent.offset = this.currentResize.originalOffset;
        weekEvent.span = this.currentResize.originalSpan;
  
        let newStart: Date = weekEvent.event.start;
        let newEnd: Date = weekEvent.event.end;
        if (this.currentResize.edge === 'left') {
          newStart = addDays(newStart, daysDiff);
        } else if (newEnd) {
          newEnd = addDays(newEnd, daysDiff);
        }
  
        this.eventTimesChanged.emit({newStart, newEnd, event: weekEvent.event});
        this.currentResize = null;
  
      }
  
      eventDragged(weekEvent: WeekViewEvent, draggedByPx: number, dayWidth: number): void {
  
        const daysDragged: number = draggedByPx / dayWidth;
        const newStart: Date = addDays(weekEvent.event.start, daysDragged);
        let newEnd: Date;
        if (weekEvent.event.end) {
          newEnd = addDays(weekEvent.event.end, daysDragged);
        }
  
        this.eventTimesChanged.emit({newStart, newEnd, event: weekEvent.event});
  
      }
  
      dragStart(weekViewContainer: HTMLElement, event: HTMLElement): void {
        const dragHelper: CalendarDragHelper = new CalendarDragHelper(weekViewContainer, event);
        this.validateDrag = ({x, y}) => !this.currentResize && dragHelper.validateDrag({x, y});
        this.cdr.detectChanges();
      }
      */
    getDayColumnWidth(eventRowContainer) {
        return Math.floor(eventRowContainer.offsetWidth / this.days.length);
    }
    refreshHeader() {
        this.days = getWeekViewHeader({
            viewDate: this.viewDate,
            weekStartsOn: this.weekStartsOn,
            excluded: this.excludeDays,
        });
    }
    refreshBody() {
        this.eventRows = getWeekView({
            events: this.events,
            viewDate: this.viewDate,
            weekStartsOn: this.weekStartsOn,
            excluded: this.excludeDays,
            hourSegments: this.hourSegments,
            segmentHeight: SEGMENT_HEIGHT$1,
            dayStart: {
                hour: this.dayStartHour,
                minute: this.dayStartMinute,
            },
            dayEnd: {
                hour: this.dayEndHour,
                minute: this.dayEndMinute,
            },
        });
    }
    refreshHourGrid() {
        this.hours = getDayViewHourGrid({
            viewDate: this.viewDate,
            hourSegments: this.hourSegments,
            dayStart: {
                hour: this.dayStartHour,
                minute: this.dayStartMinute,
            },
            dayEnd: {
                hour: this.dayEndHour,
                minute: this.dayEndMinute,
            },
        });
        // if (this.hourSegmentModifier) {
        //   this.hours.forEach(hour => {
        //     hour.segments.forEach(segment => this.hourSegmentModifier(segment));
        //   });
        // }
    }
    refreshAll() {
        this.refreshHeader();
        this.refreshHourGrid();
        this.refreshBody();
    }
}
NovoCalendarWeekViewElement.ɵfac = function NovoCalendarWeekViewElement_Factory(t) { return new (t || NovoCalendarWeekViewElement)(ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(LOCALE_ID)); };
NovoCalendarWeekViewElement.ɵcmp = ɵɵdefineComponent({ type: NovoCalendarWeekViewElement, selectors: [["novo-calendar-week"]], inputs: { viewDate: "viewDate", events: "events", excludeDays: "excludeDays", refresh: "refresh", locale: "locale", tooltipPosition: "tooltipPosition", weekStartsOn: "weekStartsOn", headerTemplate: "headerTemplate", eventTemplate: "eventTemplate", precision: "precision", hourSegments: "hourSegments", dayStartHour: "dayStartHour", dayStartMinute: "dayStartMinute", dayEndHour: "dayEndHour", dayEndMinute: "dayEndMinute", hourSegmentTemplate: "hourSegmentTemplate" }, outputs: { hourSegmentClicked: "hourSegmentClicked", dayClicked: "dayClicked", eventClicked: "eventClicked", eventTimesChanged: "eventTimesChanged" }, features: [ɵɵNgOnChangesFeature], decls: 5, vars: 5, consts: [[1, "cal-week-view"], ["weekViewContainer", ""], [3, "days", "locale", "customTemplate", "dayClicked"], [4, "ngFor", "ngForOf"], ["class", "cal-hour", 3, "minWidth", 4, "ngFor", "ngForOf"], ["eventRowContainer", ""], ["class", "cal-event-container", 3, "width", "marginTop", "height", "marginLeft", 4, "ngFor", "ngForOf"], [1, "cal-event-container"], ["event", ""], [3, "weekEvent", "tooltipPosition", "customTemplate", "eventClicked"], [1, "cal-hour"], [3, "segment", "locale", "customTemplate", "click", 4, "ngFor", "ngForOf"], [3, "segment", "locale", "customTemplate", "click"]], template: function NovoCalendarWeekViewElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "div", 0, 1);
        ɵɵelementStart(2, "novo-calendar-week-header", 2);
        ɵɵlistener("dayClicked", function NovoCalendarWeekViewElement_Template_novo_calendar_week_header_dayClicked_2_listener($event) { return ctx.dayClicked.emit($event); });
        ɵɵelementEnd();
        ɵɵtemplate(3, NovoCalendarWeekViewElement_div_3_Template, 3, 1, "div", 3);
        ɵɵtemplate(4, NovoCalendarWeekViewElement_div_4_Template, 2, 3, "div", 4);
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵadvance(2);
        ɵɵproperty("days", ctx.days)("locale", ctx.locale)("customTemplate", ctx.headerTemplate);
        ɵɵadvance(1);
        ɵɵproperty("ngForOf", ctx.eventRows);
        ɵɵadvance(1);
        ɵɵproperty("ngForOf", ctx.hours);
    } }, directives: [NovoCalendarWeekHeaderElement, NgForOf, NovoCalendarWeekEventElement, NovoCalendarHourSegmentElement], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoCalendarWeekViewElement, [{
        type: Component,
        args: [{
                selector: 'novo-calendar-week',
                template: `
    <div class="cal-week-view" #weekViewContainer>
      <novo-calendar-week-header [days]="days" [locale]="locale" [customTemplate]="headerTemplate" (dayClicked)="dayClicked.emit($event)">
      </novo-calendar-week-header>
      <div *ngFor="let eventRow of eventRows" #eventRowContainer>
        <div
          class="cal-event-container"
          #event
          *ngFor="let weekEvent of eventRow.row"
          [style.width]="(100 / days.length) * weekEvent.span + '%'"
          [style.marginTop.px]="weekEvent.top"
          [style.height.px]="weekEvent.height"
          [style.marginLeft]="(100 / days.length) * weekEvent.offset + '%'"
        >
          <novo-calendar-week-event
            [weekEvent]="weekEvent"
            [tooltipPosition]="tooltipPosition"
            [customTemplate]="eventTemplate"
            (eventClicked)="eventClicked.emit($event)"
          >
          </novo-calendar-week-event>
        </div>
      </div>
      <div class="cal-hour" *ngFor="let hour of hours" [style.minWidth.px]="70">
        <novo-calendar-day-hour-segment
          *ngFor="let segment of hour.segments"
          [segment]="segment"
          [locale]="locale"
          [customTemplate]="hourSegmentTemplate"
          (click)="hourSegmentClicked.emit({ date: segment.date })"
        >
        </novo-calendar-day-hour-segment>
      </div>
    </div>
  `,
            }]
    }], function () { return [{ type: ChangeDetectorRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [LOCALE_ID]
            }] }]; }, { viewDate: [{
            type: Input
        }], events: [{
            type: Input
        }], excludeDays: [{
            type: Input
        }], refresh: [{
            type: Input
        }], locale: [{
            type: Input
        }], tooltipPosition: [{
            type: Input
        }], weekStartsOn: [{
            type: Input
        }], headerTemplate: [{
            type: Input
        }], eventTemplate: [{
            type: Input
        }], precision: [{
            type: Input
        }], hourSegments: [{
            type: Input
        }], dayStartHour: [{
            type: Input
        }], dayStartMinute: [{
            type: Input
        }], dayEndHour: [{
            type: Input
        }], dayEndMinute: [{
            type: Input
        }], hourSegmentTemplate: [{
            type: Input
        }], hourSegmentClicked: [{
            type: Output
        }], dayClicked: [{
            type: Output
        }], eventClicked: [{
            type: Output
        }], eventTimesChanged: [{
            type: Output
        }] }); })();

// NG2
class NovoCalendarModule {
}
NovoCalendarModule.ɵmod = ɵɵdefineNgModule({ type: NovoCalendarModule });
NovoCalendarModule.ɵinj = ɵɵdefineInjector({ factory: function NovoCalendarModule_Factory(t) { return new (t || NovoCalendarModule)(); }, imports: [[CommonModule, NovoButtonModule, NovoTooltipModule, NovoPipesModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoCalendarModule, { declarations: [NovoEventTypeLegendElement,
        NovoCalendarMonthViewElement,
        NovoCalendarMonthHeaderElement,
        NovoCalendarMonthDayElement,
        NovoCalendarWeekViewElement,
        NovoCalendarWeekHeaderElement,
        NovoCalendarWeekEventElement,
        NovoCalendarDayViewElement,
        NovoCalendarDayEventElement,
        NovoCalendarHourSegmentElement,
        NovoCalendarAllDayEventElement,
        NovoCalendarDateChangeElement,
        WeekdayPipe,
        DayOfMonthPipe,
        MonthPipe,
        MonthDayPipe,
        YearPipe,
        HoursPipe,
        EndOfWeekDisplayPipe], imports: [CommonModule, NovoButtonModule, NovoTooltipModule, NovoPipesModule], exports: [NovoEventTypeLegendElement,
        NovoCalendarMonthViewElement,
        NovoCalendarMonthHeaderElement,
        NovoCalendarMonthDayElement,
        NovoCalendarWeekViewElement,
        NovoCalendarWeekHeaderElement,
        NovoCalendarWeekEventElement,
        NovoCalendarDayViewElement,
        NovoCalendarDayEventElement,
        NovoCalendarHourSegmentElement,
        NovoCalendarAllDayEventElement,
        NovoCalendarDateChangeElement,
        WeekdayPipe,
        DayOfMonthPipe,
        MonthPipe,
        MonthDayPipe,
        YearPipe,
        HoursPipe,
        EndOfWeekDisplayPipe] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoCalendarModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, NovoButtonModule, NovoTooltipModule, NovoPipesModule],
                declarations: [
                    NovoEventTypeLegendElement,
                    NovoCalendarMonthViewElement,
                    NovoCalendarMonthHeaderElement,
                    NovoCalendarMonthDayElement,
                    NovoCalendarWeekViewElement,
                    NovoCalendarWeekHeaderElement,
                    NovoCalendarWeekEventElement,
                    NovoCalendarDayViewElement,
                    NovoCalendarDayEventElement,
                    NovoCalendarHourSegmentElement,
                    NovoCalendarAllDayEventElement,
                    NovoCalendarDateChangeElement,
                    WeekdayPipe,
                    DayOfMonthPipe,
                    MonthPipe,
                    MonthDayPipe,
                    YearPipe,
                    HoursPipe,
                    EndOfWeekDisplayPipe,
                ],
                exports: [
                    NovoEventTypeLegendElement,
                    NovoCalendarMonthViewElement,
                    NovoCalendarMonthHeaderElement,
                    NovoCalendarMonthDayElement,
                    NovoCalendarWeekViewElement,
                    NovoCalendarWeekHeaderElement,
                    NovoCalendarWeekEventElement,
                    NovoCalendarDayViewElement,
                    NovoCalendarDayEventElement,
                    NovoCalendarHourSegmentElement,
                    NovoCalendarAllDayEventElement,
                    NovoCalendarDateChangeElement,
                    WeekdayPipe,
                    DayOfMonthPipe,
                    MonthPipe,
                    MonthDayPipe,
                    YearPipe,
                    HoursPipe,
                    EndOfWeekDisplayPipe,
                ],
            }]
    }], null, null); })();

const _c0$w = ["*"];
const _c1$a = [[["novo-avatar"], ["", "novo-avatar", ""], ["novo-icon"]], [["novo-title"], ["", "novo-title", ""], ["novo-text"], ["novo-label"], ["novo-caption"]], "*", [["novo-action"]]];
const _c2$4 = ["novo-avatar, [novo-avatar], novo-icon", "novo-title, [novo-title], novo-text, novo-label, novo-caption", "*", "novo-action"];
function CardElement_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 3);
    ɵɵelement(1, "novo-loading", 4);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵattribute("data-automation-id", ctx_r0.cardAutomationId + "-loading");
} }
function CardElement_header_1_novo_icon_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-icon");
    ɵɵtext(1, "move");
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵɵnextContext(2);
    ɵɵattribute("data-automation-id", ctx_r5.cardAutomationId + "-move");
} }
function CardElement_header_1_i_6_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 12);
} if (rf & 2) {
    const ctx_r6 = ɵɵnextContext(2);
    ɵɵproperty("ngClass", ctx_r6.iconClass);
} }
function CardElement_header_1_button_10_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 13);
    ɵɵlistener("click", function CardElement_header_1_button_10_Template_button_click_0_listener() { ɵɵrestoreView(_r10); const ctx_r9 = ɵɵnextContext(2); return ctx_r9.toggleRefresh(); });
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵɵnextContext(2);
    ɵɵpropertyInterpolate("tooltip", ctx_r7.labels.refresh);
    ɵɵattribute("data-automation-id", ctx_r7.cardAutomationId + "-refresh");
} }
function CardElement_header_1_button_11_Template(rf, ctx) { if (rf & 1) {
    const _r12 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 14);
    ɵɵlistener("click", function CardElement_header_1_button_11_Template_button_click_0_listener() { ɵɵrestoreView(_r12); const ctx_r11 = ɵɵnextContext(2); return ctx_r11.toggleClose(); });
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r8 = ɵɵnextContext(2);
    ɵɵpropertyInterpolate("tooltip", ctx_r8.labels.close);
    ɵɵattribute("data-automation-id", ctx_r8.cardAutomationId + "-close");
} }
function CardElement_header_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "header");
    ɵɵelementStart(1, "div", 5);
    ɵɵelementStart(2, "span", 6);
    ɵɵtemplate(3, CardElement_header_1_novo_icon_3_Template, 2, 1, "novo-icon", 1);
    ɵɵelementEnd();
    ɵɵelementStart(4, "h3");
    ɵɵelementStart(5, "span", 7);
    ɵɵtemplate(6, CardElement_header_1_i_6_Template, 1, 1, "i", 8);
    ɵɵelementEnd();
    ɵɵtext(7);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementStart(8, "div", 9);
    ɵɵprojection(9);
    ɵɵtemplate(10, CardElement_header_1_button_10_Template, 1, 2, "button", 10);
    ɵɵtemplate(11, CardElement_header_1_button_11_Template, 1, 2, "button", 11);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵpropertyInterpolate("tooltip", ctx_r1.labels.move);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r1.move || ctx_r1.config.move);
    ɵɵadvance(1);
    ɵɵattribute("data-automation-id", ctx_r1.cardAutomationId + "-title");
    ɵɵadvance(1);
    ɵɵproperty("tooltip", ctx_r1.iconTooltip);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r1.icon);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r1.title || ctx_r1.config.title, " ");
    ɵɵadvance(1);
    ɵɵattribute("data-automation-id", ctx_r1.cardAutomationId + "-actions");
    ɵɵadvance(2);
    ɵɵproperty("ngIf", ctx_r1.refresh || ctx_r1.config.refresh);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r1.close || ctx_r1.config.close);
} }
function CardElement_ng_content_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵprojection(0, 1, ["*ngIf", "!(loading || config.loading) && !(message || config.message)"]);
} }
function CardElement_p_3_i_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 12);
} if (rf & 2) {
    const ctx_r13 = ɵɵnextContext(2);
    ɵɵproperty("ngClass", ctx_r13.messageIconClass);
} }
function CardElement_p_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 15);
    ɵɵtemplate(1, CardElement_p_3_i_1_Template, 1, 1, "i", 8);
    ɵɵelement(2, "span", 16);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵɵnextContext();
    ɵɵattribute("data-automation-id", ctx_r3.cardAutomationId + "-message");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r3.messageIconClass);
    ɵɵadvance(1);
    ɵɵproperty("innerHtml", ctx_r3.message || ctx_r3.config.message, ɵɵsanitizeHtml);
} }
function CardElement_ng_content_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵprojection(0, 2, ["*ngIf", "!(loading || config.loading) && !(message || config.message)"]);
} }
const _c3$2 = [[["novo-card-actions"]], "*", [["footer"], ["novo-card-footer"], ["", "novo-card-footer", ""], ["", "novoCardFooter", ""]]];
const _c4$1 = ["novo-card-actions", "*", "footer,novo-card-footer,[novo-card-footer],[novoCardFooter]"];
class CardActionsElement {
}
CardActionsElement.ɵfac = function CardActionsElement_Factory(t) { return new (t || CardActionsElement)(); };
CardActionsElement.ɵcmp = ɵɵdefineComponent({ type: CardActionsElement, selectors: [["novo-card-actions"]], ngContentSelectors: _c0$w, decls: 1, vars: 0, template: function CardActionsElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(CardActionsElement, [{
        type: Component,
        args: [{
                selector: 'novo-card-actions',
                template: '<ng-content></ng-content>',
            }]
    }], null, null); })();
/**
 * Content of a card, needed as it's used as a selector in the API.
 */
class CardContentElement {
    constructor() {
        this.condensed = false;
    }
}
CardContentElement.ɵfac = function CardContentElement_Factory(t) { return new (t || CardContentElement)(); };
CardContentElement.ɵdir = ɵɵdefineDirective({ type: CardContentElement, selectors: [["novo-card-content"], ["", "novo-card-content", ""], ["", "novoCardContent", ""]], hostAttrs: [1, "novo-card-content"], hostVars: 2, hostBindings: function CardContentElement_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵclassProp("condensed", ctx.condensed);
    } }, inputs: { condensed: "condensed" } });
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], CardContentElement.prototype, "condensed", void 0);
/*@__PURE__*/ (function () { ɵsetClassMetadata(CardContentElement, [{
        type: Directive,
        args: [{
                selector: 'novo-card-content, [novo-card-content], [novoCardContent]',
                host: { class: 'novo-card-content', '[class.condensed]': 'condensed' },
            }]
    }], null, { condensed: [{
            type: Input
        }] }); })();
/**
 * Content of a card, needed as it's used as a selector in the API.
 */
class CardHeaderElement {
}
CardHeaderElement.ɵfac = function CardHeaderElement_Factory(t) { return new (t || CardHeaderElement)(); };
CardHeaderElement.ɵcmp = ɵɵdefineComponent({ type: CardHeaderElement, selectors: [["novo-card-header"], ["", "novo-card-header", ""], ["", "novoCardHeader", ""]], hostAttrs: [1, "novo-card-header"], ngContentSelectors: _c2$4, decls: 6, vars: 0, consts: [[1, "novo-card-header-text"], [1, "novo-card-header-actions"]], template: function CardHeaderElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef(_c1$a);
        ɵɵprojection(0);
        ɵɵelementStart(1, "div", 0);
        ɵɵprojection(2, 1);
        ɵɵelementEnd();
        ɵɵprojection(3, 2);
        ɵɵelementStart(4, "div", 1);
        ɵɵprojection(5, 3);
        ɵɵelementEnd();
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(CardHeaderElement, [{
        type: Component,
        args: [{
                selector: 'novo-card-header, [novo-card-header], [novoCardHeader]',
                host: { class: 'novo-card-header' },
                template: `
    <ng-content select="novo-avatar, [novo-avatar], novo-icon"></ng-content>
    <div class="novo-card-header-text">
      <ng-content select="novo-title, [novo-title], novo-text, novo-label, novo-caption"></ng-content>
    </div>
    <ng-content></ng-content>
    <div class="novo-card-header-actions">
      <ng-content select="novo-action"></ng-content>
    </div>
  `,
            }]
    }], null, null); })();
class CardFooterElement {
}
CardFooterElement.ɵfac = function CardFooterElement_Factory(t) { return new (t || CardFooterElement)(); };
CardFooterElement.ɵdir = ɵɵdefineDirective({ type: CardFooterElement, selectors: [["novo-card-footer"], ["", "novo-card-footer", ""], ["", "novoCardFooter", ""]], hostAttrs: [1, "novo-card-footer"] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(CardFooterElement, [{
        type: Directive,
        args: [{
                selector: 'novo-card-footer, [novo-card-footer], [novoCardFooter]',
                host: { class: 'novo-card-footer' },
            }]
    }], null, null); })();
class CardElement {
    constructor(labels) {
        this.padding = true;
        this.config = {};
        this.inset = 'none';
        this.onClose = new EventEmitter();
        this.onRefresh = new EventEmitter();
        this.labels = labels;
    }
    get hbInset() {
        return `novo-card-inset-${this.inset}`;
    }
    ngOnInit() {
        this.config = this.config || {};
    }
    ngOnChanges(changes) {
        this.config = this.config || {};
        this.cardAutomationId = `${(this.title || this.config.title || 'no-title').toLowerCase().replace(/\s/g, '-')}-card`;
        const newIcon = this.icon || this.config.icon;
        const newMessageIcon = this.messageIcon || this.config.messageIcon;
        this.iconClass = newIcon ? `bhi-${newIcon}` : null;
        this.messageIconClass = newMessageIcon ? `bhi-${newMessageIcon}` : null;
    }
    toggleClose() {
        if (!this.config.onClose) {
            this.onClose.next();
        }
        else {
            this.config.onClose();
        }
    }
    toggleRefresh() {
        if (!this.config.onRefresh) {
            this.onRefresh.next();
        }
        else {
            this.config.onRefresh();
        }
    }
}
CardElement.ɵfac = function CardElement_Factory(t) { return new (t || CardElement)(ɵɵdirectiveInject(NovoLabelService)); };
CardElement.ɵcmp = ɵɵdefineComponent({ type: CardElement, selectors: [["novo-card"]], hostAttrs: [1, "novo-card"], hostVars: 7, hostBindings: function CardElement_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵattribute("data-automation-id", ctx.cardAutomationId);
        ɵɵclassMap(ctx.hbInset);
        ɵɵclassProp("loading", ctx.loading || ctx.config.loading)("novo-card-inline", ctx.inline);
    } }, inputs: { padding: "padding", config: "config", title: "title", message: "message", messageIcon: "messageIcon", icon: "icon", iconTooltip: "iconTooltip", refresh: "refresh", close: "close", move: "move", loading: "loading", inline: "inline", inset: "inset" }, outputs: { onClose: "onClose", onRefresh: "onRefresh" }, features: [ɵɵNgOnChangesFeature], ngContentSelectors: _c4$1, decls: 5, vars: 5, consts: [["class", "card-loading-container", 4, "ngIf"], [4, "ngIf"], ["class", "card-message", 4, "ngIf"], [1, "card-loading-container"], ["theme", "line"], [1, "title"], ["tooltipPosition", "bottom-right", 3, "tooltip"], ["tooltipPosition", "right", 3, "tooltip"], [3, "ngClass", 4, "ngIf"], [1, "actions"], ["theme", "icon", "icon", "refresh", "tooltipPosition", "bottom-left", 3, "tooltip", "click", 4, "ngIf"], ["theme", "icon", "icon", "close-o", "tooltipPosition", "bottom-left", 3, "tooltip", "click", 4, "ngIf"], [3, "ngClass"], ["theme", "icon", "icon", "refresh", "tooltipPosition", "bottom-left", 3, "tooltip", "click"], ["theme", "icon", "icon", "close-o", "tooltipPosition", "bottom-left", 3, "tooltip", "click"], [1, "card-message"], [3, "innerHtml"]], template: function CardElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef(_c3$2);
        ɵɵtemplate(0, CardElement_div_0_Template, 2, 1, "div", 0);
        ɵɵtemplate(1, CardElement_header_1_Template, 12, 9, "header", 1);
        ɵɵtemplate(2, CardElement_ng_content_2_Template, 1, 0, "ng-content", 1);
        ɵɵtemplate(3, CardElement_p_3_Template, 3, 3, "p", 2);
        ɵɵtemplate(4, CardElement_ng_content_4_Template, 1, 0, "ng-content", 1);
    } if (rf & 2) {
        ɵɵproperty("ngIf", ctx.loading || ctx.config.loading);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.title || ctx.config.title);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", !(ctx.loading || ctx.config.loading) && !(ctx.message || ctx.config.message));
        ɵɵadvance(1);
        ɵɵproperty("ngIf", !(ctx.loading || ctx.config.loading) && (ctx.message || ctx.config.message));
        ɵɵadvance(1);
        ɵɵproperty("ngIf", !(ctx.loading || ctx.config.loading) && !(ctx.message || ctx.config.message));
    } }, directives: [NgIf, NovoLoadingElement, TooltipDirective, NovoIconComponent, NgClass, NovoButtonElement], encapsulation: 2 });
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], CardElement.prototype, "inline", void 0);
/*@__PURE__*/ (function () { ɵsetClassMetadata(CardElement, [{
        type: Component,
        args: [{
                selector: 'novo-card',
                host: {
                    class: 'novo-card',
                    '[attr.data-automation-id]': 'cardAutomationId',
                    '[class.loading]': 'loading || config.loading',
                },
                template: `
    <!--Loading-->
    <div class="card-loading-container" *ngIf="loading || config.loading">
      <novo-loading theme="line" [attr.data-automation-id]="cardAutomationId + '-loading'"></novo-loading>
    </div>
    <!--Card Header-->
    <header *ngIf="title || config.title">
      <div class="title">
        <!--Grabber Icon-->
        <span tooltip="{{ labels.move }}" tooltipPosition="bottom-right">
          <novo-icon *ngIf="move || config.move" [attr.data-automation-id]="cardAutomationId + '-move'">move</novo-icon>
        </span>
        <!--Card Title-->
        <h3 [attr.data-automation-id]="cardAutomationId + '-title'">
          <span [tooltip]="iconTooltip" tooltipPosition="right"><i *ngIf="icon" [ngClass]="iconClass"></i></span>
          {{ title || config.title }}
        </h3>
      </div>
      <!--Card Actions-->
      <div class="actions" [attr.data-automation-id]="cardAutomationId + '-actions'">
        <ng-content select="novo-card-actions"></ng-content>
        <button
          theme="icon"
          icon="refresh"
          (click)="toggleRefresh()"
          *ngIf="refresh || config.refresh"
          [attr.data-automation-id]="cardAutomationId + '-refresh'"
          tooltip="{{ labels.refresh }}"
          tooltipPosition="bottom-left"
        ></button>
        <button
          theme="icon"
          icon="close-o"
          (click)="toggleClose()"
          *ngIf="close || config.close"
          [attr.data-automation-id]="cardAutomationId + '-close'"
          tooltip="{{ labels.close }}"
          tooltipPosition="bottom-left"
        ></button>
      </div>
    </header>
    <!--Content (transcluded)-->
    <ng-content *ngIf="!(loading || config.loading) && !(message || config.message)"></ng-content>
    <!--Error/Empty Message-->
    <p
      class="card-message"
      *ngIf="!(loading || config.loading) && (message || config.message)"
      [attr.data-automation-id]="cardAutomationId + '-message'"
    >
      <i *ngIf="messageIconClass" [ngClass]="messageIconClass"></i> <span [innerHtml]="message || config.message"></span>
    </p>
    <!--Card Footer-->
    <ng-content
      *ngIf="!(loading || config.loading) && !(message || config.message)"
      select="footer,novo-card-footer,[novo-card-footer],[novoCardFooter]"
    ></ng-content>
  `,
            }]
    }], function () { return [{ type: NovoLabelService }]; }, { padding: [{
            type: Input
        }], config: [{
            type: Input
        }], title: [{
            type: Input
        }], message: [{
            type: Input
        }], messageIcon: [{
            type: Input
        }], icon: [{
            type: Input
        }], iconTooltip: [{
            type: Input
        }], refresh: [{
            type: Input
        }], close: [{
            type: Input
        }], move: [{
            type: Input
        }], loading: [{
            type: Input
        }], inline: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['class.novo-card-inline']
        }], inset: [{
            type: Input
        }], hbInset: [{
            type: HostBinding,
            args: ['class']
        }], onClose: [{
            type: Output
        }], onRefresh: [{
            type: Output
        }] }); })();

// NG2
class NovoCardModule {
}
NovoCardModule.ɵmod = ɵɵdefineNgModule({ type: NovoCardModule });
NovoCardModule.ɵinj = ɵɵdefineInjector({ factory: function NovoCardModule_Factory(t) { return new (t || NovoCardModule)(); }, imports: [[CommonModule, NovoIconModule, NovoButtonModule, NovoLoadingModule, NovoTooltipModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoCardModule, { declarations: [CardElement, CardActionsElement, CardContentElement, CardHeaderElement, CardFooterElement], imports: [CommonModule, NovoIconModule, NovoButtonModule, NovoLoadingModule, NovoTooltipModule], exports: [CardElement, CardActionsElement, CardContentElement, CardHeaderElement, CardFooterElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoCardModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, NovoIconModule, NovoButtonModule, NovoLoadingModule, NovoTooltipModule],
                declarations: [CardElement, CardActionsElement, CardContentElement, CardHeaderElement, CardFooterElement],
                exports: [CardElement, CardActionsElement, CardContentElement, CardHeaderElement, CardFooterElement],
            }]
    }], null, null); })();

const _c0$x = ["*"];
const _c1$b = ["tablink"];
class NovoNavElement {
    constructor() {
        this.theme = '';
        this.direction = '';
        this.condensed = false;
        this.items = [];
    }
    select(item) {
        /**
         * Deactivate all other tabs
         */
        function _deactivateAllItems(items) {
            items.forEach((t) => {
                if (t.active === true) {
                    // t.deselected.next();
                }
                t.active = false;
            });
        }
        _deactivateAllItems(this.items);
        item.active = true;
        if (this.outlet) {
            this.outlet.show(this.items.indexOf(item));
        }
        // TODO - remove hack to make DOM rerender - jgodi
        const element = document.querySelector('novo-tab-link.active span.indicator');
        if (element) {
            element.style.opacity = 0.99;
            setTimeout(() => {
                element.style.opacity = 1;
            }, 10);
        }
    }
    add(item) {
        if (this.items.length === 0) {
            item.active = true;
            // item.selected.next();
        }
        this.items.push(item);
    }
}
NovoNavElement.ɵfac = function NovoNavElement_Factory(t) { return new (t || NovoNavElement)(); };
NovoNavElement.ɵcmp = ɵɵdefineComponent({ type: NovoNavElement, selectors: [["novo-nav"]], hostVars: 2, hostBindings: function NovoNavElement_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵclassProp("condensed", ctx.condensed);
    } }, inputs: { theme: "theme", direction: "direction", outlet: "outlet", router: "router", condensed: "condensed" }, ngContentSelectors: _c0$x, decls: 1, vars: 0, template: function NovoNavElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵprojection(0);
    } }, encapsulation: 2 });
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoNavElement.prototype, "condensed", void 0);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoNavElement, [{
        type: Component,
        args: [{
                selector: 'novo-nav',
                template: '<ng-content></ng-content>',
            }]
    }], null, { theme: [{
            type: Input
        }], direction: [{
            type: Input
        }], outlet: [{
            type: Input
        }], router: [{
            type: Input
        }], condensed: [{
            type: HostBinding,
            args: ['class.condensed']
        }, {
            type: Input
        }] }); })();
class NovoTabElement {
    constructor(nav) {
        this.active = false;
        this.disabled = false;
        this.activeChange = new EventEmitter();
        this.onlyText = true;
        this.nav = nav;
        this.nav.add(this);
    }
    get hb_textOnly() {
        return this.onlyText;
    }
    ngAfterViewInit() {
        const nodes = this.tablink.nativeElement.childNodes;
        for (let i = 0; i < nodes.length; i++) {
            if (nodes[i].nodeType !== Node.TEXT_NODE)
                this.onlyText = false;
        }
    }
    select() {
        if (!this.disabled) {
            this.activeChange.emit(true);
            this.nav.select(this);
        }
    }
}
NovoTabElement.ɵfac = function NovoTabElement_Factory(t) { return new (t || NovoTabElement)(ɵɵdirectiveInject(NovoNavElement)); };
NovoTabElement.ɵcmp = ɵɵdefineComponent({ type: NovoTabElement, selectors: [["novo-tab"]], viewQuery: function NovoTabElement_Query(rf, ctx) { if (rf & 1) {
        ɵɵviewQuery(_c1$b, true);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.tablink = _t.first);
    } }, hostVars: 6, hostBindings: function NovoTabElement_HostBindings(rf, ctx) { if (rf & 1) {
        ɵɵlistener("click", function NovoTabElement_click_HostBindingHandler() { return ctx.select(); });
    } if (rf & 2) {
        ɵɵclassProp("active", ctx.active)("disabled", ctx.disabled)("text-only", ctx.hb_textOnly);
    } }, inputs: { active: "active", color: "color", disabled: "disabled" }, outputs: { activeChange: "activeChange" }, ngContentSelectors: _c0$x, decls: 4, vars: 0, consts: [[1, "novo-tab-link"], ["tablink", ""], [1, "indicator"]], template: function NovoTabElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵelementStart(0, "div", 0, 1);
        ɵɵprojection(2);
        ɵɵelementEnd();
        ɵɵelement(3, "span", 2);
    } }, encapsulation: 2 });
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoTabElement.prototype, "disabled", void 0);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTabElement, [{
        type: Component,
        args: [{
                selector: 'novo-tab',
                host: {
                    '(click)': 'select()',
                    '[class.active]': 'active',
                    '[class.disabled]': 'disabled',
                },
                template: `
    <div #tablink class="novo-tab-link">
      <ng-content></ng-content>
    </div>
    <span class="indicator"></span>
  `,
            }]
    }], function () { return [{ type: NovoNavElement }]; }, { active: [{
            type: Input
        }], color: [{
            type: Input
        }], disabled: [{
            type: Input
        }], activeChange: [{
            type: Output
        }], hb_textOnly: [{
            type: HostBinding,
            args: ['class.text-only']
        }], tablink: [{
            type: ViewChild,
            args: ['tablink']
        }] }); })();
class NovoTabButtonElement {
    constructor(nav) {
        this.active = false;
        this.disabled = false;
        this.nav = nav;
        this.nav.add(this);
    }
    select() {
        if (!this.disabled) {
            this.nav.select(this);
        }
    }
}
NovoTabButtonElement.ɵfac = function NovoTabButtonElement_Factory(t) { return new (t || NovoTabButtonElement)(ɵɵdirectiveInject(NovoNavElement)); };
NovoTabButtonElement.ɵcmp = ɵɵdefineComponent({ type: NovoTabButtonElement, selectors: [["novo-tab-button"]], hostVars: 4, hostBindings: function NovoTabButtonElement_HostBindings(rf, ctx) { if (rf & 1) {
        ɵɵlistener("click", function NovoTabButtonElement_click_HostBindingHandler() { return ctx.select(); });
    } if (rf & 2) {
        ɵɵclassProp("active", ctx.active)("disabled", ctx.disabled);
    } }, inputs: { active: "active", disabled: "disabled" }, ngContentSelectors: _c0$x, decls: 1, vars: 0, template: function NovoTabButtonElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTabButtonElement, [{
        type: Component,
        args: [{
                selector: 'novo-tab-button',
                host: {
                    '(click)': 'select()',
                    '[class.active]': 'active',
                    '[class.disabled]': 'disabled',
                },
                template: '<ng-content></ng-content>',
            }]
    }], function () { return [{ type: NovoNavElement }]; }, { active: [{
            type: Input
        }], disabled: [{
            type: Input
        }] }); })();
class NovoTabLinkElement {
    constructor(nav) {
        this.active = false;
        this.disabled = false;
        this.nav = nav;
        this.nav.add(this);
    }
    select() {
        if (!this.disabled) {
            this.nav.select(this);
        }
    }
}
NovoTabLinkElement.ɵfac = function NovoTabLinkElement_Factory(t) { return new (t || NovoTabLinkElement)(ɵɵdirectiveInject(NovoNavElement)); };
NovoTabLinkElement.ɵcmp = ɵɵdefineComponent({ type: NovoTabLinkElement, selectors: [["novo-tab-link"]], hostVars: 4, hostBindings: function NovoTabLinkElement_HostBindings(rf, ctx) { if (rf & 1) {
        ɵɵlistener("click", function NovoTabLinkElement_click_HostBindingHandler() { return ctx.select(); });
    } if (rf & 2) {
        ɵɵclassProp("active", ctx.active)("disabled", ctx.disabled);
    } }, inputs: { active: "active", disabled: "disabled" }, ngContentSelectors: _c0$x, decls: 3, vars: 0, consts: [[1, "novo-tab-link"], [1, "indicator"]], template: function NovoTabLinkElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵelementStart(0, "div", 0);
        ɵɵprojection(1);
        ɵɵelementEnd();
        ɵɵelement(2, "span", 1);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTabLinkElement, [{
        type: Component,
        args: [{
                selector: 'novo-tab-link',
                host: {
                    '(click)': 'select()',
                    '[class.active]': 'active',
                    '[class.disabled]': 'disabled',
                },
                template: `
    <div class="novo-tab-link">
      <ng-content></ng-content>
    </div>
    <span class="indicator"></span>
  `,
            }]
    }], function () { return [{ type: NovoNavElement }]; }, { active: [{
            type: Input
        }], disabled: [{
            type: Input
        }] }); })();
class NovoNavOutletElement {
    constructor() {
        this.items = [];
    }
    show(index) {
        const item = this.items[index];
        /**
         * Deactivates other tab items
         * @param items - deactivated items
         */
        function _deactivateAllItems(items) {
            items.forEach((t) => {
                if (t.active === true) {
                    // t.deselected.next();
                }
                t.active = false;
            });
        }
        _deactivateAllItems(this.items);
        item.active = true;
    }
    add(item) {
        if (this.items.length === 0) {
            item.active = true;
        }
        this.items.push(item);
    }
}
NovoNavOutletElement.ɵfac = function NovoNavOutletElement_Factory(t) { return new (t || NovoNavOutletElement)(); };
NovoNavOutletElement.ɵcmp = ɵɵdefineComponent({ type: NovoNavOutletElement, selectors: [["novo-nav-outlet"]], ngContentSelectors: _c0$x, decls: 1, vars: 0, template: function NovoNavOutletElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoNavOutletElement, [{
        type: Component,
        args: [{
                selector: 'novo-nav-outlet',
                template: '<ng-content></ng-content>',
            }]
    }], null, null); })();
class NovoNavContentElement {
    constructor(outlet) {
        this.active = false;
        outlet.add(this);
    }
}
NovoNavContentElement.ɵfac = function NovoNavContentElement_Factory(t) { return new (t || NovoNavContentElement)(ɵɵdirectiveInject(NovoNavOutletElement)); };
NovoNavContentElement.ɵcmp = ɵɵdefineComponent({ type: NovoNavContentElement, selectors: [["novo-nav-content"]], hostVars: 2, hostBindings: function NovoNavContentElement_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵclassProp("active", ctx.active);
    } }, inputs: { active: "active" }, ngContentSelectors: _c0$x, decls: 1, vars: 0, template: function NovoNavContentElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoNavContentElement, [{
        type: Component,
        args: [{
                selector: 'novo-nav-content',
                host: {
                    '[class.active]': 'active',
                },
                template: '<ng-content></ng-content>',
            }]
    }], function () { return [{ type: NovoNavOutletElement }]; }, { active: [{
            type: Input
        }] }); })();
class NovoNavHeaderElement {
    constructor(outlet) {
        this.active = false;
        this.active = this.active || false;
        this.outlet = outlet;
    }
    show(event) {
        try {
            const INDEX = this.outlet.items.indexOf(this.forElement);
            if (INDEX > -1) {
                this.outlet.show(INDEX);
            }
        }
        catch (err) {
            // do nothing
        }
    }
}
NovoNavHeaderElement.ɵfac = function NovoNavHeaderElement_Factory(t) { return new (t || NovoNavHeaderElement)(ɵɵdirectiveInject(NovoNavOutletElement)); };
NovoNavHeaderElement.ɵcmp = ɵɵdefineComponent({ type: NovoNavHeaderElement, selectors: [["novo-nav-header"]], hostVars: 2, hostBindings: function NovoNavHeaderElement_HostBindings(rf, ctx) { if (rf & 1) {
        ɵɵlistener("click", function NovoNavHeaderElement_click_HostBindingHandler($event) { return ctx.show($event); });
    } if (rf & 2) {
        ɵɵclassProp("active", ctx.active);
    } }, inputs: { active: "active", forElement: ["for", "forElement"] }, ngContentSelectors: _c0$x, decls: 1, vars: 0, template: function NovoNavHeaderElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoNavHeaderElement, [{
        type: Component,
        args: [{
                selector: 'novo-nav-header',
                host: {
                    '[class.active]': 'active',
                    '(click)': 'show($event)',
                },
                template: '<ng-content></ng-content>',
            }]
    }], function () { return [{ type: NovoNavOutletElement }]; }, { active: [{
            type: Input
        }], forElement: [{
            type: Input,
            args: ['for']
        }] }); })();

// NG2
function NovoCategoryDropdownElement_div_1_div_1_i_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 12);
} }
function NovoCategoryDropdownElement_div_1_div_1_i_3_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "i", 13);
    ɵɵlistener("click", function NovoCategoryDropdownElement_div_1_div_1_i_3_Template_i_click_0_listener($event) { ɵɵrestoreView(_r9); const ctx_r8 = ɵɵnextContext(3); return ctx_r8.clearQuery($event); });
    ɵɵelementEnd();
} }
function NovoCategoryDropdownElement_div_1_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 8);
    ɵɵelementStart(1, "input", 9);
    ɵɵlistener("input", function NovoCategoryDropdownElement_div_1_div_1_Template_input_input_1_listener($event) { ɵɵrestoreView(_r11); const ctx_r10 = ɵɵnextContext(2); return ctx_r10.queryCategories($event.target.value); });
    ɵɵelementEnd();
    ɵɵtemplate(2, NovoCategoryDropdownElement_div_1_div_1_i_2_Template, 1, 0, "i", 10);
    ɵɵtemplate(3, NovoCategoryDropdownElement_div_1_div_1_i_3_Template, 1, 0, "i", 11);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("placeholder", ctx_r1.search.placeholder || ctx_r1.labels.search)("value", ctx_r1._query);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !ctx_r1._query);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r1._query);
} }
function NovoCategoryDropdownElement_div_1_novo_tab_3_Template(rf, ctx) { if (rf & 1) {
    const _r14 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-tab", 14);
    ɵɵlistener("activeChange", function NovoCategoryDropdownElement_div_1_novo_tab_3_Template_novo_tab_activeChange_0_listener() { ɵɵrestoreView(_r14); const category_r12 = ctx.$implicit; const ctx_r13 = ɵɵnextContext(2); return ctx_r13.onCategorySelected(category_r12); });
    ɵɵelementStart(1, "span");
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const category_r12 = ctx.$implicit;
    const ctx_r2 = ɵɵnextContext(2);
    ɵɵattribute("data-automation-id", category_r12);
    ɵɵadvance(2);
    ɵɵtextInterpolate2("", category_r12, " (", ctx_r2._categoryMap[category_r12].length, ")");
} }
function NovoCategoryDropdownElement_div_1_novo_nav_content_6_novo_list_item_2_item_end_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "item-end", 21);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const item_r18 = ɵɵnextContext().$implicit;
    ɵɵadvance(1);
    ɵɵtextInterpolate(item_r18.hoverText);
} }
function NovoCategoryDropdownElement_div_1_novo_nav_content_6_novo_list_item_2_item_end_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "item-end", 21);
    ɵɵelement(1, "i");
    ɵɵelementEnd();
} if (rf & 2) {
    const item_r18 = ɵɵnextContext().$implicit;
    ɵɵadvance(1);
    ɵɵclassMapInterpolate1("bhi-", item_r18.hoverIcon, "");
} }
function NovoCategoryDropdownElement_div_1_novo_nav_content_6_novo_list_item_2_item_end_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "item-end");
    ɵɵelement(1, "i", 22);
    ɵɵelementEnd();
} }
function NovoCategoryDropdownElement_div_1_novo_nav_content_6_novo_list_item_2_Template(rf, ctx) { if (rf & 1) {
    const _r25 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-list-item", 18);
    ɵɵlistener("click", function NovoCategoryDropdownElement_div_1_novo_nav_content_6_novo_list_item_2_Template_novo_list_item_click_0_listener($event) { ɵɵrestoreView(_r25); const item_r18 = ctx.$implicit; const ctx_r24 = ɵɵnextContext(3); return ctx_r24.select($event, item_r18); });
    ɵɵelementStart(1, "item-content");
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵtemplate(3, NovoCategoryDropdownElement_div_1_novo_nav_content_6_novo_list_item_2_item_end_3_Template, 2, 1, "item-end", 19);
    ɵɵtemplate(4, NovoCategoryDropdownElement_div_1_novo_nav_content_6_novo_list_item_2_item_end_4_Template, 2, 3, "item-end", 19);
    ɵɵtemplate(5, NovoCategoryDropdownElement_div_1_novo_nav_content_6_novo_list_item_2_item_end_5_Template, 2, 0, "item-end", 20);
    ɵɵelementEnd();
} if (rf & 2) {
    const item_r18 = ctx.$implicit;
    ɵɵattribute("data-automation-id", item_r18.label);
    ɵɵadvance(2);
    ɵɵtextInterpolate(item_r18.label);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", item_r18.hoverText && !item_r18.selected);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", item_r18.hoverIcon && !item_r18.selected);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", item_r18.selected);
} }
function NovoCategoryDropdownElement_div_1_novo_nav_content_6_novo_list_item_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-list-item", 23);
    ɵɵelementStart(1, "item-content");
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r17 = ɵɵnextContext(3);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r17.search.emptyMessage || ctx_r17.labels.noItems);
} }
function NovoCategoryDropdownElement_div_1_novo_nav_content_6_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-nav-content");
    ɵɵelementStart(1, "novo-list", 15);
    ɵɵtemplate(2, NovoCategoryDropdownElement_div_1_novo_nav_content_6_novo_list_item_2_Template, 6, 5, "novo-list-item", 16);
    ɵɵtemplate(3, NovoCategoryDropdownElement_div_1_novo_nav_content_6_novo_list_item_3_Template, 3, 1, "novo-list-item", 17);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const category_r15 = ctx.$implicit;
    const ctx_r4 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵproperty("ngForOf", ctx_r4._categoryMap[category_r15]);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r4._categoryMap[category_r15].length === 0 && ctx_r4.search);
} }
function NovoCategoryDropdownElement_div_1_footer_7_a_1_Template(rf, ctx) { if (rf & 1) {
    const _r29 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "a", 18);
    ɵɵlistener("click", function NovoCategoryDropdownElement_div_1_footer_7_a_1_Template_a_click_0_listener($event) { ɵɵrestoreView(_r29); const link_r27 = ctx.$implicit; const ctx_r28 = ɵɵnextContext(3); return ctx_r28.executeClickCallback($event, link_r27); });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const link_r27 = ctx.$implicit;
    ɵɵadvance(1);
    ɵɵtextInterpolate(link_r27.label);
} }
function NovoCategoryDropdownElement_div_1_footer_7_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "footer");
    ɵɵtemplate(1, NovoCategoryDropdownElement_div_1_footer_7_a_1_Template, 2, 1, "a", 16);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵɵnextContext(2);
    ɵɵclassMapInterpolate1("novo-category-dropdown-footer-align-", ctx_r5.footer.align || "right", "");
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r5.footer.links);
} }
function NovoCategoryDropdownElement_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 1);
    ɵɵtemplate(1, NovoCategoryDropdownElement_div_1_div_1_Template, 4, 4, "div", 2);
    ɵɵelementStart(2, "novo-nav", 3);
    ɵɵtemplate(3, NovoCategoryDropdownElement_div_1_novo_tab_3_Template, 3, 3, "novo-tab", 4);
    ɵɵelementEnd();
    ɵɵelementStart(4, "novo-nav-outlet", null, 5);
    ɵɵtemplate(6, NovoCategoryDropdownElement_div_1_novo_nav_content_6_Template, 4, 2, "novo-nav-content", 6);
    ɵɵelementEnd();
    ɵɵtemplate(7, NovoCategoryDropdownElement_div_1_footer_7_Template, 2, 4, "footer", 7);
    ɵɵelementEnd();
} if (rf & 2) {
    const _r3 = ɵɵreference(5);
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.search);
    ɵɵadvance(1);
    ɵɵproperty("outlet", _r3);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r0._categories);
    ɵɵadvance(3);
    ɵɵproperty("ngForOf", ctx_r0._categories);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.footer);
} }
const _c0$y = [[["button"]]];
const _c1$c = ["button"];
class NovoCategoryDropdownElement extends OutsideClick {
    constructor(element, labels) {
        super(element);
        this.labels = labels;
        this._query = '';
        this._categoryMap = {};
        this._categories = [];
        // Boolean to keep the selection persist when closing the dropdown
        this.persistSelection = false;
        // Boolean to close the dropdown on selection
        this.closeOnSelect = false;
        // Event that is emitted whenever an item is selected
        this._select = new EventEmitter();
        // Event that is emitted whenever a category is selected
        this.categorySelected = new EventEmitter();
        this.clickHandler = this.toggleActive.bind(this);
    }
    set categories(categories) {
        this._masterCategoryMap = Object.assign({}, categories);
        this._categoryMap = Object.assign({}, categories);
        this._categories = Object.keys(categories);
    }
    ngOnInit() {
        const button = this.element.nativeElement.querySelector('button');
        button.addEventListener('click', this.clickHandler);
    }
    ngOnDestroy() {
        const button = this.element.nativeElement.querySelector('button');
        if (button) {
            button.removeEventListener('click', this.clickHandler);
        }
    }
    onKeyDown(event) {
        if (this.active && (event.key === "Escape" /* Escape */ || event.key === "Enter" /* Enter */)) {
            this.toggleActive();
        }
    }
    clearSelection() {
        this._categories.forEach((category) => {
            this._categoryMap[category].forEach((item) => {
                item.selected = false;
            });
        });
    }
    select(event, item) {
        Helpers.swallowEvent(event);
        // If we persist the selection, clear and show a check
        if (this.persistSelection) {
            this.clearSelection();
            item.selected = true;
        }
        // Emit the item
        this._select.emit(item);
        // Close, if input is set
        if (this.closeOnSelect) {
            this.toggleActive();
        }
    }
    onCategorySelected(category) {
        this.categorySelected.emit(category);
    }
    clearQuery(event) {
        Helpers.swallowEvent(event);
        this._query = '';
        // Reset the categories
        this._categories.forEach((category) => {
            this._categoryMap[category] = this._masterCategoryMap[category];
        });
    }
    queryCategories(query) {
        // Save the query
        this._query = query;
        // Check timeout
        if (this._queryTimeout) {
            clearTimeout(this._queryTimeout);
        }
        // Store a timeout, to debounce user input
        this._queryTimeout = setTimeout(() => {
            this._categories.forEach((category) => {
                if (this.search.compare) {
                    this._categoryMap[category] = this._masterCategoryMap[category].filter((item) => this.search.compare(query, item));
                }
                else {
                    this._categoryMap[category] = this._masterCategoryMap[category].filter((item) => ~item.label.toLowerCase().indexOf(query.toLowerCase()));
                }
            });
        }, this.search.debounce || 300);
    }
    executeClickCallback(event, link) {
        link.callback(event);
        // Close, if input is set
        if (this.closeOnSelect) {
            this.toggleActive();
        }
    }
}
NovoCategoryDropdownElement.ɵfac = function NovoCategoryDropdownElement_Factory(t) { return new (t || NovoCategoryDropdownElement)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NovoLabelService)); };
NovoCategoryDropdownElement.ɵcmp = ɵɵdefineComponent({ type: NovoCategoryDropdownElement, selectors: [["novo-category-dropdown"]], hostVars: 2, hostBindings: function NovoCategoryDropdownElement_HostBindings(rf, ctx) { if (rf & 1) {
        ɵɵlistener("keydown", function NovoCategoryDropdownElement_keydown_HostBindingHandler($event) { return ctx.onKeyDown($event); });
    } if (rf & 2) {
        ɵɵclassProp("active", ctx.active);
    } }, inputs: { persistSelection: "persistSelection", closeOnSelect: "closeOnSelect", search: "search", footer: "footer", categories: "categories" }, outputs: { _select: "itemSelected", categorySelected: "categorySelected" }, features: [ɵɵInheritDefinitionFeature], ngContentSelectors: _c1$c, decls: 2, vars: 1, consts: [["class", "dropdown-container", 4, "ngIf"], [1, "dropdown-container"], ["class", "novo-category-dropdown-search", "data-automation-id", "novo-category-dropdown-search", 4, "ngIf"], ["theme", "white", "direction", "vertical", 3, "outlet"], [3, "activeChange", 4, "ngFor", "ngForOf"], ["novoCategoryDropdownOutlet", ""], [4, "ngFor", "ngForOf"], [3, "class", 4, "ngIf"], ["data-automation-id", "novo-category-dropdown-search", 1, "novo-category-dropdown-search"], ["type", "text", 3, "placeholder", "value", "input"], ["class", "bhi-search", 4, "ngIf"], ["class", "bhi-times", 3, "click", 4, "ngIf"], [1, "bhi-search"], [1, "bhi-times", 3, "click"], [3, "activeChange"], ["direction", "vertical"], [3, "click", 4, "ngFor", "ngForOf"], ["class", "novo-category-dropdown-empty-item", 4, "ngIf"], [3, "click"], ["class", "novo-category-dropdown-hover", 4, "ngIf"], [4, "ngIf"], [1, "novo-category-dropdown-hover"], [1, "bhi-check"], [1, "novo-category-dropdown-empty-item"]], template: function NovoCategoryDropdownElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef(_c0$y);
        ɵɵprojection(0);
        ɵɵtemplate(1, NovoCategoryDropdownElement_div_1_Template, 8, 5, "div", 0);
    } if (rf & 2) {
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.active);
    } }, directives: [NgIf, NovoNavElement, NgForOf, NovoNavOutletElement, NovoTabElement, NovoNavContentElement, NovoListElement, NovoListItemElement, NovoItemContentElement, NovoItemEndElement], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoCategoryDropdownElement, [{
        type: Component,
        args: [{
                selector: 'novo-category-dropdown',
                template: `
    <ng-content select="button"></ng-content>
    <div class="dropdown-container" *ngIf="active">
      <div class="novo-category-dropdown-search" *ngIf="search" data-automation-id="novo-category-dropdown-search">
        <input
          type="text"
          [placeholder]="search.placeholder || labels.search"
          [value]="_query"
          (input)="queryCategories($event.target.value)"
        />
        <i class="bhi-search" *ngIf="!_query"></i>
        <i class="bhi-times" *ngIf="_query" (click)="clearQuery($event)"></i>
      </div>
      <novo-nav theme="white" [outlet]="novoCategoryDropdownOutlet" direction="vertical">
        <novo-tab *ngFor="let category of _categories" [attr.data-automation-id]="category" (activeChange)="onCategorySelected(category)">
          <span>{{ category }} ({{ _categoryMap[category].length }})</span>
        </novo-tab>
      </novo-nav>
      <novo-nav-outlet #novoCategoryDropdownOutlet>
        <novo-nav-content *ngFor="let category of _categories">
          <novo-list direction="vertical">
            <novo-list-item
              *ngFor="let item of _categoryMap[category]"
              (click)="select($event, item)"
              [attr.data-automation-id]="item.label"
            >
              <item-content>{{ item.label }}</item-content>
              <item-end class="novo-category-dropdown-hover" *ngIf="item.hoverText && !item.selected">{{ item.hoverText }}</item-end>
              <item-end class="novo-category-dropdown-hover" *ngIf="item.hoverIcon && !item.selected"
                ><i class="bhi-{{ item.hoverIcon }}"></i
              ></item-end>
              <item-end *ngIf="item.selected"><i class="bhi-check"></i></item-end>
            </novo-list-item>
            <novo-list-item *ngIf="_categoryMap[category].length === 0 && search" class="novo-category-dropdown-empty-item">
              <item-content>{{ search.emptyMessage || labels.noItems }}</item-content>
            </novo-list-item>
          </novo-list>
        </novo-nav-content>
      </novo-nav-outlet>
      <footer *ngIf="footer" class="novo-category-dropdown-footer-align-{{ footer.align || 'right' }}">
        <a *ngFor="let link of footer.links" (click)="executeClickCallback($event, link)">{{ link.label }}</a>
      </footer>
    </div>
  `,
                host: {
                    '(keydown)': 'onKeyDown($event)',
                    '[class.active]': 'active',
                },
            }]
    }], function () { return [{ type: ElementRef }, { type: NovoLabelService }]; }, { persistSelection: [{
            type: Input
        }], closeOnSelect: [{
            type: Input
        }], search: [{
            type: Input
        }], footer: [{
            type: Input
        }], _select: [{
            type: Output,
            args: ['itemSelected']
        }], categorySelected: [{
            type: Output
        }], categories: [{
            type: Input
        }] }); })();

// NG2
class NovoTabModule {
}
NovoTabModule.ɵmod = ɵɵdefineNgModule({ type: NovoTabModule });
NovoTabModule.ɵinj = ɵɵdefineInjector({ factory: function NovoTabModule_Factory(t) { return new (t || NovoTabModule)(); }, imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoTabModule, { declarations: [NovoNavElement,
        NovoTabElement,
        NovoTabButtonElement,
        NovoTabLinkElement,
        NovoNavOutletElement,
        NovoNavContentElement,
        NovoNavHeaderElement], imports: [CommonModule], exports: [NovoNavElement,
        NovoTabElement,
        NovoTabButtonElement,
        NovoTabLinkElement,
        NovoNavOutletElement,
        NovoNavContentElement,
        NovoNavHeaderElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTabModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [
                    NovoNavElement,
                    NovoTabElement,
                    NovoTabButtonElement,
                    NovoTabLinkElement,
                    NovoNavOutletElement,
                    NovoNavContentElement,
                    NovoNavHeaderElement,
                ],
                exports: [
                    NovoNavElement,
                    NovoTabElement,
                    NovoTabButtonElement,
                    NovoTabLinkElement,
                    NovoNavOutletElement,
                    NovoNavContentElement,
                    NovoNavHeaderElement,
                ],
            }]
    }], null, null); })();

// NG2
class NovoCategoryDropdownModule {
}
NovoCategoryDropdownModule.ɵmod = ɵɵdefineNgModule({ type: NovoCategoryDropdownModule });
NovoCategoryDropdownModule.ɵinj = ɵɵdefineInjector({ factory: function NovoCategoryDropdownModule_Factory(t) { return new (t || NovoCategoryDropdownModule)(); }, imports: [[CommonModule, NovoTabModule, NovoListModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoCategoryDropdownModule, { declarations: [NovoCategoryDropdownElement], imports: [CommonModule, NovoTabModule, NovoListModule], exports: [NovoCategoryDropdownElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoCategoryDropdownModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, NovoTabModule, NovoListModule],
                declarations: [NovoCategoryDropdownElement],
                exports: [NovoCategoryDropdownElement],
            }]
    }], null, null); })();

const REMOVABLE_REF = new InjectionToken('REMOVABLE_REF');
/** Event object emitted by NovoChip when selected or deselected. */
class NovoChipSelectionChange {
    constructor(
    /** Reference to the chip that emitted the event. */
    source, 
    /** Whether the chip that emitted the event is selected. */
    selected, 
    /** Whether the selection change was a result of a user interaction. */
    isUserInput = false) {
        this.source = source;
        this.selected = selected;
        this.isUserInput = isUserInput;
    }
}
// Boilerplate for applying mixins to NovoChipElement.
/** @docs-private */
class NovoChipBase {
    // abstract disabled: boolean;
    constructor(_elementRef) {
        this._elementRef = _elementRef;
    }
}
const NovoChipMixinBase = mixinTabIndex(mixinColor(NovoChipBase, 'primary'), -1);
/**
 * Dummy directive to add CSS class to chip avatar.
 * @docs-private
 */
class NovoChipAvatar {
}
NovoChipAvatar.ɵfac = function NovoChipAvatar_Factory(t) { return new (t || NovoChipAvatar)(); };
NovoChipAvatar.ɵdir = ɵɵdefineDirective({ type: NovoChipAvatar, selectors: [["novo-chip-avatar"], ["", "novoChipAvatar", ""]], hostAttrs: [1, "novo-chip-avatar"] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoChipAvatar, [{
        type: Directive,
        args: [{
                selector: 'novo-chip-avatar, [novoChipAvatar]',
                host: { class: 'novo-chip-avatar' },
            }]
    }], null, null); })();
/**
 * Applies proper (click) support and adds styling for use with the Material Design "cancel" icon
 * available at https://material.io/icons/#ic_cancel.
 *
 * Example:
 *
 *     `<novo-chip>
 *       <novo-icon novoChipRemove>cancel</novo-icon>
 *     </novo-chip>`
 *
 * You *may* use a custom icon, but you may need to override the `novo-chip-remove` positioning
 * styles to properly center the icon within the chip.
 */
class NovoChipRemove {
    constructor(_parentChip, elementRef) {
        this._parentChip = _parentChip;
        if (elementRef.nativeElement.nodeName === 'BUTTON') {
            elementRef.nativeElement.setAttribute('type', 'button');
        }
    }
    /** Calls the parent chip's public `remove()` method if applicable. */
    _handleClick(event) {
        const parentChip = this._parentChip;
        if (parentChip.removable && !parentChip.disabled) {
            parentChip.remove();
        }
        // We need to stop event propagation because otherwise the event will bubble up to the
        // form field and cause the `onContainerClick` method to be invoked. This method would then
        // reset the focused chip that has been focused after chip removal. Usually the parent
        // the parent click listener of the `NovoChip` would prevent propagation, but it can happen
        // that the chip is being removed before the event bubbles up.
        event.stopPropagation();
    }
}
NovoChipRemove.ɵfac = function NovoChipRemove_Factory(t) { return new (t || NovoChipRemove)(ɵɵdirectiveInject(REMOVABLE_REF), ɵɵdirectiveInject(ElementRef)); };
NovoChipRemove.ɵdir = ɵɵdefineDirective({ type: NovoChipRemove, selectors: [["", "novoChipRemove", ""]], hostAttrs: [1, "novo-chip-remove"], hostBindings: function NovoChipRemove_HostBindings(rf, ctx) { if (rf & 1) {
        ɵɵlistener("click", function NovoChipRemove_click_HostBindingHandler($event) { return ctx._handleClick($event); });
    } } });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoChipRemove, [{
        type: Directive,
        args: [{
                selector: '[novoChipRemove]',
                host: {
                    class: 'novo-chip-remove',
                    '(click)': '_handleClick($event)',
                },
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [REMOVABLE_REF]
            }] }, { type: ElementRef }]; }, null); })();
/**
 * Material design styled Chip component. Used inside the NovoChipList component.
 */
class NovoChipElement extends NovoChipMixinBase {
    constructor(_elementRef, _ngZone, platform, _changeDetectorRef, _document, animationMode, tabIndex) {
        super(_elementRef);
        this._elementRef = _elementRef;
        this._ngZone = _ngZone;
        this._changeDetectorRef = _changeDetectorRef;
        /** Whether the chip has focus. */
        this._hasFocus = false;
        /** Whether the chip list is selectable */
        this.chipListSelectable = true;
        /** Whether the chip list is in multi-selection mode. */
        this._chipListMultiple = false;
        /** Whether the chip list as a whole is disabled. */
        this._chipListDisabled = false;
        this._selected = false;
        this._selectable = true;
        this._disabled = false;
        this._removable = true;
        /** Emits when the chip is focused. */
        this._onFocus = new Subject();
        /** Emits when the chip is blured. */
        this._onBlur = new Subject();
        /** Emitted when the chip is selected or deselected. */
        this.selectionChange = new EventEmitter();
        /** Emitted when the chip is destroyed. */
        this.destroyed = new EventEmitter();
        /** Emitted when a chip is to be removed. */
        this.removed = new EventEmitter();
        this._animationsDisabled = animationMode === 'NoopAnimations';
        this.tabIndex = tabIndex != null ? parseInt(tabIndex, 10) || -1 : -1;
    }
    /** Whether the chip is selected. */
    get selected() {
        return this._selected;
    }
    set selected(value) {
        const coercedValue = coerceBooleanProperty(value);
        if (coercedValue !== this._selected) {
            this._selected = coercedValue;
            this._dispatchSelectionChange();
        }
    }
    /** The value of the chip. Defaults to the content inside `<novo-chip>` tags. */
    get value() {
        return this._value !== undefined ? this._value : this._elementRef.nativeElement.textContent;
    }
    set value(value) {
        this._value = value;
    }
    /**
     * Whether or not the chip is selectable. When a chip is not selectable,
     * changes to its selected state are always ignored. By default a chip is
     * selectable, and it becomes non-selectable if its parent chip list is
     * not selectable.
     */
    get selectable() {
        return this._selectable && this.chipListSelectable;
    }
    set selectable(value) {
        this._selectable = coerceBooleanProperty(value);
    }
    /** Whether the chip is disabled. */
    get disabled() {
        return this._chipListDisabled || this._disabled;
    }
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
    }
    /**
     * Determines whether or not the chip displays the remove styling and emits (removed) events.
     */
    get removable() {
        return this._removable;
    }
    set removable(value) {
        this._removable = coerceBooleanProperty(value);
    }
    /** The ARIA selected applied to the chip. */
    get ariaSelected() {
        // Remove the `aria-selected` when the chip is deselected in single-selection mode, because
        // it adds noise to NVDA users where "not selected" will be read out for each chip.
        return this.selectable && (this._chipListMultiple || this.selected) ? this.selected.toString() : null;
    }
    ngOnDestroy() {
        this.destroyed.emit({ chip: this });
    }
    /** Selects the chip. */
    select() {
        if (!this._selected) {
            this._selected = true;
            this._dispatchSelectionChange();
            this._changeDetectorRef.markForCheck();
        }
    }
    /** Deselects the chip. */
    deselect() {
        if (this._selected) {
            this._selected = false;
            this._dispatchSelectionChange();
            this._changeDetectorRef.markForCheck();
        }
    }
    /** Select this chip and emit selected event */
    selectViaInteraction() {
        if (!this._selected) {
            this._selected = true;
            this._dispatchSelectionChange(true);
            this._changeDetectorRef.markForCheck();
        }
    }
    /** Toggles the current selected state of this chip. */
    toggleSelected(isUserInput = false) {
        this._selected = !this.selected;
        this._dispatchSelectionChange(isUserInput);
        this._changeDetectorRef.markForCheck();
        return this.selected;
    }
    /** Allows for programmatic focusing of the chip. */
    focus() {
        if (!this._hasFocus) {
            this._elementRef.nativeElement.focus();
            this._onFocus.next({ chip: this });
        }
        this._hasFocus = true;
    }
    /**
     * Allows for programmatic removal of the chip. Called by the NovoChipList when the DELETE or
     * BACKSPACE keys are pressed.
     *
     * Informs any listeners of the removal request. Does not remove the chip from the DOM.
     */
    remove() {
        if (this.removable) {
            this.removed.emit({ chip: this });
        }
    }
    /** Handles click events on the chip. */
    _handleClick(event) {
        if (this.disabled) {
            event.preventDefault();
        }
        else {
            event.stopPropagation();
        }
    }
    /** Handle custom key presses. */
    _handleKeydown(event) {
        if (this.disabled) {
            return;
        }
        switch (event.key) {
            case "Delete" /* Delete */:
            case "Backspace" /* Backspace */:
                // If we are removable, remove the focused chip
                this.remove();
                // Always prevent so page navigation does not occur
                event.preventDefault();
                break;
            case " " /* Space */:
                // If we are selectable, toggle the focused chip
                if (this.selectable) {
                    this.toggleSelected(true);
                }
                // Always prevent space from scrolling the page since the list has focus
                event.preventDefault();
                break;
        }
    }
    _blur() {
        // When animations are enabled, Angular may end up removing the chip from the DOM a little
        // earlier than usual, causing it to be blurred and throwing off the logic in the chip list
        // that moves focus not the next item. To work around the issue, we defer marking the chip
        // as not focused until the next time the zone stabilizes.
        this._ngZone.onStable.pipe(take(1)).subscribe(() => {
            this._ngZone.run(() => {
                this._hasFocus = false;
                this._onBlur.next({ chip: this });
            });
        });
    }
    _dispatchSelectionChange(isUserInput = false) {
        this.selectionChange.emit({
            source: this,
            isUserInput,
            selected: this._selected,
        });
    }
}
NovoChipElement.ɵfac = function NovoChipElement_Factory(t) { return new (t || NovoChipElement)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NgZone), ɵɵdirectiveInject(Platform), ɵɵdirectiveInject(ChangeDetectorRef, 8), ɵɵdirectiveInject(DOCUMENT), ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵɵinjectAttribute('tabindex')); };
NovoChipElement.ɵdir = ɵɵdefineDirective({ type: NovoChipElement, selectors: [["novo-chip"], ["", "novo-chip", ""]], contentQueries: function NovoChipElement_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵɵcontentQuery(dirIndex, NovoChipAvatar, true);
        ɵɵcontentQuery(dirIndex, NovoChipRemove, true);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.avatar = _t.first);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.removeIcon = _t.first);
    } }, hostAttrs: ["role", "option", 1, "novo-chip", "novo-focus-indicator"], hostVars: 14, hostBindings: function NovoChipElement_HostBindings(rf, ctx) { if (rf & 1) {
        ɵɵlistener("click", function NovoChipElement_click_HostBindingHandler($event) { return ctx._handleClick($event); })("keydown", function NovoChipElement_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })("focus", function NovoChipElement_focus_HostBindingHandler() { return ctx.focus(); })("blur", function NovoChipElement_blur_HostBindingHandler() { return ctx._blur(); });
    } if (rf & 2) {
        ɵɵattribute("tabindex", ctx.disabled ? null : ctx.tabIndex)("disabled", ctx.disabled || null)("aria-disabled", ctx.disabled.toString())("aria-selected", ctx.ariaSelected);
        ɵɵclassProp("novo-chip-selected", ctx.selected)("novo-chip-with-avatar", ctx.avatar)("novo-chip-with-trailing-icon", ctx.removeIcon)("novo-chip-disabled", ctx.disabled)("_novo-animation-noopable", ctx._animationsDisabled);
    } }, inputs: { color: "color", tabIndex: "tabIndex", type: "type", selected: "selected", value: "value", selectable: "selectable", disabled: "disabled", removable: "removable" }, outputs: { selectionChange: "selectionChange", destroyed: "destroyed", removed: "removed" }, exportAs: ["novoChip"], features: [ɵɵProvidersFeature([{ provide: REMOVABLE_REF, useExisting: NovoChipElement }]), ɵɵInheritDefinitionFeature] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoChipElement, [{
        type: Directive,
        args: [{
                selector: `novo-chip, [novo-chip]`,
                inputs: ['color', 'tabIndex'],
                exportAs: 'novoChip',
                providers: [{ provide: REMOVABLE_REF, useExisting: NovoChipElement }],
                host: {
                    class: 'novo-chip novo-focus-indicator',
                    '[attr.tabindex]': 'disabled ? null : tabIndex',
                    role: 'option',
                    '[class.novo-chip-selected]': 'selected',
                    '[class.novo-chip-with-avatar]': 'avatar',
                    '[class.novo-chip-with-trailing-icon]': 'removeIcon',
                    '[class.novo-chip-disabled]': 'disabled',
                    '[class._novo-animation-noopable]': '_animationsDisabled',
                    '[attr.disabled]': 'disabled || null',
                    '[attr.aria-disabled]': 'disabled.toString()',
                    '[attr.aria-selected]': 'ariaSelected',
                    '(click)': '_handleClick($event)',
                    // '(mouseenter)': '_handleActivate($event)',
                    // '(mouseleave)': '_handleDeactivate($event)',
                    '(keydown)': '_handleKeydown($event)',
                    '(focus)': 'focus()',
                    '(blur)': '_blur()',
                },
            }]
    }], function () { return [{ type: ElementRef }, { type: NgZone }, { type: Platform }, { type: ChangeDetectorRef, decorators: [{
                type: Optional
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [ANIMATION_MODULE_TYPE]
            }] }, { type: undefined, decorators: [{
                type: Attribute,
                args: ['tabindex']
            }] }]; }, { avatar: [{
            type: ContentChild,
            args: [NovoChipAvatar]
        }], removeIcon: [{
            type: ContentChild,
            args: [NovoChipRemove]
        }], type: [{
            type: Input
        }], selected: [{
            type: Input
        }], value: [{
            type: Input
        }], selectable: [{
            type: Input
        }], disabled: [{
            type: Input
        }], removable: [{
            type: Input
        }], selectionChange: [{
            type: Output
        }], destroyed: [{
            type: Output
        }], removed: [{
            type: Output
        }] }); })();

/** Injection token to be used to override the default options for the chips module. */
const NOVO_CHIPS_DEFAULT_OPTIONS = new InjectionToken('novo-chips-default-options');

// NG2
const _c0$z = ["*"];
class NovoErrorElement {
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
    }
    ngOnInit() { }
}
NovoErrorElement.ɵfac = function NovoErrorElement_Factory(t) { return new (t || NovoErrorElement)(ɵɵdirectiveInject(DomSanitizer)); };
NovoErrorElement.ɵcmp = ɵɵdefineComponent({ type: NovoErrorElement, selectors: [["novo-error"]], ngContentSelectors: _c0$z, decls: 1, vars: 0, template: function NovoErrorElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵprojection(0);
    } }, styles: ["@-webkit-keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}[_nghost-%COMP%]{color:#da4453;display:flex;flex:1;font-size:.8em;padding-bottom:5px}"] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoErrorElement, [{
        type: Component,
        args: [{
                selector: 'novo-error',
                templateUrl: './error.html',
                styleUrls: ['./error.scss'],
            }]
    }], function () { return [{ type: DomSanitizer }]; }, null); })();

/** An interface which allows a control to work inside of a `NovoField`. */
class NovoFieldControl {
}
NovoFieldControl.ɵfac = function NovoFieldControl_Factory(t) { return new (t || NovoFieldControl)(); };
NovoFieldControl.ɵdir = ɵɵdefineDirective({ type: NovoFieldControl });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoFieldControl, [{
        type: Directive
    }], null, null); })();

// NG2
const _c0$A = ["*"];
let nextUniqueId = 0;
class NovoHintElement {
    constructor() {
        /** Whether to align the hint label at the start or end of the line. */
        this.align = 'start';
        /** Unique ID for the hint. Used for the aria-describedby on the form field control. */
        this.id = `novo-hint-${nextUniqueId++}`;
    }
    ngOnInit() { }
}
NovoHintElement.ɵfac = function NovoHintElement_Factory(t) { return new (t || NovoHintElement)(); };
NovoHintElement.ɵcmp = ɵɵdefineComponent({ type: NovoHintElement, selectors: [["novo-hint"]], hostAttrs: [1, "novo-hint"], hostVars: 4, hostBindings: function NovoHintElement_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵattribute("id", ctx.id)("align", null);
        ɵɵclassProp("novo-field-hint-end", ctx.align === "end");
    } }, inputs: { align: "align", id: "id" }, ngContentSelectors: _c0$A, decls: 1, vars: 0, template: function NovoHintElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵprojection(0);
    } }, styles: ["@-webkit-keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}@keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}[_nghost-%COMP%]{color:#4f5361;color:#999;display:inline;display:flex;flex:1 0 auto;font-size:.8rem;font-size:.9rem;font-weight:400;line-height:1.2rem;padding-bottom:.4rem;padding-top:.4rem;width:-webkit-max-content;width:-moz-max-content;width:max-content}.novo-field-hint-end[_nghost-%COMP%]{align-content:end;justify-content:flex-end;order:1;text-align:right}"] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoHintElement, [{
        type: Component,
        args: [{
                selector: 'novo-hint',
                templateUrl: './hint.html',
                styleUrls: ['./hint.scss'],
                host: {
                    class: 'novo-hint',
                    '[class.novo-field-hint-end]': 'align === "end"',
                    '[attr.id]': 'id',
                    // Remove align attribute to prevent it from interfering with layout.
                    '[attr.align]': 'null',
                },
            }]
    }], null, { align: [{
            type: Input
        }], id: [{
            type: Input
        }] }); })();

// NG2
const _c0$B = ["inputContainer"];
function NovoFieldElement_div_11_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 8);
    ɵɵprojection(1, 4);
    ɵɵelementEnd();
} }
function NovoFieldElement_div_12_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 8);
    ɵɵprojection(1, 5);
    ɵɵprojection(2, 6);
    ɵɵelementEnd();
} }
const _c1$d = [[["novo-label"]], [["", "novoPrefix", ""]], "*", [["", "novoSuffix", ""]], [["novo-error"]], [["novo-hint"]], [["novo-hint", "align", "end"]]];
const _c2$5 = ["novo-label", "[novoPrefix]", "*", "[novoSuffix]", "novo-error", "novo-hint", "novo-hint[align=end]"];
class NovoFieldPrefixDirective {
}
NovoFieldPrefixDirective.ɵfac = function NovoFieldPrefixDirective_Factory(t) { return new (t || NovoFieldPrefixDirective)(); };
NovoFieldPrefixDirective.ɵdir = ɵɵdefineDirective({ type: NovoFieldPrefixDirective, selectors: [["", "novoPrefix", ""]] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoFieldPrefixDirective, [{
        type: Directive,
        args: [{ selector: '[novoPrefix]' }]
    }], null, null); })();
class NovoFieldSuffixDirective {
}
NovoFieldSuffixDirective.ɵfac = function NovoFieldSuffixDirective_Factory(t) { return new (t || NovoFieldSuffixDirective)(); };
NovoFieldSuffixDirective.ɵdir = ɵɵdefineDirective({ type: NovoFieldSuffixDirective, selectors: [["", "novoSuffix", ""]] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoFieldSuffixDirective, [{
        type: Directive,
        args: [{ selector: '[novoSuffix]' }]
    }], null, null); })();
const NOVO_INPUT_UNDERLINED_TYPES = [
    'text',
    'date',
    'time',
    'datetime-local',
    'password',
    'email',
    'tel',
    'select',
    'textarea',
    'number',
    'novo-chip-list',
];
const NOVO_FORM_FIELD = new InjectionToken('NovoFormField');
class NovoFieldElement {
    constructor(_elementRef, _changeDetectorRef) {
        this._elementRef = _elementRef;
        this._changeDetectorRef = _changeDetectorRef;
        this._labelClicks = Subscription.EMPTY;
        this.layout = 'vertical';
        this.appearance = 'standard';
        this._destroyed = new Subject();
    }
    /**
     * Gets an ElementRef for the element that a overlay attached to the form-field should be
     * positioned relative to.
     */
    getConnectedOverlayOrigin() {
        return this._inputContainerRef || this._elementRef;
    }
    ngAfterContentInit() {
        this._validateControlChild();
        const control = this._control;
        if (control.controlType) {
            this._elementRef.nativeElement.classList.add(`novo-field-type-${control.controlType}`);
        }
        // Subscribe to changes in the child control state in order to update the form field UI.
        // tslint:disable-next-line:deprecation
        control.stateChanges.pipe(startWith(null)).subscribe(() => {
            this._changeDetectorRef.markForCheck();
        });
        // Run change detection if the value changes.
        if (control.ngControl && control.ngControl.valueChanges) {
            control.ngControl.valueChanges.pipe(takeUntil(this._destroyed)).subscribe(() => this._changeDetectorRef.markForCheck());
        }
        if (this._hasLabel()) {
            this._labelClicks = fromEvent(this._labelElement.nativeElement, 'click').subscribe(() => this._control.focus());
        }
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
        this._labelClicks.unsubscribe();
    }
    /** Throws an error if the form field's control is missing. */
    _validateControlChild() {
        if (!this._control) {
            throw new Error('Missing Novo Control');
        }
    }
    _isUnderlinedInput() {
        return NOVO_INPUT_UNDERLINED_TYPES.includes(this._control.controlType);
    }
    /** Determines whether to display hints or errors. */
    _getDisplayedMessages() {
        return this._errorElements && this._errorElements.length > 0 && this._control.errorState ? 'error' : 'hint';
    }
    /** Determines whether a class from the NgControl should be forwarded to the host element. */
    _shouldForward(prop) {
        const ngControl = this._control ? this._control.ngControl : null;
        return ngControl && ngControl[prop];
    }
    _hasLabel() {
        return !!this._labelElement;
    }
}
NovoFieldElement.ɵfac = function NovoFieldElement_Factory(t) { return new (t || NovoFieldElement)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ChangeDetectorRef)); };
NovoFieldElement.ɵcmp = ɵɵdefineComponent({ type: NovoFieldElement, selectors: [["novo-field"]], contentQueries: function NovoFieldElement_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵɵcontentQuery(dirIndex, NovoLabel, true);
        ɵɵcontentQuery(dirIndex, NovoFieldControl, true);
        ɵɵcontentQuery(dirIndex, NovoHintElement, false);
        ɵɵcontentQuery(dirIndex, NovoErrorElement, false);
        ɵɵcontentQuery(dirIndex, NovoFieldPrefixDirective, false);
        ɵɵcontentQuery(dirIndex, NovoFieldSuffixDirective, false);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx._labelElement = _t.first);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx._control = _t.first);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx._hintElements = _t);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx._errorElements = _t);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx._prefixElements = _t);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx._suffixElements = _t);
    } }, viewQuery: function NovoFieldElement_Query(rf, ctx) { if (rf & 1) {
        ɵɵviewQuery(_c0$B, true);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx._inputContainerRef = _t.first);
    } }, hostAttrs: [1, "novo-field"], hostVars: 40, hostBindings: function NovoFieldElement_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵclassProp("novo-field-layout-horizontal", ctx.layout == "horizontal")("novo-field-layout-vertical", ctx.layout == "vertical")("novo-field-appearance-standard", ctx.appearance == "standard")("novo-field-appearance-fill", ctx.appearance == "fill")("novo-field-appearance-outline", ctx.appearance == "outline")("novo-field-appearance-list", ctx.appearance == "list")("novo-field-appearance-underlined", ctx._isUnderlinedInput())("novo-field-invalid", ctx._control.errorState)("novo-field-has-label", ctx._hasLabel())("novo-field-no-label", !ctx._hasLabel())("novo-field-disabled", ctx._control.disabled)("novo-field-autofilled", ctx._control.autofilled)("novo-focused", ctx._control.focused)("ng-untouched", ctx._shouldForward("untouched"))("ng-touched", ctx._shouldForward("touched"))("ng-pristine", ctx._shouldForward("pristine"))("ng-dirty", ctx._shouldForward("dirty"))("ng-valid", ctx._shouldForward("valid"))("ng-invalid", ctx._shouldForward("invalid"))("ng-pending", ctx._shouldForward("pending"));
    } }, inputs: { layout: "layout", appearance: "appearance", width: "width" }, features: [ɵɵProvidersFeature([{ provide: NOVO_FORM_FIELD, useExisting: NovoFieldElement }])], ngContentSelectors: _c2$5, decls: 13, vars: 5, consts: [[1, "novo-field-label"], [1, "novo-field-input"], ["inputContainer", ""], [1, "novo-field-prefix"], [1, "novo-field-infix"], [1, "novo-field-suffix"], [1, "novo-field-messages", 3, "ngSwitch"], ["class", "novo-field-hint-wrapper", 4, "ngSwitchCase"], [1, "novo-field-hint-wrapper"]], template: function NovoFieldElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef(_c1$d);
        ɵɵelementStart(0, "div", 0);
        ɵɵprojection(1);
        ɵɵelementEnd();
        ɵɵelementStart(2, "div", 1, 2);
        ɵɵelementStart(4, "div", 3);
        ɵɵprojection(5, 1);
        ɵɵelementEnd();
        ɵɵelementStart(6, "div", 4);
        ɵɵprojection(7, 2);
        ɵɵelementEnd();
        ɵɵelementStart(8, "div", 5);
        ɵɵprojection(9, 3);
        ɵɵelementEnd();
        ɵɵelementEnd();
        ɵɵelementStart(10, "div", 6);
        ɵɵtemplate(11, NovoFieldElement_div_11_Template, 2, 0, "div", 7);
        ɵɵtemplate(12, NovoFieldElement_div_12_Template, 3, 0, "div", 7);
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵadvance(2);
        ɵɵstyleProp("width", ctx.width);
        ɵɵadvance(8);
        ɵɵproperty("ngSwitch", ctx._getDisplayedMessages());
        ɵɵadvance(1);
        ɵɵproperty("ngSwitchCase", "error");
        ɵɵadvance(1);
        ɵɵproperty("ngSwitchCase", "hint");
    } }, directives: [NgSwitch, NgSwitchCase], styles: ["@-webkit-keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}@keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}[_nghost-%COMP%]{display:grid;position:relative}.novo-field-layout-horizontal[_nghost-%COMP%]{grid-gap:0 1rem;grid-template-areas:\"label input\" \". messages\";grid-template-columns:150px minmax(-webkit-min-content,-webkit-max-content);grid-template-columns:150px minmax(min-content,max-content)}.novo-field-layout-vertical[_nghost-%COMP%]{grid-template-areas:\"label\" \"input\" \"messages\";grid-template-columns:minmax(-webkit-min-content,-webkit-max-content);grid-template-columns:minmax(min-content,max-content);grid-template-rows:repeat(3,minmax(-webkit-min-content,-webkit-max-content));grid-template-rows:repeat(3,minmax(min-content,max-content));width:-webkit-max-content;width:-moz-max-content;width:max-content}[_nghost-%COMP%]   .novo-field-label[_ngcontent-%COMP%]{-ms-grid-column:1;-ms-grid-row:1;align-items:center;display:grid;grid-area:label}.novo-field-type-color[_nghost-%COMP%]   .novo-field-input[_ngcontent-%COMP%]  .novo-input-element{padding:0}[_nghost-%COMP%]   .novo-field-input[_ngcontent-%COMP%]{-ms-grid-column:3;-ms-grid-row:1;display:grid;grid-area:input;grid-template-columns:minmax(auto,-webkit-max-content) 1fr minmax(auto,-webkit-max-content);grid-template-columns:minmax(auto,max-content) 1fr minmax(auto,max-content)}[_nghost-%COMP%]   .novo-field-input[_ngcontent-%COMP%]  .novo-input-element{background-color:transparent;background-image:none;border:none;border-bottom:none!important;box-shadow:none;color:inherit;display:inline;font-size:1.2rem;font-weight:400;line-height:1.5rem;padding:.4rem .2rem}[_nghost-%COMP%]   .novo-field-input[_ngcontent-%COMP%]  .novo-input-element:focus{outline:none}[_nghost-%COMP%]   .novo-field-input[_ngcontent-%COMP%]  .novo-radio-group{padding:.5rem 0}[_nghost-%COMP%]   .novo-field-input[_ngcontent-%COMP%]   .novo-field-infix[_ngcontent-%COMP%], [_nghost-%COMP%]   .novo-field-input[_ngcontent-%COMP%]   .novo-field-prefix[_ngcontent-%COMP%]{align-items:center;display:flex}[_nghost-%COMP%]   .novo-field-input[_ngcontent-%COMP%]   .novo-field-infix[_ngcontent-%COMP%]   select[_ngcontent-%COMP%]{width:100%}[_nghost-%COMP%]   .novo-field-input[_ngcontent-%COMP%]   .novo-field-suffix[_ngcontent-%COMP%]{align-items:center;display:flex}[_nghost-%COMP%]   .novo-field-messages[_ngcontent-%COMP%]{-ms-grid-column:3;-ms-grid-row:3;display:grid;grid-area:messages}[_nghost-%COMP%]   .novo-field-hint-wrapper[_ngcontent-%COMP%]{display:flex}", "@-webkit-keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}@keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}.novo-field-appearance-standard.novo-field-appearance-underlined[_nghost-%COMP%]   .novo-field-input[_ngcontent-%COMP%]{border-bottom:1px solid #afb9c0!important}.novo-field-appearance-standard.novo-field-appearance-underlined[_nghost-%COMP%]:not(.novo-focused):hover   .novo-field-input[_ngcontent-%COMP%]{border-bottom:1px solid #3d464d!important}.novo-field-appearance-standard.novo-field-appearance-underlined.novo-focused[_nghost-%COMP%]   .novo-field-input[_ngcontent-%COMP%]{border-bottom:1px solid #4a89dc!important}.novo-field-appearance-standard.novo-field-appearance-underlined.novo-field-invalid[_nghost-%COMP%]   .novo-field-input[_ngcontent-%COMP%]{border-bottom:1px solid #da4453!important}", "@-webkit-keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}@keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}.novo-field-appearance-fill.novo-field-layout-horizontal[_nghost-%COMP%]   .novo-field-input[_ngcontent-%COMP%], .novo-field-appearance-fill.novo-field-layout-vertical[_nghost-%COMP%]{background:#f4f4f4}.novo-field-appearance-fill.novo-field-layout-vertical[_nghost-%COMP%]   .novo-field-label[_ngcontent-%COMP%]{padding-left:.5em;padding-right:.5em;padding-top:.5em}.novo-field-appearance-fill.novo-field-layout-vertical[_nghost-%COMP%]   .novo-field-input[_ngcontent-%COMP%]{padding:0 .5em}.novo-field-appearance-fill.novo-field-appearance-underlined[_nghost-%COMP%]   .novo-field-input[_ngcontent-%COMP%]{border-bottom:1px solid #afb9c0!important}.novo-field-appearance-fill.novo-field-appearance-underlined[_nghost-%COMP%]:not(.novo-focused):hover   .novo-field-input[_ngcontent-%COMP%]{border-bottom:1px solid #3d464d!important}.novo-field-appearance-fill.novo-field-appearance-underlined.novo-focused[_nghost-%COMP%]   .novo-field-label[_ngcontent-%COMP%]{color:#4a89dc!important}.novo-field-appearance-fill.novo-field-appearance-underlined.novo-focused[_nghost-%COMP%]   .novo-field-input[_ngcontent-%COMP%]{border-bottom:1px solid #4a89dc!important}.novo-field-appearance-fill.novo-field-appearance-underlined.novo-field-invalid[_nghost-%COMP%]   .novo-field-input[_ngcontent-%COMP%]{border-bottom:1px solid #da4453!important}", "@-webkit-keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}@keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}.novo-field-appearance-outline[_nghost-%COMP%]{border:1px solid #afb9c0!important;border-radius:.4rem;padding:.5rem}.novo-field-appearance-outline.novo-field-layout-vertical[_nghost-%COMP%]   .novo-field-label[_ngcontent-%COMP%]{background:#fff;margin-left:.5rem;margin-top:-1.5rem;padding:.5rem;width:-webkit-max-content;width:-moz-max-content;width:max-content}.novo-field-appearance-outline[_nghost-%COMP%]:not(.novo-focused):hover{border:1px solid #3d464d!important}.novo-field-appearance-outline.novo-focused[_nghost-%COMP%]{border:1px solid #4a89dc!important}.novo-field-appearance-outline.novo-field-invalid[_nghost-%COMP%]{border:1px solid #da4453!important}", "@-webkit-keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}@keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}.novo-field-appearance-list.novo-field-layout-horizontal[_nghost-%COMP%]{border-bottom:1px solid #f4f4f4!important;min-height:4.2rem;padding:.5rem 1.2rem}.novo-field-appearance-list.novo-field-layout-horizontal[_nghost-%COMP%]   .novo-field-label[_ngcontent-%COMP%]{align-items:start;margin-top:.9rem}.novo-field-appearance-list.novo-field-layout-horizontal.novo-field-no-label[_nghost-%COMP%]{gap:0;grid-template-columns:0 minmax(300px,600px)}.novo-field-appearance-list.novo-field-layout-horizontal.novo-field-appearance-underlined[_nghost-%COMP%]:not(.novo-focused):hover   .novo-field-input[_ngcontent-%COMP%]{background:rgba(74,137,220,.15)}.novo-field-appearance-list.novo-field-layout-horizontal.novo-field-appearance-underlined.novo-focused[_nghost-%COMP%]   .novo-field-label[_ngcontent-%COMP%]{color:#4a89dc!important}.novo-field-appearance-list.novo-field-layout-horizontal.novo-field-appearance-underlined.novo-field-invalid[_nghost-%COMP%]   .novo-field-label[_ngcontent-%COMP%]{color:#da4453!important}"], changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoFieldElement, [{
        type: Component,
        args: [{
                selector: 'novo-field',
                templateUrl: './field.html',
                styleUrls: ['./field.scss', './field-standard.scss', './field-fill.scss', './field-outline.scss', './field-list.scss'],
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: {
                    class: 'novo-field',
                    '[class.novo-field-layout-horizontal]': 'layout=="horizontal"',
                    '[class.novo-field-layout-vertical]': 'layout=="vertical"',
                    '[class.novo-field-appearance-standard]': 'appearance == "standard"',
                    '[class.novo-field-appearance-fill]': 'appearance == "fill"',
                    '[class.novo-field-appearance-outline]': 'appearance == "outline"',
                    '[class.novo-field-appearance-list]': 'appearance == "list"',
                    '[class.novo-field-appearance-underlined]': '_isUnderlinedInput()',
                    '[class.novo-field-invalid]': '_control.errorState',
                    '[class.novo-field-has-label]': '_hasLabel()',
                    '[class.novo-field-no-label]': '!_hasLabel()',
                    // '[class.novo-field-hide-placeholder]': '_hideControlPlaceholder()',
                    '[class.novo-field-disabled]': '_control.disabled',
                    '[class.novo-field-autofilled]': '_control.autofilled',
                    '[class.novo-focused]': '_control.focused',
                    // '[class.novo-accent]': 'color == "accent"',
                    // '[class.novo-warn]': 'color == "warn"',
                    '[class.ng-untouched]': '_shouldForward("untouched")',
                    '[class.ng-touched]': '_shouldForward("touched")',
                    '[class.ng-pristine]': '_shouldForward("pristine")',
                    '[class.ng-dirty]': '_shouldForward("dirty")',
                    '[class.ng-valid]': '_shouldForward("valid")',
                    '[class.ng-invalid]': '_shouldForward("invalid")',
                    '[class.ng-pending]': '_shouldForward("pending")',
                },
                providers: [{ provide: NOVO_FORM_FIELD, useExisting: NovoFieldElement }],
            }]
    }], function () { return [{ type: ElementRef }, { type: ChangeDetectorRef }]; }, { _inputContainerRef: [{
            type: ViewChild,
            args: ['inputContainer']
        }], _labelElement: [{
            type: ContentChild,
            args: [NovoLabel]
        }], _hintElements: [{
            type: ContentChildren,
            args: [NovoHintElement]
        }], _errorElements: [{
            type: ContentChildren,
            args: [NovoErrorElement]
        }], _prefixElements: [{
            type: ContentChildren,
            args: [NovoFieldPrefixDirective]
        }], _suffixElements: [{
            type: ContentChildren,
            args: [NovoFieldSuffixDirective]
        }], _control: [{
            type: ContentChild,
            args: [NovoFieldControl]
        }], layout: [{
            type: Input
        }], appearance: [{
            type: Input
        }], width: [{
            type: Input
        }] }); })();

const _c0$C = ["*"];
/** Event object that is emitted when an autocomplete option is selected. */
class NovoOptionSelectedEvent {
    constructor(
    /** Reference to the autocomplete panel that emitted the event. */
    source, 
    /** Option that was selected. */
    option) {
        this.source = source;
        this.option = option;
    }
}
// Boilerplate for applying mixins
class NovoAutocompleteBase {
    constructor() { }
}
const NovoAutocompleteMixins = mixinOverlay(mixinDisabled(NovoAutocompleteBase));
class NovoAutocompleteElement extends NovoAutocompleteMixins {
    constructor(_elementRef, cdr, defaultTabIndex, _formField) {
        super();
        this._elementRef = _elementRef;
        this.cdr = cdr;
        this._formField = _formField;
        this._stateChanges = Subscription.EMPTY;
        this._activeOptionChanges = Subscription.EMPTY;
        this._selectedOptionChanges = Subscription.EMPTY;
        this._keyDownChanges = Subscription.EMPTY;
        /** Event that is emitted whenever an option from the list is selected. */
        this.optionSelected = new EventEmitter();
        /** Emits whenever an option is activated using the keyboard. */
        this.optionActivated = new EventEmitter();
        /** Function that maps an option's control value to its display value in the trigger. */
        this.displayWith = null;
        const parsedTabIndex = Number(defaultTabIndex);
        this.tabIndex = parsedTabIndex || parsedTabIndex === 0 ? parsedTabIndex : null;
    }
    /** Whether the toggle button is disabled. */
    get disabled() {
        var _a;
        if (this._disabled === undefined && ((_a = this._formField) === null || _a === void 0 ? void 0 : _a._control)) {
            return this._formField._control.disabled;
        }
        return !!this._disabled;
    }
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
    }
    ngOnChanges(changes) {
        this._watchStateChanges();
        this._watchSelectionEvents();
    }
    ngOnDestroy() {
        this._stateChanges.unsubscribe();
        this._activeOptionChanges.unsubscribe();
        this._selectedOptionChanges.unsubscribe();
        this._keyDownChanges.unsubscribe();
    }
    ngAfterContentInit() {
        this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();
        this._activeOptionChanges = this._keyManager.change.subscribe((index) => {
            this.optionActivated.emit({ source: this, option: this.options.toArray()[index] || null });
        });
        this.element = this._formField.getConnectedOverlayOrigin() || this._elementRef;
        this._keyDownChanges = fromEvent(this.element.nativeElement, 'keydown').subscribe((event) => this._handleKeydown(event));
        this.options.changes.subscribe(() => {
            this._watchStateChanges();
            this._watchSelectionEvents();
        });
    }
    ngAfterViewInit() {
        this._watchStateChanges();
        this._watchSelectionEvents();
    }
    checkPanel() {
        if (this._formField._control.focused && this.element) {
            this.openPanel();
        }
    }
    _setTriggerValue(value) {
        const toDisplay = this.displayWith ? this.displayWith(value) : value;
        // Simply falling back to an empty string if the display value is falsy does not work properly.
        // The display value can also be the number zero and shouldn't fall back to an empty string.
        const inputValue = toDisplay != null ? toDisplay : '';
        // If it's used within a `NovoField`, we should set it through the property so it can go
        // through change detection.
        if (this._formField) {
            this._formField._control.value = inputValue;
        }
        else {
            // this._element.nativeElement.value = inputValue;
            console.warn(`AutoComplete only intended to be used within a NovoField`);
        }
        this._previousValue = inputValue;
    }
    /**
     * Clear any previous selected option and emit a selection change event for this option
     */
    _clearPreviousSelectedOption(skip) {
        this.options.forEach((option) => {
            if (option !== skip && option.selected) {
                option.deselect();
            }
        });
    }
    /** Emits the `select` event. */
    _emitSelectEvent(option) {
        const event = new NovoOptionSelectedEvent(this, option);
        this.optionSelected.emit(event);
    }
    /**
     * This method closes the panel, and if a value is specified, also sets the associated
     * control to that value. It will also mark the control as dirty if this interaction
     * stemmed from the user.
     */
    _setValueAndClose(event) {
        if (event && event.source) {
            this._clearPreviousSelectedOption(event.source);
            this._setTriggerValue(event.source.value);
            // this._onChange(event.source.value);
            // this._element.nativeElement.focus();
            this._formField._control.focus();
            this._emitSelectEvent(event.source);
            this._watchSelectionEvents();
        }
        this.closePanel();
    }
    _watchSelectionEvents() {
        const selectionEvents = this.options ? merge(...this.options.map((option) => option.onSelectionChange)) : of();
        this._selectedOptionChanges.unsubscribe();
        this._selectedOptionChanges = selectionEvents.pipe(take(1)).subscribe((evt) => {
            this._setValueAndClose(evt);
        });
    }
    _watchStateChanges() {
        const inputStateChanged = this._formField && this._formField._control ? this._formField._control.stateChanges : of();
        this._stateChanges.unsubscribe();
        this._stateChanges = merge(inputStateChanged).subscribe(() => {
            this.checkPanel();
            this.cdr.markForCheck();
        });
    }
    /** The currently active option, coerced to MatOption type. */
    get activeOption() {
        if (this._keyManager) {
            return this._keyManager.activeItem;
        }
        return null;
    }
    _handleKeydown(event) {
        const key = event.key;
        // Prevent the default action on all escape key presses. This is here primarily to bring IE
        // in line with other browsers. By default, pressing escape on IE will cause it to revert
        // the input value to the one that it had on focus, however it won't dispatch any events
        // which means that the model value will be out of sync with the view.
        if (key === "Escape" /* Escape */ && !hasModifierKey(event)) {
            event.preventDefault();
        }
        if (this.activeOption && key === "Enter" /* Enter */ && this.panelOpen) {
            this.activeOption._selectViaInteraction();
            // this._resetActiveItem();
            event.preventDefault();
        }
        else {
            const prevActiveItem = this._keyManager.activeItem;
            const isArrowKey = key === "ArrowUp" /* ArrowUp */ || key === "ArrowDown" /* ArrowDown */;
            if (this.panelOpen || key === "Tab" /* Tab */) {
                this._keyManager.onKeydown(event);
            }
            else if (isArrowKey && !this.overlay.panelOpen) {
                this.openPanel();
            }
            // if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {
            //   this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);
            // }
        }
    }
}
NovoAutocompleteElement.ɵfac = function NovoAutocompleteElement_Factory(t) { return new (t || NovoAutocompleteElement)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵinjectAttribute('tabindex'), ɵɵdirectiveInject(NOVO_FORM_FIELD, 8)); };
NovoAutocompleteElement.ɵcmp = ɵɵdefineComponent({ type: NovoAutocompleteElement, selectors: [["novo-autocomplete"]], contentQueries: function NovoAutocompleteElement_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵɵcontentQuery(dirIndex, NovoOptgroup, true);
        ɵɵcontentQuery(dirIndex, NovoOption, true);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.optionGroups = _t);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.options = _t);
    } }, viewQuery: function NovoAutocompleteElement_Query(rf, ctx) { if (rf & 1) {
        ɵɵviewQuery(NovoOverlayTemplateComponent, true);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.overlay = _t.first);
    } }, hostAttrs: [1, "novo-autocomplete"], hostVars: 1, hostBindings: function NovoAutocompleteElement_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵattribute("tabindex", ctx.disabled ? null : 0 - 1);
    } }, inputs: { tabIndex: "tabIndex", displayWith: "displayWith", ariaLabel: ["aria-label", "ariaLabel"], disabled: "disabled" }, outputs: { optionSelected: "optionSelected", optionActivated: "optionActivated" }, exportAs: ["novoAutocomplete"], features: [ɵɵProvidersFeature([{ provide: NOVO_OPTION_PARENT_COMPONENT, useExisting: NovoAutocompleteElement }]), ɵɵInheritDefinitionFeature, ɵɵNgOnChangesFeature], ngContentSelectors: _c0$C, decls: 3, vars: 1, consts: [["position", "above-below", 3, "parent"], ["cdk-scrollable", "", 1, "novo-autocomplete-options"]], template: function NovoAutocompleteElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵelementStart(0, "novo-overlay-template", 0);
        ɵɵelementStart(1, "div", 1);
        ɵɵprojection(2);
        ɵɵelementEnd();
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵproperty("parent", ctx.element);
    } }, directives: [NovoOverlayTemplateComponent, CdkScrollable], styles: ["@-webkit-keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}@keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}.novo-autocomplete-options{-webkit-padding-start:0!important;background-color:#fff;box-shadow:0 -1px 3px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);cursor:default;list-style:none;padding-inline-start:0!important}"], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoAutocompleteElement, [{
        type: Component,
        args: [{
                selector: 'novo-autocomplete',
                templateUrl: 'autocomplete.component.html',
                styleUrls: ['autocomplete.component.scss'],
                host: {
                    class: 'novo-autocomplete',
                    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the
                    // consumer may have provided, while still being able to receive focus.
                    '[attr.tabindex]': 'disabled ? null : -1',
                },
                providers: [{ provide: NOVO_OPTION_PARENT_COMPONENT, useExisting: NovoAutocompleteElement }],
                exportAs: 'novoAutocomplete',
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: ElementRef }, { type: ChangeDetectorRef }, { type: undefined, decorators: [{
                type: Attribute,
                args: ['tabindex']
            }] }, { type: NovoFieldElement, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [NOVO_FORM_FIELD]
            }] }]; }, { optionGroups: [{
            type: ContentChildren,
            args: [NovoOptgroup, { descendants: true }]
        }], options: [{
            type: ContentChildren,
            args: [NovoOption, { descendants: true }]
        }], optionSelected: [{
            type: Output
        }], optionActivated: [{
            type: Output
        }], tabIndex: [{
            type: Input
        }], displayWith: [{
            type: Input
        }], ariaLabel: [{
            type: Input,
            args: ['aria-label']
        }], disabled: [{
            type: Input
        }], overlay: [{
            type: ViewChild,
            args: [NovoOverlayTemplateComponent]
        }] }); })();

const _c0$D = ["*"];
class NovoFieldsElement {
    constructor() {
        this._layout = 'horizontal';
        this._appearance = 'standard';
        this.fullWidth = false;
    }
    get layout() {
        return this._layout;
    }
    set layout(value) {
        if (this._layout !== value) {
            this._layout = value;
            this._updateFieldLayout();
        }
    }
    get appearance() {
        return this._appearance;
    }
    set appearance(value) {
        if (this._appearance !== value) {
            this._appearance = value;
            this._updateFieldAppearance();
        }
    }
    ngAfterContentInit() {
        this._updateFieldLayout();
        this._updateFieldAppearance();
    }
    _updateFieldLayout() {
        if (this._fields) {
            this._fields.forEach((field) => {
                field.layout = this.layout;
            });
        }
    }
    _updateFieldAppearance() {
        if (this._fields) {
            this._fields.forEach((field) => {
                field.appearance = this.appearance;
            });
        }
    }
}
NovoFieldsElement.ɵfac = function NovoFieldsElement_Factory(t) { return new (t || NovoFieldsElement)(); };
NovoFieldsElement.ɵcmp = ɵɵdefineComponent({ type: NovoFieldsElement, selectors: [["novo-fields"]], contentQueries: function NovoFieldsElement_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵɵcontentQuery(dirIndex, NovoFieldElement, false);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx._fields = _t);
    } }, hostAttrs: [1, "novo-field"], hostVars: 10, hostBindings: function NovoFieldsElement_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵclassProp("novo-fieldset-appearance-standard", ctx.appearance == "standard")("novo-fieldset-appearance-fill", ctx.appearance == "fill")("novo-fieldset-appearance-outline", ctx.appearance == "outline")("novo-fieldset-appearance-list", ctx.appearance == "list")("full-width", ctx.fullWidth);
    } }, inputs: { layout: "layout", appearance: "appearance", fullWidth: "fullWidth" }, ngContentSelectors: _c0$D, decls: 1, vars: 0, template: function NovoFieldsElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵprojection(0);
    } }, styles: ["@-webkit-keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}[_nghost-%COMP%]{display:grid;grid-gap:1.2rem}.novo-fieldset-appearance-list[_nghost-%COMP%]{grid-gap:0}.full-width[_nghost-%COMP%]  novo-field.novo-field-layout-vertical{grid-template-columns:minmax(300px,1fr);width:-webkit-fill-available}.full-width[_nghost-%COMP%]  novo-field.novo-field-layout-vertical .novo-input-element{width:100%}.full-width[_nghost-%COMP%]  novo-field.novo-field-layout-horizontal{grid-template-columns:150px minmax(150px,1fr)}.full-width[_nghost-%COMP%]  novo-field.novo-field-layout-horizontal .novo-input-element{width:100%}"], changeDetection: 0 });
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoFieldsElement.prototype, "fullWidth", void 0);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoFieldsElement, [{
        type: Component,
        args: [{
                selector: 'novo-fields',
                templateUrl: './fieldset.html',
                styleUrls: ['./fieldset.scss'],
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: {
                    class: 'novo-field',
                    '[class.novo-fieldset-appearance-standard]': 'appearance == "standard"',
                    '[class.novo-fieldset-appearance-fill]': 'appearance == "fill"',
                    '[class.novo-fieldset-appearance-outline]': 'appearance == "outline"',
                    '[class.novo-fieldset-appearance-list]': 'appearance == "list"',
                },
            }]
    }], null, { _fields: [{
            type: ContentChildren,
            args: [NovoFieldElement]
        }], layout: [{
            type: Input
        }], appearance: [{
            type: Input
        }], fullWidth: [{
            type: HostBinding,
            args: ['class.full-width']
        }, {
            type: Input
        }] }); })();

const NOVO_INPUT_FORMAT = new InjectionToken('NovoInputFormat');

const DATEFORMAT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoDateFormatDirective),
    multi: true,
};
var DATE_FORMATS;
(function (DATE_FORMATS) {
    DATE_FORMATS["DATE"] = "date";
    DATE_FORMATS["ISO8601"] = "iso8601";
    DATE_FORMATS["STRING"] = "string";
})(DATE_FORMATS || (DATE_FORMATS = {}));
class NovoDateFormatDirective extends IMaskDirective {
    constructor(_element, _renderer, _factory, _compositionMode, labels) {
        super(_element, _renderer, _factory, _compositionMode);
        this._element = _element;
        this.labels = labels;
        this.valueChange = new EventEmitter();
        this.dateFormat = DATE_FORMATS.DATE;
        const dateFormat = this.labels.dateFormat.toUpperCase();
        this.unmask = 'typed';
        this.imask = {
            mask: Date,
            pattern: 'm{/}`d{/}`Y',
            overwrite: true,
            autofix: true,
            lazy: false,
            min: new Date(1970, 0, 1),
            max: new Date(2030, 0, 1),
            prepare: (str) => str.toUpperCase(),
            format: (date) => this.formatValue(date),
            parse: (str) => {
                return parse(str);
            },
            blocks: {
                d: {
                    mask: MaskedRange,
                    placeholderChar: 'D',
                    from: 1,
                    to: 31,
                    maxLength: 2,
                },
                m: {
                    mask: MaskedRange,
                    placeholderChar: 'M',
                    from: 1,
                    to: 12,
                    maxLength: 2,
                },
                Y: {
                    mask: MaskedRange,
                    placeholderChar: 'Y',
                    from: 1900,
                    to: 9999,
                },
            },
        };
    }
    normalize(value) {
        const pattern = this.labels.dateFormat.toUpperCase();
        return format(parse(value), pattern);
    }
    formatAsIso(date) {
        if (date && isValid(date)) {
            return date.toISOString().slice(0, 10);
        }
        return null;
    }
    formatValue(value) {
        // Use `parse` because it keeps dates in locale
        const date = parse(value);
        if (isValid(date)) {
            const dateFormat = this.labels.dateFormat.toUpperCase();
            return format(date, dateFormat);
        }
        return this.normalize(value);
    }
    writeValue(value) {
        super.writeValue(this.formatValue(value));
    }
    registerOnChange(fn) {
        this.onChange = (date) => {
            let formatted = date;
            switch (this.dateFormat) {
                case DATE_FORMATS.ISO8601:
                    formatted = this.formatAsIso(date);
                    break;
                case DATE_FORMATS.STRING:
                    formatted = this.formatValue(date);
                    break;
                default:
                    formatted = date;
                    break;
            }
            this.valueChange.emit(date);
            fn(formatted);
        };
    }
}
NovoDateFormatDirective.ɵfac = function NovoDateFormatDirective_Factory(t) { return new (t || NovoDateFormatDirective)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(IMaskFactory), ɵɵdirectiveInject(COMPOSITION_BUFFER_MODE, 8), ɵɵdirectiveInject(NovoLabelService)); };
NovoDateFormatDirective.ɵdir = ɵɵdefineDirective({ type: NovoDateFormatDirective, selectors: [["input", "dateFormat", ""]], hostAttrs: [1, "novo-date-format"], inputs: { dateFormat: "dateFormat" }, features: [ɵɵProvidersFeature([DATEFORMAT_VALUE_ACCESSOR, { provide: NOVO_INPUT_FORMAT, useExisting: NovoDateFormatDirective }]), ɵɵInheritDefinitionFeature] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDateFormatDirective, [{
        type: Directive,
        args: [{
                selector: 'input[dateFormat]',
                host: {
                    class: 'novo-date-format',
                },
                providers: [DATEFORMAT_VALUE_ACCESSOR, { provide: NOVO_INPUT_FORMAT, useExisting: NovoDateFormatDirective }],
            }]
    }], function () { return [{ type: ElementRef }, { type: Renderer2 }, { type: IMaskFactory }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [COMPOSITION_BUFFER_MODE]
            }] }, { type: NovoLabelService }]; }, { dateFormat: [{
            type: Input
        }] }); })();

const TIMEFORMAT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoTimeFormatDirective),
    multi: true,
};
var TIME_FORMATS;
(function (TIME_FORMATS) {
    TIME_FORMATS["DATE"] = "date";
    TIME_FORMATS["ISO8601"] = "iso8601";
    TIME_FORMATS["STRING"] = "string";
})(TIME_FORMATS || (TIME_FORMATS = {}));
class NovoTimeFormatDirective extends IMaskDirective {
    constructor(_element, _renderer, _factory, _compositionMode, labels, cdr) {
        super(_element, _renderer, _factory, _compositionMode);
        this._element = _element;
        this.labels = labels;
        this.cdr = cdr;
        this.valueChange = new EventEmitter();
        this.military = false;
        this.timeFormat = TIME_FORMATS.DATE;
        const pattern = this.military ? 'HH:mm' : 'hh:mm A';
        const amFormat = this.labels.timeFormatAM.toUpperCase();
        const pmFormat = this.labels.timeFormatPM.toUpperCase();
        this.unmask = 'typed';
        this.imask = {
            mask: Date,
            pattern: this.military ? 'HH:mm' : 'hh:mm aa',
            overwrite: true,
            autofix: true,
            lazy: false,
            min: new Date(1970, 0, 1),
            max: new Date(2030, 0, 1),
            prepare: (str) => str.toUpperCase(),
            format: (value) => this.formatValue(value),
            parse: (str) => {
                const time = this.convertTime12to24(str);
                return parse(`${format(Date.now(), 'YYYY-MM-DD')}T${time}`);
            },
            blocks: {
                HH: {
                    mask: MaskedRange,
                    placeholderChar: '-',
                    maxLength: 2,
                    from: 0,
                    to: 23,
                },
                hh: {
                    mask: MaskedRange,
                    placeholderChar: '-',
                    maxLength: 2,
                    from: 1,
                    to: 12,
                },
                mm: {
                    mask: MaskedRange,
                    placeholderChar: '-',
                    maxLength: 2,
                    from: 0,
                    to: 59,
                },
                aa: {
                    mask: MaskedEnum,
                    placeholderChar: '-',
                    enum: ['AM', 'PM', 'am', 'pm', amFormat, pmFormat],
                },
            },
        };
    }
    _checkInput(event) {
        if (document.activeElement === event.target) {
            const text = event.target.value;
            if ((this.military && Number(text[0]) > 2) || (!this.military && Number(text[0]) > 1)) {
                event.preventDefault();
                const value = `0${text}`;
                event.target.value = value;
                // this.onChange(value);
            }
            if (!this.military) {
                const input = text.substr(5, 4).replace(/\-/g, '').trim().slice(0, 2);
                const timePeriod = this.imask.blocks.aa.enum.find((it) => it[0] === input[0]);
                if (timePeriod) {
                    event.target.value = `${text.slice(0, 5)} ${timePeriod}`;
                }
            }
        }
    }
    _handleBlur(event) {
        const text = event.target.value;
        if (!this.military) {
            const input = text.substr(5, 4).replace(/\-/g, '').trim().slice(0, 2);
            const timePeriod = this.imask.blocks.aa.enum.find((it) => it[0] === input[0]);
            if (!timePeriod) {
                event.target.value = `${text.slice(0, 5)} --`;
            }
        }
    }
    _handleKeydown(event) {
        const input = event.target;
        if (event.key === "Backspace" /* Backspace */ && input.selectionStart === input.value.length) {
            event.target.value = `${input.value.slice(0, 5)} --`;
        }
    }
    normalize(value) {
        if (this.military) {
            return this.convertTime12to24(value);
        }
        return this.convertTime24to12(value);
    }
    formatValue(value) {
        const date = parse(value);
        if (isValid(date)) {
            const pattern = this.military ? 'HH:mm' : 'hh:mm A';
            return format(date, pattern);
        }
        return this.normalize(value);
    }
    formatAsIso(date) {
        if (date && isValid(date)) {
            return format(date, 'HH:mm');
        }
        return null;
    }
    convertTime12to24(time12h) {
        const pmFormat = this.labels.timeFormatPM.toUpperCase();
        const [time, meridian] = time12h.split(' ');
        let [hours, minutes] = time.split(':');
        if (hours === '12') {
            hours = '00';
        }
        if (['PM', pmFormat].includes(meridian)) {
            hours = `${parseInt(hours, 10) + 12}`.padStart(2, '0');
        }
        return `${hours}:${minutes}`;
    }
    convertTime24to12(time24h) {
        if (time24h.length === 5) {
            const date = parse(`2020-01-01T${time24h}`);
            return format(date, 'hh:mm A');
        }
        return time24h;
    }
    writeValue(value) {
        super.writeValue(this.formatValue(value));
    }
    registerOnChange(fn) {
        this.onChange = (date) => {
            let formatted = date;
            switch (this.timeFormat) {
                case TIME_FORMATS.ISO8601:
                    formatted = this.formatAsIso(date);
                    break;
                case TIME_FORMATS.STRING:
                    formatted = this.formatValue(date);
                    break;
                default:
                    formatted = date;
                    break;
            }
            this.valueChange.emit(date);
            fn(formatted);
        };
    }
}
NovoTimeFormatDirective.ɵfac = function NovoTimeFormatDirective_Factory(t) { return new (t || NovoTimeFormatDirective)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(IMaskFactory), ɵɵdirectiveInject(COMPOSITION_BUFFER_MODE, 8), ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(ChangeDetectorRef)); };
NovoTimeFormatDirective.ɵdir = ɵɵdefineDirective({ type: NovoTimeFormatDirective, selectors: [["input", "timeFormat", ""]], hostAttrs: [1, "novo-time-format"], hostBindings: function NovoTimeFormatDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵɵlistener("input", function NovoTimeFormatDirective_input_HostBindingHandler($event) { return ctx._checkInput($event); })("blur", function NovoTimeFormatDirective_blur_HostBindingHandler($event) { return ctx._handleBlur($event); })("keydown", function NovoTimeFormatDirective_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); });
    } }, inputs: { military: "military", timeFormat: "timeFormat" }, features: [ɵɵProvidersFeature([TIMEFORMAT_VALUE_ACCESSOR, { provide: NOVO_INPUT_FORMAT, useExisting: NovoTimeFormatDirective }]), ɵɵInheritDefinitionFeature] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTimeFormatDirective, [{
        type: Directive,
        args: [{
                selector: 'input[timeFormat]',
                host: {
                    class: 'novo-time-format',
                    '(input)': '_checkInput($event)',
                    '(blur)': '_handleBlur($event)',
                    '(keydown)': '_handleKeydown($event)',
                },
                providers: [TIMEFORMAT_VALUE_ACCESSOR, { provide: NOVO_INPUT_FORMAT, useExisting: NovoTimeFormatDirective }],
            }]
    }], function () { return [{ type: ElementRef }, { type: Renderer2 }, { type: IMaskFactory }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [COMPOSITION_BUFFER_MODE]
            }] }, { type: NovoLabelService }, { type: ChangeDetectorRef }]; }, { military: [{
            type: Input
        }], timeFormat: [{
            type: Input
        }] }); })();

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * This token is used to inject the object whose value should be set into `NovoInput`. If none is
 * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide
 * themselves for this token, in order to make `NovoInput` delegate the getting and setting of the
 * value to them.
 */
const NOVO_INPUT_VALUE_ACCESSOR = new InjectionToken('NOVO_INPUT_VALUE_ACCESSOR');
// Invalid input type. Using one of these will throw an NovoInputUnsupportedTypeError.
const NOVO_INPUT_INVALID_TYPES = ['button', 'checkbox', 'file', 'hidden', 'image', 'radio', 'reset', 'submit'];
let nextUniqueId$1 = 0;
// Boilerplate for applying mixins to NovoInput.
class NovoInputBase {
    constructor(_parentForm, _parentFormGroup, 
    /** @docs-private */
    ngControl) {
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        this.ngControl = ngControl;
    }
}
/** Directive that allows a native input to work inside a `NovoField`. */
// tslint:disable: no-conflicting-lifecycle member-ordering
class NovoInput extends NovoInputBase {
    constructor(_elementRef, _platform, 
    /** @docs-private */
    ngControl, _parentForm, _parentFormGroup, inputValueAccessor, _autofillMonitor, ngZone) {
        super(_parentForm, _parentFormGroup, ngControl);
        this._elementRef = _elementRef;
        this._platform = _platform;
        this.ngControl = ngControl;
        this._autofillMonitor = _autofillMonitor;
        this._uid = `novo-input-${nextUniqueId$1++}`;
        /**
         * Implemented as part of NovoFieldControl.
         * @docs-private
         */
        this.focused = false;
        this.errorState = false;
        /**
         * Implemented as part of NovoFieldControl.
         * @docs-private
         */
        this.stateChanges = new Subject();
        /**
         * Implemented as part of NovoFieldControl.
         * @docs-private
         */
        this.controlType = 'novo-input';
        /**
         * Implemented as part of NovoFieldControl.
         * @docs-private
         */
        this.autofilled = false;
        this._disabled = false;
        this._required = false;
        this._type = 'text';
        this._readonly = false;
        this._neverEmptyInputTypes = ['date', 'datetime', 'datetime-local', 'month', 'time', 'week'].filter((t) => getSupportedInputTypes().has(t));
        const element = this._elementRef.nativeElement;
        const nodeName = element.nodeName.toLowerCase();
        // If no input value accessor was explicitly specified, use the element as the input value
        // accessor.
        this._inputValueAccessor = inputValueAccessor || element;
        this._previousNativeValue = this.value;
        // Force setter to be called in case id was not specified.
        this.id = this.id;
        // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete
        // key. In order to get around this we need to "jiggle" the caret loose. Since this bug only
        // exists on iOS, we only bother to install the listener on iOS.
        if (_platform.IOS) {
            ngZone.runOutsideAngular(() => {
                _elementRef.nativeElement.addEventListener('keyup', (event) => {
                    const el = event.target;
                    if (!el.value && !el.selectionStart && !el.selectionEnd) {
                        // Note: Just setting `0, 0` doesn't fix the issue. Setting
                        // `1, 1` fixes it for the first time that you type text and
                        // then hold delete. Toggling to `1, 1` and then back to
                        // `0, 0` seems to completely fix it.
                        el.setSelectionRange(1, 1);
                        el.setSelectionRange(0, 0);
                    }
                });
            });
        }
        this._isServer = !this._platform.isBrowser;
        this._isNativeSelect = nodeName === 'select';
        this._isTextarea = nodeName === 'textarea';
        this.controlType = this._elementRef.nativeElement.type;
        if (this._isNativeSelect) {
            this.controlType = element.multiple ? 'select-multiple' : 'select';
        }
        else if (this._isTextarea) {
            this.controlType = 'textarea';
        }
    }
    /**
     * Implemented as part of NovoFieldControl.
     * @docs-private
     */
    get disabled() {
        if (this.ngControl && this.ngControl.disabled !== null) {
            return this.ngControl.disabled;
        }
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
        // Browsers may not fire the blur event if the input is disabled too quickly.
        // Reset from here to ensure that the element doesn't become stuck.
        if (this.focused) {
            this.focused = false;
            this.stateChanges.next();
        }
    }
    /**
     * Implemented as part of NovoFieldControl.
     * @docs-private
     */
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value || this._uid;
    }
    /**
     * Implemented as part of NovoFieldControl.
     * @docs-private
     */
    get required() {
        return this._required;
    }
    set required(value) {
        this._required = coerceBooleanProperty(value);
    }
    /** Input type of the element. */
    get type() {
        return this._type;
    }
    set type(value) {
        this._type = value || 'text';
        this._validateType();
        // When using Angular inputs, developers are no longer able to set the properties on the native
        // input element. To ensure that bindings for `type` work, we need to sync the setter
        // with the native property. Textarea elements don't support the type property or attribute.
        if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {
            this._elementRef.nativeElement.type = this._type;
        }
    }
    /**
     * Implemented as part of NovoFieldControl.
     * @docs-private
     */
    get value() {
        return this._inputValueAccessor.value;
    }
    set value(value) {
        if (value !== this.value) {
            this._inputValueAccessor.value = value;
            this.stateChanges.next();
        }
    }
    /** Whether the element is readonly. */
    get readonly() {
        return this._readonly;
    }
    set readonly(value) {
        this._readonly = coerceBooleanProperty(value);
    }
    ngAfterViewInit() {
        if (this._platform.isBrowser) {
            this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe((event) => {
                this.autofilled = event.isAutofilled;
                this.stateChanges.next();
            });
        }
    }
    ngOnChanges() {
        this.stateChanges.next();
    }
    ngOnDestroy() {
        this.stateChanges.complete();
        if (this._platform.isBrowser) {
            this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);
        }
    }
    ngDoCheck() {
        if (this.ngControl) {
            // We need to re-evaluate this on every change detection cycle, because there are some
            // error triggers that we can't subscribe to (e.g. parent form submissions). This means
            // that whatever logic is in here has to be super lean or we risk destroying the performance.
            // this.updateErrorState();
        }
        // We need to dirty-check the native element's value, because there are some cases where
        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're
        // updating the value using `emitEvent: false`).
        this._dirtyCheckNativeValue();
    }
    /** Focuses the input. */
    focus(options) {
        this._elementRef.nativeElement.focus(options);
    }
    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.
    // In Ivy the `host` bindings will be merged when this class is extended, whereas in
    // ViewEngine they're overwritten.
    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.
    /** Callback for the cases where the focused state of the input changes. */
    // tslint:disable:no-host-decorator-in-concrete
    // tslint:enable:no-host-decorator-in-concrete
    _focusChanged(isFocused) {
        if (isFocused !== this.focused && (!this.readonly || !isFocused)) {
            this.focused = isFocused;
            this.stateChanges.next();
        }
    }
    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.
    // In Ivy the `host` bindings will be merged when this class is extended, whereas in
    // ViewEngine they're overwritten.
    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.
    // tslint:disable-next-line:no-host-decorator-in-concrete
    _onInput() {
        // This is a noop function and is used to let Angular know whenever the value changes.
        // Angular will run a new change detection each time the `input` event has been dispatched.
        // It's necessary that Angular recognizes the value change, because when floatingLabel
        // is set to false and Angular forms aren't used, the placeholder won't recognize the
        // value changes and will not disappear.
        // Listening to the input event wouldn't be necessary when the input is using the
        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.
    }
    /** Does some manual dirty checking on the native input `value` property. */
    _dirtyCheckNativeValue() {
        const newValue = this._elementRef.nativeElement.value;
        if (this._previousNativeValue !== newValue) {
            this._previousNativeValue = newValue;
            this.stateChanges.next();
        }
    }
    /** Make sure the input is a supported type. */
    _validateType() {
        if (NOVO_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {
            throw new Error(`Invalid Input Type: ${this._type}`);
        }
    }
    /** Checks whether the input type is one of the types that are never empty. */
    _isNeverEmpty() {
        return this._neverEmptyInputTypes.indexOf(this._type) > -1;
    }
    /** Checks whether the input is invalid based on the native validation. */
    _isBadInput() {
        // The `validity` property won't be present on platform-server.
        const validity = this._elementRef.nativeElement.validity;
        return validity && validity.badInput;
    }
    /**
     * Implemented as part of NovoFieldControl.
     * @docs-private
     */
    get empty() {
        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() && !this.autofilled;
    }
    /**
     * Implemented as part of NovoFieldControl.
     * @docs-private
     */
    get shouldLabelFloat() {
        if (this._isNativeSelect) {
            // For a single-selection `<select>`, the label should float when the selected option has
            // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid
            // overlapping the label with the options.
            const selectElement = this._elementRef.nativeElement;
            const firstOption = selectElement.options[0];
            // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be
            // -1 if the `value` is set to something, that isn't in the list of options, at a later point.
            return (this.focused || selectElement.multiple || !this.empty || !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label));
        }
        else {
            return this.focused || !this.empty;
        }
    }
    /**
     * Implemented as part of NovoFieldControl.
     * @docs-private
     */
    setDescribedByIds(ids) {
        this._ariaDescribedby = ids.join(' ');
    }
    /**
     * Implemented as part of NovoFieldControl.
     * @docs-private
     */
    onContainerClick() {
        // Do not re-focus the input element if the element is already focused. Otherwise it can happen
        // that someone clicks on a time input and the cursor resets to the "hours" field while the
        // "minutes" field was actually clicked. See: https://github.com/angular/components/issues/12849
        if (!this.focused) {
            this.focus();
        }
    }
}
NovoInput.ɵfac = function NovoInput_Factory(t) { return new (t || NovoInput)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Platform), ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(NgForm, 8), ɵɵdirectiveInject(FormGroupDirective, 8), ɵɵdirectiveInject(NOVO_INPUT_VALUE_ACCESSOR, 10), ɵɵdirectiveInject(AutofillMonitor), ɵɵdirectiveInject(NgZone)); };
NovoInput.ɵdir = ɵɵdefineDirective({ type: NovoInput, selectors: [["input", "novoInput", ""], ["textarea", "novoInput", ""], ["select", "novoInput", ""]], hostAttrs: [1, "novo-input-element"], hostVars: 8, hostBindings: function NovoInput_HostBindings(rf, ctx) { if (rf & 1) {
        ɵɵlistener("focus", function NovoInput_focus_HostBindingHandler() { return ctx._focusChanged(true); })("blur", function NovoInput_blur_HostBindingHandler() { return ctx._focusChanged(false); })("input", function NovoInput_input_HostBindingHandler() { return ctx._onInput(); });
    } if (rf & 2) {
        ɵɵhostProperty("disabled", ctx.disabled)("required", ctx.required);
        ɵɵattribute("id", ctx.id)("placeholder", ctx.placeholder)("readonly", ctx.readonly && !ctx._isNativeSelect || null)("aria-invalid", ctx.errorState)("aria-required", ctx.required.toString())("aria-describedby", ctx._ariaDescribedby);
    } }, inputs: { disabled: "disabled", id: "id", placeholder: "placeholder", required: "required", type: "type", value: "value", readonly: "readonly" }, features: [ɵɵProvidersFeature([{ provide: NovoFieldControl, useExisting: NovoInput }]), ɵɵInheritDefinitionFeature, ɵɵNgOnChangesFeature] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoInput, [{
        type: Directive,
        args: [{
                selector: `input[novoInput], textarea[novoInput], select[novoInput]`,
                host: {
                    class: 'novo-input-element',
                    '[attr.id]': 'id',
                    '[attr.placeholder]': 'placeholder',
                    '[disabled]': 'disabled',
                    '[required]': 'required',
                    '[attr.readonly]': 'readonly && !_isNativeSelect || null',
                    '[attr.aria-invalid]': 'errorState',
                    '[attr.aria-required]': 'required.toString()',
                },
                providers: [{ provide: NovoFieldControl, useExisting: NovoInput }],
            }]
    }], function () { return [{ type: ElementRef }, { type: Platform }, { type: NgControl, decorators: [{
                type: Optional
            }, {
                type: Self
            }] }, { type: NgForm, decorators: [{
                type: Optional
            }] }, { type: FormGroupDirective, decorators: [{
                type: Optional
            }] }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Self
            }, {
                type: Inject,
                args: [NOVO_INPUT_VALUE_ACCESSOR]
            }] }, { type: AutofillMonitor }, { type: NgZone }]; }, { _ariaDescribedby: [{
            type: HostBinding,
            args: ['attr.aria-describedby']
        }], disabled: [{
            type: Input
        }], id: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], required: [{
            type: Input
        }], type: [{
            type: Input
        }], value: [{
            type: Input
        }], readonly: [{
            type: Input
        }], 
    // tslint:enable:no-host-decorator-in-concrete
    _focusChanged: [{
            type: HostListener,
            args: ['focus', ['true']]
        }, {
            type: HostListener,
            args: ['blur', ['false']]
        }], _onInput: [{
            type: HostListener,
            args: ['input']
        }] }); })();

/** Directive used to connect an input to a MatDatepicker. */
class NovoPickerDirective {
    constructor(_elementRef, formatter) {
        var _a;
        this._elementRef = _elementRef;
        this.formatter = formatter;
        /**
         * `autocomplete` attribute to be set on the input element.
         * @docs-private
         */
        this.autocompleteAttribute = 'off';
        if (!this.formatter) {
            console.warn('Picker directive is missing required formatter');
        }
        (_a = this.formatter) === null || _a === void 0 ? void 0 : _a.valueChange.subscribe((value) => {
            this.updatePicker(value);
        });
    }
    /** The datepicker that this input is associated with. */
    set picker(picker) {
        if (picker) {
            this._picker = picker;
            picker.registerOnChange((value) => this.updateValue(value));
        }
    }
    updateValue(value) {
        this.formatter.writeValue(value);
    }
    updatePicker(value) {
        if (this._picker) {
            this._picker.writeValue(value);
        }
    }
}
NovoPickerDirective.ɵfac = function NovoPickerDirective_Factory(t) { return new (t || NovoPickerDirective)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NOVO_INPUT_FORMAT, 10)); };
NovoPickerDirective.ɵdir = ɵɵdefineDirective({ type: NovoPickerDirective, selectors: [["input", "picker", ""]], hostAttrs: [1, "novo-has-picker"], hostVars: 1, hostBindings: function NovoPickerDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵattribute("autocomplete", ctx.autocompleteAttribute);
    } }, inputs: { picker: "picker", autocompleteAttribute: ["autocomplete", "autocompleteAttribute"] } });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoPickerDirective, [{
        type: Directive,
        args: [{
                selector: 'input[picker]',
                host: {
                    class: 'novo-has-picker',
                    '[attr.autocomplete]': 'autocompleteAttribute',
                },
            }]
    }], function () { return [{ type: ElementRef }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Self
            }, {
                type: Inject,
                args: [NOVO_INPUT_FORMAT]
            }] }]; }, { picker: [{
            type: Input
        }], autocompleteAttribute: [{
            type: Input,
            args: ['autocomplete']
        }] }); })();

const _c0$E = ["button"];
const _c1$e = ["*"];
class NovoPickerToggleElement {
    constructor(_elementRef, cdr, defaultTabIndex, _formField) {
        this._elementRef = _elementRef;
        this.cdr = cdr;
        this._formField = _formField;
        this._stateChanges = Subscription.EMPTY;
        const parsedTabIndex = Number(defaultTabIndex);
        this.tabIndex = parsedTabIndex || parsedTabIndex === 0 ? parsedTabIndex : null;
    }
    /** Whether the toggle button is disabled. */
    get disabled() {
        if (this._disabled === undefined && this.picker) {
            return this.picker.disabled;
        }
        return !!this._disabled;
    }
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
    }
    ngOnChanges(changes) {
        if (changes.picker) {
            this._watchStateChanges();
        }
    }
    ngOnDestroy() {
        this._stateChanges.unsubscribe();
    }
    ngAfterContentInit() {
        this._watchStateChanges();
    }
    ngAfterViewInit() {
        this.element = this._formField.getConnectedOverlayOrigin() || this._elementRef;
    }
    togglePanel(event) {
        this.cdr.detectChanges();
        if (!this.overlay.panelOpen) {
            this.openPanel(event);
        }
        else {
            this.closePanel(event);
        }
    }
    /** BEGIN: Convenient Panel Methods. */
    openPanel(event) {
        if (!this.overlay.panelOpen) {
            this.overlay.openPanel();
        }
    }
    closePanel(event) {
        this.overlay.closePanel();
    }
    get panelOpen() {
        return this.overlay && this.overlay.panelOpen;
    }
    _watchStateChanges() {
        // const pickerStateChanged = this.picker ? this.picker.stateChanges : observableOf();
        // const inputStateChanged = this.picker && this.picker.pickerInput ? this.picker.pickerInput.stateChanges : observableOf();
        // const pickerToggled = this.picker ? merge(this.picker.openedStream, this.picker.closedStream) : observableOf();
        // this._stateChanges.unsubscribe();
        // this._stateChanges = merge(pickerStateChanged, inputStateChanged, pickerToggled).subscribe(() => this.cdr.markForCheck());
    }
}
NovoPickerToggleElement.ɵfac = function NovoPickerToggleElement_Factory(t) { return new (t || NovoPickerToggleElement)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵinjectAttribute('tabindex'), ɵɵdirectiveInject(NOVO_FORM_FIELD, 8)); };
NovoPickerToggleElement.ɵcmp = ɵɵdefineComponent({ type: NovoPickerToggleElement, selectors: [["novo-picker-toggle"]], viewQuery: function NovoPickerToggleElement_Query(rf, ctx) { if (rf & 1) {
        ɵɵviewQuery(_c0$E, true);
        ɵɵviewQuery(NovoOverlayTemplateComponent, true);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx._button = _t.first);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.overlay = _t.first);
    } }, hostAttrs: [1, "novo-picker-toggle"], hostVars: 7, hostBindings: function NovoPickerToggleElement_HostBindings(rf, ctx) { if (rf & 1) {
        ɵɵlistener("focus", function NovoPickerToggleElement_focus_HostBindingHandler() { return ctx._button.focus(); });
    } if (rf & 2) {
        ɵɵattribute("tabindex", ctx.disabled ? null : 0 - 1);
        ɵɵclassProp("novo-toggle-active", ctx.picker && ctx.picker.opened)("novo-accent", ctx.picker && ctx.picker.color === "accent")("novo-warn", ctx.picker && ctx.picker.color === "warn");
    } }, inputs: { picker: ["for", "picker"], icon: "icon", tabIndex: "tabIndex", ariaLabel: ["aria-label", "ariaLabel"], disabled: "disabled" }, exportAs: ["novoPickerToggle"], features: [ɵɵNgOnChangesFeature], ngContentSelectors: _c1$e, decls: 4, vars: 5, consts: [["theme", "icon", 3, "icon", "disabled", "click"], ["button", ""], ["position", "above-below", 3, "parent"]], template: function NovoPickerToggleElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵelementStart(0, "button", 0, 1);
        ɵɵlistener("click", function NovoPickerToggleElement_Template_button_click_0_listener($event) { return ctx.togglePanel($event); });
        ɵɵelementEnd();
        ɵɵelementStart(2, "novo-overlay-template", 2);
        ɵɵprojection(3);
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵproperty("icon", ctx.icon)("disabled", ctx.disabled);
        ɵɵattribute("aria-haspopup", "dialog")("tabindex", ctx.disabled ? 0 - 1 : ctx.tabIndex);
        ɵɵadvance(2);
        ɵɵproperty("parent", ctx.element);
    } }, directives: [NovoButtonElement, NovoOverlayTemplateComponent], styles: [""], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoPickerToggleElement, [{
        type: Component,
        args: [{
                selector: 'novo-picker-toggle',
                templateUrl: 'picker-toggle.component.html',
                styleUrls: ['picker-toggle.component.scss'],
                host: {
                    class: 'novo-picker-toggle',
                    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the
                    // consumer may have provided, while still being able to receive focus.
                    '[attr.tabindex]': 'disabled ? null : -1',
                    '[class.novo-toggle-active]': 'picker && picker.opened',
                    '[class.novo-accent]': 'picker && picker.color === "accent"',
                    '[class.novo-warn]': 'picker && picker.color === "warn"',
                    '(focus)': '_button.focus()',
                },
                exportAs: 'novoPickerToggle',
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: ElementRef }, { type: ChangeDetectorRef }, { type: undefined, decorators: [{
                type: Attribute,
                args: ['tabindex']
            }] }, { type: NovoFieldElement, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [NOVO_FORM_FIELD]
            }] }]; }, { picker: [{
            type: Input,
            args: ['for']
        }], icon: [{
            type: Input
        }], tabIndex: [{
            type: Input
        }], ariaLabel: [{
            type: Input,
            args: ['aria-label']
        }], disabled: [{
            type: Input
        }], _button: [{
            type: ViewChild,
            args: ['button']
        }], overlay: [{
            type: ViewChild,
            args: [NovoOverlayTemplateComponent]
        }] }); })();

// NG2
class NovoFieldModule {
}
NovoFieldModule.ɵmod = ɵɵdefineNgModule({ type: NovoFieldModule });
NovoFieldModule.ɵinj = ɵɵdefineInjector({ factory: function NovoFieldModule_Factory(t) { return new (t || NovoFieldModule)(); }, imports: [[CommonModule, NovoButtonModule, NovoOverlayModule, NovoOptionModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoFieldModule, { declarations: [NovoFieldElement,
        // NovoLabelElement,
        NovoHintElement,
        NovoErrorElement,
        NovoInput,
        NovoFieldPrefixDirective,
        NovoFieldSuffixDirective,
        NovoFieldsElement,
        NovoTimeFormatDirective,
        NovoDateFormatDirective,
        NovoPickerToggleElement,
        NovoPickerDirective,
        NovoAutocompleteElement], imports: [CommonModule, NovoButtonModule, NovoOverlayModule, NovoOptionModule], exports: [NovoFieldElement,
        // NovoLabelElement,
        NovoHintElement,
        NovoErrorElement,
        NovoInput,
        NovoFieldPrefixDirective,
        NovoFieldSuffixDirective,
        NovoFieldsElement,
        NovoTimeFormatDirective,
        NovoDateFormatDirective,
        NovoPickerToggleElement,
        NovoPickerDirective,
        NovoAutocompleteElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoFieldModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, NovoButtonModule, NovoOverlayModule, NovoOptionModule],
                declarations: [
                    NovoFieldElement,
                    // NovoLabelElement,
                    NovoHintElement,
                    NovoErrorElement,
                    NovoInput,
                    NovoFieldPrefixDirective,
                    NovoFieldSuffixDirective,
                    NovoFieldsElement,
                    NovoTimeFormatDirective,
                    NovoDateFormatDirective,
                    NovoPickerToggleElement,
                    NovoPickerDirective,
                    NovoAutocompleteElement,
                ],
                exports: [
                    NovoFieldElement,
                    // NovoLabelElement,
                    NovoHintElement,
                    NovoErrorElement,
                    NovoInput,
                    NovoFieldPrefixDirective,
                    NovoFieldSuffixDirective,
                    NovoFieldsElement,
                    NovoTimeFormatDirective,
                    NovoDateFormatDirective,
                    NovoPickerToggleElement,
                    NovoPickerDirective,
                    NovoAutocompleteElement,
                ],
            }]
    }], null, null); })();

// NG2
const _c0$F = ["*"];
class NovoLabelElement {
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
    }
    ngOnInit() { }
}
NovoLabelElement.ɵfac = function NovoLabelElement_Factory(t) { return new (t || NovoLabelElement)(ɵɵdirectiveInject(DomSanitizer)); };
NovoLabelElement.ɵcmp = ɵɵdefineComponent({ type: NovoLabelElement, selectors: [["novo-label"]], ngContentSelectors: _c0$F, decls: 1, vars: 0, template: function NovoLabelElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵprojection(0);
    } }, styles: ["@-webkit-keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}[_nghost-%COMP%]{color:#3d464d;display:flex;flex:1;font-size:.9em;font-weight:500;overflow-wrap:break-word;text-transform:uppercase;transition:.2s ease-out;word-break:word-break}"] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoLabelElement, [{
        type: Component,
        args: [{
                selector: 'novo-label',
                templateUrl: './label.html',
                styleUrls: ['./label.scss'],
            }]
    }], function () { return [{ type: DomSanitizer }]; }, null); })();

const _c0$G = ["*"];
// Boilerplate for applying mixins to NovoChipList.
/** @docs-private */
class NovoChipListBase {
    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, 
    /** @docs-private */
    ngControl) {
        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        this.ngControl = ngControl;
    }
}
const _NovoChipListMixinBase = mixinErrorState(NovoChipListBase);
// Increasing integer for generating unique ids for chip-list components.
let nextUniqueId$2 = 0;
/** Change event object that is emitted when the chip list value has changed. */
class NovoChipListChange {
    constructor(
    /** Chip list that emitted the event. */
    source, 
    /** Value of the chip list when the event was emitted. */
    value) {
        this.source = source;
        this.value = value;
    }
}
/**
 * A material design chips component (named ChipList for its similarity to the List component).
 */
class NovoChipList extends _NovoChipListMixinBase {
    constructor(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, 
    /** @docs-private */
    ngControl) {
        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);
        this._elementRef = _elementRef;
        this._changeDetectorRef = _changeDetectorRef;
        this._dir = _dir;
        this.ngControl = ngControl;
        /**
         * Implemented as part of NovoFieldControl.
         * @docs-private
         */
        this.controlType = 'novo-chip-list';
        /**
         * When a chip is destroyed, we store the index of the destroyed chip until the chips
         * query list notifies about the update. This is necessary because we cannot determine an
         * appropriate chip that should receive focus until the array of chips updated completely.
         */
        this._lastDestroyedChipIndex = null;
        /** Subject that emits when the component has been destroyed. */
        this._destroyed = new Subject();
        /** Uid of the chip list */
        this._uid = `novo-chip-list-${nextUniqueId$2++}`;
        /** Tab index for the chip list. */
        this._tabIndex = 0;
        /**
         * User defined tab index.
         * When it is not null, use user defined tab index. Otherwise use _tabIndex
         */
        this._userTabIndex = null;
        /** Function when touched */
        this._onTouched = () => { };
        /** Function when changed */
        this._onChange = () => { };
        this._multiple = false;
        this._stacked = false;
        this._compareWith = (o1, o2) => o1 === o2;
        this._required = false;
        this._disabled = false;
        /** Orientation of the chip list. */
        this.ariaOrientation = 'horizontal';
        this._selectable = true;
        /** Event emitted when the selected chip list value has been changed by the user. */
        this.change = new EventEmitter();
        /**
         * Event that emits whenever the raw value of the chip-list changes. This is here primarily
         * to facilitate the two-way binding for the `value` input.
         * @docs-private
         */
        this.valueChange = new EventEmitter();
        if (this.ngControl) {
            this.ngControl.valueAccessor = this;
        }
    }
    /** The array of selected chips inside chip list. */
    get selected() {
        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];
    }
    /** The ARIA role applied to the chip list. */
    get role() {
        return this.empty ? null : 'listbox';
    }
    /** Whether the user should be allowed to select multiple chips. */
    get multiple() {
        return this._multiple;
    }
    set multiple(value) {
        this._multiple = coerceBooleanProperty(value);
        this._syncChipsState();
    }
    /** Whether the chips should appear stacked instead of a row. */
    get stacked() {
        return this._stacked;
    }
    set stacked(value) {
        this._stacked = coerceBooleanProperty(value);
    }
    /**
     * A function to compare the option values with the selected values. The first argument
     * is a value from an option. The second is a value from the selection. A boolean
     * should be returned.
     */
    get compareWith() {
        return this._compareWith;
    }
    set compareWith(fn) {
        this._compareWith = fn;
        if (this._selectionModel) {
            // A different comparator means the selection could change.
            this._initializeSelection();
        }
    }
    /**
     * Implemented as part of NovoFieldControl.
     * @docs-private
     */
    get value() {
        return this._value;
    }
    set value(value) {
        this.writeValue(value);
        this._value = value;
    }
    /**
     * Implemented as part of NovoFieldControl.
     * @docs-private
     */
    get id() {
        return this._chipInput ? this._chipInput.id : this._uid;
    }
    /**
     * Implemented as part of NovoFieldControl.
     * @docs-private
     */
    get required() {
        return this._required;
    }
    set required(value) {
        this._required = coerceBooleanProperty(value);
        this.stateChanges.next();
    }
    /**
     * Implemented as part of NovoFieldControl.
     * @docs-private
     */
    get placeholder() {
        return this._chipInput ? this._chipInput.placeholder : this._placeholder;
    }
    set placeholder(value) {
        this._placeholder = value;
        this.stateChanges.next();
    }
    /** Whether any chips or the matChipInput inside of this chip-list has focus. */
    get focused() {
        return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();
    }
    /**
     * Implemented as part of NovoFieldControl.
     * @docs-private
     */
    get empty() {
        return (!this._chipInput || this._chipInput.empty) && (!this.chips || this.chips.length === 0);
    }
    /**
     * Implemented as part of NovoFieldControl.
     * @docs-private
     */
    get shouldLabelFloat() {
        return !this.empty || this.focused;
    }
    /**
     * Implemented as part of NovoFieldControl.
     * @docs-private
     */
    get disabled() {
        return this.ngControl ? !!this.ngControl.disabled : this._disabled;
    }
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
        this._syncChipsState();
    }
    /**
     * Whether or not this chip list is selectable. When a chip list is not selectable,
     * the selected states for all the chips inside the chip list are always ignored.
     */
    get selectable() {
        return this._selectable;
    }
    set selectable(value) {
        this._selectable = coerceBooleanProperty(value);
        if (this.chips) {
            this.chips.forEach((chip) => (chip.chipListSelectable = this._selectable));
        }
    }
    set tabIndex(value) {
        this._userTabIndex = value;
        this._tabIndex = value;
    }
    /** Combined stream of all of the child chips' selection change events. */
    get chipSelectionChanges() {
        return merge(...this.chips.map((chip) => chip.selectionChange));
    }
    /** Combined stream of all of the child chips' focus change events. */
    get chipFocusChanges() {
        return merge(...this.chips.map((chip) => chip._onFocus));
    }
    /** Combined stream of all of the child chips' blur change events. */
    get chipBlurChanges() {
        return merge(...this.chips.map((chip) => chip._onBlur));
    }
    /** Combined stream of all of the child chips' remove change events. */
    get chipRemoveChanges() {
        return merge(...this.chips.map((chip) => chip.destroyed));
    }
    ngAfterContentInit() {
        this._keyManager = new FocusKeyManager(this.chips)
            .withWrap()
            .withVerticalOrientation()
            .withHomeAndEnd()
            .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');
        if (this._dir) {
            this._dir.change.pipe(takeUntil(this._destroyed)).subscribe((dir) => this._keyManager.withHorizontalOrientation(dir));
        }
        this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {
            this._allowFocusEscape();
        });
        // When the list changes, re-subscribe
        this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {
            if (this.disabled) {
                // Since this happens after the content has been
                // checked, we need to defer it to the next tick.
                Promise.resolve().then(() => {
                    this._syncChipsState();
                });
            }
            this._resetChips();
            // Reset chips selected/deselected status
            this._initializeSelection();
            // Check to see if we need to update our tab index
            this._updateTabIndex();
            // Check to see if we have a destroyed chip and need to refocus
            this._updateFocusForDestroyedChips();
            this.stateChanges.next();
        });
    }
    ngOnInit() {
        this._selectionModel = new SelectionModel(this.multiple, undefined, false);
        this.stateChanges.next();
    }
    ngDoCheck() {
        if (this.ngControl) {
            // We need to re-evaluate this on every change detection cycle, because there are some
            // error triggers that we can't subscribe to (e.g. parent form submissions). This means
            // that whatever logic is in here has to be super lean or we risk destroying the performance.
            this.updateErrorState();
            if (this.ngControl.disabled !== this._disabled) {
                this.disabled = !!this.ngControl.disabled;
            }
        }
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
        this.stateChanges.complete();
        this._dropSubscriptions();
    }
    /** Associates an HTML input element with this chip list. */
    registerInput(inputElement) {
        this._chipInput = inputElement;
        // We use this attribute to match the chip list to its input in test harnesses.
        // Set the attribute directly here to avoid "changed after checked" errors.
        this._elementRef.nativeElement.setAttribute('data-novo-chip-input', inputElement.id);
    }
    /**
     * Implemented as part of NovoFieldControl.
     * @docs-private
     */
    setDescribedByIds(ids) {
        this._ariaDescribedby = ids.join(' ');
    }
    // Implemented as part of ControlValueAccessor.
    writeValue(value) {
        if (this.chips) {
            this._setSelectionByValue(value, false);
        }
    }
    // Implemented as part of ControlValueAccessor.
    registerOnChange(fn) {
        this._onChange = fn;
    }
    // Implemented as part of ControlValueAccessor.
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    // Implemented as part of ControlValueAccessor.
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.stateChanges.next();
    }
    /**
     * Implemented as part of NovoFieldControl.
     * @docs-private
     */
    onContainerClick(event) {
        if (!this._originatesFromChip(event)) {
            this.focus();
        }
    }
    /**
     * Focuses the first non-disabled chip in this chip list, or the associated input when there
     * are no eligible chips.
     */
    focus(options) {
        if (this.disabled) {
            return;
        }
        // TODO: ARIA says this should focus the first `selected` chip if any are selected.
        // Focus on first element if there's no chipInput inside chip-list
        if (this._chipInput && this._chipInput.focused) {
            // do nothing
        }
        else if (this._chipInput) {
            this._focusInput(options);
            this.stateChanges.next();
        }
        else if (this.chips.length > 0) {
            this._keyManager.setFirstItemActive();
            this.stateChanges.next();
        }
    }
    /** Attempt to focus an input if we have one. */
    _focusInput(options) {
        if (this._chipInput) {
            this._chipInput.focus(options);
        }
    }
    /**
     * Pass events to the keyboard manager. Available here for tests.
     */
    _keydown(event) {
        const target = event.target;
        // If they are on an empty input and hit backspace, focus the last chip
        if (event.key === "Backspace" /* Backspace */ && this._isInputEmpty(target)) {
            this._keyManager.setLastItemActive();
            event.preventDefault();
        }
        else if (target && target.classList.contains('novo-chip')) {
            this._keyManager.onKeydown(event);
            this.stateChanges.next();
        }
    }
    /**
     * Check the tab index as you should not be allowed to focus an empty list.
     */
    _updateTabIndex() {
        // If we have 0 chips, we should not allow keyboard focus
        this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);
    }
    /**
     * If the amount of chips changed, we need to update the
     * key manager state and focus the next closest chip.
     */
    _updateFocusForDestroyedChips() {
        // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.
        if (this._lastDestroyedChipIndex != null) {
            if (this.chips.length) {
                const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);
                this._keyManager.setActiveItem(newChipIndex);
            }
            else {
                this.focus();
            }
        }
        this._lastDestroyedChipIndex = null;
    }
    /**
     * Utility to ensure all indexes are valid.
     *
     * @param index The index to be checked.
     * @returns True if the index is valid for our list of chips.
     */
    _isValidIndex(index) {
        return index >= 0 && index < this.chips.length;
    }
    _isInputEmpty(element) {
        if (element && element.nodeName.toLowerCase() === 'input') {
            let input = element;
            return !input.value;
        }
        return false;
    }
    _setSelectionByValue(value, isUserInput = true) {
        this._clearSelection();
        this.chips.forEach((chip) => chip.deselect());
        if (Array.isArray(value)) {
            value.forEach((currentValue) => this._selectValue(currentValue, isUserInput));
            this._sortValues();
        }
        else {
            const correspondingChip = this._selectValue(value, isUserInput);
            // Shift focus to the active item. Note that we shouldn't do this in multiple
            // mode, because we don't know what chip the user interacted with last.
            if (correspondingChip) {
                if (isUserInput) {
                    this._keyManager.setActiveItem(correspondingChip);
                }
            }
        }
    }
    /**
     * Finds and selects the chip based on its value.
     * @returns Chip that has the corresponding value.
     */
    _selectValue(value, isUserInput = true) {
        const correspondingChip = this.chips.find((chip) => {
            return chip.value != null && this._compareWith(chip.value, value);
        });
        if (correspondingChip) {
            isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();
            this._selectionModel.select(correspondingChip);
        }
        return correspondingChip;
    }
    _initializeSelection() {
        // Defer setting the value in order to avoid the "Expression
        // has changed after it was checked" errors from Angular.
        Promise.resolve().then(() => {
            if (this.ngControl || this._value) {
                this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);
                this.stateChanges.next();
            }
        });
    }
    /**
     * Deselects every chip in the list.
     * @param skip Chip that should not be deselected.
     */
    _clearSelection(skip) {
        this._selectionModel.clear();
        this.chips.forEach((chip) => {
            if (chip !== skip) {
                chip.deselect();
            }
        });
        this.stateChanges.next();
    }
    /**
     * Sorts the model values, ensuring that they keep the same
     * order that they have in the panel.
     */
    _sortValues() {
        if (this._multiple) {
            this._selectionModel.clear();
            this.chips.forEach((chip) => {
                if (chip.selected) {
                    this._selectionModel.select(chip);
                }
            });
            this.stateChanges.next();
        }
    }
    /** Emits change event to set the model value. */
    _propagateChanges(fallbackValue) {
        let valueToEmit = null;
        if (Array.isArray(this.selected)) {
            valueToEmit = this.selected.map((chip) => chip.value);
        }
        else {
            valueToEmit = this.selected ? this.selected.value : fallbackValue;
        }
        this._value = valueToEmit;
        this.change.emit(new NovoChipListChange(this, valueToEmit));
        this.valueChange.emit(valueToEmit);
        this._onChange(valueToEmit);
        this._changeDetectorRef.markForCheck();
    }
    /** When blurred, mark the field as touched when focus moved outside the chip list. */
    _blur() {
        if (!this._hasFocusedChip()) {
            this._keyManager.setActiveItem(-1);
        }
        if (!this.disabled) {
            if (this._chipInput) {
                // If there's a chip input, we should check whether the focus moved to chip input.
                // If the focus is not moved to chip input, mark the field as touched. If the focus moved
                // to chip input, do nothing.
                // Timeout is needed to wait for the focus() event trigger on chip input.
                setTimeout(() => {
                    if (!this.focused) {
                        this._markAsTouched();
                    }
                });
            }
            else {
                // If there's no chip input, then mark the field as touched.
                this._markAsTouched();
            }
        }
    }
    /** Mark the field as touched */
    _markAsTouched() {
        this._onTouched();
        this._changeDetectorRef.markForCheck();
        this.stateChanges.next();
    }
    /**
     * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the
     * user to tab out of it. This prevents the list from capturing focus and redirecting
     * it back to the first chip, creating a focus trap, if it user tries to tab away.
     */
    _allowFocusEscape() {
        if (this._tabIndex !== -1) {
            this._tabIndex = -1;
            setTimeout(() => {
                this._tabIndex = this._userTabIndex || 0;
                this._changeDetectorRef.markForCheck();
            });
        }
    }
    _resetChips() {
        this._dropSubscriptions();
        this._listenToChipsFocus();
        this._listenToChipsSelection();
        this._listenToChipsRemoved();
    }
    _dropSubscriptions() {
        if (this._chipFocusSubscription) {
            this._chipFocusSubscription.unsubscribe();
            this._chipFocusSubscription = null;
        }
        if (this._chipBlurSubscription) {
            this._chipBlurSubscription.unsubscribe();
            this._chipBlurSubscription = null;
        }
        if (this._chipSelectionSubscription) {
            this._chipSelectionSubscription.unsubscribe();
            this._chipSelectionSubscription = null;
        }
        if (this._chipRemoveSubscription) {
            this._chipRemoveSubscription.unsubscribe();
            this._chipRemoveSubscription = null;
        }
    }
    /** Listens to user-generated selection events on each chip. */
    _listenToChipsSelection() {
        this._chipSelectionSubscription = this.chipSelectionChanges.subscribe((event) => {
            event.source.selected ? this._selectionModel.select(event.source) : this._selectionModel.deselect(event.source);
            // For single selection chip list, make sure the deselected value is unselected.
            if (!this.multiple) {
                this.chips.forEach((chip) => {
                    if (!this._selectionModel.isSelected(chip) && chip.selected) {
                        chip.deselect();
                    }
                });
            }
            if (event.isUserInput) {
                this._propagateChanges();
            }
        });
    }
    /** Listens to user-generated selection events on each chip. */
    _listenToChipsFocus() {
        this._chipFocusSubscription = this.chipFocusChanges.subscribe((event) => {
            let chipIndex = this.chips.toArray().indexOf(event.chip);
            if (this._isValidIndex(chipIndex)) {
                this._keyManager.updateActiveItem(chipIndex);
            }
            this.stateChanges.next();
        });
        this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {
            this._blur();
            this.stateChanges.next();
        });
    }
    _listenToChipsRemoved() {
        this._chipRemoveSubscription = this.chipRemoveChanges.subscribe((event) => {
            const chip = event.chip;
            const chipIndex = this.chips.toArray().indexOf(event.chip);
            // In case the chip that will be removed is currently focused, we temporarily store
            // the index in order to be able to determine an appropriate sibling chip that will
            // receive focus.
            if (this._isValidIndex(chipIndex) && chip._hasFocus) {
                this._lastDestroyedChipIndex = chipIndex;
            }
        });
    }
    /** Checks whether an event comes from inside a chip element. */
    _originatesFromChip(event) {
        let currentElement = event.target;
        while (currentElement && currentElement !== this._elementRef.nativeElement) {
            if (currentElement.classList.contains('novo-chip')) {
                return true;
            }
            currentElement = currentElement.parentElement;
        }
        return false;
    }
    /** Checks whether any of the chips is focused. */
    _hasFocusedChip() {
        return this.chips && this.chips.some((chip) => chip._hasFocus);
    }
    /** Syncs the list's state with the individual chips. */
    _syncChipsState() {
        if (this.chips) {
            this.chips.forEach((chip) => {
                chip._chipListDisabled = this._disabled;
                chip._chipListMultiple = this.multiple;
            });
        }
    }
}
NovoChipList.ɵfac = function NovoChipList_Factory(t) { return new (t || NovoChipList)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(Directionality, 8), ɵɵdirectiveInject(NgForm, 8), ɵɵdirectiveInject(FormGroupDirective, 8), ɵɵdirectiveInject(ErrorStateMatcher), ɵɵdirectiveInject(NgControl, 10)); };
NovoChipList.ɵcmp = ɵɵdefineComponent({ type: NovoChipList, selectors: [["novo-chip-list"]], contentQueries: function NovoChipList_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵɵcontentQuery(dirIndex, NovoChipElement, true);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.chips = _t);
    } }, hostAttrs: [1, "novo-chip-list"], hostVars: 19, hostBindings: function NovoChipList_HostBindings(rf, ctx) { if (rf & 1) {
        ɵɵlistener("focus", function NovoChipList_focus_HostBindingHandler() { return ctx.focus(); })("blur", function NovoChipList_blur_HostBindingHandler() { return ctx._blur(); })("keydown", function NovoChipList_keydown_HostBindingHandler($event) { return ctx._keydown($event); });
    } if (rf & 2) {
        ɵɵhostProperty("id", ctx._uid);
        ɵɵattribute("tabindex", ctx.disabled ? null : ctx._tabIndex)("aria-describedby", ctx._ariaDescribedby || null)("aria-required", ctx.role ? ctx.required : null)("aria-disabled", ctx.disabled.toString())("aria-invalid", ctx.errorState)("aria-multiselectable", ctx.multiple)("role", ctx.role)("aria-orientation", ctx.ariaOrientation);
        ɵɵclassProp("novo-chip-list-stacked", ctx.stacked)("novo-chip-list-focused", ctx.focused)("novo-chip-list-disabled", ctx.disabled)("novo-chip-list-invalid", ctx.errorState)("novo-chip-list-required", ctx.required);
    } }, inputs: { errorStateMatcher: "errorStateMatcher", multiple: "multiple", stacked: "stacked", compareWith: "compareWith", value: "value", required: "required", placeholder: "placeholder", disabled: "disabled", ariaOrientation: ["aria-orientation", "ariaOrientation"], selectable: "selectable", tabIndex: "tabIndex" }, outputs: { change: "change", valueChange: "valueChange" }, exportAs: ["novoChipList"], features: [ɵɵProvidersFeature([{ provide: NovoFieldControl, useExisting: NovoChipList }]), ɵɵInheritDefinitionFeature], ngContentSelectors: _c0$G, decls: 2, vars: 0, consts: [[1, "novo-chip-list-wrapper"]], template: function NovoChipList_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵelementStart(0, "div", 0);
        ɵɵprojection(1);
        ɵɵelementEnd();
    } }, encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoChipList, [{
        type: Component,
        args: [{
                selector: 'novo-chip-list',
                template: `<div class="novo-chip-list-wrapper"><ng-content></ng-content></div>`,
                exportAs: 'novoChipList',
                host: {
                    '[attr.tabindex]': 'disabled ? null : _tabIndex',
                    '[attr.aria-describedby]': '_ariaDescribedby || null',
                    '[attr.aria-required]': 'role ? required : null',
                    '[attr.aria-disabled]': 'disabled.toString()',
                    '[attr.aria-invalid]': 'errorState',
                    '[attr.aria-multiselectable]': 'multiple',
                    '[attr.role]': 'role',
                    '[class.novo-chip-list-stacked]': 'stacked',
                    '[class.novo-chip-list-focused]': 'focused',
                    '[class.novo-chip-list-disabled]': 'disabled',
                    '[class.novo-chip-list-invalid]': 'errorState',
                    '[class.novo-chip-list-required]': 'required',
                    '[attr.aria-orientation]': 'ariaOrientation',
                    class: 'novo-chip-list',
                    '(focus)': 'focus()',
                    '(blur)': '_blur()',
                    '(keydown)': '_keydown($event)',
                    '[id]': '_uid',
                },
                providers: [{ provide: NovoFieldControl, useExisting: NovoChipList }],
                // styleUrls: ['./ChipList.scss'],
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: ElementRef }, { type: ChangeDetectorRef }, { type: Directionality, decorators: [{
                type: Optional
            }] }, { type: NgForm, decorators: [{
                type: Optional
            }] }, { type: FormGroupDirective, decorators: [{
                type: Optional
            }] }, { type: ErrorStateMatcher }, { type: NgControl, decorators: [{
                type: Optional
            }, {
                type: Self
            }] }]; }, { errorStateMatcher: [{
            type: Input
        }], multiple: [{
            type: Input
        }], stacked: [{
            type: Input
        }], compareWith: [{
            type: Input
        }], value: [{
            type: Input
        }], required: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], disabled: [{
            type: Input
        }], ariaOrientation: [{
            type: Input,
            args: ['aria-orientation']
        }], selectable: [{
            type: Input
        }], tabIndex: [{
            type: Input
        }], change: [{
            type: Output
        }], valueChange: [{
            type: Output
        }], chips: [{
            type: ContentChildren,
            args: [NovoChipElement, {
                    // We need to use `descendants: true`, because Ivy will no longer match
                    // indirect descendants if it's left as false.
                    descendants: true,
                }]
        }] }); })();

// Increasing integer for generating unique ids.
let nextUniqueId$3 = 0;
/**
 * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.
 * May be placed inside or outside of an `<mat-chip-list>`.
 */
class NovoChipInput {
    constructor(_elementRef, _defaultOptions, _chipList) {
        this._elementRef = _elementRef;
        this._defaultOptions = _defaultOptions;
        this._chipList = _chipList;
        /** Whether the control is focused. */
        this.focused = false;
        this._addOnBlur = false;
        /**
         * The list of key codes that will trigger a chipEnd event.
         *
         * Defaults to `[Key.Enter]`.
         */
        this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;
        /** Emitted when a chip is to be added. */
        this.chipEnd = new EventEmitter();
        /** The input's placeholder text. */
        this.placeholder = '';
        /** Unique id for the input. */
        this.id = `mat-chip-list-input-${nextUniqueId$3++}`;
        this._disabled = false;
        this._inputElement = this._elementRef.nativeElement;
        this._chipList.registerInput(this);
    }
    /**
     * Whether or not the chipEnd event will be emitted when the input is blurred.
     */
    get addOnBlur() {
        return this._addOnBlur;
    }
    set addOnBlur(value) {
        this._addOnBlur = coerceBooleanProperty(value);
    }
    /** Whether the input is disabled. */
    get disabled() {
        return this._disabled || (this._chipList && this._chipList.disabled);
    }
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
    }
    /** Whether the input is empty. */
    get empty() {
        return !this._inputElement.value;
    }
    ngOnChanges() {
        this._chipList.stateChanges.next();
    }
    /** Utility method to make host definition/tests more clear. */
    _keydown(event) {
        // Allow the user's focus to escape when they're tabbing forward. Note that we don't
        // want to do this when going backwards, because focus should go back to the first chip.
        if (event && event.key === "Tab" /* Tab */ && !hasModifierKey(event, 'shiftKey')) {
            this._chipList._allowFocusEscape();
        }
        this._emitChipEnd(event);
    }
    /** Checks to see if the blur should emit the (chipEnd) event. */
    _blur() {
        if (this.addOnBlur) {
            this._emitChipEnd();
        }
        this.focused = false;
        // Blur the chip list if it is not focused
        if (!this._chipList.focused) {
            this._chipList._blur();
        }
        this._chipList.stateChanges.next();
    }
    _focus() {
        this.focused = true;
        this._chipList.stateChanges.next();
    }
    /** Checks to see if the (chipEnd) event needs to be emitted. */
    _emitChipEnd(event) {
        if (!this._inputElement.value && !!event) {
            this._chipList._keydown(event);
        }
        if (!event || this._isSeparatorKey(event)) {
            this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });
            if (event) {
                event.preventDefault();
            }
        }
    }
    _onInput() {
        // Let chip list know whenever the value changes.
        this._chipList.stateChanges.next();
    }
    /** Focuses the input. */
    focus(options) {
        this._inputElement.focus(options);
    }
    /** Checks whether a keycode is one of the configured separators. */
    _isSeparatorKey(event) {
        return !hasModifierKey(event) && new Set(this.separatorKeyCodes).has(event.key);
    }
}
NovoChipInput.ɵfac = function NovoChipInput_Factory(t) { return new (t || NovoChipInput)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NOVO_CHIPS_DEFAULT_OPTIONS), ɵɵdirectiveInject(forwardRef(() => NovoChipList))); };
NovoChipInput.ɵdir = ɵɵdefineDirective({ type: NovoChipInput, selectors: [["input", "novoChipInput", ""]], hostAttrs: [1, "novo-chip-input", "novo-input-element"], hostVars: 5, hostBindings: function NovoChipInput_HostBindings(rf, ctx) { if (rf & 1) {
        ɵɵlistener("keydown", function NovoChipInput_keydown_HostBindingHandler($event) { return ctx._keydown($event); })("blur", function NovoChipInput_blur_HostBindingHandler() { return ctx._blur(); })("focus", function NovoChipInput_focus_HostBindingHandler() { return ctx._focus(); })("input", function NovoChipInput_input_HostBindingHandler() { return ctx._onInput(); });
    } if (rf & 2) {
        ɵɵhostProperty("id", ctx.id);
        ɵɵattribute("disabled", ctx.disabled || null)("placeholder", ctx.placeholder || null)("aria-invalid", ctx._chipList && ctx._chipList.ngControl ? ctx._chipList.ngControl.invalid : null)("aria-required", ctx._chipList && ctx._chipList.required || null);
    } }, inputs: { addOnBlur: ["novoChipInputAddOnBlur", "addOnBlur"], separatorKeyCodes: ["novoChipInputSeparatorKeyCodes", "separatorKeyCodes"], placeholder: "placeholder", id: "id", disabled: "disabled" }, outputs: { chipEnd: "novoChipInputTokenEnd" }, exportAs: ["novoChipInput", "novoChipInputFor"], features: [ɵɵNgOnChangesFeature] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoChipInput, [{
        type: Directive,
        args: [{
                selector: 'input[novoChipInput]',
                exportAs: 'novoChipInput, novoChipInputFor',
                host: {
                    class: 'novo-chip-input novo-input-element',
                    '(keydown)': '_keydown($event)',
                    '(blur)': '_blur()',
                    '(focus)': '_focus()',
                    '(input)': '_onInput()',
                    '[id]': 'id',
                    '[attr.disabled]': 'disabled || null',
                    '[attr.placeholder]': 'placeholder || null',
                    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',
                    '[attr.aria-required]': '_chipList && _chipList.required || null',
                },
            }]
    }], function () { return [{ type: ElementRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [NOVO_CHIPS_DEFAULT_OPTIONS]
            }] }, { type: NovoChipList, decorators: [{
                type: Inject,
                args: [forwardRef(() => NovoChipList)]
            }] }]; }, { addOnBlur: [{
            type: Input,
            args: ['novoChipInputAddOnBlur']
        }], separatorKeyCodes: [{
            type: Input,
            args: ['novoChipInputSeparatorKeyCodes']
        }], chipEnd: [{
            type: Output,
            args: ['novoChipInputTokenEnd']
        }], placeholder: [{
            type: Input
        }], id: [{
            type: Input
        }], disabled: [{
            type: Input
        }] }); })();

// NG2
const _c0$H = ["preview"];
function NovoChipsElement_novo_chip_1_novo_icon_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-icon", 10);
    ɵɵtext(1, "circle");
    ɵɵelementEnd();
} if (rf & 2) {
    const item_r5 = ɵɵnextContext().$implicit;
    const ctx_r6 = ɵɵnextContext();
    ɵɵclassMapInterpolate1("tc-", ctx_r6.getAvatarType(item_r5), "");
} }
function NovoChipsElement_novo_chip_1_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-chip", 7);
    ɵɵlistener("removed", function NovoChipsElement_novo_chip_1_Template_novo_chip_removed_0_listener($event) { ɵɵrestoreView(_r9); const item_r5 = ctx.$implicit; const ctx_r8 = ɵɵnextContext(); return ctx_r8.remove($event, item_r5); })("selectionChange", function NovoChipsElement_novo_chip_1_Template_novo_chip_selectionChange_0_listener($event) { ɵɵrestoreView(_r9); const item_r5 = ctx.$implicit; const ctx_r10 = ɵɵnextContext(); return ctx_r10.select($event, item_r5); })("deselect", function NovoChipsElement_novo_chip_1_Template_novo_chip_deselect_0_listener($event) { ɵɵrestoreView(_r9); const item_r5 = ctx.$implicit; const ctx_r11 = ɵɵnextContext(); return ctx_r11.deselect($event, item_r5); });
    ɵɵtemplate(1, NovoChipsElement_novo_chip_1_novo_icon_1_Template, 2, 3, "novo-icon", 8);
    ɵɵtext(2);
    ɵɵelementStart(3, "novo-icon", 9);
    ɵɵtext(4, "close");
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const item_r5 = ctx.$implicit;
    const ctx_r0 = ɵɵnextContext();
    ɵɵclassProp("selected", item_r5 == ctx_r0.selected);
    ɵɵproperty("disabled", ctx_r0.disablePickerInput);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.getAvatarType(item_r5));
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", item_r5.label, " ");
} }
function NovoChipsElement_div_3_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 11);
    ɵɵelementStart(1, "novo-picker", 12);
    ɵɵlistener("ngModelChange", function NovoChipsElement_div_3_Template_novo_picker_ngModelChange_1_listener($event) { ɵɵrestoreView(_r13); const ctx_r12 = ɵɵnextContext(); return ctx_r12.itemToAdd = $event; })("select", function NovoChipsElement_div_3_Template_novo_picker_select_1_listener($event) { ɵɵrestoreView(_r13); const ctx_r14 = ɵɵnextContext(); return ctx_r14.add($event); })("keydown", function NovoChipsElement_div_3_Template_novo_picker_keydown_1_listener($event) { ɵɵrestoreView(_r13); const ctx_r15 = ɵɵnextContext(); return ctx_r15.onKeyDown($event); })("focus", function NovoChipsElement_div_3_Template_novo_picker_focus_1_listener($event) { ɵɵrestoreView(_r13); const ctx_r16 = ɵɵnextContext(); return ctx_r16.onFocus($event); })("typing", function NovoChipsElement_div_3_Template_novo_picker_typing_1_listener($event) { ɵɵrestoreView(_r13); const ctx_r17 = ɵɵnextContext(); return ctx_r17.onTyping($event); })("blur", function NovoChipsElement_div_3_Template_novo_picker_blur_1_listener($event) { ɵɵrestoreView(_r13); const ctx_r18 = ɵɵnextContext(); return ctx_r18.onTouched($event); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("closeOnSelect", ctx_r1.closeOnSelect)("config", ctx_r1.source)("disablePickerInput", ctx_r1.disablePickerInput)("placeholder", ctx_r1.placeholder)("ngModel", ctx_r1.itemToAdd)("selected", ctx_r1.items)("overrideElement", ctx_r1.element);
} }
function NovoChipsElement_i_7_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 13);
} if (rf & 2) {
    const ctx_r3 = ɵɵnextContext();
    ɵɵclassProp("has-value", ctx_r3.items.length);
} }
function NovoChipsElement_label_8_Template(rf, ctx) { if (rf & 1) {
    const _r20 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "label", 14);
    ɵɵlistener("click", function NovoChipsElement_label_8_Template_label_click_0_listener() { ɵɵrestoreView(_r20); const ctx_r19 = ɵɵnextContext(); return ctx_r19.clearValue(); });
    ɵɵtext(1);
    ɵɵelement(2, "i", 15);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate1("", ctx_r4.labels.clearAll, " ");
} }
// Value accessor for the component (supports ngModel)
const CHIPS_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoChipsElement),
    multi: true,
};
class NovoChipsElement {
    constructor(element, componentUtils, labels) {
        this.element = element;
        this.componentUtils = componentUtils;
        this.labels = labels;
        this.closeOnSelect = false;
        this.placeholder = '';
        this._disablePickerInput = false;
        this.changed = new EventEmitter();
        this.focus = new EventEmitter();
        this.blur = new EventEmitter();
        this.typing = new EventEmitter();
        this.items = [];
        this.selected = null;
        this.config = {};
        // private data model
        this._value = '';
        this._items = new ReplaySubject(1);
        // Placeholders for the callbacks
        this.onModelChange = () => { };
        this.onModelTouched = () => { };
    }
    set disablePickerInput(v) {
        this._disablePickerInput = coerceBooleanProperty(v);
    }
    get disablePickerInput() {
        return this._disablePickerInput;
    }
    ngOnInit() {
        this.setItems();
    }
    get value() {
        return this._value;
    }
    set value(selected) {
        this.itemToAdd = '';
        if (selected !== this._value) {
            this._value = selected;
            this.changed.emit({ value: selected, rawValue: this.items });
            this.onModelChange(selected);
        }
    }
    clearValue() {
        this.items = [];
        this._items.next(this.items);
        this.value = null;
        this.changed.emit({ value: this.value, rawValue: this.items });
        this.onModelChange(this.value);
    }
    setItems() {
        this.items = [];
        if (this.model && Array.isArray(this.model)) {
            const noLabels = [];
            for (const value of this.model) {
                let label;
                if (this.source && this.source.format && Helpers.validateInterpolationProps(this.source.format, value)) {
                    label = Helpers.interpolate(this.source.format, value);
                }
                if (this.source && label && label !== this.source.format) {
                    this.items.push({
                        value,
                        label,
                    });
                }
                else if (this.source.getLabels && typeof this.source.getLabels === 'function') {
                    noLabels.push(value);
                }
                else if (this.source.options && Array.isArray(this.source.options)) {
                    this.items.push(this.getLabelFromOptions(value));
                }
                else if (this.source.categoryMap && this.source.categoryMap.size) {
                    this.items.push(value);
                }
                else {
                    this.items.push({
                        value,
                        label: value,
                    });
                }
            }
            if (noLabels.length > 0 && this.source && this.source.getLabels && typeof this.source.getLabels === 'function') {
                this.source.getLabels(noLabels).then((result) => {
                    for (const value of result) {
                        if (value.hasOwnProperty('label')) {
                            this.items.push({
                                value,
                                label: value.label,
                            });
                        }
                        else if (this.source.options && Array.isArray(this.source.options)) {
                            this.items.push(this.getLabelFromOptions(value));
                        }
                        else {
                            this.items.push(value);
                        }
                    }
                    this._items.next(this.items);
                });
            }
        }
        this.changed.emit({ value: this.model, rawValue: this.items });
        this._items.next(this.items);
    }
    getLabelFromOptions(value) {
        let id = value;
        let optLabel = this.source.options.find((val) => val.value === value);
        if (!optLabel && value.hasOwnProperty('id')) {
            optLabel = this.source.options.find((val) => val.value === value.id);
            id = value.id;
        }
        return {
            value: id,
            label: optLabel ? optLabel.label : value,
        };
    }
    getAvatarType(item) {
        var _a;
        return (this.type || ((_a = item === null || item === void 0 ? void 0 : item.value) === null || _a === void 0 ? void 0 : _a.searchEntity) || '').toLowerCase();
    }
    deselectAll(event) {
        this.selected = null;
        this.hidePreview();
    }
    select(event, item) {
        this.blur.emit(event);
        this.deselectAll();
        this.selected = item;
        this.showPreview();
    }
    deselect(event, item) {
        this.blur.emit(event);
        this.deselectAll();
    }
    onTyping(event) {
        this.typing.emit(event);
    }
    onFocus(event) {
        this.deselectAll();
        this.element.nativeElement.classList.add('selected');
        this.focus.emit(event);
    }
    add(event) {
        if (event && !(event instanceof Event)) {
            this.items.push(event);
            this.value = this.source && this.source.valueFormatter ? this.source.valueFormatter(this.items) : this.items.map((i) => i.value);
            // Set focus on the picker
            const input = this.element.nativeElement.querySelector('novo-picker > input');
            if (input) {
                input.focus();
            }
        }
        this._items.next(this.items);
    }
    remove(event, item) {
        this.items.splice(this.items.indexOf(item), 1);
        this.deselectAll();
        this.value = this.source && this.source.valueFormatter ? this.source.valueFormatter(this.items) : this.items.map((i) => i.value);
        this.changed.emit({ value: this.value.length ? this.value : '', rawValue: this.items });
        this.onModelChange(this.value.length ? this.value : '');
        this._items.next(this.items);
    }
    onKeyDown(event) {
        if (event.key === "Backspace" /* Backspace */) {
            if (event.target && event.target.value.length === 0 && this.items.length) {
                if (event) {
                    event.stopPropagation();
                    event.preventDefault();
                }
                if (this.selected) {
                    this.remove(event, this.selected);
                }
                else {
                    this.select(event, this.items[this.items.length - 1]);
                }
            }
        }
    }
    // Set touched on blur
    onTouched(e) {
        this.element.nativeElement.classList.remove('selected');
        this.onModelTouched();
        this.blur.emit(e);
    }
    writeValue(model) {
        this.model = model;
        this.setItems();
    }
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    setDisabledState(disabled) {
        this._disablePickerInput = disabled;
    }
    /**
     * @name showPreview
     *
     * @description This method creates an instance of the preview (called popup) and adds all the bindings to that
     * instance. Will reuse the popup or create a new one if it does not already exist. Will only work if there is
     * a previewTemplate given in the config.
     */
    showPreview() {
        if (this.source.previewTemplate) {
            if (!this.popup) {
                this.popup = this.componentUtils.append(this.source.previewTemplate, this.preview);
            }
            this.popup.instance.match = this.selected;
        }
    }
    /**
     * @name hidePreview
     *
     * @description - This method deletes the preview popup from the DOM.
     */
    hidePreview() {
        if (this.popup) {
            this.popup.destroy();
            this.popup = null;
        }
    }
}
NovoChipsElement.ɵfac = function NovoChipsElement_Factory(t) { return new (t || NovoChipsElement)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ComponentUtils), ɵɵdirectiveInject(NovoLabelService)); };
NovoChipsElement.ɵcmp = ɵɵdefineComponent({ type: NovoChipsElement, selectors: [["chips"], ["novo-chips"]], viewQuery: function NovoChipsElement_Query(rf, ctx) { if (rf & 1) {
        ɵɵviewQuery(_c0$H, true, ViewContainerRef);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.preview = _t.first);
    } }, hostVars: 4, hostBindings: function NovoChipsElement_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵclassProp("with-value", ctx.items.length > 0)("disabled", ctx.disablePickerInput);
    } }, inputs: { closeOnSelect: "closeOnSelect", placeholder: "placeholder", source: "source", maxlength: "maxlength", type: "type", disablePickerInput: "disablePickerInput", value: "value" }, outputs: { changed: "changed", focus: "focus", blur: "blur", typing: "typing" }, features: [ɵɵProvidersFeature([CHIPS_VALUE_ACCESSOR])], decls: 9, vars: 6, consts: [[1, "novo-chip-container"], [3, "selected", "disabled", "removed", "selectionChange", "deselect", 4, "ngFor", "ngForOf"], ["class", "chip-input-container", 4, "ngIf"], [1, "preview-container"], ["preview", ""], ["class", "bhi-search", 3, "has-value", 4, "ngIf"], ["class", "clear-all", 3, "click", 4, "ngIf"], [3, "disabled", "removed", "selectionChange", "deselect"], ["size", "small", "novoChipAvatar", "", 3, "class", 4, "ngIf"], ["size", "small", "color", "light", "novoChipRemove", ""], ["size", "small", "novoChipAvatar", ""], [1, "chip-input-container"], ["clearValueOnSelect", "true", 3, "closeOnSelect", "config", "disablePickerInput", "placeholder", "ngModel", "selected", "overrideElement", "ngModelChange", "select", "keydown", "focus", "typing", "blur"], [1, "bhi-search"], [1, "clear-all", 3, "click"], [1, "bhi-times"]], template: function NovoChipsElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "div", 0);
        ɵɵtemplate(1, NovoChipsElement_novo_chip_1_Template, 5, 5, "novo-chip", 1);
        ɵɵpipe(2, "async");
        ɵɵelementEnd();
        ɵɵtemplate(3, NovoChipsElement_div_3_Template, 2, 7, "div", 2);
        ɵɵelementStart(4, "div", 3);
        ɵɵelement(5, "span", null, 4);
        ɵɵelementEnd();
        ɵɵtemplate(7, NovoChipsElement_i_7_Template, 1, 2, "i", 5);
        ɵɵtemplate(8, NovoChipsElement_label_8_Template, 3, 1, "label", 6);
    } if (rf & 2) {
        ɵɵadvance(1);
        ɵɵproperty("ngForOf", ɵɵpipeBind1(2, 4, ctx._items));
        ɵɵadvance(2);
        ɵɵproperty("ngIf", !ctx.maxlength || ctx.maxlength && ctx.items.length < ctx.maxlength);
        ɵɵadvance(4);
        ɵɵproperty("ngIf", !ctx.disablePickerInput);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.items.length && !ctx.disablePickerInput);
    } }, directives: [NgForOf, NgIf, NovoChipElement, NovoIconComponent, NovoChipRemove, NovoChipAvatar, NovoPickerElement, NgControlStatus, NgModel], pipes: [AsyncPipe], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoChipsElement, [{
        type: Component,
        args: [{
                selector: 'chips,novo-chips',
                providers: [CHIPS_VALUE_ACCESSOR],
                template: `
    <div class="novo-chip-container">
      <novo-chip
        *ngFor="let item of _items | async"
        [class.selected]="item == selected"
        [disabled]="disablePickerInput"
        (removed)="remove($event, item)"
        (selectionChange)="select($event, item)"
        (deselect)="deselect($event, item)"
      >
        <novo-icon *ngIf="getAvatarType(item)" size="small" class="tc-{{ getAvatarType(item) }}" novoChipAvatar>circle</novo-icon>
        {{ item.label }}
        <novo-icon size="small" color="light" novoChipRemove>close</novo-icon>
      </novo-chip>
    </div>
    <div class="chip-input-container" *ngIf="!maxlength || (maxlength && items.length < maxlength)">
      <novo-picker
        clearValueOnSelect="true"
        [closeOnSelect]="closeOnSelect"
        [config]="source"
        [disablePickerInput]="disablePickerInput"
        [placeholder]="placeholder"
        [(ngModel)]="itemToAdd"
        (select)="add($event)"
        (keydown)="onKeyDown($event)"
        (focus)="onFocus($event)"
        (typing)="onTyping($event)"
        (blur)="onTouched($event)"
        [selected]="items"
        [overrideElement]="element"
      >
      </novo-picker>
    </div>
    <div class="preview-container">
      <span #preview></span>
    </div>
    <i class="bhi-search" [class.has-value]="items.length" *ngIf="!disablePickerInput"></i>
    <label class="clear-all" *ngIf="items.length && !disablePickerInput" (click)="clearValue()"
      >{{ labels.clearAll }} <i class="bhi-times"></i
    ></label>
  `,
                host: {
                    '[class.with-value]': 'items.length > 0',
                    '[class.disabled]': 'disablePickerInput',
                },
            }]
    }], function () { return [{ type: ElementRef }, { type: ComponentUtils }, { type: NovoLabelService }]; }, { closeOnSelect: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], source: [{
            type: Input
        }], maxlength: [{
            type: Input
        }], type: [{
            type: Input
        }], disablePickerInput: [{
            type: Input
        }], changed: [{
            type: Output
        }], focus: [{
            type: Output
        }], blur: [{
            type: Output
        }], typing: [{
            type: Output
        }], preview: [{
            type: ViewChild,
            args: ['preview', { read: ViewContainerRef }]
        }], value: [{
            type: Input
        }] }); })();

// NG2
function NovoRowChipElement_i_2_Template(rf, ctx) { if (rf & 1) {
    const _r2 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "i", 2);
    ɵɵlistener("click", function NovoRowChipElement_i_2_Template_i_click_0_listener() { ɵɵrestoreView(_r2); const ctx_r1 = ɵɵnextContext(); return ctx_r1.remove(); });
    ɵɵelementEnd();
} }
const _c0$I = ["*"];
function NovoRowChipsElement_div_0_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 8);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const column_r6 = ctx.$implicit;
    ɵɵadvance(1);
    ɵɵtextInterpolate(column_r6.label);
} }
function NovoRowChipsElement_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 6);
    ɵɵtemplate(1, NovoRowChipsElement_div_0_div_1_Template, 2, 1, "div", 7);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r0.source.columns);
} }
function NovoRowChipsElement_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 9);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r1.source.emptyReadOnlyMessage, " ");
} }
function NovoRowChipsElement_novo_row_chip_2_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 12);
    ɵɵelementStart(1, "span");
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const column_r9 = ctx.$implicit;
    const item_r7 = ɵɵnextContext().$implicit;
    ɵɵadvance(2);
    ɵɵtextInterpolate(column_r9.data(item_r7));
} }
function NovoRowChipsElement_novo_row_chip_2_Template(rf, ctx) { if (rf & 1) {
    const _r12 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-row-chip", 10);
    ɵɵlistener("removed", function NovoRowChipsElement_novo_row_chip_2_Template_novo_row_chip_removed_0_listener($event) { ɵɵrestoreView(_r12); const item_r7 = ctx.$implicit; const ctx_r11 = ɵɵnextContext(); return ctx_r11.remove($event, item_r7); })("selectionChange", function NovoRowChipsElement_novo_row_chip_2_Template_novo_row_chip_selectionChange_0_listener($event) { ɵɵrestoreView(_r12); const item_r7 = ctx.$implicit; const ctx_r13 = ɵɵnextContext(); return ctx_r13.select($event, item_r7); });
    ɵɵtemplate(1, NovoRowChipsElement_novo_row_chip_2_div_1_Template, 3, 1, "div", 11);
    ɵɵelementEnd();
} if (rf & 2) {
    const item_r7 = ctx.$implicit;
    const ctx_r2 = ɵɵnextContext();
    ɵɵclassProp("selected", item_r7 == ctx_r2.selected);
    ɵɵproperty("type", ctx_r2.type || (item_r7 == null ? null : item_r7.value == null ? null : item_r7.value.searchEntity))("disabled", ctx_r2.disablePickerInput);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r2.source.columns);
} }
function NovoRowChipsElement_novo_picker_4_Template(rf, ctx) { if (rf & 1) {
    const _r15 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-picker", 13);
    ɵɵlistener("ngModelChange", function NovoRowChipsElement_novo_picker_4_Template_novo_picker_ngModelChange_0_listener($event) { ɵɵrestoreView(_r15); const ctx_r14 = ɵɵnextContext(); return ctx_r14.itemToAdd = $event; })("select", function NovoRowChipsElement_novo_picker_4_Template_novo_picker_select_0_listener($event) { ɵɵrestoreView(_r15); const ctx_r16 = ɵɵnextContext(); return ctx_r16.add($event); })("keydown", function NovoRowChipsElement_novo_picker_4_Template_novo_picker_keydown_0_listener($event) { ɵɵrestoreView(_r15); const ctx_r17 = ɵɵnextContext(); return ctx_r17.onKeyDown($event); })("focus", function NovoRowChipsElement_novo_picker_4_Template_novo_picker_focus_0_listener($event) { ɵɵrestoreView(_r15); const ctx_r18 = ɵɵnextContext(); return ctx_r18.onFocus($event); })("typing", function NovoRowChipsElement_novo_picker_4_Template_novo_picker_typing_0_listener($event) { ɵɵrestoreView(_r15); const ctx_r19 = ɵɵnextContext(); return ctx_r19.onTyping($event); })("blur", function NovoRowChipsElement_novo_picker_4_Template_novo_picker_blur_0_listener($event) { ɵɵrestoreView(_r15); const ctx_r20 = ɵɵnextContext(); return ctx_r20.onTouched($event); });
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵɵnextContext();
    ɵɵproperty("closeOnSelect", ctx_r3.closeOnSelect)("config", ctx_r3.source)("disablePickerInput", ctx_r3.disablePickerInput)("hidden", ctx_r3.disablePickerInput)("placeholder", ctx_r3.placeholder)("ngModel", ctx_r3.itemToAdd)("selected", ctx_r3.items)("overrideElement", ctx_r3.element);
} }
// Value accessor for the component (supports ngModel)
const CHIPS_VALUE_ACCESSOR$1 = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoRowChipsElement),
    multi: true,
};
class NovoRowChipElement extends NovoChipElement {
    onSelect(e) {
        return false;
    }
}
NovoRowChipElement.ɵfac = function NovoRowChipElement_Factory(t) { return ɵNovoRowChipElement_BaseFactory(t || NovoRowChipElement); };
NovoRowChipElement.ɵcmp = ɵɵdefineComponent({ type: NovoRowChipElement, selectors: [["novo-row-chip"]], features: [ɵɵInheritDefinitionFeature], ngContentSelectors: _c0$I, decls: 3, vars: 1, consts: [[1, "novo-row-chips-columns"], ["class", "bhi-delete-o", 3, "click", 4, "ngIf"], [1, "bhi-delete-o", 3, "click"]], template: function NovoRowChipElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵelementStart(0, "div", 0);
        ɵɵprojection(1);
        ɵɵtemplate(2, NovoRowChipElement_i_2_Template, 1, 0, "i", 1);
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵadvance(2);
        ɵɵproperty("ngIf", !ctx.disabled);
    } }, directives: [NgIf], encapsulation: 2 });
const ɵNovoRowChipElement_BaseFactory = /*@__PURE__*/ ɵɵgetInheritedFactory(NovoRowChipElement);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoRowChipElement, [{
        type: Component,
        args: [{
                selector: 'novo-row-chip',
                template: `<div class="novo-row-chips-columns">
    <ng-content></ng-content><i class="bhi-delete-o" *ngIf="!disabled" (click)="remove()"></i>
  </div>`,
            }]
    }], null, null); })();
class NovoRowChipsElement extends NovoChipsElement {
    constructor(element, componentUtils, labels) {
        super(element, componentUtils, labels);
        this.closeOnSelect = true;
    }
    onKeyDown(event) {
        return;
    }
}
NovoRowChipsElement.ɵfac = function NovoRowChipsElement_Factory(t) { return new (t || NovoRowChipsElement)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ComponentUtils), ɵɵdirectiveInject(NovoLabelService)); };
NovoRowChipsElement.ɵcmp = ɵɵdefineComponent({ type: NovoRowChipsElement, selectors: [["novo-row-chips"]], hostVars: 2, hostBindings: function NovoRowChipsElement_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵclassProp("with-value", ctx.items.length > 0);
    } }, inputs: { closeOnSelect: "closeOnSelect" }, features: [ɵɵProvidersFeature([CHIPS_VALUE_ACCESSOR$1]), ɵɵInheritDefinitionFeature], decls: 8, vars: 6, consts: [["class", "novo-row-chips-columns", 4, "ngIf"], ["class", "novo-row-chips-empty-message", 4, "ngIf"], [3, "type", "selected", "disabled", "removed", "selectionChange", 4, "ngFor", "ngForOf"], ["clearValueOnSelect", "true", 3, "closeOnSelect", "config", "disablePickerInput", "hidden", "placeholder", "ngModel", "selected", "overrideElement", "ngModelChange", "select", "keydown", "focus", "typing", "blur", 4, "ngIf"], [1, "preview-container"], ["preview", ""], [1, "novo-row-chips-columns"], ["class", "column-label", 4, "ngFor", "ngForOf"], [1, "column-label"], [1, "novo-row-chips-empty-message"], [3, "type", "disabled", "removed", "selectionChange"], ["class", "column-data", 4, "ngFor", "ngForOf"], [1, "column-data"], ["clearValueOnSelect", "true", 3, "closeOnSelect", "config", "disablePickerInput", "hidden", "placeholder", "ngModel", "selected", "overrideElement", "ngModelChange", "select", "keydown", "focus", "typing", "blur"]], template: function NovoRowChipsElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵtemplate(0, NovoRowChipsElement_div_0_Template, 2, 1, "div", 0);
        ɵɵtemplate(1, NovoRowChipsElement_div_1_Template, 2, 1, "div", 1);
        ɵɵtemplate(2, NovoRowChipsElement_novo_row_chip_2_Template, 2, 5, "novo-row-chip", 2);
        ɵɵpipe(3, "async");
        ɵɵtemplate(4, NovoRowChipsElement_novo_picker_4_Template, 1, 8, "novo-picker", 3);
        ɵɵelementStart(5, "div", 4);
        ɵɵelement(6, "span", null, 5);
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵproperty("ngIf", ctx.items.length > 0);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.source.emptyReadOnlyMessage && ctx.disablePickerInput && ctx.items.length === 0);
        ɵɵadvance(1);
        ɵɵproperty("ngForOf", ɵɵpipeBind1(3, 4, ctx._items));
        ɵɵadvance(2);
        ɵɵproperty("ngIf", !ctx.maxlength || ctx.maxlength && ctx.items.length < ctx.maxlength);
    } }, directives: [NgIf, NgForOf, NovoRowChipElement, NovoPickerElement, NgControlStatus, NgModel], pipes: [AsyncPipe], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoRowChipsElement, [{
        type: Component,
        args: [{
                selector: 'novo-row-chips',
                providers: [CHIPS_VALUE_ACCESSOR$1],
                host: {
                    '[class.with-value]': 'items.length > 0',
                },
                template: `
    <div class="novo-row-chips-columns" *ngIf="items.length > 0">
      <div class="column-label" *ngFor="let column of source.columns">{{ column.label }}</div>
    </div>
    <div class="novo-row-chips-empty-message" *ngIf="source.emptyReadOnlyMessage && disablePickerInput && items.length === 0">
      {{ source.emptyReadOnlyMessage }}
    </div>
    <novo-row-chip
      *ngFor="let item of _items | async"
      [type]="type || item?.value?.searchEntity"
      [class.selected]="item == selected"
      [disabled]="disablePickerInput"
      (removed)="remove($event, item)"
      (selectionChange)="select($event, item)"
    >
      <div class="column-data" *ngFor="let column of source.columns">
        <span>{{ column.data(item) }}</span>
      </div>
    </novo-row-chip>
    <novo-picker
      clearValueOnSelect="true"
      [closeOnSelect]="closeOnSelect"
      [config]="source"
      [disablePickerInput]="disablePickerInput"
      [hidden]="disablePickerInput"
      [placeholder]="placeholder"
      [(ngModel)]="itemToAdd"
      (select)="add($event)"
      (keydown)="onKeyDown($event)"
      (focus)="onFocus($event)"
      (typing)="onTyping($event)"
      (blur)="onTouched($event)"
      [selected]="items"
      [overrideElement]="element"
      *ngIf="!maxlength || (maxlength && items.length < maxlength)"
    >
    </novo-picker>
    <div class="preview-container">
      <span #preview></span>
    </div>
  `,
            }]
    }], function () { return [{ type: ElementRef }, { type: ComponentUtils }, { type: NovoLabelService }]; }, { closeOnSelect: [{
            type: Input
        }] }); })();

// NG2
class NovoChipsModule {
}
NovoChipsModule.ɵmod = ɵɵdefineNgModule({ type: NovoChipsModule });
NovoChipsModule.ɵinj = ɵɵdefineInjector({ factory: function NovoChipsModule_Factory(t) { return new (t || NovoChipsModule)(); }, providers: [
        ErrorStateMatcher,
        {
            provide: NOVO_CHIPS_DEFAULT_OPTIONS,
            useValue: {
                separatorKeyCodes: ["Enter" /* Enter */],
            },
        },
    ], imports: [[CommonModule, FormsModule, NovoPickerModule, NovoIconModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoChipsModule, { declarations: [NovoChipElement,
        NovoChipAvatar,
        NovoChipRemove,
        NovoChipInput,
        NovoChipList,
        NovoChipsElement,
        NovoRowChipElement,
        NovoRowChipsElement], imports: [CommonModule, FormsModule, NovoPickerModule, NovoIconModule], exports: [NovoChipElement,
        NovoChipAvatar,
        NovoChipRemove,
        NovoChipInput,
        NovoChipList,
        NovoChipsElement,
        NovoRowChipElement,
        NovoRowChipsElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoChipsModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, FormsModule, NovoPickerModule, NovoIconModule],
                declarations: [
                    NovoChipElement,
                    NovoChipAvatar,
                    NovoChipRemove,
                    NovoChipInput,
                    NovoChipList,
                    NovoChipsElement,
                    NovoRowChipElement,
                    NovoRowChipsElement,
                ],
                exports: [
                    NovoChipElement,
                    NovoChipAvatar,
                    NovoChipRemove,
                    NovoChipInput,
                    NovoChipList,
                    NovoChipsElement,
                    NovoRowChipElement,
                    NovoRowChipsElement,
                ],
                providers: [
                    ErrorStateMatcher,
                    {
                        provide: NOVO_CHIPS_DEFAULT_OPTIONS,
                        useValue: {
                            separatorKeyCodes: ["Enter" /* Enter */],
                        },
                    },
                ],
            }]
    }], null, null); })();

// NG2
const _c0$J = ["host"];
// Value accessor for the component (supports ngModel)
const CKEDITOR_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoCKEditorElement),
    multi: true,
};
/**
 * CKEditor component
 * Usage :
 *  <novo-editor [(ngModel)]="data" [config]="{...}" debounce="500"></novo-editor>
 */
class NovoCKEditorElement {
    constructor(zone) {
        this.zone = zone;
        this.startupFocus = false;
        this.fileBrowserImageUploadUrl = '';
        this.disabled = false;
        this.change = new EventEmitter();
        this.ready = new EventEmitter();
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this.paste = new EventEmitter();
        this.loaded = new EventEmitter();
        this._value = '';
    }
    get value() {
        return this._value;
    }
    set value(v) {
        if (v !== this._value) {
            this._value = v;
            this.onChange(v);
        }
    }
    ngOnDestroy() {
        if (this.instance) {
            this.instance.focusManager.blur(true); // Remove focus from editor
            setTimeout(() => {
                this.instance.removeAllListeners();
                const aInstance = CKEDITOR.instances[this.instance.name];
                if (aInstance) {
                    aInstance.destroy();
                }
                this.instance.destroy();
                this.instance = null;
            });
        }
    }
    ngAfterViewInit() {
        const config = Object.assign(this.getBaseConfig(), this.config);
        if (this.startupFocus) {
            config.startupFocus = true;
        }
        if (this.disabled) {
            config.readOnly = true;
        }
        this.ckeditorInit(config);
    }
    updateValue(value) {
        this.zone.run(() => {
            this.value = value;
            this.onChange(value);
            this.onTouched();
            this.change.emit(value);
        });
    }
    ckeditorInit(config) {
        if (!CKEDITOR) {
            console.error('Make sure to include CKEditor sources in your dependencies!');
            return;
        }
        // CKEditor replace textarea
        this.instance = CKEDITOR.replace(this.host.nativeElement, config);
        // Set initial value
        this.instance.setData(this.value);
        // listen for instanceReady event
        this.instance.on('instanceReady', (evt) => {
            // send the evt to the EventEmitter
            this.ready.emit(evt);
        });
        // CKEditor change event
        this.instance.on('change', () => {
            this.onTouched();
            const value = this.instance.getData();
            // Debounce update
            if (this.debounce) {
                if (this.debounceTimeout) {
                    clearTimeout(this.debounceTimeout);
                }
                this.debounceTimeout = setTimeout(() => {
                    this.updateValue(value);
                    this.debounceTimeout = null;
                }, parseInt(this.debounce, 10));
            }
            else {
                this.updateValue(value);
            }
        });
        this.instance.on('blur', (event) => {
            this.blur.emit(event);
        });
        this.instance.on('focus', (event) => {
            this.focus.emit(event);
        });
        this.instance.on('paste', (event) => {
            this.paste.emit(event);
        });
        this.instance.on('loaded', (event) => {
            this.loaded.emit(event);
        });
    }
    getBaseConfig() {
        const baseConfig = {
            enterMode: CKEDITOR.ENTER_BR,
            shiftEnterMode: CKEDITOR.ENTER_P,
            disableNativeSpellChecker: false,
            removePlugins: 'liststyle,tabletools,contextmenu',
            extraAllowedContent: '*(*){*};table tbody tr td th[*];',
            font_names: 'Arial/Arial, Helvetica, sans-serif;' +
                'Calibri/Calibri, Verdana, Geneva, sans-serif;' +
                'Comic Sans MS/Comic Sans MS, cursive;' +
                'Courier New/Courier New, Courier, monospace;' +
                'Georgia/Georgia, serif;' +
                'Lucida Sans Unicode/Lucida Sans Unicode, Lucida Grande, sans-serif;' +
                'Tahoma/Tahoma, Geneva, sans-serif;' +
                'Times New Roman/Times New Roman, Times, serif;' +
                'Trebuchet MS/Trebuchet MS, Helvetica, sans-serif;' +
                'Verdana/Verdana, Geneva, sans-serif',
        };
        const minimalConfig = {
            toolbar: [
                {
                    name: 'basicstyles',
                    items: [
                        'Styles',
                        'FontSize',
                        'Bold',
                        'Italic',
                        'Underline',
                        'TextColor',
                        '-',
                        'NumberedList',
                        'BulletedList',
                        'Outdent',
                        'Indent',
                        'Link',
                    ],
                },
            ],
        };
        const extendedConfig = {
            toolbar: [
                { name: 'clipboard', items: ['Paste', 'PasteText', 'PasteFromWord', 'Undo', 'Redo'] },
                {
                    name: 'paragraph',
                    items: [
                        'NumberedList',
                        'BulletedList',
                        'Outdent',
                        'Indent',
                        'Blockquote',
                        'JustifyLeft',
                        'JustifyCenter',
                        'JustifyRight',
                        'JustifyBlock',
                        'BidiLtr',
                        'BidiRtl',
                    ],
                },
                { name: 'links', items: ['Link'] },
                { name: 'insert', items: ['Image', 'Table', 'HorizontalRule'] },
                { name: 'tools', items: ['Maximize', 'Source'] },
                '/',
                { name: 'basicstyles', items: ['Bold', 'Italic', 'Underline', 'Strike', 'Subscript', 'Superscript'] },
                { name: 'styles', items: ['Styles', 'Format', 'Font', 'FontSize'] },
                { name: 'colors', items: ['TextColor', 'BGColor'] },
            ],
            filebrowserImageUploadUrl: this.fileBrowserImageUploadUrl,
        };
        return Object.assign(baseConfig, this.minimal ? minimalConfig : extendedConfig);
    }
    writeValue(value) {
        this._value = value;
        if (this.instance) {
            this.instance.setData(value);
        }
    }
    onChange(value) { }
    onTouched(event) { }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(disabled) {
        this.disabled = disabled;
        if (this.instance) {
            CKEDITOR.instances[this.instance.name].setReadOnly(disabled);
        }
    }
    insertText(text) {
        const trimmedText = text.trim();
        this.instance.insertText(trimmedText);
    }
}
NovoCKEditorElement.ɵfac = function NovoCKEditorElement_Factory(t) { return new (t || NovoCKEditorElement)(ɵɵdirectiveInject(NgZone)); };
NovoCKEditorElement.ɵcmp = ɵɵdefineComponent({ type: NovoCKEditorElement, selectors: [["novo-editor"]], viewQuery: function NovoCKEditorElement_Query(rf, ctx) { if (rf & 1) {
        ɵɵviewQuery(_c0$J, true);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.host = _t.first);
    } }, inputs: { config: "config", debounce: "debounce", name: "name", minimal: "minimal", startupFocus: "startupFocus", fileBrowserImageUploadUrl: "fileBrowserImageUploadUrl", disabled: "disabled", value: "value" }, outputs: { change: "change", ready: "ready", blur: "blur", focus: "focus", paste: "paste", loaded: "loaded" }, features: [ɵɵProvidersFeature([CKEDITOR_CONTROL_VALUE_ACCESSOR])], decls: 2, vars: 2, consts: [[3, "name", "id"], ["host", ""]], template: function NovoCKEditorElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵelement(0, "textarea", 0, 1);
    } if (rf & 2) {
        ɵɵproperty("name", ctx.name)("id", ctx.name);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoCKEditorElement, [{
        type: Component,
        args: [{
                selector: 'novo-editor',
                providers: [CKEDITOR_CONTROL_VALUE_ACCESSOR],
                template: '<textarea [name]="name" [id]="name" #host></textarea>',
            }]
    }], function () { return [{ type: NgZone }]; }, { config: [{
            type: Input
        }], debounce: [{
            type: Input
        }], name: [{
            type: Input
        }], minimal: [{
            type: Input
        }], startupFocus: [{
            type: Input
        }], fileBrowserImageUploadUrl: [{
            type: Input
        }], disabled: [{
            type: Input
        }], change: [{
            type: Output
        }], ready: [{
            type: Output
        }], blur: [{
            type: Output
        }], focus: [{
            type: Output
        }], paste: [{
            type: Output
        }], loaded: [{
            type: Output
        }], host: [{
            type: ViewChild,
            args: ['host']
        }], value: [{
            type: Input
        }] }); })();

// NG2
class NovoNovoCKEditorModule {
}
NovoNovoCKEditorModule.ɵmod = ɵɵdefineNgModule({ type: NovoNovoCKEditorModule });
NovoNovoCKEditorModule.ɵinj = ɵɵdefineInjector({ factory: function NovoNovoCKEditorModule_Factory(t) { return new (t || NovoNovoCKEditorModule)(); }, imports: [[CommonModule, FormsModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoNovoCKEditorModule, { declarations: [NovoCKEditorElement], imports: [CommonModule, FormsModule], exports: [NovoCKEditorElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoNovoCKEditorModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, FormsModule],
                declarations: [NovoCKEditorElement],
                exports: [NovoCKEditorElement],
            }]
    }], null, null); })();

class Color {
    constructor(value) {
        this.isValid = true;
        if (Color.isHSL(value)) {
            // let { h, s, l, a = 1 } = value as HSLA;
            this.source = rgbToHex(hslToRgb(value));
        }
        else if (Color.isHSV(value)) {
            this.source = rgbToHex(hsvToRgb(value));
        }
        else if (Color.isRGB(value)) {
            this.source = rgbToHex(value);
        }
        else if (Color.isValidHex(value.toString())) {
            this.source = value;
        }
        else {
            this.isValid = false;
            console.error(`Invalid color: ${value}`);
        }
    }
    get hex() {
        return this.source;
    }
    get rgb() {
        return hexToRgb(this.source);
    }
    get hsl() {
        return rgbToHsl(hexToRgb(this.source));
    }
    get hsv() {
        return rgbToHsv(hexToRgb(this.source));
    }
    static isValidHex(h) {
        const clean = h.replace('#', '').toLowerCase();
        const a = parseInt(clean, 16);
        return a.toString(16).padStart(6, '0') === clean;
    }
    static isRGB(obj) {
        const keys = ['r', 'g', 'b'];
        return keys.every((item) => obj.hasOwnProperty(item));
    }
    static isRGBA(obj) {
        const keys = ['r', 'g', 'b', 'a'];
        return keys.every((item) => obj.hasOwnProperty(item));
    }
    static isHSL(obj) {
        const keys = ['h', 's', 'l'];
        return keys.every((item) => obj.hasOwnProperty(item));
    }
    static isHSLA(obj) {
        const keys = ['h', 's', 'l', 'a'];
        return keys.every((item) => obj.hasOwnProperty(item));
    }
    static isHSV(obj) {
        const keys = ['h', 's', 'v'];
        return keys.every((item) => obj.hasOwnProperty(item));
    }
    static isHSVA(obj) {
        const keys = ['h', 's', 'v', 'a'];
        return keys.every((item) => obj.hasOwnProperty(item));
    }
}
function componentToHex(c) {
    const hex = c.toString(16);
    return hex.length === 1 ? '0' + hex : hex;
}
function rgbToHex({ r, g, b }) {
    return '#' + componentToHex(r) + componentToHex(g) + componentToHex(b);
}
function hexToRgb(hex) {
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result
        ? {
            r: parseInt(result[1], 16),
            g: parseInt(result[2], 16),
            b: parseInt(result[3], 16),
        }
        : null;
}
/**
 * Converts an RGB color value to HSL. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
 * Assumes r, g, and b are contained in the set [0, 255] and
 * returns h, s, and l in the set [0, 1].
 *
 * @param   Number  r       The red color value
 * @param   Number  g       The green color value
 * @param   Number  b       The blue color value
 * @return  Array           The HSL representation
 */
function rgbToHsl({ r, g, b }) {
    (r /= 255), (g /= 255), (b /= 255);
    const max = Math.max(r, g, b);
    const min = Math.min(r, g, b);
    let h;
    let s;
    const l = (max + min) / 2;
    if (max === min) {
        h = s = 0; // achromatic
    }
    else {
        const d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        switch (max) {
            case r:
                h = (g - b) / d + (g < b ? 6 : 0);
                break;
            case g:
                h = (b - r) / d + 2;
                break;
            case b:
                h = (r - g) / d + 4;
                break;
        }
        h /= 6;
    }
    return { h, s, l };
}
/**
 * Converts an HSL color value to RGB. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
 * Assumes h, s, and l are contained in the set [0, 1] and
 * returns r, g, and b in the set [0, 255].
 *
 * @param   Number  h       The hue
 * @param   Number  s       The saturation
 * @param   Number  l       The lightness
 * @return  Array           The RGB representation
 */
function hslToRgb({ h, s, l }) {
    let r, g, b;
    if (s === 0) {
        r = g = b = l; // achromatic
    }
    else {
        function hue2rgb(p1, q1, t1) {
            if (t1 < 0) {
                t1 += 1;
            }
            if (t1 > 1) {
                t1 -= 1;
            }
            if (t1 < 1 / 6) {
                return p1 + (q1 - p1) * 6 * t1;
            }
            if (t1 < 1 / 2) {
                return q1;
            }
            if (t1 < 2 / 3) {
                return p1 + (q1 - p1) * (2 / 3 - t1) * 6;
            }
            return p1;
        }
        const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        const p = 2 * l - q;
        r = hue2rgb(p, q, h + 1 / 3);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1 / 3);
    }
    return {
        r: r * 255,
        g: g * 255,
        b: b * 255,
    };
}
/**
 * Converts an RGB color value to HSV. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSV_color_space.
 * Assumes r, g, and b are contained in the set [0, 255] and
 * returns h, s, and v in the set [0, 1].
 *
 * @param   Number  r       The red color value
 * @param   Number  g       The green color value
 * @param   Number  b       The blue color value
 * @return  Array           The HSV representation
 */
function rgbToHsv({ r, g, b }) {
    (r = r / 255), (g = g / 255), (b = b / 255);
    const max = Math.max(r, g, b);
    const min = Math.min(r, g, b);
    let h;
    let s;
    const v = max;
    const d = max - min;
    s = max === 0 ? 0 : d / max;
    if (max === min) {
        h = 0; // achromatic
    }
    else {
        switch (max) {
            case r:
                h = (g - b) / d + (g < b ? 6 : 0);
                break;
            case g:
                h = (b - r) / d + 2;
                break;
            case b:
                h = (r - g) / d + 4;
                break;
        }
        h /= 6;
    }
    return { h, s, v };
}
/**
 * Converts an HSV color value to RGB. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSV_color_space.
 * Assumes h, s, and v are contained in the set [0, 1] and
 * returns r, g, and b in the set [0, 255].
 *
 * @param   Number  h       The hue
 * @param   Number  s       The saturation
 * @param   Number  v       The value
 * @return  Array           The RGB representation
 */
function hsvToRgb({ h, s, v }) {
    let r, g, b;
    const i = Math.floor(h * 6);
    const f = h * 6 - i;
    const p = v * (1 - s);
    const q = v * (1 - f * s);
    const t = v * (1 - (1 - f) * s);
    switch (i % 6) {
        case 0:
            (r = v), (g = t), (b = p);
            break;
        case 1:
            (r = q), (g = v), (b = p);
            break;
        case 2:
            (r = p), (g = v), (b = t);
            break;
        case 3:
            (r = p), (g = q), (b = v);
            break;
        case 4:
            (r = t), (g = p), (b = v);
            break;
        case 5:
            (r = v), (g = p), (b = q);
            break;
    }
    return {
        r: r * 255,
        g: g * 255,
        b: b * 255,
    };
}

const _c0$K = ["*"];
class NovoColorSwatchComponent {
    constructor() {
        this.style = {};
        this.focusStyle = {};
        this.onClick = new EventEmitter();
        this.onHover = new EventEmitter();
        this.divStyles = {};
        this.focusStyles = {};
        this.inFocus = false;
    }
    ngOnInit() {
        this.divStyles = Object.assign({ background: this.color, height: '100%', width: '100%', cursor: 'pointer', position: 'relative', outline: 'none' }, this.style);
    }
    currentStyles() {
        this.focusStyles = Object.assign(Object.assign({}, this.divStyles), this.focusStyle);
        return this.focus || this.inFocus ? this.focusStyles : this.divStyles;
    }
    handleFocusOut() {
        this.inFocus = false;
    }
    handleFocus() {
        this.inFocus = true;
    }
    handleHover(hex, $event) {
        this.onHover.emit({ hex, $event });
    }
    handleClick(hex, $event) {
        this.onClick.emit({ hex, $event });
    }
}
NovoColorSwatchComponent.ɵfac = function NovoColorSwatchComponent_Factory(t) { return new (t || NovoColorSwatchComponent)(); };
NovoColorSwatchComponent.ɵcmp = ɵɵdefineComponent({ type: NovoColorSwatchComponent, selectors: [["novo-color-swatch"]], inputs: { color: "color", style: "style", focusStyle: "focusStyle", focus: "focus" }, outputs: { onClick: "onClick", onHover: "onHover" }, ngContentSelectors: _c0$K, decls: 2, vars: 2, consts: [["tabindex", "0", 1, "swatch", 3, "ngStyle", "click", "keydown.enter", "focus", "blur", "mouseover"]], template: function NovoColorSwatchComponent_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵelementStart(0, "div", 0);
        ɵɵlistener("click", function NovoColorSwatchComponent_Template_div_click_0_listener($event) { return ctx.handleClick(ctx.color, $event); })("keydown.enter", function NovoColorSwatchComponent_Template_div_keydown_enter_0_listener($event) { return ctx.handleClick(ctx.color, $event); })("focus", function NovoColorSwatchComponent_Template_div_focus_0_listener() { return ctx.handleFocus(); })("blur", function NovoColorSwatchComponent_Template_div_blur_0_listener() { return ctx.handleFocusOut(); })("mouseover", function NovoColorSwatchComponent_Template_div_mouseover_0_listener($event) { return ctx.handleHover(ctx.color, $event); });
        ɵɵprojection(1);
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵproperty("ngStyle", ctx.currentStyles());
        ɵɵattribute("title", ctx.color);
    } }, directives: [NgStyle], styles: [".swatch[_ngcontent-%COMP%] {\n        border-radius: 0.4rem;\n      }"], changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoColorSwatchComponent, [{
        type: Component,
        args: [{
                selector: 'novo-color-swatch',
                template: `
    <div
      class="swatch"
      [ngStyle]="currentStyles()"
      [attr.title]="color"
      (click)="handleClick(color, $event)"
      (keydown.enter)="handleClick(color, $event)"
      (focus)="handleFocus()"
      (blur)="handleFocusOut()"
      (mouseover)="handleHover(color, $event)"
      tabindex="0"
    >
      <ng-content></ng-content>
    </div>
  `,
                styles: [
                    `
      .swatch {
        border-radius: 0.4rem;
      }
    `,
                ],
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], null, { color: [{
            type: Input
        }], style: [{
            type: Input
        }], focusStyle: [{
            type: Input
        }], focus: [{
            type: Input
        }], onClick: [{
            type: Output
        }], onHover: [{
            type: Output
        }] }); })();

function NovoColorPickerComponent_novo_color_swatch_4_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-color-swatch", 6);
    ɵɵlistener("onClick", function NovoColorPickerComponent_novo_color_swatch_4_Template_novo_color_swatch_onClick_0_listener($event) { ɵɵrestoreView(_r3); const ctx_r2 = ɵɵnextContext(); return ctx_r2.handleBlockChange($event); })("onHover", function NovoColorPickerComponent_novo_color_swatch_4_Template_novo_color_swatch_onHover_0_listener($event) { ɵɵrestoreView(_r3); const ctx_r4 = ɵɵnextContext(); return ctx_r4.handleSwatchHover($event); });
    ɵɵelementEnd();
} if (rf & 2) {
    const color_r1 = ctx.$implicit;
    ɵɵproperty("color", color_r1);
} }
class NovoColorPickerComponent {
    constructor() {
        /** Pixel value for picker width */
        this.width = 276;
        /** Color squares to display */
        this.colors = ['#FF6900', '#FCB900', '#7BDCB5', '#00D084', '#8ED1FC', '#0693E3', '#ABB8C3', '#EB144C', '#F78DA7', '#9900EF'];
        this.color = {
            h: 250,
            s: 0.5,
            l: 0.2,
            a: 1,
        };
        this.onChange = new EventEmitter();
        this.onChangeComplete = new EventEmitter();
        this.onSwatchHover = new EventEmitter();
        this.swatchStyle = {
            width: '30px',
            height: '30px',
            borderRadius: '4px',
            fontSize: '0',
        };
        this.input = {
            borderRadius: '4px',
            borderBottomLeftRadius: '0',
            borderTopLeftRadius: '0',
            border: '1px solid #e6ecf0',
            boxSizing: 'border-box',
            display: 'inline',
            fontSize: '14px',
            height: '30px',
            padding: '0',
            paddingLeft: '6px',
            width: '100%',
            color: '#657786',
        };
    }
    focus(color) {
        return { boxShadow: `0 0 4px ${color}` };
    }
    handleBlockChange({ hex, $event }) {
        if (Color.isValidHex(hex)) {
            // this.hex = hex;
            this.handleChange({ hex, source: 'hex' }, $event);
        }
    }
    handleValueChange({ data, $event }) {
        this.handleBlockChange({ hex: data, $event });
    }
    ngOnInit() {
        this.changes = this.onChange.pipe(debounceTime(100)).subscribe((x) => this.onChangeComplete.emit(x));
        this.setState(new Color(this.color));
    }
    ngOnChanges() {
        this.setState(new Color(this.color));
    }
    ngOnDestroy() {
        this.changes.unsubscribe();
    }
    setState(data) {
        this.currentColor = data;
        this.hsl = data.hsl;
        this.hsv = data.hsv;
        this.rgb = data.rgb;
        this.hex = data.hex;
        this.afterValidChange();
    }
    handleChange(data, $event) {
        const color = new Color(data.hex);
        if (color.isValid) {
            this.setState(color);
            this.onChange.emit({ color, $event });
            this.afterValidChange();
        }
    }
    /** hook for components after a complete change */
    afterValidChange() { }
    handleSwatchHover($event) {
        const color = new Color($event.hex);
        if (color.isValid) {
            this.setState(color);
            this.onSwatchHover.emit({ color, $event });
        }
    }
}
NovoColorPickerComponent.ɵfac = function NovoColorPickerComponent_Factory(t) { return new (t || NovoColorPickerComponent)(); };
NovoColorPickerComponent.ɵcmp = ɵɵdefineComponent({ type: NovoColorPickerComponent, selectors: [["novo-color-picker"]], inputs: { width: "width", colors: "colors", color: "color" }, outputs: { onChange: "onChange", onChangeComplete: "onChangeComplete", onSwatchHover: "onSwatchHover" }, features: [ɵɵNgOnChangesFeature], decls: 7, vars: 5, consts: [[1, "novo-color-preview"], [1, "novo-color-preview-text"], [1, "novo-color-swatches"], [3, "color", "onClick", "onHover", 4, "ngFor", "ngForOf"], [1, "novo-color-input"], [3, "value", "onChange"], [3, "color", "onClick", "onHover"]], template: function NovoColorPickerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "div", 0);
        ɵɵelementStart(1, "div", 1);
        ɵɵtext(2);
        ɵɵelementEnd();
        ɵɵelementEnd();
        ɵɵelementStart(3, "div", 2);
        ɵɵtemplate(4, NovoColorPickerComponent_novo_color_swatch_4_Template, 1, 1, "novo-color-swatch", 3);
        ɵɵelementEnd();
        ɵɵelementStart(5, "div", 4);
        ɵɵelementStart(6, "input", 5);
        ɵɵlistener("onChange", function NovoColorPickerComponent_Template_input_onChange_6_listener($event) { return ctx.handleValueChange($event); });
        ɵɵelementEnd();
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵstyleProp("background-color", ctx.currentColor.hex);
        ɵɵadvance(2);
        ɵɵtextInterpolate(ctx.hex);
        ɵɵadvance(2);
        ɵɵproperty("ngForOf", ctx.colors);
        ɵɵadvance(2);
        ɵɵproperty("value", ctx.hex.replace("#", ""));
    } }, directives: [NgForOf, NovoColorSwatchComponent], styles: ["@-webkit-keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}[_nghost-%COMP%]{background-color:#fff;border-radius:.4rem;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);cursor:default;display:grid;grid-template-rows:6rem 1fr -webkit-min-content;grid-template-rows:6rem 1fr min-content;overflow:auto;transform:translateY(0);transition:all .15s cubic-bezier(.35,0,.25,1);width:18rem}[_nghost-%COMP%]   .novo-color-preview[_ngcontent-%COMP%]{align-items:center;display:flex;justify-content:center}[_nghost-%COMP%]   .novo-color-swatches[_ngcontent-%COMP%]{display:grid;grid-auto-rows:2.4rem;grid-gap:.4rem;grid-template-columns:repeat(6,2.4rem);justify-content:center;margin:.4rem 0}[_nghost-%COMP%]   .novo-color-input[_ngcontent-%COMP%]{padding:.4rem .8rem}"], changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoColorPickerComponent, [{
        type: Component,
        args: [{
                selector: 'novo-color-picker',
                template: `
    <div class="novo-color-preview" [style.backgroundColor]="currentColor.hex">
      <div class="novo-color-preview-text">{{ hex }}</div>
    </div>
    <div class="novo-color-swatches">
      <novo-color-swatch
        *ngFor="let color of colors"
        [color]="color"
        (onClick)="handleBlockChange($event)"
        (onHover)="handleSwatchHover($event)"
      ></novo-color-swatch>
    </div>
    <div class="novo-color-input">
      <input [value]="hex.replace('#', '')" (onChange)="handleValueChange($event)" />
    </div>
  `,
                styleUrls: ['./color-picker.component.scss'],
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
            }]
    }], null, { width: [{
            type: Input
        }], colors: [{
            type: Input
        }], color: [{
            type: Input
        }], onChange: [{
            type: Output
        }], onChangeComplete: [{
            type: Output
        }], onSwatchHover: [{
            type: Output
        }] }); })();

// NG
function NovoColorInputElement_novo_icon_3_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-icon", 6);
    ɵɵlistener("click", function NovoColorInputElement_novo_icon_3_Template_novo_icon_click_0_listener() { ɵɵrestoreView(_r4); const ctx_r3 = ɵɵnextContext(); return ctx_r3.openPanel(); });
    ɵɵtext(1, "complex");
    ɵɵelementEnd();
} }
function NovoColorInputElement_novo_icon_4_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-icon", 7);
    ɵɵlistener("click", function NovoColorInputElement_novo_icon_4_Template_novo_icon_click_0_listener() { ɵɵrestoreView(_r6); const ctx_r5 = ɵɵnextContext(); return ctx_r5.clearValue(); });
    ɵɵtext(1, "x");
    ɵɵelementEnd();
} }
// Value accessor for the component (supports ngModel)
const COLOR_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoColorInputElement),
    multi: true,
};
class NovoColorInputElement {
    constructor(element, labels, cdr) {
        this.element = element;
        this.labels = labels;
        this.cdr = cdr;
        this.placeholder = '#ffffff';
        this.blurEvent = new EventEmitter();
        this.focusEvent = new EventEmitter();
        this.change = new EventEmitter();
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this._value = '';
        this.lastValidValue = '';
        this._disabled = false;
        this.onChangeCallback = (_) => {
            // placeholder
        };
        this.onTouchedCallback = () => {
            // placeholder
        };
    }
    get value() {
        return this._value;
    }
    set value(value) {
        if (this.value !== value) {
            this._value = value;
            this._setFormValue(value);
            this.onChangeCallback(this._value);
        }
    }
    // Disabled State
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = !!value;
    }
    ngOnInit() { }
    /** BEGIN: Convenient Panel Methods. */
    openPanel() {
        if (!this.disabled) {
            this.panelOpen ? this.overlay.closePanel() : this.overlay.openPanel();
        }
    }
    closePanel() {
        this.overlay && this.overlay.closePanel();
    }
    get panelOpen() {
        return this.overlay && this.overlay.panelOpen;
    }
    /** END: Convenient Panel Methods. */
    _handleKeydown(event) {
        if ((event.key === "Escape" /* Escape */ || event.key === "Enter" /* Enter */ || event.key === "Tab" /* Tab */) && this.panelOpen) {
            this.closePanel();
            event.stopPropagation();
        }
    }
    _handleInput(event) {
        if (document.activeElement === event.target) {
            // this._handleEvent(event, false);
        }
    }
    _handleBlur(event) {
        this.blurEvent.emit(event);
    }
    _handleFocus(event) {
        this.openPanel();
        this.focusEvent.emit(event);
    }
    writeValue(value) {
        this.value = value;
        this.cdr.markForCheck();
    }
    setDisabledState(disabled) {
        this.disabled = disabled;
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    _setFormValue(value) {
        if (this.value) {
            // hmm...
        }
    }
    /**
     * This method closes the panel, and if a value is specified, also sets the associated
     * control to that value. It will also mark the control as dirty if this interaction
     * stemmed from the user.
     */
    setValueAndClose(event) {
        if (event) {
            this.value = event.color.hex;
            this.change.emit(this.value);
            this.closePanel();
        }
    }
    /**
     * Clear any previous selected option and emit a selection change event for this option
     */
    clearValue() {
        this.value = '';
        this.change.emit(this.value);
    }
    get hasValue() {
        return !Helpers.isEmpty(this.value);
    }
}
NovoColorInputElement.ɵfac = function NovoColorInputElement_Factory(t) { return new (t || NovoColorInputElement)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(ChangeDetectorRef)); };
NovoColorInputElement.ɵcmp = ɵɵdefineComponent({ type: NovoColorInputElement, selectors: [["novo-color-input"]], viewQuery: function NovoColorInputElement_Query(rf, ctx) { if (rf & 1) {
        ɵɵviewQuery(NovoOverlayTemplateComponent, true);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.overlay = _t.first);
    } }, hostVars: 2, hostBindings: function NovoColorInputElement_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵclassProp("disabled", ctx.disabled);
    } }, inputs: { name: "name", placeholder: "placeholder", value: "value", disabled: "disabled" }, outputs: { blurEvent: "blurEvent", focusEvent: "focusEvent", change: "change", blur: "blur", focus: "focus" }, features: [ɵɵProvidersFeature([COLOR_VALUE_ACCESSOR])], decls: 7, vars: 10, consts: [["novoInput", "", "type", "text", 3, "name", "placeholder", "disabled", "ngModel", "focus", "keydown", "input", "blur", "ngModelChange"], ["input", ""], [3, "click", 4, "ngIf"], ["size", "small", 3, "click", 4, "ngIf"], ["position", "above-below", 3, "parent"], [3, "color", "colorChange", "onChange"], [3, "click"], ["size", "small", 3, "click"]], template: function NovoColorInputElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "novo-field");
        ɵɵelementStart(1, "input", 0, 1);
        ɵɵlistener("focus", function NovoColorInputElement_Template_input_focus_1_listener($event) { return ctx._handleFocus($event); })("keydown", function NovoColorInputElement_Template_input_keydown_1_listener($event) { return ctx._handleKeydown($event); })("input", function NovoColorInputElement_Template_input_input_1_listener($event) { return ctx._handleInput($event); })("blur", function NovoColorInputElement_Template_input_blur_1_listener($event) { return ctx._handleBlur($event); })("ngModelChange", function NovoColorInputElement_Template_input_ngModelChange_1_listener($event) { return ctx.value = $event; });
        ɵɵelementEnd();
        ɵɵtemplate(3, NovoColorInputElement_novo_icon_3_Template, 2, 0, "novo-icon", 2);
        ɵɵtemplate(4, NovoColorInputElement_novo_icon_4_Template, 2, 0, "novo-icon", 3);
        ɵɵelementEnd();
        ɵɵelementStart(5, "novo-overlay-template", 4);
        ɵɵelementStart(6, "novo-color-picker", 5);
        ɵɵlistener("colorChange", function NovoColorInputElement_Template_novo_color_picker_colorChange_6_listener($event) { return ctx.value = $event; })("onChange", function NovoColorInputElement_Template_novo_color_picker_onChange_6_listener($event) { return ctx.setValueAndClose($event); });
        ɵɵelementEnd();
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵadvance(1);
        ɵɵstyleProp("color", ctx.value);
        ɵɵproperty("name", ctx.name)("placeholder", ctx.placeholder)("disabled", ctx.disabled)("ngModel", ctx.value);
        ɵɵadvance(2);
        ɵɵproperty("ngIf", !ctx.hasValue);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.hasValue);
        ɵɵadvance(1);
        ɵɵproperty("parent", ctx.element);
        ɵɵadvance(1);
        ɵɵproperty("color", ctx.value);
    } }, directives: [NovoFieldElement, NovoInput, DefaultValueAccessor, NgControlStatus, NgModel, NgIf, NovoOverlayTemplateComponent, NovoColorPickerComponent, NovoIconComponent], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoColorInputElement, [{
        type: Component,
        args: [{
                selector: 'novo-color-input',
                providers: [COLOR_VALUE_ACCESSOR],
                template: `
    <novo-field>
      <input
        novoInput
        type="text"
        [name]="name"
        [placeholder]="placeholder"
        [disabled]="disabled"
        [style.color]="value"
        (focus)="_handleFocus($event)"
        (keydown)="_handleKeydown($event)"
        (input)="_handleInput($event)"
        (blur)="_handleBlur($event)"
        [(ngModel)]="value"
        #input
      />
      <novo-icon *ngIf="!hasValue" (click)="openPanel()">complex</novo-icon>
      <novo-icon *ngIf="hasValue" size="small" (click)="clearValue()">x</novo-icon>
    </novo-field>
    <novo-overlay-template [parent]="element" position="above-below">
      <novo-color-picker [(color)]="value" (onChange)="setValueAndClose($event)"></novo-color-picker>
    </novo-overlay-template>
  `,
            }]
    }], function () { return [{ type: ElementRef }, { type: NovoLabelService }, { type: ChangeDetectorRef }]; }, { name: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], blurEvent: [{
            type: Output
        }], focusEvent: [{
            type: Output
        }], overlay: [{
            type: ViewChild,
            args: [NovoOverlayTemplateComponent]
        }], change: [{
            type: Output
        }], blur: [{
            type: Output
        }], focus: [{
            type: Output
        }], value: [{
            type: Input
        }], disabled: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['class.disabled']
        }] }); })();

// NG2
class NovoColorPickerModule {
}
NovoColorPickerModule.ɵmod = ɵɵdefineNgModule({ type: NovoColorPickerModule });
NovoColorPickerModule.ɵinj = ɵɵdefineInjector({ factory: function NovoColorPickerModule_Factory(t) { return new (t || NovoColorPickerModule)(); }, imports: [[CommonModule, FormsModule, NovoPipesModule, NovoFieldModule, NovoOverlayModule, NovoIconModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoColorPickerModule, { declarations: [NovoColorPickerComponent, NovoColorInputElement, NovoColorSwatchComponent], imports: [CommonModule, FormsModule, NovoPipesModule, NovoFieldModule, NovoOverlayModule, NovoIconModule], exports: [NovoColorPickerComponent, NovoColorInputElement, NovoColorSwatchComponent] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoColorPickerModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, FormsModule, NovoPipesModule, NovoFieldModule, NovoOverlayModule, NovoIconModule],
                declarations: [NovoColorPickerComponent, NovoColorInputElement, NovoColorSwatchComponent],
                exports: [NovoColorPickerComponent, NovoColorInputElement, NovoColorSwatchComponent],
            }]
    }], null, null); })();

class DataTableSource extends DataSource {
    constructor(tableService, state, ref) {
        super();
        this.tableService = tableService;
        this.state = state;
        this.ref = ref;
        this.total = 0;
        this.currentTotal = 0;
        this.current = 0;
        this.loading = false;
        this.pristine = true;
        this.totalSet = false;
    }
    get totallyEmpty() {
        return this.total === 0;
    }
    get currentlyEmpty() {
        return this.current === 0;
    }
    connect() {
        const displayDataChanges = [this.state.updates];
        return merge(...displayDataChanges).pipe(startWith(null), switchMap(() => {
            this.pristine = false;
            this.loading = true;
            return this.tableService.getTableResults(this.state.sort, this.state.filter, this.state.page, this.state.pageSize, this.state.globalSearch, this.state.outsideFilter);
        }), map((data) => {
            if (!this.totalSet || this.state.isForceRefresh) {
                this.total = data.total;
                this.totalSet = true;
                this.state.isForceRefresh = false;
            }
            else if (data.total > this.total) {
                this.total = data.total;
            }
            this.currentTotal = data.total;
            this.current = data.results.length;
            this.data = data.results;
            // Clear selection
            this.state.selectedRows.clear();
            this.state.onSelectionChange();
            // Mark changes
            setTimeout(() => {
                this.ref.markForCheck();
                setTimeout(() => {
                    this.loading = false;
                    this.state.dataLoaded.next();
                    this.ref.markForCheck();
                });
            });
            return data.results;
        }), catchError((err, caught) => {
            console.error(err, caught); // tslint: disable-line
            this.loading = false;
            return of(null);
        }));
    }
    disconnect() { }
}

class StaticDataTableService {
    constructor(currentData = []) {
        this.currentData = currentData;
        this.originalData = [...currentData];
    }
    getTableResults(sort, filter, page = 0, pageSize, globalSearch, outsideFilter) {
        this.currentData = [...this.originalData];
        let total = this.originalData.length;
        if (this.currentData.length !== 0) {
            if (globalSearch) {
                this.currentData = this.currentData.filter((item) => Object.keys(item).some((key) => `${item[key]}`.toLowerCase().includes(globalSearch.toLowerCase())));
                total = this.currentData.length;
            }
            if (filter) {
                this.currentData = this.filterData(this.currentData, filter);
                total = this.currentData.length;
            }
            if (sort) {
                this.currentData = this.currentData.sort(Helpers.sortByField(sort.id, sort.value === 'desc'));
                total = this.currentData.length;
            }
            if (!sort && !filter && !globalSearch && !outsideFilter) {
                this.currentData = [...this.originalData];
            }
            if (!Helpers.isBlank(page) && !Helpers.isBlank(pageSize)) {
                this.currentData = this.currentData.slice(page * pageSize, (page + 1) * pageSize);
            }
        }
        return of({ results: this.currentData, total });
    }
    filterData(currentData, filter) {
        const filters = Helpers.convertToArray(filter);
        filters.forEach((aFilter) => {
            if (Array.isArray(aFilter.value)) {
                const values = Helpers.convertToArray(aFilter.value).map(Helpers.escapeString);
                currentData = currentData.filter(Helpers.filterByField(aFilter.id, values));
            }
            else {
                const value = Helpers.escapeString(aFilter.value);
                currentData = currentData.filter(Helpers.filterByField(aFilter.id, value));
            }
        });
        return currentData;
    }
}

class NovoDataTableFilterUtils {
    static constructFilter(filter, type, multiSelect) {
        let actualFilter = filter;
        if (filter) {
            if (type && type === 'date') {
                if (filter.startDate && filter.endDate) {
                    actualFilter = {
                        min: startOfDay(filter.startDate.date),
                        max: startOfDay(addDays(startOfDay(filter.endDate.date), 1)),
                    };
                }
                else {
                    actualFilter = {
                        min: filter.min ? addDays(startOfToday(), filter.min) : startOfToday(),
                        max: filter.max ? addDays(endOfToday(), filter.max) : endOfToday(),
                    };
                }
            }
            if (multiSelect && Array.isArray(filter)) {
                actualFilter = filter.map((filterItem) => {
                    if (filterItem && filterItem.hasOwnProperty('value')) {
                        return filterItem.value;
                    }
                    return filterItem;
                });
            }
            else if (actualFilter && actualFilter.hasOwnProperty('value')) {
                actualFilter = filter.value;
            }
        }
        return actualFilter;
    }
}

class DataTableState {
    constructor() {
        this.selectionSource = new Subject();
        this.paginationSource = new Subject();
        this.sortFilterSource = new Subject();
        this.resetSource = new Subject();
        this.expandSource = new Subject();
        this.dataLoaded = new Subject();
        this.sort = undefined;
        this.filter = undefined;
        this.page = 0;
        this.pageSize = undefined;
        this.globalSearch = undefined;
        this.selectedRows = new Map();
        this.expandedRows = new Set();
        this.isForceRefresh = false;
        this.updates = new EventEmitter();
    }
    get userFiltered() {
        return !!(this.filter || this.sort || this.globalSearch || this.outsideFilter);
    }
    get userFilteredInternal() {
        return !!(this.filter || this.sort || this.globalSearch);
    }
    get selected() {
        return Array.from(this.selectedRows.values());
    }
    reset(fireUpdate = true, persistUserFilters) {
        if (!persistUserFilters) {
            this.sort = undefined;
            this.globalSearch = undefined;
            this.filter = undefined;
        }
        this.page = 0;
        this.selectedRows.clear();
        this.resetSource.next();
        this.onSortFilterChange();
        if (fireUpdate) {
            this.updates.emit({
                sort: this.sort,
                filter: this.filter,
                globalSearch: this.globalSearch,
            });
        }
    }
    clearSort(fireUpdate = true) {
        this.sort = undefined;
        this.page = 0;
        this.selectedRows.clear();
        this.resetSource.next();
        this.onSortFilterChange();
        if (fireUpdate) {
            this.updates.emit({
                sort: this.sort,
                filter: this.filter,
                globalSearch: this.globalSearch,
            });
        }
    }
    clearFilter(fireUpdate = true) {
        this.filter = undefined;
        this.globalSearch = undefined;
        this.page = 0;
        this.selectedRows.clear();
        this.resetSource.next();
        this.onSortFilterChange();
        if (fireUpdate) {
            this.updates.emit({
                sort: this.sort,
                filter: this.filter,
                globalSearch: this.globalSearch,
            });
        }
    }
    onSelectionChange() {
        this.selectionSource.next();
    }
    onExpandChange(targetId) {
        this.expandSource.next(targetId);
    }
    onPaginationChange(isPageSizeChange, pageSize) {
        this.paginationSource.next({ isPageSizeChange, pageSize });
    }
    onSortFilterChange() {
        this.sortFilterSource.next({
            sort: this.sort,
            filter: this.filter,
            globalSearch: this.globalSearch,
        });
    }
    setInitialSortFilter(preferences) {
        if (preferences) {
            if (preferences.sort) {
                this.sort = preferences.sort;
            }
            if (preferences.filter) {
                const filters = Helpers.convertToArray(preferences.filter);
                filters.forEach((filter) => {
                    filter.value =
                        filter.selectedOption && filter.type
                            ? NovoDataTableFilterUtils.constructFilter(filter.selectedOption, filter.type)
                            : filter.value;
                });
                this.filter = filters;
            }
        }
    }
}
DataTableState.ɵfac = function DataTableState_Factory(t) { return new (t || DataTableState)(); };
DataTableState.ɵprov = ɵɵdefineInjectable({ token: DataTableState, factory: DataTableState.ɵfac });
/*@__PURE__*/ (function () { ɵsetClassMetadata(DataTableState, [{
        type: Injectable
    }], null, null); })();

const _c0$L = ["novoDataTableContainer"];
function NovoDataTable_header_0_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainer(0);
} }
function NovoDataTable_header_0_novo_search_2_Template(rf, ctx) { if (rf & 1) {
    const _r31 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-search", 31);
    ɵɵlistener("searchChanged", function NovoDataTable_header_0_novo_search_2_Template_novo_search_searchChanged_0_listener($event) { ɵɵrestoreView(_r31); const ctx_r30 = ɵɵnextContext(2); return ctx_r30.onSearchChange($event); })("ngModelChange", function NovoDataTable_header_0_novo_search_2_Template_novo_search_ngModelChange_0_listener($event) { ɵɵrestoreView(_r31); const ctx_r32 = ɵɵnextContext(2); return ctx_r32.state.globalSearch = $event; });
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r27 = ɵɵnextContext(2);
    ɵɵproperty("ngModel", ctx_r27.state.globalSearch)("placeholder", ctx_r27.searchOptions == null ? null : ctx_r27.searchOptions.placeholder)("hint", ctx_r27.searchOptions == null ? null : ctx_r27.searchOptions.tooltip);
} }
function NovoDataTable_header_0_novo_data_table_pagination_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-data-table-pagination", 32);
} if (rf & 2) {
    const ctx_r28 = ɵɵnextContext(2);
    ɵɵproperty("theme", ctx_r28.paginationOptions.theme)("length", ctx_r28.dataSource == null ? null : ctx_r28.dataSource.currentTotal)("page", ctx_r28.paginationOptions.page)("pageSize", ctx_r28.paginationOptions.pageSize)("pageSizeOptions", ctx_r28.paginationOptions.pageSizeOptions)("dataFeatureId", ctx_r28.paginatorDataFeatureId);
} }
function NovoDataTable_header_0_div_4_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainer(0);
} }
function NovoDataTable_header_0_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 33);
    ɵɵtemplate(1, NovoDataTable_header_0_div_4_ng_container_1_Template, 1, 0, "ng-container", 27);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r29 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", ctx_r29.templates["customActions"]);
} }
function NovoDataTable_header_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "header");
    ɵɵtemplate(1, NovoDataTable_header_0_ng_container_1_Template, 1, 0, "ng-container", 27);
    ɵɵtemplate(2, NovoDataTable_header_0_novo_search_2_Template, 1, 3, "novo-search", 28);
    ɵɵtemplate(3, NovoDataTable_header_0_novo_data_table_pagination_3_Template, 1, 6, "novo-data-table-pagination", 29);
    ɵɵtemplate(4, NovoDataTable_header_0_div_4_Template, 2, 1, "div", 30);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵclassProp("empty", ctx_r0.hideGlobalSearch && !ctx_r0.paginationOptions && !ctx_r0.templates["customActions"]);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", ctx_r0.templates["customHeader"]);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !ctx_r0.hideGlobalSearch);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.paginationOptions);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.templates["customActions"]);
} }
function NovoDataTable_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 34);
    ɵɵelement(1, "novo-loading");
    ɵɵelementEnd();
} }
function NovoDataTable_div_3_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainer(0);
} }
function NovoDataTable_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 35);
    ɵɵtemplate(1, NovoDataTable_div_3_ng_container_1_Template, 1, 0, "ng-container", 27);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", ctx_r2.templates["customFilter"]);
} }
function NovoDataTable_cdk_table_6_novo_data_table_checkbox_header_cell_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-data-table-checkbox-header-cell");
} }
function NovoDataTable_cdk_table_6_novo_data_table_checkbox_cell_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-data-table-checkbox-cell", 44);
} if (rf & 2) {
    const row_r42 = ctx.$implicit;
    ɵɵproperty("row", row_r42);
} }
function NovoDataTable_cdk_table_6_novo_data_table_expand_header_cell_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-data-table-expand-header-cell");
} }
function NovoDataTable_cdk_table_6_novo_data_table_expand_cell_6_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-data-table-expand-cell", 44);
} if (rf & 2) {
    const row_r44 = ctx.$implicit;
    ɵɵproperty("row", row_r44);
} }
function NovoDataTable_cdk_table_6_ng_container_7_novo_data_table_header_cell_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-data-table-header-cell", 48);
} if (rf & 2) {
    const column_r46 = ɵɵnextContext().$implicit;
    const ctx_r47 = ɵɵnextContext(2);
    ɵɵclassProp("empty", (column_r46 == null ? null : column_r46.type) === "action" && !(column_r46 == null ? null : column_r46.label))("button-header-cell", (column_r46 == null ? null : column_r46.type) === "expand" || (column_r46 == null ? null : column_r46.type) === "action" && !(column_r46 == null ? null : column_r46.action == null ? null : column_r46.action.options))("dropdown-header-cell", (column_r46 == null ? null : column_r46.type) === "action" && (column_r46 == null ? null : column_r46.action == null ? null : column_r46.action.options))("fixed-header", ctx_r47.fixedHeader);
    ɵɵproperty("column", column_r46)("filterTemplate", ctx_r47.templates["column-filter-" + column_r46.id])("novo-data-table-cell-config", column_r46)("resized", ctx_r47.resized)("defaultSort", ctx_r47.defaultSort)("allowMultipleFilters", ctx_r47.allowMultipleFilters);
} }
function NovoDataTable_cdk_table_6_ng_container_7_novo_data_table_cell_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-data-table-cell", 49);
} if (rf & 2) {
    const row_r50 = ctx.$implicit;
    const column_r46 = ɵɵnextContext().$implicit;
    const ctx_r48 = ɵɵnextContext(2);
    ɵɵclassProp("empty", (column_r46 == null ? null : column_r46.type) === "action" && !(column_r46 == null ? null : column_r46.label))("button-cell", (column_r46 == null ? null : column_r46.type) === "expand" || (column_r46 == null ? null : column_r46.type) === "action" && !(column_r46 == null ? null : column_r46.action == null ? null : column_r46.action.options))("dropdown-cell", (column_r46 == null ? null : column_r46.type) === "action" && (column_r46 == null ? null : column_r46.action == null ? null : column_r46.action.options));
    ɵɵproperty("resized", ctx_r48.resized)("column", column_r46)("row", row_r50)("template", ctx_r48.columnToTemplate[column_r46.id]);
} }
function NovoDataTable_cdk_table_6_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainerStart(0, 45);
    ɵɵtemplate(1, NovoDataTable_cdk_table_6_ng_container_7_novo_data_table_header_cell_1_Template, 1, 14, "novo-data-table-header-cell", 46);
    ɵɵtemplate(2, NovoDataTable_cdk_table_6_ng_container_7_novo_data_table_cell_2_Template, 1, 10, "novo-data-table-cell", 47);
    ɵɵelementContainerEnd();
} if (rf & 2) {
    const column_r46 = ctx.$implicit;
    ɵɵproperty("cdkColumnDef", column_r46.id);
} }
function NovoDataTable_cdk_table_6_novo_data_table_header_row_8_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-data-table-header-row", 50);
} if (rf & 2) {
    const ctx_r40 = ɵɵnextContext(2);
    ɵɵproperty("fixedHeader", ctx_r40.fixedHeader);
} }
const _c1$f = function (a0) { return { active: a0 }; };
function NovoDataTable_cdk_table_6_novo_data_table_row_9_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-data-table-row", 51);
} if (rf & 2) {
    const row_r52 = ctx.$implicit;
    const ctx_r41 = ɵɵnextContext(2);
    const _r24 = ɵɵreference(27);
    ɵɵproperty("ngClass", ɵɵpureFunction1(5, _c1$f, row_r52[ctx_r41.rowIdentifier] == ctx_r41.activeRowIdentifier))("novoDataTableExpand", _r24)("row", row_r52)("id", ctx_r41.name + "-" + row_r52[ctx_r41.rowIdentifier])("dataAutomationId", row_r52[ctx_r41.rowIdentifier]);
} }
function NovoDataTable_cdk_table_6_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "cdk-table", 36);
    ɵɵelementContainerStart(1, 37);
    ɵɵtemplate(2, NovoDataTable_cdk_table_6_novo_data_table_checkbox_header_cell_2_Template, 1, 0, "novo-data-table-checkbox-header-cell", 38);
    ɵɵtemplate(3, NovoDataTable_cdk_table_6_novo_data_table_checkbox_cell_3_Template, 1, 1, "novo-data-table-checkbox-cell", 39);
    ɵɵelementContainerEnd();
    ɵɵelementContainerStart(4, 40);
    ɵɵtemplate(5, NovoDataTable_cdk_table_6_novo_data_table_expand_header_cell_5_Template, 1, 0, "novo-data-table-expand-header-cell", 38);
    ɵɵtemplate(6, NovoDataTable_cdk_table_6_novo_data_table_expand_cell_6_Template, 1, 1, "novo-data-table-expand-cell", 39);
    ɵɵelementContainerEnd();
    ɵɵtemplate(7, NovoDataTable_cdk_table_6_ng_container_7_Template, 3, 1, "ng-container", 41);
    ɵɵtemplate(8, NovoDataTable_cdk_table_6_novo_data_table_header_row_8_Template, 1, 1, "novo-data-table-header-row", 42);
    ɵɵtemplate(9, NovoDataTable_cdk_table_6_novo_data_table_row_9_Template, 1, 7, "novo-data-table-row", 43);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵɵnextContext();
    ɵɵclassProp("expandable", ctx_r4.expandable)("empty", (ctx_r4.dataSource == null ? null : ctx_r4.dataSource.currentlyEmpty) && ctx_r4.state.userFiltered);
    ɵɵproperty("dataSource", ctx_r4.dataSource)("trackBy", ctx_r4.trackByFn)("hidden", (ctx_r4.dataSource == null ? null : ctx_r4.dataSource.totallyEmpty) && !ctx_r4.state.userFiltered);
    ɵɵadvance(7);
    ɵɵproperty("ngForOf", ctx_r4.columns)("ngForTrackBy", ctx_r4.trackColumnsBy);
    ɵɵadvance(1);
    ɵɵproperty("cdkHeaderRowDef", ctx_r4.displayedColumns);
    ɵɵadvance(1);
    ɵɵproperty("cdkRowDefColumns", ctx_r4.displayedColumns);
} }
function NovoDataTable_div_7_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainer(0);
} }
const _c2$6 = function (a0, a1) { return { $implicit: a0, data: a1 }; };
function NovoDataTable_div_7_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 52);
    ɵɵtemplate(1, NovoDataTable_div_7_ng_container_1_Template, 1, 0, "ng-container", 53);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", ctx_r5.templates["footer"])("ngTemplateOutletContext", ɵɵpureFunction2(2, _c2$6, ctx_r5.columns, ctx_r5.dataSource.data));
} }
function NovoDataTable_div_8_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainer(0);
} }
function NovoDataTable_div_8_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 54);
    ɵɵelementStart(1, "div", 55);
    ɵɵtemplate(2, NovoDataTable_div_8_ng_container_2_Template, 1, 0, "ng-container", 27);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵɵnextContext();
    ɵɵstyleProp("left", ctx_r6.scrollLeft, "px");
    ɵɵadvance(2);
    ɵɵproperty("ngTemplateOutlet", ctx_r6.templates["noResultsMessage"] || ctx_r6.templates["defaultNoResultsMessage"]);
} }
function NovoDataTable_div_9_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainer(0);
} }
function NovoDataTable_div_9_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 56);
    ɵɵelementStart(1, "div", 55);
    ɵɵtemplate(2, NovoDataTable_div_9_ng_container_2_Template, 1, 0, "ng-container", 27);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵproperty("ngTemplateOutlet", ctx_r7.templates["emptyMessage"] || ctx_r7.templates["defaultNoResultsMessage"]);
} }
function NovoDataTable_ng_template_10_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵtext(1);
    ɵɵpipe(2, "dataTableInterpolate");
    ɵɵelementEnd();
} if (rf & 2) {
    const row_r56 = ctx.$implicit;
    const col_r57 = ctx.col;
    ɵɵstyleProp("width", col_r57 == null ? null : col_r57.width, "px")("min-width", col_r57 == null ? null : col_r57.width, "px")("max-width", col_r57 == null ? null : col_r57.width, "px");
    ɵɵadvance(1);
    ɵɵtextInterpolate(ɵɵpipeBind2(2, 7, row_r56[col_r57.id], col_r57));
} }
function NovoDataTable_ng_template_11_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵtext(1);
    ɵɵpipe(2, "dataTableDateRenderer");
    ɵɵpipe(3, "dataTableInterpolate");
    ɵɵelementEnd();
} if (rf & 2) {
    const row_r58 = ctx.$implicit;
    const col_r59 = ctx.col;
    ɵɵadvance(1);
    ɵɵtextInterpolate(ɵɵpipeBind2(2, 1, ɵɵpipeBind2(3, 4, row_r58[col_r59.id], col_r59), col_r59));
} }
function NovoDataTable_ng_template_12_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵtext(1);
    ɵɵpipe(2, "dataTableDateTimeRenderer");
    ɵɵpipe(3, "dataTableInterpolate");
    ɵɵelementEnd();
} if (rf & 2) {
    const row_r60 = ctx.$implicit;
    const col_r61 = ctx.col;
    ɵɵadvance(1);
    ɵɵtextInterpolate(ɵɵpipeBind2(2, 1, ɵɵpipeBind2(3, 4, row_r60[col_r61.id], col_r61), col_r61));
} }
function NovoDataTable_ng_template_13_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵtext(1);
    ɵɵpipe(2, "dataTableTimeRenderer");
    ɵɵpipe(3, "dataTableInterpolate");
    ɵɵelementEnd();
} if (rf & 2) {
    const row_r62 = ctx.$implicit;
    const col_r63 = ctx.col;
    ɵɵadvance(1);
    ɵɵtextInterpolate(ɵɵpipeBind2(2, 1, ɵɵpipeBind2(3, 4, row_r62[col_r63.id], col_r63), col_r63));
} }
function NovoDataTable_ng_template_14_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵtext(1);
    ɵɵpipe(2, "dataTableCurrencyRenderer");
    ɵɵpipe(3, "dataTableInterpolate");
    ɵɵelementEnd();
} if (rf & 2) {
    const row_r64 = ctx.$implicit;
    const col_r65 = ctx.col;
    ɵɵadvance(1);
    ɵɵtextInterpolate(ɵɵpipeBind2(2, 1, ɵɵpipeBind2(3, 4, row_r64[col_r65.id], col_r65), col_r65));
} }
function NovoDataTable_ng_template_15_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵtext(1);
    ɵɵpipe(2, "dataTableBigDecimalRenderer");
    ɵɵpipe(3, "dataTableInterpolate");
    ɵɵelementEnd();
} if (rf & 2) {
    const row_r66 = ctx.$implicit;
    const col_r67 = ctx.col;
    ɵɵadvance(1);
    ɵɵtextInterpolate(ɵɵpipeBind2(2, 1, ɵɵpipeBind2(3, 4, row_r66[col_r67.id], col_r67), col_r67));
} }
function NovoDataTable_ng_template_16_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵtext(1);
    ɵɵpipe(2, "dataTableNumberRenderer");
    ɵɵpipe(3, "dataTableInterpolate");
    ɵɵelementEnd();
} if (rf & 2) {
    const row_r68 = ctx.$implicit;
    const col_r69 = ctx.col;
    ɵɵadvance(1);
    ɵɵtextInterpolate(ɵɵpipeBind2(2, 1, ɵɵpipeBind2(3, 4, row_r68[col_r69.id], col_r69), col_r69));
} }
function NovoDataTable_ng_template_17_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵtext(1);
    ɵɵpipe(2, "dataTableNumberRenderer");
    ɵɵpipe(3, "dataTableInterpolate");
    ɵɵelementEnd();
} if (rf & 2) {
    const row_r70 = ctx.$implicit;
    const col_r71 = ctx.col;
    ɵɵadvance(1);
    ɵɵtextInterpolate(ɵɵpipeBind3(2, 1, ɵɵpipeBind2(3, 5, row_r70[col_r71.id], col_r71), col_r71, true));
} }
function NovoDataTable_ng_template_18_Template(rf, ctx) { if (rf & 1) {
    const _r75 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "a", 57);
    ɵɵlistener("click", function NovoDataTable_ng_template_18_Template_a_click_0_listener($event) { ɵɵrestoreView(_r75); const col_r73 = ctx.col; const row_r72 = ctx.$implicit; return col_r73.handlers == null ? null : col_r73.handlers.click({ originalEvent: $event, row: row_r72 }); });
    ɵɵtext(1);
    ɵɵpipe(2, "dataTableInterpolate");
    ɵɵelementEnd();
} if (rf & 2) {
    const row_r72 = ctx.$implicit;
    const col_r73 = ctx.col;
    ɵɵstyleProp("width", col_r73 == null ? null : col_r73.width, "px")("min-width", col_r73 == null ? null : col_r73.width, "px")("max-width", col_r73 == null ? null : col_r73.width, "px");
    ɵɵattribute("data-feature-id", col_r73 == null ? null : col_r73.attributes == null ? null : col_r73.attributes.dataFeatureId);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ɵɵpipeBind2(2, 8, row_r72[col_r73.id], col_r73));
} }
function NovoDataTable_ng_template_19_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "a", 58);
    ɵɵpipe(1, "dataTableInterpolate");
    ɵɵtext(2);
    ɵɵpipe(3, "dataTableInterpolate");
    ɵɵelementEnd();
} if (rf & 2) {
    const row_r76 = ctx.$implicit;
    const col_r77 = ctx.col;
    ɵɵpropertyInterpolate1("href", "tel:", ɵɵpipeBind2(1, 3, row_r76[col_r77.id], col_r77), "", ɵɵsanitizeUrl);
    ɵɵproperty("target", col_r77 == null ? null : col_r77.attributes == null ? null : col_r77.attributes.target);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ɵɵpipeBind2(3, 6, row_r76[col_r77.id], col_r77));
} }
function NovoDataTable_ng_template_20_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "a", 58);
    ɵɵpipe(1, "dataTableInterpolate");
    ɵɵtext(2);
    ɵɵpipe(3, "dataTableInterpolate");
    ɵɵelementEnd();
} if (rf & 2) {
    const row_r78 = ctx.$implicit;
    const col_r79 = ctx.col;
    ɵɵpropertyInterpolate1("href", "mailto:", ɵɵpipeBind2(1, 3, row_r78[col_r79.id], col_r79), "", ɵɵsanitizeUrl);
    ɵɵproperty("target", col_r79 == null ? null : col_r79.attributes == null ? null : col_r79.attributes.target);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ɵɵpipeBind2(3, 6, row_r78[col_r79.id], col_r79));
} }
function NovoDataTable_ng_template_21_Template(rf, ctx) { if (rf & 1) {
    const _r83 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "p", 59);
    ɵɵelementStart(1, "i", 57);
    ɵɵlistener("click", function NovoDataTable_ng_template_21_Template_i_click_1_listener($event) { ɵɵrestoreView(_r83); const col_r81 = ctx.col; const row_r80 = ctx.$implicit; return col_r81.handlers == null ? null : col_r81.handlers.click({ originalEvent: $event, row: row_r80 }); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const row_r80 = ctx.$implicit;
    const col_r81 = ctx.col;
    const ctx_r19 = ɵɵnextContext();
    ɵɵproperty("tooltip", col_r81 == null ? null : col_r81.action == null ? null : col_r81.action.tooltip);
    ɵɵattribute("data-feature-id", col_r81 == null ? null : col_r81.attributes == null ? null : col_r81.attributes.dataFeatureId);
    ɵɵadvance(1);
    ɵɵclassMapInterpolate1("bhi-", col_r81 == null ? null : col_r81.action == null ? null : col_r81.action.icon, " data-table-icon");
    ɵɵclassProp("disabled", ctx_r19.isDisabled(col_r81, row_r80));
} }
function NovoDataTable_ng_template_22_item_4_Template(rf, ctx) { if (rf & 1) {
    const _r89 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "item", 63);
    ɵɵlistener("action", function NovoDataTable_ng_template_22_item_4_Template_item_action_0_listener($event) { ɵɵrestoreView(_r89); const option_r87 = ctx.$implicit; const row_r84 = ɵɵnextContext().$implicit; return option_r87.handlers.click({ originalEvent: $event == null ? null : $event.originalEvent, row: row_r84 }); });
    ɵɵelementStart(1, "span");
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const option_r87 = ctx.$implicit;
    const row_r84 = ɵɵnextContext().$implicit;
    const ctx_r86 = ɵɵnextContext();
    ɵɵproperty("disabled", ctx_r86.isDisabled(option_r87, row_r84));
    ɵɵadvance(1);
    ɵɵattribute("data-automation-id", option_r87.label);
    ɵɵadvance(1);
    ɵɵtextInterpolate(option_r87.label);
} }
function NovoDataTable_ng_template_22_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-dropdown", 60);
    ɵɵelementStart(1, "button", 61);
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementStart(3, "list");
    ɵɵtemplate(4, NovoDataTable_ng_template_22_item_4_Template, 3, 3, "item", 62);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const col_r85 = ctx.col;
    ɵɵadvance(1);
    ɵɵproperty("icon", col_r85.action.icon);
    ɵɵadvance(1);
    ɵɵtextInterpolate(col_r85.label);
    ɵɵadvance(2);
    ɵɵproperty("ngForOf", col_r85 == null ? null : col_r85.action == null ? null : col_r85.action.options);
} }
function NovoDataTable_ng_template_23_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "h4");
    ɵɵelement(1, "i", 64);
    ɵɵtext(2);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r21 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵtextInterpolate1(" ", ctx_r21.labels.noMatchingRecordsMessage, "");
} }
function NovoDataTable_ng_template_24_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "h4");
    ɵɵelement(1, "i", 64);
    ɵɵtext(2);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r22 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵtextInterpolate1(" ", ctx_r22.labels.emptyTableMessage, "");
} }
function NovoDataTable_ng_template_25_Template(rf, ctx) { if (rf & 1) {
    ɵɵtext(0, " You did not provide an \"expandedRow\" template! ");
} }
function NovoDataTable_ng_template_26_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainer(0);
} }
const _c3$3 = function (a0) { return { $implicit: a0 }; };
function NovoDataTable_ng_template_26_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 65);
    ɵɵtemplate(1, NovoDataTable_ng_template_26_ng_container_1_Template, 1, 0, "ng-container", 53);
    ɵɵelementEnd();
} if (rf & 2) {
    const row_r92 = ctx.$implicit;
    const ctx_r25 = ɵɵnextContext();
    ɵɵproperty("@expand", undefined);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", ctx_r25.templates["expandedRow"])("ngTemplateOutletContext", ɵɵpureFunction1(3, _c3$3, row_r92));
} }
const _c4$2 = function (a0) { return { "novo-data-table-outside-container-fixed": a0 }; };
const _c5$1 = function (a0) { return { "novo-data-table-container-fixed": a0 }; };
const _c6 = ["*"];
class NovoDataTable {
    constructor(labels, ref, state) {
        this.labels = labels;
        this.ref = ref;
        this.state = state;
        this.globalSearchHiddenClassToggle = false;
        this.resized = new EventEmitter();
        this.name = 'novo-data-table';
        this.allowMultipleFilters = false;
        this.rowIdentifier = 'id';
        this.activeRowIdentifier = '';
        // prettier-ignore
        this.trackByFn = (index, item) => item.id;
        this.templates = {};
        this.fixedHeader = false;
        this._hideGlobalSearch = true;
        this.preferencesChanged = new EventEmitter();
        this.loading = true;
        this.columnToTemplate = {};
        this.columnsLoaded = false;
        this.selection = new Set();
        this.scrollLeft = 0;
        this.expandable = false;
        this.initialized = false;
        this.scrollListenerHandler = this.scrollListener.bind(this);
        this.sortFilterSubscription = this.state.sortFilterSource.subscribe((event) => {
            if (this.name !== 'novo-data-table') {
                this.preferencesChanged.emit({ name: this.name, sort: event.sort, filter: event.filter, globalSearch: event.globalSearch });
            }
            else {
                notify('Must have [name] set on data-table to use preferences!');
            }
        });
        this.paginationSubscription = this.state.paginationSource.subscribe((event) => {
            if (this.name !== 'novo-data-table') {
                if (event.isPageSizeChange) {
                    this.preferencesChanged.emit({ name: this.name, pageSize: event.pageSize });
                }
            }
            else {
                notify('Must have [name] set on data-table to use preferences!');
            }
        });
        this.resetSubscription = this.state.resetSource.subscribe(() => {
            setTimeout(() => {
                this.ref.detectChanges();
            }, 300);
        });
    }
    set displayedColumns(displayedColumns) {
        if (this.displayedColumns && this.displayedColumns.length !== 0) {
            if (this.name !== 'novo-data-table') {
                this.preferencesChanged.emit({
                    name: this.name,
                    displayedColumns,
                });
            }
            else {
                notify('Must have [name] set on data-table to use preferences!');
            }
        }
        this._disabledColumns = displayedColumns;
        this.configureLastDisplayedColumn();
        if (this.initialized) {
            setTimeout(() => {
                this.scrollListener();
            });
        }
    }
    get displayedColumns() {
        return this._disabledColumns;
    }
    set dataTableService(service) {
        this.loading = false;
        if (!service) {
            service = new StaticDataTableService([]);
        }
        this.dataSource = new DataTableSource(service, this.state, this.ref);
        this.ref.detectChanges();
    }
    set rows(rows) {
        this.loading = false;
        const service = new StaticDataTableService(rows);
        this.dataSource = new DataTableSource(service, this.state, this.ref);
        this.ref.detectChanges();
    }
    set outsideFilter(outsideFilter) {
        // Unsubscribe
        if (this.outsideFilterSubscription) {
            this.outsideFilterSubscription.unsubscribe();
        }
        if (outsideFilter) {
            // Re-subscribe
            this.outsideFilterSubscription = outsideFilter.subscribe((filter) => {
                this.state.outsideFilter = filter;
                this.state.updates.next({ globalSearch: this.state.globalSearch, filter: this.state.filter, sort: this.state.sort });
                this.ref.markForCheck();
            });
        }
    }
    set refreshSubject(refreshSubject) {
        // Unsubscribe
        if (this.refreshSubscription) {
            this.refreshSubscription.unsubscribe();
        }
        if (refreshSubject) {
            // Re-subscribe
            this.refreshSubscription = refreshSubject.subscribe((filter) => {
                this.state.isForceRefresh = true;
                this.state.updates.next({ globalSearch: this.state.globalSearch, filter: this.state.filter, sort: this.state.sort });
                this.ref.markForCheck();
            });
        }
    }
    set columns(columns) {
        this._columns = columns;
        this.configureColumns();
    }
    get columns() {
        return this._columns;
    }
    set customFilter(v) {
        this._customFilter = coerceBooleanProperty(v);
    }
    get customFilter() {
        return this._customFilter;
    }
    set hasExandedRows(v) {
        this._hasExandedRows = coerceBooleanProperty(v);
    }
    get hasExandedRows() {
        return this._hasExandedRows;
    }
    set forceShowHeader(v) {
        this._forceShowHeader = coerceBooleanProperty(v);
    }
    get forceShowHeader() {
        return this._forceShowHeader;
    }
    set hideGlobalSearch(v) {
        this._hideGlobalSearch = coerceBooleanProperty(v);
        this.globalSearchHiddenClassToggle = this._hideGlobalSearch;
    }
    get hideGlobalSearch() {
        return this._hideGlobalSearch;
    }
    get empty() {
        return this.dataSource && this.dataSource.totallyEmpty;
    }
    get loadingClass() {
        return this.loading || (this.dataSource && this.dataSource.loading);
    }
    ngOnDestroy() {
        if (this.outsideFilterSubscription) {
            this.outsideFilterSubscription.unsubscribe();
        }
        if (this.novoDataTableContainer) {
            this.novoDataTableContainer.nativeElement.removeEventListener('scroll', this.scrollListenerHandler);
        }
        if (this.refreshSubscription) {
            this.refreshSubscription.unsubscribe();
        }
        if (this.resetSubscription) {
            this.resetSubscription.unsubscribe();
        }
        if (this.sortFilterSubscription) {
            this.sortFilterSubscription.unsubscribe();
        }
    }
    ngAfterContentInit() {
        if (this.displayedColumns && this.displayedColumns.length) {
            this.expandable = this.displayedColumns.includes('expand');
        }
        // Default templates defined here
        this.defaultTemplates.forEach((item) => {
            // Only override if it doesn't already exist
            if (!this.templates[item.getType()]) {
                this.templates[item.getType()] = item.template;
            }
        });
        // Custom templates passed in
        this.customTemplates.forEach((item) => {
            // Override anything that is custom and in HTML
            this.templates[item.getType()] = item.template;
        });
        // Load columns
        this.configureColumns();
        // State
        if (this.paginationOptions && !this.paginationOptions.page) {
            this.paginationOptions.page = 0;
        }
        if (this.paginationOptions && !this.paginationOptions.pageSize) {
            this.paginationOptions.pageSize = 50;
        }
        if (this.paginationOptions && !this.paginationOptions.pageSizeOptions) {
            this.paginationOptions.pageSizeOptions = [10, 25, 50, 100];
        }
        this.state.page = this.paginationOptions ? this.paginationOptions.page : undefined;
        this.state.pageSize = this.paginationOptions ? this.paginationOptions.pageSize : undefined;
        // Scrolling inside table
        this.novoDataTableContainer.nativeElement.addEventListener('scroll', this.scrollListenerHandler);
        this.initialized = true;
        this.ref.markForCheck();
    }
    onSearchChange(term) {
        this.state.globalSearch = term;
        this.state.reset(false, true);
        this.state.updates.next({ globalSearch: term, filter: this.state.filter, sort: this.state.sort });
    }
    trackColumnsBy(index, item) {
        return item.id;
    }
    isDisabled(check, row) {
        if (check.disabled === true) {
            return true;
        }
        if (check.disabledFunc) {
            return check.disabledFunc(row);
        }
        return false;
    }
    isExpanded(row) {
        if (!row) {
            return false;
        }
        return this.state.expandedRows.has(`${row[this.rowIdentifier]}`);
    }
    expandRow(row) {
        const expanded = this.isExpanded(row);
        if (expanded) {
            this.state.expandedRows.delete(`${row[this.rowIdentifier]}`);
        }
        else {
            this.state.expandedRows.add(`${row[this.rowIdentifier]}`);
        }
        this.state.onExpandChange(row.id);
    }
    expandRows(expand) {
        (this.dataSource.data || []).forEach((row) => {
            if (!expand) {
                this.state.expandedRows.delete(`${row[this.rowIdentifier]}`);
            }
            else {
                this.state.expandedRows.add(`${row[this.rowIdentifier]}`);
            }
        });
        this.state.onExpandChange();
    }
    allCurrentRowsExpanded() {
        for (let i = 0; i < (this.dataSource.data || []).length; i++) {
            if (!this.isExpanded((this.dataSource.data || [])[i])) {
                return false;
            }
        }
        return true;
    }
    isSelected(row) {
        if (!row) {
            return false;
        }
        return this.state.selectedRows.has(`${row[this.rowIdentifier]}`);
    }
    selectRow(row) {
        const selected = this.isSelected(row);
        if (selected) {
            this.state.selectedRows.delete(`${row[this.rowIdentifier]}`);
        }
        else {
            this.state.selectedRows.set(`${row[this.rowIdentifier]}`, row);
        }
        this.state.onSelectionChange();
    }
    selectRows(selected) {
        (this.dataSource.data || []).forEach((row) => {
            if (!selected) {
                this.state.selectedRows.delete(`${row[this.rowIdentifier]}`);
            }
            else {
                this.state.selectedRows.set(`${row[this.rowIdentifier]}`, row);
            }
        });
        this.state.onSelectionChange();
    }
    allCurrentRowsSelected() {
        for (let i = 0; i < (this.dataSource.data || []).length; i++) {
            if (!this.isSelected((this.dataSource.data || [])[i])) {
                return false;
            }
        }
        return true;
    }
    configureLastDisplayedColumn() {
        if (this.columns && this.displayedColumns && 0 !== this.columns.length && 0 !== this.displayedColumns.length) {
            this.columns.forEach((column) => {
                if (column.initialResizable) {
                    column.resizable = column.initialResizable.resizable;
                    column.width = column.initialResizable.width;
                    column.initialResizable = undefined;
                }
            });
            const resizableColumns = this.displayedColumns.filter((name) => {
                return (this.columns.findIndex((column) => {
                    return column.resizable && column.id === name;
                }) !== -1);
            });
            if (resizableColumns && resizableColumns.length > 0) {
                const lastResizableColumn = this.columns.find((column) => {
                    return column.id === resizableColumns[resizableColumns.length - 1];
                });
                lastResizableColumn.initialResizable = {
                    resizable: lastResizableColumn.resizable,
                    width: lastResizableColumn.width,
                };
                lastResizableColumn.width = undefined;
                lastResizableColumn.resizable = false;
            }
        }
    }
    configureColumns() {
        if (this.columns && this.columns.length !== 0 && Object.keys(this.templates).length !== 0) {
            // Figure the column templates
            this.columns.forEach((column) => {
                // Figure the template
                let templateName;
                if (column.template) {
                    // Pass it in as template
                    templateName = column.template;
                }
                else if (!!this.templates[column.id]) {
                    // Custom template for the column id
                    templateName = column.id;
                }
                else {
                    // Default to the defaulCellTemplate
                    if (column.type === 'action') {
                        if (column.action && column.action.options) {
                            if (!column.action.icon) {
                                column.action.icon = 'collapse';
                            }
                            templateName = 'dropdownCellTemplate';
                        }
                        else {
                            templateName = 'buttonCellTemplate';
                        }
                    }
                    else {
                        if (column.type === 'link:tel' || column.type === 'link:mailto') {
                            templateName = `${column.type.split(':')[1]}CellTemplate`;
                        }
                        else {
                            templateName = `${column.type}CellTemplate`;
                        }
                    }
                }
                this.columnToTemplate[column.id] = this.templates[templateName];
            });
            this.configureLastDisplayedColumn();
            this.columnsLoaded = true;
        }
    }
    scrollListener() {
        const target = this.novoDataTableContainer.nativeElement;
        const left = target.scrollLeft;
        if (left !== this.scrollLeft) {
            this.scrollLeft = target.scrollLeft;
        }
        this.ref.markForCheck();
    }
}
NovoDataTable.ɵfac = function NovoDataTable_Factory(t) { return new (t || NovoDataTable)(ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(DataTableState)); };
NovoDataTable.ɵcmp = ɵɵdefineComponent({ type: NovoDataTable, selectors: [["novo-data-table"]], contentQueries: function NovoDataTable_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵɵcontentQuery(dirIndex, NovoTemplate, false);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.customTemplates = _t);
    } }, viewQuery: function NovoDataTable_Query(rf, ctx) { if (rf & 1) {
        ɵɵviewQuery(_c0$L, true);
        ɵɵviewQuery(NovoTemplate, true);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.novoDataTableContainer = _t.first);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.defaultTemplates = _t);
    } }, hostVars: 6, hostBindings: function NovoDataTable_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵclassProp("global-search-hidden", ctx.globalSearchHiddenClassToggle)("empty", ctx.empty)("loading", ctx.loadingClass);
    } }, inputs: { displayedColumns: "displayedColumns", paginationOptions: "paginationOptions", searchOptions: "searchOptions", defaultSort: "defaultSort", name: "name", allowMultipleFilters: "allowMultipleFilters", rowIdentifier: "rowIdentifier", activeRowIdentifier: "activeRowIdentifier", trackByFn: "trackByFn", templates: "templates", fixedHeader: "fixedHeader", paginatorDataFeatureId: "paginatorDataFeatureId", dataTableService: "dataTableService", rows: "rows", outsideFilter: "outsideFilter", refreshSubject: "refreshSubject", columns: "columns", customFilter: "customFilter", hasExandedRows: "hasExandedRows", forceShowHeader: "forceShowHeader", hideGlobalSearch: "hideGlobalSearch" }, outputs: { resized: "resized", preferencesChanged: "preferencesChanged" }, features: [ɵɵProvidersFeature([DataTableState])], ngContentSelectors: _c6, decls: 29, vars: 17, consts: [[3, "empty", 4, "ngIf"], ["class", "novo-data-table-loading-mask", "data-automation-id", "novo-data-table-loading", 4, "ngIf"], [1, "novo-data-table-outside-container", 3, "ngClass"], ["class", "novo-data-table-custom-filter", 4, "ngIf"], [1, "novo-data-table-container", 3, "ngClass"], ["novoDataTableContainer", ""], ["novoDataTableSortFilter", "", 3, "dataSource", "trackBy", "expandable", "empty", "hidden", 4, "ngIf"], ["class", "novo-data-table-footer", 4, "ngIf"], ["class", "novo-data-table-no-results-container", 3, "left", 4, "ngIf"], ["class", "novo-data-table-empty-container", 4, "ngIf"], ["novoTemplate", "textCellTemplate"], ["novoTemplate", "dateCellTemplate"], ["novoTemplate", "datetimeCellTemplate"], ["novoTemplate", "timeCellTemplate"], ["novoTemplate", "currencyCellTemplate"], ["novoTemplate", "bigdecimalCellTemplate"], ["novoTemplate", "numberCellTemplate"], ["novoTemplate", "percentCellTemplate"], ["novoTemplate", "linkCellTemplate"], ["novoTemplate", "telCellTemplate"], ["novoTemplate", "mailtoCellTemplate"], ["novoTemplate", "buttonCellTemplate"], ["novoTemplate", "dropdownCellTemplate"], ["novoTemplate", "defaultNoResultsMessage"], ["novoTemplate", "defaultEmptyMessage"], ["novoTemplate", "expandedRow"], ["detailRowTemplate", ""], [4, "ngTemplateOutlet"], ["alwaysOpen", "true", 3, "ngModel", "placeholder", "hint", "searchChanged", "ngModelChange", 4, "ngIf"], [3, "theme", "length", "page", "pageSize", "pageSizeOptions", "dataFeatureId", 4, "ngIf"], ["class", "novo-data-table-actions", 4, "ngIf"], ["alwaysOpen", "true", 3, "ngModel", "placeholder", "hint", "searchChanged", "ngModelChange"], [3, "theme", "length", "page", "pageSize", "pageSizeOptions", "dataFeatureId"], [1, "novo-data-table-actions"], ["data-automation-id", "novo-data-table-loading", 1, "novo-data-table-loading-mask"], [1, "novo-data-table-custom-filter"], ["novoDataTableSortFilter", "", 3, "dataSource", "trackBy", "hidden"], ["cdkColumnDef", "selection"], [4, "cdkHeaderCellDef"], [3, "row", 4, "cdkCellDef"], ["cdkColumnDef", "expand"], [3, "cdkColumnDef", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["data-automation-id", "novo-data-table-header-row", 3, "fixedHeader", 4, "cdkHeaderRowDef"], [3, "ngClass", "novoDataTableExpand", "row", "id", "dataAutomationId", 4, "cdkRowDef", "cdkRowDefColumns"], [3, "row"], [3, "cdkColumnDef"], [3, "column", "filterTemplate", "novo-data-table-cell-config", "resized", "defaultSort", "allowMultipleFilters", "empty", "button-header-cell", "dropdown-header-cell", "fixed-header", 4, "cdkHeaderCellDef"], [3, "resized", "column", "row", "template", "empty", "button-cell", "dropdown-cell", 4, "cdkCellDef"], [3, "column", "filterTemplate", "novo-data-table-cell-config", "resized", "defaultSort", "allowMultipleFilters"], [3, "resized", "column", "row", "template"], ["data-automation-id", "novo-data-table-header-row", 3, "fixedHeader"], [3, "ngClass", "novoDataTableExpand", "row", "id", "dataAutomationId"], [1, "novo-data-table-footer"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "novo-data-table-no-results-container"], [1, "novo-data-table-empty-message"], [1, "novo-data-table-empty-container"], [3, "click"], [3, "href", "target"], ["tooltipPosition", "right", 3, "tooltip"], ["parentScrollSelector", ".novo-data-table-container", "containerClass", "novo-data-table-dropdown"], ["type", "button", "theme", "dialogue", "inverse", "", 3, "icon"], [3, "disabled", "action", 4, "ngFor", "ngForOf"], [3, "disabled", "action"], [1, "bhi-search-question"], [1, "novo-data-table-detail-row", 2, "overflow", "hidden"]], template: function NovoDataTable_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵtemplate(0, NovoDataTable_header_0_Template, 5, 6, "header", 0);
        ɵɵtemplate(1, NovoDataTable_div_1_Template, 2, 0, "div", 1);
        ɵɵelementStart(2, "div", 2);
        ɵɵtemplate(3, NovoDataTable_div_3_Template, 2, 1, "div", 3);
        ɵɵelementStart(4, "div", 4, 5);
        ɵɵtemplate(6, NovoDataTable_cdk_table_6_Template, 10, 11, "cdk-table", 6);
        ɵɵtemplate(7, NovoDataTable_div_7_Template, 2, 5, "div", 7);
        ɵɵtemplate(8, NovoDataTable_div_8_Template, 3, 3, "div", 8);
        ɵɵelementEnd();
        ɵɵtemplate(9, NovoDataTable_div_9_Template, 3, 1, "div", 9);
        ɵɵelementEnd();
        ɵɵtemplate(10, NovoDataTable_ng_template_10_Template, 3, 10, "ng-template", 10);
        ɵɵtemplate(11, NovoDataTable_ng_template_11_Template, 4, 7, "ng-template", 11);
        ɵɵtemplate(12, NovoDataTable_ng_template_12_Template, 4, 7, "ng-template", 12);
        ɵɵtemplate(13, NovoDataTable_ng_template_13_Template, 4, 7, "ng-template", 13);
        ɵɵtemplate(14, NovoDataTable_ng_template_14_Template, 4, 7, "ng-template", 14);
        ɵɵtemplate(15, NovoDataTable_ng_template_15_Template, 4, 7, "ng-template", 15);
        ɵɵtemplate(16, NovoDataTable_ng_template_16_Template, 4, 7, "ng-template", 16);
        ɵɵtemplate(17, NovoDataTable_ng_template_17_Template, 4, 8, "ng-template", 17);
        ɵɵtemplate(18, NovoDataTable_ng_template_18_Template, 3, 11, "ng-template", 18);
        ɵɵtemplate(19, NovoDataTable_ng_template_19_Template, 4, 9, "ng-template", 19);
        ɵɵtemplate(20, NovoDataTable_ng_template_20_Template, 4, 9, "ng-template", 20);
        ɵɵtemplate(21, NovoDataTable_ng_template_21_Template, 2, 7, "ng-template", 21);
        ɵɵtemplate(22, NovoDataTable_ng_template_22_Template, 5, 3, "ng-template", 22);
        ɵɵtemplate(23, NovoDataTable_ng_template_23_Template, 3, 1, "ng-template", 23);
        ɵɵtemplate(24, NovoDataTable_ng_template_24_Template, 3, 1, "ng-template", 24);
        ɵɵtemplate(25, NovoDataTable_ng_template_25_Template, 1, 0, "ng-template", 25);
        ɵɵtemplate(26, NovoDataTable_ng_template_26_Template, 2, 5, "ng-template", null, 26, ɵɵtemplateRefExtractor);
        ɵɵprojection(28);
    } if (rf & 2) {
        ɵɵproperty("ngIf", !((ctx.dataSource == null ? null : ctx.dataSource.totallyEmpty) && !ctx.state.userFiltered) && !ctx.loading || ctx.forceShowHeader);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", (ctx.dataSource == null ? null : ctx.dataSource.loading) || ctx.loading);
        ɵɵadvance(1);
        ɵɵproperty("ngClass", ɵɵpureFunction1(13, _c4$2, ctx.fixedHeader));
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.customFilter);
        ɵɵadvance(1);
        ɵɵclassProp("empty-user-filtered", (ctx.dataSource == null ? null : ctx.dataSource.currentlyEmpty) && ctx.state.userFiltered)("empty", (ctx.dataSource == null ? null : ctx.dataSource.totallyEmpty) && !(ctx.dataSource == null ? null : ctx.dataSource.loading) && !ctx.loading && !ctx.state.userFiltered && !ctx.dataSource.pristine);
        ɵɵproperty("ngClass", ɵɵpureFunction1(15, _c5$1, ctx.fixedHeader));
        ɵɵadvance(2);
        ɵɵproperty("ngIf", (ctx.columns == null ? null : ctx.columns.length) > 0 && ctx.columnsLoaded && ctx.dataSource);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.templates["footer"]);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", (ctx.dataSource == null ? null : ctx.dataSource.currentlyEmpty) && ctx.state.userFiltered && !(ctx.dataSource == null ? null : ctx.dataSource.loading) && !ctx.loading && !ctx.dataSource.pristine);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", (ctx.dataSource == null ? null : ctx.dataSource.totallyEmpty) && !(ctx.dataSource == null ? null : ctx.dataSource.loading) && !ctx.loading && !ctx.state.userFiltered && !ctx.dataSource.pristine);
    } }, encapsulation: 2, data: { animation: [
            trigger('expand', [
                state('void', style({ height: '0px', minHeight: '0', visibility: 'hidden' })),
                state('*', style({ height: '*', visibility: 'visible' })),
                transition('void <=> *', animate('70ms cubic-bezier(0.4, 0.0, 0.2, 1)')),
            ]),
        ] }, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDataTable, [{
        type: Component,
        args: [{
                selector: 'novo-data-table',
                animations: [
                    trigger('expand', [
                        state('void', style({ height: '0px', minHeight: '0', visibility: 'hidden' })),
                        state('*', style({ height: '*', visibility: 'visible' })),
                        transition('void <=> *', animate('70ms cubic-bezier(0.4, 0.0, 0.2, 1)')),
                    ]),
                ],
                template: `
    <header
      *ngIf="(!(dataSource?.totallyEmpty && !state.userFiltered) && !loading) || forceShowHeader"
      [class.empty]="hideGlobalSearch && !paginationOptions && !templates['customActions']"
    >
      <ng-container *ngTemplateOutlet="templates['customHeader']"></ng-container>
      <novo-search
        alwaysOpen="true"
        (searchChanged)="onSearchChange($event)"
        [(ngModel)]="state.globalSearch"
        *ngIf="!hideGlobalSearch"
        [placeholder]="searchOptions?.placeholder"
        [hint]="searchOptions?.tooltip"
      >
      </novo-search>
      <novo-data-table-pagination
        *ngIf="paginationOptions"
        [theme]="paginationOptions.theme"
        [length]="dataSource?.currentTotal"
        [page]="paginationOptions.page"
        [pageSize]="paginationOptions.pageSize"
        [pageSizeOptions]="paginationOptions.pageSizeOptions"
        [dataFeatureId]="paginatorDataFeatureId"
      >
      </novo-data-table-pagination>
      <div class="novo-data-table-actions" *ngIf="templates['customActions']">
        <ng-container *ngTemplateOutlet="templates['customActions']"></ng-container>
      </div>
    </header>
    <div class="novo-data-table-loading-mask" *ngIf="dataSource?.loading || loading" data-automation-id="novo-data-table-loading">
      <novo-loading></novo-loading>
    </div>
    <div class="novo-data-table-outside-container" [ngClass]="{ 'novo-data-table-outside-container-fixed': fixedHeader }">
      <div class="novo-data-table-custom-filter" *ngIf="customFilter">
        <ng-container *ngTemplateOutlet="templates['customFilter']"></ng-container>
      </div>
      <div
        #novoDataTableContainer
        class="novo-data-table-container"
        [ngClass]="{ 'novo-data-table-container-fixed': fixedHeader }"
        [class.empty-user-filtered]="dataSource?.currentlyEmpty && state.userFiltered"
        [class.empty]="dataSource?.totallyEmpty && !dataSource?.loading && !loading && !state.userFiltered && !dataSource.pristine"
      >
        <cdk-table
          *ngIf="columns?.length > 0 && columnsLoaded && dataSource"
          [dataSource]="dataSource"
          [trackBy]="trackByFn"
          novoDataTableSortFilter
          [class.expandable]="expandable"
          [class.empty]="dataSource?.currentlyEmpty && state.userFiltered"
          [hidden]="dataSource?.totallyEmpty && !state.userFiltered"
        >
          <ng-container cdkColumnDef="selection">
            <novo-data-table-checkbox-header-cell *cdkHeaderCellDef></novo-data-table-checkbox-header-cell>
            <novo-data-table-checkbox-cell *cdkCellDef="let row; let i = index" [row]="row"></novo-data-table-checkbox-cell>
          </ng-container>
          <ng-container cdkColumnDef="expand">
            <novo-data-table-expand-header-cell *cdkHeaderCellDef></novo-data-table-expand-header-cell>
            <novo-data-table-expand-cell *cdkCellDef="let row; let i = index" [row]="row"></novo-data-table-expand-cell>
          </ng-container>
          <ng-container *ngFor="let column of columns; trackBy: trackColumnsBy" [cdkColumnDef]="column.id">
            <novo-data-table-header-cell
              *cdkHeaderCellDef
              [column]="column"
              [filterTemplate]="templates['column-filter-' + column.id]"
              [novo-data-table-cell-config]="column"
              [resized]="resized"
              [defaultSort]="defaultSort"
              [allowMultipleFilters]="allowMultipleFilters"
              [class.empty]="column?.type === 'action' && !column?.label"
              [class.button-header-cell]="column?.type === 'expand' || (column?.type === 'action' && !column?.action?.options)"
              [class.dropdown-header-cell]="column?.type === 'action' && column?.action?.options"
              [class.fixed-header]="fixedHeader"
            ></novo-data-table-header-cell>
            <novo-data-table-cell
              *cdkCellDef="let row"
              [resized]="resized"
              [column]="column"
              [row]="row"
              [template]="columnToTemplate[column.id]"
              [class.empty]="column?.type === 'action' && !column?.label"
              [class.button-cell]="column?.type === 'expand' || (column?.type === 'action' && !column?.action?.options)"
              [class.dropdown-cell]="column?.type === 'action' && column?.action?.options"
            ></novo-data-table-cell>
          </ng-container>
          <novo-data-table-header-row
            *cdkHeaderRowDef="displayedColumns"
            [fixedHeader]="fixedHeader"
            data-automation-id="novo-data-table-header-row"
          ></novo-data-table-header-row>
          <novo-data-table-row
            *cdkRowDef="let row; columns: displayedColumns"
            [ngClass]="{ active: row[rowIdentifier] == activeRowIdentifier }"
            [novoDataTableExpand]="detailRowTemplate"
            [row]="row"
            [id]="name + '-' + row[rowIdentifier]"
            [dataAutomationId]="row[rowIdentifier]"
          ></novo-data-table-row>
        </cdk-table>
        <div class="novo-data-table-footer" *ngIf="templates['footer']">
          <ng-container *ngTemplateOutlet="templates['footer']; context: { $implicit: columns, data: dataSource.data }"></ng-container>
        </div>
        <div
          class="novo-data-table-no-results-container"
          [style.left.px]="scrollLeft"
          *ngIf="dataSource?.currentlyEmpty && state.userFiltered && !dataSource?.loading && !loading && !dataSource.pristine"
        >
          <div class="novo-data-table-empty-message">
            <ng-container *ngTemplateOutlet="templates['noResultsMessage'] || templates['defaultNoResultsMessage']"></ng-container>
          </div>
        </div>
      </div>
      <div
        class="novo-data-table-empty-container"
        *ngIf="dataSource?.totallyEmpty && !dataSource?.loading && !loading && !state.userFiltered && !dataSource.pristine"
      >
        <div class="novo-data-table-empty-message">
          <ng-container *ngTemplateOutlet="templates['emptyMessage'] || templates['defaultNoResultsMessage']"></ng-container>
        </div>
      </div>
    </div>
    <!-- DEFAULT CELL TEMPLATE -->
    <ng-template novoTemplate="textCellTemplate" let-row let-col="col">
      <span [style.width.px]="col?.width" [style.min-width.px]="col?.width" [style.max-width.px]="col?.width">{{
        row[col.id] | dataTableInterpolate: col
      }}</span>
    </ng-template>
    <ng-template novoTemplate="dateCellTemplate" let-row let-col="col">
      <span>{{ row[col.id] | dataTableInterpolate: col | dataTableDateRenderer: col }}</span>
    </ng-template>
    <ng-template novoTemplate="datetimeCellTemplate" let-row let-col="col">
      <span>{{ row[col.id] | dataTableInterpolate: col | dataTableDateTimeRenderer: col }}</span>
    </ng-template>
    <ng-template novoTemplate="timeCellTemplate" let-row let-col="col">
      <span>{{ row[col.id] | dataTableInterpolate: col | dataTableTimeRenderer: col }}</span>
    </ng-template>
    <ng-template novoTemplate="currencyCellTemplate" let-row let-col="col">
      <span>{{ row[col.id] | dataTableInterpolate: col | dataTableCurrencyRenderer: col }}</span>
    </ng-template>
    <ng-template novoTemplate="bigdecimalCellTemplate" let-row let-col="col">
      <span>{{ row[col.id] | dataTableInterpolate: col | dataTableBigDecimalRenderer: col }}</span>
    </ng-template>
    <ng-template novoTemplate="numberCellTemplate" let-row let-col="col">
      <span>{{ row[col.id] | dataTableInterpolate: col | dataTableNumberRenderer: col }}</span>
    </ng-template>
    <ng-template novoTemplate="percentCellTemplate" let-row let-col="col">
      <span>{{ row[col.id] | dataTableInterpolate: col | dataTableNumberRenderer: col:true }}</span>
    </ng-template>
    <ng-template novoTemplate="linkCellTemplate" let-row let-col="col">
      <a
        [attr.data-feature-id]="col?.attributes?.dataFeatureId"
        (click)="col.handlers?.click({ originalEvent: $event, row: row })"
        [style.width.px]="col?.width"
        [style.min-width.px]="col?.width"
        [style.max-width.px]="col?.width"
        >{{ row[col.id] | dataTableInterpolate: col }}</a
      >
    </ng-template>
    <ng-template novoTemplate="telCellTemplate" let-row let-col="col">
      <a href="tel:{{ row[col.id] | dataTableInterpolate: col }}" [target]="col?.attributes?.target">{{
        row[col.id] | dataTableInterpolate: col
      }}</a>
    </ng-template>
    <ng-template novoTemplate="mailtoCellTemplate" let-row let-col="col">
      <a href="mailto:{{ row[col.id] | dataTableInterpolate: col }}" [target]="col?.attributes?.target">{{
        row[col.id] | dataTableInterpolate: col
      }}</a>
    </ng-template>
    <ng-template novoTemplate="buttonCellTemplate" let-row let-col="col">
      <p [tooltip]="col?.action?.tooltip" tooltipPosition="right" [attr.data-feature-id]="col?.attributes?.dataFeatureId">
        <i
          class="bhi-{{ col?.action?.icon }} data-table-icon"
          (click)="col.handlers?.click({ originalEvent: $event, row: row })"
          [class.disabled]="isDisabled(col, row)"
        ></i>
      </p>
    </ng-template>
    <ng-template novoTemplate="dropdownCellTemplate" let-row let-col="col">
      <novo-dropdown parentScrollSelector=".novo-data-table-container" containerClass="novo-data-table-dropdown">
        <button type="button" theme="dialogue" [icon]="col.action.icon" inverse>{{ col.label }}</button>
        <list>
          <item
            *ngFor="let option of col?.action?.options"
            (action)="option.handlers.click({ originalEvent: $event?.originalEvent, row: row })"
            [disabled]="isDisabled(option, row)"
          >
            <span [attr.data-automation-id]="option.label">{{ option.label }}</span>
          </item>
        </list>
      </novo-dropdown>
    </ng-template>
    <ng-template novoTemplate="defaultNoResultsMessage">
      <h4><i class="bhi-search-question"></i> {{ labels.noMatchingRecordsMessage }}</h4>
    </ng-template>
    <ng-template novoTemplate="defaultEmptyMessage">
      <h4><i class="bhi-search-question"></i> {{ labels.emptyTableMessage }}</h4>
    </ng-template>
    <ng-template novoTemplate="expandedRow"> You did not provide an "expandedRow" template! </ng-template>
    <ng-template #detailRowTemplate let-row>
      <div class="novo-data-table-detail-row" [@expand] style="overflow: hidden">
        <ng-container *ngTemplateOutlet="templates['expandedRow']; context: { $implicit: row }"></ng-container>
      </div>
    </ng-template>
    <!-- CUSTOM CELLS PASSED IN -->
    <ng-content></ng-content>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [DataTableState],
            }]
    }], function () { return [{ type: NovoLabelService }, { type: ChangeDetectorRef }, { type: DataTableState }]; }, { globalSearchHiddenClassToggle: [{
            type: HostBinding,
            args: ['class.global-search-hidden']
        }], customTemplates: [{
            type: ContentChildren,
            args: [NovoTemplate]
        }], defaultTemplates: [{
            type: ViewChildren,
            args: [NovoTemplate]
        }], novoDataTableContainer: [{
            type: ViewChild,
            args: ['novoDataTableContainer']
        }], resized: [{
            type: Output
        }], displayedColumns: [{
            type: Input
        }], paginationOptions: [{
            type: Input
        }], searchOptions: [{
            type: Input
        }], defaultSort: [{
            type: Input
        }], name: [{
            type: Input
        }], allowMultipleFilters: [{
            type: Input
        }], rowIdentifier: [{
            type: Input
        }], activeRowIdentifier: [{
            type: Input
        }], trackByFn: [{
            type: Input
        }], templates: [{
            type: Input
        }], fixedHeader: [{
            type: Input
        }], paginatorDataFeatureId: [{
            type: Input
        }], dataTableService: [{
            type: Input
        }], rows: [{
            type: Input
        }], outsideFilter: [{
            type: Input
        }], refreshSubject: [{
            type: Input
        }], columns: [{
            type: Input
        }], customFilter: [{
            type: Input
        }], hasExandedRows: [{
            type: Input
        }], forceShowHeader: [{
            type: Input
        }], hideGlobalSearch: [{
            type: Input
        }], preferencesChanged: [{
            type: Output
        }], empty: [{
            type: HostBinding,
            args: ['class.empty']
        }], loadingClass: [{
            type: HostBinding,
            args: ['class.loading']
        }] }); })();

class NovoDataTableCheckboxHeaderCell extends CdkHeaderCell {
    constructor(columnDef, elementRef, renderer, dataTable, ref) {
        super(columnDef, elementRef);
        this.dataTable = dataTable;
        this.ref = ref;
        this.role = 'columnheader';
        this.checked = false;
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', `novo-checkbox-column-header-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, `novo-checkbox-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, 'novo-data-table-checkbox-header-cell');
        this.selectionSubscription = this.dataTable.state.selectionSource.subscribe(() => {
            this.checked = this.dataTable.allCurrentRowsSelected();
            this.ref.markForCheck();
        });
        this.paginationSubscription = this.dataTable.state.paginationSource.subscribe((event) => {
            if (event.isPageSizeChange) {
                this.checked = false;
                this.dataTable.selectRows(false);
            }
            else {
                this.checked = this.dataTable.allCurrentRowsSelected();
            }
            this.ref.markForCheck();
        });
        this.resetSubscription = this.dataTable.state.resetSource.subscribe(() => {
            this.checked = false;
            this.ref.markForCheck();
        });
    }
    ngOnDestroy() {
        if (this.selectionSubscription) {
            this.selectionSubscription.unsubscribe();
        }
        if (this.paginationSubscription) {
            this.paginationSubscription.unsubscribe();
        }
        if (this.resetSubscription) {
            this.resetSubscription.unsubscribe();
        }
    }
    onClick() {
        this.dataTable.selectRows(!this.checked);
    }
}
NovoDataTableCheckboxHeaderCell.ɵfac = function NovoDataTableCheckboxHeaderCell_Factory(t) { return new (t || NovoDataTableCheckboxHeaderCell)(ɵɵdirectiveInject(CdkColumnDef), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(NovoDataTable), ɵɵdirectiveInject(ChangeDetectorRef)); };
NovoDataTableCheckboxHeaderCell.ɵcmp = ɵɵdefineComponent({ type: NovoDataTableCheckboxHeaderCell, selectors: [["novo-data-table-checkbox-header-cell"]], hostVars: 1, hostBindings: function NovoDataTableCheckboxHeaderCell_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵattribute("role", ctx.role);
    } }, features: [ɵɵInheritDefinitionFeature], decls: 4, vars: 5, consts: [[1, "data-table-checkbox", 3, "click"], ["type", "checkbox", 3, "checked"]], template: function NovoDataTableCheckboxHeaderCell_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "div", 0);
        ɵɵlistener("click", function NovoDataTableCheckboxHeaderCell_Template_div_click_0_listener() { return ctx.onClick(); });
        ɵɵelement(1, "input", 1);
        ɵɵelementStart(2, "label");
        ɵɵelement(3, "i");
        ɵɵelementEnd();
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵadvance(1);
        ɵɵproperty("checked", ctx.checked);
        ɵɵadvance(2);
        ɵɵclassProp("bhi-checkbox-empty", !ctx.checked)("bhi-checkbox-filled", ctx.checked);
    } }, encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDataTableCheckboxHeaderCell, [{
        type: Component,
        args: [{
                selector: 'novo-data-table-checkbox-header-cell',
                template: `
    <div class="data-table-checkbox" (click)="onClick()">
      <input type="checkbox" [checked]="checked" />
      <label>
        <i [class.bhi-checkbox-empty]="!checked" [class.bhi-checkbox-filled]="checked"></i>
      </label>
    </div>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: CdkColumnDef }, { type: ElementRef }, { type: Renderer2 }, { type: NovoDataTable }, { type: ChangeDetectorRef }]; }, { role: [{
            type: HostBinding,
            args: ['attr.role']
        }] }); })();

class NovoDataTableExpandHeaderCell extends CdkHeaderCell {
    constructor(columnDef, elementRef, renderer, dataTable, ref) {
        super(columnDef, elementRef);
        this.dataTable = dataTable;
        this.ref = ref;
        this.role = 'columnheader';
        this.expanded = false;
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', `novo-expand-column-header-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, `novo-expand-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, 'novo-data-table-expand-header-cell');
        this.expandSubscription = this.dataTable.state.expandSource.subscribe(() => {
            this.expanded = this.dataTable.allCurrentRowsExpanded();
            this.ref.markForCheck();
        });
    }
    ngOnDestroy() {
        if (this.expandSubscription) {
            this.expandSubscription.unsubscribe();
        }
    }
    expandAll() {
        this.dataTable.expandRows(!this.expanded);
    }
}
NovoDataTableExpandHeaderCell.ɵfac = function NovoDataTableExpandHeaderCell_Factory(t) { return new (t || NovoDataTableExpandHeaderCell)(ɵɵdirectiveInject(CdkColumnDef), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(NovoDataTable), ɵɵdirectiveInject(ChangeDetectorRef)); };
NovoDataTableExpandHeaderCell.ɵcmp = ɵɵdefineComponent({ type: NovoDataTableExpandHeaderCell, selectors: [["novo-data-table-expand-header-cell"]], hostVars: 1, hostBindings: function NovoDataTableExpandHeaderCell_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵattribute("role", ctx.role);
    } }, features: [ɵɵInheritDefinitionFeature], decls: 1, vars: 2, consts: [["novo-data-table-expander", "true", 1, "bhi-next", "data-table-icon", 3, "click"]], template: function NovoDataTableExpandHeaderCell_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "i", 0);
        ɵɵlistener("click", function NovoDataTableExpandHeaderCell_Template_i_click_0_listener() { return ctx.expandAll(); });
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵclassProp("expanded", ctx.expanded);
    } }, encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDataTableExpandHeaderCell, [{
        type: Component,
        args: [{
                selector: 'novo-data-table-expand-header-cell',
                template: ` <i class="bhi-next data-table-icon" novo-data-table-expander="true" (click)="expandAll()" [class.expanded]="expanded"></i> `,
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: CdkColumnDef }, { type: ElementRef }, { type: Renderer2 }, { type: NovoDataTable }, { type: ChangeDetectorRef }]; }, { role: [{
            type: HostBinding,
            args: ['attr.role']
        }] }); })();

var SortDirection;
(function (SortDirection) {
    SortDirection["ASC"] = "ascending";
    SortDirection["DESC"] = "descending";
    SortDirection["NONE"] = "none";
})(SortDirection || (SortDirection = {}));

const activeStyle = { opacity: 1, pointerEvents: 'all', top: 0 };
const inactiveStyle = { opacity: 0, pointerEvents: 'none' };
/** Animation that moves the sort indicator. */
const sortAscAnim = trigger('sortAsc', [
    // ...
    state(SortDirection.ASC, style(activeStyle)),
    state(SortDirection.DESC, style(inactiveStyle)),
    state(SortDirection.NONE, style(inactiveStyle)),
    transition('* => ascending', [animate('1s')]),
    transition('ascending => *', [animate('0.5s')]),
]);
const sortDescAnim = trigger('sortDesc', [
    // ...
    state(SortDirection.ASC, style(inactiveStyle)),
    state(SortDirection.DESC, style(activeStyle)),
    state(SortDirection.NONE, style(inactiveStyle)),
    transition('* => descending', [animate('1s')]),
    transition('descending => *', [animate('0.5s')]),
]);
const sortNoneAnim = trigger('sortNone', [
    // ...
    state(SortDirection.ASC, style(inactiveStyle)),
    state(SortDirection.DESC, style(inactiveStyle)),
    state(SortDirection.NONE, style(activeStyle)),
    transition('* => none', [animate('1s')]),
    transition('none => *', [animate('0.5s')]),
]);

class NovoDataTableSortButton {
    constructor(state, ref, labels) {
        this.state = state;
        this.ref = ref;
        this.labels = labels;
        this.sortChange = new EventEmitter();
        this.SortDirection = SortDirection;
        this._value = SortDirection.NONE;
    }
    get value() {
        return this._value;
    }
    set value(value) {
        this._value = value;
    }
    changeSort(dir) {
        this.value = dir;
        console.log('sort', dir);
        this.sortChange.emit(dir);
    }
    clearSort() {
        this.state.clearSort();
        this.sortChange.emit(SortDirection.NONE);
    }
}
NovoDataTableSortButton.ɵfac = function NovoDataTableSortButton_Factory(t) { return new (t || NovoDataTableSortButton)(ɵɵdirectiveInject(DataTableState), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(NovoLabelService)); };
NovoDataTableSortButton.ɵcmp = ɵɵdefineComponent({ type: NovoDataTableSortButton, selectors: [["novo-sort-button"]], inputs: { value: "value" }, outputs: { sortChange: "sortChange" }, decls: 6, vars: 3, consts: [[1, "novo-sort-asc-icon", 3, "click"], [1, "novo-sort-desc-icon", 3, "click"], [1, "novo-sortable-icon", 3, "click"]], template: function NovoDataTableSortButton_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "novo-icon", 0);
        ɵɵlistener("click", function NovoDataTableSortButton_Template_novo_icon_click_0_listener() { return ctx.changeSort(ctx.SortDirection.DESC); });
        ɵɵtext(1, "arrow-up");
        ɵɵelementEnd();
        ɵɵelementStart(2, "novo-icon", 1);
        ɵɵlistener("click", function NovoDataTableSortButton_Template_novo_icon_click_2_listener() { return ctx.changeSort(ctx.SortDirection.NONE); });
        ɵɵtext(3, "arrow-down\n");
        ɵɵelementEnd();
        ɵɵelementStart(4, "novo-icon", 2);
        ɵɵlistener("click", function NovoDataTableSortButton_Template_novo_icon_click_4_listener() { return ctx.changeSort(ctx.SortDirection.ASC); });
        ɵɵtext(5, "sortable");
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵproperty("@sortAsc", ctx.value);
        ɵɵadvance(2);
        ɵɵproperty("@sortDesc", ctx.value);
        ɵɵadvance(2);
        ɵɵproperty("@sortNone", ctx.value);
    } }, directives: [NovoIconComponent], styles: ["@-webkit-keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}[_nghost-%COMP%]{cursor:pointer;display:inline-flex;height:1.6rem;position:relative;width:1.6rem}[_nghost-%COMP%]   novo-icon[_ngcontent-%COMP%]{color:#bebebe;opacity:0;position:absolute}[_nghost-%COMP%]   novo-icon[_ngcontent-%COMP%]:hover{color:#4a89dc}[_nghost-%COMP%]   .novo-sort-asc-icon[_ngcontent-%COMP%]{top:10px}[_nghost-%COMP%]   .novo-sort-desc-icon[_ngcontent-%COMP%]{top:-10px}"], data: { animation: [sortAscAnim, sortDescAnim, sortNoneAnim] }, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDataTableSortButton, [{
        type: Component,
        args: [{
                selector: 'novo-sort-button',
                styleUrls: ['./sort-button.component.scss'],
                templateUrl: './sort-button.component.html',
                changeDetection: ChangeDetectionStrategy.OnPush,
                animations: [sortAscAnim, sortDescAnim, sortNoneAnim],
            }]
    }], function () { return [{ type: DataTableState }, { type: ChangeDetectorRef }, { type: NovoLabelService }]; }, { sortChange: [{
            type: Output
        }], value: [{
            type: Input
        }] }); })();

class NovoDataTableSortFilter {
    constructor(state) {
        this.state = state;
    }
    filter(id, type, value, transform, allowMultipleFilters = false, selectedOption) {
        let filter;
        if (allowMultipleFilters) {
            filter = this.resolveMultiFilter(id, type, value, transform, selectedOption);
        }
        else {
            if (!Helpers.isBlank(value)) {
                filter = Object.assign({ id, type, value, transform }, (selectedOption && { selectedOption }));
            }
            else {
                filter = undefined;
            }
        }
        this.state.filter = filter;
        this.state.reset(false, true);
        this.state.updates.next({ filter, sort: this.state.sort });
        this.state.onSortFilterChange();
    }
    sort(id, value, transform) {
        const sort = { id, value, transform };
        this.state.sort = sort;
        this.state.reset(false, true);
        this.state.updates.next({ sort, filter: this.state.filter });
        this.state.onSortFilterChange();
    }
    resolveMultiFilter(id, type, value, transform, selectedOption) {
        let filter;
        filter = Helpers.convertToArray(this.state.filter);
        const filterIndex = filter.findIndex((aFilter) => aFilter && aFilter.id === id);
        if (filterIndex > -1) {
            filter.splice(filterIndex, 1);
        }
        if (!Helpers.isBlank(value)) {
            filter = [...filter, Object.assign({ id, type, value, transform }, (selectedOption && { selectedOption }))];
        }
        if (filter.length < 1) {
            filter = undefined;
        }
        return filter;
    }
}
NovoDataTableSortFilter.ɵfac = function NovoDataTableSortFilter_Factory(t) { return new (t || NovoDataTableSortFilter)(ɵɵdirectiveInject(DataTableState)); };
NovoDataTableSortFilter.ɵdir = ɵɵdefineDirective({ type: NovoDataTableSortFilter, selectors: [["", "novoDataTableSortFilter", ""]] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDataTableSortFilter, [{
        type: Directive,
        args: [{
                selector: '[novoDataTableSortFilter]',
            }]
    }], function () { return [{ type: DataTableState }]; }, null); })();

/** Injection token used to customize the date range selection behavior. */
const NOVO_DATE_SELECTION_STRATEGY = new InjectionToken('NOVO_DATE_SELECTION_STRATEGY');
/** Provides the default date selection behavior. Single Date */
class DefaultDateSelectionStrategy {
    selectionFinished(date, currentValue, event) {
        return [date];
    }
    createPreview(activeDate, [currentDate]) {
        return [activeDate];
    }
    isSelected(activeDate, [currentDate]) {
        return isSameDay(activeDate, currentDate);
    }
}
DefaultDateSelectionStrategy.ɵfac = function DefaultDateSelectionStrategy_Factory(t) { return new (t || DefaultDateSelectionStrategy)(); };
DefaultDateSelectionStrategy.ɵprov = ɵɵdefineInjectable({ token: DefaultDateSelectionStrategy, factory: DefaultDateSelectionStrategy.ɵfac });
/*@__PURE__*/ (function () { ɵsetClassMetadata(DefaultDateSelectionStrategy, [{
        type: Injectable
    }], null, null); })();
/** @docs-private */
function NOVO_DATE_SELECTION_STRATEGY_PROVIDER_FACTORY(parent) {
    return parent || new DefaultDateSelectionStrategy();
}
/** @docs-private */
const NOVO_DATE_SELECTION_STRATEGY_PROVIDER = {
    provide: NOVO_DATE_SELECTION_STRATEGY,
    deps: [[new Optional(), new SkipSelf(), NOVO_DATE_SELECTION_STRATEGY]],
    useFactory: NOVO_DATE_SELECTION_STRATEGY_PROVIDER_FACTORY,
};

class MultiDateSelectionStrategy {
    selectionFinished(dateLike, currentValue, event) {
        const date = dateLike;
        const current = new Set(currentValue.map((c) => c.getTime()));
        if (current.has(date.getTime())) {
            current.delete(date.getTime());
        }
        else {
            current.add(date.getTime());
        }
        return [...current].map((c) => new Date(c));
    }
    createPreview(activeDate, currentValue) {
        return [activeDate];
    }
    isSelected(activeDate, currentValue) {
        return currentValue && currentValue.includes(activeDate);
    }
}
MultiDateSelectionStrategy.ɵfac = function MultiDateSelectionStrategy_Factory(t) { return new (t || MultiDateSelectionStrategy)(); };
MultiDateSelectionStrategy.ɵprov = ɵɵdefineInjectable({ token: MultiDateSelectionStrategy, factory: MultiDateSelectionStrategy.ɵfac });
/*@__PURE__*/ (function () { ɵsetClassMetadata(MultiDateSelectionStrategy, [{
        type: Injectable
    }], null, null); })();

class RangeSelectionStrategy {
    selectionFinished(date, currentRange) {
        let [start, end] = currentRange;
        if (start == null) {
            start = date;
        }
        else if (end == null && date && differenceInCalendarDays(date, start) >= 0) {
            end = date;
        }
        else {
            start = date;
            end = null;
        }
        return [start, end];
    }
    createPreview(activeDate, currentRange) {
        let start = null;
        let end = null;
        const [currStart, currEnd] = currentRange;
        if (currStart && !currEnd && activeDate) {
            start = currStart;
            end = activeDate;
        }
        return [start, end];
    }
    isSelected(activeDate, currentRange) {
        const [start, end] = currentRange;
        return isWithinRange(activeDate, start, end);
    }
}
RangeSelectionStrategy.ɵfac = function RangeSelectionStrategy_Factory(t) { return new (t || RangeSelectionStrategy)(); };
RangeSelectionStrategy.ɵprov = ɵɵdefineInjectable({ token: RangeSelectionStrategy, factory: RangeSelectionStrategy.ɵfac });
/*@__PURE__*/ (function () { ɵsetClassMetadata(RangeSelectionStrategy, [{
        type: Injectable
    }], null, null); })();

class WeekSelectionStrategy {
    constructor(weekStartsOn = 0) {
        this.weekStartsOn = weekStartsOn;
    }
    selectionFinished(date) {
        return this._createWeekRange(date);
    }
    createPreview(activeDate) {
        return this._createWeekRange(activeDate);
    }
    _createWeekRange(date) {
        if (date) {
            const { weekStartsOn } = this;
            const start = startOfWeek(date, { weekStartsOn });
            const end = endOfWeek(date, { weekStartsOn });
            return [start, end];
        }
        return [null, null];
    }
    isSelected(activeDate, currentRange) {
        const [start, end] = currentRange;
        return isWithinRange(activeDate, start, end);
    }
}

function NovoMonthViewElement_th_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "th", 3);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const day_r2 = ctx.$implicit;
    ɵɵpropertyInterpolate("title", day_r2);
    ɵɵattribute("data-automation-id", day_r2.substr(0, 2));
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", day_r2.substr(0, 2), " ");
} }
function NovoMonthViewElement_tr_5_td_1_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "td", 5);
    ɵɵlistener("mouseover", function NovoMonthViewElement_tr_5_td_1_Template_td_mouseover_0_listener($event) { ɵɵrestoreView(_r7); const day_r5 = ctx.$implicit; const ctx_r6 = ɵɵnextContext(2); return ctx_r6.onHover($event, day_r5); });
    ɵɵelementStart(1, "button", 6);
    ɵɵlistener("click", function NovoMonthViewElement_tr_5_td_1_Template_button_click_1_listener($event) { ɵɵrestoreView(_r7); const day_r5 = ctx.$implicit; const ctx_r8 = ɵɵnextContext(2); return ctx_r8.onSelect($event, day_r5); });
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const day_r5 = ctx.$implicit;
    const ctx_r4 = ɵɵnextContext(2);
    ɵɵclassMap(ctx_r4._hasOverlayType(day_r5.date));
    ɵɵclassProp("today", day_r5.isToday)("notinmonth", day_r5.date.getMonth() !== ctx_r4.activeDate.getMonth())("selected", ctx_r4._isSelected(day_r5.date))("preview", ctx_r4._isPreview(day_r5.date))("overlay", ctx_r4._isOverlay(day_r5.date))("inRange", ctx_r4._isInRange(day_r5.date))("rangeStart", ctx_r4._isRangeStart(day_r5.date))("rangeEnd", ctx_r4._isRangeEnd(day_r5.date))("inPreview", ctx_r4._isInPreview(day_r5.date))("previewStart", ctx_r4._isPreviewStart(day_r5.date))("previewEnd", ctx_r4._isPreviewEnd(day_r5.date));
    ɵɵattribute("aria-label", day_r5.name)("aria-disabled", ctx_r4.isDisabled(day_r5.date))("aria-selected", ctx_r4._isSelected(day_r5.date))("data-automation-id", day_r5.number);
    ɵɵadvance(1);
    ɵɵproperty("disabled", ctx_r4.isDisabled(day_r5.date));
    ɵɵattribute("data-automation-id", day_r5.number);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", day_r5.number, " ");
} }
function NovoMonthViewElement_tr_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "tr");
    ɵɵtemplate(1, NovoMonthViewElement_tr_5_td_1_Template, 3, 31, "td", 4);
    ɵɵelementEnd();
} if (rf & 2) {
    const week_r3 = ctx.$implicit;
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", week_r3.days);
} }
class NovoMonthViewElement {
    constructor(labels, element, cdr, _sanitizer) {
        this.labels = labels;
        this.element = element;
        this.cdr = cdr;
        this._sanitizer = _sanitizer;
        this.activeDate = new Date();
        // Weekstart must be 0-6 (Sunday - Saturday)
        this.selected = [];
        this.preview = [];
        this.overlays = [];
        this.isRange = false;
        this.hideOverflowDays = false;
        this._weekStartsOn = 0;
        // Select callback for output
        this.select = new EventEmitter(false);
        // Select callback for output
        this.hover = new EventEmitter(false);
        // List of all the weekdays
        this.weekdays = this.labels.getWeekdays(this.weekStartsOn);
        // List of all months
        this.monthNames = this.labels.getMonths();
    }
    get weekStartsOn() {
        return this._weekStartsOn;
    }
    set weekStartsOn(value) {
        this._weekStartsOn = value;
        this.weekdays = this.labels.getWeekdays(value);
        this.updateView(this.activeDate);
    }
    ngOnInit() {
        // Set labels
        this.updateView(this.activeDate);
    }
    updateView(date) {
        this.monthLabel = this.labels.formatDateWithFormat(this.activeDate, { month: 'short' });
        this.buildMonth(this.activeDate);
    }
    onSelect(event, day) {
        // Helpers.swallowEvent(event);
        this.select.next({ event, day });
        this.cdr.markForCheck();
    }
    onHover(event, day) {
        this.isRange && this.hover.next({ event, day });
    }
    buildMonth(month) {
        // Reset the weeks
        this.weeks = [];
        const start = startOfMonth(month);
        // House keeping variables to know when we are done building the month
        let done = false, date = startOfWeek(start, { weekStartsOn: this.weekStartsOn }), monthIndex = date.getMonth(), count = 0;
        while (!done) {
            // Build the days for the weeks
            this.weeks.push({ days: this.buildWeek(new Date(date.getTime()), month) });
            // Increment variables for the next iteration
            date = addDays(date, 7);
            done = count++ > 2 && monthIndex !== date.getMonth();
            monthIndex = date.getMonth();
        }
    }
    buildWeek(date, month) {
        // Build out of the days of the week
        const days = [];
        // Iterate over the days of the week
        for (let i = 0; i < 7; i++) {
            // Push a variable on the day array with lots of helpers to make the template easier
            days.push({
                name: this.weekdays[i],
                number: date.getDate(),
                isToday: isToday(date),
                date,
            });
            // Increment for the next iteration
            date = addDays(date, 1);
        }
        return days;
    }
    isDisabled(day) {
        return (this.minDate && isBefore(day, this.minDate)) || (this.maxDate && isAfter(day, this.maxDate));
    }
    /** Returns whether a cell should be marked as selected. */
    _isSelected(value) {
        return this.selected && this.selected.find((d) => isSameDay(d, value));
    }
    /** Returns whether a cell should be marked as preview. */
    _isPreview(value) {
        return this.preview && this.preview.find((d) => isSameDay(d, value));
    }
    /** Returns whether a cell should be marked as an overlay. */
    _isOverlay(value) {
        return this.overlays && this.overlays.find((o) => isSameDay(o.date, value));
    }
    /** Returns whether a cell should be marked as an overlay. */
    _hasOverlayType(value) {
        let overlay = this.overlays && this.overlays.find((o) => isSameDay(o.date, value));
        return overlay ? overlay.type : null;
    }
    /** Gets whether a value is the start of the main range. */
    _isRangeStart(value) {
        return isStart(value, this.selected, this.isRange);
    }
    /** Gets whether a value is the end of the main range. */
    _isRangeEnd(value) {
        return isEnd(value, this.selected, this.isRange);
    }
    /** Gets whether a value is within the currently-selected range. */
    _isInRange(value) {
        return isInRange(value, this.selected, this.isRange);
    }
    /** Gets whether a value is the start of the preview range. */
    _isPreviewStart(value) {
        return isStart(value, this.preview, this.isRange);
    }
    /** Gets whether a value is the end of the preview range. */
    _isPreviewEnd(value) {
        return isEnd(value, this.preview, this.isRange);
    }
    /** Gets whether a value is inside the preview range. */
    _isInPreview(value) {
        return isInRange(value, this.preview, this.isRange);
    }
}
NovoMonthViewElement.ɵfac = function NovoMonthViewElement_Factory(t) { return new (t || NovoMonthViewElement)(ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(DomSanitizer)); };
NovoMonthViewElement.ɵcmp = ɵɵdefineComponent({ type: NovoMonthViewElement, selectors: [["novo-month-view"]], hostVars: 2, hostBindings: function NovoMonthViewElement_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵclassProp("hide-overflow-days", ctx.hideOverflowDays);
    } }, inputs: { minDate: "minDate", maxDate: "maxDate", activeDate: "activeDate", selected: "selected", preview: "preview", overlays: "overlays", isRange: "isRange", hideOverflowDays: "hideOverflowDays", weekStartsOn: "weekStartsOn" }, outputs: { select: "select", hover: "hover" }, decls: 6, vars: 2, consts: [["cellspacing", "0", "cellpadding", "0", 1, "calendar-table"], ["class", "weekday", 3, "title", 4, "ngFor", "ngForOf"], [4, "ngFor", "ngForOf"], [1, "weekday", 3, "title"], [3, "today", "notinmonth", "selected", "preview", "overlay", "class", "inRange", "rangeStart", "rangeEnd", "inPreview", "previewStart", "previewEnd", "mouseover", 4, "ngFor", "ngForOf"], [3, "mouseover"], [1, "day", 3, "disabled", "click"]], template: function NovoMonthViewElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "table", 0);
        ɵɵelementStart(1, "thead");
        ɵɵelementStart(2, "tr");
        ɵɵtemplate(3, NovoMonthViewElement_th_3_Template, 2, 3, "th", 1);
        ɵɵelementEnd();
        ɵɵelementEnd();
        ɵɵelementStart(4, "tbody");
        ɵɵtemplate(5, NovoMonthViewElement_tr_5_Template, 2, 1, "tr", 2);
        ɵɵelementEnd();
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵadvance(3);
        ɵɵproperty("ngForOf", ctx.weekdays);
        ɵɵadvance(2);
        ɵɵproperty("ngForOf", ctx.weeks);
    } }, directives: [NgForOf], styles: ["@-webkit-keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}[_nghost-%COMP%]{height:-webkit-min-content;height:-moz-min-content;height:min-content;position:relative;width:100%}[_nghost-%COMP%], [_nghost-%COMP%]   table[_ngcontent-%COMP%]   thead[_ngcontent-%COMP%]{background:#fff}[_nghost-%COMP%]   table[_ngcontent-%COMP%]   thead[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]{padding:10px 0;width:30px}[_nghost-%COMP%]   table[_ngcontent-%COMP%]   .month[_ngcontent-%COMP%], [_nghost-%COMP%]   table[_ngcontent-%COMP%]   .year[_ngcontent-%COMP%]{border-radius:3px;color:#666;font-weight:400;margin:5px;overflow-x:hidden;padding:4px 15px;text-align:center;text-overflow:ellipsis}[_nghost-%COMP%]   table[_ngcontent-%COMP%]   .month.selected[_ngcontent-%COMP%], [_nghost-%COMP%]   table[_ngcontent-%COMP%]   .year.selected[_ngcontent-%COMP%]{background-color:#4a89dc;color:#fff}[_nghost-%COMP%]   table[_ngcontent-%COMP%]   .month[_ngcontent-%COMP%]:hover, [_nghost-%COMP%]   table[_ngcontent-%COMP%]   .year[_ngcontent-%COMP%]:hover{background-color:#4a89dc;color:#fff;cursor:pointer}[_nghost-%COMP%]   table[_ngcontent-%COMP%]   .day[_ngcontent-%COMP%]{background-color:transparent;border:none;border-radius:50%;box-shadow:inset 0 0 0 2px transparent;font-size:1.2rem;height:3.2rem;line-height:1;padding:1px;position:relative;transition:box-shadow .14s ease-in-out;width:3.2rem}[_nghost-%COMP%]   table[_ngcontent-%COMP%]   .day[_ngcontent-%COMP%]:focus{outline:none}[_nghost-%COMP%]   table[_ngcontent-%COMP%]   .day[_ngcontent-%COMP%]:disabled{box-shadow:none!important;color:#d7d9e4;cursor:not-allowed!important}[_nghost-%COMP%]   table[_ngcontent-%COMP%]   td.notinmonth[_ngcontent-%COMP%]{color:#d7d9e4}[_nghost-%COMP%]   table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:hover   .day[_ngcontent-%COMP%]{box-shadow:inset 0 0 0 2px #4a89dc;cursor:pointer}[_nghost-%COMP%]   table[_ngcontent-%COMP%]   td.inRange[_ngcontent-%COMP%]:hover   .day[_ngcontent-%COMP%]{box-shadow:inset 0 0 0 2px #fff}[_nghost-%COMP%]   table[_ngcontent-%COMP%]   td.inRange[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{background:#4a89dc;border-radius:0;color:#fff;height:3.2rem;width:3.2rem}[_nghost-%COMP%]   table[_ngcontent-%COMP%]   td.rangeStart[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{border-bottom-right-radius:0;border-radius:50%;border-top-right-radius:0;box-shadow:none!important;position:relative}[_nghost-%COMP%]   table[_ngcontent-%COMP%]   td.rangeStart[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:before{background:#4a89dc;content:\"\";height:100%;position:absolute;right:-5px;top:0;width:10px;z-index:-1}[_nghost-%COMP%]   table[_ngcontent-%COMP%]   td.rangeEnd[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{border-bottom-left-radius:0;border-radius:50%;border-top-left-radius:0;box-shadow:none!important;position:relative}[_nghost-%COMP%]   table[_ngcontent-%COMP%]   td.rangeEnd[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:before{background:#4a89dc;content:\"\";height:100%;left:-5px;position:absolute;top:0;width:10px;z-index:-1}[_nghost-%COMP%]   table[_ngcontent-%COMP%]   td.selected[_ngcontent-%COMP%]   .day[_ngcontent-%COMP%]{background:#4a89dc;color:#fff}[_nghost-%COMP%]   table[_ngcontent-%COMP%]   td.preview[_ngcontent-%COMP%]:not(.previewStart):not(.previewEnd)   .day[_ngcontent-%COMP%]{border:1px dashed #4a89dc}[_nghost-%COMP%]   table[_ngcontent-%COMP%]   td.preview[_ngcontent-%COMP%]:not(.previewStart):not(.previewEnd).selected   .day[_ngcontent-%COMP%]{border:1px dashed #9dbeff}[_nghost-%COMP%]   table[_ngcontent-%COMP%]   td.today[_ngcontent-%COMP%]   .day[_ngcontent-%COMP%]:after{border-radius:100%;box-shadow:inset 0 0 0 2px #bebebe;content:\"\";height:100%;left:0;margin:0 auto;max-width:3.2rem;position:absolute;top:0;width:100%}[_nghost-%COMP%]   table[_ngcontent-%COMP%]   td.today.inRange[_ngcontent-%COMP%]   .day[_ngcontent-%COMP%]:after, [_nghost-%COMP%]   table[_ngcontent-%COMP%]   td.today.selected[_ngcontent-%COMP%]   .day[_ngcontent-%COMP%]:after{box-shadow:inset 0 0 0 2px #9dbeff}[_nghost-%COMP%]   table[_ngcontent-%COMP%]   td.inPreview[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{border-bottom:1px dashed #4a89dc;border-radius:0;border-top:1px dashed #4a89dc}[_nghost-%COMP%]   table[_ngcontent-%COMP%]   td.previewStart[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{border-bottom-right-radius:0;border-left:1px dashed #4a89dc;border-radius:50%;border-top-right-radius:0;box-shadow:none!important}[_nghost-%COMP%]   table[_ngcontent-%COMP%]   td.previewEnd[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{border-bottom-left-radius:0;border-radius:50%;border-right:1px dashed #4a89dc;border-top-left-radius:0;box-shadow:none!important}"], changeDetection: 0 });
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoMonthViewElement.prototype, "isRange", void 0);
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoMonthViewElement.prototype, "hideOverflowDays", void 0);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoMonthViewElement, [{
        type: Component,
        args: [{
                selector: 'novo-month-view',
                templateUrl: './month-view.component.html',
                styleUrls: ['./month-view.component.scss'],
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: NovoLabelService }, { type: ElementRef }, { type: ChangeDetectorRef }, { type: DomSanitizer }]; }, { minDate: [{
            type: Input
        }], maxDate: [{
            type: Input
        }], activeDate: [{
            type: Input
        }], selected: [{
            type: Input
        }], preview: [{
            type: Input
        }], overlays: [{
            type: Input
        }], isRange: [{
            type: Input
        }], hideOverflowDays: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['class.hide-overflow-days']
        }], weekStartsOn: [{
            type: Input
        }], select: [{
            type: Output
        }], hover: [{
            type: Output
        }] }); })();
/** Checks whether a value is the start of a range. */
function isStart(value, range, rangeEnabled) {
    const [start, end] = range !== null && range !== void 0 ? range : [];
    return rangeEnabled && end !== null && !isSameDay(start, end) && value < end && isSameDay(value, start);
}
/** Checks whether a value is the end of a range. */
function isEnd(value, range, rangeEnabled) {
    const [start, end] = range !== null && range !== void 0 ? range : [];
    return rangeEnabled && start !== null && !isSameDay(start, end) && value >= start && isSameDay(value, end);
}
/** Checks whether a value is inside of a range. */
function isInRange(value, range, rangeEnabled) {
    const [start, end] = range !== null && range !== void 0 ? range : [];
    return rangeEnabled && start !== null && end !== null && !isSameDay(start, end) && value >= start && value <= end;
}

// NG2
function NovoMonthSelectElement_div_0_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 1);
    ɵɵlistener("click", function NovoMonthSelectElement_div_0_Template_div_click_0_listener($event) { ɵɵrestoreView(_r4); const i_r2 = ctx.index; const ctx_r3 = ɵɵnextContext(); return ctx_r3.onSelect($event, i_r2); });
    ɵɵelementStart(1, "div", 2);
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const month_r1 = ctx.$implicit;
    const i_r2 = ctx.index;
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵclassProp("selected", ctx_r0._isSelected(i_r2));
    ɵɵattribute("data-automation-id", month_r1);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", month_r1, "");
} }
class NovoMonthSelectElement {
    constructor(labels) {
        this.labels = labels;
        this.activeDate = new Date();
        this.selected = [];
        // Select callback for output
        this.select = new EventEmitter(false);
        // List of all months
        this.monthNames = this.labels.getMonths();
    }
    ngOnInit() { }
    onSelect(event, month) {
        // Helpers.swallowEvent(event);
        this.select.next({ event, month });
    }
    _isActive(month) {
        return this.activeDate && month === getMonth(this.activeDate);
    }
    _isSelected(month) {
        return this.selected && month === getMonth(this.selected[0]);
    }
}
NovoMonthSelectElement.ɵfac = function NovoMonthSelectElement_Factory(t) { return new (t || NovoMonthSelectElement)(ɵɵdirectiveInject(NovoLabelService)); };
NovoMonthSelectElement.ɵcmp = ɵɵdefineComponent({ type: NovoMonthSelectElement, selectors: [["novo-month-select"]], inputs: { activeDate: "activeDate", selected: "selected" }, outputs: { select: "select" }, decls: 1, vars: 1, consts: [[3, "click", 4, "ngFor", "ngForOf"], [3, "click"], [1, "month"]], template: function NovoMonthSelectElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵtemplate(0, NovoMonthSelectElement_div_0_Template, 3, 4, "div", 0);
    } if (rf & 2) {
        ɵɵproperty("ngForOf", ctx.monthNames);
    } }, directives: [NgForOf], styles: ["@-webkit-keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}[_nghost-%COMP%]{display:grid;flex:1;grid-template-columns:1fr 1fr 1fr}[_nghost-%COMP%]   .month[_ngcontent-%COMP%]{border-radius:.4rem;cursor:pointer;padding:1rem}[_nghost-%COMP%]   .month.selected[_ngcontent-%COMP%], [_nghost-%COMP%]   .month[_ngcontent-%COMP%]:hover{background-color:#4a89dc;color:#fff}"], changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoMonthSelectElement, [{
        type: Component,
        args: [{
                selector: 'novo-month-select',
                templateUrl: './month-select.component.html',
                styleUrls: ['./month-select.component.scss'],
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: NovoLabelService }]; }, { activeDate: [{
            type: Input
        }], selected: [{
            type: Input
        }], select: [{
            type: Output
        }] }); })();

// NG2
function NovoYearSelectElement_div_0_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 1);
    ɵɵlistener("click", function NovoYearSelectElement_div_0_Template_div_click_0_listener($event) { ɵɵrestoreView(_r3); const year_r1 = ctx.$implicit; const ctx_r2 = ɵɵnextContext(); return ctx_r2.onSelect($event, year_r1); });
    ɵɵelementStart(1, "div", 2);
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const year_r1 = ctx.$implicit;
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵclassProp("selected", ctx_r0._isSelected(year_r1));
    ɵɵattribute("data-automation-id", year_r1);
    ɵɵadvance(1);
    ɵɵtextInterpolate(year_r1);
} }
class NovoYearSelectElement {
    constructor(labels) {
        this.labels = labels;
        this.activeDate = new Date();
        this.selected = [];
        // Select callback for output
        this.select = new EventEmitter(false);
        // List of all years (generated in ngOnInit)
        this.years = [];
    }
    ngOnInit() {
        // Determine the year array
        const now = new Date();
        const start = this.minYear ? Number(this.minYear) : now.getFullYear() - 100;
        const end = this.maxYear ? Number(this.maxYear) : now.getFullYear() + 10;
        const years = [];
        for (let i = start; i <= end; i++) {
            years.push(i);
        }
        this.years = years.reverse();
    }
    onSelect(event, year) {
        // Helpers.swallowEvent(event);
        this.select.next({ event, year });
    }
    _isActive(year) {
        return this.activeDate && year === getYear(this.activeDate);
    }
    _isSelected(year) {
        return this.selected && year === getYear(this.selected[0]);
    }
}
NovoYearSelectElement.ɵfac = function NovoYearSelectElement_Factory(t) { return new (t || NovoYearSelectElement)(ɵɵdirectiveInject(NovoLabelService)); };
NovoYearSelectElement.ɵcmp = ɵɵdefineComponent({ type: NovoYearSelectElement, selectors: [["novo-year-select"]], inputs: { minYear: "minYear", maxYear: "maxYear", activeDate: "activeDate", selected: "selected" }, outputs: { select: "select" }, decls: 1, vars: 1, consts: [[3, "click", 4, "ngFor", "ngForOf"], [3, "click"], [1, "year"]], template: function NovoYearSelectElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵtemplate(0, NovoYearSelectElement_div_0_Template, 3, 4, "div", 0);
    } if (rf & 2) {
        ɵɵproperty("ngForOf", ctx.years);
    } }, directives: [NgForOf], styles: ["@-webkit-keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}[_nghost-%COMP%]{display:grid;flex:1;grid-template-columns:1fr 1fr 1fr 1fr;max-height:320px;overflow-y:scroll}[_nghost-%COMP%]   .year[_ngcontent-%COMP%]{border-radius:.4rem;cursor:pointer;padding:1rem}[_nghost-%COMP%]   .year.selected[_ngcontent-%COMP%], [_nghost-%COMP%]   .year[_ngcontent-%COMP%]:hover{background-color:#4a89dc;color:#fff}"], changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoYearSelectElement, [{
        type: Component,
        args: [{
                selector: 'novo-year-select',
                templateUrl: './year-select.component.html',
                styleUrls: ['./year-select.component.scss'],
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: NovoLabelService }]; }, { minYear: [{
            type: Input
        }], maxYear: [{
            type: Input
        }], activeDate: [{
            type: Input
        }], selected: [{
            type: Input
        }], select: [{
            type: Output
        }] }); })();

// NG2
function NovoCalendarElement_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵɵgetCurrentView();
    ɵɵelementContainerStart(0);
    ɵɵelementStart(1, "span", 7);
    ɵɵelementStart(2, "span", 8);
    ɵɵlistener("click", function NovoCalendarElement_ng_container_2_Template_span_click_2_listener($event) { ɵɵrestoreView(_r7); const ctx_r6 = ɵɵnextContext(); return ctx_r6.openView($event, "months"); });
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementStart(4, "span", 9);
    ɵɵlistener("click", function NovoCalendarElement_ng_container_2_Template_span_click_4_listener($event) { ɵɵrestoreView(_r7); const ctx_r8 = ɵɵnextContext(); return ctx_r8.openView($event, "years"); });
    ɵɵtext(5);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementContainerEnd();
} if (rf & 2) {
    const month_r4 = ctx.$implicit;
    const i_r5 = ctx.index;
    ɵɵadvance(1);
    ɵɵclassProp("secondary", i_r5 > 0);
    ɵɵadvance(2);
    ɵɵtextInterpolate(month_r4.label);
    ɵɵadvance(2);
    ɵɵtextInterpolate(month_r4.date == null ? null : month_r4.date.getFullYear());
} }
function NovoCalendarElement_ng_container_5_ng_container_1_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r14 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 0);
    ɵɵelementStart(1, "span", 12);
    ɵɵlistener("click", function NovoCalendarElement_ng_container_5_ng_container_1_div_1_Template_span_click_1_listener($event) { ɵɵrestoreView(_r14); const ctx_r13 = ɵɵnextContext(3); return ctx_r13.prevMonth($event); });
    ɵɵelementEnd();
    ɵɵelementStart(2, "span", 7);
    ɵɵelementStart(3, "span", 8);
    ɵɵlistener("click", function NovoCalendarElement_ng_container_5_ng_container_1_div_1_Template_span_click_3_listener($event) { ɵɵrestoreView(_r14); const ctx_r15 = ɵɵnextContext(3); return ctx_r15.openView($event, "months"); });
    ɵɵtext(4);
    ɵɵelementEnd();
    ɵɵelementStart(5, "span", 9);
    ɵɵlistener("click", function NovoCalendarElement_ng_container_5_ng_container_1_div_1_Template_span_click_5_listener($event) { ɵɵrestoreView(_r14); const ctx_r16 = ɵɵnextContext(3); return ctx_r16.openView($event, "years"); });
    ɵɵtext(6);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementStart(7, "span", 13);
    ɵɵlistener("click", function NovoCalendarElement_ng_container_5_ng_container_1_div_1_Template_span_click_7_listener($event) { ɵɵrestoreView(_r14); const ctx_r17 = ɵɵnextContext(3); return ctx_r17.nextMonth($event); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const month_r10 = ɵɵnextContext().$implicit;
    ɵɵadvance(4);
    ɵɵtextInterpolate(month_r10.label);
    ɵɵadvance(2);
    ɵɵtextInterpolate(month_r10.date == null ? null : month_r10.date.getFullYear());
} }
function NovoCalendarElement_ng_container_5_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    const _r20 = ɵɵgetCurrentView();
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, NovoCalendarElement_ng_container_5_ng_container_1_div_1_Template, 8, 2, "div", 10);
    ɵɵelementStart(2, "novo-month-view", 11);
    ɵɵlistener("select", function NovoCalendarElement_ng_container_5_ng_container_1_Template_novo_month_view_select_2_listener($event) { ɵɵrestoreView(_r20); const ctx_r19 = ɵɵnextContext(2); return ctx_r19.dateSelected($event); })("hover", function NovoCalendarElement_ng_container_5_ng_container_1_Template_novo_month_view_hover_2_listener($event) { ɵɵrestoreView(_r20); const ctx_r21 = ɵɵnextContext(2); return ctx_r21.updatePreview($event); });
    ɵɵelementEnd();
    ɵɵelementContainerEnd();
} if (rf & 2) {
    const month_r10 = ctx.$implicit;
    const i_r11 = ctx.index;
    const ctx_r9 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r9.layout === "vertical" && i_r11 > 0);
    ɵɵadvance(1);
    ɵɵproperty("activeDate", month_r10.date)("selected", ctx_r9.selected)("preview", ctx_r9.preview)("overlays", ctx_r9.overlays)("isRange", ctx_r9._isRange())("hideOverflowDays", ctx_r9.months.length > 1)("weekStartsOn", ctx_r9.weekStartsOn);
} }
function NovoCalendarElement_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, NovoCalendarElement_ng_container_5_ng_container_1_Template, 3, 8, "ng-container", 2);
    ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r1.months);
} }
function NovoCalendarElement_novo_month_select_6_Template(rf, ctx) { if (rf & 1) {
    const _r23 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-month-select", 14);
    ɵɵlistener("select", function NovoCalendarElement_novo_month_select_6_Template_novo_month_select_select_0_listener($event) { ɵɵrestoreView(_r23); const ctx_r22 = ɵɵnextContext(); return ctx_r22.monthSelected($event); });
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵproperty("activeDate", ctx_r2.activeDate)("selected", ctx_r2.selected);
} }
function NovoCalendarElement_novo_year_select_7_Template(rf, ctx) { if (rf & 1) {
    const _r25 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-year-select", 14);
    ɵɵlistener("select", function NovoCalendarElement_novo_year_select_7_Template_novo_year_select_select_0_listener($event) { ɵɵrestoreView(_r25); const ctx_r24 = ɵɵnextContext(); return ctx_r24.yearSelected($event); });
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵɵnextContext();
    ɵɵproperty("activeDate", ctx_r3.activeDate)("selected", ctx_r3.selected);
} }
class NovoCalendarElement {
    constructor(labels, element, cdr, _sanitizer) {
        this.labels = labels;
        this.element = element;
        this.cdr = cdr;
        this._sanitizer = _sanitizer;
        // Default view mode (select days)
        this.activeView = 'days';
        this.layout = 'horizontal';
        this._selected = [];
        this.selectedChange = new EventEmitter();
        this.preview = [];
        this.previewChange = new EventEmitter();
        this.activeDateChange = new EventEmitter();
        this.overlays = [];
        this._mode = 'single';
        this._numberOfMonths = [0];
        this._weekStartsOn = 0;
        this._strategy = new DefaultDateSelectionStrategy();
    }
    get selected() {
        return this._selected;
    }
    set selected(value) {
        this._selected = value ? value.filter(isDate).map((d) => startOfDay(d)) : [];
    }
    get activeDate() {
        return this._activeDate;
    }
    set activeDate(value) {
        if (!isSameDay(value, this._activeDate)) {
            this._activeDate = value;
            this.activeDateChange.next(value);
            this.updateView(value);
        }
    }
    get weekStartsOn() {
        return this._weekStartsOn;
    }
    set weekStartsOn(value) {
        this._weekStartsOn = value;
        if (this.mode === 'week') {
            this._strategy = new WeekSelectionStrategy(this.weekStartsOn);
        }
    }
    get numberOfMonths() {
        return this._numberOfMonths.length;
    }
    set numberOfMonths(value) {
        this._numberOfMonths = Array.from(Array(Number(value)).keys());
    }
    get mode() {
        return this._mode;
    }
    set mode(value) {
        if (this._mode !== value) {
            this._mode = value;
            switch (value) {
                case 'multiple':
                    this._strategy = new MultiDateSelectionStrategy();
                    break;
                case 'range':
                    this._strategy = new RangeSelectionStrategy();
                    break;
                case 'week':
                    this._strategy = new WeekSelectionStrategy(this.weekStartsOn);
                    break;
                case 'single':
                default:
                    this._strategy = new DefaultDateSelectionStrategy();
                    break;
            }
        }
    }
    get hb_width() {
        if (this.layout === 'vertical') {
            return this._sanitizer.bypassSecurityTrustStyle(`min-content`);
        }
        return this._sanitizer.bypassSecurityTrustStyle(`min-content`);
    }
    get hb_horiztonal() {
        return this.layout !== 'vertical';
    }
    get hb_vertical() {
        return this.layout === 'vertical';
    }
    ngOnInit() {
        if (!this.activeDate) {
            this.activeDate = this.selected.length ? this.selected[0] : new Date();
        }
        this.updateView(this.activeDate);
    }
    updateView(activeDate) {
        this.activeDate = new Date(activeDate ? new Date(activeDate) : new Date());
        this.months = [];
        const month = startOfMonth(this.activeDate);
        for (const i of this._numberOfMonths) {
            const date = addMonths(month, i);
            const label = this.labels.formatDateWithFormat(date, { month: 'short' });
            this.months.push({ date, label });
        }
    }
    setToday() {
        const tmp = new Date();
        this.updateView(tmp);
        // Go back to days
        this.openView(null, 'days');
    }
    monthSelected({ event, month }) {
        const date = this.activeDate ? this.activeDate : new Date().getMonth();
        const tmp = setMonth(date, month);
        this.updateView(tmp);
        // Go back to days
        this.openView(null, 'days');
    }
    yearSelected({ event, year }) {
        const date = this.activeDate ? this.activeDate : new Date();
        const tmp = setYear(date, year);
        this.updateView(tmp);
        // Go back to days
        this.openView(null, 'days');
    }
    dateSelected({ event, day }) {
        // Helpers.swallowEvent(event);
        this.selected = this._strategy.selectionFinished(day.date, this.selected, event);
        this.selectedChange.emit(this.selected);
        this.cdr.markForCheck();
    }
    updatePreview({ event, day }) {
        this.preview = this._strategy.createPreview(day.date, this.selected, event);
        this.previewChange.emit(this.preview);
    }
    prevMonth(event) {
        Helpers.swallowEvent(event);
        const tmp = subMonths(this.activeDate, 1);
        this.updateView(tmp);
    }
    nextMonth(event) {
        Helpers.swallowEvent(event);
        const tmp = addMonths(this.activeDate, 1);
        this.updateView(tmp);
    }
    openView(event, type) {
        Helpers.swallowEvent(event);
        // If they click the toggle two time in a row, close it (go back to days)
        if (type === this.activeView) {
            this.activeView = 'days';
        }
        else {
            this.activeView = type;
        }
        // Make sure to scroll the selected one into view
        if (this.activeView === 'years' || this.activeView === 'months') {
            setTimeout(() => {
                const container = this.element.nativeElement.querySelector(`.calendar-content.${this.activeView}`);
                const selectedItem = this.element.nativeElement.querySelector(`.calendar-content.${this.activeView} .${this.activeView === 'years' ? 'year' : 'month'}.selected`);
                if (container && selectedItem) {
                    container.scrollTop = selectedItem.offsetTop - 100;
                }
            });
        }
    }
    _isRange() {
        return ['week', 'range'].includes(this.mode);
    }
}
NovoCalendarElement.ɵfac = function NovoCalendarElement_Factory(t) { return new (t || NovoCalendarElement)(ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(DomSanitizer)); };
NovoCalendarElement.ɵcmp = ɵɵdefineComponent({ type: NovoCalendarElement, selectors: [["novo-calendar"]], hostVars: 6, hostBindings: function NovoCalendarElement_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵstyleProp("width", ctx.hb_width);
        ɵɵclassProp("layout-horizontal", ctx.hb_horiztonal)("layout-vertical", ctx.hb_vertical);
    } }, inputs: { minYear: "minYear", maxYear: "maxYear", activeView: "activeView", layout: "layout", selected: "selected", preview: "preview", overlays: "overlays", activeDate: "activeDate", weekStartsOn: "weekStartsOn", numberOfMonths: "numberOfMonths", mode: "mode" }, outputs: { selectedChange: "selectedChange", previewChange: "previewChange", activeDateChange: "activeDateChange" }, decls: 8, vars: 5, consts: [[1, "calendar-header"], ["theme", "icon", "icon", "previous", "size", "small", "data-automation-id", "calendar-previous", 3, "click"], [4, "ngFor", "ngForOf"], ["theme", "icon", "icon", "next", "size", "small", "data-automation-id", "calendar-next", 3, "click"], [1, "calendar-content", 3, "ngSwitch"], [4, "ngSwitchCase"], [3, "activeDate", "selected", "select", 4, "ngSwitchCase"], [1, "heading"], ["data-automation-id", "header-month", 1, "month", 3, "click"], ["data-automation-id", "header-year", 1, "year", 3, "click"], ["class", "calendar-header", 4, "ngIf"], [1, "month-view", 3, "activeDate", "selected", "preview", "overlays", "isRange", "hideOverflowDays", "weekStartsOn", "select", "hover"], ["data-automation-id", "calendar-previous", 1, "previous", 3, "click"], ["data-automation-id", "calendar-next", 1, "next", 3, "click"], [3, "activeDate", "selected", "select"]], template: function NovoCalendarElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "div", 0);
        ɵɵelementStart(1, "novo-button", 1);
        ɵɵlistener("click", function NovoCalendarElement_Template_novo_button_click_1_listener($event) { return ctx.prevMonth($event); });
        ɵɵelementEnd();
        ɵɵtemplate(2, NovoCalendarElement_ng_container_2_Template, 6, 4, "ng-container", 2);
        ɵɵelementStart(3, "novo-button", 3);
        ɵɵlistener("click", function NovoCalendarElement_Template_novo_button_click_3_listener($event) { return ctx.nextMonth($event); });
        ɵɵelementEnd();
        ɵɵelementEnd();
        ɵɵelementStart(4, "section", 4);
        ɵɵtemplate(5, NovoCalendarElement_ng_container_5_Template, 2, 1, "ng-container", 5);
        ɵɵtemplate(6, NovoCalendarElement_novo_month_select_6_Template, 1, 2, "novo-month-select", 6);
        ɵɵtemplate(7, NovoCalendarElement_novo_year_select_7_Template, 1, 2, "novo-year-select", 6);
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵadvance(2);
        ɵɵproperty("ngForOf", ctx.months);
        ɵɵadvance(2);
        ɵɵproperty("ngSwitch", ctx.activeView);
        ɵɵadvance(1);
        ɵɵproperty("ngSwitchCase", "days");
        ɵɵadvance(1);
        ɵɵproperty("ngSwitchCase", "months");
        ɵɵadvance(1);
        ɵɵproperty("ngSwitchCase", "years");
    } }, directives: [NovoButtonElement, NgForOf, NgSwitch, NgSwitchCase, NgIf, NovoMonthViewElement, NovoMonthSelectElement, NovoYearSelectElement], styles: ["@-webkit-keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}.layout-horizontal[_nghost-%COMP%]{font-size:1.2rem}.layout-horizontal[_nghost-%COMP%]   .calendar-content[_ngcontent-%COMP%]{flex-flow:row nowrap}.layout-horizontal[_nghost-%COMP%]   .month-view[_ngcontent-%COMP%] + .month-view[_ngcontent-%COMP%]{border-collapse:unset;border-left:1px solid #bebebe;margin-left:.5rem;padding-left:.5rem}.layout-vertical[_nghost-%COMP%]   .calendar-content[_ngcontent-%COMP%]{flex-flow:column nowrap}.layout-vertical[_nghost-%COMP%]   .calendar-header[_ngcontent-%COMP%]   .heading.secondary[_ngcontent-%COMP%]{display:none}[_nghost-%COMP%]{-moz-user-select:none;-webkit-user-select:none;background:#fff;color:#3d464d;display:block;position:relative;text-align:center;user-select:none;width:100%}[_nghost-%COMP%]   .calendar-content[_ngcontent-%COMP%]{display:flex;height:-webkit-min-content;height:-moz-min-content;height:min-content;left:0;overflow:hidden;position:static;top:0;width:100%}[_nghost-%COMP%]   .calendar-header[_ngcontent-%COMP%]{-webkit-user-select:none;align-items:center;border-bottom:1px solid #f4f4f4;border-collapse:collapse;cursor:default;display:flex;flex-flow:row nowrap;justify-content:space-between;padding:1rem .8rem;width:100%}[_nghost-%COMP%]   .calendar-header[_ngcontent-%COMP%]   .previous[_ngcontent-%COMP%]{cursor:pointer;display:inline-block;height:15px;width:30px}[_nghost-%COMP%]   .calendar-header[_ngcontent-%COMP%]   .previous[_ngcontent-%COMP%]:after{border-bottom:4px solid transparent;border-right:4px solid #aaa;border-top:4px solid transparent;content:\"\";display:inline-block;height:0;vertical-align:middle;width:0}[_nghost-%COMP%]   .calendar-header[_ngcontent-%COMP%]   .previous[_ngcontent-%COMP%]:hover:after{border-right:4px solid #4a89dc;cursor:pointer}[_nghost-%COMP%]   .calendar-header[_ngcontent-%COMP%]   .heading[_ngcontent-%COMP%]{color:#4a89dc;display:inline-block;flex:1;font-weight:600;vertical-align:middle}[_nghost-%COMP%]   .calendar-header[_ngcontent-%COMP%]   .heading[_ngcontent-%COMP%]   .month[_ngcontent-%COMP%]{border-radius:2px;padding:3px 8px}[_nghost-%COMP%]   .calendar-header[_ngcontent-%COMP%]   .heading[_ngcontent-%COMP%]   .month[_ngcontent-%COMP%]:hover{background:#4a89dc;color:#fff;cursor:pointer}[_nghost-%COMP%]   .calendar-header[_ngcontent-%COMP%]   .heading[_ngcontent-%COMP%]   .year[_ngcontent-%COMP%]{border-radius:2px;padding:3px 8px}[_nghost-%COMP%]   .calendar-header[_ngcontent-%COMP%]   .heading[_ngcontent-%COMP%]   .year[_ngcontent-%COMP%]:hover{background:#4a89dc;color:#fff;cursor:pointer}[_nghost-%COMP%]   .calendar-header[_ngcontent-%COMP%]   .next[_ngcontent-%COMP%]{cursor:pointer;display:inline-block;height:15px;width:30px}[_nghost-%COMP%]   .calendar-header[_ngcontent-%COMP%]   .next[_ngcontent-%COMP%]:before{border-bottom:4px solid transparent;border-left:4px solid #aaa;border-top:4px solid transparent;content:\"\";display:inline-block;height:0;vertical-align:middle;width:0}[_nghost-%COMP%]   .calendar-header[_ngcontent-%COMP%]   .next[_ngcontent-%COMP%]:hover:before{border-left:4px solid #4a89dc;cursor:pointer;opacity:1}"] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoCalendarElement, [{
        type: Component,
        args: [{
                selector: 'novo-calendar',
                templateUrl: './calendar.component.html',
                styleUrls: ['./calendar.component.scss'],
            }]
    }], function () { return [{ type: NovoLabelService }, { type: ElementRef }, { type: ChangeDetectorRef }, { type: DomSanitizer }]; }, { minYear: [{
            type: Input
        }], maxYear: [{
            type: Input
        }], activeView: [{
            type: Input
        }], layout: [{
            type: Input
        }], selected: [{
            type: Input
        }], selectedChange: [{
            type: Output
        }], preview: [{
            type: Input
        }], previewChange: [{
            type: Output
        }], activeDateChange: [{
            type: Output
        }], overlays: [{
            type: Input
        }], activeDate: [{
            type: Input
        }], weekStartsOn: [{
            type: Input
        }], numberOfMonths: [{
            type: Input
        }], mode: [{
            type: Input
        }], hb_width: [{
            type: HostBinding,
            args: ['style.width']
        }], hb_horiztonal: [{
            type: HostBinding,
            args: ['class.layout-horizontal']
        }], hb_vertical: [{
            type: HostBinding,
            args: ['class.layout-vertical']
        }] }); })();

function NovoDatePickerElement_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r2 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 5);
    ɵɵelementStart(1, "span", 6);
    ɵɵlistener("click", function NovoDatePickerElement_div_1_Template_span_click_1_listener() { ɵɵrestoreView(_r2); const ctx_r1 = ɵɵnextContext(); return ctx_r1.toggleRangeSelect("startDate"); });
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementStart(3, "span", 7);
    ɵɵlistener("click", function NovoDatePickerElement_div_1_Template_span_click_3_listener() { ɵɵrestoreView(_r2); const ctx_r3 = ɵɵnextContext(); return ctx_r3.toggleRangeSelect("endDate"); });
    ɵɵtext(4);
    ɵɵelementEnd();
    ɵɵelement(5, "i", 8);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵclassProp("week-select-mode", ctx_r0.weekRangeSelect);
    ɵɵadvance(1);
    ɵɵproperty("@startDateTextState", ctx_r0.rangeSelectMode);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r0.startDateLabel);
    ɵɵadvance(1);
    ɵɵproperty("@endDateTextState", ctx_r0.rangeSelectMode);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r0.endDateLabel);
    ɵɵadvance(1);
    ɵɵproperty("@indicatorState", ctx_r0.rangeSelectMode);
} }
// Value accessor for the component (supports ngModel)
const DATE_PICKER_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoDatePickerElement),
    multi: true,
};
class NovoDatePickerElement {
    constructor(labels, element, cdr, _sanitizer) {
        this.labels = labels;
        this.element = element;
        this.cdr = cdr;
        this._sanitizer = _sanitizer;
        this.weekStart = 0;
        this.preselected = [];
        this.hideOverflowDays = false;
        this.hideFooter = false;
        // Select callback for output
        this.onSelect = new EventEmitter(false);
        this._mode = 'single';
        this._numberOfMonths = [0];
        this._selection = [];
        this.preview = [];
        this.rangeSelectMode = 'startDate';
        this._onChange = () => { };
        this._onTouched = () => { };
    }
    get numberOfMonths() {
        return this._numberOfMonths.length;
    }
    set numberOfMonths(value) {
        this._numberOfMonths = Array.from(Array(Number(value)).keys());
    }
    get mode() {
        return this._mode;
    }
    set mode(value) {
        if (this._mode !== value) {
            this._mode = value;
        }
    }
    get range() {
        return ['range', 'week'].includes(this.mode) || this._range;
    }
    set range(value) {
        console.warn(`'range' property is deprecated, please use 'mode="range"'.`);
        if (this._range !== value) {
            this._range = value;
            this.mode = 'range';
        }
    }
    get weekRangeSelect() {
        return this._mode === 'week' || this._weekRangeSelect;
    }
    set weekRangeSelect(value) {
        console.warn(`'weekRangeSelect' property is deprecated, please use 'mode="week"'.`);
        if (this._weekRangeSelect !== value) {
            this._weekRangeSelect = value;
            this.mode = 'week';
        }
    }
    get selection() {
        return this._selection;
    }
    set selection(value) {
        this._selection = value ? value.filter(isDate).map((d) => startOfDay(d)) : [];
    }
    ngOnInit() {
        // Determine the year array
        const now = new Date();
        // Set labels
        if (this.model) {
            this.modelToSelection(this.model);
        }
        if (this.selection && this.selection.length) {
            this.updateView(this.selection[0]);
        }
    }
    updateView(date) {
        const value = date ? new Date(date) : new Date();
        this.activeDate = new Date(value);
    }
    updateSelection(selected, fireEvents = true) {
        // Helpers.swallowEvent(event);
        this.selection = selected;
        this.startDateLabel = this.labels.formatDateWithFormat(this.selection[0], {
            month: 'short',
            day: '2-digit',
            year: 'numeric',
        });
        this.endDateLabel = this.labels.formatDateWithFormat(this.selection[1], {
            month: 'short',
            day: '2-digit',
            year: 'numeric',
        });
        if (fireEvents) {
            switch (this.mode) {
                case 'multiple':
                    this.fireSelect();
                    // Also, update the ngModel
                    this._onChange(this.selection);
                    this.model = this.selection;
                    break;
                case 'range':
                case 'week':
                    if (this.selection.filter(Boolean).length === 2) {
                        this.fireRangeSelect();
                        // Also, update the ngModel
                        const model = {
                            startDate: this.selection[0],
                            endDate: this.selection[1],
                        };
                        this._onChange(model);
                        this.model = model;
                    }
                    break;
                case 'single':
                default:
                    this.fireSelect();
                    // Also, update the ngModel
                    this._onChange(this.selection[0]);
                    this.model = this.selection[0];
                    break;
            }
        }
        this.cdr.markForCheck();
    }
    eventData(date) {
        return {
            year: date.getFullYear(),
            month: this.labels.formatDateWithFormat(date, { month: 'long' }),
            day: this.labels.formatDateWithFormat(date, { weekday: 'long' }),
            date,
        };
    }
    fireSelect() {
        if (this.mode === 'multiple') {
            this.onSelect.next(this.selection);
        }
        else {
            this.onSelect.next(this.eventData(this.selection[0]));
        }
    }
    fireRangeSelect() {
        // Make sure the start date is before the end date
        if (this.selection.filter(Boolean).length === 2) {
            const [start, end] = this.selection;
            this.onSelect.next({
                startDate: this.eventData(start),
                endDate: this.eventData(end),
            });
        }
    }
    setToday() {
        const tmp = new Date();
        this.updateView(tmp);
    }
    toggleRangeSelect(range) {
        this.rangeSelectMode = range;
        if (range === 'startDate' && this.selection.length) {
            this.updateView(this.selection[0]);
        }
        if (range === 'endDate' && this.selection.length === 2) {
            this.updateView(this.selection[1]);
        }
    }
    modelToSelection(model) {
        // this.selection = this._strategy.selectionFinished();
        switch (this.mode) {
            case 'multiple':
                this.selection = model;
                break;
            case 'range':
            case 'week':
                const range = this.model;
                this.selection = [range.startDate, range.endDate].filter(Boolean);
                break;
            case 'single':
            default:
                this.selection = [model];
                break;
        }
    }
    // ValueAccessor Functions
    writeValue(model) {
        this.model = model;
        if (this.mode === 'multiple') {
            this.selection = this.model;
        }
        if (Helpers.isDate(model)) {
            this.updateView(model);
            this.modelToSelection(model);
        }
        else if (Helpers.isString(model)) {
            const date = parse(model);
            if (isValid(date)) {
                this.updateView(date);
                this.modelToSelection(date);
            }
        }
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
}
NovoDatePickerElement.ɵfac = function NovoDatePickerElement_Factory(t) { return new (t || NovoDatePickerElement)(ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(DomSanitizer)); };
NovoDatePickerElement.ɵcmp = ɵɵdefineComponent({ type: NovoDatePickerElement, selectors: [["novo-date-picker"]], hostVars: 2, hostBindings: function NovoDatePickerElement_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵclassProp("hide-overflow-days", ctx.hideOverflowDays);
    } }, inputs: { minYear: "minYear", maxYear: "maxYear", start: "start", end: "end", inline: "inline", weekStart: "weekStart", preselected: "preselected", hideOverflowDays: "hideOverflowDays", hideFooter: "hideFooter", numberOfMonths: "numberOfMonths", mode: "mode", range: "range", weekRangeSelect: "weekRangeSelect" }, outputs: { onSelect: "onSelect" }, features: [ɵɵProvidersFeature([DATE_PICKER_VALUE_ACCESSOR])], decls: 6, vars: 8, consts: [[1, "date-picker-container"], ["class", "date-range-tabs", 3, "week-select-mode", 4, "ngIf"], [3, "activeDate", "selected", "mode", "numberOfMonths", "weekStartsOn", "selectedChange"], [1, "calendar-footer", 3, "hidden"], ["size", "small", "data-automation-id", "calendar-today", 1, "today", 3, "click"], [1, "date-range-tabs"], ["data-automation-id", "calendar-start-date", 1, "range-tab", 3, "click"], ["data-automation-id", "calendar-end-date", 1, "range-tab", 3, "click"], [1, "indicator"]], template: function NovoDatePickerElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "div", 0);
        ɵɵtemplate(1, NovoDatePickerElement_div_1_Template, 6, 7, "div", 1);
        ɵɵelementStart(2, "novo-calendar", 2);
        ɵɵlistener("selectedChange", function NovoDatePickerElement_Template_novo_calendar_selectedChange_2_listener($event) { return ctx.selection = $event; })("selectedChange", function NovoDatePickerElement_Template_novo_calendar_selectedChange_2_listener($event) { return ctx.updateSelection($event); });
        ɵɵelementEnd();
        ɵɵelementStart(3, "div", 3);
        ɵɵelementStart(4, "novo-button", 4);
        ɵɵlistener("click", function NovoDatePickerElement_Template_novo_button_click_4_listener() { return ctx.setToday(); });
        ɵɵtext(5);
        ɵɵelementEnd();
        ɵɵelementEnd();
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.range);
        ɵɵadvance(1);
        ɵɵproperty("activeDate", ctx.activeDate)("selected", ctx.selection)("mode", ctx.mode)("numberOfMonths", ctx.numberOfMonths)("weekStartsOn", ctx.weekStart);
        ɵɵadvance(1);
        ɵɵproperty("hidden", ctx.hideFooter);
        ɵɵadvance(2);
        ɵɵtextInterpolate(ctx.labels.today);
    } }, directives: [NgIf, NovoCalendarElement, NovoButtonElement], encapsulation: 2, data: { animation: [
            trigger('startDateTextState', [
                state('startDate', style({
                    opacity: '1.0',
                })),
                state('endDate', style({
                    opacity: '0.6',
                })),
                transition('startDate <=> endDate', animate('200ms ease-in')),
            ]),
            trigger('endDateTextState', [
                state('startDate', style({
                    opacity: '0.6',
                })),
                state('endDate', style({
                    opacity: '1.0',
                })),
                transition('startDate <=> endDate', animate('200ms ease-in')),
            ]),
            trigger('indicatorState', [
                state('startDate', style({
                    transform: 'translateX(0%)',
                })),
                state('endDate', style({
                    transform: 'translateX(100%)',
                })),
                transition('startDate <=> endDate', animate('200ms ease-in')),
            ]),
        ] } });
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoDatePickerElement.prototype, "inline", void 0);
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoDatePickerElement.prototype, "hideOverflowDays", void 0);
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoDatePickerElement.prototype, "hideFooter", void 0);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDatePickerElement, [{
        type: Component,
        args: [{
                selector: 'novo-date-picker',
                providers: [DATE_PICKER_VALUE_ACCESSOR],
                animations: [
                    trigger('startDateTextState', [
                        state('startDate', style({
                            opacity: '1.0',
                        })),
                        state('endDate', style({
                            opacity: '0.6',
                        })),
                        transition('startDate <=> endDate', animate('200ms ease-in')),
                    ]),
                    trigger('endDateTextState', [
                        state('startDate', style({
                            opacity: '0.6',
                        })),
                        state('endDate', style({
                            opacity: '1.0',
                        })),
                        transition('startDate <=> endDate', animate('200ms ease-in')),
                    ]),
                    trigger('indicatorState', [
                        state('startDate', style({
                            transform: 'translateX(0%)',
                        })),
                        state('endDate', style({
                            transform: 'translateX(100%)',
                        })),
                        transition('startDate <=> endDate', animate('200ms ease-in')),
                    ]),
                ],
                template: `
    <div class="date-picker-container">
      <div class="date-range-tabs" *ngIf="range" [class.week-select-mode]="weekRangeSelect">
        <span
          class="range-tab"
          (click)="toggleRangeSelect('startDate')"
          [@startDateTextState]="rangeSelectMode"
          data-automation-id="calendar-start-date"
          >{{ startDateLabel }}</span
        >
        <span
          class="range-tab"
          (click)="toggleRangeSelect('endDate')"
          [@endDateTextState]="rangeSelectMode"
          data-automation-id="calendar-end-date"
          >{{ endDateLabel }}</span
        >
        <i class="indicator" [@indicatorState]="rangeSelectMode"></i>
      </div>

      <novo-calendar
        [activeDate]="activeDate"
        [(selected)]="selection"
        (selectedChange)="updateSelection($event)"
        [mode]="mode"
        [numberOfMonths]="numberOfMonths"
        [weekStartsOn]="weekStart"
      ></novo-calendar>

      <div class="calendar-footer" [hidden]="hideFooter">
        <novo-button (click)="setToday()" class="today" size="small" data-automation-id="calendar-today">{{ labels.today }}</novo-button>
      </div>
    </div>
  `,
            }]
    }], function () { return [{ type: NovoLabelService }, { type: ElementRef }, { type: ChangeDetectorRef }, { type: DomSanitizer }]; }, { minYear: [{
            type: Input
        }], maxYear: [{
            type: Input
        }], start: [{
            type: Input
        }], end: [{
            type: Input
        }], inline: [{
            type: Input
        }], weekStart: [{
            type: Input
        }], preselected: [{
            type: Input
        }], hideOverflowDays: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['class.hide-overflow-days']
        }], hideFooter: [{
            type: Input
        }], onSelect: [{
            type: Output
        }], numberOfMonths: [{
            type: Input
        }], mode: [{
            type: Input
        }], range: [{
            type: Input
        }], weekRangeSelect: [{
            type: Input
        }] }); })();

const _c0$M = ["filterInput"];
const _c1$g = ["optionFilterInput"];
const _c2$7 = ["novo-data-table-cell-config", ""];
function NovoDataTableCellHeader_i_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 6);
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵclassMapInterpolate1("bhi-", ctx_r0.labelIcon, " label-icon");
} }
function NovoDataTableCellHeader_novo_sort_button_4_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-sort-button", 7);
    ɵɵlistener("sortChange", function NovoDataTableCellHeader_novo_sort_button_4_Template_novo_sort_button_sortChange_0_listener() { ɵɵrestoreView(_r5); const ctx_r4 = ɵɵnextContext(); return ctx_r4.sort(); });
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵproperty("tooltip", ctx_r1.labels.sort)("value", ctx_r1.sortValue);
    ɵɵattribute("data-feature-id", "novo-data-table-sort-" + ctx_r1.id);
} }
function NovoDataTableCellHeader_novo_dropdown_5_button_7_Template(rf, ctx) { if (rf & 1) {
    const _r14 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 16);
    ɵɵlistener("click", function NovoDataTableCellHeader_novo_dropdown_5_button_7_Template_button_click_0_listener() { ɵɵrestoreView(_r14); const ctx_r13 = ɵɵnextContext(2); return ctx_r13.clearFilter(); });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r6.labels.clear, " ");
} }
function NovoDataTableCellHeader_novo_dropdown_5_novo_optgroup_9_ng_container_1_novo_option_1_i_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 23);
} }
function NovoDataTableCellHeader_novo_dropdown_5_novo_optgroup_9_ng_container_1_novo_option_1_Template(rf, ctx) { if (rf & 1) {
    const _r22 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-option", 21);
    ɵɵlistener("click", function NovoDataTableCellHeader_novo_dropdown_5_novo_optgroup_9_ng_container_1_novo_option_1_Template_novo_option_click_0_listener() { ɵɵrestoreView(_r22); const option_r19 = ctx.$implicit; const ctx_r21 = ɵɵnextContext(4); return ctx_r21.filterData(option_r19); });
    ɵɵtext(1);
    ɵɵtemplate(2, NovoDataTableCellHeader_novo_dropdown_5_novo_optgroup_9_ng_container_1_novo_option_1_i_2_Template, 1, 0, "i", 22);
    ɵɵelementEnd();
} if (rf & 2) {
    const option_r19 = ctx.$implicit;
    const ctx_r18 = ɵɵnextContext(4);
    ɵɵclassProp("active", ctx_r18.activeDateFilter === option_r19.label);
    ɵɵattribute("data-automation-id", "novo-data-table-filter-" + option_r19.label);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", option_r19.label, " ");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r18.activeDateFilter === option_r19.label);
} }
function NovoDataTableCellHeader_novo_dropdown_5_novo_optgroup_9_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, NovoDataTableCellHeader_novo_dropdown_5_novo_optgroup_9_ng_container_1_novo_option_1_Template, 3, 5, "novo-option", 20);
    ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r15 = ɵɵnextContext(3);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r15.config.filterConfig.options);
} }
function NovoDataTableCellHeader_novo_dropdown_5_novo_optgroup_9_novo_option_2_i_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 23);
} }
function NovoDataTableCellHeader_novo_dropdown_5_novo_optgroup_9_novo_option_2_Template(rf, ctx) { if (rf & 1) {
    const _r25 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-option", 21);
    ɵɵlistener("click", function NovoDataTableCellHeader_novo_dropdown_5_novo_optgroup_9_novo_option_2_Template_novo_option_click_0_listener($event) { ɵɵrestoreView(_r25); const ctx_r24 = ɵɵnextContext(3); return ctx_r24.toggleCustomRange($event, true); });
    ɵɵtext(1);
    ɵɵtemplate(2, NovoDataTableCellHeader_novo_dropdown_5_novo_optgroup_9_novo_option_2_i_2_Template, 1, 0, "i", 22);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r16 = ɵɵnextContext(3);
    ɵɵclassProp("active", ctx_r16.labels.customDateRange === ctx_r16.activeDateFilter);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r16.labels.customDateRange, " ");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r16.labels.customDateRange === ctx_r16.activeDateFilter);
} }
function NovoDataTableCellHeader_novo_dropdown_5_novo_optgroup_9_div_3_Template(rf, ctx) { if (rf & 1) {
    const _r27 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 24);
    ɵɵelementStart(1, "div", 21);
    ɵɵlistener("click", function NovoDataTableCellHeader_novo_dropdown_5_novo_optgroup_9_div_3_Template_div_click_1_listener($event) { ɵɵrestoreView(_r27); const ctx_r26 = ɵɵnextContext(3); return ctx_r26.toggleCustomRange($event, false); });
    ɵɵelement(2, "i", 25);
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementStart(4, "novo-date-picker", 26);
    ɵɵlistener("onSelect", function NovoDataTableCellHeader_novo_dropdown_5_novo_optgroup_9_div_3_Template_novo_date_picker_onSelect_4_listener($event) { ɵɵrestoreView(_r27); const ctx_r28 = ɵɵnextContext(3); return ctx_r28.filterData($event); })("ngModelChange", function NovoDataTableCellHeader_novo_dropdown_5_novo_optgroup_9_div_3_Template_novo_date_picker_ngModelChange_4_listener($event) { ɵɵrestoreView(_r27); const ctx_r29 = ɵɵnextContext(3); return ctx_r29.filter = $event; });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r17 = ɵɵnextContext(3);
    ɵɵadvance(3);
    ɵɵtextInterpolate(ctx_r17.labels.backToPresetFilters);
    ɵɵadvance(1);
    ɵɵproperty("ngModel", ctx_r17.filter);
} }
function NovoDataTableCellHeader_novo_dropdown_5_novo_optgroup_9_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-optgroup");
    ɵɵtemplate(1, NovoDataTableCellHeader_novo_dropdown_5_novo_optgroup_9_ng_container_1_Template, 2, 1, "ng-container", 17);
    ɵɵtemplate(2, NovoDataTableCellHeader_novo_dropdown_5_novo_optgroup_9_novo_option_2_Template, 3, 4, "novo-option", 18);
    ɵɵtemplate(3, NovoDataTableCellHeader_novo_dropdown_5_novo_optgroup_9_div_3_Template, 5, 2, "div", 19);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !ctx_r7.showCustomRange);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r7.config.filterConfig.allowCustomRange && !ctx_r7.showCustomRange);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r7.showCustomRange);
} }
function NovoDataTableCellHeader_novo_dropdown_5_novo_optgroup_10_novo_option_1_i_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 23);
} }
function NovoDataTableCellHeader_novo_dropdown_5_novo_optgroup_10_novo_option_1_Template(rf, ctx) { if (rf & 1) {
    const _r34 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-option", 21);
    ɵɵlistener("click", function NovoDataTableCellHeader_novo_dropdown_5_novo_optgroup_10_novo_option_1_Template_novo_option_click_0_listener() { ɵɵrestoreView(_r34); const option_r31 = ctx.$implicit; const ctx_r33 = ɵɵnextContext(3); return ctx_r33.filterData(option_r31); });
    ɵɵelementStart(1, "span");
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵtemplate(3, NovoDataTableCellHeader_novo_dropdown_5_novo_optgroup_10_novo_option_1_i_3_Template, 1, 0, "i", 22);
    ɵɵelementEnd();
} if (rf & 2) {
    const option_r31 = ctx.$implicit;
    const ctx_r30 = ɵɵnextContext(3);
    ɵɵclassProp("active", ctx_r30.filter === option_r31);
    ɵɵattribute("data-automation-id", "novo-data-table-filter-" + ((option_r31 == null ? null : option_r31.label) || option_r31));
    ɵɵadvance(2);
    ɵɵtextInterpolate((option_r31 == null ? null : option_r31.label) || option_r31);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", option_r31.hasOwnProperty("value") ? ctx_r30.filter === option_r31.value : ctx_r30.filter === option_r31);
} }
function NovoDataTableCellHeader_novo_dropdown_5_novo_optgroup_10_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-optgroup");
    ɵɵtemplate(1, NovoDataTableCellHeader_novo_dropdown_5_novo_optgroup_10_novo_option_1_Template, 4, 5, "novo-option", 20);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r8 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r8.config.filterConfig.options);
} }
function NovoDataTableCellHeader_novo_dropdown_5_novo_optgroup_11_novo_option_9_Template(rf, ctx) { if (rf & 1) {
    const _r39 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-option", 36);
    ɵɵlistener("click", function NovoDataTableCellHeader_novo_dropdown_5_novo_optgroup_11_novo_option_9_Template_novo_option_click_0_listener() { ɵɵrestoreView(_r39); const option_r37 = ctx.$implicit; const ctx_r38 = ɵɵnextContext(3); return ctx_r38.toggleSelection(option_r37); });
    ɵɵelementStart(1, "span");
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelement(3, "i");
    ɵɵelementEnd();
} if (rf & 2) {
    const option_r37 = ctx.$implicit;
    const ctx_r36 = ɵɵnextContext(3);
    ɵɵproperty("hidden", ctx_r36.multiSelectOptionIsHidden(option_r37));
    ɵɵattribute("data-automation-id", "novo-data-table-filter-" + ((option_r37 == null ? null : option_r37.label) || option_r37));
    ɵɵadvance(2);
    ɵɵtextInterpolate((option_r37 == null ? null : option_r37.label) || option_r37);
    ɵɵadvance(1);
    ɵɵclassProp("bhi-checkbox-empty", !ctx_r36.isSelected(option_r37, ctx_r36.multiSelectedOptions))("bhi-checkbox-filled", ctx_r36.isSelected(option_r37, ctx_r36.multiSelectedOptions));
} }
function NovoDataTableCellHeader_novo_dropdown_5_novo_optgroup_11_Template(rf, ctx) { if (rf & 1) {
    const _r41 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-optgroup");
    ɵɵelementStart(1, "div", 27);
    ɵɵlistener("keydown", function NovoDataTableCellHeader_novo_dropdown_5_novo_optgroup_11_Template_div_keydown_1_listener($event) { ɵɵrestoreView(_r41); const ctx_r40 = ɵɵnextContext(2); return ctx_r40.multiSelectOptionFilterHandleKeydown($event); });
    ɵɵelementStart(2, "div", 28);
    ɵɵelementStart(3, "input", 29, 30);
    ɵɵlistener("ngModelChange", function NovoDataTableCellHeader_novo_dropdown_5_novo_optgroup_11_Template_input_ngModelChange_3_listener($event) { ɵɵrestoreView(_r41); const ctx_r42 = ɵɵnextContext(2); return ctx_r42.optionFilter = $event; })("ngModelChange", function NovoDataTableCellHeader_novo_dropdown_5_novo_optgroup_11_Template_input_ngModelChange_3_listener($event) { ɵɵrestoreView(_r41); const ctx_r43 = ɵɵnextContext(2); return ctx_r43.multiSelectOptionFilter($event); });
    ɵɵelementEnd();
    ɵɵelement(5, "i", 31);
    ɵɵelementStart(6, "span", 32);
    ɵɵtext(7);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementStart(8, "div", 33);
    ɵɵtemplate(9, NovoDataTableCellHeader_novo_dropdown_5_novo_optgroup_11_novo_option_9_Template, 4, 7, "novo-option", 34);
    ɵɵelementEnd();
    ɵɵelementStart(10, "p", 35);
    ɵɵtext(11);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r9 = ɵɵnextContext(2);
    ɵɵadvance(3);
    ɵɵproperty("ngModel", ctx_r9.optionFilter);
    ɵɵadvance(3);
    ɵɵproperty("hidden", !ctx_r9.error || !ctx_r9.multiSelectHasVisibleOptions());
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r9.labels.selectFilterOptions);
    ɵɵadvance(2);
    ɵɵproperty("ngForOf", ctx_r9.config.filterConfig.options);
    ɵɵadvance(1);
    ɵɵproperty("hidden", ctx_r9.multiSelectHasVisibleOptions());
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r9.labels.pickerEmpty);
} }
function NovoDataTableCellHeader_novo_dropdown_5_novo_optgroup_12_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainer(0);
} }
const _c3$4 = function (a0) { return { $implicit: a0 }; };
function NovoDataTableCellHeader_novo_dropdown_5_novo_optgroup_12_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-optgroup");
    ɵɵelementStart(1, "div", 37);
    ɵɵtemplate(2, NovoDataTableCellHeader_novo_dropdown_5_novo_optgroup_12_ng_container_2_Template, 1, 0, "ng-container", 38);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵproperty("ngTemplateOutlet", ctx_r10.filterTemplate)("ngTemplateOutletContext", ɵɵpureFunction1(2, _c3$4, ctx_r10.config));
} }
function NovoDataTableCellHeader_novo_dropdown_5_novo_optgroup_13_Template(rf, ctx) { if (rf & 1) {
    const _r47 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-optgroup");
    ɵɵelementStart(1, "div", 37);
    ɵɵelementStart(2, "input", 39, 40);
    ɵɵlistener("ngModelChange", function NovoDataTableCellHeader_novo_dropdown_5_novo_optgroup_13_Template_input_ngModelChange_2_listener($event) { ɵɵrestoreView(_r47); const ctx_r46 = ɵɵnextContext(2); return ctx_r46.filter = $event; })("ngModelChange", function NovoDataTableCellHeader_novo_dropdown_5_novo_optgroup_13_Template_input_ngModelChange_2_listener($event) { ɵɵrestoreView(_r47); const ctx_r48 = ɵɵnextContext(2); return ctx_r48.filterData($event); });
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r11 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵproperty("type", ctx_r11.config.filterConfig.type)("ngModel", ctx_r11.filter);
} }
function NovoDataTableCellHeader_novo_dropdown_5_div_14_Template(rf, ctx) { if (rf & 1) {
    const _r50 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 41);
    ɵɵelementStart(1, "button", 42);
    ɵɵlistener("click", function NovoDataTableCellHeader_novo_dropdown_5_div_14_Template_button_click_1_listener() { ɵɵrestoreView(_r50); const ctx_r49 = ɵɵnextContext(2); return ctx_r49.cancel(); });
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementStart(3, "button", 43);
    ɵɵlistener("click", function NovoDataTableCellHeader_novo_dropdown_5_div_14_Template_button_click_3_listener() { ɵɵrestoreView(_r50); const ctx_r51 = ɵɵnextContext(2); return ctx_r51.filterMultiSelect(); });
    ɵɵtext(4);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵtextInterpolate1(" ", ctx_r12.labels.cancel, " ");
    ɵɵadvance(2);
    ɵɵtextInterpolate1(" ", ctx_r12.labels.filters, " ");
} }
function NovoDataTableCellHeader_novo_dropdown_5_Template(rf, ctx) { if (rf & 1) {
    const _r53 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-dropdown", 8);
    ɵɵelementStart(1, "button", 9);
    ɵɵlistener("click", function NovoDataTableCellHeader_novo_dropdown_5_Template_button_click_1_listener() { ɵɵrestoreView(_r53); const ctx_r52 = ɵɵnextContext(); return ctx_r52.focusInput(); });
    ɵɵelementStart(2, "novo-icon");
    ɵɵtext(3, "filter");
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementStart(4, "div", 10);
    ɵɵelementStart(5, "novo-label");
    ɵɵtext(6);
    ɵɵelementEnd();
    ɵɵtemplate(7, NovoDataTableCellHeader_novo_dropdown_5_button_7_Template, 2, 1, "button", 11);
    ɵɵelementEnd();
    ɵɵelementContainerStart(8, 12);
    ɵɵtemplate(9, NovoDataTableCellHeader_novo_dropdown_5_novo_optgroup_9_Template, 4, 3, "novo-optgroup", 13);
    ɵɵtemplate(10, NovoDataTableCellHeader_novo_dropdown_5_novo_optgroup_10_Template, 2, 1, "novo-optgroup", 13);
    ɵɵtemplate(11, NovoDataTableCellHeader_novo_dropdown_5_novo_optgroup_11_Template, 12, 6, "novo-optgroup", 13);
    ɵɵtemplate(12, NovoDataTableCellHeader_novo_dropdown_5_novo_optgroup_12_Template, 3, 4, "novo-optgroup", 13);
    ɵɵtemplate(13, NovoDataTableCellHeader_novo_dropdown_5_novo_optgroup_13_Template, 4, 2, "novo-optgroup", 14);
    ɵɵelementContainerEnd();
    ɵɵtemplate(14, NovoDataTableCellHeader_novo_dropdown_5_div_14_Template, 5, 2, "div", 15);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("tooltip", ctx_r2.labels.filters);
    ɵɵattribute("data-feature-id", "novo-data-table-filter-" + ctx_r2.id);
    ɵɵadvance(1);
    ɵɵclassProp("filter-active", ctx_r2.filterActive);
    ɵɵadvance(4);
    ɵɵtextInterpolate(ctx_r2.labels.filters);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r2.filter !== null && ctx_r2.filter !== undefined && ctx_r2.filter !== "");
    ɵɵadvance(1);
    ɵɵproperty("ngSwitch", ctx_r2.config.filterConfig.type);
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", "date");
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", "select");
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", "multi-select");
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", "custom");
    ɵɵadvance(2);
    ɵɵproperty("ngIf", ctx_r2.multiSelect);
} }
function NovoDataTableCellHeader_div_7_Template(rf, ctx) { if (rf & 1) {
    const _r55 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 44);
    ɵɵelementStart(1, "span", 45);
    ɵɵlistener("mousedown", function NovoDataTableCellHeader_div_7_Template_span_mousedown_1_listener($event) { ɵɵrestoreView(_r55); const ctx_r54 = ɵɵnextContext(); return ctx_r54.startResize($event); });
    ɵɵtext(2, "\u00A0");
    ɵɵelementEnd();
    ɵɵelementEnd();
} }
class NovoDataTableCellHeader {
    constructor(changeDetectorRef, labels, state, renderer, elementRef, _sort, _cdkColumnDef) {
        this.changeDetectorRef = changeDetectorRef;
        this.labels = labels;
        this.state = state;
        this.renderer = renderer;
        this.elementRef = elementRef;
        this._sort = _sort;
        this._cdkColumnDef = _cdkColumnDef;
        this.allowMultipleFilters = false;
        this.icon = 'sortable';
        this.filterActive = false;
        this.sortActive = false;
        this.sortValue = SortDirection.NONE;
        this.showCustomRange = false;
        this.multiSelect = false;
        this.multiSelectedOptions = [];
        this.multiSelectedOptionIsHidden = [];
        this.optionFilter = '';
        this.error = false;
        this.subscriptions = [];
        this._rerenderSubscription = state.updates.subscribe((change) => this.checkSortFilterState(change));
    }
    set column(column) {
        this._column = column;
        this.label = column.type === 'action' ? '' : column.label;
        this.labelIcon = column.labelIcon;
        this.config = {
            sortable: !!column.sortable,
            filterable: !!column.filterable,
            resizable: !!column.resizable,
        };
        this.resizable = this.config.resizable;
        const transforms = {};
        if (column.filterable && Helpers.isObject(column.filterable)) {
            this.config.filterConfig = column.filterable;
            if (!this.config.filterConfig.type) {
                this.config.filterConfig = { type: 'text' };
            }
            if (column.filterable.transform) {
                transforms.filter = column.filterable.transform;
            }
        }
        else {
            this.config.filterConfig = { type: 'text' };
        }
        if (column.sortable && Helpers.isObject(column.sortable)) {
            if (column.sortable.transform) {
                transforms.sort = column.sortable.transform;
            }
        }
        if (this.config.filterConfig.type === 'date' && !this.config.filterConfig.options) {
            this.config.filterConfig.options = this.getDefaultDateFilterOptions();
        }
        this.config.transforms = transforms;
    }
    ngOnInit() {
        if (this._cdkColumnDef) {
            this.id = this._cdkColumnDef.name;
        }
        this.checkSortFilterState({ filter: this.state.filter, sort: this.state.sort }, true);
        this.multiSelect = this.config.filterConfig && this.config.filterConfig.type ? this.config.filterConfig.type === 'multi-select' : false;
        if (this.multiSelect) {
            this.multiSelectedOptions = this.filter ? [...this.filter] : [];
        }
        this.changeDetectorRef.markForCheck();
    }
    ngOnDestroy() {
        this._rerenderSubscription.unsubscribe();
        this.subscriptions.forEach((subscription) => {
            subscription.unsubscribe();
        });
    }
    checkSortFilterState(sortFilterState, initialConfig = false) {
        if (sortFilterState.sort && sortFilterState.sort.id === this.id) {
            this.icon = `sort-${sortFilterState.sort.value}`;
            this.sortValue = sortFilterState.sort.value === 'asc' ? SortDirection.ASC : SortDirection.DESC;
            this.sortActive = true;
        }
        else {
            this.icon = 'sortable';
            this.sortValue = SortDirection.NONE;
            this.sortActive = false;
        }
        const tableFilter = Helpers.convertToArray(sortFilterState.filter);
        const thisFilter = tableFilter.find((filter) => filter && filter.id === this.id);
        if (thisFilter) {
            this.filterActive = true;
            if (initialConfig && thisFilter.type === 'date' && thisFilter.selectedOption) {
                this.activeDateFilter = thisFilter.selectedOption.label || this.labels.customDateRange;
            }
            this.filter = thisFilter.value;
        }
        else {
            this.filterActive = false;
            this.filter = undefined;
            this.activeDateFilter = undefined;
            this.multiSelectedOptions = [];
        }
        if (this.defaultSort && this.id === this.defaultSort.id) {
            this.icon = `sort-${this.defaultSort.value}`;
            this.sortActive = true;
        }
        this.multiSelect = this.config.filterConfig && this.config.filterConfig.type ? this.config.filterConfig.type === 'multi-select' : false;
        if (this.multiSelect) {
            this.multiSelectedOptions = this.filter ? [...this.filter] : [];
            if (this.config.filterConfig.options) {
                if (typeof this.config.filterConfig.options[0] === 'string') {
                    this.multiSelectedOptionIsHidden = this.config.filterConfig.options.map((option) => ({ option, hidden: false }));
                }
                else {
                    this.multiSelectedOptionIsHidden = this.config.filterConfig.options.map((option) => ({
                        option,
                        hidden: false,
                    }));
                }
            }
        }
        this.changeDetectorRef.markForCheck();
    }
    isSelected(option, optionsList) {
        if (optionsList) {
            const optionValue = option.hasOwnProperty('value') ? option.value : option;
            const found = optionsList.find((item) => this.optionPresentCheck(item, optionValue));
            return found !== undefined;
        }
        return false;
    }
    toggleSelection(option) {
        const optionValue = option.hasOwnProperty('value') ? option.value : option;
        const optionIndex = this.multiSelectedOptions.findIndex((item) => this.optionPresentCheck(item, optionValue));
        this.error = false;
        if (optionIndex > -1) {
            this.multiSelectedOptions.splice(optionIndex, 1);
            if (this.optionFilter && !this.getOptionText(option).toLowerCase().startsWith(this.optionFilter.toLowerCase())) {
                this.multiSelectedOptionIsHidden[this.multiSelectedOptionIsHidden.findIndex((record) => record.option === option)].hidden = true;
            }
        }
        else {
            this.multiSelectedOptions.push(optionValue);
        }
    }
    optionPresentCheck(item, optionValue) {
        if (item.hasOwnProperty('value')) {
            return item.value === optionValue;
        }
        else {
            return item === optionValue;
        }
    }
    cancel() {
        this.multiSelectedOptions = this.filter ? [...this.filter] : [];
        this.dropdown.closePanel();
        this.clearOptionFilter();
    }
    filterMultiSelect() {
        if (this.multiSelectedOptions.length === 0 && !this.filter) {
            this.multiSelectHasVisibleOptions() && this.dropdown ? (this.error = true) : null;
        }
        else {
            this.clearOptionFilter();
            const actualFilter = this.multiSelectedOptions.length > 0 ? [...this.multiSelectedOptions] : undefined;
            this.filterData(actualFilter);
            this.dropdown.closePanel();
        }
    }
    multiSelectOptionFilter(optionFilter) {
        this.multiSelectedOptionIsHidden.forEach((record) => {
            if (record.option) {
                record.hidden = !(this.getOptionText(record.option).toLowerCase().startsWith(optionFilter.toLowerCase()) ||
                    this.isSelected(record.option, this.multiSelectedOptions));
            }
        });
    }
    multiSelectOptionIsHidden(option) {
        return this.multiSelectedOptionIsHidden.find((record) => record.option === option).hidden;
    }
    multiSelectHasVisibleOptions() {
        return this.multiSelectedOptionIsHidden.some((record) => !record.hidden);
    }
    getOptionText(option) {
        if (typeof option !== 'object') {
            return option.toString();
        }
        else {
            const opt = option;
            return (opt.label.length > 0 ? opt.label : opt.value).toString();
        }
    }
    multiSelectOptionFilterHandleKeydown(event) {
        if (this.multiSelect) {
            this.error = false;
            if (this.dropdown.panelOpen && event.key === "Escape" /* Escape */) {
                // escape = clear text box and close
                Helpers.swallowEvent(event);
                this.clearOptionFilter();
                this.dropdown.closePanel();
            }
            else if (event.key === "Enter" /* Enter */) {
                Helpers.swallowEvent(event);
                this.filterMultiSelect();
            }
            else if ((event.keyCode >= 65 && event.keyCode <= 90) ||
                (event.keyCode >= 96 && event.keyCode <= 105) ||
                (event.keyCode >= 48 && event.keyCode <= 57)) {
                this.optionFilterInput.nativeElement.focus();
            }
        }
    }
    clearOptionFilter() {
        this.error = false;
        if (this.optionFilter.length > 0) {
            this.optionFilter = '';
            this.multiSelectedOptionIsHidden.forEach((record) => {
                record.hidden = false;
            });
        }
    }
    startResize(mouseDownEvent) {
        mouseDownEvent.preventDefault();
        const minimumWidth = 60 + (this.config.filterable ? 30 : 0) + (this.config.sortable ? 30 : 0);
        const startingWidth = this.elementRef.nativeElement.getBoundingClientRect().width;
        const mouseMoveSubscription = fromEvent(window.document, 'mousemove').subscribe((middleMouseEvent) => {
            const differenceWidth = middleMouseEvent.clientX - mouseDownEvent.clientX;
            let width = startingWidth + differenceWidth;
            if (width < minimumWidth) {
                width = minimumWidth;
            }
            this._column.width = width;
            this.renderer.setStyle(this.elementRef.nativeElement, 'min-width', `${this._column.width}px`);
            this.renderer.setStyle(this.elementRef.nativeElement, 'max-width', `${this._column.width}px`);
            this.renderer.setStyle(this.elementRef.nativeElement, 'width', `${this._column.width}px`);
            this.changeDetectorRef.markForCheck();
            this.resized.next(this._column);
        });
        const mouseUpSubscription = fromEvent(window.document, 'mouseup').subscribe(() => {
            mouseUpSubscription.unsubscribe();
            mouseMoveSubscription.unsubscribe();
            this.changeDetectorRef.markForCheck();
        });
        this.subscriptions.push(mouseMoveSubscription);
        this.subscriptions.push(mouseUpSubscription);
    }
    toggleCustomRange(event, value) {
        Helpers.swallowEvent(event);
        this.showCustomRange = value;
        this.changeDetectorRef.markForCheck();
        this.dropdown.openPanel(); // Ensures that the panel correctly updates to the dynamic size of the dropdown
    }
    focusInput() {
        if (this.filterInput && this.filterInput.nativeElement) {
            setTimeout(() => this.filterInput.nativeElement.focus(), 0);
        }
        if (this.multiSelect && this.dropdown) {
            this.dropdown._handleKeydown = (event) => {
                this.multiSelectOptionFilterHandleKeydown(event);
            };
            setTimeout(() => this.optionFilterInput.nativeElement.focus(), 0);
            this.changeDetectorRef.markForCheck();
        }
    }
    sort() {
        if (this.changeTimeout) {
            clearTimeout(this.changeTimeout);
        }
        this.changeTimeout = setTimeout(() => {
            this.direction = this.getNextSortDirection(this.direction);
            this._sort.sort(this.id, this.direction, this.config.transforms.sort);
            this.changeDetectorRef.markForCheck();
        }, 300);
    }
    filterData(filter) {
        let actualFilter = NovoDataTableFilterUtils.constructFilter(filter, this.config.filterConfig.type, this.multiSelect);
        const selectedOption = this.config.filterConfig.type === 'date' && filter ? filter : undefined;
        if (this.changeTimeout) {
            clearTimeout(this.changeTimeout);
        }
        this.changeTimeout = setTimeout(() => {
            if (actualFilter === '') {
                actualFilter = undefined;
            }
            this._sort.filter(this.id, this.config.filterConfig.type, actualFilter, this.config.transforms.filter, this.allowMultipleFilters, selectedOption);
            this.changeDetectorRef.markForCheck();
        }, 300);
    }
    clearFilter() {
        this.filter = undefined;
        this.multiSelectedOptions = [];
        this.activeDateFilter = undefined;
        this.filterData(undefined);
        this.clearOptionFilter();
        this.dropdown.closePanel();
    }
    getNextSortDirection(direction) {
        if (!direction) {
            return 'asc';
        }
        if (direction === 'asc') {
            return 'desc';
        }
        return 'asc';
    }
    getDefaultDateFilterOptions() {
        const opts = [
            { label: this.labels.past1Day, min: -1, max: 0 },
            { label: this.labels.past7Days, min: -7, max: 0 },
            { label: this.labels.past30Days, min: -30, max: 0 },
            { label: this.labels.past90Days, min: -90, max: 0 },
            { label: this.labels.past1Year, min: -366, max: 0 },
            { label: this.labels.next1Day, min: 0, max: 1 },
            { label: this.labels.next7Days, min: 0, max: 7 },
            { label: this.labels.next30Days, min: 0, max: 30 },
            { label: this.labels.next90Days, min: 0, max: 90 },
            { label: this.labels.next1Year, min: 0, max: 366 },
        ];
        return opts;
    }
}
NovoDataTableCellHeader.ɵfac = function NovoDataTableCellHeader_Factory(t) { return new (t || NovoDataTableCellHeader)(ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(DataTableState), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NovoDataTableSortFilter, 8), ɵɵdirectiveInject(CdkColumnDef, 8)); };
NovoDataTableCellHeader.ɵcmp = ɵɵdefineComponent({ type: NovoDataTableCellHeader, selectors: [["", "novo-data-table-cell-config", ""]], viewQuery: function NovoDataTableCellHeader_Query(rf, ctx) { if (rf & 1) {
        ɵɵviewQuery(_c0$M, true);
        ɵɵviewQuery(NovoDropdownElement, true);
        ɵɵviewQuery(_c1$g, true);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.filterInput = _t.first);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.dropdown = _t.first);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.optionFilterInput = _t.first);
    } }, hostVars: 2, hostBindings: function NovoDataTableCellHeader_HostBindings(rf, ctx) { if (rf & 1) {
        ɵɵlistener("keydown", function NovoDataTableCellHeader_keydown_HostBindingHandler($event) { return ctx.multiSelectOptionFilterHandleKeydown($event); });
    } if (rf & 2) {
        ɵɵclassProp("resizable", ctx.resizable);
    } }, inputs: { defaultSort: "defaultSort", allowMultipleFilters: "allowMultipleFilters", resized: "resized", filterTemplate: "filterTemplate", column: ["novo-data-table-cell-config", "column"] }, attrs: _c2$7, decls: 8, vars: 5, consts: [["data-automation-id", "novo-data-table-header-icon", 3, "class", 4, "ngIf"], ["data-automation-id", "novo-data-table-label"], ["data-automation-id", "novo-data-table-sort", "tooltipPosition", "right", 3, "tooltip", "value", "sortChange", 4, "ngIf"], ["side", "right", "parentScrollSelector", ".novo-data-table-container", "containerClass", "data-table-dropdown", "data-automation-id", "novo-data-table-filter", 4, "ngIf"], [1, "spacer"], ["class", "data-table-header-resizable", 4, "ngIf"], ["data-automation-id", "novo-data-table-header-icon"], ["data-automation-id", "novo-data-table-sort", "tooltipPosition", "right", 3, "tooltip", "value", "sortChange"], ["side", "right", "parentScrollSelector", ".novo-data-table-container", "containerClass", "data-table-dropdown", "data-automation-id", "novo-data-table-filter"], ["type", "button", "theme", "icon", "tooltipPosition", "right", 1, "filter-button", 3, "tooltip", "click"], [1, "header"], ["theme", "dialogue", "color", "negative", "size", "small", "icon", "times", "data-automation-id", "novo-data-table-filter-clear", 3, "click", 4, "ngIf"], [3, "ngSwitch"], [4, "ngSwitchCase"], [4, "ngSwitchDefault"], ["class", "footer", 4, "ngIf"], ["theme", "dialogue", "color", "negative", "size", "small", "icon", "times", "data-automation-id", "novo-data-table-filter-clear", 3, "click"], [4, "ngIf"], [3, "active", "click", 4, "ngIf"], ["class", "calendar-container", 4, "ngIf"], [3, "active", "click", 4, "ngFor", "ngForOf"], [3, "click"], ["class", "bhi-check", 4, "ngIf"], [1, "bhi-check"], [1, "calendar-container"], [1, "bhi-previous"], ["range", "true", 3, "ngModel", "onSelect", "ngModelChange"], [1, "dropdown-list-filter", 3, "keydown"], ["keepOpen", "true", 1, "filter-search"], ["data-automation-id", "novo-data-table-multi-select-option-filter-input", 3, "ngModel", "ngModelChange"], ["optionFilterInput", ""], [1, "bhi-search"], [1, "error-text", 3, "hidden"], [1, "dropdown-list-options"], [3, "hidden", "click", 4, "ngFor", "ngForOf"], [1, "filter-null-results", 3, "hidden"], [3, "hidden", "click"], [1, "filter-search"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], ["data-automation-id", "novo-data-table-filter-input", 3, "type", "ngModel", "ngModelChange"], ["filterInput", ""], [1, "footer"], ["theme", "dialogue", "color", "dark", "data-automation-id", "novo-data-table-multi-select-cancel", 3, "click"], ["theme", "dialogue", "color", "positive", "data-automation-id", "novo-data-table-multi-select-filter", 3, "click"], [1, "data-table-header-resizable"], [3, "mousedown"]], template: function NovoDataTableCellHeader_Template(rf, ctx) { if (rf & 1) {
        ɵɵtemplate(0, NovoDataTableCellHeader_i_0_Template, 1, 3, "i", 0);
        ɵɵelementStart(1, "label", 1);
        ɵɵtext(2);
        ɵɵelementEnd();
        ɵɵelementStart(3, "div");
        ɵɵtemplate(4, NovoDataTableCellHeader_novo_sort_button_4_Template, 1, 3, "novo-sort-button", 2);
        ɵɵtemplate(5, NovoDataTableCellHeader_novo_dropdown_5_Template, 15, 12, "novo-dropdown", 3);
        ɵɵelementEnd();
        ɵɵelement(6, "div", 4);
        ɵɵtemplate(7, NovoDataTableCellHeader_div_7_Template, 3, 0, "div", 5);
    } if (rf & 2) {
        ɵɵproperty("ngIf", ctx.labelIcon);
        ɵɵadvance(2);
        ɵɵtextInterpolate(ctx.label);
        ɵɵadvance(2);
        ɵɵproperty("ngIf", ctx.config.sortable);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.config.filterable);
        ɵɵadvance(2);
        ɵɵproperty("ngIf", ctx.config.resizable);
    } }, directives: [NgIf, NovoDataTableSortButton, TooltipDirective, NovoDropdownElement, NovoButtonElement, NovoIconComponent, NovoLabel, NgSwitch, NgSwitchCase, NgSwitchDefault, NovoOptgroup, NgForOf, NovoOption, NovoDatePickerElement, NgControlStatus, NgModel, DefaultValueAccessor, NgTemplateOutlet], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDataTableCellHeader, [{
        type: Component,
        args: [{
                selector: '[novo-data-table-cell-config]',
                template: `
    <i class="bhi-{{ labelIcon }} label-icon" *ngIf="labelIcon" data-automation-id="novo-data-table-header-icon"></i>
    <label data-automation-id="novo-data-table-label">{{ label }}</label>
    <div>
      <novo-sort-button
        *ngIf="config.sortable"
        data-automation-id="novo-data-table-sort"
        tooltipPosition="right"
        [tooltip]="labels.sort"
        [attr.data-feature-id]="'novo-data-table-sort-' + this.id"
        (sortChange)="sort()"
        [value]="sortValue"
      ></novo-sort-button>
      <novo-dropdown
        *ngIf="config.filterable"
        side="right"
        parentScrollSelector=".novo-data-table-container"
        containerClass="data-table-dropdown"
        data-automation-id="novo-data-table-filter"
      >
        <button
          class="filter-button"
          type="button"
          theme="icon"
          (click)="focusInput()"
          tooltipPosition="right"
          [tooltip]="labels.filters"
          [attr.data-feature-id]="'novo-data-table-filter-' + this.id"
        >
          <novo-icon [class.filter-active]="filterActive">filter</novo-icon>
        </button>
        <div class="header">
          <novo-label>{{ labels.filters }}</novo-label>
          <button
            theme="dialogue"
            color="negative"
            size="small"
            icon="times"
            (click)="clearFilter()"
            *ngIf="filter !== null && filter !== undefined && filter !== ''"
            data-automation-id="novo-data-table-filter-clear"
          >
            {{ labels.clear }}
          </button>
        </div>
        <ng-container [ngSwitch]="config.filterConfig.type">
          <novo-optgroup *ngSwitchCase="'date'">
            <ng-container *ngIf="!showCustomRange">
              <novo-option
                [class.active]="activeDateFilter === option.label"
                *ngFor="let option of config.filterConfig.options"
                (click)="filterData(option)"
                [attr.data-automation-id]="'novo-data-table-filter-' + option.label"
              >
                {{ option.label }} <i class="bhi-check" *ngIf="activeDateFilter === option.label"></i>
              </novo-option>
            </ng-container>
            <novo-option
              [class.active]="labels.customDateRange === activeDateFilter"
              (click)="toggleCustomRange($event, true)"
              *ngIf="config.filterConfig.allowCustomRange && !showCustomRange"
            >
              {{ labels.customDateRange }} <i class="bhi-check" *ngIf="labels.customDateRange === activeDateFilter"></i>
            </novo-option>
            <div class="calendar-container" *ngIf="showCustomRange">
              <div (click)="toggleCustomRange($event, false)"><i class="bhi-previous"></i>{{ labels.backToPresetFilters }}</div>
              <novo-date-picker (onSelect)="filterData($event)" [(ngModel)]="filter" range="true"></novo-date-picker>
            </div>
          </novo-optgroup>
          <novo-optgroup *ngSwitchCase="'select'">
            <novo-option
              [class.active]="filter === option"
              *ngFor="let option of config.filterConfig.options"
              (click)="filterData(option)"
              [attr.data-automation-id]="'novo-data-table-filter-' + (option?.label || option)"
            >
              <span>{{ option?.label || option }}</span>
              <i class="bhi-check" *ngIf="option.hasOwnProperty('value') ? filter === option.value : filter === option"></i>
            </novo-option>
          </novo-optgroup>
          <novo-optgroup *ngSwitchCase="'multi-select'">
            <div class="dropdown-list-filter" (keydown)="multiSelectOptionFilterHandleKeydown($event)">
              <div class="filter-search" keepOpen="true">
                <input
                  [(ngModel)]="optionFilter"
                  (ngModelChange)="multiSelectOptionFilter($event)"
                  #optionFilterInput
                  data-automation-id="novo-data-table-multi-select-option-filter-input"
                />
                <i class="bhi-search"></i>
                <span class="error-text" [hidden]="!error || !multiSelectHasVisibleOptions()">{{ labels.selectFilterOptions }}</span>
              </div>
            </div>
            <div class="dropdown-list-options">
              <novo-option
                *ngFor="let option of config.filterConfig.options"
                [hidden]="multiSelectOptionIsHidden(option)"
                (click)="toggleSelection(option)"
                [attr.data-automation-id]="'novo-data-table-filter-' + (option?.label || option)"
              >
                <span>{{ option?.label || option }}</span>
                <i
                  [class.bhi-checkbox-empty]="!isSelected(option, multiSelectedOptions)"
                  [class.bhi-checkbox-filled]="isSelected(option, multiSelectedOptions)"
                ></i>
              </novo-option>
            </div>
            <p class="filter-null-results" [hidden]="multiSelectHasVisibleOptions()">{{ labels.pickerEmpty }}</p>
          </novo-optgroup>
          <novo-optgroup *ngSwitchCase="'custom'">
            <div class="filter-search">
              <ng-container *ngTemplateOutlet="filterTemplate; context: { $implicit: config }"></ng-container>
            </div>
          </novo-optgroup>
          <novo-optgroup *ngSwitchDefault>
            <div class="filter-search">
              <input
                [type]="config.filterConfig.type"
                [(ngModel)]="filter"
                (ngModelChange)="filterData($event)"
                #filterInput
                data-automation-id="novo-data-table-filter-input"
              />
            </div>
          </novo-optgroup>
        </ng-container>
        <div class="footer" *ngIf="multiSelect">
          <button theme="dialogue" color="dark" (click)="cancel()" data-automation-id="novo-data-table-multi-select-cancel">
            {{ labels.cancel }}
          </button>
          <button theme="dialogue" color="positive" (click)="filterMultiSelect()" data-automation-id="novo-data-table-multi-select-filter">
            {{ labels.filters }}
          </button>
        </div>
      </novo-dropdown>
    </div>
    <div class="spacer"></div>
    <div class="data-table-header-resizable" *ngIf="config.resizable"><span (mousedown)="startResize($event)">&nbsp;</span></div>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: ChangeDetectorRef }, { type: NovoLabelService }, { type: DataTableState }, { type: Renderer2 }, { type: ElementRef }, { type: NovoDataTableSortFilter, decorators: [{
                type: Optional
            }] }, { type: CdkColumnDef, decorators: [{
                type: Optional
            }] }]; }, { filterInput: [{
            type: ViewChild,
            args: ['filterInput']
        }], dropdown: [{
            type: ViewChild,
            args: [NovoDropdownElement]
        }], optionFilterInput: [{
            type: ViewChild,
            args: ['optionFilterInput']
        }], defaultSort: [{
            type: Input
        }], allowMultipleFilters: [{
            type: Input
        }], resized: [{
            type: Input
        }], filterTemplate: [{
            type: Input
        }], resizable: [{
            type: HostBinding,
            args: ['class.resizable']
        }], column: [{
            type: Input,
            args: ['novo-data-table-cell-config']
        }], multiSelectOptionFilterHandleKeydown: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }] }); })();

class NovoDataTableHeaderCell extends CdkHeaderCell {
    constructor(columnDef, elementRef, renderer) {
        super(columnDef, elementRef);
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.role = 'columnheader';
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', `novo-column-header-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, `novo-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, 'novo-data-table-header-cell');
    }
    ngOnInit() {
        if (this.column.width) {
            this.renderer.setStyle(this.elementRef.nativeElement, 'min-width', `${this.column.width}px`);
            this.renderer.setStyle(this.elementRef.nativeElement, 'max-width', `${this.column.width}px`);
            this.renderer.setStyle(this.elementRef.nativeElement, 'width', `${this.column.width}px`);
        }
    }
}
NovoDataTableHeaderCell.ɵfac = function NovoDataTableHeaderCell_Factory(t) { return new (t || NovoDataTableHeaderCell)(ɵɵdirectiveInject(CdkColumnDef), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2)); };
NovoDataTableHeaderCell.ɵdir = ɵɵdefineDirective({ type: NovoDataTableHeaderCell, selectors: [["novo-data-table-header-cell"]], hostVars: 1, hostBindings: function NovoDataTableHeaderCell_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵattribute("role", ctx.role);
    } }, inputs: { column: "column" }, features: [ɵɵInheritDefinitionFeature] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDataTableHeaderCell, [{
        type: Directive,
        args: [{
                selector: 'novo-data-table-header-cell',
            }]
    }], function () { return [{ type: CdkColumnDef }, { type: ElementRef }, { type: Renderer2 }]; }, { role: [{
            type: HostBinding,
            args: ['attr.role']
        }], column: [{
            type: Input
        }] }); })();

function NovoDataTableCell_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainer(0);
} }
const _c0$N = function (a0, a1) { return { $implicit: a0, col: a1 }; };
class NovoDataTableCell extends CdkCell {
    constructor(columnDef, elementRef, renderer) {
        super(columnDef, elementRef);
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.role = 'gridcell';
        this.subscriptions = [];
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', `novo-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, `novo-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, 'novo-data-table-cell');
    }
    ngOnInit() {
        if (this.column.cellClass) {
            this.renderer.addClass(this.elementRef.nativeElement, this.column.cellClass(this.row));
        }
        if (this.column.rightAlignCellContent) {
            this.renderer.addClass(this.elementRef.nativeElement, 'novo-data-table-cell-align-right');
        }
        this.calculateWidths();
        this.subscriptions.push(this.resized.subscribe((column) => {
            if (column === this.column) {
                this.calculateWidths();
            }
        }));
    }
    ngOnDestroy() {
        this.subscriptions.forEach((subscription) => {
            subscription.unsubscribe();
        });
    }
    calculateWidths() {
        if (this.column.width) {
            this.renderer.setStyle(this.elementRef.nativeElement, 'min-width', `${this.column.width}px`);
            this.renderer.setStyle(this.elementRef.nativeElement, 'max-width', `${this.column.width}px`);
            this.renderer.setStyle(this.elementRef.nativeElement, 'width', `${this.column.width}px`);
        }
    }
}
NovoDataTableCell.ɵfac = function NovoDataTableCell_Factory(t) { return new (t || NovoDataTableCell)(ɵɵdirectiveInject(CdkColumnDef), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2)); };
NovoDataTableCell.ɵcmp = ɵɵdefineComponent({ type: NovoDataTableCell, selectors: [["novo-data-table-cell"]], hostVars: 1, hostBindings: function NovoDataTableCell_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵattribute("role", ctx.role);
    } }, inputs: { row: "row", template: "template", column: "column", resized: "resized" }, features: [ɵɵInheritDefinitionFeature], decls: 1, vars: 5, consts: [[4, "ngTemplateOutlet", "ngTemplateOutletContext"]], template: function NovoDataTableCell_Template(rf, ctx) { if (rf & 1) {
        ɵɵtemplate(0, NovoDataTableCell_ng_container_0_Template, 1, 0, "ng-container", 0);
    } if (rf & 2) {
        ɵɵproperty("ngTemplateOutlet", ctx.template)("ngTemplateOutletContext", ɵɵpureFunction2(2, _c0$N, ctx.row, ctx.column));
    } }, directives: [NgTemplateOutlet], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDataTableCell, [{
        type: Component,
        args: [{
                selector: 'novo-data-table-cell',
                template: ` <ng-container *ngTemplateOutlet="template; context: { $implicit: row, col: column }"></ng-container> `,
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: CdkColumnDef }, { type: ElementRef }, { type: Renderer2 }]; }, { role: [{
            type: HostBinding,
            args: ['attr.role']
        }], row: [{
            type: Input
        }], template: [{
            type: Input
        }], column: [{
            type: Input
        }], resized: [{
            type: Input
        }] }); })();

class NovoDataTableCheckboxCell extends CdkCell {
    constructor(columnDef, elementRef, renderer, dataTable, ref) {
        super(columnDef, elementRef);
        this.columnDef = columnDef;
        this.dataTable = dataTable;
        this.ref = ref;
        this.role = 'gridcell';
        this.checked = false;
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', `novo-checkbox-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, `novo-checkbox-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, 'novo-data-table-checkbox-cell');
        this.selectionSubscription = this.dataTable.state.selectionSource.subscribe(() => {
            this.checked = this.dataTable.isSelected(this.row);
            this.ref.markForCheck();
        });
        this.resetSubscription = this.dataTable.state.resetSource.subscribe(() => {
            this.checked = false;
            this.ref.markForCheck();
        });
    }
    ngOnInit() {
        this.checked = this.dataTable.isSelected(this.row);
    }
    onClick() {
        this.dataTable.selectRow(this.row);
    }
    ngOnDestroy() {
        if (this.selectionSubscription) {
            this.selectionSubscription.unsubscribe();
        }
        if (this.resetSubscription) {
            this.resetSubscription.unsubscribe();
        }
    }
}
NovoDataTableCheckboxCell.ɵfac = function NovoDataTableCheckboxCell_Factory(t) { return new (t || NovoDataTableCheckboxCell)(ɵɵdirectiveInject(CdkColumnDef), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(NovoDataTable), ɵɵdirectiveInject(ChangeDetectorRef)); };
NovoDataTableCheckboxCell.ɵcmp = ɵɵdefineComponent({ type: NovoDataTableCheckboxCell, selectors: [["novo-data-table-checkbox-cell"]], hostVars: 1, hostBindings: function NovoDataTableCheckboxCell_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵattribute("role", ctx.role);
    } }, inputs: { row: "row" }, features: [ɵɵInheritDefinitionFeature], decls: 4, vars: 5, consts: [[1, "data-table-checkbox", 3, "click"], ["type", "checkbox", 3, "checked"]], template: function NovoDataTableCheckboxCell_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "div", 0);
        ɵɵlistener("click", function NovoDataTableCheckboxCell_Template_div_click_0_listener() { return ctx.onClick(); });
        ɵɵelement(1, "input", 1);
        ɵɵelementStart(2, "label");
        ɵɵelement(3, "i");
        ɵɵelementEnd();
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵadvance(1);
        ɵɵproperty("checked", ctx.checked);
        ɵɵadvance(2);
        ɵɵclassProp("bhi-checkbox-empty", !ctx.checked)("bhi-checkbox-filled", ctx.checked);
    } }, encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDataTableCheckboxCell, [{
        type: Component,
        args: [{
                selector: 'novo-data-table-checkbox-cell',
                template: `
    <div class="data-table-checkbox" (click)="onClick()">
      <input type="checkbox" [checked]="checked" />
      <label>
        <i [class.bhi-checkbox-empty]="!checked" [class.bhi-checkbox-filled]="checked"></i>
      </label>
    </div>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: CdkColumnDef }, { type: ElementRef }, { type: Renderer2 }, { type: NovoDataTable }, { type: ChangeDetectorRef }]; }, { role: [{
            type: HostBinding,
            args: ['attr.role']
        }], row: [{
            type: Input
        }] }); })();

class NovoDataTableExpandCell extends CdkCell {
    constructor(columnDef, elementRef, renderer, dataTable, ref) {
        super(columnDef, elementRef);
        this.columnDef = columnDef;
        this.dataTable = dataTable;
        this.ref = ref;
        this.role = 'gridcell';
        this.expanded = false;
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', `novo-expand-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, `novo-expand-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, 'novo-data-table-expand-cell');
        this.expandSubscription = this.dataTable.state.expandSource.subscribe(() => {
            this.expanded = this.dataTable.isExpanded(this.row);
            this.ref.markForCheck();
        });
    }
    ngOnInit() {
        this.expanded = this.dataTable.isExpanded(this.row);
    }
    onClick() {
        this.dataTable.expandRow(this.row);
    }
    ngOnDestroy() {
        if (this.expandSubscription) {
            this.expandSubscription.unsubscribe();
        }
    }
}
NovoDataTableExpandCell.ɵfac = function NovoDataTableExpandCell_Factory(t) { return new (t || NovoDataTableExpandCell)(ɵɵdirectiveInject(CdkColumnDef), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(NovoDataTable), ɵɵdirectiveInject(ChangeDetectorRef)); };
NovoDataTableExpandCell.ɵcmp = ɵɵdefineComponent({ type: NovoDataTableExpandCell, selectors: [["novo-data-table-expand-cell"]], hostVars: 1, hostBindings: function NovoDataTableExpandCell_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵattribute("role", ctx.role);
    } }, inputs: { row: "row" }, features: [ɵɵInheritDefinitionFeature], decls: 1, vars: 2, consts: [["novo-data-table-expander", "true", 1, "bhi-next", "data-table-icon"]], template: function NovoDataTableExpandCell_Template(rf, ctx) { if (rf & 1) {
        ɵɵelement(0, "i", 0);
    } if (rf & 2) {
        ɵɵclassProp("expanded", ctx.expanded);
    } }, encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDataTableExpandCell, [{
        type: Component,
        args: [{
                selector: 'novo-data-table-expand-cell',
                template: ` <i class="bhi-next data-table-icon" novo-data-table-expander="true" [class.expanded]="expanded"></i> `,
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: CdkColumnDef }, { type: ElementRef }, { type: Renderer2 }, { type: NovoDataTable }, { type: ChangeDetectorRef }]; }, { role: [{
            type: HostBinding,
            args: ['attr.role']
        }], row: [{
            type: Input
        }] }); })();

function NovoDataTableClearButton_item_4_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "item", 5);
    ɵɵlistener("click", function NovoDataTableClearButton_item_4_Template_item_click_0_listener() { ɵɵrestoreView(_r4); const ctx_r3 = ɵɵnextContext(); return ctx_r3.clearSort(); });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r0.labels.clearSort);
} }
function NovoDataTableClearButton_item_5_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "item", 6);
    ɵɵlistener("click", function NovoDataTableClearButton_item_5_Template_item_click_0_listener() { ɵɵrestoreView(_r6); const ctx_r5 = ɵɵnextContext(); return ctx_r5.clearFilter(); });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r1.labels.clearFilter);
} }
function NovoDataTableClearButton_item_6_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "item", 7);
    ɵɵlistener("click", function NovoDataTableClearButton_item_6_Template_item_click_0_listener() { ɵɵrestoreView(_r8); const ctx_r7 = ɵɵnextContext(); return ctx_r7.clearAll(); });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r2.labels.clearAllNormalCase);
} }
class NovoDataTableClearButton {
    constructor(state, ref, labels) {
        this.state = state;
        this.ref = ref;
        this.labels = labels;
        this.sortClear = new EventEmitter();
        this.filterClear = new EventEmitter();
        this.allClear = new EventEmitter();
    }
    clearSort() {
        this.state.clearSort();
        this.sortClear.emit(true);
    }
    clearFilter() {
        this.state.clearFilter();
        this.filterClear.emit(true);
    }
    clearAll() {
        this.state.reset();
        this.allClear.emit(true);
        this.sortClear.emit(true);
        this.filterClear.emit(true);
    }
}
NovoDataTableClearButton.ɵfac = function NovoDataTableClearButton_Factory(t) { return new (t || NovoDataTableClearButton)(ɵɵdirectiveInject(DataTableState), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(NovoLabelService)); };
NovoDataTableClearButton.ɵcmp = ɵɵdefineComponent({ type: NovoDataTableClearButton, selectors: [["novo-data-table-clear-button"]], outputs: { sortClear: "sortClear", filterClear: "filterClear", allClear: "allClear" }, decls: 7, vars: 4, consts: [["side", "bottom-right", "data-automation-id", "novo-data-table-clear-dropdown", 1, "novo-data-table-clear-button"], ["type", "button", "theme", "primary", "color", "negative", "icon", "collapse", "data-automation-id", "novo-data-table-clear-dropdown-btn"], ["data-automation-id", "novo-data-table-clear-dropdown-clear-sort", 3, "click", 4, "ngIf"], ["data-automation-id", "novo-data-table-clear-dropdown-clear-filter", 3, "click", 4, "ngIf"], ["data-automation-id", "novo-data-table-clear-dropdown-clear-all", 3, "click", 4, "ngIf"], ["data-automation-id", "novo-data-table-clear-dropdown-clear-sort", 3, "click"], ["data-automation-id", "novo-data-table-clear-dropdown-clear-filter", 3, "click"], ["data-automation-id", "novo-data-table-clear-dropdown-clear-all", 3, "click"]], template: function NovoDataTableClearButton_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "novo-dropdown", 0);
        ɵɵelementStart(1, "button", 1);
        ɵɵtext(2);
        ɵɵelementEnd();
        ɵɵelementStart(3, "list");
        ɵɵtemplate(4, NovoDataTableClearButton_item_4_Template, 2, 1, "item", 2);
        ɵɵtemplate(5, NovoDataTableClearButton_item_5_Template, 2, 1, "item", 3);
        ɵɵtemplate(6, NovoDataTableClearButton_item_6_Template, 2, 1, "item", 4);
        ɵɵelementEnd();
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵadvance(2);
        ɵɵtextInterpolate1(" ", ctx.labels.clear, " ");
        ɵɵadvance(2);
        ɵɵproperty("ngIf", ctx.state.sort);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.state.filter);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.state.sort && ctx.state.filter);
    } }, directives: [NovoDropdownElement, NovoButtonElement, NovoDropdownListElement, NgIf, NovoItemElement], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDataTableClearButton, [{
        type: Component,
        args: [{
                selector: 'novo-data-table-clear-button',
                template: `
    <novo-dropdown side="bottom-right" class="novo-data-table-clear-button" data-automation-id="novo-data-table-clear-dropdown">
      <button type="button" theme="primary" color="negative" icon="collapse" data-automation-id="novo-data-table-clear-dropdown-btn">
        {{ labels.clear }}
      </button>
      <list>
        <item *ngIf="state.sort" (click)="clearSort()" data-automation-id="novo-data-table-clear-dropdown-clear-sort">{{
          labels.clearSort
        }}</item>
        <item *ngIf="state.filter" (click)="clearFilter()" data-automation-id="novo-data-table-clear-dropdown-clear-filter">{{
          labels.clearFilter
        }}</item>
        <item *ngIf="state.sort && state.filter" (click)="clearAll()" data-automation-id="novo-data-table-clear-dropdown-clear-all">{{
          labels.clearAllNormalCase
        }}</item>
      </list>
    </novo-dropdown>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: DataTableState }, { type: ChangeDetectorRef }, { type: NovoLabelService }]; }, { sortClear: [{
            type: Output
        }], filterClear: [{
            type: Output
        }], allClear: [{
            type: Output
        }] }); })();

class NovoDataTableExpandDirective {
    constructor(vcRef, state, dataTable) {
        this.vcRef = vcRef;
        this.state = state;
        this.dataTable = dataTable;
        this.shouldExpandAllRows = (targetId) => targetId === undefined;
        this.shouldExpandOneRow = (targetId) => targetId === this.row.id;
        this.subscription = this.state.expandSource.subscribe((targetId) => {
            if (this.shouldExpandAllRows(targetId) || this.shouldExpandOneRow(targetId)) {
                if (dataTable.isExpanded(this.row)) {
                    this.render();
                }
                else {
                    this.clear();
                }
            }
        });
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    onClick(event) {
        if (event.target.hasAttribute('novo-data-table-expander')) {
            Helpers.swallowEvent(event);
            this.dataTable.expandRow(this.row);
        }
    }
    clear() {
        this.vcRef.clear();
    }
    render() {
        this.vcRef.clear();
        if (this.template && this.row) {
            this.vcRef.createEmbeddedView(this.template, { $implicit: this.row });
        }
    }
}
NovoDataTableExpandDirective.ɵfac = function NovoDataTableExpandDirective_Factory(t) { return new (t || NovoDataTableExpandDirective)(ɵɵdirectiveInject(ViewContainerRef), ɵɵdirectiveInject(DataTableState), ɵɵdirectiveInject(NovoDataTable)); };
NovoDataTableExpandDirective.ɵdir = ɵɵdefineDirective({ type: NovoDataTableExpandDirective, selectors: [["", "novoDataTableExpand", ""]], hostBindings: function NovoDataTableExpandDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵɵlistener("click", function NovoDataTableExpandDirective_click_HostBindingHandler($event) { return ctx.onClick($event); });
    } }, inputs: { row: "row", template: ["novoDataTableExpand", "template"] } });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDataTableExpandDirective, [{
        type: Directive,
        args: [{
                selector: '[novoDataTableExpand]',
            }]
    }], function () { return [{ type: ViewContainerRef }, { type: DataTableState }, { type: NovoDataTable }]; }, { row: [{
            type: Input
        }], template: [{
            type: Input,
            args: ['novoDataTableExpand']
        }], onClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }] }); })();

// NG2
class DateFormatService {
    constructor(labels) {
        this.labels = labels;
    }
    getTimeMask(militaryTime) {
        let mask = [/\d/, /\d/, /:/, /\d/, /\d/];
        let timeFormatArray = [];
        const timeFormat = this.labels.timeFormatPlaceholderAM.toLowerCase();
        if (militaryTime) {
            return mask;
        }
        else {
            timeFormatArray = timeFormat.split('hh:mm');
            if (timeFormatArray && timeFormatArray.length) {
                mask = [];
                for (const timeFormatPart of timeFormatArray) {
                    if (timeFormatPart === '') {
                        mask = mask.concat([/\d/, /\d|:/, /:|\d/, /\d|\w|\s/, /\d|\s|\w/]);
                    }
                    else if (timeFormatPart.length) {
                        for (let i = 0; i < timeFormatPart.length; i++) {
                            mask.push(/\s|\w|\d|\./);
                        }
                    }
                }
            }
        }
        return mask;
    }
    getDateMask() {
        return [/\d/, /\d|\/|\.|\-/, /\/|\.|\-|\d/, /\d|\/|\.|\-/, /\d|\/|\.|\-/, /\d|\/|\.|\-/, /\d|\/|\.|\-/, /\d|\/|\.|\-/, /\d/, /\d/];
    }
    getDateTimeMask(militaryTime = false) {
        return [...this.getDateMask(), /\,?/, /\s/, ...this.getTimeMask(militaryTime)];
    }
    getTimePlaceHolder(militaryTime) {
        if (militaryTime) {
            return this.labels.timeFormatPlaceholder24Hour;
        }
        return this.labels.timeFormatPlaceholderAM;
    }
    parseDateString(dateString) {
        let dateFormat = this.labels.dateFormatString();
        const dateFormatRegex = /(\w+)[\/|\.|\-](\w+)[\/|\.|\-](\w+)/gi;
        const dateValueRegex = /(\d+)[\/|\.|\-](\d+)[\/|\.|\-](\d+)/gi;
        let dateFormatTokens;
        let dateValueTokens;
        let year;
        let month;
        let day;
        let date = new Date();
        if (Helpers.isEmpty(dateFormat)) {
            // Default to MM/dd/yyyy
            dateFormat = 'mm/dd/yyyy';
        }
        else {
            dateFormat = dateFormat.toLowerCase();
        }
        dateFormatTokens = dateFormatRegex.exec(dateFormat);
        dateValueTokens = dateValueRegex.exec(dateString);
        if (dateFormatTokens && dateFormatTokens.length === 4 && dateValueTokens && dateValueTokens.length === 4) {
            for (let i = 1; i < 4; i++) {
                if (dateFormatTokens[i].includes('m')) {
                    month = parseInt(dateValueTokens[i], 10) - 1;
                }
                else if (dateFormatTokens[i].includes('d')) {
                    day = parseInt(dateValueTokens[i], 10);
                }
                else {
                    year = parseInt(dateValueTokens[i], 10);
                }
            }
            if (month >= 0 && month <= 11 && year > 1900 && day > 0 && day <= 31) {
                date = new Date(year, month, day);
            }
        }
        else if (dateFormatTokens && dateFormatTokens.length === 4 && dateString.length >= 1) {
            const twoTokens = /\d{1,4}(\/|\.|\-)(\d{1,2})/.exec(dateString);
            const oneToken = /^(\d{1,4})$/.exec(dateString);
            const delimiter = /\w+(\/|\.|\-)\w+[\/|\.|\-]\w+/gi.exec(dateFormat);
            const dateStringWithDelimiter = dateString[dateString.length - 1].match(/\/|\.|\-/);
            if (twoTokens && twoTokens.length === 3 && this.isValidDatePart(twoTokens[2], dateFormatTokens[2]) && !dateStringWithDelimiter) {
                dateString = `${dateString}${delimiter[1]}`;
            }
            else if (oneToken && oneToken.length === 2 && this.isValidDatePart(oneToken[1], dateFormatTokens[1]) && !dateStringWithDelimiter) {
                dateString = `${dateString}${delimiter[1]}`;
            }
        }
        return [date, dateString];
    }
    parseTimeString(timeString, militaryTime) {
        const value = new Date();
        let timeStringParts;
        let amFormat = this.labels.timeFormatAM;
        let pmFormat = this.labels.timeFormatPM;
        if (!(timeString && timeString.includes(':'))) {
            return [value, timeString];
        }
        if (!militaryTime && amFormat && pmFormat) {
            let splits = [];
            let pm = false;
            amFormat = this.labels.timeFormatAM.toLowerCase();
            pmFormat = this.labels.timeFormatPM.toLowerCase();
            timeString = timeString.toLowerCase();
            if (timeString.includes(amFormat)) {
                splits = timeString.split(amFormat);
            }
            else if (timeString.includes(pmFormat)) {
                splits = timeString.split(pmFormat);
                pm = true;
            }
            if (splits && splits.length) {
                for (const item of splits) {
                    if (item && item.trim().includes(':')) {
                        timeStringParts = item.trim().split(':');
                    }
                }
            }
            if (timeStringParts && timeStringParts.length && timeStringParts.length === 2) {
                let hours = parseInt(timeStringParts[0], 10);
                if (hours === 12 && pm) {
                    hours = 12;
                }
                else if (pm) {
                    hours = hours + 12;
                }
                else if (hours === 12) {
                    hours = 0;
                }
                value.setHours(hours);
                value.setMinutes(parseInt(timeStringParts[1], 10));
                value.setSeconds(0);
            }
        }
        else {
            timeStringParts = /(\d{1,2}):(\d{2})/.exec(timeString);
            if (timeStringParts && timeStringParts.length && timeStringParts.length === 3) {
                value.setHours(parseInt(timeStringParts[1], 10));
                value.setMinutes(parseInt(timeStringParts[2], 10));
                value.setSeconds(0);
            }
        }
        return [value, timeString];
    }
    parseString(dateTimeString, militaryTime, type) {
        switch (type) {
            case 'datetime':
                const str = dateTimeString.replace(/-/g, '/');
                const parts = str.split(' ');
                const [dt, dts] = this.parseDateString(parts[0]);
                if (parts.length > 1) {
                    const [tm, tms] = this.parseTimeString(parts[1], militaryTime);
                    return [new Date(dt.setHours(tm.getHours(), tm.getMinutes())), `${dts} ${tms}`];
                }
                return [dt, dts];
            case 'date':
                return this.parseDateString(dateTimeString);
            case 'time':
                return this.parseTimeString(dateTimeString, militaryTime);
            default:
                return;
        }
    }
    isValidDatePart(value, format) {
        const datePart = parseInt(value, 10);
        if (format.includes('m') && (datePart >= 2 || value.length === 2)) {
            return true;
        }
        else if (format.includes('d') && (datePart >= 4 || value.length === 2)) {
            return true;
        }
        else if (format.includes('y') && datePart >= 1000) {
            return true;
        }
        return false;
    }
}
DateFormatService.ɵfac = function DateFormatService_Factory(t) { return new (t || DateFormatService)(ɵɵinject(NovoLabelService)); };
DateFormatService.ɵprov = ɵɵdefineInjectable({ token: DateFormatService, factory: DateFormatService.ɵfac });
/*@__PURE__*/ (function () { ɵsetClassMetadata(DateFormatService, [{
        type: Injectable
    }], function () { return [{ type: NovoLabelService }]; }, null); })();

// NG
function NovoDatePickerInputElement_i_2_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "i", 6);
    ɵɵlistener("click", function NovoDatePickerInputElement_i_2_Template_i_click_0_listener() { ɵɵrestoreView(_r4); const ctx_r3 = ɵɵnextContext(); return ctx_r3.openPanel(); });
    ɵɵelementEnd();
} }
function NovoDatePickerInputElement_i_3_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "i", 7);
    ɵɵlistener("click", function NovoDatePickerInputElement_i_3_Template_i_click_0_listener() { ɵɵrestoreView(_r6); const ctx_r5 = ɵɵnextContext(); return ctx_r5.clearValue(); });
    ɵɵelementEnd();
} }
// Value accessor for the component (supports ngModel)
const DATE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoDatePickerInputElement),
    multi: true,
};
class NovoDatePickerInputElement {
    constructor(element, labels, _changeDetectorRef, dateFormatService) {
        this.element = element;
        this.labels = labels;
        this._changeDetectorRef = _changeDetectorRef;
        this.dateFormatService = dateFormatService;
        this.formattedValue = '';
        /** View -> model callback called when value changes */
        this._onChange = () => { };
        /** View -> model callback called when autocomplete has been touched */
        this._onTouched = () => { };
        this.textMaskEnabled = true;
        this.allowInvalidDate = false;
        this.disabled = false;
        this.weekStart = 0;
        this.blurEvent = new EventEmitter();
        this.focusEvent = new EventEmitter();
        this.placeholder = this.labels.dateFormatString().toUpperCase() || this.labels.dateFormatPlaceholder;
    }
    ngOnInit() {
        this.userDefinedFormat = this.format ? !this.format.match(/^(DD\/MM\/YYYY|MM\/DD\/YYYY)$/g) : false;
        if (!this.userDefinedFormat && this.textMaskEnabled && !this.allowInvalidDate) {
            this.maskOptions = this.maskOptions || {
                mask: this.dateFormatService.getDateMask(),
                pipe: createAutoCorrectedDatePipe(this.format || this.labels.dateFormatString().toLowerCase()),
                keepCharPositions: false,
                guide: true,
            };
        }
        else {
            this.maskOptions = { mask: false };
        }
    }
    /** BEGIN: Convenient Panel Methods. */
    openPanel() {
        if (!this.disabled) {
            this.overlay.openPanel();
        }
    }
    closePanel() {
        this.overlay.closePanel();
    }
    get panelOpen() {
        return this.overlay && this.overlay.panelOpen;
    }
    /** END: Convenient Panel Methods. */
    _handleKeydown(event) {
        if ((event.key === "Escape" /* Escape */ || event.key === "Enter" /* Enter */ || event.key === "Tab" /* Tab */) && this.panelOpen) {
            this._handleEvent(event, true);
            this.closePanel();
            event.stopPropagation();
        }
    }
    _handleInput(event) {
        if (document.activeElement === event.target) {
            this._handleEvent(event, false);
        }
    }
    _handleBlur(event) {
        this.blurEvent.emit(event);
    }
    _handleFocus(event) {
        this.openPanel();
        this.focusEvent.emit(event);
    }
    _handleEvent(event, blur) {
        const value = event.target.value;
        if (value === '') {
            this.clearValue();
            this.closePanel();
        }
        else {
            this.formatDate(value, blur);
            this.openPanel();
        }
    }
    formatDate(value, blur) {
        try {
            const [dateTimeValue, formatted] = this.dateFormatService.parseString(value, false, 'date');
            if (!isNaN(dateTimeValue.getUTCDate())) {
                const dt = new Date(dateTimeValue);
                this.dispatchOnChange(dt, blur);
            }
            else {
                this.dispatchOnChange(null, blur);
            }
        }
        catch (err) { }
    }
    writeValue(value) {
        Promise.resolve(null).then(() => this._setTriggerValue(value));
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    setDisabledState(disabled) {
        this.disabled = disabled;
    }
    dispatchOnChange(newValue, blur = false, skip = false) {
        if (newValue !== this.value) {
            this._onChange(newValue);
            if (blur) {
                !skip && this.writeValue(newValue);
            }
            else {
                !skip && this._setCalendarValue(newValue);
            }
        }
    }
    _setTriggerValue(value) {
        this._setCalendarValue(value);
        this._setFormValue(value);
        this._changeDetectorRef.markForCheck();
    }
    _setCalendarValue(value) {
        if (value instanceof Date && this.value instanceof Date) {
            value = new Date(value.setHours(this.value.getHours(), this.value.getMinutes()));
        }
        this.value = value;
    }
    _setFormValue(value) {
        if (this.value) {
            const test = this.formatDateValue(this.value);
            this.formattedValue = test;
        }
    }
    /**
     * This method closes the panel, and if a value is specified, also sets the associated
     * control to that value. It will also mark the control as dirty if this interaction
     * stemmed from the user.
     */
    setValueAndClose(event) {
        if (event && event.date) {
            this.dispatchOnChange(event.date, true);
        }
        this.closePanel();
    }
    /**
     * Clear any previous selected option and emit a selection change event for this option
     */
    clearValue() {
        this.formattedValue = '';
        this.dispatchOnChange(null);
    }
    formatDateValue(value) {
        const originalValue = value;
        try {
            if (!value) {
                return '';
            }
            if (this.userDefinedFormat && isValid(value)) {
                return format(value, this.format);
            }
            if (!(value instanceof Date)) {
                value = new Date(value);
            }
            if (!(isNaN(value.valueOf()) && this.allowInvalidDate)) {
                return this.labels.formatDateWithFormat(value, {
                    month: '2-digit',
                    day: '2-digit',
                    year: 'numeric',
                });
            }
            else {
                return originalValue;
            }
        }
        catch (err) {
            return '';
        }
    }
    get hasValue() {
        return !Helpers.isEmpty(this.value);
    }
}
NovoDatePickerInputElement.ɵfac = function NovoDatePickerInputElement_Factory(t) { return new (t || NovoDatePickerInputElement)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(DateFormatService)); };
NovoDatePickerInputElement.ɵcmp = ɵɵdefineComponent({ type: NovoDatePickerInputElement, selectors: [["novo-date-picker-input"]], viewQuery: function NovoDatePickerInputElement_Query(rf, ctx) { if (rf & 1) {
        ɵɵviewQuery(NovoOverlayTemplateComponent, true);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.overlay = _t.first);
    } }, hostVars: 2, hostBindings: function NovoDatePickerInputElement_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵclassProp("disabled", ctx.disabled);
    } }, inputs: { name: "name", start: "start", end: "end", placeholder: "placeholder", maskOptions: "maskOptions", format: "format", textMaskEnabled: "textMaskEnabled", allowInvalidDate: "allowInvalidDate", disabled: "disabled", weekStart: "weekStart" }, outputs: { blurEvent: "blurEvent", focusEvent: "focusEvent" }, features: [ɵɵProvidersFeature([DATE_VALUE_ACCESSOR])], decls: 6, vars: 12, consts: [["type", "text", "data-automation-id", "date-input", 3, "name", "ngModel", "textMask", "placeholder", "disabled", "ngModelChange", "focus", "keydown", "input", "blur"], ["input", ""], ["class", "bhi-calendar", 3, "click", 4, "ngIf"], ["class", "bhi-times", 3, "click", 4, "ngIf"], ["position", "above-below", 3, "parent"], ["inline", "true", 3, "start", "end", "ngModel", "weekStart", "onSelect"], [1, "bhi-calendar", 3, "click"], [1, "bhi-times", 3, "click"]], template: function NovoDatePickerInputElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "input", 0, 1);
        ɵɵlistener("ngModelChange", function NovoDatePickerInputElement_Template_input_ngModelChange_0_listener($event) { return ctx.formattedValue = $event; })("focus", function NovoDatePickerInputElement_Template_input_focus_0_listener($event) { return ctx._handleFocus($event); })("keydown", function NovoDatePickerInputElement_Template_input_keydown_0_listener($event) { return ctx._handleKeydown($event); })("input", function NovoDatePickerInputElement_Template_input_input_0_listener($event) { return ctx._handleInput($event); })("blur", function NovoDatePickerInputElement_Template_input_blur_0_listener($event) { return ctx._handleBlur($event); });
        ɵɵelementEnd();
        ɵɵtemplate(2, NovoDatePickerInputElement_i_2_Template, 1, 0, "i", 2);
        ɵɵtemplate(3, NovoDatePickerInputElement_i_3_Template, 1, 0, "i", 3);
        ɵɵelementStart(4, "novo-overlay-template", 4);
        ɵɵelementStart(5, "novo-date-picker", 5);
        ɵɵlistener("onSelect", function NovoDatePickerInputElement_Template_novo_date_picker_onSelect_5_listener($event) { return ctx.setValueAndClose($event); });
        ɵɵelementEnd();
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵproperty("name", ctx.name)("ngModel", ctx.formattedValue)("textMask", ctx.maskOptions)("placeholder", ctx.placeholder)("disabled", ctx.disabled);
        ɵɵadvance(2);
        ɵɵproperty("ngIf", !ctx.hasValue);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.hasValue);
        ɵɵadvance(1);
        ɵɵproperty("parent", ctx.element);
        ɵɵadvance(1);
        ɵɵproperty("start", ctx.start)("end", ctx.end)("ngModel", ctx.value)("weekStart", ctx.weekStart);
    } }, directives: [DefaultValueAccessor, NgControlStatus, NgModel, MaskedInputDirective, NgIf, NovoOverlayTemplateComponent, NovoDatePickerElement], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDatePickerInputElement, [{
        type: Component,
        args: [{
                selector: 'novo-date-picker-input',
                providers: [DATE_VALUE_ACCESSOR],
                template: `
    <input
      type="text"
      [name]="name"
      [(ngModel)]="formattedValue"
      [textMask]="maskOptions"
      [placeholder]="placeholder"
      (focus)="_handleFocus($event)"
      (keydown)="_handleKeydown($event)"
      (input)="_handleInput($event)"
      (blur)="_handleBlur($event)"
      #input
      data-automation-id="date-input"
      [disabled]="disabled"
    />
    <i *ngIf="!hasValue" (click)="openPanel()" class="bhi-calendar"></i>
    <i *ngIf="hasValue" (click)="clearValue()" class="bhi-times"></i>
    <novo-overlay-template [parent]="element" position="above-below">
      <novo-date-picker
        [start]="start"
        [end]="end"
        inline="true"
        (onSelect)="setValueAndClose($event)"
        [ngModel]="value"
        [weekStart]="weekStart"
      ></novo-date-picker>
    </novo-overlay-template>
  `,
            }]
    }], function () { return [{ type: ElementRef }, { type: NovoLabelService }, { type: ChangeDetectorRef }, { type: DateFormatService }]; }, { name: [{
            type: Input
        }], start: [{
            type: Input
        }], end: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], maskOptions: [{
            type: Input
        }], format: [{
            type: Input
        }], textMaskEnabled: [{
            type: Input
        }], allowInvalidDate: [{
            type: Input
        }], disabled: [{
            type: HostBinding,
            args: ['class.disabled']
        }, {
            type: Input
        }], weekStart: [{
            type: Input
        }], blurEvent: [{
            type: Output
        }], focusEvent: [{
            type: Output
        }], overlay: [{
            type: ViewChild,
            args: [NovoOverlayTemplateComponent]
        }] }); })();

// NG
function NovoDateRangeInputElement_novo_icon_3_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-icon", 10);
    ɵɵlistener("click", function NovoDateRangeInputElement_novo_icon_3_Template_novo_icon_click_0_listener() { ɵɵrestoreView(_r7); const ctx_r6 = ɵɵnextContext(); return ctx_r6.openPanel(); });
    ɵɵtext(1, "calendar");
    ɵɵelementEnd();
} }
function NovoDateRangeInputElement_novo_icon_4_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-icon", 11);
    ɵɵlistener("click", function NovoDateRangeInputElement_novo_icon_4_Template_novo_icon_click_0_listener() { ɵɵrestoreView(_r9); const ctx_r8 = ɵɵnextContext(); return ctx_r8.clearStartValue(); });
    ɵɵtext(1, "times");
    ɵɵelementEnd();
} }
function NovoDateRangeInputElement_novo_icon_10_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-icon", 10);
    ɵɵlistener("click", function NovoDateRangeInputElement_novo_icon_10_Template_novo_icon_click_0_listener() { ɵɵrestoreView(_r11); const ctx_r10 = ɵɵnextContext(); return ctx_r10.openPanel(); });
    ɵɵtext(1, "calendar");
    ɵɵelementEnd();
} }
function NovoDateRangeInputElement_novo_icon_11_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-icon", 11);
    ɵɵlistener("click", function NovoDateRangeInputElement_novo_icon_11_Template_novo_icon_click_0_listener() { ɵɵrestoreView(_r13); const ctx_r12 = ɵɵnextContext(); return ctx_r12.clearEndValue(); });
    ɵɵtext(1, "times");
    ɵɵelementEnd();
} }
// Value accessor for the component (supports ngModel)
const DATE_VALUE_ACCESSOR$1 = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoDateRangeInputElement),
    multi: true,
};
class NovoDateRangeInputElement {
    constructor(element, labels, cdr, dateFormatService) {
        this.element = element;
        this.labels = labels;
        this.cdr = cdr;
        this.dateFormatService = dateFormatService;
        this.formattedStartDate = '';
        this.formattedEndDate = '';
        this.weekRangeSelect = false;
        this.textMaskEnabled = true;
        this.allowInvalidDate = false;
        this.weekStart = 0;
        this.blurEvent = new EventEmitter();
        this.focusEvent = new EventEmitter();
        this.change = new EventEmitter();
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this._value = { startDate: null, endDate: null };
        this._disabled = false;
        this.onChangeCallback = (_) => {
            // placeholder
        };
        this.onTouchedCallback = () => {
            // placeholder
        };
        this.placeholder = this.labels.dateFormatString().toUpperCase() || this.labels.dateFormatPlaceholder;
    }
    get value() {
        return this._value;
    }
    set value(value) {
        if (this.value !== value) {
            this._value = value;
            this._setFormValue(value);
            this.onChangeCallback(this._value);
        }
    }
    // Disabled State
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = !!value;
    }
    ngOnInit() {
        this.userDefinedFormat = this.format ? !this.format.match(/^(DD\/MM\/YYYY|MM\/DD\/YYYY)$/g) : false;
        if (!this.userDefinedFormat && this.textMaskEnabled && !this.allowInvalidDate) {
            this.maskOptions = this.maskOptions || {
                mask: this.dateFormatService.getDateMask(),
                pipe: createAutoCorrectedDatePipe(this.format || this.labels.dateFormatString().toLowerCase()),
                keepCharPositions: false,
                guide: true,
            };
        }
        else {
            this.maskOptions = { mask: false };
        }
    }
    /** BEGIN: Convenient Panel Methods. */
    openPanel() {
        if (!this.disabled) {
            this.overlay.openPanel();
        }
    }
    closePanel() {
        this.overlay && this.overlay.closePanel();
    }
    get panelOpen() {
        return this.overlay && this.overlay.panelOpen;
    }
    /** END: Convenient Panel Methods. */
    _handleKeydown(event) {
        if ((event.key === "Escape" /* Escape */ || event.key === "Enter" /* Enter */ || event.key === "Tab" /* Tab */) && this.panelOpen) {
            this.closePanel();
            event.stopPropagation();
        }
    }
    _handleBlur(event) {
        this.blurEvent.emit(event);
    }
    _handleFocus(event) {
        this.openPanel();
        this.focusEvent.emit(event);
    }
    formatDate(value) {
        try {
            const [dateTimeValue] = this.dateFormatService.parseString(value, false, 'date');
            return new Date(dateTimeValue);
        }
        catch (err) {
            return null;
        }
    }
    writeValue(value) {
        this.value = value;
        this.cdr.markForCheck();
    }
    setDisabledState(disabled) {
        this.disabled = disabled;
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    _onStartInputChange(event) {
        this._handleKeydown(event);
        if (document.activeElement === event.target) {
            event.stopPropagation();
            const startDate = this.formatDate(event.target.value);
            if (startDate) {
                this.value = Object.assign(Object.assign({}, this.value), { startDate });
                this.change.emit(this.value);
            }
        }
    }
    _onEndInputChange(event) {
        this._handleKeydown(event);
        if (document.activeElement === event.target) {
            event.stopPropagation();
            const endDate = this.formatDate(event.target.value);
            if (endDate) {
                this.value = Object.assign(Object.assign({}, this.value), { endDate });
                this.change.emit(this.value);
            }
        }
    }
    _setFormValue(value) {
        if (this.value) {
            this.formattedStartDate = this.formatDateValue(this.value.startDate);
            this.formattedEndDate = this.formatDateValue(this.value.endDate);
        }
    }
    /**
     * This method closes the panel, and if a value is specified, also sets the associated
     * control to that value. It will also mark the control as dirty if this interaction
     * stemmed from the user.
     */
    setValueAndClose(event) {
        if (event && event.startDate && event.endDate) {
            const startDate = event.startDate.date;
            const endDate = event.endDate.date;
            this.value = { startDate, endDate };
            this.change.emit(this.value);
        }
        this.closePanel();
    }
    /**
     * Clear any previous selected option and emit a selection change event for this option
     */
    clearStartValue() {
        this.formattedStartDate = '';
        this.value = Object.assign(Object.assign({}, this.value), { startDate: null });
        this.change.emit(this.value);
    }
    clearEndValue() {
        this.formattedEndDate = '';
        this.value = Object.assign(Object.assign({}, this.value), { endDate: null });
        this.change.emit(this.value);
    }
    formatDateValue(value) {
        const originalValue = value;
        try {
            if (!value) {
                return '';
            }
            if (this.userDefinedFormat && isValid(value)) {
                return format(value, this.format);
            }
            if (!(value instanceof Date)) {
                value = new Date(value);
            }
            if (!(isNaN(value.valueOf()) && this.allowInvalidDate)) {
                return this.labels.formatDateWithFormat(value, {
                    month: '2-digit',
                    day: '2-digit',
                    year: 'numeric',
                });
            }
            else {
                return originalValue;
            }
        }
        catch (err) {
            return '';
        }
    }
    get hasStartValue() {
        var _a;
        return !Helpers.isEmpty((_a = this.value) === null || _a === void 0 ? void 0 : _a.startDate);
    }
    get hasEndValue() {
        var _a;
        return !Helpers.isEmpty((_a = this.value) === null || _a === void 0 ? void 0 : _a.endDate);
    }
}
NovoDateRangeInputElement.ɵfac = function NovoDateRangeInputElement_Factory(t) { return new (t || NovoDateRangeInputElement)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(DateFormatService)); };
NovoDateRangeInputElement.ɵcmp = ɵɵdefineComponent({ type: NovoDateRangeInputElement, selectors: [["novo-date-range-input"]], viewQuery: function NovoDateRangeInputElement_Query(rf, ctx) { if (rf & 1) {
        ɵɵviewQuery(NovoOverlayTemplateComponent, true);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.overlay = _t.first);
    } }, hostVars: 2, hostBindings: function NovoDateRangeInputElement_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵclassProp("disabled", ctx.disabled);
    } }, inputs: { name: "name", start: "start", end: "end", weekRangeSelect: "weekRangeSelect", placeholder: "placeholder", maskOptions: "maskOptions", format: "format", textMaskEnabled: "textMaskEnabled", allowInvalidDate: "allowInvalidDate", weekStart: "weekStart", value: "value", disabled: "disabled" }, outputs: { blurEvent: "blurEvent", focusEvent: "focusEvent", change: "change", blur: "blur", focus: "focus" }, features: [ɵɵProvidersFeature([DATE_VALUE_ACCESSOR$1])], decls: 14, vars: 20, consts: [[1, "date-range-input-container"], ["type", "text", "data-automation-id", "date-range-input-start", 3, "name", "ngModel", "textMask", "placeholder", "disabled", "ngModelChange", "keydown", "input", "focus", "blur"], ["startDate", ""], [3, "click", 4, "ngIf"], ["size", "small", 3, "click", 4, "ngIf"], [1, "date-range-input-divider"], ["type", "text", "data-automation-id", "date-range-input-end", 3, "name", "ngModel", "textMask", "placeholder", "disabled", "ngModelChange", "keydown", "input", "focus", "blur"], ["endDate", ""], ["position", "above-below", 3, "parent"], ["range", "true", "inline", "true", 3, "start", "end", "weekRangeSelect", "ngModel", "weekStart", "onSelect"], [3, "click"], ["size", "small", 3, "click"]], template: function NovoDateRangeInputElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "div", 0);
        ɵɵelementStart(1, "input", 1, 2);
        ɵɵlistener("ngModelChange", function NovoDateRangeInputElement_Template_input_ngModelChange_1_listener($event) { return ctx.formattedStartDate = $event; })("keydown", function NovoDateRangeInputElement_Template_input_keydown_1_listener($event) { return ctx._onStartInputChange($event); })("input", function NovoDateRangeInputElement_Template_input_input_1_listener($event) { return ctx._onStartInputChange($event); })("focus", function NovoDateRangeInputElement_Template_input_focus_1_listener($event) { return ctx._handleFocus($event); })("blur", function NovoDateRangeInputElement_Template_input_blur_1_listener($event) { return ctx._handleBlur($event); });
        ɵɵelementEnd();
        ɵɵtemplate(3, NovoDateRangeInputElement_novo_icon_3_Template, 2, 0, "novo-icon", 3);
        ɵɵtemplate(4, NovoDateRangeInputElement_novo_icon_4_Template, 2, 0, "novo-icon", 4);
        ɵɵelementEnd();
        ɵɵelementStart(5, "div", 5);
        ɵɵtext(6, "-");
        ɵɵelementEnd();
        ɵɵelementStart(7, "div", 0);
        ɵɵelementStart(8, "input", 6, 7);
        ɵɵlistener("ngModelChange", function NovoDateRangeInputElement_Template_input_ngModelChange_8_listener($event) { return ctx.formattedEndDate = $event; })("keydown", function NovoDateRangeInputElement_Template_input_keydown_8_listener($event) { return ctx._onEndInputChange($event); })("input", function NovoDateRangeInputElement_Template_input_input_8_listener($event) { return ctx._onEndInputChange($event); })("focus", function NovoDateRangeInputElement_Template_input_focus_8_listener($event) { return ctx._handleFocus($event); })("blur", function NovoDateRangeInputElement_Template_input_blur_8_listener($event) { return ctx._handleBlur($event); });
        ɵɵelementEnd();
        ɵɵtemplate(10, NovoDateRangeInputElement_novo_icon_10_Template, 2, 0, "novo-icon", 3);
        ɵɵtemplate(11, NovoDateRangeInputElement_novo_icon_11_Template, 2, 0, "novo-icon", 4);
        ɵɵelementEnd();
        ɵɵelementStart(12, "novo-overlay-template", 8);
        ɵɵelementStart(13, "novo-date-picker", 9);
        ɵɵlistener("onSelect", function NovoDateRangeInputElement_Template_novo_date_picker_onSelect_13_listener($event) { return ctx.setValueAndClose($event); });
        ɵɵelementEnd();
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵadvance(1);
        ɵɵproperty("name", ctx.name)("ngModel", ctx.formattedStartDate)("textMask", ctx.maskOptions)("placeholder", ctx.placeholder)("disabled", ctx.disabled);
        ɵɵadvance(2);
        ɵɵproperty("ngIf", !ctx.hasStartValue);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.hasStartValue);
        ɵɵadvance(4);
        ɵɵproperty("name", ctx.name)("ngModel", ctx.formattedEndDate)("textMask", ctx.maskOptions)("placeholder", ctx.placeholder)("disabled", ctx.disabled);
        ɵɵadvance(2);
        ɵɵproperty("ngIf", !ctx.hasEndValue);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.hasEndValue);
        ɵɵadvance(1);
        ɵɵproperty("parent", ctx.element);
        ɵɵadvance(1);
        ɵɵproperty("start", ctx.start)("end", ctx.end)("weekRangeSelect", ctx.weekRangeSelect)("ngModel", ctx.value)("weekStart", ctx.weekStart);
    } }, directives: [DefaultValueAccessor, NgControlStatus, NgModel, MaskedInputDirective, NgIf, NovoOverlayTemplateComponent, NovoDatePickerElement, NovoIconComponent], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDateRangeInputElement, [{
        type: Component,
        args: [{
                selector: 'novo-date-range-input',
                providers: [DATE_VALUE_ACCESSOR$1],
                template: `
    <div class="date-range-input-container">
      <input
        type="text"
        [name]="name"
        [(ngModel)]="formattedStartDate"
        [textMask]="maskOptions"
        [placeholder]="placeholder"
        (keydown)="_onStartInputChange($event)"
        (input)="_onStartInputChange($event)"
        (focus)="_handleFocus($event)"
        (blur)="_handleBlur($event)"
        #startDate
        data-automation-id="date-range-input-start"
        [disabled]="disabled"
      />
      <novo-icon *ngIf="!hasStartValue" (click)="openPanel()">calendar</novo-icon>
      <novo-icon *ngIf="hasStartValue" size="small" (click)="clearStartValue()">times</novo-icon>
    </div>
    <div class="date-range-input-divider">-</div>
    <div class="date-range-input-container">
      <input
        type="text"
        [name]="name"
        [(ngModel)]="formattedEndDate"
        [textMask]="maskOptions"
        [placeholder]="placeholder"
        (keydown)="_onEndInputChange($event)"
        (input)="_onEndInputChange($event)"
        (focus)="_handleFocus($event)"
        (blur)="_handleBlur($event)"
        #endDate
        data-automation-id="date-range-input-end"
        [disabled]="disabled"
      />
      <novo-icon *ngIf="!hasEndValue" (click)="openPanel()">calendar</novo-icon>
      <novo-icon *ngIf="hasEndValue" size="small" (click)="clearEndValue()">times</novo-icon>
    </div>
    <novo-overlay-template [parent]="element" position="above-below">
      <novo-date-picker
        [start]="start"
        [end]="end"
        [weekRangeSelect]="weekRangeSelect"
        range="true"
        inline="true"
        (onSelect)="setValueAndClose($event)"
        [ngModel]="value"
        [weekStart]="weekStart"
      ></novo-date-picker>
    </novo-overlay-template>
  `,
            }]
    }], function () { return [{ type: ElementRef }, { type: NovoLabelService }, { type: ChangeDetectorRef }, { type: DateFormatService }]; }, { name: [{
            type: Input
        }], start: [{
            type: Input
        }], end: [{
            type: Input
        }], weekRangeSelect: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], maskOptions: [{
            type: Input
        }], format: [{
            type: Input
        }], textMaskEnabled: [{
            type: Input
        }], allowInvalidDate: [{
            type: Input
        }], weekStart: [{
            type: Input
        }], blurEvent: [{
            type: Output
        }], focusEvent: [{
            type: Output
        }], overlay: [{
            type: ViewChild,
            args: [NovoOverlayTemplateComponent]
        }], change: [{
            type: Output
        }], blur: [{
            type: Output
        }], focus: [{
            type: Output
        }], value: [{
            type: Input
        }], disabled: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['class.disabled']
        }] }); })();

// NG
function NovoMultiDateInputElement_novo_chip_0_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-chip", 7);
    ɵɵlistener("removed", function NovoMultiDateInputElement_novo_chip_0_Template_novo_chip_removed_0_listener($event) { ɵɵrestoreView(_r5); const date_r3 = ctx.$implicit; const ctx_r4 = ɵɵnextContext(); return ctx_r4.remove($event, date_r3); });
    ɵɵtext(1);
    ɵɵpipe(2, "date");
    ɵɵelementStart(3, "novo-icon", 8);
    ɵɵtext(4, "close");
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const date_r3 = ctx.$implicit;
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ɵɵpipeBind2(2, 1, date_r3, ctx_r0.format), " ");
} }
function NovoMultiDateInputElement_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 9);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r1.placeholder);
} }
function NovoMultiDateInputElement_label_6_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "label", 10);
    ɵɵlistener("click", function NovoMultiDateInputElement_label_6_Template_label_click_0_listener() { ɵɵrestoreView(_r7); const ctx_r6 = ɵɵnextContext(); return ctx_r6.clearValue(); });
    ɵɵtext(1);
    ɵɵelement(2, "i", 11);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate1("", ctx_r2.labels.clearAll, " ");
} }
const _c0$O = function () { return []; };
// Value accessor for the component (supports ngModel)
const MULTI_DATE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoMultiDateInputElement),
    multi: true,
};
class NovoMultiDateInputElement {
    constructor(element, labels, cdr, dateFormatService) {
        this.element = element;
        this.labels = labels;
        this.cdr = cdr;
        this.dateFormatService = dateFormatService;
        this.formattedStartDate = '';
        this.formattedEndDate = '';
        this.format = 'shortDate';
        this.allowInvalidDate = false;
        this.weekStart = 0;
        this.chipsCount = 5;
        this.blurEvent = new EventEmitter();
        this.focusEvent = new EventEmitter();
        this.change = new EventEmitter();
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this._value = [];
        this._disabled = false;
        this.notShown = {};
        this.onChangeCallback = (_) => {
            // placeholder
        };
        this.onTouchedCallback = () => {
            // placeholder
        };
        this.placeholder = this.labels.dateFormatString().toUpperCase() || this.labels.dateFormatPlaceholder;
    }
    get value() {
        return this._value;
    }
    set value(value) {
        if (this.value !== value) {
            this._value = value;
            this._setFormValue(value);
            this.onChangeCallback(this._value);
        }
    }
    // Disabled State
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = !!value;
    }
    ngOnInit() {
        this.userDefinedFormat = this.format ? !this.format.match(/^(DD\/MM\/YYYY|MM\/DD\/YYYY)$/g) : false;
        // if (!this.userDefinedFormat && this.textMaskEnabled && !this.allowInvalidDate) {
        //   this.maskOptions = this.maskOptions || {
        //     mask: this.dateFormatService.getDateMask(),
        //     pipe: createAutoCorrectedDatePipe(this.format || this.labels.dateFormatString().toLowerCase()),
        //     keepCharPositions: false,
        //     guide: true,
        //   };
        // } else {
        //   this.maskOptions = { mask: false };
        // }
    }
    formatter(value) {
        const [dateTimeValue, formatted] = this.dateFormatService.parseString(value, false, 'date');
        return formatted;
    }
    /** BEGIN: Convenient Panel Methods. */
    openPanel() {
        if (!this.disabled) {
            this.panelOpen ? this.overlay.closePanel() : this.overlay.openPanel();
        }
    }
    closePanel() {
        this.overlay && this.overlay.closePanel();
    }
    get panelOpen() {
        return this.overlay && this.overlay.panelOpen;
    }
    /** END: Convenient Panel Methods. */
    _handleKeydown(event) {
        if ((event.key === "Escape" /* Escape */ || event.key === "Enter" /* Enter */ || event.key === "Tab" /* Tab */) && this.panelOpen) {
            this.closePanel();
            event.stopPropagation();
        }
    }
    _handleBlur(event) {
        this.blurEvent.emit(event);
    }
    _handleFocus(event) {
        this.openPanel();
        this.focusEvent.emit(event);
    }
    remove(event, date) {
        const current = new Set(this.value);
        if (current.has(date)) {
            current.delete(date);
        }
        this.value = [...current];
    }
    writeValue(value) {
        this.value = value;
        this.cdr.markForCheck();
    }
    setDisabledState(disabled) {
        this.disabled = disabled;
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    _setFormValue(value) {
        if (this.value) {
            // this.formattedStartDate = this.formatDateValue(this.value.startDate);
        }
    }
    /**
     * This method closes the panel, and if a value is specified, also sets the associated
     * control to that value. It will also mark the control as dirty if this interaction
     * stemmed from the user.
     */
    setValueAndClose(event = []) {
        if (event) {
            this.value = event;
            this.change.emit(this.value);
        }
        // this.closePanel();
    }
    /**
     * Clear any previous selected option and emit a selection change event for this option
     */
    clearValue() {
        this.value = [];
        this.change.emit(this.value);
    }
    get hasValue() {
        return !Helpers.isEmpty(this.value);
    }
}
NovoMultiDateInputElement.ɵfac = function NovoMultiDateInputElement_Factory(t) { return new (t || NovoMultiDateInputElement)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(DateFormatService)); };
NovoMultiDateInputElement.ɵcmp = ɵɵdefineComponent({ type: NovoMultiDateInputElement, selectors: [["novo-multi-date-input"]], viewQuery: function NovoMultiDateInputElement_Query(rf, ctx) { if (rf & 1) {
        ɵɵviewQuery(NovoOverlayTemplateComponent, true);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.overlay = _t.first);
    } }, hostVars: 2, hostBindings: function NovoMultiDateInputElement_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵclassProp("disabled", ctx.disabled);
    } }, inputs: { name: "name", start: "start", end: "end", placeholder: "placeholder", format: "format", allowInvalidDate: "allowInvalidDate", weekStart: "weekStart", chipsCount: "chipsCount", value: "value", disabled: "disabled" }, outputs: { blurEvent: "blurEvent", focusEvent: "focusEvent", change: "change", blur: "blur", focus: "focus" }, features: [ɵɵProvidersFeature([MULTI_DATE_VALUE_ACCESSOR])], decls: 9, vars: 14, consts: [[3, "removed", 4, "ngFor", "ngForOf"], [1, "chip-input-container", 3, "click"], ["class", "placeholder", "data-automation-id", "multi-date-input", 4, "ngIf"], [1, "panel-toggle", 3, "click"], ["class", "clear-all", 3, "click", 4, "ngIf"], ["position", "above-below", 3, "parent"], ["inline", "true", "mode", "multiple", 3, "start", "end", "ngModel", "weekStart", "onSelect", "ngModelChange"], [3, "removed"], ["size", "small", "novoChipRemove", ""], ["data-automation-id", "multi-date-input", 1, "placeholder"], [1, "clear-all", 3, "click"], [1, "bhi-times"]], template: function NovoMultiDateInputElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵtemplate(0, NovoMultiDateInputElement_novo_chip_0_Template, 5, 4, "novo-chip", 0);
        ɵɵpipe(1, "default");
        ɵɵelementStart(2, "div", 1);
        ɵɵlistener("click", function NovoMultiDateInputElement_Template_div_click_2_listener($event) { return ctx._handleFocus($event); });
        ɵɵtemplate(3, NovoMultiDateInputElement_span_3_Template, 2, 1, "span", 2);
        ɵɵelementEnd();
        ɵɵelementStart(4, "novo-icon", 3);
        ɵɵlistener("click", function NovoMultiDateInputElement_Template_novo_icon_click_4_listener() { return ctx.openPanel(); });
        ɵɵtext(5, "calendar");
        ɵɵelementEnd();
        ɵɵtemplate(6, NovoMultiDateInputElement_label_6_Template, 3, 1, "label", 4);
        ɵɵelementStart(7, "novo-overlay-template", 5);
        ɵɵelementStart(8, "novo-date-picker", 6);
        ɵɵlistener("onSelect", function NovoMultiDateInputElement_Template_novo_date_picker_onSelect_8_listener($event) { return ctx.setValueAndClose($event); })("ngModelChange", function NovoMultiDateInputElement_Template_novo_date_picker_ngModelChange_8_listener($event) { return ctx.value = $event; });
        ɵɵelementEnd();
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵproperty("ngForOf", ɵɵpipeBind2(1, 10, ctx.value, ɵɵpureFunction0(13, _c0$O)));
        ɵɵadvance(3);
        ɵɵproperty("ngIf", !ctx.value.length);
        ɵɵadvance(1);
        ɵɵclassProp("selected", ctx.panelOpen);
        ɵɵadvance(2);
        ɵɵproperty("ngIf", ctx.value.length);
        ɵɵadvance(1);
        ɵɵproperty("parent", ctx.element);
        ɵɵadvance(1);
        ɵɵproperty("start", ctx.start)("end", ctx.end)("ngModel", ctx.value)("weekStart", ctx.weekStart);
    } }, directives: [NgForOf, NgIf, NovoIconComponent, NovoOverlayTemplateComponent, NovoDatePickerElement, NgControlStatus, NgModel, NovoChipElement, NovoChipRemove], pipes: [DefaultPipe, DatePipe], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoMultiDateInputElement, [{
        type: Component,
        args: [{
                selector: 'novo-multi-date-input',
                providers: [MULTI_DATE_VALUE_ACCESSOR],
                template: `
    <novo-chip *ngFor="let date of value | default: []" (removed)="remove($event, date)">
      {{ date | date: format }}
      <novo-icon size="small" novoChipRemove>close</novo-icon>
    </novo-chip>
    <!-- <div *ngIf="value.length > chipsCount">
      <ul class="summary">
        <li *ngFor="let type of notShown">+ {{ type.count }} {{ labels.more }} {{ type.type }}</li>
      </ul>
    </div> -->
    <div class="chip-input-container" (click)="_handleFocus($event)">
      <span class="placeholder" *ngIf="!value.length" data-automation-id="multi-date-input">{{ placeholder }}</span>
    </div>
    <novo-icon class="panel-toggle" [class.selected]="panelOpen" (click)="openPanel()">calendar</novo-icon>
    <label class="clear-all" *ngIf="value.length" (click)="clearValue()">{{ labels.clearAll }} <i class="bhi-times"></i></label>
    <novo-overlay-template [parent]="element" position="above-below">
      <novo-date-picker
        [start]="start"
        [end]="end"
        inline="true"
        mode="multiple"
        (onSelect)="setValueAndClose($event)"
        [(ngModel)]="value"
        [weekStart]="weekStart"
      ></novo-date-picker>
    </novo-overlay-template>
  `,
            }]
    }], function () { return [{ type: ElementRef }, { type: NovoLabelService }, { type: ChangeDetectorRef }, { type: DateFormatService }]; }, { name: [{
            type: Input
        }], start: [{
            type: Input
        }], end: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], format: [{
            type: Input
        }], allowInvalidDate: [{
            type: Input
        }], weekStart: [{
            type: Input
        }], chipsCount: [{
            type: Input
        }], blurEvent: [{
            type: Output
        }], focusEvent: [{
            type: Output
        }], overlay: [{
            type: ViewChild,
            args: [NovoOverlayTemplateComponent]
        }], change: [{
            type: Output
        }], blur: [{
            type: Output
        }], focus: [{
            type: Output
        }], value: [{
            type: Input
        }], disabled: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['class.disabled']
        }] }); })();

// NG2
class NovoDatePickerModule {
}
NovoDatePickerModule.ɵmod = ɵɵdefineNgModule({ type: NovoDatePickerModule });
NovoDatePickerModule.ɵinj = ɵɵdefineInjector({ factory: function NovoDatePickerModule_Factory(t) { return new (t || NovoDatePickerModule)(); }, imports: [[
            CommonModule,
            FormsModule,
            NovoButtonModule,
            NovoPipesModule,
            NovoOverlayModule,
            TextMaskModule,
            NovoIconModule,
            NovoChipsModule,
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoDatePickerModule, { declarations: [NovoDatePickerElement,
        NovoDatePickerInputElement,
        NovoDateRangeInputElement,
        NovoMultiDateInputElement,
        NovoMonthViewElement,
        NovoMonthSelectElement,
        NovoYearSelectElement,
        NovoCalendarElement], imports: [CommonModule,
        FormsModule,
        NovoButtonModule,
        NovoPipesModule,
        NovoOverlayModule,
        TextMaskModule,
        NovoIconModule,
        NovoChipsModule], exports: [NovoDatePickerElement,
        NovoDatePickerInputElement,
        NovoDateRangeInputElement,
        NovoMultiDateInputElement,
        NovoMonthViewElement,
        NovoMonthSelectElement,
        NovoYearSelectElement,
        NovoCalendarElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDatePickerModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    NovoButtonModule,
                    NovoPipesModule,
                    NovoOverlayModule,
                    TextMaskModule,
                    NovoIconModule,
                    NovoChipsModule,
                ],
                declarations: [
                    NovoDatePickerElement,
                    NovoDatePickerInputElement,
                    NovoDateRangeInputElement,
                    NovoMultiDateInputElement,
                    NovoMonthViewElement,
                    NovoMonthSelectElement,
                    NovoYearSelectElement,
                    NovoCalendarElement,
                ],
                exports: [
                    NovoDatePickerElement,
                    NovoDatePickerInputElement,
                    NovoDateRangeInputElement,
                    NovoMultiDateInputElement,
                    NovoMonthViewElement,
                    NovoMonthSelectElement,
                    NovoYearSelectElement,
                    NovoCalendarElement,
                ],
            }]
    }], null, null); })();

// NG2
const dragula = dragulaImported;
class NovoDragulaService {
    constructor() {
        this.cancel = new EventEmitter();
        this.cloned = new EventEmitter();
        this.drag = new EventEmitter();
        this.dragend = new EventEmitter();
        this.drop = new EventEmitter();
        this.out = new EventEmitter();
        this.over = new EventEmitter();
        this.remove = new EventEmitter();
        this.shadow = new EventEmitter();
        this.dropModel = new EventEmitter();
        this.removeModel = new EventEmitter();
        this.events = ['cancel', 'cloned', 'drag', 'dragend', 'drop', 'out', 'over', 'remove', 'shadow', 'dropModel', 'removeModel'];
        this.bags = [];
    }
    add(name, drake) {
        let bag = this.find(name);
        if (bag) {
            throw new Error(`Bag named: ${name} already exists.`);
        }
        bag = {
            name,
            drake,
        };
        this.bags.push(bag);
        if (drake.models) {
            // models to sync with (must have same structure as containers)
            this.handleModels(name, drake);
        }
        if (!bag.initEvents) {
            this.setupEvents(bag);
        }
        return bag;
    }
    find(name) {
        for (let i = 0; i < this.bags.length; i++) {
            if (this.bags[i].name === name) {
                return this.bags[i];
            }
        }
        return null;
    }
    destroy(name) {
        const bag = this.find(name);
        const i = this.bags.indexOf(bag);
        this.bags.splice(i, 1);
        bag.drake.destroy();
    }
    setOptions(name, options) {
        const bag = this.add(name, dragula(options));
        this.handleModels(name, bag.drake);
    }
    handleModels(name, drake) {
        let dragElm;
        let dragIndex;
        let dropIndex;
        let sourceModel;
        drake.on('remove', (el, source) => {
            if (!drake.models) {
                return;
            }
            sourceModel = drake.models[drake.containers.indexOf(source)];
            sourceModel.splice(dragIndex, 1);
            this.removeModel.emit([name, el, source]);
        });
        drake.on('drag', (el, source) => {
            dragElm = el;
            dragIndex = this.domIndexOf(el, source);
        });
        drake.on('drop', (dropElm, target, source) => {
            if (!drake.models) {
                return;
            }
            dropIndex = this.domIndexOf(dropElm, target);
            sourceModel = drake.models[drake.containers.indexOf(source)];
            if (target === source) {
                sourceModel.splice(dropIndex, 0, sourceModel.splice(dragIndex, 1)[0]);
            }
            else {
                const notCopy = dragElm === dropElm;
                const targetModel = drake.models[drake.containers.indexOf(target)];
                const dropElmModel = notCopy ? sourceModel[dragIndex] : JSON.parse(JSON.stringify(sourceModel[dragIndex]));
                if (notCopy) {
                    sourceModel.splice(dragIndex, 1);
                }
                targetModel.splice(dropIndex, 0, dropElmModel);
                target.removeChild(dropElm); // element must be removed for ngFor to apply correctly
            }
            this.dropModel.emit([name, dropElm, target, source]);
        });
    }
    setupEvents(bag) {
        bag.initEvents = true;
        const that = this;
        const emitter = (type) => {
            function replicate() {
                const args = Array.prototype.slice.call(arguments);
                that[type].emit([bag.name].concat(args));
            }
            bag.drake.on(type, replicate);
        };
        this.events.forEach(emitter);
    }
    domIndexOf(child, parent) {
        return Array.prototype.indexOf.call(parent.children, child);
    }
}
NovoDragulaService.ɵfac = function NovoDragulaService_Factory(t) { return new (t || NovoDragulaService)(); };
NovoDragulaService.ɵprov = ɵɵdefineInjectable({ token: NovoDragulaService, factory: NovoDragulaService.ɵfac });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDragulaService, [{
        type: Injectable
    }], null, null); })();

// NG2
const dragula$1 = dragulaImported;
class NovoDragulaElement {
    constructor(element, dragulaService) {
        this.dragulaService = dragulaService;
        this.drake = null;
        this.container = element.nativeElement;
    }
    ngOnInit() {
        const bag = this.dragulaService.find(this.bag);
        if (bag) {
            this.drake = bag.drake;
            this.checkModel();
            this.drake.containers.push(this.container);
        }
        else {
            this.drake = dragula$1({
                containers: [this.container],
            });
            this.checkModel();
            this.dragulaService.add(this.bag, this.drake);
        }
    }
    checkModel() {
        if (this.dragulaModel) {
            if (this.drake.models) {
                this.drake.models.push(this.dragulaModel);
            }
            else {
                this.drake.models = [this.dragulaModel];
            }
        }
    }
    ngOnChanges(changes) {
        if (changes && changes.dragulaModel) {
            if (this.drake) {
                if (this.drake.models) {
                    const modelIndex = this.drake.models.indexOf(changes.dragulaModel.previousValue);
                    this.drake.models.splice(modelIndex, 1, changes.dragulaModel.currentValue);
                }
                else {
                    this.drake.models = [changes.dragulaModel.currentValue];
                }
            }
        }
    }
}
NovoDragulaElement.ɵfac = function NovoDragulaElement_Factory(t) { return new (t || NovoDragulaElement)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NovoDragulaService)); };
NovoDragulaElement.ɵdir = ɵɵdefineDirective({ type: NovoDragulaElement, selectors: [["", "dragula", ""]], inputs: { bag: ["dragula", "bag"], dragulaModel: "dragulaModel" }, features: [ɵɵNgOnChangesFeature] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDragulaElement, [{
        type: Directive,
        args: [{
                selector: '[dragula]',
            }]
    }], function () { return [{ type: ElementRef }, { type: NovoDragulaService }]; }, { bag: [{
            type: Input,
            args: ['dragula']
        }], dragulaModel: [{
            type: Input
        }] }); })();

// NG2
class NovoDragulaModule {
}
NovoDragulaModule.ɵmod = ɵɵdefineNgModule({ type: NovoDragulaModule });
NovoDragulaModule.ɵinj = ɵɵdefineInjector({ factory: function NovoDragulaModule_Factory(t) { return new (t || NovoDragulaModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoDragulaModule, { declarations: [NovoDragulaElement], exports: [NovoDragulaElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDragulaModule, [{
        type: NgModule,
        args: [{
                declarations: [NovoDragulaElement],
                exports: [NovoDragulaElement],
            }]
    }], null, null); })();

class NovoDividerComponent {
    constructor() {
        this._vertical = false;
        this._inset = false;
    }
    /** Whether the divider is vertically aligned. */
    get vertical() {
        return this._vertical;
    }
    set vertical(value) {
        this._vertical = coerceBooleanProperty(value);
    }
    /** Whether the divider is an inset divider. */
    get inset() {
        return this._inset;
    }
    set inset(value) {
        this._inset = coerceBooleanProperty(value);
    }
}
NovoDividerComponent.ɵfac = function NovoDividerComponent_Factory(t) { return new (t || NovoDividerComponent)(); };
NovoDividerComponent.ɵcmp = ɵɵdefineComponent({ type: NovoDividerComponent, selectors: [["novo-divider"]], hostAttrs: ["role", "separator", 1, "novo-divider"], hostVars: 7, hostBindings: function NovoDividerComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵattribute("aria-orientation", ctx.vertical ? "vertical" : "horizontal");
        ɵɵclassProp("novo-divider-vertical", ctx.vertical)("novo-divider-horizontal", !ctx.vertical)("novo-divider-inset", ctx.inset);
    } }, inputs: { vertical: "vertical", inset: "inset" }, decls: 0, vars: 0, template: function NovoDividerComponent_Template(rf, ctx) { }, styles: [".novo-divider{border-top-style:solid;border-top-width:1px;display:block;margin:0}.novo-divider.novo-divider-vertical{border-right-style:solid;border-right-width:1px;border-top:0}.novo-divider.novo-divider-inset{margin-left:80px}[dir=rtl] .novo-divider.novo-divider-inset{margin-left:auto;margin-right:80px}"], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDividerComponent, [{
        type: Component,
        args: [{
                selector: 'novo-divider',
                host: {
                    role: 'separator',
                    '[attr.aria-orientation]': 'vertical ? "vertical" : "horizontal"',
                    '[class.novo-divider-vertical]': 'vertical',
                    '[class.novo-divider-horizontal]': '!vertical',
                    '[class.novo-divider-inset]': 'inset',
                    class: 'novo-divider',
                },
                template: '',
                styleUrls: ['./divider.component.scss'],
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], null, { vertical: [{
            type: Input
        }], inset: [{
            type: Input
        }] }); })();

class NovoDividerModule {
}
NovoDividerModule.ɵmod = ɵɵdefineNgModule({ type: NovoDividerModule });
NovoDividerModule.ɵinj = ɵɵdefineInjector({ factory: function NovoDividerModule_Factory(t) { return new (t || NovoDividerModule)(); }, imports: [[]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoDividerModule, { declarations: [NovoDividerComponent], exports: [NovoDividerComponent] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDividerModule, [{
        type: NgModule,
        args: [{
                imports: [],
                exports: [NovoDividerComponent],
                declarations: [NovoDividerComponent],
            }]
    }], null, null); })();

// NG
const _c0$P = ["dropdownElement"];
const _c1$h = ["panel"];
function NovoSelectElement_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 10);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r1.placeholder);
} }
function NovoSelectElement_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 11);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r2.displayValue);
} }
function NovoSelectElement_novo_option_8_novo_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-button", 15);
    ɵɵlistener("click", function NovoSelectElement_novo_option_8_novo_button_1_Template_novo_button_click_0_listener($event) { ɵɵrestoreView(_r9); const ctx_r8 = ɵɵnextContext(2); ctx_r8.toggleHeader($event); return false; });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r6.headerConfig.label, " ");
} }
const _c2$8 = function (a0) { return { active: a0 }; };
const _c3$5 = function (a0) { return { invalid: a0 }; };
function NovoSelectElement_novo_option_8_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 16);
    ɵɵelementStart(1, "input", 17);
    ɵɵlistener("ngModelChange", function NovoSelectElement_novo_option_8_div_2_Template_input_ngModelChange_1_listener($event) { ɵɵrestoreView(_r11); const ctx_r10 = ɵɵnextContext(2); return ctx_r10.header.value = $event; });
    ɵɵelementEnd();
    ɵɵelementStart(2, "footer");
    ɵɵelementStart(3, "novo-button", 18);
    ɵɵlistener("click", function NovoSelectElement_novo_option_8_div_2_Template_novo_button_click_3_listener($event) { ɵɵrestoreView(_r11); const ctx_r12 = ɵɵnextContext(2); return ctx_r12.toggleHeader($event, false); });
    ɵɵtext(4);
    ɵɵelementEnd();
    ɵɵelementStart(5, "novo-button", 19);
    ɵɵlistener("click", function NovoSelectElement_novo_option_8_div_2_Template_novo_button_click_5_listener() { ɵɵrestoreView(_r11); const ctx_r13 = ɵɵnextContext(2); return ctx_r13.saveHeader(); });
    ɵɵtext(6);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵɵnextContext(2);
    ɵɵproperty("ngClass", ɵɵpureFunction1(7, _c2$8, ctx_r7.header.open));
    ɵɵadvance(1);
    ɵɵproperty("placeholder", ctx_r7.headerConfig.placeholder)("ngModel", ctx_r7.header.value)("ngClass", ɵɵpureFunction1(9, _c3$5, !ctx_r7.header.valid));
    ɵɵattribute("id", ctx_r7.name);
    ɵɵadvance(3);
    ɵɵtextInterpolate(ctx_r7.labels.cancel);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r7.labels.save);
} }
function NovoSelectElement_novo_option_8_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-option", 12);
    ɵɵtemplate(1, NovoSelectElement_novo_option_8_novo_button_1_Template, 2, 1, "novo-button", 13);
    ɵɵtemplate(2, NovoSelectElement_novo_option_8_div_2_Template, 7, 11, "div", 14);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵɵnextContext();
    ɵɵclassProp("open", ctx_r4.header.open);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !ctx_r4.header.open);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r4.header.open);
} }
function NovoSelectElement_ng_container_10_novo_option_1_i_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 25);
} }
function NovoSelectElement_ng_container_10_novo_option_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-option", 22);
    ɵɵelement(1, "span", 23);
    ɵɵtemplate(2, NovoSelectElement_ng_container_10_novo_option_1_i_2_Template, 1, 0, "i", 24);
    ɵɵelementEnd();
} if (rf & 2) {
    const option_r14 = ɵɵnextContext().$implicit;
    const ctx_r16 = ɵɵnextContext();
    ɵɵclassProp("active", option_r14.active);
    ɵɵproperty("value", option_r14.value);
    ɵɵattribute("data-automation-value", option_r14.label);
    ɵɵadvance(1);
    ɵɵproperty("innerHtml", ctx_r16.highlight(option_r14.label, ctx_r16.filterTerm), ɵɵsanitizeHtml);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", option_r14.active);
} }
function NovoSelectElement_ng_container_10_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-divider", 26);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const option_r14 = ɵɵnextContext().$implicit;
    ɵɵclassProp("with-label", option_r14.label)("without-label", !option_r14.label);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", option_r14 == null ? null : option_r14.label, " ");
} }
function NovoSelectElement_ng_container_10_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, NovoSelectElement_ng_container_10_novo_option_1_Template, 3, 6, "novo-option", 20);
    ɵɵtemplate(2, NovoSelectElement_ng_container_10_ng_template_2_Template, 2, 5, "ng-template", null, 21, ɵɵtemplateRefExtractor);
    ɵɵelementContainerEnd();
} if (rf & 2) {
    const option_r14 = ctx.$implicit;
    const _r17 = ɵɵreference(3);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !option_r14.divider)("ngIfElse", _r17);
} }
const _c4$3 = ["*"];
// Value accessor for the component (supports ngModel)
// const SELECT_VALUE_ACCESSOR = {
//   provide: NG_VALUE_ACCESSOR,
//   useExisting: forwardRef(() => NovoSelectElement),
//   multi: true,
// };
/** Change event object that is emitted when the select value has changed. */
class NovoSelectChange {
    constructor(
    /** Reference to the select that emitted the change event. */
    source, 
    /** Current value of the select that emitted the event. */
    value) {
        this.source = source;
        this.value = value;
    }
}
// Create Base Class from Mixins
// Boilerplate for applying mixins
class NovoSelectBase {
    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {
        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        this.ngControl = ngControl;
    }
}
const NovoSelectMixins = mixinOverlay(mixinTabIndex(mixinRequired(mixinDisabled(mixinErrorState(NovoSelectBase)))));
let nextId = 0;
class NovoSelectElement extends NovoSelectMixins {
    constructor(elementRef, labels, ref, focusMonitor, ngZone, defaultErrorStateMatcher, ngControl, _parentForm, _parentFormGroup) {
        super(defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);
        this.elementRef = elementRef;
        this.labels = labels;
        this.ref = ref;
        this.focusMonitor = focusMonitor;
        this.ngZone = ngZone;
        this._uniqueId = `novo-select-${++nextId}`;
        this._stateChanges = Subscription.EMPTY;
        this._activeOptionChanges = Subscription.EMPTY;
        this._selectedOptionChanges = Subscription.EMPTY;
        this._destroy = new Subject();
        /** Tab index for the chip list. */
        this._tabIndex = 0;
        /** User defined tab index. */
        this._userTabIndex = null;
        this.id = this._uniqueId;
        this.placeholder = 'Select...';
        this.position = 'center';
        this.onSelect = new EventEmitter();
        /** Event emitted when the selected value has been changed by the user. */
        this.selectionChange = new EventEmitter();
        /** Event that emits whenever the raw value of the select changes.*/
        this.valueChange = new EventEmitter();
        /** Function that maps an option's control value to its display value in the trigger. */
        this.displayWith = null;
        /** * Function to compare the option values with the selected values. */
        this.compareWith = (o1, o2) => o1 === o2;
        this.header = {
            open: false,
            valid: true,
            value: '',
        };
        this.onModelChange = () => { };
        this.onModelTouched = () => { };
        this.filterTerm = '';
        this.disabled = false;
        this._value = null;
        this._multiple = false;
        if (ngControl) {
            ngControl.valueAccessor = this;
        }
    }
    /**
     * Implemented as part of NovoFieldControl.
     * @docs-private
     */
    get value() {
        return this._value;
    }
    set value(newValue) {
        // Always re-assign an array, because it might have been mutated.
        if (newValue !== this._value || (this._multiple && Array.isArray(newValue))) {
            if (this.options) {
                this._setSelectionByValue(newValue);
            }
            this._value = newValue;
        }
    }
    /** Whether the user should be allowed to select multiple options. */
    get multiple() {
        return this._multiple;
    }
    set multiple(value) {
        this._multiple = coerceBooleanProperty(value);
    }
    /** Whether any radio buttons has focus. */
    get focused() {
        // todo: implement this.
        return false;
    }
    /** Implemented as part of NovoFieldControl. */
    get empty() {
        return this._value === null;
    }
    /** The currently selected option. */
    get selected() {
        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];
    }
    /** The value displayed in the trigger. */
    get displayValue() {
        if (this.empty) {
            return '';
        }
        if (this._multiple) {
            const selectedOptions = this._selectionModel.selected.map((option) => this._getDisplayValue(option));
            return selectedOptions.join(', ');
        }
        return this._getDisplayValue(this._selectionModel.selected[0]);
    }
    ngOnInit() {
        this._selectionModel = new SelectionModel(this.multiple);
        this.stateChanges.next();
        this._initLegacyOptions();
        this.focusMonitor.monitor(this.dropdown.nativeElement).subscribe((origin) => this.ngZone.run(() => {
            if (origin === 'keyboard' && !this.disabled) {
                this.openPanel();
            }
        }));
    }
    ngOnChanges(changes) {
        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let
        // the parent form field know to run change detection when the disabled state changes.
        if (changes === null || changes === void 0 ? void 0 : changes.disabled) {
            this.stateChanges.next();
        }
        this._initLegacyOptions();
    }
    ngAfterViewInit() {
        // Initialize KeyManager to manage keyboard events
        this._initKeyManager();
        // Subscribe to NovoOption selections
        this._watchSelectionEvents();
        // Set initial value
        this._initializeSelection();
        // Listen to selection changes to select and deselect options
        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe((event) => {
            event.added.forEach((option) => option.select());
            event.removed.forEach((option) => option.deselect());
        });
        // Listen to QueryList changes
        merge(this.contentOptions.changes, this.viewOptions.changes)
            .pipe(takeUntil(this._destroy))
            .subscribe(() => {
            this._watchSelectionEvents();
            this._initializeSelection();
        });
    }
    ngOnDestroy() {
        this._destroy.next();
        this._destroy.complete();
        this._stateChanges.unsubscribe();
        this._activeOptionChanges.unsubscribe();
        this._selectedOptionChanges.unsubscribe();
        this.focusMonitor.stopMonitoring(this.dropdown.nativeElement);
    }
    openPanel() {
        super.openPanel();
        this._highlightCorrectOption();
    }
    _initializeSelection() {
        // Defer setting the value in order to avoid the "Expression
        // has changed after it was checked" errors from Angular.
        Promise.resolve().then(() => {
            console.log('Initialize selection', this.ngControl ? this.ngControl.value : this._value);
            this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);
            this.stateChanges.next();
        });
    }
    /**
     * Sets the selected option based on a value. If no option can be
     * found with the designated value, the select trigger is cleared.
     */
    _setSelectionByValue(value) {
        this._selectionModel.selected.forEach((option) => option.setInactiveStyles());
        this._selectionModel.clear();
        if (this.multiple && value) {
            value.forEach((currentValue) => this._selectValue(currentValue));
            this._sortValues();
        }
        else {
            const correspondingOption = this._selectValue(value);
            // Shift focus to the active item. Note that we shouldn't do this in multiple
            // mode, because we don't know what option the user interacted with last.
            if (correspondingOption) {
                this._keyManager.updateActiveItem(correspondingOption);
            }
            else if (!this.panelOpen) {
                // Otherwise reset the highlighted option. Note that we only want to do this while
                // closed, because doing it while open can shift the user's focus unnecessarily.
                this._keyManager.updateActiveItem(-1);
            }
        }
        this.ref.markForCheck();
    }
    /**
     * Finds and selects and option based on its value.
     * @returns Option that has the corresponding value.
     */
    _selectValue(value) {
        const correspondingOption = this._getOptions().find((option) => {
            // Skip options that are already in the model. This allows us to handle cases
            // where the same primitive value is selected multiple times.
            if (this._selectionModel.isSelected(option)) {
                return false;
            }
            return option.value != null && this.compareWith(option.value, value);
        });
        if (correspondingOption) {
            this._selectionModel.select(correspondingOption);
        }
        return correspondingOption;
    }
    select(option, i, fireEvents = true) {
        console.warn('select() method is deprecated');
    }
    clear() {
        console.warn('clear() method is deprecated');
    }
    /**
     * This method closes the panel, and if a value is specified, also sets the associated
     * control to that value. It will also mark the control as dirty if this interaction
     * stemmed from the user.
     */
    handleSelection(option, isUserInput = false) {
        const wasSelected = this._selectionModel.isSelected(option);
        if (option.value == null && !this._multiple) {
            option.deselect();
            this._selectionModel.clear();
            if (this.value != null) {
                this._propagateChanges(option.value);
            }
        }
        else {
            if (wasSelected !== option.selected) {
                option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);
            }
            if (isUserInput) {
                this._keyManager.setActiveItem(option);
            }
            if (this.multiple) {
                this._sortValues();
                if (isUserInput) {
                    this.focus();
                }
            }
        }
        if (wasSelected !== this._selectionModel.isSelected(option)) {
            this._propagateChanges();
        }
        this.stateChanges.next();
        this._watchSelectionEvents();
    }
    _getDisplayValue(option) {
        if (!option)
            return '';
        const toDisplay = this.displayWith ? this.displayWith(option.value) : option.viewValue;
        // Simply falling back to an empty string if the display value is falsy does not work properly.
        // The display value can also be the number zero and shouldn't fall back to an empty string.
        const dispalyValue = toDisplay != null ? toDisplay : '';
        return dispalyValue;
    }
    /**
     * Clear any previous selected option and emit a selection change event for this option
     */
    _clearPreviousSelectedOption(skip) {
        this._getOptions().forEach((option) => {
            if (option !== skip && option.selected) {
                option.deselect();
            }
        });
    }
    _watchSelectionEvents() {
        const options = this._getOptions();
        const selectionEvents = options ? merge(...options.map((option) => option.onSelectionChange)) : of();
        this._selectedOptionChanges.unsubscribe();
        this._selectedOptionChanges = selectionEvents.pipe(take(1)).subscribe((event) => {
            this.onModelTouched();
            this.handleSelection(event.source, event.isUserInput);
            if (event.isUserInput && !this.multiple && this.panelOpen) {
                this.closePanel();
                this.focus();
            }
        });
    }
    /** Handles all keydown events on the select. */
    _handleKeydown(event) {
        if (!this.disabled) {
            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);
        }
    }
    /** Handles keyboard events while the select is closed. */
    _handleClosedKeydown(event) {
        const key = event.key;
        const isArrowKey = key === "ArrowDown" /* ArrowDown */ || key === "ArrowUp" /* ArrowUp */ || key === "ArrowLeft" /* ArrowLeft */ || key === "ArrowRight" /* ArrowRight */;
        const isOpenKey = key === "Enter" /* Enter */ || key === " " /* Space */;
        const manager = this._keyManager;
        // Open the select on ALT + arrow key to match the native <select>
        if ((!manager.isTyping() && isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {
            event.preventDefault(); // prevents the page from scrolling down when pressing space
            this.openPanel();
        }
        // Allow changing value with arrow keys.
        // else if (!this.multiple) {
        //   const previouslySelectedOption = this.selected;
        //   manager.onKeydown(event);
        //   const selectedOption = this.selected;
        // }
    }
    /** Handles keyboard events when the selected is open. */
    _handleOpenKeydown(event) {
        const manager = this._keyManager;
        const key = event.key;
        const isArrowKey = key === "ArrowDown" /* ArrowDown */ || key === "ArrowUp" /* ArrowUp */;
        const isTyping = manager.isTyping();
        if (isArrowKey && event.altKey) {
            // Close the select on ALT + arrow key to match the native <select>
            event.preventDefault();
            this.closePanel();
            // Don't do anything in this case if the user is typing,
            // because the typing sequence can include the space key.
        }
        else if (!isTyping && (key === "Enter" /* Enter */ || key === " " /* Space */) && manager.activeItem && !hasModifierKey(event)) {
            event.preventDefault();
            manager.activeItem._selectViaInteraction();
        }
        else if (!isTyping && this._multiple && ['a', 'A'].includes(key) && event.ctrlKey) {
            event.preventDefault();
            const hasDeselectedOptions = this.options.some((opt) => !opt.disabled && !opt.selected);
            this.options.forEach((option) => {
                if (!option.disabled) {
                    hasDeselectedOptions ? option.select() : option.deselect();
                }
            });
        }
        else {
            const previouslyFocusedIndex = manager.activeItemIndex;
            manager.onKeydown(event);
            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem && manager.activeItemIndex !== previouslyFocusedIndex) {
                manager.activeItem._selectViaInteraction();
            }
        }
    }
    writeValue(value) {
        this.value = value;
    }
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    setDisabledState(disabled) {
        this.disabled = disabled;
    }
    /** Implemented as part of NovoFieldControl. */
    setDescribedByIds(ids) {
        this._ariaDescribedby = ids.join(' ');
    }
    /** Implemented as part of NovoFieldControl. */
    onContainerClick(event) {
        this.focus();
    }
    /**
     * Focuses the first non-disabled chip in this chip list, or the associated input when there
     * are no eligible chips.
     */
    focus(options) {
        if (!this.disabled) {
            this.dropdown.nativeElement.focus(options);
        }
    }
    _getOptions() {
        return [...(this.viewOptions || []), ...(this.contentOptions || [])];
    }
    /** Sorts the selected values in the selected based on their order in the panel. */
    _sortValues() {
        if (this.multiple) {
            // TODO.
        }
    }
    /** Emits change event to set the model value. */
    _propagateChanges(fallbackValue) {
        let valueToEmit = null;
        if (this.multiple) {
            valueToEmit = this.selected.map((option) => option.value);
        }
        else {
            valueToEmit = this.selected ? this.selected.value : fallbackValue;
        }
        this._value = valueToEmit;
        this.valueChange.emit(valueToEmit);
        this.onModelChange(valueToEmit);
        this.onSelect.emit({ selected: valueToEmit });
        this.selectionChange.emit(this._makeChangeEvent(valueToEmit));
        this.ref.markForCheck();
    }
    _makeChangeEvent(value) {
        return new NovoSelectChange(this, value);
    }
    /** Scrolls the active option into view. */
    _scrollOptionIntoView(index) {
        const options = new QueryList();
        options.reset(this._getOptions());
        const labelCount = _countGroupLabelsBeforeOption(index, options, this.optionGroups);
        const itemHeight = this._getItemHeight();
        this.panel.nativeElement.scrollTop = _getOptionScrollPosition((index + labelCount) * itemHeight, itemHeight, this.panel.nativeElement.scrollTop, this.panel.nativeElement.offsetHeight);
    }
    /** Sets up a key manager to listen to keyboard events on the overlay panel. */
    _initKeyManager() {
        this._keyManager = new ActiveDescendantKeyManager(this._getOptions()).withTypeAhead(100).withHomeAndEnd();
        // .withAllowedModifierKeys(['shiftKey']);
        this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {
            if (this.panelOpen) {
                // Select the active item when tabbing away. This is consistent with how the native
                // select behaves. Note that we only want to do this in single selection mode.
                if (!this.multiple && this._keyManager.activeItem) {
                    this._keyManager.activeItem._selectViaInteraction();
                }
                // Restore focus to the trigger before closing. Ensures that the focus
                // position won't be lost if the user got focus into the overlay.
                this.focus();
                this.closePanel();
            }
        });
        this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {
            if (this.panelOpen && this.overlay) {
                this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);
            }
            else if (!this.panelOpen && !this.multiple && this._keyManager.activeItem) {
                this._keyManager.activeItem._selectViaInteraction();
            }
        });
    }
    /**
     * Highlights the selected item. If no option is selected, it will highlight
     * the first item instead.
     */
    _highlightCorrectOption() {
        if (this._keyManager) {
            if (this.empty) {
                this._keyManager.setFirstItemActive();
            }
            else {
                this._keyManager.setActiveItem(this._value);
            }
        }
    }
    /** Calculates the height of the select's options. */
    _getItemHeight() {
        let [first] = this._getOptions();
        if (first) {
            return first._getHostElement().offsetHeight;
        }
        return 0;
    }
    // TODO: Deprecate this
    _initLegacyOptions() {
        if (this.options && this.options.length && typeof this.options[0] === 'string') {
            this.filteredOptions = this.options.map((item) => {
                return { value: item, label: item };
            });
        }
        else {
            this.filteredOptions = (this.options || [])
                .filter((item) => {
                return !item.readOnly;
            })
                .map((element) => {
                return Object.assign(Object.assign({}, element), { active: false });
            });
        }
    }
    /**
     * TODO: Deprecate all header methods
     */
    toggleHeader(event, forceValue = false) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        // Reverse the active property (if forceValue, use that)
        this.header = {
            open: forceValue !== undefined ? forceValue : !this.header.open,
            value: '',
            valid: true,
        };
    }
    highlight(match, query) {
        // Replaces the capture string with a the same string inside of a "strong" tag
        return query ? match.replace(new RegExp(this.escapeRegexp(query), 'gi'), '<strong>$&</strong>') : match;
    }
    escapeRegexp(queryToEscape) {
        // Ex: if the capture is "a" the result will be \a
        return queryToEscape.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
    }
    saveHeader() {
        if (this.header.value) {
            this.headerConfig.onSave(this.header.value);
            this.createdItem = this.header.value;
            this.closePanel();
        }
        else {
            this.header.valid = false;
        }
    }
}
NovoSelectElement.ɵfac = function NovoSelectElement_Factory(t) { return new (t || NovoSelectElement)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(FocusMonitor), ɵɵdirectiveInject(NgZone), ɵɵdirectiveInject(ErrorStateMatcher), ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(NgForm, 8), ɵɵdirectiveInject(FormGroupDirective, 8)); };
NovoSelectElement.ɵcmp = ɵɵdefineComponent({ type: NovoSelectElement, selectors: [["novo-select"]], contentQueries: function NovoSelectElement_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵɵcontentQuery(dirIndex, NovoOptgroup, true);
        ɵɵcontentQuery(dirIndex, NovoOption, true);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.optionGroups = _t);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.contentOptions = _t);
    } }, viewQuery: function NovoSelectElement_Query(rf, ctx) { if (rf & 1) {
        ɵɵstaticViewQuery(NovoOverlayTemplateComponent, true);
        ɵɵstaticViewQuery(_c0$P, true);
        ɵɵviewQuery(_c1$h, true);
        ɵɵviewQuery(NovoOption, true);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.overlay = _t.first);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.dropdown = _t.first);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.panel = _t.first);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.viewOptions = _t);
    } }, hostBindings: function NovoSelectElement_HostBindings(rf, ctx) { if (rf & 1) {
        ɵɵlistener("keydown", function NovoSelectElement_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); });
    } }, inputs: { disabled: "disabled", required: "required", tabIndex: "tabIndex", id: "id", name: "name", options: "options", placeholder: "placeholder", readonly: "readonly", headerConfig: "headerConfig", position: "position", displayWith: "displayWith", compareWith: "compareWith", value: "value", multiple: "multiple" }, outputs: { onSelect: "onSelect", selectionChange: "selectionChange", valueChange: "valueChange" }, features: [ɵɵProvidersFeature([
            { provide: NovoFieldControl, useExisting: NovoSelectElement },
            { provide: NOVO_OPTION_PARENT_COMPONENT, useExisting: NovoSelectElement },
        ]), ɵɵInheritDefinitionFeature, ɵɵNgOnChangesFeature], ngContentSelectors: _c4$3, decls: 11, vars: 11, consts: [["type", "button", 3, "tabIndex", "click"], ["dropdownElement", ""], ["class", "novo-select-placeholder", 4, "ngIf"], ["class", "novo-select-display-value", 4, "ngIf"], [1, "bhi-collapse"], [3, "parent", "position", "closing"], ["tabIndex", "-1", 1, "novo-select-list"], ["panel", ""], ["class", "select-header", 3, "open", 4, "ngIf"], [4, "ngFor", "ngForOf"], [1, "novo-select-placeholder"], [1, "novo-select-display-value"], [1, "select-header"], ["icon", "add-thin", "tabIndex", "-1", "class", "header", 3, "click", 4, "ngIf"], [3, "ngClass", 4, "ngIf"], ["icon", "add-thin", "tabIndex", "-1", 1, "header", 3, "click"], [3, "ngClass"], ["autofocus", "", "type", "text", "autocomplete", "off", 3, "placeholder", "ngModel", "ngClass", "ngModelChange"], [3, "click"], [1, "primary", 3, "click"], ["class", "select-item", 3, "active", "value", 4, "ngIf", "ngIfElse"], ["divider", ""], [1, "select-item", 3, "value"], [3, "innerHtml"], ["class", "bhi-check", 4, "ngIf"], [1, "bhi-check"], [1, "select-item-divider"]], template: function NovoSelectElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵelementStart(0, "div", 0, 1);
        ɵɵlistener("click", function NovoSelectElement_Template_div_click_0_listener() { ctx.togglePanel(); return false; });
        ɵɵtemplate(2, NovoSelectElement_span_2_Template, 2, 1, "span", 2);
        ɵɵtemplate(3, NovoSelectElement_span_3_Template, 2, 1, "span", 3);
        ɵɵelement(4, "i", 4);
        ɵɵelementEnd();
        ɵɵelementStart(5, "novo-overlay-template", 5);
        ɵɵlistener("closing", function NovoSelectElement_Template_novo_overlay_template_closing_5_listener() { return ctx.dropdown.nativeElement.focus(); });
        ɵɵelementStart(6, "div", 6, 7);
        ɵɵtemplate(8, NovoSelectElement_novo_option_8_Template, 3, 4, "novo-option", 8);
        ɵɵprojection(9);
        ɵɵtemplate(10, NovoSelectElement_ng_container_10_Template, 4, 2, "ng-container", 9);
        ɵɵelementEnd();
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵpropertyInterpolate("tabIndex", ctx.disabled ? 0 - 1 : 0);
        ɵɵadvance(2);
        ɵɵproperty("ngIf", ctx.empty);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", !ctx.empty);
        ɵɵadvance(2);
        ɵɵproperty("parent", ctx.elementRef)("position", ctx.position);
        ɵɵadvance(1);
        ɵɵclassProp("has-header", ctx.headerConfig)("active", ctx.panelOpen);
        ɵɵadvance(2);
        ɵɵproperty("ngIf", ctx.headerConfig);
        ɵɵadvance(2);
        ɵɵproperty("ngForOf", ctx.filteredOptions);
    } }, directives: [NgIf, NovoOverlayTemplateComponent, NgForOf, NovoOption, NovoButtonElement, NgClass, DefaultValueAccessor, NgControlStatus, NgModel, NovoDividerComponent], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSelectElement, [{
        type: Component,
        args: [{
                selector: 'novo-select',
                inputs: ['disabled', 'required', 'tabIndex'],
                providers: [
                    { provide: NovoFieldControl, useExisting: NovoSelectElement },
                    { provide: NOVO_OPTION_PARENT_COMPONENT, useExisting: NovoSelectElement },
                ],
                template: `
    <div #dropdownElement (click)="togglePanel(); (false)" tabIndex="{{ disabled ? -1 : 0 }}" type="button">
      <span class="novo-select-placeholder" *ngIf="empty">{{ placeholder }}</span>
      <span class="novo-select-display-value" *ngIf="!empty">{{ displayValue }}</span>
      <i class="bhi-collapse"></i>
    </div>
    <novo-overlay-template [parent]="elementRef" [position]="position" (closing)="dropdown.nativeElement.focus()">
      <div #panel class="novo-select-list" tabIndex="-1" [class.has-header]="headerConfig" [class.active]="panelOpen">
        <novo-option *ngIf="headerConfig" class="select-header" [class.open]="header.open">
          <novo-button *ngIf="!header.open" icon="add-thin" (click)="toggleHeader($event); (false)" tabIndex="-1" class="header">
            {{ headerConfig.label }}
          </novo-button>
          <div *ngIf="header.open" [ngClass]="{ active: header.open }">
            <input
              autofocus
              type="text"
              [placeholder]="headerConfig.placeholder"
              [attr.id]="name"
              autocomplete="off"
              [(ngModel)]="header.value"
              [ngClass]="{ invalid: !header.valid }"
            />
            <footer>
              <novo-button (click)="toggleHeader($event, false)">{{ labels.cancel }}</novo-button>
              <novo-button (click)="saveHeader()" class="primary">{{ labels.save }}</novo-button>
            </footer>
          </div>
        </novo-option>
        <!-- Declarative Content Goes Here -->
        <ng-content></ng-content>
        <!-- Data Driven Content Goes Here -->
        <ng-container *ngFor="let option of filteredOptions; let i = index">
          <novo-option
            *ngIf="!option.divider; else divider"
            class="select-item"
            [class.active]="option.active"
            [attr.data-automation-value]="option.label"
            [value]="option.value"
          >
            <span [innerHtml]="highlight(option.label, filterTerm)"></span> <i *ngIf="option.active" class="bhi-check"></i>
          </novo-option>
          <ng-template #divider>
            <novo-divider class="select-item-divider" [class.with-label]="option.label" [class.without-label]="!option.label">
              {{ option?.label }}
            </novo-divider>
          </ng-template>
        </ng-container>
      </div>
    </novo-overlay-template>
  `,
            }]
    }], function () { return [{ type: ElementRef }, { type: NovoLabelService }, { type: ChangeDetectorRef }, { type: FocusMonitor }, { type: NgZone }, { type: ErrorStateMatcher }, { type: NgControl, decorators: [{
                type: Optional
            }, {
                type: Self
            }] }, { type: NgForm, decorators: [{
                type: Optional
            }] }, { type: FormGroupDirective, decorators: [{
                type: Optional
            }] }]; }, { id: [{
            type: Input
        }], name: [{
            type: Input
        }], options: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], readonly: [{
            type: Input
        }], headerConfig: [{
            type: Input
        }], position: [{
            type: Input
        }], onSelect: [{
            type: Output
        }], selectionChange: [{
            type: Output
        }], valueChange: [{
            type: Output
        }], displayWith: [{
            type: Input
        }], compareWith: [{
            type: Input
        }], overlay: [{
            type: ViewChild,
            args: [NovoOverlayTemplateComponent, { static: true }]
        }], dropdown: [{
            type: ViewChild,
            args: ['dropdownElement', { static: true }]
        }], optionGroups: [{
            type: ContentChildren,
            args: [NovoOptgroup, { descendants: true }]
        }], contentOptions: [{
            type: ContentChildren,
            args: [NovoOption, { descendants: true }]
        }], viewOptions: [{
            type: ViewChildren,
            args: [NovoOption]
        }], panel: [{
            type: ViewChild,
            args: ['panel']
        }], value: [{
            type: Input
        }], multiple: [{
            type: Input
        }], _handleKeydown: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }] }); })();

// NG
class NovoSelectModule {
}
NovoSelectModule.ɵmod = ɵɵdefineNgModule({ type: NovoSelectModule });
NovoSelectModule.ɵinj = ɵɵdefineInjector({ factory: function NovoSelectModule_Factory(t) { return new (t || NovoSelectModule)(); }, imports: [[CommonModule, FormsModule, A11yModule, NovoOverlayModule, NovoOptionModule, NovoDividerModule, NovoButtonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoSelectModule, { declarations: [NovoSelectElement], imports: [CommonModule, FormsModule, A11yModule, NovoOverlayModule, NovoOptionModule, NovoDividerModule, NovoButtonModule], exports: [NovoSelectElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSelectModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, FormsModule, A11yModule, NovoOverlayModule, NovoOptionModule, NovoDividerModule, NovoButtonModule],
                declarations: [NovoSelectElement],
                exports: [NovoSelectElement],
            }]
    }], null, null); })();

// NG2
const _c0$Q = function (a0, a1) { return { "bhi-circle": a0, "bhi-check": a1 }; };
function NovoAddressElement_span_0_i_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 9);
} if (rf & 2) {
    const ctx_r6 = ɵɵnextContext(2);
    ɵɵproperty("ngClass", ɵɵpureFunction2(1, _c0$Q, !ctx_r6.valid.address1, ctx_r6.valid.address1));
} }
function NovoAddressElement_span_0_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "span", 6);
    ɵɵtemplate(1, NovoAddressElement_span_0_i_1_Template, 1, 4, "i", 7);
    ɵɵelementStart(2, "input", 8);
    ɵɵlistener("ngModelChange", function NovoAddressElement_span_0_Template_input_ngModelChange_2_listener($event) { ɵɵrestoreView(_r8); const ctx_r7 = ɵɵnextContext(); return ctx_r7.model.address1 = $event; })("ngModelChange", function NovoAddressElement_span_0_Template_input_ngModelChange_2_listener() { ɵɵrestoreView(_r8); const ctx_r9 = ɵɵnextContext(); return ctx_r9.updateControl(); })("focus", function NovoAddressElement_span_0_Template_input_focus_2_listener($event) { ɵɵrestoreView(_r8); const ctx_r10 = ɵɵnextContext(); return ctx_r10.isFocused($event, "address1"); })("blur", function NovoAddressElement_span_0_Template_input_blur_2_listener($event) { ɵɵrestoreView(_r8); const ctx_r11 = ɵɵnextContext(); return ctx_r11.isBlurred($event, "address1"); })("input", function NovoAddressElement_span_0_Template_input_input_2_listener($event) { ɵɵrestoreView(_r8); const ctx_r12 = ɵɵnextContext(); return ctx_r12.onInput($event, "address1"); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵclassProp("invalid", ctx_r0.invalid.address1)("focus", ctx_r0.focused.address1)("disabled", ctx_r0.disabled.address1);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.config.address1.required);
    ɵɵadvance(1);
    ɵɵclassProp("maxlength-error", ctx_r0.invalidMaxlength.address1);
    ɵɵproperty("placeholder", ctx_r0.config.address1.label)("maxlength", ctx_r0.config == null ? null : ctx_r0.config.address1 == null ? null : ctx_r0.config.address1.maxlength)("ngModel", ctx_r0.model.address1);
} }
function NovoAddressElement_span_1_i_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 13);
} if (rf & 2) {
    const ctx_r13 = ɵɵnextContext(2);
    ɵɵproperty("ngClass", ɵɵpureFunction2(1, _c0$Q, !ctx_r13.valid.address2, ctx_r13.valid.address2));
} }
function NovoAddressElement_span_1_Template(rf, ctx) { if (rf & 1) {
    const _r15 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "span", 10);
    ɵɵtemplate(1, NovoAddressElement_span_1_i_1_Template, 1, 4, "i", 11);
    ɵɵelementStart(2, "input", 12);
    ɵɵlistener("ngModelChange", function NovoAddressElement_span_1_Template_input_ngModelChange_2_listener($event) { ɵɵrestoreView(_r15); const ctx_r14 = ɵɵnextContext(); return ctx_r14.model.address2 = $event; })("ngModelChange", function NovoAddressElement_span_1_Template_input_ngModelChange_2_listener() { ɵɵrestoreView(_r15); const ctx_r16 = ɵɵnextContext(); return ctx_r16.updateControl(); })("focus", function NovoAddressElement_span_1_Template_input_focus_2_listener($event) { ɵɵrestoreView(_r15); const ctx_r17 = ɵɵnextContext(); return ctx_r17.isFocused($event, "address2"); })("blur", function NovoAddressElement_span_1_Template_input_blur_2_listener($event) { ɵɵrestoreView(_r15); const ctx_r18 = ɵɵnextContext(); return ctx_r18.isBlurred($event, "address2"); })("input", function NovoAddressElement_span_1_Template_input_input_2_listener($event) { ɵɵrestoreView(_r15); const ctx_r19 = ɵɵnextContext(); return ctx_r19.onInput($event, "address2"); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵclassProp("invalid", ctx_r1.invalid.address2)("focus", ctx_r1.focused.address2)("disabled", ctx_r1.disabled.address2);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r1.config.address2.required);
    ɵɵadvance(1);
    ɵɵclassProp("maxlength-error", ctx_r1.invalidMaxlength.address2);
    ɵɵproperty("placeholder", ctx_r1.config.address2.label)("maxlength", ctx_r1.config == null ? null : ctx_r1.config.address2 == null ? null : ctx_r1.config.address2.maxlength)("ngModel", ctx_r1.model.address2);
} }
function NovoAddressElement_span_2_i_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 17);
} if (rf & 2) {
    const ctx_r20 = ɵɵnextContext(2);
    ɵɵproperty("ngClass", ɵɵpureFunction2(1, _c0$Q, !ctx_r20.valid.city, ctx_r20.valid.city));
} }
function NovoAddressElement_span_2_Template(rf, ctx) { if (rf & 1) {
    const _r22 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "span", 14);
    ɵɵtemplate(1, NovoAddressElement_span_2_i_1_Template, 1, 4, "i", 15);
    ɵɵelementStart(2, "input", 16);
    ɵɵlistener("ngModelChange", function NovoAddressElement_span_2_Template_input_ngModelChange_2_listener($event) { ɵɵrestoreView(_r22); const ctx_r21 = ɵɵnextContext(); return ctx_r21.model.city = $event; })("ngModelChange", function NovoAddressElement_span_2_Template_input_ngModelChange_2_listener() { ɵɵrestoreView(_r22); const ctx_r23 = ɵɵnextContext(); return ctx_r23.updateControl(); })("focus", function NovoAddressElement_span_2_Template_input_focus_2_listener($event) { ɵɵrestoreView(_r22); const ctx_r24 = ɵɵnextContext(); return ctx_r24.isFocused($event, "city"); })("blur", function NovoAddressElement_span_2_Template_input_blur_2_listener($event) { ɵɵrestoreView(_r22); const ctx_r25 = ɵɵnextContext(); return ctx_r25.isBlurred($event, "city"); })("input", function NovoAddressElement_span_2_Template_input_input_2_listener($event) { ɵɵrestoreView(_r22); const ctx_r26 = ɵɵnextContext(); return ctx_r26.onInput($event, "city"); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵclassProp("invalid", ctx_r2.invalid.city)("focus", ctx_r2.focused.city)("disabled", ctx_r2.disabled.city);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r2.config.city.required);
    ɵɵadvance(1);
    ɵɵclassProp("maxlength-error", ctx_r2.invalidMaxlength.city);
    ɵɵproperty("placeholder", ctx_r2.config.city.label)("maxlength", ctx_r2.config == null ? null : ctx_r2.config.city == null ? null : ctx_r2.config.city.maxlength)("ngModel", ctx_r2.model.city);
} }
function NovoAddressElement_span_3_i_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 17);
} if (rf & 2) {
    const ctx_r27 = ɵɵnextContext(2);
    ɵɵproperty("ngClass", ɵɵpureFunction2(1, _c0$Q, !ctx_r27.valid.state, ctx_r27.valid.state));
} }
function NovoAddressElement_span_3_Template(rf, ctx) { if (rf & 1) {
    const _r29 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "span", 18);
    ɵɵtemplate(1, NovoAddressElement_span_3_i_1_Template, 1, 4, "i", 15);
    ɵɵelementStart(2, "novo-picker", 19);
    ɵɵlistener("changed", function NovoAddressElement_span_3_Template_novo_picker_changed_2_listener($event) { ɵɵrestoreView(_r29); const ctx_r28 = ɵɵnextContext(); return ctx_r28.onStateChange($event); })("ngModelChange", function NovoAddressElement_span_3_Template_novo_picker_ngModelChange_2_listener($event) { ɵɵrestoreView(_r29); const ctx_r30 = ɵɵnextContext(); return ctx_r30.model.state = $event; });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵɵnextContext();
    ɵɵclassProp("invalid", ctx_r3.invalid.state)("focus", ctx_r3.focused.state)("disabled", ctx_r3.disabled.state);
    ɵɵproperty("tooltip", ctx_r3.tooltip.state);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r3.config.state.required);
    ɵɵadvance(1);
    ɵɵproperty("config", ctx_r3.config == null ? null : ctx_r3.config.state == null ? null : ctx_r3.config.state.pickerConfig)("placeholder", ctx_r3.config == null ? null : ctx_r3.config.state == null ? null : ctx_r3.config.state.label)("ngModel", ctx_r3.model.state)("disablePickerInput", ctx_r3.disabled.state);
} }
function NovoAddressElement_span_4_i_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 17);
} if (rf & 2) {
    const ctx_r31 = ɵɵnextContext(2);
    ɵɵproperty("ngClass", ɵɵpureFunction2(1, _c0$Q, !ctx_r31.valid.zip, ctx_r31.valid.zip));
} }
function NovoAddressElement_span_4_Template(rf, ctx) { if (rf & 1) {
    const _r33 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "span", 20);
    ɵɵtemplate(1, NovoAddressElement_span_4_i_1_Template, 1, 4, "i", 15);
    ɵɵelementStart(2, "input", 21);
    ɵɵlistener("ngModelChange", function NovoAddressElement_span_4_Template_input_ngModelChange_2_listener($event) { ɵɵrestoreView(_r33); const ctx_r32 = ɵɵnextContext(); return ctx_r32.model.zip = $event; })("ngModelChange", function NovoAddressElement_span_4_Template_input_ngModelChange_2_listener() { ɵɵrestoreView(_r33); const ctx_r34 = ɵɵnextContext(); return ctx_r34.updateControl(); })("focus", function NovoAddressElement_span_4_Template_input_focus_2_listener($event) { ɵɵrestoreView(_r33); const ctx_r35 = ɵɵnextContext(); return ctx_r35.isFocused($event, "zip"); })("blur", function NovoAddressElement_span_4_Template_input_blur_2_listener($event) { ɵɵrestoreView(_r33); const ctx_r36 = ɵɵnextContext(); return ctx_r36.isBlurred($event, "zip"); })("input", function NovoAddressElement_span_4_Template_input_input_2_listener($event) { ɵɵrestoreView(_r33); const ctx_r37 = ɵɵnextContext(); return ctx_r37.onInput($event, "zip"); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵɵnextContext();
    ɵɵclassProp("invalid", ctx_r4.invalid.zip)("focus", ctx_r4.focused.zip)("disabled", ctx_r4.disabled.zip);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r4.config.zip.required);
    ɵɵadvance(1);
    ɵɵclassProp("maxlength-error", ctx_r4.invalidMaxlength.zip);
    ɵɵproperty("placeholder", ctx_r4.config.zip.label)("maxlength", ctx_r4.config == null ? null : ctx_r4.config.zip == null ? null : ctx_r4.config.zip.maxlength)("ngModel", ctx_r4.model.zip);
} }
function NovoAddressElement_span_5_i_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 17);
} if (rf & 2) {
    const ctx_r38 = ɵɵnextContext(2);
    ɵɵproperty("ngClass", ɵɵpureFunction2(1, _c0$Q, !ctx_r38.valid.countryID, ctx_r38.valid.countryID));
} }
function NovoAddressElement_span_5_Template(rf, ctx) { if (rf & 1) {
    const _r40 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "span", 22);
    ɵɵtemplate(1, NovoAddressElement_span_5_i_1_Template, 1, 4, "i", 15);
    ɵɵelementStart(2, "novo-picker", 23);
    ɵɵlistener("changed", function NovoAddressElement_span_5_Template_novo_picker_changed_2_listener($event) { ɵɵrestoreView(_r40); const ctx_r39 = ɵɵnextContext(); return ctx_r39.onCountryChange($event); })("ngModelChange", function NovoAddressElement_span_5_Template_novo_picker_ngModelChange_2_listener($event) { ɵɵrestoreView(_r40); const ctx_r41 = ɵɵnextContext(); return ctx_r41.model.countryID = $event; });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵɵnextContext();
    ɵɵclassProp("invalid", ctx_r5.invalid.countryID)("focus", ctx_r5.focused.countryID)("disabled", ctx_r5.disabled.countryID);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r5.config.countryID.required);
    ɵɵadvance(1);
    ɵɵproperty("config", ctx_r5.config == null ? null : ctx_r5.config.countryID == null ? null : ctx_r5.config.countryID.pickerConfig)("placeholder", ctx_r5.config.countryID.label)("ngModel", ctx_r5.model.countryID)("disablePickerInput", ctx_r5.disabled.countryID);
} }
// Value accessor for the component (supports ngModel)
const ADDRESS_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoAddressElement),
    multi: true,
};
class NovoAddressElement {
    constructor(labels) {
        this.labels = labels;
        this._readOnly = false;
        this.states = [];
        this.fieldList = ['address1', 'address2', 'city', 'state', 'zip', 'countryID'];
        this.onModelChange = () => { };
        this.onModelTouched = () => { };
        this.focused = {};
        this.invalid = {};
        this.disabled = {};
        this.invalidMaxlength = {};
        this.valid = {};
        this.tooltip = {};
        this.initComplete = false;
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
        this.blur = new EventEmitter();
        this.validityChange = new EventEmitter();
    }
    set readOnly(readOnly) {
        this._readOnly = readOnly;
        this.fieldList.forEach((field) => {
            this.disabled[field] = this._readOnly;
        });
        if (this.model) {
            this.updateStates();
        }
    }
    get readOnly() {
        return this._readOnly;
    }
    ngOnInit() {
        if (!this.config) {
            this.config = {};
        }
        if (this.model) {
            this.writeValue(this.model);
            this.updateControl();
        }
        else if (!this.model) {
            this.model = {};
        }
        this.initConfig();
        if (Helpers.isBlank(this.model.countryID)) {
            this.updateStates();
        }
    }
    initConfig() {
        this.fieldList.forEach((field) => {
            if (!this.config.hasOwnProperty(field)) {
                this.config[field] = {
                    hidden: true,
                };
            }
            if (!this.config[field].hasOwnProperty('label')) {
                this.config[field].label = this.labels[field];
            }
            if (this.config.required) {
                this.config[field].required = true;
            }
            if (this.config[field].readOnly || this.config.readOnly) {
                this.config[field].readOnly = true;
                this.disabled[field] = true;
            }
            if (field === 'countryID') {
                if (!this.config[field].pickerConfig) {
                    this.config.countryID.pickerConfig = this.getDefaultCountryConfig();
                }
                this.config[field].pickerConfig.defaultOptions = this.config.countryID.pickerConfig.options;
            }
            if (field === 'state') {
                if (!this.config[field].pickerConfig) {
                    this.config.state.pickerConfig = this.getDefaultStateConfig();
                    this.config[field].pickerConfig.defaultOptions = this.config[field].pickerConfig.options;
                }
                this.stateOptions = this.config[field].pickerConfig.options;
                this.config[field].pickerConfig.options = (query = '') => {
                    return this.stateOptions(query, this.model.countryID);
                };
                this.config[field].pickerConfig.defaultOptions = this.stateOptions;
            }
        });
    }
    isValid(field) {
        let valid = true;
        if (((this.config[field].required && (Helpers.isBlank(this.model[field]) || Helpers.isEmpty(this.model[field]))) ||
            !this.config[field].required) &&
            !(field === 'countryID' && this.config[field].required && !Helpers.isBlank(this.model.countryID)) &&
            !(field === 'state' &&
                this.config[field].required &&
                (!Helpers.isEmpty(this.model.state) ||
                    ((Helpers.isBlank(this.model.state) || Helpers.isEmpty(this.model.state)) &&
                        !Helpers.isBlank(this.model.countryName) &&
                        this.config.state.pickerConfig &&
                        this.config.state.pickerConfig.defaultOptions &&
                        this.config.state.pickerConfig.defaultOptions.length === 0)))) {
            valid = false;
        }
        else if (!Helpers.isEmpty(this.model[field]) &&
            !Helpers.isBlank(this.config[field].maxlength) &&
            this.config[field].maxlength < this.model[field].length) {
            valid = false;
        }
        this.valid[field] = valid;
    }
    isInvalid(field) {
        let invalid = false;
        let invalidMaxlength = false;
        if ((field !== 'countryID' &&
            field !== 'state' &&
            this.config[field].required &&
            Helpers.isEmpty(this.model[field]) &&
            !Helpers.isBlank(this.model[field])) ||
            (field === 'countryID' && this.config[field].required && Helpers.isBlank(this.model.countryName) && this.config[field].updated) ||
            (field === 'state' &&
                this.config[field].required &&
                (Helpers.isBlank(this.model.state) || Helpers.isEmpty(this.model.state)) &&
                !Helpers.isBlank(this.model.countryID) &&
                this.config[field].updated &&
                this.config.state.pickerConfig &&
                this.config.state.pickerConfig.defaultOptions &&
                this.config.state.pickerConfig.defaultOptions.length > 0)) {
            invalid = true;
        }
        else if (!Helpers.isEmpty(this.model[field]) &&
            !Helpers.isBlank(this.config[field].maxlength) &&
            this.config[field].maxlength < this.model[field].length) {
            invalid = true;
            invalidMaxlength = true;
        }
        this.invalid[field] = invalid;
        this.invalidMaxlength[field] = invalidMaxlength;
    }
    onInput(event, field) {
        this.isInvalid(field);
        this.isValid(field);
        if (event) {
            this.change.emit({ value: this.model[field], field });
        }
    }
    isFocused(event, field) {
        this.focused[field] = true;
        this.focus.emit({ event, field });
    }
    isBlurred(event, field) {
        this.focused[field] = false;
        this.blur.emit({ event, field });
    }
    onCountryChange(evt) {
        const country = evt && evt.rawValue ? evt.rawValue : null;
        let field;
        let statesUpdatable = false;
        this.config.countryID.updated = true;
        if (this.config.countryID.pickerConfig) {
            field = this.config.countryID.pickerConfig.field;
        }
        if (country && field && !Helpers.isBlank(country[field]) && this.model.countryID !== country[field]) {
            this.model.countryID = country[field];
            this.model.countryName = Helpers.interpolate(this.config.countryID.pickerConfig.format, country);
            this.disabled.state = false;
            this.tooltip.state = undefined;
            statesUpdatable = true;
        }
        else if (Helpers.isBlank(country) || Helpers.isBlank(country[field])) {
            this.model.countryID = undefined;
            this.model.countryName = undefined;
            this.disabled.state = true;
            this.tooltip.state = this.labels.selectCountryFirst;
            this.invalid.state = false;
            statesUpdatable = true;
        }
        // Update state
        if (statesUpdatable) {
            this.model.state = undefined;
            this.updateStates();
        }
        this.updateControl();
        this.onInput(null, 'countryID');
        this.onInput(null, 'state');
    }
    onStateChange(evt) {
        const state = evt && evt.value ? evt.value : null;
        this.config.state.updated = true;
        this.model.state = state;
        this.updateControl();
        this.onInput(null, 'state');
    }
    setStateLabel(model) {
        const state = model.state;
        if (!Helpers.isBlank(state)) {
            if (this.config.state.required) {
                this.valid.state = true;
            }
            this.model.state = state;
        }
        else {
            this.model.state = undefined;
            if (this.config.state.required) {
                this.valid.state = false;
            }
        }
    }
    updateStates() {
        if (this.config.state.pickerConfig.options && !Helpers.isBlank(this.model.countryID)) {
            this.config.state.pickerConfig.options = (query = '') => {
                return this.stateOptions(query, this.model.countryID);
            };
            this.stateOptions('', this.model.countryID).then((results) => {
                this.config.state.pickerConfig.defaultOptions = results;
                if (results.length) {
                    this.tooltip.state = undefined;
                    this.disabled.state = this._readOnly;
                    this.setStateLabel(this.model);
                }
                else {
                    this.disabled.state = true;
                    this.tooltip.state = this.labels.noStatesForCountry;
                    if (this.config.state.required) {
                        this.valid.state = true;
                    }
                }
                this.validityChange.emit();
                this.onInput(null, 'state');
            });
        }
        else {
            this.config.state.pickerConfig.defaultOptions = [];
            this.disabled.state = true;
            this.tooltip.state = this.labels.selectCountryFirst;
            if (this.config.state.required) {
                this.valid.state = false;
            }
        }
    }
    getStateOptions(filter = '', countryID) {
        if (countryID) {
            const country = findByCountryId(countryID);
            const states = getStates(country.name);
            if (filter) {
                return states.filter((name) => new RegExp(`${filter}`, 'gi').test(name));
            }
            return states;
        }
        else {
            return [];
        }
    }
    updateControl() {
        this.onModelChange(this.model);
        this.onInput(null, 'countryID');
        this.onInput(null, 'state');
    }
    writeValue(model) {
        let loadingCountries = false;
        if (model) {
            let countryName;
            if (model.countryName && model.countryID) {
                countryName = model.countryName;
            }
            else if (model.countryID) {
                if (this.config.countryID.pickerConfig && this.config.countryID.pickerConfig.getLabels) {
                    if (Helpers.isFunction(this.config.countryID.pickerConfig.getLabels)) {
                        const promise = this.config.countryID.pickerConfig.getLabels(model.countryID);
                        loadingCountries = true;
                        if (promise.then) {
                            promise.then((result) => {
                                loadingCountries = false;
                                countryName = Helpers.interpolateWithFallback(this.config.countryID.pickerConfig.format, result);
                                this.model = Object.assign(model, { countryName });
                                this.updateStates();
                            });
                        }
                    }
                }
            }
            if (countryName) {
                countryName = countryName.trim();
                model.state = model.state || '';
                this.model = Object.assign(model, { countryName });
            }
            else {
                this.model = model;
            }
            if (!loadingCountries && !Helpers.isBlank(this.model.countryID)) {
                this.updateStates();
            }
        }
        this.fieldList.forEach((field) => {
            this.onInput(null, field);
        });
    }
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    getDefaultStateConfig() {
        return {
            field: 'value',
            format: '$label',
            options: (query = '', countryID) => {
                return Promise.resolve(this.getStateOptions(query, countryID));
            },
            getLabels: (state) => {
                return Promise.resolve(state);
            },
        };
    }
    getDefaultCountryConfig() {
        return {
            field: 'value',
            format: '$label',
            options: (query = '') => {
                return new Promise((resolve) => {
                    let countries = COUNTRIES;
                    if (query) {
                        countries = countries.filter((country) => new RegExp(`${query}`, 'gi').test(country.name));
                    }
                    return resolve(countries.map((country) => ({ value: country.id, label: country.name })));
                });
            },
            getLabels: (countryID) => {
                return new Promise((resolve) => {
                    const country = findByCountryId(countryID);
                    if (country) {
                        resolve({ value: country.id, label: country.name });
                    }
                    else {
                        resolve('');
                    }
                });
            },
        };
    }
}
NovoAddressElement.ɵfac = function NovoAddressElement_Factory(t) { return new (t || NovoAddressElement)(ɵɵdirectiveInject(NovoLabelService)); };
NovoAddressElement.ɵcmp = ɵɵdefineComponent({ type: NovoAddressElement, selectors: [["novo-address"]], inputs: { config: "config", readOnly: "readOnly" }, outputs: { change: "change", focus: "focus", blur: "blur", validityChange: "validityChange" }, features: [ɵɵProvidersFeature([ADDRESS_VALUE_ACCESSOR])], decls: 6, vars: 6, consts: [["class", "street-address", 3, "invalid", "focus", "disabled", 4, "ngIf"], ["class", "apt suite", 3, "invalid", "focus", "disabled", 4, "ngIf"], ["class", "city locality", 3, "invalid", "focus", "disabled", 4, "ngIf"], ["class", "state region", 3, "invalid", "focus", "disabled", "tooltip", 4, "ngIf"], ["class", "zip postal-code", 3, "invalid", "focus", "disabled", 4, "ngIf"], ["class", "country-name", 3, "invalid", "focus", "disabled", 4, "ngIf"], [1, "street-address"], ["class", "required-indicator address1", 3, "ngClass", 4, "ngIf"], ["type", "text", "id", "address1", "name", "address1", "autocomplete", "shipping street-address address-line-1", 3, "placeholder", "maxlength", "ngModel", "ngModelChange", "focus", "blur", "input"], [1, "required-indicator", "address1", 3, "ngClass"], [1, "apt", "suite"], ["class", "required-indicator address2", 3, "ngClass", 4, "ngIf"], ["type", "text", "id", "address2", "name", "address2", "autocomplete", "shipping address-line-2", 3, "placeholder", "maxlength", "ngModel", "ngModelChange", "focus", "blur", "input"], [1, "required-indicator", "address2", 3, "ngClass"], [1, "city", "locality"], ["class", "required-indicator", 3, "ngClass", 4, "ngIf"], ["type", "text", "id", "city", "name", "city", "autocomplete", "shipping city locality", 3, "placeholder", "maxlength", "ngModel", "ngModelChange", "focus", "blur", "input"], [1, "required-indicator", 3, "ngClass"], [1, "state", "region", 3, "tooltip"], ["autocomplete", "shipping region", 3, "config", "placeholder", "ngModel", "disablePickerInput", "changed", "ngModelChange"], [1, "zip", "postal-code"], ["type", "text", "id", "zip", "name", "zip", "autocomplete", "shipping postal-code", 3, "placeholder", "maxlength", "ngModel", "ngModelChange", "focus", "blur", "input"], [1, "country-name"], ["autocomplete", "shipping country", 3, "config", "placeholder", "ngModel", "disablePickerInput", "changed", "ngModelChange"]], template: function NovoAddressElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵtemplate(0, NovoAddressElement_span_0_Template, 3, 12, "span", 0);
        ɵɵtemplate(1, NovoAddressElement_span_1_Template, 3, 12, "span", 1);
        ɵɵtemplate(2, NovoAddressElement_span_2_Template, 3, 12, "span", 2);
        ɵɵtemplate(3, NovoAddressElement_span_3_Template, 3, 12, "span", 3);
        ɵɵtemplate(4, NovoAddressElement_span_4_Template, 3, 12, "span", 4);
        ɵɵtemplate(5, NovoAddressElement_span_5_Template, 3, 11, "span", 5);
    } if (rf & 2) {
        ɵɵproperty("ngIf", !(ctx.config == null ? null : ctx.config.address1 == null ? null : ctx.config.address1.hidden));
        ɵɵadvance(1);
        ɵɵproperty("ngIf", !(ctx.config == null ? null : ctx.config.address2 == null ? null : ctx.config.address2.hidden));
        ɵɵadvance(1);
        ɵɵproperty("ngIf", !(ctx.config == null ? null : ctx.config.city == null ? null : ctx.config.city.hidden));
        ɵɵadvance(1);
        ɵɵproperty("ngIf", !(ctx.config == null ? null : ctx.config.state == null ? null : ctx.config.state.hidden));
        ɵɵadvance(1);
        ɵɵproperty("ngIf", !(ctx.config == null ? null : ctx.config.zip == null ? null : ctx.config.zip.hidden));
        ɵɵadvance(1);
        ɵɵproperty("ngIf", !(ctx.config == null ? null : ctx.config.countryID == null ? null : ctx.config.countryID.hidden));
    } }, directives: [NgIf, DefaultValueAccessor, MaxLengthValidator, NgControlStatus, NgModel, NgClass, TooltipDirective, NovoPickerElement], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoAddressElement, [{
        type: Component,
        args: [{
                selector: 'novo-address',
                providers: [ADDRESS_VALUE_ACCESSOR],
                template: `
    <span
      *ngIf="!config?.address1?.hidden"
      class="street-address"
      [class.invalid]="invalid.address1"
      [class.focus]="focused.address1"
      [class.disabled]="disabled.address1"
    >
      <i
        *ngIf="config.address1.required"
        class="required-indicator address1"
        [ngClass]="{ 'bhi-circle': !valid.address1, 'bhi-check': valid.address1 }"
      >
      </i>
      <input
        [class.maxlength-error]="invalidMaxlength.address1"
        type="text"
        id="address1"
        name="address1"
        [placeholder]="config.address1.label"
        [maxlength]="config?.address1?.maxlength"
        autocomplete="shipping street-address address-line-1"
        [(ngModel)]="model.address1"
        (ngModelChange)="updateControl()"
        (focus)="isFocused($event, 'address1')"
        (blur)="isBlurred($event, 'address1')"
        (input)="onInput($event, 'address1')"
      />
    </span>
    <span
      *ngIf="!config?.address2?.hidden"
      class="apt suite"
      [class.invalid]="invalid.address2"
      [class.focus]="focused.address2"
      [class.disabled]="disabled.address2"
    >
      <i
        *ngIf="config.address2.required"
        class="required-indicator address2"
        [ngClass]="{ 'bhi-circle': !valid.address2, 'bhi-check': valid.address2 }"
      >
      </i>
      <input
        [class.maxlength-error]="invalidMaxlength.address2"
        type="text"
        id="address2"
        name="address2"
        [placeholder]="config.address2.label"
        [maxlength]="config?.address2?.maxlength"
        autocomplete="shipping address-line-2"
        [(ngModel)]="model.address2"
        (ngModelChange)="updateControl()"
        (focus)="isFocused($event, 'address2')"
        (blur)="isBlurred($event, 'address2')"
        (input)="onInput($event, 'address2')"
      />
    </span>
    <span
      *ngIf="!config?.city?.hidden"
      class="city locality"
      [class.invalid]="invalid.city"
      [class.focus]="focused.city"
      [class.disabled]="disabled.city"
    >
      <i *ngIf="config.city.required" class="required-indicator" [ngClass]="{ 'bhi-circle': !valid.city, 'bhi-check': valid.city }"> </i>
      <input
        [class.maxlength-error]="invalidMaxlength.city"
        type="text"
        id="city"
        name="city"
        [placeholder]="config.city.label"
        autocomplete="shipping city locality"
        [maxlength]="config?.city?.maxlength"
        [(ngModel)]="model.city"
        (ngModelChange)="updateControl()"
        (focus)="isFocused($event, 'city')"
        (blur)="isBlurred($event, 'city')"
        (input)="onInput($event, 'city')"
      />
    </span>
    <span
      *ngIf="!config?.state?.hidden"
      class="state region"
      [class.invalid]="invalid.state"
      [class.focus]="focused.state"
      [class.disabled]="disabled.state"
      [tooltip]="tooltip.state"
    >
      <i *ngIf="config.state.required" class="required-indicator" [ngClass]="{ 'bhi-circle': !valid.state, 'bhi-check': valid.state }"> </i>
      <novo-picker
        [config]="config?.state?.pickerConfig"
        [placeholder]="config?.state?.label"
        (changed)="onStateChange($event)"
        autocomplete="shipping region"
        [(ngModel)]="model.state"
        [disablePickerInput]="disabled.state"
      ></novo-picker>
    </span>
    <span
      *ngIf="!config?.zip?.hidden"
      class="zip postal-code"
      [class.invalid]="invalid.zip"
      [class.focus]="focused.zip"
      [class.disabled]="disabled.zip"
    >
      <i *ngIf="config.zip.required" class="required-indicator" [ngClass]="{ 'bhi-circle': !valid.zip, 'bhi-check': valid.zip }"> </i>
      <input
        [class.maxlength-error]="invalidMaxlength.zip"
        type="text"
        id="zip"
        name="zip"
        [placeholder]="config.zip.label"
        autocomplete="shipping postal-code"
        [maxlength]="config?.zip?.maxlength"
        [(ngModel)]="model.zip"
        (ngModelChange)="updateControl()"
        (focus)="isFocused($event, 'zip')"
        (blur)="isBlurred($event, 'zip')"
        (input)="onInput($event, 'zip')"
      />
    </span>
    <span
      *ngIf="!config?.countryID?.hidden"
      class="country-name"
      [class.invalid]="invalid.countryID"
      [class.focus]="focused.countryID"
      [class.disabled]="disabled.countryID"
    >
      <i
        *ngIf="config.countryID.required"
        class="required-indicator"
        [ngClass]="{ 'bhi-circle': !valid.countryID, 'bhi-check': valid.countryID }"
      >
      </i>
      <novo-picker
        [config]="config?.countryID?.pickerConfig"
        [placeholder]="config.countryID.label"
        (changed)="onCountryChange($event)"
        autocomplete="shipping country"
        [(ngModel)]="model.countryID"
        [disablePickerInput]="disabled.countryID"
      ></novo-picker>
    </span>
  `,
            }]
    }], function () { return [{ type: NovoLabelService }]; }, { config: [{
            type: Input
        }], readOnly: [{
            type: Input
        }], change: [{
            type: Output
        }], focus: [{
            type: Output
        }], blur: [{
            type: Output
        }], validityChange: [{
            type: Output
        }] }); })();

// NG2
function NovoCheckboxElement_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r0.label);
} }
function NovoCheckboxElement_span_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵprojection(1);
    ɵɵelementEnd();
} }
const _c0$R = ["*"];
// Value accessor for the component (supports ngModel)
const CHECKBOX_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoCheckboxElement),
    multi: true,
};
const LAYOUT_DEFAULTS = { iconStyle: 'box' };
class NovoCheckboxElement {
    constructor(ref) {
        this.ref = ref;
        this.indeterminate = false;
        this.disabled = false;
        this.onSelect = new EventEmitter();
        this.boxIcon = true;
        this.onModelChange = () => { };
        this.onModelTouched = () => { };
    }
    ngOnInit() {
        this.layoutOptions = Object.assign({}, LAYOUT_DEFAULTS, this.layoutOptions);
        this.boxIcon = this.layoutOptions.iconStyle === 'box';
    }
    select(event) {
        Helpers.swallowEvent(event);
        if (!this.disabled) {
            this.model = !this.model;
            this.onModelChange(this.model);
            this.onSelect.emit({ originalEvent: event, value: this.model });
        }
    }
    writeValue(model) {
        this.model = model;
        this.ref.markForCheck();
    }
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    setDisabledState(disabled) {
        this.disabled = disabled;
    }
}
NovoCheckboxElement.ɵfac = function NovoCheckboxElement_Factory(t) { return new (t || NovoCheckboxElement)(ɵɵdirectiveInject(ChangeDetectorRef)); };
NovoCheckboxElement.ɵcmp = ɵɵdefineComponent({ type: NovoCheckboxElement, selectors: [["novo-checkbox"]], inputs: { name: "name", label: "label", indeterminate: "indeterminate", disabled: "disabled", layoutOptions: "layoutOptions" }, outputs: { onSelect: "onSelect" }, features: [ɵɵProvidersFeature([CHECKBOX_VALUE_ACCESSOR])], ngContentSelectors: _c0$R, decls: 6, vars: 25, consts: [[1, "check-box-group"], ["type", "checkbox", 3, "name", "ngModel", "disabled", "ngModelChange"], [3, "click"], [4, "ngIf"]], template: function NovoCheckboxElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵelementStart(0, "div", 0);
        ɵɵelementStart(1, "input", 1);
        ɵɵlistener("ngModelChange", function NovoCheckboxElement_Template_input_ngModelChange_1_listener($event) { return ctx.model = $event; });
        ɵɵelementEnd();
        ɵɵelementStart(2, "label", 2);
        ɵɵlistener("click", function NovoCheckboxElement_Template_label_click_2_listener($event) { return ctx.select($event); });
        ɵɵelement(3, "i");
        ɵɵtemplate(4, NovoCheckboxElement_span_4_Template, 2, 1, "span", 3);
        ɵɵtemplate(5, NovoCheckboxElement_span_5_Template, 2, 0, "span", 3);
        ɵɵelementEnd();
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵclassProp("checked", ctx.model)("disabled", ctx.disabled);
        ɵɵadvance(1);
        ɵɵproperty("name", ctx.name)("ngModel", ctx.model)("disabled", ctx.disabled);
        ɵɵattribute("id", ctx.name);
        ɵɵadvance(1);
        ɵɵclassProp("disabled", ctx.disabled);
        ɵɵattribute("for", ctx.name);
        ɵɵadvance(1);
        ɵɵclassProp("bhi-checkbox-empty", !ctx.model && !ctx.indeterminate && ctx.boxIcon)("bhi-checkbox-filled", ctx.model && !ctx.indeterminate && ctx.boxIcon)("bhi-checkbox-indeterminate", ctx.indeterminate && ctx.boxIcon)("bhi-circle-o", !ctx.model && !ctx.indeterminate && !ctx.boxIcon)("bhi-check", ctx.model && !ctx.indeterminate && !ctx.boxIcon)("bhi-circle", ctx.indeterminate && !ctx.boxIcon);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.label);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", !ctx.label);
    } }, directives: [CheckboxControlValueAccessor, NgControlStatus, NgModel, NgIf], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoCheckboxElement, [{
        type: Component,
        args: [{
                selector: 'novo-checkbox',
                providers: [CHECKBOX_VALUE_ACCESSOR],
                template: `
    <div class="check-box-group" [class.checked]="model" [class.disabled]="disabled">
      <input [name]="name" type="checkbox" [(ngModel)]="model" [attr.id]="name" [disabled]="disabled" />
      <label [attr.for]="name" (click)="select($event)" [class.disabled]="disabled">
        <i
          [class.bhi-checkbox-empty]="!model && !indeterminate && boxIcon"
          [class.bhi-checkbox-filled]="model && !indeterminate && boxIcon"
          [class.bhi-checkbox-indeterminate]="indeterminate && boxIcon"
          [class.bhi-circle-o]="!model && !indeterminate && !boxIcon"
          [class.bhi-check]="model && !indeterminate && !boxIcon"
          [class.bhi-circle]="indeterminate && !boxIcon"
        ></i>
        <span *ngIf="label">{{ label }}</span>
        <span *ngIf="!label"><ng-content></ng-content></span>
      </label>
    </div>
  `,
            }]
    }], function () { return [{ type: ChangeDetectorRef }]; }, { name: [{
            type: Input
        }], label: [{
            type: Input
        }], indeterminate: [{
            type: Input
        }], disabled: [{
            type: Input
        }], layoutOptions: [{
            type: Input
        }], onSelect: [{
            type: Output
        }] }); })();

// NG2
const _c0$S = function (a0) { return { checked: a0 }; };
const _c1$i = function (a0, a1) { return { "bhi-checkbox-empty": a0, "bhi-checkbox-filled": a1 }; };
function NovoCheckListElement_div_0_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 1);
    ɵɵelementStart(1, "input", 2);
    ɵɵlistener("change", function NovoCheckListElement_div_0_Template_input_change_1_listener($event) { ɵɵrestoreView(_r4); const option_r1 = ctx.$implicit; const ctx_r3 = ɵɵnextContext(); return ctx_r3.select($event, option_r1); });
    ɵɵelementEnd();
    ɵɵelementStart(2, "label", 3);
    ɵɵlistener("click", function NovoCheckListElement_div_0_Template_label_click_2_listener($event) { ɵɵrestoreView(_r4); const option_r1 = ctx.$implicit; const ctx_r5 = ɵɵnextContext(); return ctx_r5.select($event, option_r1); });
    ɵɵelement(3, "i", 4);
    ɵɵelementStart(4, "span");
    ɵɵtext(5);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const option_r1 = ctx.$implicit;
    const i_r2 = ctx.index;
    const ctx_r0 = ɵɵnextContext();
    ɵɵclassProp("disabled", ctx_r0.disabled);
    ɵɵproperty("ngClass", ɵɵpureFunction1(12, _c0$S, option_r1.checked));
    ɵɵattribute("data-automation-id", option_r1.label);
    ɵɵadvance(1);
    ɵɵproperty("name", ctx_r0.name)("ngModel", option_r1.checked)("value", option_r1.checked)("disabled", ctx_r0.disabled);
    ɵɵattribute("id", ctx_r0.name + i_r2);
    ɵɵadvance(1);
    ɵɵattribute("for", ctx_r0.name + i_r2);
    ɵɵadvance(1);
    ɵɵproperty("ngClass", ɵɵpureFunction2(14, _c1$i, !option_r1.checked, option_r1.checked));
    ɵɵadvance(2);
    ɵɵtextInterpolate(option_r1.label);
} }
// Value accessor for the component (supports ngModel)
const CHECKLIST_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoCheckListElement),
    multi: true,
};
class NovoCheckListElement {
    constructor() {
        this.onSelect = new EventEmitter();
        this.onModelChange = () => { };
        this.onModelTouched = () => { };
    }
    ngOnInit() {
        this.setModel();
        this.setupOptions();
    }
    select(event, item) {
        Helpers.swallowEvent(event);
        if (!this.disabled) {
            item.checked = !item.checked;
            this.model = this._options.filter((checkBox) => checkBox.checked).map((x) => x.value);
            this.onModelChange(this.model.length > 0 ? this.model : '');
            this.onSelect.emit({ selected: this.model });
        }
    }
    setupOptions() {
        this.options = this.options || [];
        this._options = [];
        if (this.options.length && !this.options[0].value) {
            this.options.forEach((option) => {
                const formattedOption = {
                    value: option,
                    label: option,
                    checked: this.model && this.model.length && this.model.indexOf(option.value) !== -1,
                };
                this._options.push(formattedOption);
            });
        }
        else {
            this.options.forEach((option) => {
                const formattedOption = option;
                formattedOption.checked = this.model && this.model.length && this.model.indexOf(option.value) !== -1;
                this._options.push(formattedOption);
            });
        }
    }
    setModel() {
        const checkedOptions = this.options.filter((checkBox) => checkBox.checked).map((x) => x.value);
        this.writeValue(checkedOptions);
    }
    writeValue(model) {
        this.model = model || [];
        if (model) {
            this.setupOptions();
        }
    }
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    setDisabledState(disabled) {
        this.disabled = disabled;
    }
}
NovoCheckListElement.ɵfac = function NovoCheckListElement_Factory(t) { return new (t || NovoCheckListElement)(); };
NovoCheckListElement.ɵcmp = ɵɵdefineComponent({ type: NovoCheckListElement, selectors: [["novo-check-list"]], inputs: { name: "name", options: "options", disabled: "disabled" }, outputs: { onSelect: "onSelect" }, features: [ɵɵProvidersFeature([CHECKLIST_VALUE_ACCESSOR])], decls: 1, vars: 1, consts: [["class", "check-box-group", 3, "ngClass", "disabled", 4, "ngFor", "ngForOf"], [1, "check-box-group", 3, "ngClass"], ["type", "checkbox", 3, "name", "ngModel", "value", "disabled", "change"], [3, "click"], [3, "ngClass"]], template: function NovoCheckListElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵtemplate(0, NovoCheckListElement_div_0_Template, 6, 17, "div", 0);
    } if (rf & 2) {
        ɵɵproperty("ngForOf", ctx._options);
    } }, directives: [NgForOf, NgClass, CheckboxControlValueAccessor, NgControlStatus, NgModel], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoCheckListElement, [{
        type: Component,
        args: [{
                selector: 'novo-check-list',
                providers: [CHECKLIST_VALUE_ACCESSOR],
                template: `
    <div
      class="check-box-group"
      *ngFor="let option of _options; let i = index"
      [ngClass]="{ checked: option.checked }"
      [class.disabled]="disabled"
      [attr.data-automation-id]="option.label"
    >
      <input
        [name]="name"
        type="checkbox"
        [ngModel]="option.checked"
        [attr.id]="name + i"
        [value]="option.checked"
        (change)="select($event, option)"
        [disabled]="disabled"
      />
      <label [attr.for]="name + i" (click)="select($event, option)">
        <i [ngClass]="{ 'bhi-checkbox-empty': !option.checked, 'bhi-checkbox-filled': option.checked }"></i>
        <span>{{ option.label }}</span>
      </label>
    </div>
  `,
            }]
    }], null, { name: [{
            type: Input
        }], options: [{
            type: Input
        }], disabled: [{
            type: Input
        }], onSelect: [{
            type: Output
        }] }); })();

class NovoFile {
    constructor(file) {
        this.name = '';
        this.contentType = '';
        this.lastModified = 0;
        this.size = 0;
        this.loaded = false;
        this.reader = new FileReader();
        this.name = `${encodeURIComponent(file.name || '')}`;
        this.contentType = file.type;
        this.lastModified = file.lastModified;
        this.size = file.size;
        this.file = file;
        this.reader.onload = (event) => {
            this.fileContents = event.target.result.split(',')[1];
            this.dataURL = event.target.result;
            this.loaded = true;
            if (this.readPromise) {
                this.readPromise(this);
            }
        };
    }
    read() {
        return new Promise((resolve) => {
            this.readPromise = resolve;
            // when the file is read it triggers the onload event above.
            this.reader.readAsDataURL(this.file);
        });
    }
    toJSON() {
        return {
            name: this.name,
            contentType: this.type,
            lastModified: this.lastModified,
            size: this.size,
            fileContents: this.fileContents,
        };
    }
}

// NG2
const _c0$T = ["fileInput"];
const _c1$j = ["fileOutput"];
const _c2$9 = ["container"];
function NovoFileInputElement_ng_template_2_input_1_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "input", 8);
    ɵɵlistener("change", function NovoFileInputElement_ng_template_2_input_1_Template_input_change_0_listener($event) { ɵɵrestoreView(_r10); const ctx_r9 = ɵɵnextContext(2); return ctx_r9.check($event); });
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵɵnextContext(2);
    ɵɵproperty("name", ctx_r5.name);
    ɵɵattribute("id", ctx_r5.name)("multiple", ctx_r5.multiple)("data-feature-id", ctx_r5.dataFeatureId);
} }
function NovoFileInputElement_ng_template_2_input_2_Template(rf, ctx) { if (rf & 1) {
    const _r12 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "input", 8);
    ɵɵlistener("change", function NovoFileInputElement_ng_template_2_input_2_Template_input_change_0_listener($event) { ɵɵrestoreView(_r12); const ctx_r11 = ɵɵnextContext(2); return ctx_r11.customCheck($event); });
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵɵnextContext(2);
    ɵɵproperty("name", ctx_r6.name);
    ɵɵattribute("id", ctx_r6.name)("multiple", ctx_r6.multiple)("data-feature-id", ctx_r6.dataFeatureId);
} }
function NovoFileInputElement_ng_template_2_label_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "label", 9);
    ɵɵelementStart(1, "div");
    ɵɵelement(2, "i", 10);
    ɵɵtext(3);
    ɵɵelementStart(4, "strong", 11);
    ɵɵtext(5);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵɵnextContext(2);
    ɵɵattribute("for", ctx_r7.name);
    ɵɵadvance(3);
    ɵɵtextInterpolate2("", ctx_r7.placeholder || ctx_r7.labels.chooseAFile, " ", ctx_r7.labels.or, " ");
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r7.labels.clickToBrowse);
} }
function NovoFileInputElement_ng_template_2_label_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "label", 12);
    ɵɵelementStart(1, "span");
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementStart(3, "small");
    ɵɵtext(4);
    ɵɵelementStart(5, "strong", 11);
    ɵɵtext(6);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r8 = ɵɵnextContext(2);
    ɵɵattribute("for", ctx_r8.name);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r8.placeholder || ctx_r8.labels.chooseAFile);
    ɵɵadvance(2);
    ɵɵtextInterpolate1("", ctx_r8.labels.or, " ");
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r8.labels.clickToBrowse);
} }
function NovoFileInputElement_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 3);
    ɵɵtemplate(1, NovoFileInputElement_ng_template_2_input_1_Template, 1, 4, "input", 4);
    ɵɵtemplate(2, NovoFileInputElement_ng_template_2_input_2_Template, 1, 4, "input", 4);
    ɵɵelementStart(3, "section", 5);
    ɵɵtemplate(4, NovoFileInputElement_ng_template_2_label_4_Template, 6, 4, "label", 6);
    ɵɵtemplate(5, NovoFileInputElement_ng_template_2_label_5_Template, 7, 4, "label", 7);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵclassProp("disabled", ctx_r2.disabled)("active", ctx_r2.active);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !ctx_r2.layoutOptions.customActions);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r2.layoutOptions.customActions);
    ɵɵadvance(1);
    ɵɵproperty("ngSwitch", ctx_r2.layoutOptions.labelStyle);
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", "no-box");
} }
function NovoFileInputElement_ng_template_4_div_1_i_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 19);
} }
function NovoFileInputElement_ng_template_4_div_1_label_2_span_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵtext(1, "||");
    ɵɵelementEnd();
} }
function NovoFileInputElement_ng_template_4_div_1_label_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "label");
    ɵɵelementStart(1, "span");
    ɵɵelementStart(2, "a", 20);
    ɵɵtext(3);
    ɵɵpipe(4, "decodeURI");
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵtemplate(5, NovoFileInputElement_ng_template_4_div_1_label_2_span_5_Template, 2, 0, "span", 17);
    ɵɵelementStart(6, "span");
    ɵɵtext(7);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const file_r14 = ɵɵnextContext().$implicit;
    ɵɵadvance(2);
    ɵɵpropertyInterpolate("href", file_r14.link, ɵɵsanitizeUrl);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ɵɵpipeBind1(4, 4, file_r14.name));
    ɵɵadvance(2);
    ɵɵproperty("ngIf", file_r14.description);
    ɵɵadvance(2);
    ɵɵtextInterpolate(file_r14.description);
} }
function NovoFileInputElement_ng_template_4_div_1_label_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "label");
    ɵɵtext(1);
    ɵɵpipe(2, "decodeURI");
    ɵɵelementEnd();
} if (rf & 2) {
    const file_r14 = ɵɵnextContext().$implicit;
    ɵɵadvance(1);
    ɵɵtextInterpolate(ɵɵpipeBind1(2, 1, file_r14.name));
} }
function NovoFileInputElement_ng_template_4_div_1_div_4_div_1_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r29 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 24);
    ɵɵlistener("click", function NovoFileInputElement_ng_template_4_div_1_div_4_div_1_button_1_Template_button_click_0_listener() { ɵɵrestoreView(_r29); const file_r14 = ɵɵnextContext(3).$implicit; const ctx_r27 = ɵɵnextContext(2); return ctx_r27.download(file_r14); });
    ɵɵelementEnd();
} if (rf & 2) {
    ɵɵattribute("data-automation-id", "file-download");
} }
function NovoFileInputElement_ng_template_4_div_1_div_4_div_1_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r32 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 25);
    ɵɵlistener("click", function NovoFileInputElement_ng_template_4_div_1_div_4_div_1_button_2_Template_button_click_0_listener() { ɵɵrestoreView(_r32); const file_r14 = ɵɵnextContext(3).$implicit; const ctx_r30 = ɵɵnextContext(2); return ctx_r30.remove(file_r14); });
    ɵɵelementEnd();
} if (rf & 2) {
    ɵɵattribute("data-automation-id", "file-remove");
} }
function NovoFileInputElement_ng_template_4_div_1_div_4_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div");
    ɵɵtemplate(1, NovoFileInputElement_ng_template_4_div_1_div_4_div_1_button_1_Template, 1, 1, "button", 22);
    ɵɵtemplate(2, NovoFileInputElement_ng_template_4_div_1_div_4_div_1_button_2_Template, 1, 1, "button", 23);
    ɵɵelementEnd();
} if (rf & 2) {
    const file_r14 = ɵɵnextContext(2).$implicit;
    const ctx_r23 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r23.layoutOptions.download);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !ctx_r23.disabled && (ctx_r23.layoutOptions.removable || !ctx_r23.layoutOptions.removable && ctx_r23.layoutOptions.removableWhenNew && !file_r14.link));
} }
function NovoFileInputElement_ng_template_4_div_1_div_4_div_2_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r39 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 27);
    ɵɵlistener("click", function NovoFileInputElement_ng_template_4_div_1_div_4_div_2_button_1_Template_button_click_0_listener() { ɵɵrestoreView(_r39); const file_r14 = ɵɵnextContext(3).$implicit; const ctx_r37 = ɵɵnextContext(2); return ctx_r37.customEdit(file_r14); });
    ɵɵelementEnd();
} if (rf & 2) {
    ɵɵattribute("data-automation-id", "file-edit");
} }
function NovoFileInputElement_ng_template_4_div_1_div_4_div_2_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r42 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 24);
    ɵɵlistener("click", function NovoFileInputElement_ng_template_4_div_1_div_4_div_2_button_2_Template_button_click_0_listener() { ɵɵrestoreView(_r42); const file_r14 = ɵɵnextContext(3).$implicit; const ctx_r40 = ɵɵnextContext(2); return ctx_r40.customSave(file_r14); });
    ɵɵelementEnd();
} if (rf & 2) {
    ɵɵattribute("data-automation-id", "file-download");
} }
function NovoFileInputElement_ng_template_4_div_1_div_4_div_2_button_3_Template(rf, ctx) { if (rf & 1) {
    const _r45 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 25);
    ɵɵlistener("click", function NovoFileInputElement_ng_template_4_div_1_div_4_div_2_button_3_Template_button_click_0_listener() { ɵɵrestoreView(_r45); const file_r14 = ɵɵnextContext(3).$implicit; const ctx_r43 = ɵɵnextContext(2); return ctx_r43.customDelete(file_r14); });
    ɵɵelementEnd();
} if (rf & 2) {
    ɵɵattribute("data-automation-id", "file-remove");
} }
function NovoFileInputElement_ng_template_4_div_1_div_4_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div");
    ɵɵtemplate(1, NovoFileInputElement_ng_template_4_div_1_div_4_div_2_button_1_Template, 1, 1, "button", 26);
    ɵɵtemplate(2, NovoFileInputElement_ng_template_4_div_1_div_4_div_2_button_2_Template, 1, 1, "button", 22);
    ɵɵtemplate(3, NovoFileInputElement_ng_template_4_div_1_div_4_div_2_button_3_Template, 1, 1, "button", 23);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r24 = ɵɵnextContext(4);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r24.layoutOptions.edit && !ctx_r24.disabled);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r24.layoutOptions.download);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !ctx_r24.disabled);
} }
function NovoFileInputElement_ng_template_4_div_1_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 21);
    ɵɵtemplate(1, NovoFileInputElement_ng_template_4_div_1_div_4_div_1_Template, 3, 2, "div", 17);
    ɵɵtemplate(2, NovoFileInputElement_ng_template_4_div_1_div_4_div_2_Template, 4, 3, "div", 17);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r18 = ɵɵnextContext(3);
    ɵɵattribute("data-automation-id", "file-actions");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !ctx_r18.layoutOptions.customActions);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r18.layoutOptions.customActions);
} }
function NovoFileInputElement_ng_template_4_div_1_novo_loading_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-loading");
} }
function NovoFileInputElement_ng_template_4_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 15);
    ɵɵtemplate(1, NovoFileInputElement_ng_template_4_div_1_i_1_Template, 1, 0, "i", 16);
    ɵɵtemplate(2, NovoFileInputElement_ng_template_4_div_1_label_2_Template, 8, 6, "label", 17);
    ɵɵtemplate(3, NovoFileInputElement_ng_template_4_div_1_label_3_Template, 3, 3, "label", 17);
    ɵɵtemplate(4, NovoFileInputElement_ng_template_4_div_1_div_4_Template, 3, 3, "div", 18);
    ɵɵtemplate(5, NovoFileInputElement_ng_template_4_div_1_novo_loading_5_Template, 1, 0, "novo-loading", 17);
    ɵɵelementEnd();
} if (rf & 2) {
    const file_r14 = ctx.$implicit;
    const ctx_r13 = ɵɵnextContext(2);
    ɵɵclassProp("disabled", ctx_r13.disabled);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r13.layoutOptions.draggable);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", file_r14.link);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !file_r14.link);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", file_r14.loaded);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !file_r14.loaded);
} }
function NovoFileInputElement_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 13);
    ɵɵtemplate(1, NovoFileInputElement_ng_template_4_div_1_Template, 6, 7, "div", 14);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵɵnextContext();
    ɵɵproperty("dragula", ctx_r4.fileOutputBag)("dragulaModel", ctx_r4.files);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r4.files);
} }
// Value accessor for the component (supports ngModel)
const FILE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoFileInputElement),
    multi: true,
};
const LAYOUT_DEFAULTS$1 = { order: 'default', download: true, removable: true, labelStyle: 'default', draggable: false };
class NovoFileInputElement {
    constructor(element, labels, dragula) {
        this.element = element;
        this.labels = labels;
        this.dragula = dragula;
        this.multiple = false;
        this.disabled = false;
        this.value = [];
        this.edit = new EventEmitter();
        this.save = new EventEmitter();
        this.delete = new EventEmitter();
        this.upload = new EventEmitter();
        this.elements = [];
        this.files = [];
        this.active = false;
        this.onModelChange = () => { };
        this.onModelTouched = () => { };
        this.commands = {
            dragenter: this.dragEnterHandler.bind(this),
            dragleave: this.dragLeaveHandler.bind(this),
            dragover: this.dragOverHandler.bind(this),
            drop: this.dropHandler.bind(this),
        };
    }
    ngOnInit() {
        ['dragenter', 'dragleave', 'dragover', 'drop'].forEach((type) => {
            this.element.nativeElement.addEventListener(type, this.commands[type]);
        });
        this.updateLayout();
        this.initializeDragula();
        this.setInitialFileList();
        this.dataFeatureId = this.dataFeatureId ? this.dataFeatureId : this.name;
    }
    ngOnDestroy() {
        ['dragenter', 'dragleave', 'dragover', 'drop'].forEach((type) => {
            this.element.nativeElement.removeEventListener(type, this.commands[type]);
        });
        const dragulaHasFileOutputBag = this.dragula.bags.length > 0 && this.dragula.bags.filter((x) => x.name === this.fileOutputBag).length > 0;
        if (dragulaHasFileOutputBag) {
            this.dragula.destroy(this.fileOutputBag);
        }
    }
    ngOnChanges(changes) {
        this.onModelChange(this.model);
    }
    updateLayout() {
        this.layoutOptions = Object.assign({}, LAYOUT_DEFAULTS$1, this.layoutOptions);
        this.insertTemplatesBasedOnLayout();
    }
    insertTemplatesBasedOnLayout() {
        let order;
        switch (this.layoutOptions.order) {
            case 'displayFilesBelow':
                order = ['fileInput', 'fileOutput'];
                break;
            default:
                order = ['fileOutput', 'fileInput'];
        }
        order.forEach((template) => {
            this.container.createEmbeddedView(this[template], 0);
        });
        return order;
    }
    initializeDragula() {
        this.fileOutputBag = `file-output-${this.dragula.bags.length}`;
        this.dragula.setOptions(this.fileOutputBag, {
            moves: (el, container, handle) => {
                return this.layoutOptions.draggable;
            },
        });
    }
    setInitialFileList() {
        if (this.value) {
            this.files = this.value;
        }
    }
    dragEnterHandler(event) {
        event.preventDefault();
        event.dataTransfer.dropEffect = 'copy';
        this.target = event.target;
        this.active = true;
    }
    dragLeaveHandler(event) {
        event.preventDefault();
        if (this.target === event.target) {
            this.active = false;
        }
    }
    dragOverHandler(event) {
        event.preventDefault();
        // no-op
    }
    dropHandler(event) {
        event.preventDefault();
        this.visible = false;
        if (event.dataTransfer.types[0] !== 'Files') {
            return;
        }
        const options = this.layoutOptions;
        const filelist = Array.from(event.dataTransfer.files);
        if (options.customActions) {
            this.upload.emit(this.multiple ? filelist : [filelist[0]]);
        }
        else {
            this.process(this.multiple ? filelist : [filelist[0]]);
        }
        this.active = false;
    }
    writeValue(model) {
        this.model = model;
    }
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    check(event) {
        this.process(Array.from(event.target.files));
    }
    validate(files) {
        let passedValidation = true;
        if (this.layoutOptions.customValidation) {
            this.layoutOptions.customValidation
                .filter((validation) => validation.action === 'upload')
                .forEach((uploadValidation) => {
                passedValidation = uploadValidation.fn(files) && passedValidation;
            });
        }
        return passedValidation;
    }
    process(filelist) {
        if (this.validate(filelist)) {
            Promise.all(filelist.map((file) => this.readFile(file))).then((files) => {
                if (this.multiple) {
                    this.files.push(...files);
                }
                else {
                    this.files = files;
                }
                this.model = this.files;
                this.onModelChange(this.model);
            });
        }
    }
    download(file) {
        window.open(file.dataURL, '_blank');
    }
    remove(file) {
        this.files.splice(this.files.findIndex((f) => f.name === file.name && f.size === file.size), 1);
        this.model = this.files;
        this.onModelChange(this.model);
    }
    readFile(file) {
        return new NovoFile(file).read();
    }
    customEdit(file) {
        this.edit.emit(file);
    }
    customSave(file) {
        this.save.emit(file);
    }
    customDelete(file) {
        this.delete.emit(file);
    }
    customCheck(event) {
        this.upload.emit(event);
    }
    setDisabledState(disabled) {
        this.disabled = disabled;
    }
}
NovoFileInputElement.ɵfac = function NovoFileInputElement_Factory(t) { return new (t || NovoFileInputElement)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(NovoDragulaService)); };
NovoFileInputElement.ɵcmp = ɵɵdefineComponent({ type: NovoFileInputElement, selectors: [["novo-file-input"]], viewQuery: function NovoFileInputElement_Query(rf, ctx) { if (rf & 1) {
        ɵɵstaticViewQuery(_c0$T, true);
        ɵɵstaticViewQuery(_c1$j, true);
        ɵɵstaticViewQuery(_c2$9, true, ViewContainerRef);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.fileInput = _t.first);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.fileOutput = _t.first);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.container = _t.first);
    } }, inputs: { name: "name", multiple: "multiple", disabled: "disabled", placeholder: "placeholder", layoutOptions: "layoutOptions", value: "value", dataFeatureId: "dataFeatureId" }, outputs: { edit: "edit", save: "save", delete: "delete", upload: "upload" }, features: [ɵɵProvidersFeature([FILE_VALUE_ACCESSOR]), ɵɵNgOnChangesFeature], decls: 6, vars: 0, consts: [["container", ""], ["fileInput", ""], ["fileOutput", ""], [1, "file-input-group"], ["type", "file", "tabindex", "-1", 3, "name", "change", 4, "ngIf"], [3, "ngSwitch"], ["class", "no-box", 4, "ngSwitchCase"], ["class", "boxed", 4, "ngSwitchDefault"], ["type", "file", "tabindex", "-1", 3, "name", "change"], [1, "no-box"], [1, "bhi-dropzone"], [1, "link"], [1, "boxed"], [1, "file-output-group", 3, "dragula", "dragulaModel"], ["class", "file-item", 3, "disabled", 4, "ngFor", "ngForOf"], [1, "file-item"], ["class", "bhi-move", 4, "ngIf"], [4, "ngIf"], ["class", "actions", 4, "ngIf"], [1, "bhi-move"], ["target", "_blank", 3, "href"], [1, "actions"], ["type", "button", "theme", "icon", "icon", "save", "tabindex", "-1", 3, "click", 4, "ngIf"], ["type", "button", "theme", "icon", "icon", "close", "tabindex", "-1", 3, "click", 4, "ngIf"], ["type", "button", "theme", "icon", "icon", "save", "tabindex", "-1", 3, "click"], ["type", "button", "theme", "icon", "icon", "close", "tabindex", "-1", 3, "click"], ["type", "button", "theme", "icon", "icon", "edit", "tabindex", "-1", 3, "click", 4, "ngIf"], ["type", "button", "theme", "icon", "icon", "edit", "tabindex", "-1", 3, "click"]], template: function NovoFileInputElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵelement(0, "div", null, 0);
        ɵɵtemplate(2, NovoFileInputElement_ng_template_2_Template, 6, 8, "ng-template", null, 1, ɵɵtemplateRefExtractor);
        ɵɵtemplate(4, NovoFileInputElement_ng_template_4_Template, 2, 3, "ng-template", null, 2, ɵɵtemplateRefExtractor);
    } }, directives: [NgIf, NgSwitch, NgSwitchCase, NgSwitchDefault, NovoDragulaElement, NgForOf, NovoButtonElement, NovoLoadingElement], pipes: [DecodeURIPipe], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoFileInputElement, [{
        type: Component,
        args: [{
                selector: 'novo-file-input',
                providers: [FILE_VALUE_ACCESSOR],
                template: `
    <div #container></div>
    <ng-template #fileInput>
      <div class="file-input-group" [class.disabled]="disabled" [class.active]="active">
        <input
          *ngIf="!layoutOptions.customActions"
          type="file"
          [name]="name"
          [attr.id]="name"
          (change)="check($event)"
          [attr.multiple]="multiple"
          tabindex="-1"
          [attr.data-feature-id]="dataFeatureId"
        />
        <input
          *ngIf="layoutOptions.customActions"
          type="file"
          [name]="name"
          [attr.id]="name"
          (change)="customCheck($event)"
          [attr.multiple]="multiple"
          tabindex="-1"
          [attr.data-feature-id]="dataFeatureId"
        />
        <section [ngSwitch]="layoutOptions.labelStyle">
          <label *ngSwitchCase="'no-box'" [attr.for]="name" class="no-box">
            <div>
              <i class="bhi-dropzone"></i>{{ placeholder || labels.chooseAFile }} {{ labels.or }}
              <strong class="link">{{ labels.clickToBrowse }}</strong>
            </div>
          </label>
          <label *ngSwitchDefault [attr.for]="name" class="boxed">
            <span>{{ placeholder || labels.chooseAFile }}</span>
            <small
              >{{ labels.or }} <strong class="link">{{ labels.clickToBrowse }}</strong></small
            >
          </label>
        </section>
      </div>
    </ng-template>
    <ng-template #fileOutput>
      <div class="file-output-group" [dragula]="fileOutputBag" [dragulaModel]="files">
        <div class="file-item" *ngFor="let file of files" [class.disabled]="disabled">
          <i *ngIf="layoutOptions.draggable" class="bhi-move"></i>
          <label *ngIf="file.link"
            ><span
              ><a href="{{ file.link }}" target="_blank">{{ file.name | decodeURI }}</a></span
            ><span *ngIf="file.description">||</span><span>{{ file.description }}</span></label
          >
          <label *ngIf="!file.link">{{ file.name | decodeURI }}</label>
          <div class="actions" [attr.data-automation-id]="'file-actions'" *ngIf="file.loaded">
            <div *ngIf="!layoutOptions.customActions">
              <button
                *ngIf="layoutOptions.download"
                type="button"
                theme="icon"
                icon="save"
                (click)="download(file)"
                [attr.data-automation-id]="'file-download'"
                tabindex="-1"
              ></button>
              <button
                *ngIf="!disabled && (layoutOptions.removable || (!layoutOptions.removable && layoutOptions.removableWhenNew && !file.link))"
                type="button"
                theme="icon"
                icon="close"
                (click)="remove(file)"
                [attr.data-automation-id]="'file-remove'"
                tabindex="-1"
              ></button>
            </div>
            <div *ngIf="layoutOptions.customActions">
              <button
                *ngIf="layoutOptions.edit && !disabled"
                type="button"
                theme="icon"
                icon="edit"
                (click)="customEdit(file)"
                [attr.data-automation-id]="'file-edit'"
                tabindex="-1"
              ></button>
              <button
                *ngIf="layoutOptions.download"
                type="button"
                theme="icon"
                icon="save"
                (click)="customSave(file)"
                [attr.data-automation-id]="'file-download'"
                tabindex="-1"
              ></button>
              <button
                *ngIf="!disabled"
                type="button"
                theme="icon"
                icon="close"
                (click)="customDelete(file)"
                [attr.data-automation-id]="'file-remove'"
                tabindex="-1"
              ></button>
            </div>
          </div>
          <novo-loading *ngIf="!file.loaded"></novo-loading>
        </div>
      </div>
    </ng-template>
  `,
            }]
    }], function () { return [{ type: ElementRef }, { type: NovoLabelService }, { type: NovoDragulaService }]; }, { fileInput: [{
            type: ViewChild,
            args: ['fileInput', { static: true }]
        }], fileOutput: [{
            type: ViewChild,
            args: ['fileOutput', { static: true }]
        }], container: [{
            type: ViewChild,
            args: ['container', { read: ViewContainerRef, static: true }]
        }], name: [{
            type: Input
        }], multiple: [{
            type: Input
        }], disabled: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], layoutOptions: [{
            type: Input
        }], value: [{
            type: Input
        }], dataFeatureId: [{
            type: Input
        }], edit: [{
            type: Output
        }], save: [{
            type: Output
        }], delete: [{
            type: Output
        }], upload: [{
            type: Output
        }] }); })();

// NG2
class NovoFormExtrasModule {
}
NovoFormExtrasModule.ɵmod = ɵɵdefineNgModule({ type: NovoFormExtrasModule });
NovoFormExtrasModule.ɵinj = ɵɵdefineInjector({ factory: function NovoFormExtrasModule_Factory(t) { return new (t || NovoFormExtrasModule)(); }, imports: [[
            CommonModule,
            FormsModule,
            NovoPipesModule,
            NovoButtonModule,
            NovoSelectModule,
            NovoPickerModule,
            NovoLoadingModule,
            NovoDragulaModule,
            NovoTooltipModule,
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoFormExtrasModule, { declarations: [NovoAddressElement, NovoCheckboxElement, NovoCheckListElement, NovoFileInputElement], imports: [CommonModule,
        FormsModule,
        NovoPipesModule,
        NovoButtonModule,
        NovoSelectModule,
        NovoPickerModule,
        NovoLoadingModule,
        NovoDragulaModule,
        NovoTooltipModule], exports: [NovoAddressElement, NovoCheckboxElement, NovoCheckListElement, NovoFileInputElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoFormExtrasModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    NovoPipesModule,
                    NovoButtonModule,
                    NovoSelectModule,
                    NovoPickerModule,
                    NovoLoadingModule,
                    NovoDragulaModule,
                    NovoTooltipModule,
                ],
                declarations: [NovoAddressElement, NovoCheckboxElement, NovoCheckListElement, NovoFileInputElement],
                exports: [NovoAddressElement, NovoCheckboxElement, NovoCheckListElement, NovoFileInputElement],
            }]
    }], null, null); })();

// NG2
const _c0$U = function (a0, a1) { return { active: a0, disabled: a1 }; };
function NovoTilesElement_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 2);
    ɵɵlistener("click", function NovoTilesElement_div_1_Template_div_click_0_listener($event) { ɵɵrestoreView(_r4); const option_r1 = ctx.$implicit; const ctx_r3 = ɵɵnextContext(); return ctx_r3.select($event, option_r1); });
    ɵɵelementStart(1, "input", 3);
    ɵɵlistener("change", function NovoTilesElement_div_1_Template_input_change_1_listener($event) { ɵɵrestoreView(_r4); const option_r1 = ctx.$implicit; const ctx_r5 = ɵɵnextContext(); return ctx_r5.select($event, option_r1); })("focus", function NovoTilesElement_div_1_Template_input_focus_1_listener() { ɵɵrestoreView(_r4); const ctx_r6 = ɵɵnextContext(); return ctx_r6.setFocus(true); })("blur", function NovoTilesElement_div_1_Template_input_blur_1_listener() { ɵɵrestoreView(_r4); const ctx_r7 = ɵɵnextContext(); return ctx_r7.setFocus(false); });
    ɵɵelementEnd();
    ɵɵelementStart(2, "label");
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const option_r1 = ctx.$implicit;
    const i_r2 = ctx.index;
    const ctx_r0 = ɵɵnextContext();
    ɵɵproperty("ngClass", ɵɵpureFunction2(9, _c0$U, option_r1.checked, option_r1.disabled));
    ɵɵattribute("data-automation-id", option_r1.label || option_r1);
    ɵɵadvance(1);
    ɵɵproperty("name", ctx_r0.name)("value", option_r1.checked || option_r1.value || option_r1)("disabled", ctx_r0.disabled);
    ɵɵattribute("id", ctx_r0.name + i_r2);
    ɵɵadvance(1);
    ɵɵattribute("for", ctx_r0.name + i_r2)("data-automation-id", option_r1.label || option_r1);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", option_r1.label || option_r1, " ");
} }
// Value accessor for the component (supports ngModel)
const TILES_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoTilesElement),
    multi: true,
};
class NovoTilesElement {
    constructor(element, ref) {
        this.element = element;
        this.ref = ref;
        this.name = new Date().getTime().toString();
        this.disabled = false;
        this.onChange = new EventEmitter();
        this.onSelectedOptionClick = new EventEmitter();
        this.onDisabledOptionClick = new EventEmitter();
        this._options = [];
        this.activeTile = null;
        this.focused = false;
        this.onModelChange = () => { };
        this.onModelTouched = () => { };
    }
    setFocus(focus) {
        this.focused = focus;
    }
    ngAfterContentInit() {
        this.name = this.name || '';
        this.setupOptions();
    }
    ngOnChanges(change) {
        if (change.options && change.options.currentValue && !change.options.firstChange) {
            this.name = this.name || '';
            this._options = [];
            this.setupOptions();
        }
    }
    setupOptions() {
        if (this.options && this.options.length && (this.options[0].value === undefined || this.options[0].value === null)) {
            this._options = this.options.map((x) => {
                const item = { value: x, label: x, checked: this.model === x };
                if (item.checked) {
                    this.setTile(item);
                }
                return item;
            });
        }
        else {
            this._options = this.options.map((x) => {
                x.checked = this.model === x.value || (this.model && this.model.id === x.value);
                if (x.checked) {
                    this.setTile(x);
                }
                return x;
            });
        }
        this.ref.markForCheck();
    }
    select(event, item) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        if (!item.disabled) {
            if (item.checked) {
                this.onSelectedOptionClick.emit(item);
                return;
            }
            for (const option of this._options) {
                option.checked = false;
            }
            item.checked = !item.checked;
            this.onChange.emit(item.value);
            this.onModelChange(item.value);
            this.setTile(item);
            this.model = item.value;
        }
        else {
            this.onDisabledOptionClick.emit(item);
        }
        this.ref.markForCheck();
    }
    setTile(item) {
        if (item) {
            this.activeTile = item.value;
            this.ref.markForCheck();
        }
    }
    writeValue(model) {
        this.model = model;
        if (!Helpers.isBlank(model)) {
            this.setupOptions();
        }
    }
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    setDisabledState(disabled) {
        this.disabled = disabled;
    }
}
NovoTilesElement.ɵfac = function NovoTilesElement_Factory(t) { return new (t || NovoTilesElement)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ChangeDetectorRef)); };
NovoTilesElement.ɵcmp = ɵɵdefineComponent({ type: NovoTilesElement, selectors: [["novo-tiles"]], inputs: { name: "name", options: "options", required: "required", disabled: ["controlDisabled", "disabled"] }, outputs: { onChange: "onChange", onSelectedOptionClick: "onSelectedOptionClick", onDisabledOptionClick: "onDisabledOptionClick" }, features: [ɵɵProvidersFeature([TILES_VALUE_ACCESSOR]), ɵɵNgOnChangesFeature], decls: 2, vars: 5, consts: [[1, "tile-container"], ["class", "tile", 3, "ngClass", "click", 4, "ngFor", "ngForOf"], [1, "tile", 3, "ngClass", "click"], ["type", "radio", 1, "tiles-input", 3, "name", "value", "disabled", "change", "focus", "blur"]], template: function NovoTilesElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "div", 0);
        ɵɵtemplate(1, NovoTilesElement_div_1_Template, 4, 12, "div", 1);
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵclassProp("active", ctx.focused)("disabled", ctx.disabled);
        ɵɵadvance(1);
        ɵɵproperty("ngForOf", ctx._options);
    } }, directives: [NgForOf, NgClass], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTilesElement, [{
        type: Component,
        args: [{
                selector: 'novo-tiles',
                providers: [TILES_VALUE_ACCESSOR],
                template: `
    <div class="tile-container" [class.active]="focused" [class.disabled]="disabled">
      <div
        class="tile"
        *ngFor="let option of _options; let i = index"
        [ngClass]="{ active: option.checked, disabled: option.disabled }"
        (click)="select($event, option)"
        [attr.data-automation-id]="option.label || option"
      >
        <input
          class="tiles-input"
          [name]="name"
          type="radio"
          [value]="option.checked || option.value || option"
          [attr.id]="name + i"
          (change)="select($event, option)"
          (focus)="setFocus(true)"
          (blur)="setFocus(false)"
          [disabled]="disabled"
        />
        <label [attr.for]="name + i" [attr.data-automation-id]="option.label || option">
          {{ option.label || option }}
        </label>
      </div>
    </div>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: ElementRef }, { type: ChangeDetectorRef }]; }, { name: [{
            type: Input
        }], options: [{
            type: Input
        }], required: [{
            type: Input
        }], disabled: [{
            type: Input,
            args: ['controlDisabled']
        }], onChange: [{
            type: Output
        }], onSelectedOptionClick: [{
            type: Output
        }], onDisabledOptionClick: [{
            type: Output
        }] }); })();

// NG2
class NovoTilesModule {
}
NovoTilesModule.ɵmod = ɵɵdefineNgModule({ type: NovoTilesModule });
NovoTilesModule.ɵinj = ɵɵdefineInjector({ factory: function NovoTilesModule_Factory(t) { return new (t || NovoTilesModule)(); }, imports: [[CommonModule, ReactiveFormsModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoTilesModule, { declarations: [NovoTilesElement], imports: [CommonModule, ReactiveFormsModule], exports: [NovoTilesElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTilesModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, ReactiveFormsModule],
                declarations: [NovoTilesElement],
                exports: [NovoTilesElement],
            }]
    }], null, null); })();

function interpolateCell(value, col) {
    if (col.format) {
        return Helpers.interpolateWithFallback(col.format, value);
    }
    return value;
}
class DataTableInterpolatePipe {
    transform(value, column) {
        if (!Helpers.isEmpty(value)) {
            return interpolateCell(value, column);
        }
        return '';
    }
}
DataTableInterpolatePipe.ɵfac = function DataTableInterpolatePipe_Factory(t) { return new (t || DataTableInterpolatePipe)(); };
DataTableInterpolatePipe.ɵpipe = ɵɵdefinePipe({ name: "dataTableInterpolate", type: DataTableInterpolatePipe, pure: true });
/*@__PURE__*/ (function () { ɵsetClassMetadata(DataTableInterpolatePipe, [{
        type: Pipe,
        args: [{
                name: 'dataTableInterpolate',
                pure: true,
            }]
    }], null, null); })();
class DateTableDateRendererPipe {
    constructor(labels) {
        this.labels = labels;
    }
    transform(value, column) {
        if (!Helpers.isEmpty(value)) {
            return column.format ? value : this.labels.formatDate(interpolateCell(value, column));
        }
        return '';
    }
}
DateTableDateRendererPipe.ɵfac = function DateTableDateRendererPipe_Factory(t) { return new (t || DateTableDateRendererPipe)(ɵɵdirectiveInject(NovoLabelService)); };
DateTableDateRendererPipe.ɵpipe = ɵɵdefinePipe({ name: "dataTableDateRenderer", type: DateTableDateRendererPipe, pure: true });
/*@__PURE__*/ (function () { ɵsetClassMetadata(DateTableDateRendererPipe, [{
        type: Pipe,
        args: [{
                name: 'dataTableDateRenderer',
                pure: true,
            }]
    }], function () { return [{ type: NovoLabelService }]; }, null); })();
class DateTableDateTimeRendererPipe {
    constructor(labels) {
        this.labels = labels;
    }
    transform(value, column) {
        if (!Helpers.isEmpty(value)) {
            return column.format ? value : this.labels.formatDateShort(interpolateCell(value, column));
        }
        return '';
    }
}
DateTableDateTimeRendererPipe.ɵfac = function DateTableDateTimeRendererPipe_Factory(t) { return new (t || DateTableDateTimeRendererPipe)(ɵɵdirectiveInject(NovoLabelService)); };
DateTableDateTimeRendererPipe.ɵpipe = ɵɵdefinePipe({ name: "dataTableDateTimeRenderer", type: DateTableDateTimeRendererPipe, pure: true });
/*@__PURE__*/ (function () { ɵsetClassMetadata(DateTableDateTimeRendererPipe, [{
        type: Pipe,
        args: [{
                name: 'dataTableDateTimeRenderer',
                pure: true,
            }]
    }], function () { return [{ type: NovoLabelService }]; }, null); })();
class DateTableTimeRendererPipe {
    constructor(labels) {
        this.labels = labels;
    }
    transform(value, column) {
        if (!Helpers.isEmpty(value)) {
            return column.format ? value : this.labels.formatTime(interpolateCell(value, column));
        }
        return '';
    }
}
DateTableTimeRendererPipe.ɵfac = function DateTableTimeRendererPipe_Factory(t) { return new (t || DateTableTimeRendererPipe)(ɵɵdirectiveInject(NovoLabelService)); };
DateTableTimeRendererPipe.ɵpipe = ɵɵdefinePipe({ name: "dataTableTimeRenderer", type: DateTableTimeRendererPipe, pure: true });
/*@__PURE__*/ (function () { ɵsetClassMetadata(DateTableTimeRendererPipe, [{
        type: Pipe,
        args: [{
                name: 'dataTableTimeRenderer',
                pure: true,
            }]
    }], function () { return [{ type: NovoLabelService }]; }, null); })();
class DateTableNumberRendererPipe {
    constructor(labels) {
        this.labels = labels;
    }
    transform(value, column, isPercent = false) {
        if (!Helpers.isEmpty(value)) {
            let val = interpolateCell(value, column);
            if (isPercent && Helpers.isNumber(val)) {
                val = `${Number(val) * 100}`;
            }
            return `${this.labels.formatNumber(val)}${isPercent ? '%' : ''}`;
        }
        return '';
    }
}
DateTableNumberRendererPipe.ɵfac = function DateTableNumberRendererPipe_Factory(t) { return new (t || DateTableNumberRendererPipe)(ɵɵdirectiveInject(NovoLabelService)); };
DateTableNumberRendererPipe.ɵpipe = ɵɵdefinePipe({ name: "dataTableNumberRenderer", type: DateTableNumberRendererPipe, pure: true });
/*@__PURE__*/ (function () { ɵsetClassMetadata(DateTableNumberRendererPipe, [{
        type: Pipe,
        args: [{
                name: 'dataTableNumberRenderer',
                pure: true,
            }]
    }], function () { return [{ type: NovoLabelService }]; }, null); })();
class DataTableBigDecimalRendererPipe {
    constructor(labels) {
        this.labels = labels;
    }
    transform(value, column) {
        if (!Helpers.isEmpty(value)) {
            const val = interpolateCell(value, column);
            return this.labels.formatBigDecimal(Number(val));
        }
        return '';
    }
}
DataTableBigDecimalRendererPipe.ɵfac = function DataTableBigDecimalRendererPipe_Factory(t) { return new (t || DataTableBigDecimalRendererPipe)(ɵɵdirectiveInject(NovoLabelService)); };
DataTableBigDecimalRendererPipe.ɵpipe = ɵɵdefinePipe({ name: "dataTableBigDecimalRenderer", type: DataTableBigDecimalRendererPipe, pure: true });
/*@__PURE__*/ (function () { ɵsetClassMetadata(DataTableBigDecimalRendererPipe, [{
        type: Pipe,
        args: [{
                name: 'dataTableBigDecimalRenderer',
                pure: true,
            }]
    }], function () { return [{ type: NovoLabelService }]; }, null); })();
class DateTableCurrencyRendererPipe {
    constructor(labels) {
        this.labels = labels;
    }
    transform(value, column) {
        if (!Helpers.isEmpty(value)) {
            const val = interpolateCell(value, column);
            return this.labels.formatCurrency(Number(val));
        }
        return '';
    }
}
DateTableCurrencyRendererPipe.ɵfac = function DateTableCurrencyRendererPipe_Factory(t) { return new (t || DateTableCurrencyRendererPipe)(ɵɵdirectiveInject(NovoLabelService)); };
DateTableCurrencyRendererPipe.ɵpipe = ɵɵdefinePipe({ name: "dataTableCurrencyRenderer", type: DateTableCurrencyRendererPipe, pure: true });
/*@__PURE__*/ (function () { ɵsetClassMetadata(DateTableCurrencyRendererPipe, [{
        type: Pipe,
        args: [{
                name: 'dataTableCurrencyRenderer',
                pure: true,
            }]
    }], function () { return [{ type: NovoLabelService }]; }, null); })();

function NovoDataTablePagination_ng_container_0_novo_tiles_2_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-tiles", 8);
    ɵɵlistener("ngModelChange", function NovoDataTablePagination_ng_container_0_novo_tiles_2_Template_novo_tiles_ngModelChange_0_listener($event) { ɵɵrestoreView(_r6); const ctx_r5 = ɵɵnextContext(2); return ctx_r5.pageSize = $event; })("onChange", function NovoDataTablePagination_ng_container_0_novo_tiles_2_Template_novo_tiles_onChange_0_listener($event) { ɵɵrestoreView(_r6); const ctx_r7 = ɵɵnextContext(2); return ctx_r7.changePageSize($event); });
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵɵnextContext(2);
    ɵɵproperty("ngModel", ctx_r2.pageSize)("options", ctx_r2.displayedPageSizeOptions);
} }
function NovoDataTablePagination_ng_container_0_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div");
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r3.pageSize);
} }
function NovoDataTablePagination_ng_container_0_span_8_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "span", 9);
} }
function NovoDataTablePagination_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵɵgetCurrentView();
    ɵɵelementContainerStart(0);
    ɵɵelementStart(1, "div", 1);
    ɵɵtemplate(2, NovoDataTablePagination_ng_container_0_novo_tiles_2_Template, 1, 2, "novo-tiles", 2);
    ɵɵtemplate(3, NovoDataTablePagination_ng_container_0_div_3_Template, 2, 1, "div", 0);
    ɵɵelementEnd();
    ɵɵelementStart(4, "div", 3);
    ɵɵtext(5);
    ɵɵelementEnd();
    ɵɵelementStart(6, "div", 4);
    ɵɵtext(7);
    ɵɵelementEnd();
    ɵɵtemplate(8, NovoDataTablePagination_ng_container_0_span_8_Template, 1, 0, "span", 5);
    ɵɵelementStart(9, "button", 6);
    ɵɵlistener("click", function NovoDataTablePagination_ng_container_0_Template_button_click_9_listener() { ɵɵrestoreView(_r9); const ctx_r8 = ɵɵnextContext(); return ctx_r8.previousPage(); });
    ɵɵelementStart(10, "span");
    ɵɵtext(11);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementStart(12, "button", 7);
    ɵɵlistener("click", function NovoDataTablePagination_ng_container_0_Template_button_click_12_listener() { ɵɵrestoreView(_r9); const ctx_r10 = ɵɵnextContext(); return ctx_r10.nextPage(); });
    ɵɵelementStart(13, "span");
    ɵɵtext(14);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵproperty("ngIf", ctx_r0.displayedPageSizeOptions.length > 1);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.displayedPageSizeOptions.length <= 1);
    ɵɵadvance(2);
    ɵɵtextInterpolate1(" ", ctx_r0.longRangeLabel, " ");
    ɵɵadvance(2);
    ɵɵtextInterpolate1(" ", ctx_r0.shortRangeLabel, " ");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.theme === "basic-wide");
    ɵɵadvance(1);
    ɵɵproperty("disabled", !ctx_r0.hasPreviousPage());
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r0.labels.previous);
    ɵɵadvance(1);
    ɵɵproperty("disabled", !ctx_r0.hasNextPage());
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r0.labels.next);
} }
const _c0$V = function (a0) { return { active: a0 }; };
function NovoDataTablePagination_ng_container_1_li_8_Template(rf, ctx) { if (rf & 1) {
    const _r14 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "li", 14);
    ɵɵlistener("click", function NovoDataTablePagination_ng_container_1_li_8_Template_li_click_0_listener() { ɵɵrestoreView(_r14); const p_r12 = ctx.$implicit; const ctx_r13 = ɵɵnextContext(2); return ctx_r13.selectPage(p_r12.number - 1); });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const p_r12 = ctx.$implicit;
    const ctx_r11 = ɵɵnextContext(2);
    ɵɵproperty("ngClass", ɵɵpureFunction1(2, _c0$V, p_r12.number === ctx_r11.page + 1));
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", p_r12.text, " ");
} }
const _c1$k = function (a0) { return { disabled: a0 }; };
function NovoDataTablePagination_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    const _r16 = ɵɵgetCurrentView();
    ɵɵelementContainerStart(0);
    ɵɵelementStart(1, "h5", 10);
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementStart(3, "novo-select", 11);
    ɵɵlistener("ngModelChange", function NovoDataTablePagination_ng_container_1_Template_novo_select_ngModelChange_3_listener($event) { ɵɵrestoreView(_r16); const ctx_r15 = ɵɵnextContext(); return ctx_r15.pageSize = $event; })("onSelect", function NovoDataTablePagination_ng_container_1_Template_novo_select_onSelect_3_listener($event) { ɵɵrestoreView(_r16); const ctx_r17 = ɵɵnextContext(); return ctx_r17.changePageSize($event.selected); });
    ɵɵelementEnd();
    ɵɵelement(4, "span", 12);
    ɵɵelementStart(5, "ul", 13);
    ɵɵelementStart(6, "li", 14);
    ɵɵlistener("click", function NovoDataTablePagination_ng_container_1_Template_li_click_6_listener() { ɵɵrestoreView(_r16); const ctx_r18 = ɵɵnextContext(); return ctx_r18.selectPage(ctx_r18.page - 1); });
    ɵɵelement(7, "i", 15);
    ɵɵelementEnd();
    ɵɵtemplate(8, NovoDataTablePagination_ng_container_1_li_8_Template, 2, 4, "li", 16);
    ɵɵelementStart(9, "li", 14);
    ɵɵlistener("click", function NovoDataTablePagination_ng_container_1_Template_li_click_9_listener() { ɵɵrestoreView(_r16); const ctx_r19 = ɵɵnextContext(); return ctx_r19.selectPage(ctx_r19.page + 1); });
    ɵɵelement(10, "i", 17);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r1.labels.itemsPerPage);
    ɵɵadvance(1);
    ɵɵproperty("options", ctx_r1.displayedPageSizeOptions)("placeholder", ctx_r1.labels.select)("ngModel", ctx_r1.pageSize);
    ɵɵattribute("data-feature-id", ctx_r1.dataFeatureId);
    ɵɵadvance(3);
    ɵɵproperty("ngClass", ɵɵpureFunction1(8, _c1$k, ctx_r1.page === 0));
    ɵɵadvance(2);
    ɵɵproperty("ngForOf", ctx_r1.pages);
    ɵɵadvance(1);
    ɵɵproperty("ngClass", ɵɵpureFunction1(10, _c1$k, ctx_r1.page + 1 === ctx_r1.totalPages));
} }
const MAX_PAGES_DISPLAYED = 5;
class NovoDataTablePagination {
    constructor(changeDetectorRef, labels, state) {
        this.changeDetectorRef = changeDetectorRef;
        this.labels = labels;
        this.state = state;
        this.theme = 'standard';
        this._page = 0;
        this._pageSizeOptions = [];
        this._length = 0;
        this.pageChange = new EventEmitter();
        this.resetSubscription = this.state.resetSource.subscribe(() => {
            this.page = 0;
            this.changeDetectorRef.markForCheck();
        });
    }
    get page() {
        return this._page;
    }
    set page(page) {
        this._page = page;
        this.changeDetectorRef.markForCheck();
        this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
        this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
        this.state.page = this._page;
    }
    get pageSize() {
        return this._pageSize;
    }
    set pageSize(pageSize) {
        this._pageSize = pageSize;
        this.updateDisplayedPageSizeOptions();
        this.state.pageSize = this._pageSize;
    }
    get pageSizeOptions() {
        return this._pageSizeOptions;
    }
    set pageSizeOptions(pageSizeOptions) {
        this._pageSizeOptions = pageSizeOptions;
        this.updateDisplayedPageSizeOptions();
    }
    get length() {
        return this._length;
    }
    set length(length) {
        this._length = length;
        this.changeDetectorRef.markForCheck();
        this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
        this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
        this.totalPages = this.calculateTotalPages();
        this.pages = this.getPages(this.page, this.totalPages);
    }
    ngOnInit() {
        this._initialized = true;
        this.updateDisplayedPageSizeOptions();
    }
    ngOnDestroy() {
        this.resetSubscription.unsubscribe();
    }
    selectPage(page) {
        this.page = page;
        this.emitPageEvent();
    }
    nextPage() {
        if (!this.hasNextPage()) {
            return;
        }
        this.page++;
        this.pages = this.getPages(this.page, this.totalPages);
        this.emitPageEvent();
    }
    previousPage() {
        if (!this.hasPreviousPage()) {
            return;
        }
        this.page--;
        this.pages = this.getPages(this.page, this.totalPages);
        this.emitPageEvent();
    }
    hasPreviousPage() {
        return this.page >= 1 && this.pageSize !== 0;
    }
    hasNextPage() {
        const numberOfPages = Math.ceil(this.length / this.pageSize) - 1;
        return this.page < numberOfPages && this.pageSize !== 0;
    }
    changePageSize(pageSize) {
        this.page = 0;
        this.pageSize = pageSize;
        this.emitPageEvent(true);
    }
    updateDisplayedPageSizeOptions() {
        if (!this._initialized) {
            return;
        }
        if (!this.displayedPageSizeOptions) {
            this.displayedPageSizeOptions = [];
            this.pageSizeOptions.forEach((option) => {
                if (option.hasOwnProperty('value')) {
                    this.displayedPageSizeOptions.push(option);
                }
                else {
                    this.displayedPageSizeOptions.push({
                        value: option,
                        label: option,
                    });
                }
            });
        }
        this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
        this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
        this.totalPages = this.calculateTotalPages();
        this.pages = this.getPages(this.page, this.totalPages);
        this.changeDetectorRef.detectChanges();
    }
    emitPageEvent(isPageSizeChange = false) {
        const event = {
            page: this.page,
            pageSize: this.pageSize,
            length: this.length,
            filter: this.state.filter,
            sort: this.state.sort,
        };
        this.pageChange.next(event);
        this.state.page = this.page;
        this.state.pageSize = this.pageSize;
        this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
        this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
        this.totalPages = this.calculateTotalPages();
        this.pages = this.getPages(this.page, this.totalPages);
        this.state.updates.next(event);
        this.state.onPaginationChange(isPageSizeChange, this.pageSize);
    }
    calculateTotalPages() {
        const totalPages = this.pageSize < 1 ? 1 : Math.ceil(this.length / this.pageSize);
        return Math.max(totalPages || 0, 1);
    }
    makePage(number, text, isActive) {
        return {
            number,
            text,
            active: isActive,
        };
    }
    getPages(currentPage, totalPages) {
        const pages = [];
        // Default page limits
        let startPage = 1;
        let endPage = totalPages;
        const isMaxSized = MAX_PAGES_DISPLAYED < totalPages;
        // Recompute if maxPagesDisplayed
        if (isMaxSized) {
            // Current page is displayed in the middle of the visible ones
            startPage = Math.max(currentPage - Math.floor(MAX_PAGES_DISPLAYED / 2), 1);
            endPage = startPage + MAX_PAGES_DISPLAYED - 1;
            // Adjust if limit is exceeded
            if (endPage > totalPages) {
                endPage = totalPages;
                startPage = endPage - MAX_PAGES_DISPLAYED + 1;
            }
        }
        // Add page number links
        for (let number = startPage; number <= endPage; number++) {
            const page = this.makePage(number, number.toString(), number === currentPage);
            pages.push(page);
        }
        return pages;
    }
}
NovoDataTablePagination.ɵfac = function NovoDataTablePagination_Factory(t) { return new (t || NovoDataTablePagination)(ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(DataTableState)); };
NovoDataTablePagination.ɵcmp = ɵɵdefineComponent({ type: NovoDataTablePagination, selectors: [["novo-data-table-pagination"]], hostVars: 2, hostBindings: function NovoDataTablePagination_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵclassMap(ctx.theme);
    } }, inputs: { theme: "theme", page: "page", pageSize: "pageSize", dataFeatureId: "dataFeatureId", pageSizeOptions: "pageSizeOptions", length: "length" }, outputs: { pageChange: "pageChange" }, decls: 2, vars: 2, consts: [[4, "ngIf"], [1, "novo-data-table-pagination-size"], ["data-automation-id", "novo-data-table-pagination-tiles", 3, "ngModel", "options", "ngModelChange", "onChange", 4, "ngIf"], ["data-automation-id", "novo-data-table-pagination-range-label-long", 1, "novo-data-table-range-label-long"], ["data-automation-id", "novo-data-table-pagination-range-label-short", 1, "novo-data-table-range-label-short"], ["class", "spacer novo-data-table-spacer", 4, "ngIf"], ["theme", "dialogue", "type", "button", "icon", "previous", "side", "left", "data-automation-id", "novo-data-table-pagination-previous", 1, "novo-data-table-pagination-navigation-previous", 3, "disabled", "click"], ["theme", "dialogue", "type", "button", "icon", "next", "side", "right", "data-automation-id", "novo-data-table-pagination-next", 1, "novo-data-table-pagination-navigation-next", 3, "disabled", "click"], ["data-automation-id", "novo-data-table-pagination-tiles", 3, "ngModel", "options", "ngModelChange", "onChange"], [1, "spacer", "novo-data-table-spacer"], [1, "rows"], ["data-automation-id", "pager-select", 3, "options", "placeholder", "ngModel", "ngModelChange", "onSelect"], [1, "spacer"], ["data-automation-id", "pager", 1, "pager"], [1, "page", 3, "ngClass", "click"], ["data-automation-id", "pager-previous", 1, "bhi-previous"], ["class", "page", 3, "ngClass", "click", 4, "ngFor", "ngForOf"], ["data-automation-id", "pager-next", 1, "bhi-next"]], template: function NovoDataTablePagination_Template(rf, ctx) { if (rf & 1) {
        ɵɵtemplate(0, NovoDataTablePagination_ng_container_0_Template, 15, 9, "ng-container", 0);
        ɵɵtemplate(1, NovoDataTablePagination_ng_container_1_Template, 11, 12, "ng-container", 0);
    } if (rf & 2) {
        ɵɵproperty("ngIf", ctx.theme === "basic" || ctx.theme === "basic-wide");
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.theme === "standard");
    } }, directives: [NgIf, NovoButtonElement, NovoTilesElement, NgControlStatus, NgModel, NovoSelectElement, NgClass, NgForOf], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDataTablePagination, [{
        type: Component,
        args: [{
                selector: 'novo-data-table-pagination',
                template: `
    <ng-container *ngIf="theme === 'basic' || theme === 'basic-wide'">
      <div class="novo-data-table-pagination-size">
        <novo-tiles
          *ngIf="displayedPageSizeOptions.length > 1"
          [(ngModel)]="pageSize"
          [options]="displayedPageSizeOptions"
          (onChange)="changePageSize($event)"
          data-automation-id="novo-data-table-pagination-tiles"
        >
        </novo-tiles>
        <div *ngIf="displayedPageSizeOptions.length <= 1">{{ pageSize }}</div>
      </div>

      <div class="novo-data-table-range-label-long" data-automation-id="novo-data-table-pagination-range-label-long">
        {{ longRangeLabel }}
      </div>
      <div class="novo-data-table-range-label-short" data-automation-id="novo-data-table-pagination-range-label-short">
        {{ shortRangeLabel }}
      </div>
      <span class="spacer novo-data-table-spacer" *ngIf="theme === 'basic-wide'"></span>
      <button
        theme="dialogue"
        type="button"
        class="novo-data-table-pagination-navigation-previous"
        (click)="previousPage()"
        icon="previous"
        side="left"
        [disabled]="!hasPreviousPage()"
        data-automation-id="novo-data-table-pagination-previous"
      >
        <span>{{ labels.previous }}</span>
      </button>
      <button
        theme="dialogue"
        type="button"
        class="novo-data-table-pagination-navigation-next"
        (click)="nextPage()"
        icon="next"
        side="right"
        [disabled]="!hasNextPage()"
        data-automation-id="novo-data-table-pagination-next"
      >
        <span>{{ labels.next }}</span>
      </button>
    </ng-container>
    <ng-container *ngIf="theme === 'standard'">
      <h5 class="rows">{{ labels.itemsPerPage }}</h5>
      <novo-select
        [options]="displayedPageSizeOptions"
        [placeholder]="labels.select"
        [(ngModel)]="pageSize"
        (onSelect)="changePageSize($event.selected)"
        data-automation-id="pager-select"
        [attr.data-feature-id]="dataFeatureId"
      >
      </novo-select>
      <span class="spacer"></span>
      <ul class="pager" data-automation-id="pager">
        <li class="page" (click)="selectPage(page - 1)" [ngClass]="{ disabled: page === 0 }">
          <i class="bhi-previous" data-automation-id="pager-previous"></i>
        </li>
        <li class="page" [ngClass]="{ active: p.number === page + 1 }" *ngFor="let p of pages" (click)="selectPage(p.number - 1)">
          {{ p.text }}
        </li>
        <li class="page" (click)="selectPage(page + 1)" [ngClass]="{ disabled: page + 1 === totalPages }">
          <i class="bhi-next" data-automation-id="pager-next"></i>
        </li>
      </ul>
    </ng-container>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: ChangeDetectorRef }, { type: NovoLabelService }, { type: DataTableState }]; }, { theme: [{
            type: HostBinding,
            args: ['class']
        }, {
            type: Input
        }], page: [{
            type: Input
        }], pageSize: [{
            type: Input
        }], dataFeatureId: [{
            type: Input
        }], pageSizeOptions: [{
            type: Input
        }], length: [{
            type: Input
        }], pageChange: [{
            type: Output
        }] }); })();

class NovoDataTableHeaderRow extends CdkHeaderRow {
    constructor() {
        super(...arguments);
        this.rowClass = 'novo-data-table-header-row';
        this.fixedHeader = false;
        this.role = 'row';
    }
}
NovoDataTableHeaderRow.ɵfac = function NovoDataTableHeaderRow_Factory(t) { return ɵNovoDataTableHeaderRow_BaseFactory(t || NovoDataTableHeaderRow); };
NovoDataTableHeaderRow.ɵcmp = ɵɵdefineComponent({ type: NovoDataTableHeaderRow, selectors: [["novo-data-table-header-row"]], hostVars: 5, hostBindings: function NovoDataTableHeaderRow_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵattribute("role", ctx.role);
        ɵɵclassMap(ctx.rowClass);
        ɵɵclassProp("fixed-header", ctx.fixedHeader);
    } }, inputs: { fixedHeader: "fixedHeader" }, features: [ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [["cdkCellOutlet", ""]], template: function NovoDataTableHeaderRow_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementContainer(0, 0);
    } }, directives: [CdkCellOutlet], encapsulation: 2, changeDetection: 0 });
const ɵNovoDataTableHeaderRow_BaseFactory = /*@__PURE__*/ ɵɵgetInheritedFactory(NovoDataTableHeaderRow);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDataTableHeaderRow, [{
        type: Component,
        args: [{
                selector: 'novo-data-table-header-row',
                template: CDK_ROW_TEMPLATE,
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], null, { rowClass: [{
            type: HostBinding,
            args: ['class']
        }], fixedHeader: [{
            type: HostBinding,
            args: ['class.fixed-header']
        }, {
            type: Input
        }], role: [{
            type: HostBinding,
            args: ['attr.role']
        }] }); })();

class NovoDataTableRow extends CdkRow {
    constructor() {
        super(...arguments);
        this.rowClass = 'novo-data-table-row';
        this.role = 'row';
    }
}
NovoDataTableRow.ɵfac = function NovoDataTableRow_Factory(t) { return ɵNovoDataTableRow_BaseFactory(t || NovoDataTableRow); };
NovoDataTableRow.ɵcmp = ɵɵdefineComponent({ type: NovoDataTableRow, selectors: [["novo-data-table-row"]], hostVars: 5, hostBindings: function NovoDataTableRow_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵattribute("role", ctx.role)("id", ctx.id)("data-automation-id", ctx.dataAutomationId);
        ɵɵclassMap(ctx.rowClass);
    } }, inputs: { id: "id", dataAutomationId: "dataAutomationId" }, features: [ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [["cdkCellOutlet", ""]], template: function NovoDataTableRow_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementContainer(0, 0);
    } }, directives: [CdkCellOutlet], encapsulation: 2, changeDetection: 0 });
const ɵNovoDataTableRow_BaseFactory = /*@__PURE__*/ ɵɵgetInheritedFactory(NovoDataTableRow);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDataTableRow, [{
        type: Component,
        args: [{
                selector: 'novo-data-table-row',
                template: CDK_ROW_TEMPLATE,
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], null, { rowClass: [{
            type: HostBinding,
            args: ['class']
        }], role: [{
            type: HostBinding,
            args: ['attr.role']
        }], id: [{
            type: HostBinding,
            args: ['attr.id']
        }, {
            type: Input
        }], dataAutomationId: [{
            type: HostBinding,
            args: ['attr.data-automation-id']
        }, {
            type: Input
        }] }); })();

class NovoDataTableModule {
}
NovoDataTableModule.ɵmod = ɵɵdefineNgModule({ type: NovoDataTableModule });
NovoDataTableModule.ɵinj = ɵɵdefineInjector({ factory: function NovoDataTableModule_Factory(t) { return new (t || NovoDataTableModule)(); }, providers: [DataTableState], imports: [[
            NovoDatePickerModule,
            CdkTableModule,
            CommonModule,
            FormsModule,
            NovoIconModule,
            NovoButtonModule,
            NovoDropdownModule,
            NovoFormExtrasModule,
            NovoLoadingModule,
            NovoTilesModule,
            NovoSearchBoxModule,
            NovoCommonModule,
            NovoSelectModule,
            NovoTooltipModule,
            NovoOptionModule,
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoDataTableModule, { declarations: [DataTableInterpolatePipe,
        DateTableDateRendererPipe,
        DateTableCurrencyRendererPipe,
        DateTableDateTimeRendererPipe,
        DateTableNumberRendererPipe,
        DateTableTimeRendererPipe,
        DataTableBigDecimalRendererPipe,
        NovoDataTableCellHeader,
        NovoDataTableSortFilter,
        NovoDataTableHeaderCell,
        NovoDataTableCell,
        NovoDataTableHeaderRow,
        NovoDataTableRow,
        NovoDataTablePagination,
        NovoDataTableCheckboxCell,
        NovoDataTableCheckboxHeaderCell,
        NovoDataTableExpandCell,
        NovoDataTableExpandHeaderCell,
        NovoDataTable,
        NovoDataTableExpandDirective,
        NovoDataTableClearButton,
        NovoDataTableSortButton], imports: [NovoDatePickerModule,
        CdkTableModule,
        CommonModule,
        FormsModule,
        NovoIconModule,
        NovoButtonModule,
        NovoDropdownModule,
        NovoFormExtrasModule,
        NovoLoadingModule,
        NovoTilesModule,
        NovoSearchBoxModule,
        NovoCommonModule,
        NovoSelectModule,
        NovoTooltipModule,
        NovoOptionModule], exports: [NovoDataTable,
        DataTableInterpolatePipe,
        DateTableDateRendererPipe,
        DateTableCurrencyRendererPipe,
        DateTableDateTimeRendererPipe,
        DateTableNumberRendererPipe,
        DateTableTimeRendererPipe,
        DataTableBigDecimalRendererPipe,
        NovoDataTableClearButton,
        NovoDataTableSortButton] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDataTableModule, [{
        type: NgModule,
        args: [{
                imports: [
                    NovoDatePickerModule,
                    CdkTableModule,
                    CommonModule,
                    FormsModule,
                    NovoIconModule,
                    NovoButtonModule,
                    NovoDropdownModule,
                    NovoFormExtrasModule,
                    NovoLoadingModule,
                    NovoTilesModule,
                    NovoSearchBoxModule,
                    NovoCommonModule,
                    NovoSelectModule,
                    NovoTooltipModule,
                    NovoOptionModule,
                ],
                declarations: [
                    DataTableInterpolatePipe,
                    DateTableDateRendererPipe,
                    DateTableCurrencyRendererPipe,
                    DateTableDateTimeRendererPipe,
                    DateTableNumberRendererPipe,
                    DateTableTimeRendererPipe,
                    DataTableBigDecimalRendererPipe,
                    NovoDataTableCellHeader,
                    NovoDataTableSortFilter,
                    NovoDataTableHeaderCell,
                    NovoDataTableCell,
                    NovoDataTableHeaderRow,
                    NovoDataTableRow,
                    NovoDataTablePagination,
                    NovoDataTableCheckboxCell,
                    NovoDataTableCheckboxHeaderCell,
                    NovoDataTableExpandCell,
                    NovoDataTableExpandHeaderCell,
                    NovoDataTable,
                    NovoDataTableExpandDirective,
                    NovoDataTableClearButton,
                    NovoDataTableSortButton,
                ],
                providers: [DataTableState],
                exports: [
                    NovoDataTable,
                    DataTableInterpolatePipe,
                    DateTableDateRendererPipe,
                    DateTableCurrencyRendererPipe,
                    DateTableDateTimeRendererPipe,
                    DateTableNumberRendererPipe,
                    DateTableTimeRendererPipe,
                    DataTableBigDecimalRendererPipe,
                    NovoDataTableClearButton,
                    NovoDataTableSortButton,
                ],
            }]
    }], null, null); })();
ɵɵsetComponentScope(NovoDataTable, [NovoDatePickerElement, NovoDatePickerInputElement, NovoDateRangeInputElement, NovoMultiDateInputElement, NovoMonthViewElement, NovoMonthSelectElement, NovoYearSelectElement, NovoCalendarElement, CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn, CdkNoDataRow, NoDataRowOutlet, NgClass, NgComponentOutlet, NgForOf, NgIf, NgTemplateOutlet, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase, ɵangular_packages_forms_forms_y, NgSelectOption, ɵangular_packages_forms_forms_x, DefaultValueAccessor, NumberValueAccessor, RangeValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MinLengthValidator, MaxLengthValidator, PatternValidator, CheckboxRequiredValidator, EmailValidator, NgModel, NgModelGroup, NgForm, NovoIconComponent, NovoButtonElement, NovoDropdownElement, NovoItemElement, NovoDropdownListElement, NovoDropDownItemHeaderElement, NovoAddressElement, NovoCheckboxElement, NovoCheckListElement, NovoFileInputElement, NovoLoadingElement, NovoSpinnerElement, NovoIsLoadingDirective, NovoLoadedDirective, NovoSkeletonDirective, NovoTilesElement, NovoSearchBoxElement, NovoTemplate, NovoText, NovoTitle, NovoCaption, NovoLabel, NovoLink, MarginDirective, PaddingDirective, NovoSelectElement, TooltipDirective, NovoOption, NovoOptgroup, NovoDataTableCellHeader,
    NovoDataTableSortFilter,
    NovoDataTableHeaderCell,
    NovoDataTableCell,
    NovoDataTableHeaderRow,
    NovoDataTableRow,
    NovoDataTablePagination,
    NovoDataTableCheckboxCell,
    NovoDataTableCheckboxHeaderCell,
    NovoDataTableExpandCell,
    NovoDataTableExpandHeaderCell,
    NovoDataTable,
    NovoDataTableExpandDirective,
    NovoDataTableClearButton,
    NovoDataTableSortButton], [AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, TitleCasePipe, CurrencyPipe, DatePipe, I18nPluralPipe, I18nSelectPipe, KeyValuePipe, DataTableInterpolatePipe,
    DateTableDateRendererPipe,
    DateTableCurrencyRendererPipe,
    DateTableDateTimeRendererPipe,
    DateTableNumberRendererPipe,
    DateTableTimeRendererPipe,
    DataTableBigDecimalRendererPipe]);

class RemoteDataTableService {
}

class CollectionEvent {
    constructor(type = 'Collection.REFRESH', data = []) {
        this.type = '';
        this.data = [];
        this.type = type;
        this.data = data;
    }
}
CollectionEvent.REFRESH = 'Collection.REFRESH';
CollectionEvent.ADD = 'Collection.ADD';
CollectionEvent.REMOVE = 'Collection.REMOVE';
CollectionEvent.REMOVE_ALL = 'Collection.REMOVE_ALL';
CollectionEvent.REPLACE = 'Collection.REPLACE';
CollectionEvent.INVALIDATE_ALL = 'Collection.INVALIDATE_ALL';
CollectionEvent.SORT = 'Collection.SORT';
CollectionEvent.FILTER = 'Collection.FILTER';
CollectionEvent.CHANGE = 'Collection.CHANGE';
CollectionEvent.CURRENTPAGE_CHANGE = 'Collection.CURRENTPAGE_CHANGE';
CollectionEvent.PAGESIZE_CHANGE = 'Collection.PAGESIZE_CHANGE';
CollectionEvent.NUMBEROFPAGES_CHANGE = 'Collection.NUMBEROFPAGES_CHANGE';

// Ng
/**
 * Base Class for all Collection based data providers
 *
 * @example
 *  var dp:DataProvider = new DataProvider();
 *  dp.addItem({label:"Item 1"});
 *  dp.addItem({label:"Item 2"});
 *  dp.addItem({label:"Item 3"});
 *  dp.addItem({label:"Item 4"});

 *  var myList:List = new List();
 *  myList.dataProvider = dp;
 */
class ArrayCollection {
    constructor(source = []) {
        this.dataChange = new EventEmitter();
        this.source = [];
        this.editData = [];
        this.isEditing = false;
        this.filterData = [];
        this._filter = {};
        this._sort = [];
        this.source = source;
        this.editData = this.copy(this.source);
        this.filterData = this.source.slice();
    }
    get length() {
        return this.filterData.length;
    }
    get total() {
        return this.filterData.length;
    }
    get list() {
        return this.filterData;
    }
    isEmpty() {
        return this.length <= 0 && !this.isLoading() && !this.hasErrors();
    }
    hasErrors() {
        return false;
    }
    isLoading() {
        return false;
    }
    isFiltered() {
        return Object.keys(this._filter).length > 0;
    }
    /**
     * Method to switch the isEditingflag for the data source
     */
    edit() {
        this.isEditing = true;
        this.editData = this.copy(this.source);
    }
    /**
     * Method to leave edit mode and reset source
     */
    undo() {
        this.isEditing = false;
        this.source = this.copy(this.editData);
        this.refresh();
    }
    /**
     * Method to leave edit mode and save editData
     */
    commit() {
        this.isEditing = false;
        this.source = this.filterData.slice();
        this.refresh();
    }
    /**
     * Appends an item to the end of the data provider.
     *
     *
     * @memberOf ArrayCollection
     */
    addItem(item) {
        this.isEditing ? this.editData.push(item) : this.source.push(item);
        this.onDataChange(new CollectionEvent(CollectionEvent.ADD, [item]));
        this.refresh();
    }
    /**
     * Adds a new item to the data provider at the specified index.
     *
     *
     * @memberOf ArrayCollection
     */
    addItemAt(item, index) {
        this.isEditing ? this.editData.splice(index, 0, item) : this.source.splice(index, 0, item);
        this.onDataChange(new CollectionEvent(CollectionEvent.ADD, [item]));
        this.refresh();
    }
    /**
     *  Appends multiple items to the end of the DataProvider and dispatches a CollectionEvent.ADD event.
     *
     * @memberOf ArrayCollection
     */
    addItems(items) {
        this.isEditing ? this.editData.push(...items) : this.source.push(...items);
        this.onDataChange(new CollectionEvent(CollectionEvent.ADD, items));
        this.refresh();
    }
    /**
     * Adds several items to the data provider at the specified index and dispatches a CollectionEvent.ADD event.
     *
     * @memberOf ArrayCollection
     */
    addItemsAt(items, index) {
        this.isEditing ? this.editData.splice(index, 0, ...items) : this.source.splice(index, 0, ...items);
    }
    /**
     * Creates a copy of the current ArrayCollection any.
     *
     * @memberOf ArrayCollection
     */
    clone() {
        return new ArrayCollection(this.isEditing ? this.copy(this.editData) : this.copy(this.source));
    }
    /**
     * Creates a copy of the current ArrayCollection any.
     *
     * @memberOf ArrayCollection
     */
    copy(array) {
        return Helpers.deepClone(array);
    }
    /**
     * Concatenates the specified items to the end of the current data provider.
     *
     * @memberOf ArrayCollection
     */
    concat(items) {
        this.addItems(items);
    }
    /**
     * Returns the item at the specified index.
     *
     * @memberOf ArrayCollection
     */
    getItemAt(index) {
        return this.isEditing ? this.editData[index] : this.source[index];
    }
    /**
     *  Returns the index of the specified item.
     *
     * @memberOf ArrayCollection
     */
    getItemIndex(item) {
        return this.isEditing ? this.editData.indexOf(item) : this.source.indexOf(item);
    }
    /**
     * Invalidates all the data items that the DataProvider contains and dispatches a CollectionEvent.INVALIDATE_ALL event.
     *
     * @memberOf ArrayCollection
     */
    invalidate() {
        this.onDataChange(new CollectionEvent(CollectionEvent.INVALIDATE_ALL));
    }
    /**
     * Invalidates the specified item.
     *
     * @memberOf ArrayCollection
     */
    // invalidateItem(item:any):void {}
    /**
     * Invalidates the item at the specified index.
     *
     * @memberOf ArrayCollection
     */
    // invalidateItemAt(index:number):void {}
    /**
     * Appends the specified data into the data that the data provider contains and removes any duplicate items.
     *
     * @memberOf ArrayCollection
     */
    merge(newData) {
        for (const obj of newData) {
            const existing = ~this.getItemIndex(obj);
            if (existing) {
                this.replaceItem(obj, existing);
            }
            else {
                this.addItem(obj);
            }
        }
    }
    /**
     * Removes all items from the data provider and dispatches a CollectionEvent.REMOVE_ALL event.
     *
     * @memberOf ArrayCollection
     */
    removeAll() {
        this.source = [];
        this.editData = [];
        this.filterData = [];
        this.onDataChange(new CollectionEvent(CollectionEvent.REMOVE_ALL, []));
        this.refresh();
    }
    /**
     * Removes the specified item from the data provider and dispatches a CollectionEvent.REMOVE event.
     *
     * @memberOf ArrayCollection
     */
    removeItem(item) {
        const index = this.getItemIndex(item);
        return this.removeItemAt(index);
    }
    /**
     * Removes the item at the specified index and dispatches a CollectionEvent.REMOVE event.
     *
     * @memberOf ArrayCollection
     */
    removeItemAt(index) {
        const success = !!this.source.splice(index, 1);
        this.refresh();
        return success;
    }
    /**
     * Replaces an existing item with a new item and dispatches a CollectionEvent.REPLACE event.
     *
     * @memberOf ArrayCollection
     */
    replaceItem(newItem, oldItem) {
        const index = this.getItemIndex(oldItem);
        if (index >= 0) {
            this.replaceItemAt(newItem, index);
        }
    }
    /**
     * Replaces the item at the specified index and dispatches a CollectionEvent.REPLACE event.
     *
     * @memberOf ArrayCollection
     */
    replaceItemAt(newItem, index) {
        this.filterData.splice(index, 1, newItem);
    }
    /**
     * Sorts the items that the data provider contains and dispatches a CollectionEvent.SORT event.
     *
     * @memberOf ArrayCollection
     */
    get sort() {
        return this._sort;
    }
    set sort(value) {
        this._sort = value;
        this.refresh();
    }
    /**
     * Sorts the items that the data provider contains by the specified field and dispatches a CollectionEvent.SORT event.
     *
     * @memberOf ArrayCollection
     */
    sortOn(fieldName, reverse = false) {
        this.filterData = this.filterData.sort(Helpers.sortByField(fieldName, reverse));
        this.onDataChange(new CollectionEvent(CollectionEvent.SORT));
        return this.filterData;
    }
    get filter() {
        return this._filter;
    }
    set filter(value) {
        this._filter = value;
        this.refresh();
    }
    filterOn(fieldName, value = null) {
        this.filterData = this.filterData.filter(Helpers.filterByField(fieldName, value));
        return this.filterData;
    }
    onDataChange(event) {
        this.dataChange.emit(event);
    }
    refresh() {
        this.filterData = this.isEditing ? this.editData.slice() : this.source.slice();
        for (const item of this._sort.reverse()) {
            this.sortOn(item.field, item.reverse);
        }
        for (const key in this._filter) {
            if (key) {
                this.filterOn(key, this._filter[key]);
            }
        }
        this.onDataChange(new CollectionEvent(CollectionEvent.CHANGE, this.filterData));
    }
    /**
     * Creates an Array any representation of the data that the data provider contains.
     *
     * @memberOf ArrayCollection
     */
    toArray() {
        return this.isEditing ? this.editData : this.source;
    }
    toJSON() {
        return this.isEditing ? this.editData : this.source;
    }
}

class PagedArrayCollection extends ArrayCollection {
    constructor(source = []) {
        super(source);
        this._page = 1;
        this._numberOfPages = 1;
        this._pageSize = 10;
    }
    get numberOfPages() {
        let result = this.source.length / this.pageSize;
        result = Math.ceil(result);
        return result;
    }
    get page() {
        return this._page;
    }
    set page(value) {
        this._page = value;
        this.refresh();
    }
    get pageSize() {
        return this._pageSize;
    }
    set pageSize(value) {
        this._pageSize = value;
        this.refresh();
    }
    next() {
        if (this.page === this.numberOfPages) {
            return this.page;
        }
        this.page++;
        return this.page;
    }
    prev() {
        if (this._page === 1) {
            return this.page;
        }
        this.page--;
        return this.page;
    }
    first() {
        if (this.page === 1) {
            return this.page;
        }
        this.page = 1;
        return this.page;
    }
    last() {
        if (this.page === this.numberOfPages) {
            return this.page;
        }
        this.page = this.numberOfPages;
        return this.page;
    }
    refresh() {
        this.filterData = this.isEditing ? this.editData.slice() : this.source.slice();
        for (const item of this._sort.reverse()) {
            this.sortOn(item.field, item.reverse);
        }
        for (const key in this._filter) {
            if (key) {
                this.filterOn(key, this._filter[key]);
            }
        }
        if (this.page >= 0) {
            const start = (this.page - 1) * this.pageSize;
            const end = start + this.pageSize;
            const result = this.filterData.slice(start, end);
            this.onDataChange(new CollectionEvent(CollectionEvent.CHANGE, result));
        }
        else {
            this.onDataChange(new CollectionEvent(CollectionEvent.CHANGE, this.filterData));
        }
    }
}

class GlobalRef {
}
class BrowserGlobalRef extends GlobalRef {
    get nativeGlobal() {
        return window;
    }
}
BrowserGlobalRef.ɵfac = function BrowserGlobalRef_Factory(t) { return ɵBrowserGlobalRef_BaseFactory(t || BrowserGlobalRef); };
BrowserGlobalRef.ɵprov = ɵɵdefineInjectable({ token: BrowserGlobalRef, factory: BrowserGlobalRef.ɵfac });
const ɵBrowserGlobalRef_BaseFactory = /*@__PURE__*/ ɵɵgetInheritedFactory(BrowserGlobalRef);
/*@__PURE__*/ (function () { ɵsetClassMetadata(BrowserGlobalRef, [{
        type: Injectable
    }], null, null); })();
class NodeGlobalRef extends GlobalRef {
    get nativeGlobal() {
        throw new Error(`global doesn't compile for some reason`);
        // return global as Global;
    }
}

// NG2
class Security {
    constructor() {
        this.credentials = [];
        this.change = new EventEmitter();
    }
    grant(data) {
        const parsed = [];
        if (data instanceof Array) {
            for (const permission of data) {
                parsed.push(permission.replace(/\s/gi, ''));
            }
        }
        else if (typeof data === 'object') {
            for (const key in data) {
                if (data[key] instanceof Array) {
                    for (const permission of data[key]) {
                        parsed.push(`${key}.${permission}`);
                    }
                }
            }
        }
        this.credentials = [].concat(this.credentials, parsed);
        this.change.emit(this.credentials);
    }
    has(value) {
        return this.credentials.indexOf(value) > -1;
    }
    revoke(value) {
        const i = this.credentials.indexOf(value);
        this.credentials.splice(i, 1);
        this.change.emit(this.credentials);
    }
    clear() {
        this.credentials = [];
        this.change.emit(this.credentials);
    }
    subscribe(fn) {
        this.change.subscribe(fn);
    }
    checkRoutes(routes, options) {
        const filtered = [];
        for (const route of routes) {
            if (route.entities && ~route.entities.indexOf(options.entityType)) {
                if (route.permissions instanceof Function) {
                    if (route.permissions(options, this)) {
                        filtered.push(route);
                    }
                }
                else if (route.permissions && route.permissions.length) {
                    if (route.permissions.every((perm) => this.has(perm))) {
                        filtered.push(route);
                    }
                }
                else {
                    filtered.push(route);
                }
            }
        }
        return filtered;
    }
}
Security.ɵfac = function Security_Factory(t) { return new (t || Security)(); };
Security.ɵprov = ɵɵdefineInjectable({ token: Security, factory: Security.ɵfac });
/*@__PURE__*/ (function () { ɵsetClassMetadata(Security, [{
        type: Injectable
    }], null, null); })();

class LocalStorageService {
    setItem(key, value) {
        localStorage.setItem(key, value);
    }
    getItem(key) {
        return localStorage.getItem(key);
    }
    removeItem(key) {
        localStorage.removeItem(key);
    }
}
LocalStorageService.ɵfac = function LocalStorageService_Factory(t) { return new (t || LocalStorageService)(); };
LocalStorageService.ɵprov = ɵɵdefineInjectable({ token: LocalStorageService, factory: LocalStorageService.ɵfac });
/*@__PURE__*/ (function () { ɵsetClassMetadata(LocalStorageService, [{
        type: Injectable
    }], null, null); })();

// NG2
class NovoTemplateService {
    constructor() {
        this.templates = {
            default: {},
            custom: {},
        };
    }
    getAll() {
        const templates = {};
        const customTemplateTypes = Object.keys(this.templates.custom);
        const defaultTemplateTypes = Object.keys(this.templates.default);
        defaultTemplateTypes.forEach((type) => {
            templates[type] = this.templates.default[type];
        });
        customTemplateTypes.forEach((type) => {
            templates[type] = this.templates.custom[type];
        });
        return templates;
    }
    addDefault(key, template) {
        this.templates.default[key] = template;
    }
    addCustom(key, template) {
        this.templates.custom[key] = template;
    }
}
NovoTemplateService.ɵfac = function NovoTemplateService_Factory(t) { return new (t || NovoTemplateService)(); };
NovoTemplateService.ɵprov = ɵɵdefineInjectable({ token: NovoTemplateService, factory: NovoTemplateService.ɵfac });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTemplateService, [{
        type: Injectable
    }], function () { return []; }, null); })();

// NG2
function NovoTimePickerElement_div_0_novo_list_item_2_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-list-item", 6);
    ɵɵlistener("click", function NovoTimePickerElement_div_0_novo_list_item_2_Template_novo_list_item_click_0_listener($event) { ɵɵrestoreView(_r7); const increment_r5 = ctx.$implicit; const ctx_r6 = ɵɵnextContext(2); return ctx_r6.setHours($event, increment_r5, true); });
    ɵɵelementStart(1, "item-content");
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const increment_r5 = ctx.$implicit;
    const ctx_r2 = ɵɵnextContext(2);
    ɵɵclassProp("active", increment_r5 == ctx_r2.activeHour);
    ɵɵattribute("data-automation-id", increment_r5);
    ɵɵadvance(2);
    ɵɵtextInterpolate(increment_r5);
} }
function NovoTimePickerElement_div_0_novo_list_item_4_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-list-item", 6);
    ɵɵlistener("click", function NovoTimePickerElement_div_0_novo_list_item_4_Template_novo_list_item_click_0_listener($event) { ɵɵrestoreView(_r10); const increment_r8 = ctx.$implicit; const ctx_r9 = ɵɵnextContext(2); return ctx_r9.setMinutes($event, increment_r8, true); });
    ɵɵelementStart(1, "item-content");
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const increment_r8 = ctx.$implicit;
    const ctx_r3 = ɵɵnextContext(2);
    ɵɵclassProp("active", increment_r8 == ctx_r3.activeMinute);
    ɵɵattribute("data-automation-id", increment_r8);
    ɵɵadvance(2);
    ɵɵtextInterpolate(increment_r8);
} }
function NovoTimePickerElement_div_0_novo_list_5_novo_list_item_1_Template(rf, ctx) { if (rf & 1) {
    const _r14 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-list-item", 6);
    ɵɵlistener("click", function NovoTimePickerElement_div_0_novo_list_5_novo_list_item_1_Template_novo_list_item_click_0_listener($event) { ɵɵrestoreView(_r14); const period_r12 = ctx.$implicit; const ctx_r13 = ɵɵnextContext(3); return ctx_r13.setPeriod($event, period_r12, true); });
    ɵɵelementStart(1, "item-content");
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const period_r12 = ctx.$implicit;
    const ctx_r11 = ɵɵnextContext(3);
    ɵɵclassProp("active", ctx_r11.meridian == period_r12);
    ɵɵattribute("data-automation-id", period_r12);
    ɵɵadvance(2);
    ɵɵtextInterpolate(period_r12);
} }
function NovoTimePickerElement_div_0_novo_list_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-list", 7);
    ɵɵtemplate(1, NovoTimePickerElement_div_0_novo_list_5_novo_list_item_1_Template, 3, 4, "novo-list-item", 4);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r4.MERIDIANS);
} }
function NovoTimePickerElement_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 2);
    ɵɵelementStart(1, "novo-list", 3);
    ɵɵtemplate(2, NovoTimePickerElement_div_0_novo_list_item_2_Template, 3, 4, "novo-list-item", 4);
    ɵɵelementEnd();
    ɵɵelementStart(3, "novo-list", 3);
    ɵɵtemplate(4, NovoTimePickerElement_div_0_novo_list_item_4_Template, 3, 4, "novo-list-item", 4);
    ɵɵelementEnd();
    ɵɵtemplate(5, NovoTimePickerElement_div_0_novo_list_5_Template, 2, 1, "novo-list", 5);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵproperty("ngForOf", ctx_r0.HOURS);
    ɵɵadvance(2);
    ɵɵproperty("ngForOf", ctx_r0.MINUTES);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !ctx_r0.military);
} }
const _c0$W = function (a0) { return { active: a0 }; };
function NovoTimePickerElement_div_1_span_9_Template(rf, ctx) { if (rf & 1) {
    const _r19 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "span", 20);
    ɵɵlistener("click", function NovoTimePickerElement_div_1_span_9_Template_span_click_0_listener($event) { ɵɵrestoreView(_r19); const hour_r17 = ctx.$implicit; const ctx_r18 = ɵɵnextContext(2); return ctx_r18.setHours($event, hour_r17, true); });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const hour_r17 = ctx.$implicit;
    const ctx_r15 = ɵɵnextContext(2);
    ɵɵproperty("ngClass", ɵɵpureFunction1(3, _c0$W, ctx_r15.activeHour == hour_r17));
    ɵɵattribute("data-automation-id", hour_r17);
    ɵɵadvance(1);
    ɵɵtextInterpolate(hour_r17);
} }
function NovoTimePickerElement_div_1_span_11_Template(rf, ctx) { if (rf & 1) {
    const _r22 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "span", 21);
    ɵɵlistener("click", function NovoTimePickerElement_div_1_span_11_Template_span_click_0_listener($event) { ɵɵrestoreView(_r22); const minute_r20 = ctx.$implicit; const ctx_r21 = ɵɵnextContext(2); return ctx_r21.setMinutes($event, minute_r20, true); });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const minute_r20 = ctx.$implicit;
    const ctx_r16 = ɵɵnextContext(2);
    ɵɵproperty("ngClass", ɵɵpureFunction1(3, _c0$W, ctx_r16.activeMinute == minute_r20));
    ɵɵattribute("data-automation-id", minute_r20);
    ɵɵadvance(1);
    ɵɵtextInterpolate(minute_r20);
} }
const _c1$l = function (a0) { return { between: a0 }; };
function NovoTimePickerElement_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 8);
    ɵɵelementStart(1, "div", 9);
    ɵɵelementStart(2, "div", 10);
    ɵɵelement(3, "span", 11);
    ɵɵelementStart(4, "span", 12);
    ɵɵelement(5, "span", 13);
    ɵɵelementEnd();
    ɵɵelementStart(6, "span", 14);
    ɵɵelement(7, "span", 15);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementStart(8, "div", 16);
    ɵɵtemplate(9, NovoTimePickerElement_div_1_span_9_Template, 2, 5, "span", 17);
    ɵɵelementEnd();
    ɵɵelementStart(10, "div", 18);
    ɵɵtemplate(11, NovoTimePickerElement_div_1_span_11_Template, 2, 5, "span", 19);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(4);
    ɵɵproperty("ngClass", ctx_r1.hoursClass);
    ɵɵadvance(2);
    ɵɵproperty("ngClass", ctx_r1.minutesClass);
    ɵɵadvance(1);
    ɵɵproperty("ngClass", ɵɵpureFunction1(5, _c1$l, ctx_r1.inBetween));
    ɵɵadvance(2);
    ɵɵproperty("ngForOf", ctx_r1.HOURS);
    ɵɵadvance(2);
    ɵɵproperty("ngForOf", ctx_r1.MINUTES);
} }
// Value accessor for the component (supports ngModel)
const TIME_PICKER_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoTimePickerElement),
    multi: true,
};
var TIME_VALUE_FORMATS;
(function (TIME_VALUE_FORMATS) {
    TIME_VALUE_FORMATS["iso8601"] = "iso8601";
    TIME_VALUE_FORMATS["Date"] = "Date";
})(TIME_VALUE_FORMATS || (TIME_VALUE_FORMATS = {}));
class NovoTimePickerElement {
    constructor(element, labels, dateFormatService, cdr) {
        this.element = element;
        this.labels = labels;
        this.dateFormatService = dateFormatService;
        this.cdr = cdr;
        this.military = false;
        this.analog = false;
        this.inline = false;
        this.step = 1;
        this.onSelect = new EventEmitter();
        this.hours = 12;
        this.minutes = 0;
        this.value = null;
        this.increments = [];
        this.MERIDIANS = ['am', 'pm'];
        this.MINUTES = ['05', '10', '15', '20', '25', '30', '35', '40', '45', '50', '55', '00'];
        this.HOURS = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'];
        this._onChange = () => { };
        this._onTouched = () => { };
    }
    flatten(arr) {
        return Array.prototype.concat(...arr);
    }
    ngOnInit() {
        if (this.military) {
            this.HOURS = ['0', ...this.HOURS, '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23'];
        }
        if (!this.analog) {
            const mins = Array.from(Array(60 / this.step).keys()).map((i) => i * this.step);
            this.MINUTES = mins.map((m) => `${m}`.padStart(2, '0'));
        }
        this.ngOnChanges();
    }
    ngOnChanges(changes) {
        if (this.model) {
            this.init(this.model, false);
        }
        else {
            this.selected = null;
            this.init(new Date(), false);
        }
    }
    init(value, dispatch) {
        const _value = new Date(value);
        let hours = _value.getHours();
        let minutes = _value.getMinutes();
        if (!this.military) {
            this.meridian = hours >= 12 ? 'pm' : 'am';
            hours = hours % 12;
            hours = hours || 12;
        }
        minutes = minutes < 10 ? `0${minutes}` : minutes;
        this.setHours(null, hours, dispatch);
        this.setMinutes(null, minutes, dispatch);
        this.checkBetween(minutes);
    }
    checkBetween(value) {
        this.inBetween = this.MINUTES.indexOf(String(value)) < 0;
    }
    setValue(event, value) {
        Helpers.swallowEvent(event);
        this.selected = value;
        const [time, meridian] = value.split(' ');
        const [hours, minutes] = time.split(':');
        this.hours = hours;
        this.minutes = minutes;
        this.meridian = meridian;
        this.dispatchChange();
    }
    setHours(event, hours, dispatch) {
        Helpers.swallowEvent(event);
        this.hours = hours;
        this.hoursClass = `hour-${hours}`;
        this.activeHour = hours;
        if (dispatch) {
            this.dispatchChange();
        }
    }
    setMinutes(event, minutes, dispatch) {
        Helpers.swallowEvent(event);
        this.minutes = minutes;
        this.minutesClass = `min-${minutes}`;
        this.activeMinute = minutes;
        this.checkBetween(minutes);
        if (dispatch) {
            this.dispatchChange();
        }
    }
    setPeriod(event, period, dispatch) {
        Helpers.swallowEvent(event);
        this.meridian = period;
        if (dispatch) {
            this.dispatchChange();
        }
    }
    dispatchChange() {
        let hours = Number(this.hours);
        if (!this.military) {
            hours = this.meridian.toLowerCase() === 'pm' ? hours + 12 : hours;
            // Special case for 12
            if (this.meridian.toLowerCase() === 'pm' && hours === 24) {
                hours = 12;
            }
            else if (this.meridian.toLowerCase() === 'am' && hours === 12) {
                hours = 0;
            }
        }
        const value = new Date();
        value.setHours(hours);
        value.setMinutes(this.minutes);
        value.setSeconds(0);
        this.value = `${this.hours}:${this.minutes} ${this.meridian}`;
        this.onSelect.next({
            hours,
            minutes: this.minutes,
            meridian: this.meridian,
            date: value,
            text: this.value,
        });
        this._onChange(value);
    }
    // ValueAccessor Functions
    writeValue(model) {
        this.model = model;
        if (Helpers.isDate(model)) {
            this.init(model, false);
            // this.dispatchChange();
        }
        if (Helpers.isString(model)) {
            const time = this.military ? model : this.convertTime12to24(model);
            const date = parse(`${format(Date.now(), 'YYYY-MM-DD')}T${time}`);
            if (isValid(date)) {
                this.init(date, false);
                // this.dispatchChange();
            }
        }
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    convertTime12to24(time12h) {
        const pmFormat = this.labels.timeFormatPM.toUpperCase();
        const [time, modifier] = time12h.split(' ');
        let [hours, minutes] = time.split(':');
        if (hours === '12') {
            hours = '00';
        }
        if (['PM', pmFormat].includes(modifier)) {
            hours = `${parseInt(hours, 10) + 12}`.padStart(2, '0');
        }
        return `${hours}:${minutes}`;
    }
}
NovoTimePickerElement.ɵfac = function NovoTimePickerElement_Factory(t) { return new (t || NovoTimePickerElement)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(DateFormatService), ɵɵdirectiveInject(ChangeDetectorRef)); };
NovoTimePickerElement.ɵcmp = ɵɵdefineComponent({ type: NovoTimePickerElement, selectors: [["novo-time-picker"]], hostVars: 2, hostBindings: function NovoTimePickerElement_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵclassProp("military", ctx.military);
    } }, inputs: { military: "military", analog: "analog", inline: "inline", step: "step" }, outputs: { onSelect: "onSelect" }, features: [ɵɵProvidersFeature([TIME_PICKER_VALUE_ACCESSOR]), ɵɵNgOnChangesFeature], decls: 2, vars: 2, consts: [["class", "increments", 4, "ngIf"], ["class", "analog", 4, "ngIf"], [1, "increments"], ["direction", "vertical", "data-automation-id", "novo-time-picker-increments"], [3, "active", "click", 4, "ngFor", "ngForOf"], ["direction", "vertical", "data-automation-id", "novo-time-picker-meridians", 4, "ngIf"], [3, "click"], ["direction", "vertical", "data-automation-id", "novo-time-picker-meridians"], [1, "analog"], [1, "analog--inner"], [1, "analog--face"], [1, "analog--center"], [1, "analog--hand--hours", 3, "ngClass"], [1, "analog--ball"], [1, "analog--hand--minutes", 3, "ngClass"], [1, "analog--ball", 3, "ngClass"], [1, "analog--hours"], ["class", "analog--hour", 3, "ngClass", "click", 4, "ngFor", "ngForOf"], [1, "analog--minutes"], ["class", "analog--minute", 3, "ngClass", "click", 4, "ngFor", "ngForOf"], [1, "analog--hour", 3, "ngClass", "click"], [1, "analog--minute", 3, "ngClass", "click"]], template: function NovoTimePickerElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵtemplate(0, NovoTimePickerElement_div_0_Template, 6, 3, "div", 0);
        ɵɵtemplate(1, NovoTimePickerElement_div_1_Template, 12, 7, "div", 1);
    } if (rf & 2) {
        ɵɵproperty("ngIf", !ctx.analog);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.analog);
    } }, directives: [NgIf, NovoListElement, NgForOf, NovoListItemElement, NovoItemContentElement, NgClass], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTimePickerElement, [{
        type: Component,
        args: [{
                selector: 'novo-time-picker',
                providers: [TIME_PICKER_VALUE_ACCESSOR],
                template: `
    <!-- <div class="digital" [class.inline]="inline" [class.military]="military" *ngIf="inline">
      <div class="digital--inner">
        <span class="digital--clock" *ngIf="analog">
          <span class="hours" data-automation-id="novo-time-picker-hours">{{ hours }}</span
          >:<span class="minutes" data-automation-id="novo-time-picker-minutes">{{ minutes }}</span>
        </span>
        <div class="control-block" *ngIf="!military && analog">
          <span
            *ngFor="let period of MERIDIANS"
            class="digital--period"
            [class.active]="meridian == period"
            (click)="setPeriod($event, period, true)"
            [attr.data-automation-id]="period"
            >{{ period }}</span
          >
        </div>
      </div>
    </div> -->
    <div class="increments" *ngIf="!analog">
      <novo-list direction="vertical" data-automation-id="novo-time-picker-increments">
        <novo-list-item
          *ngFor="let increment of HOURS"
          (click)="setHours($event, increment, true)"
          [class.active]="increment == activeHour"
          [attr.data-automation-id]="increment"
        >
          <item-content>{{ increment }}</item-content>
        </novo-list-item>
      </novo-list>
      <novo-list direction="vertical" data-automation-id="novo-time-picker-increments">
        <novo-list-item
          *ngFor="let increment of MINUTES"
          (click)="setMinutes($event, increment, true)"
          [class.active]="increment == activeMinute"
          [attr.data-automation-id]="increment"
        >
          <item-content>{{ increment }}</item-content>
        </novo-list-item>
      </novo-list>
      <novo-list direction="vertical" *ngIf="!military" data-automation-id="novo-time-picker-meridians">
        <novo-list-item
          *ngFor="let period of MERIDIANS"
          (click)="setPeriod($event, period, true)"
          [class.active]="meridian == period"
          [attr.data-automation-id]="period"
        >
          <item-content>{{ period }}</item-content>
        </novo-list-item>
      </novo-list>
    </div>
    <div class="analog" *ngIf="analog">
      <div class="analog--inner">
        <div class="analog--face">
          <span class="analog--center"></span>
          <span class="analog--hand--hours" [ngClass]="hoursClass">
            <span class="analog--ball"></span>
          </span>
          <span class="analog--hand--minutes" [ngClass]="minutesClass">
            <span class="analog--ball" [ngClass]="{ between: inBetween }"></span>
          </span>
        </div>
        <div class="analog--hours">
          <span
            *ngFor="let hour of HOURS"
            class="analog--hour"
            [ngClass]="{ active: activeHour == hour }"
            (click)="setHours($event, hour, true)"
            [attr.data-automation-id]="hour"
            >{{ hour }}</span
          >
        </div>
        <div class="analog--minutes">
          <span
            *ngFor="let minute of MINUTES"
            class="analog--minute"
            [ngClass]="{ active: activeMinute == minute }"
            (click)="setMinutes($event, minute, true)"
            [attr.data-automation-id]="minute"
            >{{ minute }}</span
          >
        </div>
      </div>
    </div>
  `,
                host: {
                    '[class.military]': 'military',
                },
            }]
    }], function () { return [{ type: ElementRef }, { type: NovoLabelService }, { type: DateFormatService }, { type: ChangeDetectorRef }]; }, { military: [{
            type: Input
        }], analog: [{
            type: Input
        }], inline: [{
            type: Input
        }], step: [{
            type: Input
        }], onSelect: [{
            type: Output
        }] }); })();

// NG2
function NovoDateTimePickerElement_span_10_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 13);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r0.meridian, "");
} }
// Value accessor for the component (supports ngModel)
const DATE_TIME_PICKER_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoDateTimePickerElement),
    multi: true,
};
class NovoDateTimePickerElement {
    constructor(labels, element) {
        this.labels = labels;
        this.element = element;
        this.weekStart = 0;
        // Select callback for output
        this.onSelect = new EventEmitter(false);
        this.componentTabState = 'date';
        this.datePickerValue = new Date();
        this.timePickerValue = new Date();
        this._onChange = () => { };
        this._onTouched = () => { };
    }
    toggleView(tab) {
        this.componentTabState = tab;
    }
    setDateLabels(value) {
        this.selectedLabel = this.labels.formatDateWithFormat(value, {
            month: 'short',
            day: '2-digit',
            year: 'numeric',
        });
    }
    setTimeLabels(value) {
        let hours = value.getHours();
        const minutes = value.getMinutes();
        this.meridian = value.toLocaleTimeString().slice(-2);
        if (!this.military) {
            hours = this.meridian === 'PM' && hours > 12 ? hours - 12 : hours;
            // Special case for 12
            if (this.meridian === 'PM' && hours === 24) {
                hours = 12;
            }
            else if (this.meridian === 'AM' && hours === 0) {
                hours = 12;
            }
        }
        this.hours = hours.toString();
        this.minutes = minutes.toString().length === 1 ? `0${minutes.toString()}` : minutes.toString();
    }
    onDateSelected(event) {
        this.datePickerValue = event.date;
        this.model = this.createFullDateValue(this.datePickerValue, this.timePickerValue);
        this.setDateLabels(this.model);
        this.onSelect.emit({ date: this.model });
        this._onChange(this.model);
        this.toggleView('time');
    }
    onTimeSelected(event) {
        this.timePickerValue = event.date;
        this.model = this.createFullDateValue(this.model, this.timePickerValue);
        this.setTimeLabels(this.model);
        this.onSelect.emit({ date: this.model });
        this._onChange(this.model);
    }
    createFullDateValue(datePickerValue, timePickerValue) {
        return setMilliseconds(setSeconds(setMinutes(setHours(datePickerValue, getHours(timePickerValue)), getMinutes(timePickerValue)), getSeconds(timePickerValue)), getMilliseconds(timePickerValue));
    }
    // ValueAccessor Functions
    writeValue(model) {
        this.model = model;
        if (Helpers.isEmpty(model)) {
            this.model = new Date();
        }
        else if (!isNaN(model)) {
            this.model = new Date(model);
        }
        this.datePickerValue = this.model;
        this.timePickerValue = this.model;
        if (Helpers.isDate(this.model)) {
            this.setDateLabels(this.model);
            this.setTimeLabels(this.model);
        }
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
}
NovoDateTimePickerElement.ɵfac = function NovoDateTimePickerElement_Factory(t) { return new (t || NovoDateTimePickerElement)(ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(ElementRef)); };
NovoDateTimePickerElement.ɵcmp = ɵɵdefineComponent({ type: NovoDateTimePickerElement, selectors: [["novo-date-time-picker"]], inputs: { minYear: "minYear", maxYear: "maxYear", start: "start", end: "end", military: "military", weekStart: "weekStart" }, outputs: { onSelect: "onSelect" }, features: [ɵɵProvidersFeature([DATE_TIME_PICKER_VALUE_ACCESSOR])], decls: 17, vars: 16, consts: [[1, "date-time-container"], [1, "date-time-tabs"], ["data-automation-id", "novo-date-time-date-tab", 1, "date-tab", 3, "click"], ["data-automation-id", "novo-date-time-time-tab", 1, "time-tab", 3, "click"], ["data-automation-id", "novo-time-picker-hours", 1, "hours"], ["data-automation-id", "novo-time-picker-minutes", 1, "minutes"], ["class", "meridian", 4, "ngIf"], [1, "date-time-indicator"], [1, "view-container"], [1, "calendar"], ["inline", "true", 3, "ngModel", "minYear", "maxYear", "start", "end", "weekStart", "onSelect", "ngModelChange"], [1, "time-picker"], ["inline", "true", 3, "ngModel", "military", "onSelect", "ngModelChange"], [1, "meridian"]], template: function NovoDateTimePickerElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "div", 0);
        ɵɵelementStart(1, "div", 1);
        ɵɵelementStart(2, "span", 2);
        ɵɵlistener("click", function NovoDateTimePickerElement_Template_span_click_2_listener() { return ctx.toggleView("date"); });
        ɵɵtext(3);
        ɵɵelementEnd();
        ɵɵelementStart(4, "span", 3);
        ɵɵlistener("click", function NovoDateTimePickerElement_Template_span_click_4_listener() { return ctx.toggleView("time"); });
        ɵɵelementStart(5, "span", 4);
        ɵɵtext(6);
        ɵɵelementEnd();
        ɵɵtext(7, ":");
        ɵɵelementStart(8, "span", 5);
        ɵɵtext(9);
        ɵɵelementEnd();
        ɵɵtemplate(10, NovoDateTimePickerElement_span_10_Template, 2, 1, "span", 6);
        ɵɵelementEnd();
        ɵɵelement(11, "i", 7);
        ɵɵelementEnd();
        ɵɵelementStart(12, "div", 8);
        ɵɵelementStart(13, "div", 9);
        ɵɵelementStart(14, "novo-date-picker", 10);
        ɵɵlistener("onSelect", function NovoDateTimePickerElement_Template_novo_date_picker_onSelect_14_listener($event) { return ctx.onDateSelected($event); })("ngModelChange", function NovoDateTimePickerElement_Template_novo_date_picker_ngModelChange_14_listener($event) { return ctx.model = $event; });
        ɵɵelementEnd();
        ɵɵelementEnd();
        ɵɵelementStart(15, "div", 11);
        ɵɵelementStart(16, "novo-time-picker", 12);
        ɵɵlistener("onSelect", function NovoDateTimePickerElement_Template_novo_time_picker_onSelect_16_listener($event) { return ctx.onTimeSelected($event); })("ngModelChange", function NovoDateTimePickerElement_Template_novo_time_picker_ngModelChange_16_listener($event) { return ctx.model = $event; });
        ɵɵelementEnd();
        ɵɵelementEnd();
        ɵɵelementEnd();
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵadvance(2);
        ɵɵproperty("@dateTextState", ctx.componentTabState);
        ɵɵadvance(1);
        ɵɵtextInterpolate(ctx.selectedLabel);
        ɵɵadvance(1);
        ɵɵproperty("@timeTextState", ctx.componentTabState);
        ɵɵadvance(2);
        ɵɵtextInterpolate(ctx.hours);
        ɵɵadvance(3);
        ɵɵtextInterpolate(ctx.minutes);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", !ctx.military);
        ɵɵadvance(1);
        ɵɵproperty("@indicatorState", ctx.componentTabState);
        ɵɵadvance(1);
        ɵɵproperty("@containerState", ctx.componentTabState);
        ɵɵadvance(2);
        ɵɵproperty("ngModel", ctx.model)("minYear", ctx.minYear)("maxYear", ctx.maxYear)("start", ctx.start)("end", ctx.end)("weekStart", ctx.weekStart);
        ɵɵadvance(2);
        ɵɵproperty("ngModel", ctx.model)("military", ctx.military);
    } }, directives: [NgIf, NovoDatePickerElement, NgControlStatus, NgModel, NovoTimePickerElement], encapsulation: 2, data: { animation: [
            trigger('dateTextState', [
                state('date', style({
                    opacity: '1.0',
                })),
                state('time', style({
                    opacity: '0.6',
                })),
                transition('date <=> time', animate('200ms ease-in')),
            ]),
            trigger('timeTextState', [
                state('date', style({
                    opacity: '0.6',
                })),
                state('time', style({
                    opacity: '1.0',
                })),
                transition('date <=> time', animate('200ms ease-in')),
            ]),
            trigger('indicatorState', [
                state('date', style({
                    transform: 'translateX(0%)',
                })),
                state('time', style({
                    transform: 'translateX(100%)',
                })),
                transition('date <=> time', animate('200ms ease-in')),
            ]),
            trigger('containerState', [
                state('date', style({
                    transform: 'translateX(0%)',
                })),
                state('time', style({
                    transform: 'translateX(-100%)',
                })),
                transition('date <=> time', animate('200ms ease-in')),
            ]),
        ] } });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDateTimePickerElement, [{
        type: Component,
        args: [{
                selector: 'novo-date-time-picker',
                providers: [DATE_TIME_PICKER_VALUE_ACCESSOR],
                animations: [
                    trigger('dateTextState', [
                        state('date', style({
                            opacity: '1.0',
                        })),
                        state('time', style({
                            opacity: '0.6',
                        })),
                        transition('date <=> time', animate('200ms ease-in')),
                    ]),
                    trigger('timeTextState', [
                        state('date', style({
                            opacity: '0.6',
                        })),
                        state('time', style({
                            opacity: '1.0',
                        })),
                        transition('date <=> time', animate('200ms ease-in')),
                    ]),
                    trigger('indicatorState', [
                        state('date', style({
                            transform: 'translateX(0%)',
                        })),
                        state('time', style({
                            transform: 'translateX(100%)',
                        })),
                        transition('date <=> time', animate('200ms ease-in')),
                    ]),
                    trigger('containerState', [
                        state('date', style({
                            transform: 'translateX(0%)',
                        })),
                        state('time', style({
                            transform: 'translateX(-100%)',
                        })),
                        transition('date <=> time', animate('200ms ease-in')),
                    ]),
                ],
                template: `
    <div class="date-time-container">
      <div class="date-time-tabs">
        <span
          class="date-tab"
          (click)="toggleView('date')"
          [@dateTextState]="componentTabState"
          data-automation-id="novo-date-time-date-tab"
          >{{ selectedLabel }}</span
        >
        <span
          class="time-tab"
          (click)="toggleView('time')"
          [@timeTextState]="componentTabState"
          data-automation-id="novo-date-time-time-tab"
        >
          <span class="hours" data-automation-id="novo-time-picker-hours">{{ hours }}</span
          >:<span class="minutes" data-automation-id="novo-time-picker-minutes">{{ minutes }}</span>
          <span *ngIf="!military" class="meridian"> {{ meridian }}</span>
        </span>
        <i class="date-time-indicator" [@indicatorState]="componentTabState"></i>
      </div>
      <div class="view-container" [@containerState]="componentTabState">
        <div class="calendar">
          <novo-date-picker
            (onSelect)="onDateSelected($event)"
            [(ngModel)]="model"
            inline="true"
            [minYear]="minYear"
            [maxYear]="maxYear"
            [start]="start"
            [end]="end"
            [weekStart]="weekStart"
          ></novo-date-picker>
        </div>
        <div class="time-picker">
          <novo-time-picker (onSelect)="onTimeSelected($event)" [(ngModel)]="model" [military]="military" inline="true"></novo-time-picker>
        </div>
      </div>
    </div>
  `,
            }]
    }], function () { return [{ type: NovoLabelService }, { type: ElementRef }]; }, { minYear: [{
            type: Input
        }], maxYear: [{
            type: Input
        }], start: [{
            type: Input
        }], end: [{
            type: Input
        }], military: [{
            type: Input
        }], weekStart: [{
            type: Input
        }], onSelect: [{
            type: Output
        }] }); })();

// NG
function NovoTimePickerInputElement_i_2_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "i", 6);
    ɵɵlistener("click", function NovoTimePickerInputElement_i_2_Template_i_click_0_listener() { ɵɵrestoreView(_r4); const ctx_r3 = ɵɵnextContext(); return ctx_r3.openPanel(); });
    ɵɵelementEnd();
} }
function NovoTimePickerInputElement_i_3_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "i", 7);
    ɵɵlistener("click", function NovoTimePickerInputElement_i_3_Template_i_click_0_listener() { ɵɵrestoreView(_r6); const ctx_r5 = ɵɵnextContext(); return ctx_r5.clearValue(); });
    ɵɵelementEnd();
} }
// Value accessor for the component (supports ngModel)
const DATE_VALUE_ACCESSOR$2 = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoTimePickerInputElement),
    multi: true,
};
class NovoTimePickerInputElement {
    constructor(element, labels, dateFormatService, _changeDetectorRef) {
        this.element = element;
        this.labels = labels;
        this.dateFormatService = dateFormatService;
        this._changeDetectorRef = _changeDetectorRef;
        /** View -> model callback called when value changes */
        this._onChange = () => { };
        /** View -> model callback called when autocomplete has been touched */
        this._onTouched = () => { };
        this.military = false;
        this.disabled = false;
        this.blurEvent = new EventEmitter();
        this.focusEvent = new EventEmitter();
    }
    ngOnInit() {
        this.placeholder = this.military ? this.labels.timeFormatPlaceholder24Hour : this.labels.timeFormatPlaceholderAM;
        const timeFormat = this.military ? 'HH:mm' : 'hh:mm A';
        const amFormat = this.labels.timeFormatAM.toUpperCase();
        const pmFormat = this.labels.timeFormatPM.toUpperCase();
        this.maskOptions = {
            mask: Date,
            pattern: this.military ? 'HH:mm' : 'hh:mm aa',
            overwrite: true,
            autofix: true,
            lazy: false,
            min: new Date(1970, 0, 1),
            max: new Date(2030, 0, 1),
            prepare(str) {
                return str.toUpperCase();
            },
            format(date) {
                return format(date, timeFormat);
            },
            parse: (str) => {
                const time = this.military ? str : this.convertTime12to24(str);
                return parse(`${format(Date.now(), 'YYYY-MM-DD')}T${time}`);
            },
            blocks: {
                HH: {
                    mask: MaskedRange,
                    placeholderChar: 'H',
                    maxLength: 2,
                    from: 0,
                    to: 23,
                },
                hh: {
                    mask: MaskedRange,
                    placeholderChar: 'h',
                    maxLength: 2,
                    from: 1,
                    to: 12,
                },
                mm: {
                    mask: MaskedRange,
                    placeholderChar: 'm',
                    maxLength: 2,
                    from: 0,
                    to: 59,
                },
                aa: {
                    mask: MaskedEnum,
                    placeholderChar: 'x',
                    enum: ['AM', 'PM', 'am', 'pm', amFormat, pmFormat],
                },
            },
        };
    }
    onComplete(dt) {
        if (this.value !== dt) {
            this.dispatchOnChange(dt);
        }
    }
    /** BEGIN: Convenient Panel Methods. */
    openPanel() {
        if (!this.overlay.panelOpen) {
            this.overlay.openPanel();
            const hour = new Date().getHours();
            Promise.resolve(null).then(() => this.scrollToIndex(hour * 4));
        }
    }
    closePanel() {
        this.overlay.closePanel();
    }
    get panelOpen() {
        return this.overlay && this.overlay.panelOpen;
    }
    /** END: Convenient Panel Methods. */
    _handleKeydown(event) {
        const input = event.target;
        if ((event.key === "Escape" /* Escape */ || event.key === "Enter" /* Enter */ || event.key === "Tab" /* Tab */) && this.panelOpen) {
            this.closePanel();
            event.stopPropagation();
            event.stopImmediatePropagation();
        }
        if (event.key === "Backspace" /* Backspace */ && input.selectionStart === input.value.length) {
            event.target.value = `${input.value.slice(0, 5)} xx`;
        }
    }
    _handleInput(event) {
        if (document.activeElement === event.target) {
            const text = event.target.value;
            this.openPanel();
            if ((this.military && Number(text[0]) > 2) || (!this.military && Number(text[0]) > 1)) {
                event.preventDefault();
                event.target.value = `0${text}`;
            }
            if (!this.military) {
                const test = text.substr(5, 4).replace(/x/g, '').trim().slice(0, 2);
                const timePeriod = this.maskOptions.blocks.aa.enum.find((it) => it[0] === test[0]);
                if (timePeriod) {
                    event.target.value = `${text.slice(0, 5)} ${timePeriod}`;
                }
            }
        }
    }
    _handleBlur(event) {
        const text = event.target.value;
        if (!this.military) {
            const test = text.substr(5, 4).replace(/x/g, '').trim().slice(0, 2);
            const timePeriod = this.maskOptions.blocks.aa.enum.find((it) => it[0] === test[0]);
            if (!timePeriod) {
                event.target.value = `${text.slice(0, 5)} xx`;
            }
        }
    }
    _handleFocus(event) {
        this.openPanel();
        this.focusEvent.emit(event);
    }
    writeValue(value) {
        Promise.resolve(null).then(() => this._setTriggerValue(value));
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    setDisabledState(disabled) {
        this.disabled = disabled;
    }
    dispatchOnChange(newValue, skip = false) {
        if (newValue !== this.value) {
            this._onChange(newValue);
            !skip && this.writeValue(newValue);
        }
    }
    _setTriggerValue(value) {
        if (value instanceof Date && this.value instanceof Date) {
            value = new Date(value.setFullYear(this.value.getFullYear(), this.value.getMonth(), this.value.getDate()));
        }
        this.value = value;
        this._changeDetectorRef.markForCheck();
    }
    setValue(event) {
        if (event && event.date) {
            this.dispatchOnChange(event.date);
        }
    }
    setValueAndClose(event) {
        this.setValue(event);
        this.closePanel();
    }
    /**
     * Clear any previous selected option and emit a selection change event for this option
     */
    clearValue() {
        this.dispatchOnChange(null);
    }
    get hasValue() {
        return !Helpers.isEmpty(this.value);
    }
    scrollToIndex(index) {
        const element = this.overlay.overlayRef.overlayElement;
        const list = element.querySelector('.increments');
        const items = list.querySelectorAll('novo-list-item');
        const item = items[index];
        if (item) {
            list.scrollTop = item.offsetTop;
        }
    }
    convertTime12to24(time12h) {
        const pmFormat = this.labels.timeFormatPM.toUpperCase();
        const [time, modifier] = time12h.split(' ');
        let [hours, minutes] = time.split(':');
        if (hours === '12') {
            hours = '00';
        }
        if (['PM', pmFormat].includes(modifier)) {
            hours = `${parseInt(hours, 10) + 12}`.padStart(2, '0');
        }
        return `${hours}:${minutes}`;
    }
}
NovoTimePickerInputElement.ɵfac = function NovoTimePickerInputElement_Factory(t) { return new (t || NovoTimePickerInputElement)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(DateFormatService), ɵɵdirectiveInject(ChangeDetectorRef)); };
NovoTimePickerInputElement.ɵcmp = ɵɵdefineComponent({ type: NovoTimePickerInputElement, selectors: [["novo-time-picker-input"]], viewQuery: function NovoTimePickerInputElement_Query(rf, ctx) { if (rf & 1) {
        ɵɵviewQuery(NovoOverlayTemplateComponent, true);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.overlay = _t.first);
    } }, hostVars: 2, hostBindings: function NovoTimePickerInputElement_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵclassProp("disabled", ctx.disabled);
    } }, inputs: { name: "name", placeholder: "placeholder", military: "military", maskOptions: "maskOptions", disabled: "disabled" }, outputs: { blurEvent: "blurEvent", focusEvent: "focusEvent" }, features: [ɵɵProvidersFeature([DATE_VALUE_ACCESSOR$2])], decls: 6, vars: 11, consts: [["type", "text", "data-automation-id", "time-input", 3, "name", "ngModel", "imask", "unmask", "placeholder", "disabled", "ngModelChange", "complete", "focus", "keydown", "input", "blur"], ["input", ""], ["class", "bhi-clock", 3, "click", 4, "ngIf"], ["class", "bhi-times", 3, "click", 4, "ngIf"], ["position", "above-below", 3, "parent"], ["inline", "true", 3, "ngModel", "military", "onSelect"], [1, "bhi-clock", 3, "click"], [1, "bhi-times", 3, "click"]], template: function NovoTimePickerInputElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "input", 0, 1);
        ɵɵlistener("ngModelChange", function NovoTimePickerInputElement_Template_input_ngModelChange_0_listener($event) { return ctx.value = $event; })("complete", function NovoTimePickerInputElement_Template_input_complete_0_listener($event) { return ctx.onComplete($event); })("focus", function NovoTimePickerInputElement_Template_input_focus_0_listener($event) { return ctx._handleFocus($event); })("keydown", function NovoTimePickerInputElement_Template_input_keydown_0_listener($event) { return ctx._handleKeydown($event); })("input", function NovoTimePickerInputElement_Template_input_input_0_listener($event) { return ctx._handleInput($event); })("blur", function NovoTimePickerInputElement_Template_input_blur_0_listener($event) { return ctx._handleBlur($event); });
        ɵɵelementEnd();
        ɵɵtemplate(2, NovoTimePickerInputElement_i_2_Template, 1, 0, "i", 2);
        ɵɵtemplate(3, NovoTimePickerInputElement_i_3_Template, 1, 0, "i", 3);
        ɵɵelementStart(4, "novo-overlay-template", 4);
        ɵɵelementStart(5, "novo-time-picker", 5);
        ɵɵlistener("onSelect", function NovoTimePickerInputElement_Template_novo_time_picker_onSelect_5_listener($event) { return ctx.setValue($event); });
        ɵɵelementEnd();
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵproperty("name", ctx.name)("ngModel", ctx.value)("imask", ctx.maskOptions)("unmask", "typed")("placeholder", ctx.placeholder)("disabled", ctx.disabled);
        ɵɵadvance(2);
        ɵɵproperty("ngIf", !ctx.hasValue);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.hasValue);
        ɵɵadvance(1);
        ɵɵproperty("parent", ctx.element);
        ɵɵadvance(1);
        ɵɵproperty("ngModel", ctx.value)("military", ctx.military);
    } }, directives: [DefaultValueAccessor, NgControlStatus, NgModel, IMaskDirective, NgIf, NovoOverlayTemplateComponent, NovoTimePickerElement], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTimePickerInputElement, [{
        type: Component,
        args: [{
                selector: 'novo-time-picker-input',
                providers: [DATE_VALUE_ACCESSOR$2],
                template: `
    <input
      type="text"
      [name]="name"
      [(ngModel)]="value"
      [imask]="maskOptions"
      [unmask]="'typed'"
      (complete)="onComplete($event)"
      [placeholder]="placeholder"
      (focus)="_handleFocus($event)"
      (keydown)="_handleKeydown($event)"
      (input)="_handleInput($event)"
      (blur)="_handleBlur($event)"
      #input
      data-automation-id="time-input"
      [disabled]="disabled"
    />
    <i *ngIf="!hasValue" (click)="openPanel()" class="bhi-clock"></i> <i *ngIf="hasValue" (click)="clearValue()" class="bhi-times"></i>

    <novo-overlay-template [parent]="element" position="above-below">
      <novo-time-picker inline="true" (onSelect)="setValue($event)" [ngModel]="value" [military]="military"></novo-time-picker>
    </novo-overlay-template>
  `,
            }]
    }], function () { return [{ type: ElementRef }, { type: NovoLabelService }, { type: DateFormatService }, { type: ChangeDetectorRef }]; }, { name: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], military: [{
            type: Input
        }], maskOptions: [{
            type: Input
        }], disabled: [{
            type: HostBinding,
            args: ['class.disabled']
        }, {
            type: Input
        }], blurEvent: [{
            type: Output
        }], focusEvent: [{
            type: Output
        }], overlay: [{
            type: ViewChild,
            args: [NovoOverlayTemplateComponent]
        }] }); })();

// NG2
class NovoTimePickerModule {
}
NovoTimePickerModule.ɵmod = ɵɵdefineNgModule({ type: NovoTimePickerModule });
NovoTimePickerModule.ɵinj = ɵɵdefineInjector({ factory: function NovoTimePickerModule_Factory(t) { return new (t || NovoTimePickerModule)(); }, imports: [[CommonModule, FormsModule, IMaskDirectiveModule, TextMaskModule, NovoOverlayModule, NovoListModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoTimePickerModule, { declarations: [NovoTimePickerElement, NovoTimePickerInputElement], imports: [CommonModule, FormsModule, IMaskDirectiveModule, TextMaskModule, NovoOverlayModule, NovoListModule], exports: [NovoTimePickerElement, NovoTimePickerInputElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTimePickerModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, FormsModule, IMaskDirectiveModule, TextMaskModule, NovoOverlayModule, NovoListModule],
                declarations: [NovoTimePickerElement, NovoTimePickerInputElement],
                exports: [NovoTimePickerElement, NovoTimePickerInputElement],
            }]
    }], null, null); })();

// NG
// Value accessor for the component (supports ngModel)
const DATE_VALUE_ACCESSOR$3 = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoDateTimePickerInputElement),
    multi: true,
};
class NovoDateTimePickerInputElement {
    constructor(element, labels, _changeDetectorRef) {
        this.element = element;
        this.labels = labels;
        this._changeDetectorRef = _changeDetectorRef;
        /** View -> model callback called when value changes */
        this._onChange = () => { };
        /** View -> model callback called when autocomplete has been touched */
        this._onTouched = () => { };
        this.military = false;
        this.disabled = false;
        this.weekStart = 0;
        this.blurEvent = new EventEmitter();
        this.focusEvent = new EventEmitter();
    }
    writeValue(value) {
        this.datePart = isDate(value) ? parse(value) : value;
        this.timePart = isDate(value) ? parse(value) : value;
        Promise.resolve(null).then(() => this._setTriggerValue(value));
    }
    updateDate(event) {
        this.datePart = event;
        this.checkParts();
    }
    updateTime(event) {
        this.timePart = event;
        this.checkParts();
    }
    handleBlur(event) {
        this.blurEvent.emit(event);
    }
    handleFocus(event) {
        this.focusEvent.emit(event);
    }
    checkParts() {
        try {
            if (this.datePart instanceof Date && this.timePart instanceof Date) {
                this.dispatchOnChange(new Date(this.datePart.getFullYear(), this.datePart.getMonth(), this.datePart.getDate(), this.timePart.getHours(), this.timePart.getMinutes()));
            }
            else if (this.datePart instanceof Date) {
                this.timePart = new Date(this.datePart.getFullYear(), this.datePart.getMonth(), this.datePart.getDate(), 12, 0);
                this.dispatchOnChange(new Date(this.datePart.getFullYear(), this.datePart.getMonth(), this.datePart.getDate(), this.timePart.getHours(), this.timePart.getMinutes()));
            }
            else {
                this.dispatchOnChange(null);
            }
        }
        catch (err) {
            // Date not valid
            this.dispatchOnChange(null);
        }
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    setDisabledState(disabled) {
        this.disabled = disabled;
    }
    dispatchOnChange(newValue) {
        if (newValue !== this.value) {
            this._onChange(newValue);
            this._setTriggerValue(newValue);
        }
    }
    _setTriggerValue(value) {
        this.value = value;
        this._changeDetectorRef.markForCheck();
    }
    setValue(event) {
        if (event && event.date) {
            this.dispatchOnChange(event.date);
        }
    }
    setValueAndClose(event) {
        this.setValue(event);
    }
    /**
     * Clear any previous selected option and emit a selection change event for this option
     */
    clearValue() {
        this.dispatchOnChange(null);
    }
    get hasValue() {
        return !Helpers.isEmpty(this.value);
    }
}
NovoDateTimePickerInputElement.ɵfac = function NovoDateTimePickerInputElement_Factory(t) { return new (t || NovoDateTimePickerInputElement)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(ChangeDetectorRef)); };
NovoDateTimePickerInputElement.ɵcmp = ɵɵdefineComponent({ type: NovoDateTimePickerInputElement, selectors: [["novo-date-time-picker-input"]], inputs: { name: "name", start: "start", end: "end", placeholder: "placeholder", maskOptions: "maskOptions", military: "military", disabled: "disabled", format: "format", weekStart: "weekStart" }, outputs: { blurEvent: "blurEvent", focusEvent: "focusEvent" }, features: [ɵɵProvidersFeature([DATE_VALUE_ACCESSOR$3])], decls: 2, vars: 9, consts: [[3, "ngModel", "start", "end", "maskOptions", "disabled", "weekStart", "ngModelChange", "blurEvent", "focusEvent"], [3, "ngModel", "military", "disabled", "ngModelChange", "blurEvent", "focusEvent"]], template: function NovoDateTimePickerInputElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "novo-date-picker-input", 0);
        ɵɵlistener("ngModelChange", function NovoDateTimePickerInputElement_Template_novo_date_picker_input_ngModelChange_0_listener($event) { return ctx.updateDate($event); })("blurEvent", function NovoDateTimePickerInputElement_Template_novo_date_picker_input_blurEvent_0_listener($event) { return ctx.handleBlur($event); })("focusEvent", function NovoDateTimePickerInputElement_Template_novo_date_picker_input_focusEvent_0_listener($event) { return ctx.handleFocus($event); });
        ɵɵelementEnd();
        ɵɵelementStart(1, "novo-time-picker-input", 1);
        ɵɵlistener("ngModelChange", function NovoDateTimePickerInputElement_Template_novo_time_picker_input_ngModelChange_1_listener($event) { return ctx.updateTime($event); })("blurEvent", function NovoDateTimePickerInputElement_Template_novo_time_picker_input_blurEvent_1_listener($event) { return ctx.handleBlur($event); })("focusEvent", function NovoDateTimePickerInputElement_Template_novo_time_picker_input_focusEvent_1_listener($event) { return ctx.handleFocus($event); });
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵproperty("ngModel", ctx.datePart)("start", ctx.start)("end", ctx.end)("maskOptions", ctx.maskOptions)("disabled", ctx.disabled)("weekStart", ctx.weekStart);
        ɵɵadvance(1);
        ɵɵproperty("ngModel", ctx.timePart)("military", ctx.military)("disabled", ctx.disabled);
    } }, directives: [NovoDatePickerInputElement, NgControlStatus, NgModel, NovoTimePickerInputElement], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDateTimePickerInputElement, [{
        type: Component,
        args: [{
                selector: 'novo-date-time-picker-input',
                providers: [DATE_VALUE_ACCESSOR$3],
                template: `
    <novo-date-picker-input
      [ngModel]="datePart"
      (ngModelChange)="updateDate($event)"
      [start]="start"
      [end]="end"
      [maskOptions]="maskOptions"
      (blurEvent)="handleBlur($event)"
      (focusEvent)="handleFocus($event)"
      [disabled]="disabled"
      [weekStart]="weekStart"
    ></novo-date-picker-input>
    <novo-time-picker-input
      [ngModel]="timePart"
      (ngModelChange)="updateTime($event)"
      [military]="military"
      (blurEvent)="handleBlur($event)"
      (focusEvent)="handleFocus($event)"
      [disabled]="disabled"
    ></novo-time-picker-input>
  `,
            }]
    }], function () { return [{ type: ElementRef }, { type: NovoLabelService }, { type: ChangeDetectorRef }]; }, { name: [{
            type: Input
        }], start: [{
            type: Input
        }], end: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], maskOptions: [{
            type: Input
        }], military: [{
            type: Input
        }], disabled: [{
            type: Input
        }], format: [{
            type: Input
        }], weekStart: [{
            type: Input
        }], blurEvent: [{
            type: Output
        }], focusEvent: [{
            type: Output
        }] }); })();

// NG2
class NovoDateTimePickerModule {
}
NovoDateTimePickerModule.ɵmod = ɵɵdefineNgModule({ type: NovoDateTimePickerModule });
NovoDateTimePickerModule.ɵinj = ɵɵdefineInjector({ factory: function NovoDateTimePickerModule_Factory(t) { return new (t || NovoDateTimePickerModule)(); }, imports: [[CommonModule, FormsModule, NovoDatePickerModule, NovoTimePickerModule, IMaskDirectiveModule, TextMaskModule, NovoOverlayModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoDateTimePickerModule, { declarations: [NovoDateTimePickerElement, NovoDateTimePickerInputElement], imports: [CommonModule, FormsModule, NovoDatePickerModule, NovoTimePickerModule, IMaskDirectiveModule, TextMaskModule, NovoOverlayModule], exports: [NovoDateTimePickerElement, NovoDateTimePickerInputElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDateTimePickerModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, FormsModule, NovoDatePickerModule, NovoTimePickerModule, IMaskDirectiveModule, TextMaskModule, NovoOverlayModule],
                declarations: [NovoDateTimePickerElement, NovoDateTimePickerInputElement],
                exports: [NovoDateTimePickerElement, NovoDateTimePickerInputElement],
            }]
    }], null, null); })();

/**
 * Directive for a Material Design Accordion.
 */
class NovoAccordion extends CdkAccordion {
    constructor() {
        super(...arguments);
        this._hideToggle = false;
        /**
         * The display mode used for all expansion panels in the accordion. Currently two display
         * modes exist:
         *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded
         *     panel at a different elevation from the reset of the accordion.
         *  flat - no spacing is placed around expanded panels, showing all panels at the same
         *     elevation.
         */
        this.displayMode = 'default';
    }
    /** Whether the expansion indicator should be hidden. */
    get hideToggle() {
        return this._hideToggle;
    }
    set hideToggle(show) {
        this._hideToggle = coerceBooleanProperty(show);
    }
}
NovoAccordion.ɵfac = function NovoAccordion_Factory(t) { return ɵNovoAccordion_BaseFactory(t || NovoAccordion); };
NovoAccordion.ɵdir = ɵɵdefineDirective({ type: NovoAccordion, selectors: [["novo-accordion"]], hostAttrs: [1, "novo-accordion"], inputs: { hideToggle: "hideToggle", displayMode: "displayMode" }, exportAs: ["novoAccordion"], features: [ɵɵInheritDefinitionFeature] });
const ɵNovoAccordion_BaseFactory = /*@__PURE__*/ ɵɵgetInheritedFactory(NovoAccordion);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoAccordion, [{
        type: Directive,
        args: [{
                selector: 'novo-accordion',
                exportAs: 'novoAccordion',
                host: {
                    class: 'novo-accordion',
                },
            }]
    }], null, { hideToggle: [{
            type: Input
        }], displayMode: [{
            type: Input
        }] }); })();

/** Time and timing curve for expansion panel animations. */
const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';
/** Animations used by the Material expansion panel. */
const novoExpansionAnimations = {
    /** Animation that rotates the indicator arrow. */
    indicatorRotate: trigger('indicatorRotate', [
        state('collapsed', style({ transform: 'rotate(0deg)' })),
        state('expanded', style({ transform: 'rotate(180deg)' })),
        transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),
    ]),
    /** Animation that expands and collapses the panel header height. */
    expansionHeaderHeight: trigger('expansionHeight', [
        state('collapsed', style({
            height: '{{collapsedHeight}}',
        }), {
            params: { collapsedHeight: '48px' },
        }),
        state('expanded', style({
            height: '{{expandedHeight}}',
        }), {
            params: { expandedHeight: '56px' },
        }),
        transition('expanded <=> collapsed', group([query('@indicatorRotate', animateChild(), { optional: true }), animate(EXPANSION_PANEL_ANIMATION_TIMING)])),
    ]),
    /** Animation that expands and collapses the panel content. */
    bodyExpansion: trigger('bodyExpansion', [
        state('collapsed', style({ height: '0px', visibility: 'hidden' })),
        state('expanded', style({ height: '*', visibility: 'visible' })),
        transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),
    ]),
};

/**
 * Expansion panel content that will be rendered lazily
 * after the panel is opened for the first time.
 */
class NovoExpansionPanelContent {
    constructor(_template) {
        this._template = _template;
    }
}
NovoExpansionPanelContent.ɵfac = function NovoExpansionPanelContent_Factory(t) { return new (t || NovoExpansionPanelContent)(ɵɵdirectiveInject(TemplateRef)); };
NovoExpansionPanelContent.ɵdir = ɵɵdefineDirective({ type: NovoExpansionPanelContent, selectors: [["ng-template", "matExpansionPanelContent", ""]] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoExpansionPanelContent, [{
        type: Directive,
        args: [{
                selector: 'ng-template[matExpansionPanelContent]',
            }]
    }], function () { return [{ type: TemplateRef }]; }, null); })();

function NovoExpansionPanel_ng_template_5_Template(rf, ctx) { }
const _c0$X = [[["novo-expansion-panel-header"]], "*", [["novo-action-row"]]];
const _c1$m = ["novo-expansion-panel-header", "*", "novo-action-row"];
/** Counter for generating unique element ids. */
let uniqueId = 0;
/**
 * `<novo-expansion-panel>`
 *
 * This component can be used as a single element to show expandable content, or as one of
 * multiple children of an element with the NovoAccordion directive attached.
 */
class NovoExpansionPanel extends CdkAccordionItem {
    constructor(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef) {
        super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);
        this._viewContainerRef = _viewContainerRef;
        this._hideToggle = false;
        this._padding = true;
        this.opened = new EventEmitter();
        this.closed = new EventEmitter();
        this.expandedChange = new EventEmitter();
        /** Stream that emits for changes in `@Input` properties. */
        this._inputChanges = new Subject();
        /** ID for the associated header element. Used for a11y labelling. */
        this._headerId = `novo-expansion-panel-header-${uniqueId++}`;
        this.accordion = accordion;
    }
    /** Whether the toggle indicator should be hidden. */
    get hideToggle() {
        return this._hideToggle;
    }
    set hideToggle(value) {
        this._hideToggle = coerceBooleanProperty(value);
    }
    get padding() {
        return this._padding;
    }
    set padding(value) {
        this._padding = coerceBooleanProperty(value);
    }
    /** Whether the expansion indicator should be hidden. */
    _getHideToggle() {
        if (this.accordion) {
            return this.accordion.hideToggle;
        }
        return this.hideToggle;
    }
    /** Determines whether the expansion panel should have spacing between it and its siblings. */
    _hasSpacing() {
        if (this.accordion) {
            return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';
        }
        return false;
    }
    /** Gets the expanded state string. */
    _getExpandedState() {
        return this.expanded ? 'expanded' : 'collapsed';
    }
    ngAfterContentInit() {
        if (this._lazyContent) {
            // Render the content as soon as the panel becomes open.
            this.opened
                .pipe(startWith(null), filter(() => this.expanded && !this._portal), take(1))
                .subscribe(() => {
                this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);
            });
        }
    }
    ngOnChanges(changes) {
        this._inputChanges.next(changes);
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        this._inputChanges.complete();
    }
    _bodyAnimation(event) {
        const classList = event.element.classList;
        const cssClass = 'novo-expanded';
        const { phaseName, toState } = event;
        // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in
        // order to prevent the cases where switching too early would cause the animation to jump.
        // Note that we do it directly on the DOM element to avoid the slight delay that comes
        // with doing it via change detection.
        if (phaseName === 'done' && toState === 'expanded') {
            classList.add(cssClass);
        }
        else if (phaseName === 'start' && toState === 'collapsed') {
            classList.remove(cssClass);
        }
    }
}
NovoExpansionPanel.ɵfac = function NovoExpansionPanel_Factory(t) { return new (t || NovoExpansionPanel)(ɵɵdirectiveInject(NovoAccordion, 9), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(UniqueSelectionDispatcher), ɵɵdirectiveInject(ViewContainerRef)); };
NovoExpansionPanel.ɵcmp = ɵɵdefineComponent({ type: NovoExpansionPanel, selectors: [["novo-expansion-panel"]], contentQueries: function NovoExpansionPanel_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵɵcontentQuery(dirIndex, NovoExpansionPanelContent, true);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx._lazyContent = _t.first);
    } }, hostAttrs: [1, "novo-expansion-panel"], hostVars: 6, hostBindings: function NovoExpansionPanel_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵclassProp("novo-expanded", ctx.expanded)("novo-expansion-panel-spacing", ctx._hasSpacing())("novo-expansion-panel-padding", ctx.padding);
    } }, inputs: { hideToggle: "hideToggle", padding: "padding" }, outputs: { opened: "opened", closed: "closed", expandedChange: "expandedChange" }, exportAs: ["novoExpansionPanel"], features: [ɵɵInheritDefinitionFeature, ɵɵNgOnChangesFeature], ngContentSelectors: _c1$m, decls: 7, vars: 4, consts: [["role", "region", 1, "novo-expansion-panel-content", 3, "id"], ["body", ""], [1, "novo-expansion-panel-body"], [3, "cdkPortalOutlet"]], template: function NovoExpansionPanel_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef(_c0$X);
        ɵɵprojection(0);
        ɵɵelementStart(1, "div", 0, 1);
        ɵɵlistener("@bodyExpansion.done", function NovoExpansionPanel_Template_div_animation_bodyExpansion_done_1_listener($event) { return ctx._bodyAnimation($event); })("@bodyExpansion.start", function NovoExpansionPanel_Template_div_animation_bodyExpansion_start_1_listener($event) { return ctx._bodyAnimation($event); });
        ɵɵelementStart(3, "div", 2);
        ɵɵprojection(4, 1);
        ɵɵtemplate(5, NovoExpansionPanel_ng_template_5_Template, 0, 0, "ng-template", 3);
        ɵɵelementEnd();
        ɵɵprojection(6, 2);
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵadvance(1);
        ɵɵproperty("@bodyExpansion", ctx._getExpandedState())("id", ctx.id);
        ɵɵattribute("aria-labelledby", ctx._headerId);
        ɵɵadvance(4);
        ɵɵproperty("cdkPortalOutlet", ctx._portal);
    } }, directives: [CdkPortalOutlet], styles: ["@-webkit-keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}@keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}.novo-expansion-panel{background:#fff;color:#3d464d}.novo-action-row{border-top-color:#3d464d}.novo-expansion-panel:not(.novo-expanded) .novo-expansion-panel-header:not([aria-disabled=true]).cdk-keyboard-focused,.novo-expansion-panel:not(.novo-expanded) .novo-expansion-panel-header:not([aria-disabled=true]).cdk-program-focused,.novo-expansion-panel:not(.novo-expanded) .novo-expansion-panel-header:not([aria-disabled=true]):hover{background:rgba(0,0,0,.04)}.novo-expansion-panel-header-title{color:#3d464d}.novo-expansion-indicator:after,.novo-expansion-panel-header-description{color:#999}.novo-expansion-panel-header[aria-disabled=true]{color:#999;pointer-events:none}.novo-expansion-panel-header[aria-disabled=true] .novo-expansion-panel-header-description,.novo-expansion-panel-header[aria-disabled=true] .novo-expansion-panel-header-title{color:inherit}.novo-expansion-panel.novo-expanded[theme=company]{border-top:3px solid #39d}.novo-expansion-panel.novo-expanded[theme=candidate]{border-top:3px solid #4b7}.novo-expansion-panel.novo-expanded[theme=navigation]{border-top:3px solid #2f384f}.novo-expansion-panel.novo-expanded[theme=lead]{border-top:3px solid #a69}.novo-expansion-panel.novo-expanded[theme=contact]{border-top:3px solid #fa4}.novo-expansion-panel.novo-expanded[theme=opportunity]{border-top:3px solid #625}.novo-expansion-panel.novo-expanded[theme=job]{border-top:3px solid #b56}.novo-expansion-panel.novo-expanded[theme=earnCode],.novo-expansion-panel.novo-expanded[theme=jobCode]{border-top:3px solid #696d79}.novo-expansion-panel.novo-expanded[theme=sendout]{border-top:3px solid #747884}.novo-expansion-panel.novo-expanded[theme=placement]{border-top:3px solid #0b344f}.novo-expansion-panel.novo-expanded[theme=corporateuser],.novo-expansion-panel.novo-expanded[theme=credential],.novo-expansion-panel.novo-expanded[theme=distributionList],.novo-expansion-panel.novo-expanded[theme=task],.novo-expansion-panel.novo-expanded[theme=user]{border-top:3px solid #4f5361}.novo-expansion-panel.novo-expanded[theme=aqua]{border-top:3px solid #3bafda}.novo-expansion-panel.novo-expanded[theme=ocean]{border-top:3px solid #4a89dc}.novo-expansion-panel.novo-expanded[theme=mint]{border-top:3px solid #37bc9b}.novo-expansion-panel.novo-expanded[theme=grass]{border-top:3px solid #8cc152}.novo-expansion-panel.novo-expanded[theme=sunflower]{border-top:3px solid #f6b042}.novo-expansion-panel.novo-expanded[theme=bittersweet]{border-top:3px solid #eb6845}.novo-expansion-panel.novo-expanded[theme=grapefruit]{border-top:3px solid #da4453}.novo-expansion-panel.novo-expanded[theme=carnation]{border-top:3px solid #d770ad}.novo-expansion-panel.novo-expanded[theme=lavender]{border-top:3px solid #967adc}.novo-expansion-panel.novo-expanded[theme=positive]{border-top:3px solid #4a89dc}.novo-expansion-panel.novo-expanded[theme=success]{border-top:3px solid #8cc152}.novo-expansion-panel.novo-expanded[theme=negative]{border-top:3px solid #da4453}.novo-expansion-panel.novo-expanded[theme=warning]{border-top:3px solid #f6b042}.novo-expansion-panel.novo-expanded[theme=black]{border-top:3px solid #000}.novo-expansion-panel.novo-expanded[theme=dark]{border-top:3px solid #3d464d}.novo-expansion-panel.novo-expanded[theme=pulse]{border-top:3px solid #3bafda}.novo-expansion-panel.novo-expanded[theme=neutral]{border-top:3px solid #4f5361}.novo-expansion-panel.novo-expanded[theme=navy]{border-top:3px solid #0d2d42}.novo-expansion-panel.novo-expanded[theme=contract]{border-top:3px solid #454ea0}.novo-expansion-panel.novo-expanded[theme=mountain]{border-top:3px solid #9678b6}.novo-expansion-panel.novo-expanded[theme=billableCharge],.novo-expansion-panel.novo-expanded[theme=invoiceStatement],.novo-expansion-panel.novo-expanded[theme=payableCharge]{border-top:3px solid #696d79}.novo-expansion-panel.novo-expanded[theme=submission]{border-top:3px solid #a9adbb}.novo-expansion-panel.novo-expanded[theme=note]{border-top:3px solid #747884}.novo-expansion-panel.novo-expanded[theme=ash]{border-top:3px solid #a0a0a0}.novo-expansion-panel.novo-expanded[theme=slate]{border-top:3px solid #707070}.novo-expansion-panel.novo-expanded[theme=charcoal]{border-top:3px solid #282828}.novo-expansion-panel.novo-expanded[theme=midnight]{border-top:3px solid #0b0f1a}.novo-expansion-panel.novo-expanded[theme=background]{border-top:3px solid #f4f4f4}.novo-expansion-panel.novo-expanded[theme=background-dark]{border-top:3px solid #e2e2e2}.novo-expansion-panel.novo-expanded[theme=white]{border-top:3px solid #fff}.novo-expansion-panel.novo-expanded[theme=grey]{border-top:3px solid #999}.novo-expansion-panel.novo-expanded[theme=off-white]{border-top:3px solid #f4f4f4}.novo-expansion-panel.novo-expanded[theme=light]{border-top:3px solid #bebebe}.novo-expansion-panel.novo-expanded[theme=empty]{border-top:3px solid #cccdcc}.novo-expansion-panel.novo-expanded[theme=disabled]{border-top:3px solid #bebebe}.novo-expansion-panel.novo-expanded[theme=sand]{border-top:3px solid #f4f4f4}.novo-expansion-panel.novo-expanded[theme=silver]{border-top:3px solid #e2e2e2}.novo-expansion-panel.novo-expanded[theme=stone]{border-top:3px solid #bebebe}.novo-expansion-panel{box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);box-sizing:content-box;display:block;margin:0 16px;transition:margin 225ms ease-in-out}.novo-expansion-panel.novo-expanded{margin:16px 4px}.novo-expansion-panel.novo-expanded:first-child{margin-top:0}.novo-expansion-panel.novo-expanded:last-child{margin-bottom:0}.novo-expansion-panel-content{overflow:hidden}.novo-expansion-panel-content.novo-expanded{overflow:visible}.novo-expansion-panel-padding .novo-expansion-panel-body{padding:0 24px 16px}.novo-accordion .novo-expansion-panel-spacing:first-child{margin-top:0}.novo-accordion .novo-expansion-panel-spacing:last-child{margin-bottom:0}.novo-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.novo-action-row button.novo-button{margin-left:8px}[dir=rtl] .novo-action-row button.novo-button{margin-left:0;margin-right:8px}"], encapsulation: 2, data: { animation: [novoExpansionAnimations.bodyExpansion] }, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoExpansionPanel, [{
        type: Component,
        args: [{
                styleUrls: ['./expansion-panel.scss'],
                selector: 'novo-expansion-panel',
                exportAs: 'novoExpansionPanel',
                templateUrl: './expansion-panel.html',
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                animations: [novoExpansionAnimations.bodyExpansion],
                host: {
                    class: 'novo-expansion-panel',
                    '[class.novo-expanded]': 'expanded',
                    '[class.novo-expansion-panel-spacing]': '_hasSpacing()',
                    '[class.novo-expansion-panel-padding]': 'padding',
                },
            }]
    }], function () { return [{ type: NovoAccordion, decorators: [{
                type: Optional
            }, {
                type: Host
            }] }, { type: ChangeDetectorRef }, { type: UniqueSelectionDispatcher }, { type: ViewContainerRef }]; }, { hideToggle: [{
            type: Input
        }], padding: [{
            type: Input
        }], opened: [{
            type: Output
        }], closed: [{
            type: Output
        }], expandedChange: [{
            type: Output
        }], _lazyContent: [{
            type: ContentChild,
            args: [NovoExpansionPanelContent]
        }] }); })();
class NovoExpansionPanelActionRow {
}
NovoExpansionPanelActionRow.ɵfac = function NovoExpansionPanelActionRow_Factory(t) { return new (t || NovoExpansionPanelActionRow)(); };
NovoExpansionPanelActionRow.ɵdir = ɵɵdefineDirective({ type: NovoExpansionPanelActionRow, selectors: [["novo-action-row"]], hostAttrs: [1, "novo-action-row"] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoExpansionPanelActionRow, [{
        type: Directive,
        args: [{
                selector: 'novo-action-row',
                host: {
                    class: 'novo-action-row',
                },
            }]
    }], null, null); })();

const _c0$Y = function (a0, a1) { return { collapsedHeight: a0, expandedHeight: a1 }; };
const _c1$n = function (a0, a1) { return { value: a0, params: a1 }; };
function NovoExpansionPanelHeader_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "span", 2);
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵproperty("@indicatorRotate", ctx_r0._getExpandedState());
} }
const _c2$a = [[["novo-panel-title"]], [["novo-panel-description"]], "*"];
const _c3$6 = ["novo-panel-title", "novo-panel-description", "*"];
/**
 * `<novo-expansion-panel-header>`
 *
 * This component corresponds to the header element of an `<novo-expansion-panel>`.
 */
class NovoExpansionPanelHeader {
    constructor(panel, _element, 
    // private _focusMonitor: FocusMonitor,
    _changeDetectorRef) {
        this.panel = panel;
        this._element = _element;
        this._changeDetectorRef = _changeDetectorRef;
        this._parentChangeSubscription = Subscription.EMPTY;
        // Since the toggle state depends on an @Input on the panel, we
        // need to  subscribe and trigger change detection manually.
        this._parentChangeSubscription = merge(panel.opened, panel.closed, panel._inputChanges.pipe(filter((changes) => !!(changes.hideToggle || changes.disabled)))).subscribe(() => this._changeDetectorRef.markForCheck());
        // _focusMonitor.monitor(_element.nativeElement);
    }
    /** Toggles the expanded state of the panel. */
    _toggle() {
        this.panel.toggle();
    }
    /** Gets whether the panel is expanded. */
    _isExpanded() {
        return this.panel.expanded;
    }
    /** Gets the expanded state string of the panel. */
    _getExpandedState() {
        return this.panel._getExpandedState();
    }
    /** Gets the panel id. */
    _getPanelId() {
        return this.panel.id;
    }
    /** Gets whether the expand indicator should be shown. */
    _showToggle() {
        return !this.panel.hideToggle && !this.panel.disabled;
    }
    /** Handle keydown event calling to toggle() if appropriate. */
    _keydown(event) {
        switch (event.key) {
            // Toggle for space and enter keys.
            case " " /* Space */:
            case "Enter" /* Enter */:
                event.preventDefault();
                this._toggle();
                break;
            default:
                return;
        }
    }
    ngOnDestroy() {
        this._parentChangeSubscription.unsubscribe();
        // this._focusMonitor.stopMonitoring(this._element.nativeElement);
    }
}
NovoExpansionPanelHeader.ɵfac = function NovoExpansionPanelHeader_Factory(t) { return new (t || NovoExpansionPanelHeader)(ɵɵdirectiveInject(NovoExpansionPanel, 1), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ChangeDetectorRef)); };
NovoExpansionPanelHeader.ɵcmp = ɵɵdefineComponent({ type: NovoExpansionPanelHeader, selectors: [["novo-expansion-panel-header"]], hostAttrs: ["role", "button", 1, "novo-expansion-panel-header"], hostVars: 14, hostBindings: function NovoExpansionPanelHeader_HostBindings(rf, ctx) { if (rf & 1) {
        ɵɵlistener("click", function NovoExpansionPanelHeader_click_HostBindingHandler() { return ctx._toggle(); })("keydown", function NovoExpansionPanelHeader_keydown_HostBindingHandler($event) { return ctx._keydown($event); });
    } if (rf & 2) {
        ɵɵattribute("id", ctx.panel._headerId)("tabindex", ctx.panel.disabled ? 0 - 1 : 0)("aria-controls", ctx._getPanelId())("aria-expanded", ctx._isExpanded())("aria-disabled", ctx.panel.disabled);
        ɵɵsyntheticHostProperty("@expansionHeight", ɵɵpureFunction2(11, _c1$n, ctx._getExpandedState(), ɵɵpureFunction2(8, _c0$Y, ctx.collapsedHeight, ctx.expandedHeight)));
        ɵɵclassProp("novo-expanded", ctx._isExpanded());
    } }, inputs: { expandedHeight: "expandedHeight", collapsedHeight: "collapsedHeight" }, ngContentSelectors: _c3$6, decls: 5, vars: 1, consts: [[1, "novo-content"], ["class", "novo-expansion-indicator", 4, "ngIf"], [1, "novo-expansion-indicator"]], template: function NovoExpansionPanelHeader_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef(_c2$a);
        ɵɵelementStart(0, "span", 0);
        ɵɵprojection(1);
        ɵɵprojection(2, 1);
        ɵɵprojection(3, 2);
        ɵɵelementEnd();
        ɵɵtemplate(4, NovoExpansionPanelHeader_span_4_Template, 1, 1, "span", 1);
    } if (rf & 2) {
        ɵɵadvance(4);
        ɵɵproperty("ngIf", ctx._showToggle());
    } }, directives: [NgIf], styles: ["@-webkit-keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}.novo-expansion-panel-header{align-items:center;display:flex;flex-direction:row;padding:0 24px}.novo-expansion-panel-header:focus,.novo-expansion-panel-header:hover{outline:none}.novo-expansion-panel-header.novo-expanded:focus,.novo-expansion-panel-header.novo-expanded:hover{background:inherit}.novo-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.novo-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.novo-expansion-panel-header-description,.novo-expansion-panel-header-title{align-items:center;display:flex;flex-grow:1;gap:1rem;margin-right:16px}[dir=rtl] .novo-expansion-panel-header-description,[dir=rtl] .novo-expansion-panel-header-title{margin-left:16px;margin-right:0}.novo-expansion-panel-header-description{flex-grow:2}.novo-expansion-indicator:after{border-style:solid;border-width:0 2px 2px 0;content:\"\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}"], encapsulation: 2, data: { animation: [novoExpansionAnimations.indicatorRotate, novoExpansionAnimations.expansionHeaderHeight] }, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoExpansionPanelHeader, [{
        type: Component,
        args: [{
                selector: 'novo-expansion-panel-header',
                styleUrls: ['./expansion-panel-header.scss'],
                templateUrl: './expansion-panel-header.html',
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                animations: [novoExpansionAnimations.indicatorRotate, novoExpansionAnimations.expansionHeaderHeight],
                host: {
                    class: 'novo-expansion-panel-header',
                    role: 'button',
                    '[attr.id]': 'panel._headerId',
                    '[attr.tabindex]': 'panel.disabled ? -1 : 0',
                    '[attr.aria-controls]': '_getPanelId()',
                    '[attr.aria-expanded]': '_isExpanded()',
                    '[attr.aria-disabled]': 'panel.disabled',
                    '[class.novo-expanded]': '_isExpanded()',
                    '(click)': '_toggle()',
                    '(keydown)': '_keydown($event)',
                    '[@expansionHeight]': `{
        value: _getExpandedState(),
        params: {
          collapsedHeight: collapsedHeight,
          expandedHeight: expandedHeight
        }
    }`,
                },
            }]
    }], function () { return [{ type: NovoExpansionPanel, decorators: [{
                type: Host
            }] }, { type: ElementRef }, { type: ChangeDetectorRef }]; }, { expandedHeight: [{
            type: Input
        }], collapsedHeight: [{
            type: Input
        }] }); })();
/**
 * `<novo-panel-description>`
 *
 * This direction is to be used inside of the NovoExpansionPanelHeader component.
 */
class NovoExpansionPanelDescription {
}
NovoExpansionPanelDescription.ɵfac = function NovoExpansionPanelDescription_Factory(t) { return new (t || NovoExpansionPanelDescription)(); };
NovoExpansionPanelDescription.ɵdir = ɵɵdefineDirective({ type: NovoExpansionPanelDescription, selectors: [["novo-panel-description"]], hostAttrs: [1, "novo-expansion-panel-header-description"] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoExpansionPanelDescription, [{
        type: Directive,
        args: [{
                selector: 'novo-panel-description',
                host: {
                    class: 'novo-expansion-panel-header-description',
                },
            }]
    }], null, null); })();
/**
 * `<novo-panel-title>`
 *
 * This direction is to be used inside of the NovoExpansionPanelHeader component.
 */
class NovoExpansionPanelTitle {
}
NovoExpansionPanelTitle.ɵfac = function NovoExpansionPanelTitle_Factory(t) { return new (t || NovoExpansionPanelTitle)(); };
NovoExpansionPanelTitle.ɵdir = ɵɵdefineDirective({ type: NovoExpansionPanelTitle, selectors: [["novo-panel-title"]], hostAttrs: [1, "novo-expansion-panel-header-title"] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoExpansionPanelTitle, [{
        type: Directive,
        args: [{
                selector: 'novo-panel-title',
                host: {
                    class: 'novo-expansion-panel-header-title',
                },
            }]
    }], null, null); })();

class NovoExpansionModule {
}
NovoExpansionModule.ɵmod = ɵɵdefineNgModule({ type: NovoExpansionModule });
NovoExpansionModule.ɵinj = ɵɵdefineInjector({ factory: function NovoExpansionModule_Factory(t) { return new (t || NovoExpansionModule)(); }, imports: [[CommonModule, CdkAccordionModule, PortalModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoExpansionModule, { declarations: [NovoAccordion,
        NovoExpansionPanel,
        NovoExpansionPanelActionRow,
        NovoExpansionPanelHeader,
        NovoExpansionPanelTitle,
        NovoExpansionPanelDescription,
        NovoExpansionPanelContent], imports: [CommonModule, CdkAccordionModule, PortalModule], exports: [NovoAccordion,
        NovoExpansionPanel,
        NovoExpansionPanelActionRow,
        NovoExpansionPanelHeader,
        NovoExpansionPanelTitle,
        NovoExpansionPanelDescription,
        NovoExpansionPanelContent] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoExpansionModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, CdkAccordionModule, PortalModule],
                exports: [
                    NovoAccordion,
                    NovoExpansionPanel,
                    NovoExpansionPanelActionRow,
                    NovoExpansionPanelHeader,
                    NovoExpansionPanelTitle,
                    NovoExpansionPanelDescription,
                    NovoExpansionPanelContent,
                ],
                declarations: [
                    NovoAccordion,
                    NovoExpansionPanel,
                    NovoExpansionPanelActionRow,
                    NovoExpansionPanelHeader,
                    NovoExpansionPanelTitle,
                    NovoExpansionPanelDescription,
                    NovoExpansionPanelContent,
                ],
            }]
    }], null, null); })();

// NG2
const _c0$Z = ["*"];
class NovoFlexElement {
    constructor() {
        this.direction = 'row';
        this.align = 'center';
        this.justify = 'flex-start';
        this.wrap = 'nowrap';
        this.gap = 'nowrap';
    }
    get display() {
        return 'flex';
    }
}
NovoFlexElement.ɵfac = function NovoFlexElement_Factory(t) { return new (t || NovoFlexElement)(); };
NovoFlexElement.ɵcmp = ɵɵdefineComponent({ type: NovoFlexElement, selectors: [["novo-flex"]], hostVars: 12, hostBindings: function NovoFlexElement_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵstyleProp("display", ctx.display)("flex-direction", ctx.direction)("align-items", ctx.align)("justify-content", ctx.justify)("flex-wrap", ctx.wrap)("gap", ctx.gap);
    } }, inputs: { direction: "direction", align: "align", justify: "justify", wrap: "wrap", gap: "gap" }, ngContentSelectors: _c0$Z, decls: 1, vars: 0, template: function NovoFlexElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoFlexElement, [{
        type: Component,
        args: [{
                selector: 'novo-flex',
                template: ` <ng-content></ng-content> `,
            }]
    }], null, { display: [{
            type: HostBinding,
            args: ['style.display']
        }], direction: [{
            type: HostBinding,
            args: ['style.flex-direction']
        }, {
            type: Input
        }], align: [{
            type: HostBinding,
            args: ['style.align-items']
        }, {
            type: Input
        }], justify: [{
            type: HostBinding,
            args: ['style.justify-content']
        }, {
            type: Input
        }], wrap: [{
            type: HostBinding,
            args: ['style.flex-wrap']
        }, {
            type: Input
        }], gap: [{
            type: HostBinding,
            args: ['style.gap']
        }, {
            type: Input
        }] }); })();

// NG2
const _c0$_ = ["*"];
class NovoGridElement {
    constructor(_sanitizer) {
        this._sanitizer = _sanitizer;
        this.direction = 'row';
        this.align = 'center';
        this.justify = 'flex-start';
        this.gap = 'nowrap';
        this.columns = '1';
    }
    get display() {
        return 'grid';
    }
    get hb_gridCols() {
        if (_isNumberValue(this.columns)) {
            return this._sanitizer.bypassSecurityTrustStyle(`repeat(${this.columns}, 1fr)`);
        }
        return this._sanitizer.bypassSecurityTrustStyle(`${this.columns}`);
    }
}
NovoGridElement.ɵfac = function NovoGridElement_Factory(t) { return new (t || NovoGridElement)(ɵɵdirectiveInject(DomSanitizer)); };
NovoGridElement.ɵcmp = ɵɵdefineComponent({ type: NovoGridElement, selectors: [["novo-grid"]], hostVars: 12, hostBindings: function NovoGridElement_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵstyleProp("display", ctx.display)("flex-direction", ctx.direction)("align-items", ctx.align)("justify-content", ctx.justify)("gap", ctx.gap)("grid-template-columns", ctx.hb_gridCols);
    } }, inputs: { direction: "direction", align: "align", justify: "justify", gap: "gap", columns: "columns" }, ngContentSelectors: _c0$_, decls: 1, vars: 0, template: function NovoGridElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoGridElement, [{
        type: Component,
        args: [{
                selector: 'novo-grid',
                template: ` <ng-content></ng-content> `,
            }]
    }], function () { return [{ type: DomSanitizer }]; }, { display: [{
            type: HostBinding,
            args: ['style.display']
        }], direction: [{
            type: HostBinding,
            args: ['style.flex-direction']
        }, {
            type: Input
        }], align: [{
            type: HostBinding,
            args: ['style.align-items']
        }, {
            type: Input
        }], justify: [{
            type: HostBinding,
            args: ['style.justify-content']
        }, {
            type: Input
        }], gap: [{
            type: HostBinding,
            args: ['style.gap']
        }, {
            type: Input
        }], columns: [{
            type: Input
        }], hb_gridCols: [{
            type: HostBinding,
            args: ['style.grid-template-columns']
        }] }); })();

// NG2
class NovoFlexModule {
}
NovoFlexModule.ɵmod = ɵɵdefineNgModule({ type: NovoFlexModule });
NovoFlexModule.ɵinj = ɵɵdefineInjector({ factory: function NovoFlexModule_Factory(t) { return new (t || NovoFlexModule)(); }, imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoFlexModule, { declarations: [NovoFlexElement, NovoGridElement], imports: [CommonModule], exports: [NovoFlexElement, NovoGridElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoFlexModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [NovoFlexElement, NovoGridElement],
                exports: [NovoFlexElement, NovoGridElement],
            }]
    }], null, null); })();

class NovoModalParams {
}
class NovoModalRef {
    constructor(component, params, overlayRef) {
        this.component = component;
        this.params = params;
        this.overlayRef = overlayRef;
        this._beforeClose = new Subject();
        this._afterClosed = new Subject();
        this.isClosed = false;
    }
    // Gets a promise that is resolved when the dialog is closed.
    get onClosed() {
        return this._afterClosed.toPromise();
    }
    afterClosed() {
        return this._afterClosed.asObservable();
    }
    beforeClose() {
        return this._beforeClose.asObservable();
    }
    close(result) {
        // Listen for animation 'start' events
        this.componentInstance.animationStateChanged
            .pipe(filter((event) => event.phaseName === 'start'), take(1))
            .subscribe(() => {
            this._beforeClose.next(result);
            this._beforeClose.complete();
            this.overlayRef.detachBackdrop();
        });
        // Listen for animation 'done' events
        this.componentInstance.animationStateChanged
            .pipe(filter((event) => event.phaseName === 'done' && event.toState === 'leave'), take(1))
            .subscribe(() => {
            this.isClosed = true;
            this.overlayRef.dispose();
            this._afterClosed.next(result);
            this._afterClosed.complete();
            // Make sure to also clear the reference to the
            // component instance to avoid memory leaks
            this.componentInstance = null;
        });
        // Start exit animation
        this.componentInstance.startExitAnimation();
    }
}

const zoomInOut = trigger('zoomInOut', [
    transition('void => *', [style({ transform: 'scale3d(.3, .3, .3)' }), animate(100)]),
    transition('* => void', [animate(100, style({ transform: 'scale3d(.0, .0, .0)' }))]),
]);

function NovoModalContainerComponent_ng_template_1_Template(rf, ctx) { }
class NovoModalContainerComponent {
    constructor(injector, modalRef) {
        this.injector = injector;
        this.modalRef = modalRef;
        this.animationStateChanged = new EventEmitter();
        this.animationState = 'enter';
        this.component = new ComponentPortal(modalRef.component, null, injector);
    }
    onAnimationStart(event) {
        this.animationStateChanged.emit(event);
    }
    onAnimationDone(event) {
        this.animationStateChanged.emit(event);
    }
    startExitAnimation() {
        this.animationState = 'leave';
    }
}
NovoModalContainerComponent.ɵfac = function NovoModalContainerComponent_Factory(t) { return new (t || NovoModalContainerComponent)(ɵɵdirectiveInject(Injector), ɵɵdirectiveInject(NovoModalRef)); };
NovoModalContainerComponent.ɵcmp = ɵɵdefineComponent({ type: NovoModalContainerComponent, selectors: [["novo-modal-container"]], outputs: { animationStateChanged: "animationStateChanged" }, decls: 2, vars: 2, consts: [[1, "modal-container"], [3, "cdkPortalOutlet"]], template: function NovoModalContainerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "div", 0);
        ɵɵlistener("@zoomInOut.start", function NovoModalContainerComponent_Template_div_animation_zoomInOut_start_0_listener($event) { return ctx.onAnimationStart($event); })("@zoomInOut.done", function NovoModalContainerComponent_Template_div_animation_zoomInOut_done_0_listener($event) { return ctx.onAnimationDone($event); });
        ɵɵtemplate(1, NovoModalContainerComponent_ng_template_1_Template, 0, 0, "ng-template", 1);
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵproperty("@zoomInOut", ctx.animationState);
        ɵɵadvance(1);
        ɵɵproperty("cdkPortalOutlet", ctx.component);
    } }, directives: [CdkPortalOutlet], styles: ["[_nghost-%COMP%]{background:rgba(0,0,0,.25)}[_nghost-%COMP%]   .modal-container[_ngcontent-%COMP%]{align-items:center;bottom:0;display:flex;justify-content:center;left:0;position:fixed;right:0;top:0;z-index:1001}"], data: { animation: [zoomInOut] } });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoModalContainerComponent, [{
        type: Component,
        args: [{
                selector: 'novo-modal-container',
                templateUrl: './modal-container.component.html',
                styleUrls: ['./modal-container.component.scss'],
                animations: [zoomInOut],
            }]
    }], function () { return [{ type: Injector }, { type: NovoModalRef }]; }, { animationStateChanged: [{
            type: Output
        }] }); })();

// NG2
const DEFAULT_CONFIG$1 = {
    hasBackdrop: true,
    backdropClass: 'modal-overlay-backdrop',
    panelClass: 'modal-overlay-panel',
};
class NovoModalService {
    constructor(injector, overlay) {
        this.injector = injector;
        this.overlay = overlay;
    }
    set parentViewContainer(view) {
        console.warn('parentViewContainer is deprecated');
        this._parentViewContainer = view;
    }
    open(component, params = {}) {
        // Override default configuration
        const modalConfig = DEFAULT_CONFIG$1;
        // Returns an OverlayRef which is a PortalHost
        const overlayRef = this.createOverlay(modalConfig);
        // Instantiate remote control
        const modalRef = new NovoModalRef(component, params, overlayRef);
        const overlayComponent = this.attachModalContainer(NovoModalContainerComponent, overlayRef, modalConfig, modalRef);
        // Pass the instance of the overlay component to the remote control
        modalRef.componentInstance = overlayComponent;
        overlayRef.backdropClick().subscribe(() => modalRef.close());
        return modalRef;
    }
    createOverlay(config) {
        const overlayConfig = this.getOverlayConfig(config);
        return this.overlay.create(overlayConfig);
    }
    attachModalContainer(component, overlayRef, config, modalRef) {
        const injector = this.createInjector(config, modalRef);
        const containerPortal = new ComponentPortal(component, null, injector);
        const containerRef = overlayRef.attach(containerPortal);
        return containerRef.instance;
    }
    createInjector(config, modalRef) {
        const injectionTokens = new WeakMap();
        injectionTokens.set(NovoModalRef, modalRef);
        // Support backwards compatability
        injectionTokens.set(NovoModalParams, modalRef.params);
        return new PortalInjector(this.injector, injectionTokens);
    }
    getOverlayConfig(config) {
        const positionStrategy = this.overlay.position().global().centerHorizontally().centerVertically();
        const overlayConfig = new OverlayConfig({
            positionStrategy,
            hasBackdrop: config.hasBackdrop,
            backdropClass: config.backdropClass,
            panelClass: config.panelClass,
        });
        return overlayConfig;
    }
}
NovoModalService.ɵfac = function NovoModalService_Factory(t) { return new (t || NovoModalService)(ɵɵinject(Injector), ɵɵinject(Overlay)); };
NovoModalService.ɵprov = ɵɵdefineInjectable({ token: NovoModalService, factory: NovoModalService.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoModalService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: Injector }, { type: Overlay }]; }, null); })();

// NG2
function NovoToastElement_h5_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "h5");
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r0.title);
} }
function NovoToastElement_p_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "p", 9);
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵclassProp("message-only", !ctx_r1.title);
    ɵɵproperty("innerHtml", ctx_r1._message, ɵɵsanitizeHtml);
} }
function NovoToastElement_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 10);
    ɵɵelement(1, "input", 11);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("value", ctx_r2.link);
} }
function NovoToastElement_div_8_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 12);
    ɵɵelementStart(1, "button", 13);
    ɵɵlistener("click", function NovoToastElement_div_8_Template_button_click_1_listener($event) { ɵɵrestoreView(_r6); const ctx_r5 = ɵɵnextContext(); return ctx_r5.actionHandler($event); });
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r3.action);
} }
function NovoToastElement_div_9_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 14);
    ɵɵlistener("click", function NovoToastElement_div_9_Template_div_click_0_listener($event) { ɵɵrestoreView(_r8); const ctx_r7 = ɵɵnextContext(); return ctx_r7.close($event); });
    ɵɵelement(1, "i", 15);
    ɵɵelementEnd();
} }
const _c0$$ = ["*"];
class NovoToastElement {
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
        this.theme = 'danger';
        this.icon = 'caution';
        this.hasDialogue = false;
        this.isCloseable = false;
        this.closed = new EventEmitter();
        this.show = false;
        this.animate = false;
        this.parent = null;
        this.launched = false;
        this.onActionPromise = Deferred();
    }
    set message(m) {
        this._message = this.sanitizer.bypassSecurityTrustHtml(m);
    }
    ngOnInit() {
        if (!this.launched) {
            // clear position and time
            this.position = null;
            this.time = null;
            // set icon and styling
            this.iconClass = `bhi-${this.icon}`;
            this.alertTheme = `${this.theme} toast-container embedded`;
            if (this.hasDialogue) {
                this.alertTheme += ' dialogue';
            }
        }
    }
    ngOnChanges(changes) {
        // set icon and styling
        this.iconClass = `bhi-${this.icon}`;
        this.alertTheme = `${this.theme} toast-container embedded`;
        if (this.hasDialogue) {
            this.alertTheme += ' dialogue';
        }
    }
    clickHandler(event) {
        if (!this.isCloseable) {
            if (event) {
                event.stopPropagation();
                event.preventDefault();
            }
            if (this.parent) {
                this.parent.hide(this);
            }
            else {
                this.closed.emit({ closed: true });
            }
        }
    }
    close(event) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        if (this.parent) {
            this.parent.hide(this);
        }
        else {
            this.closed.emit({ closed: true });
        }
    }
    actionHandler(event) {
        this.onActionPromise.resolve(event);
    }
    onAction(fn) {
        return this.onActionPromise.then(fn);
    }
}
NovoToastElement.ɵfac = function NovoToastElement_Factory(t) { return new (t || NovoToastElement)(ɵɵdirectiveInject(DomSanitizer)); };
NovoToastElement.ɵcmp = ɵɵdefineComponent({ type: NovoToastElement, selectors: [["novo-toast"]], hostVars: 8, hostBindings: function NovoToastElement_HostBindings(rf, ctx) { if (rf & 1) {
        ɵɵlistener("click", function NovoToastElement_click_HostBindingHandler($event) { return !ctx.isCloseable && ctx.clickHandler($event); });
    } if (rf & 2) {
        ɵɵclassMap(ctx.alertTheme);
        ɵɵclassProp("show", ctx.show)("animate", ctx.animate)("embedded", ctx.embedded);
    } }, inputs: { theme: "theme", icon: "icon", title: "title", action: "action", hasDialogue: "hasDialogue", link: "link", isCloseable: "isCloseable", message: "message" }, outputs: { closed: "closed" }, features: [ɵɵNgOnChangesFeature], ngContentSelectors: _c0$$, decls: 10, vars: 6, consts: [[1, "toast-icon"], [3, "ngClass"], [1, "toast-content"], [4, "ngIf"], [3, "message-only", "innerHtml", 4, "ngIf"], ["class", "link-generated", 4, "ngIf"], [1, "dialogue"], ["class", "action", 4, "ngIf"], ["class", "close-icon", 3, "click", 4, "ngIf"], [3, "innerHtml"], [1, "link-generated"], ["type", "text", "onfocus", "this.select();", 3, "value"], [1, "action"], ["theme", "dialogue", "color", "white", 3, "click"], [1, "close-icon", 3, "click"], [1, "bhi-times"]], template: function NovoToastElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵelementStart(0, "div", 0);
        ɵɵelement(1, "i", 1);
        ɵɵelementEnd();
        ɵɵelementStart(2, "div", 2);
        ɵɵtemplate(3, NovoToastElement_h5_3_Template, 2, 1, "h5", 3);
        ɵɵtemplate(4, NovoToastElement_p_4_Template, 1, 3, "p", 4);
        ɵɵtemplate(5, NovoToastElement_div_5_Template, 2, 1, "div", 5);
        ɵɵelementStart(6, "div", 6);
        ɵɵprojection(7);
        ɵɵelementEnd();
        ɵɵtemplate(8, NovoToastElement_div_8_Template, 3, 1, "div", 7);
        ɵɵelementEnd();
        ɵɵtemplate(9, NovoToastElement_div_9_Template, 2, 0, "div", 8);
    } if (rf & 2) {
        ɵɵadvance(1);
        ɵɵproperty("ngClass", ctx.iconClass);
        ɵɵadvance(2);
        ɵɵproperty("ngIf", ctx.title);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx._message);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.link);
        ɵɵadvance(3);
        ɵɵproperty("ngIf", ctx.action);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.isCloseable);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoToastElement, [{
        type: Component,
        args: [{
                selector: 'novo-toast',
                host: {
                    '[class]': 'alertTheme',
                    '[class.show]': 'show',
                    '[class.animate]': 'animate',
                    '[class.embedded]': 'embedded',
                    '(click)': '!isCloseable && clickHandler($event)',
                },
                template: `
    <div class="toast-icon">
      <i [ngClass]="iconClass"></i>
    </div>
    <div class="toast-content">
      <h5 *ngIf="title">{{ title }}</h5>
      <p *ngIf="_message" [class.message-only]="!title" [innerHtml]="_message"></p>
      <div *ngIf="link" class="link-generated">
        <input type="text" [value]="link" onfocus="this.select();" />
      </div>
      <div class="dialogue">
        <ng-content></ng-content>
      </div>
      <div *ngIf="action" class="action">
        <button theme="dialogue" color="white" (click)="actionHandler($event)">{{ action }}</button>
      </div>
    </div>
    <div class="close-icon" *ngIf="isCloseable" (click)="close($event)">
      <i class="bhi-times"></i>
    </div>
  `,
            }]
    }], function () { return [{ type: DomSanitizer }]; }, { theme: [{
            type: Input
        }], icon: [{
            type: Input
        }], title: [{
            type: Input
        }], action: [{
            type: Input
        }], hasDialogue: [{
            type: Input
        }], link: [{
            type: Input
        }], isCloseable: [{
            type: Input
        }], message: [{
            type: Input
        }], closed: [{
            type: Output
        }] }); })();

// NG2
class NovoToastService {
    constructor(componentUtils) {
        this.componentUtils = componentUtils;
        this.references = [];
        this.icons = { default: 'bell', success: 'check', info: 'info', warning: 'warning', danger: 'remove' };
        this.defaults = { hideDelay: 3500, position: 'growlTopRight', theme: 'default' };
    }
    set parentViewContainer(view) {
        this._parentViewContainer = view;
    }
    alert(options, toastElement = NovoToastElement) {
        return new Promise((resolve) => {
            if (!this._parentViewContainer) {
                console.error('No parent view container specified for the ToastService. Set it inside your main application. \nthis.toastService.parentViewContainer = view (ViewContainerRef)');
                return;
            }
            const toast = this.componentUtils.append(toastElement, this._parentViewContainer);
            this.references.push(toast);
            this.handleAlert(toast.instance, options);
            resolve(toast.instance);
        });
    }
    isVisible(toast) {
        return toast.show;
    }
    hide(toast) {
        toast.animate = false;
        setTimeout(() => {
            toast.show = false;
            const REF = this.references.filter((x) => x.instance === toast)[0];
            if (REF) {
                this.references.splice(this.references.indexOf(REF), 1);
                REF.destroy();
            }
        }, 300);
    }
    handleAlert(toast, options) {
        this.setToastOnSession(toast, options);
        setTimeout(() => {
            this.show(toast);
        }, 20);
        if (!toast.isCloseable) {
            this.toastTimer(toast);
        }
    }
    setToastOnSession(toast, opts) {
        const OPTIONS = typeof opts === 'object' ? opts : {};
        toast.parent = this;
        toast.title = OPTIONS.title || '';
        toast.message = OPTIONS.message || '';
        toast.action = OPTIONS.action || null;
        toast.hideDelay = OPTIONS.hideDelay || this.defaults.hideDelay;
        toast.link = OPTIONS.link || '';
        toast.isCloseable = OPTIONS.isCloseable || false;
        const CUSTOM_CLASS = OPTIONS.customClass || '';
        const ALERT_STYLE = OPTIONS.theme || this.defaults.theme;
        const ALERT_POSITION = OPTIONS.position || this.defaults.position;
        const ALERT_ICON = OPTIONS.icon || this.icons.default;
        toast.iconClass = `bhi-${ALERT_ICON}`;
        toast.launched = true;
        toast.alertTheme = `${ALERT_STYLE} ${ALERT_POSITION} ${CUSTOM_CLASS} toast-container launched`;
    }
    show(toast) {
        toast.show = true;
        setTimeout(addClass, 25);
        /**
         * Adds animate class to be called after a timeout
         **/
        function addClass() {
            toast.animate = true;
        }
    }
    toastTimer(toast) {
        if (toast.hideDelay < 0) {
            return;
        }
        setTimeout(() => {
            this.hide(toast);
        }, toast.hideDelay);
    }
}
NovoToastService.ɵfac = function NovoToastService_Factory(t) { return new (t || NovoToastService)(ɵɵinject(ComponentUtils)); };
NovoToastService.ɵprov = ɵɵdefineInjectable({ token: NovoToastService, factory: NovoToastService.ɵfac });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoToastService, [{
        type: Injectable
    }], function () { return [{ type: ComponentUtils }]; }, null); })();

// NG2
function ControlConfirmModal_h2_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "h2");
    ɵɵelementStart(1, "label");
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵtext(3);
    ɵɵelement(4, "i", 4);
    ɵɵtext(5);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵtextInterpolate1("", ctx_r0.params["label"], ":");
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r0.params["oldValue"], " ");
    ɵɵadvance(2);
    ɵɵtextInterpolate1(" ", ctx_r0.params["newValue"], " ");
} }
function ControlConfirmModal_h2_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "h2");
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r1.params["message"]);
} }
function ControlPromptModal_p_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p");
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const change_r1 = ctx.$implicit;
    ɵɵadvance(1);
    ɵɵtextInterpolate(change_r1);
} }
class ControlConfirmModal {
    constructor(modalRef, params, labels) {
        this.modalRef = modalRef;
        this.params = params;
        this.labels = labels;
    }
    close(result) {
        this.modalRef.close(result);
    }
}
ControlConfirmModal.ɵfac = function ControlConfirmModal_Factory(t) { return new (t || ControlConfirmModal)(ɵɵdirectiveInject(NovoModalRef), ɵɵdirectiveInject(NovoModalParams), ɵɵdirectiveInject(NovoLabelService)); };
ControlConfirmModal.ɵcmp = ɵɵdefineComponent({ type: ControlConfirmModal, selectors: [["control-confirm-modal"]], decls: 9, vars: 8, consts: [["type", "warning"], [4, "ngIf"], ["theme", "standard", 3, "click"], ["theme", "primary", "icon", "check", "autofocus", "", 3, "click"], [1, "bhi-arrow-right"]], template: function ControlConfirmModal_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "novo-notification", 0);
        ɵɵelementStart(1, "h1");
        ɵɵtext(2);
        ɵɵelementEnd();
        ɵɵtemplate(3, ControlConfirmModal_h2_3_Template, 6, 3, "h2", 1);
        ɵɵtemplate(4, ControlConfirmModal_h2_4_Template, 2, 1, "h2", 1);
        ɵɵelementStart(5, "button", 2);
        ɵɵlistener("click", function ControlConfirmModal_Template_button_click_5_listener() { return ctx.close(false); });
        ɵɵtext(6);
        ɵɵelementEnd();
        ɵɵelementStart(7, "button", 3);
        ɵɵlistener("click", function ControlConfirmModal_Template_button_click_7_listener() { return ctx.close(true); });
        ɵɵtext(8);
        ɵɵelementEnd();
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵattribute("data-automation-id", "field-interaction-modal-" + ctx.params["key"]);
        ɵɵadvance(2);
        ɵɵtextInterpolate(ctx.labels.confirmChangesModalMessage);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", !ctx.params["message"]);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.params["message"]);
        ɵɵadvance(1);
        ɵɵattribute("data-automation-id", "field-interaction-modal-cancel" + ctx.params["key"]);
        ɵɵadvance(1);
        ɵɵtextInterpolate1(" ", ctx.labels.cancel, " ");
        ɵɵadvance(1);
        ɵɵattribute("data-automation-id", "field-interaction-modal-save-" + ctx.params["key"]);
        ɵɵadvance(1);
        ɵɵtextInterpolate1(" ", ctx.labels.save, " ");
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(ControlConfirmModal, [{
        type: Component,
        args: [{
                selector: 'control-confirm-modal',
                template: `
    <novo-notification type="warning" [attr.data-automation-id]="'field-interaction-modal-' + params['key']">
      <h1>{{ labels.confirmChangesModalMessage }}</h1>
      <h2 *ngIf="!params['message']">
        <label>{{ params['label'] }}:</label> {{ params['oldValue'] }} <i class="bhi-arrow-right"></i> {{ params['newValue'] }}
      </h2>
      <h2 *ngIf="params['message']">{{ params['message'] }}</h2>
      <button theme="standard" (click)="close(false)" [attr.data-automation-id]="'field-interaction-modal-cancel' + params['key']">
        {{ labels.cancel }}
      </button>
      <button
        theme="primary"
        icon="check"
        (click)="close(true)"
        autofocus
        [attr.data-automation-id]="'field-interaction-modal-save-' + params['key']"
      >
        {{ labels.save }}
      </button>
    </novo-notification>
  `,
            }]
    }], function () { return [{ type: NovoModalRef }, { type: NovoModalParams }, { type: NovoLabelService }]; }, null); })();
class ControlPromptModal {
    constructor(modalRef, params, labels) {
        this.modalRef = modalRef;
        this.params = params;
        this.labels = labels;
    }
    close(result) {
        this.modalRef.close(result);
    }
}
ControlPromptModal.ɵfac = function ControlPromptModal_Factory(t) { return new (t || ControlPromptModal)(ɵɵdirectiveInject(NovoModalRef), ɵɵdirectiveInject(NovoModalParams), ɵɵdirectiveInject(NovoLabelService)); };
ControlPromptModal.ɵcmp = ɵɵdefineComponent({ type: ControlPromptModal, selectors: [["control-prompt-modal"]], decls: 8, vars: 7, consts: [["type", "warning"], [4, "ngFor", "ngForOf"], ["theme", "standard", 3, "click"], ["theme", "primary", "icon", "check", "autofocus", "", 3, "click"]], template: function ControlPromptModal_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "novo-notification", 0);
        ɵɵelementStart(1, "h1");
        ɵɵtext(2);
        ɵɵelementEnd();
        ɵɵtemplate(3, ControlPromptModal_p_3_Template, 2, 1, "p", 1);
        ɵɵelementStart(4, "button", 2);
        ɵɵlistener("click", function ControlPromptModal_Template_button_click_4_listener() { return ctx.close(false); });
        ɵɵtext(5);
        ɵɵelementEnd();
        ɵɵelementStart(6, "button", 3);
        ɵɵlistener("click", function ControlPromptModal_Template_button_click_6_listener() { return ctx.close(true); });
        ɵɵtext(7);
        ɵɵelementEnd();
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵattribute("data-automation-id", "field-interaction-modal-" + ctx.params["key"]);
        ɵɵadvance(2);
        ɵɵtextInterpolate(ctx.labels.promptModalMessage);
        ɵɵadvance(1);
        ɵɵproperty("ngForOf", ctx.params["changes"]);
        ɵɵadvance(1);
        ɵɵattribute("data-automation-id", "field-interaction-modal-cancel" + ctx.params["key"]);
        ɵɵadvance(1);
        ɵɵtextInterpolate1(" ", ctx.labels.cancel, " ");
        ɵɵadvance(1);
        ɵɵattribute("data-automation-id", "field-interaction-modal-yes-" + ctx.params["key"]);
        ɵɵadvance(1);
        ɵɵtextInterpolate1(" ", ctx.labels.yes, " ");
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(ControlPromptModal, [{
        type: Component,
        args: [{
                selector: 'control-prompt-modal',
                template: `
    <novo-notification type="warning" [attr.data-automation-id]="'field-interaction-modal-' + params['key']">
      <h1>{{ labels.promptModalMessage }}</h1>
      <p *ngFor="let change of params['changes']">{{ change }}</p>
      <button theme="standard" (click)="close(false)" [attr.data-automation-id]="'field-interaction-modal-cancel' + params['key']">
        {{ labels.cancel }}
      </button>
      <button
        theme="primary"
        icon="check"
        (click)="close(true)"
        autofocus
        [attr.data-automation-id]="'field-interaction-modal-yes-' + params['key']"
      >
        {{ labels.yes }}
      </button>
    </novo-notification>
  `,
            }]
    }], function () { return [{ type: NovoModalRef }, { type: NovoModalParams }, { type: NovoLabelService }]; }, null); })();

// NG2
class CustomHttpImpl {
    constructor(http) {
        this.http = http;
        this.mapFn = (x) => x;
    }
    get(url, options) {
        this.url = url;
        this.options = options;
        return this;
    }
    map(mapFn) {
        this.mapFn = mapFn;
        return this;
    }
    subscribe(resolve, reject) {
        return this.http.get(this.url, this.options).pipe(map(this.mapFn)).subscribe(resolve, reject);
    }
}
class FieldInteractionApi {
    constructor(toaster, modalService, formUtils, http, labels) {
        this.toaster = toaster;
        this.modalService = modalService;
        this.formUtils = formUtils;
        this.http = http;
        this.labels = labels;
        this.getOptionsConfig = (args, mapper, filteredOptionsCreator, pickerConfigFormat) => {
            if (filteredOptionsCreator || 'optionsUrl' in args || 'optionsUrlBuilder' in args || 'optionsPromise' in args) {
                const format = ('format' in args && args.format) || pickerConfigFormat;
                return Object.assign(Object.assign({ options: this.createOptionsFunction(args, mapper, filteredOptionsCreator) }, ('emptyPickerMessage' in args && { emptyPickerMessage: args.emptyPickerMessage })), (format && { format }));
            }
            else if ('options' in args && Array.isArray(args.options)) {
                return {
                    options: [...args.options],
                };
            }
            else {
                return undefined;
            }
        };
        this.createOptionsFunction = (config, mapper, filteredOptionsCreator) => (query, page) => {
            if ('optionsPromise' in config && config.optionsPromise) {
                return config.optionsPromise(query, new CustomHttpImpl(this.http), page);
            }
            else if (('optionsUrlBuilder' in config && config.optionsUrlBuilder) || ('optionsUrl' in config && config.optionsUrl)) {
                return new Promise((resolve, reject) => {
                    const url = 'optionsUrlBuilder' in config ? config.optionsUrlBuilder(query) : `${config.optionsUrl}?filter=${query || ''}`;
                    this.http
                        .get(url)
                        .pipe(map((results) => {
                        if (mapper) {
                            return results.map(mapper);
                        }
                        return results;
                    }))
                        .subscribe(resolve, reject);
                });
            }
            else if (filteredOptionsCreator) {
                if ('where' in config) {
                    return filteredOptionsCreator(config.where)(query, page);
                }
                else {
                    return filteredOptionsCreator()(query, page);
                }
            }
        };
    }
    get associations() {
        return this.form.hasOwnProperty('associations') ? this.form.associations : {};
    }
    get currentEntity() {
        return this.form.hasOwnProperty('currentEntity') ? this.form.currentEntity : undefined;
    }
    get currentEntityId() {
        return this.form.hasOwnProperty('currentEntityId') ? this.form.currentEntityId : undefined;
    }
    get isEdit() {
        return this.form.hasOwnProperty('edit') ? this.form.edit : false;
    }
    get isAdd() {
        return this.form.hasOwnProperty('edit') ? !this.form.edit : false;
    }
    set globals(globals) {
        this._globals = globals;
    }
    get globals() {
        return this._globals;
    }
    set currentKey(key) {
        this._currentKey = key;
    }
    get currentKey() {
        return this._currentKey;
    }
    isActiveControlValid() {
        return !!this.getValue(this.currentKey);
    }
    getActiveControl() {
        return this.getControl(this.currentKey);
    }
    getActiveKey() {
        return this.currentKey;
    }
    getActiveValue() {
        return this.getValue(this.currentKey);
    }
    getActiveInitialValue() {
        return this.getInitialValue(this.currentKey);
    }
    getFieldSet(key) {
        if (!key) {
            console.error('[FieldInteractionAPI] - invalid or missing "key"'); // tslint:disable-line
            return null;
        }
        const fieldSet = this.form.fieldsets.find((fs) => fs.key && fs.key.toLowerCase() === key.toLowerCase());
        if (!fieldSet) {
            console.error('[FieldInteractionAPI] - could not find a fieldset in the form by the key --', key); // tslint:disable-line
            return null;
        }
        return fieldSet;
    }
    getControl(key) {
        if (!key) {
            console.error('[FieldInteractionAPI] - invalid or missing "key"'); // tslint:disable-line
            return null;
        }
        const control = this.form.controls[key];
        if (!control) {
            console.error('[FieldInteractionAPI] - could not find a control in the form by the key --', key); // tslint:disable-line
            return null;
        }
        return control;
    }
    getValue(key) {
        const control = this.getControl(key);
        if (control) {
            return control.value;
        }
        return null;
    }
    getRawValue(key) {
        const control = this.getControl(key);
        if (control) {
            return control.rawValue;
        }
        return null;
    }
    getInitialValue(key) {
        const control = this.getControl(key);
        if (control) {
            return control.initialValue;
        }
        return null;
    }
    setValue(key, value, options) {
        const control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.setValue(value, options);
            this.triggerEvent({ controlKey: key, prop: 'value', value });
        }
    }
    patchValue(key, value, options) {
        const control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.setValue(value, options);
            this.triggerEvent({ controlKey: key, prop: 'value', value });
        }
    }
    setReadOnly(key, isReadOnly) {
        const control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.setReadOnly(isReadOnly);
            this.triggerEvent({ controlKey: key, prop: 'readOnly', value: isReadOnly });
        }
    }
    setRequired(key, required) {
        const control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.setRequired(required);
            this.triggerEvent({ controlKey: key, prop: 'required', value: required });
        }
    }
    hide(key, clearValue = true) {
        const control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.hide(clearValue);
            this.disable(key, { emitEvent: false });
            this.triggerEvent({ controlKey: key, prop: 'hidden', value: true });
        }
        return control;
    }
    show(key) {
        const control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.show();
            this.enable(key, { emitEvent: false });
            this.triggerEvent({ controlKey: key, prop: 'hidden', value: false });
        }
    }
    hideFieldSetHeader(key) {
        const fieldSet = this.getFieldSet(key);
        if (fieldSet) {
            fieldSet.hidden = true;
        }
    }
    showFieldSetHeader(key) {
        const fieldSet = this.getFieldSet(key);
        if (fieldSet) {
            fieldSet.hidden = false;
        }
    }
    disable(key, options) {
        const control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.disable(options);
            this.triggerEvent({ controlKey: key, prop: 'readOnly', value: true });
        }
    }
    enable(key, options) {
        const control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.enable(options);
            this.triggerEvent({ controlKey: key, prop: 'readOnly', value: false });
        }
    }
    markAsInvalid(key, validationMessage) {
        const control = this.getControl(key);
        if (control) {
            if (control && !control.restrictFieldInteractions) {
                control.markAsInvalid(validationMessage);
            }
        }
    }
    markAsDirty(key, options) {
        const control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.markAsDirty(options);
        }
    }
    markAsPending(key, options) {
        const control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.markAsPending(options);
        }
    }
    markAsPristine(key, options) {
        const control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.markAsPristine(options);
        }
    }
    markAsTouched(key, options) {
        const control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.markAsTouched(options);
        }
    }
    markAsUntouched(key, options) {
        const control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.markAsUntouched(options);
        }
    }
    updateValueAndValidity(key, options) {
        const control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.updateValueAndValidity(options);
        }
    }
    displayToast(toastConfig) {
        if (this.toaster) {
            this.toaster.alert(toastConfig);
        }
    }
    displayTip(key, tip, icon, allowDismiss, sanitize) {
        const control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.tipWell = {
                tip,
                icon,
                button: allowDismiss,
                sanitize: sanitize !== false,
            };
            this.triggerEvent({ controlKey: key, prop: 'tipWell', value: tip });
        }
    }
    setTooltip(key, tooltip) {
        const control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.tooltip = tooltip;
            if (tooltip.length >= 40 && tooltip.length <= 400) {
                control.tooltipSize = 'large';
                control.tooltipPreline = true;
            }
            else if (tooltip.length > 400) {
                control.tooltipSize = 'extra-large';
            }
            this.triggerEvent({ controlKey: key, prop: 'tooltip', value: tooltip });
        }
    }
    confirmChanges(key, message) {
        const history = this.getProperty(key, 'valueHistory');
        const oldValue = history[history.length - 2];
        const newValue = this.getValue(key);
        const label = this.getProperty(key, 'label');
        document.activeElement.blur();
        return this.modalService.open(ControlConfirmModal, { oldValue, newValue, label, message, key }).onClosed.then((result) => {
            if (!result) {
                this.setValue(key, oldValue, { emitEvent: false });
            }
            return true;
        });
    }
    promptUser(key, changes) {
        const showYes = true;
        document.activeElement.blur();
        return this.modalService.open(ControlPromptModal, { changes, key }).onClosed;
    }
    setProperty(key, prop, value) {
        const control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control[prop] = value;
            this.triggerEvent({ controlKey: key, prop, value });
        }
    }
    getProperty(key, prop) {
        const control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            return control[prop];
        }
        return null;
    }
    isValueEmpty(key) {
        const value = this.getValue(key);
        return Helpers.isEmpty(value);
    }
    isValueBlank(key) {
        const value = this.getValue(key);
        return Helpers.isBlank(value);
    }
    hasField(key) {
        return !!this.form.controls[key];
    }
    addStaticOption(key, newOption) {
        const control = this.getControl(key);
        let optionToAdd = newOption;
        let isUnique = true;
        if (control && !control.restrictFieldInteractions) {
            let currentOptions = this.getProperty(key, 'options');
            if (!currentOptions || !currentOptions.length) {
                const config = this.getProperty(key, 'config');
                if (config) {
                    currentOptions = config.options;
                    if (currentOptions && Array.isArray(currentOptions)) {
                        if (currentOptions[0].value && !optionToAdd.value) {
                            optionToAdd = { value: newOption, label: newOption };
                        }
                        config.options = [...currentOptions, optionToAdd];
                        this.setProperty(key, 'config', config);
                    }
                }
            }
            else {
                if (currentOptions[0].value && !optionToAdd.value) {
                    optionToAdd = { value: newOption, label: newOption };
                }
                // Ensure duplicate values are not added
                currentOptions.forEach((option) => {
                    if ((option.value && option.value === optionToAdd.value) || option === optionToAdd) {
                        isUnique = false;
                    }
                });
                if (isUnique) {
                    this.setProperty(key, 'options', [...currentOptions, optionToAdd]);
                }
            }
            if (isUnique) {
                this.triggerEvent({ controlKey: key, prop: 'options', value: [...currentOptions, optionToAdd] });
            }
        }
    }
    removeStaticOption(key, optionToRemove) {
        const control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            let currentOptions = this.getProperty(key, 'options');
            if (!currentOptions || !currentOptions.length) {
                const config = this.getProperty(key, 'config');
                if (config) {
                    currentOptions = config.options;
                    if (currentOptions && Array.isArray(currentOptions)) {
                        let index = -1;
                        currentOptions.forEach((opt, i) => {
                            if (opt.value || opt.label) {
                                if (opt.value === optionToRemove || opt.label === optionToRemove) {
                                    index = i;
                                }
                            }
                            else {
                                if (opt === optionToRemove) {
                                    index = i;
                                }
                            }
                        });
                        if (index !== -1) {
                            currentOptions.splice(index, 1);
                        }
                        config.options = [...currentOptions];
                        this.setProperty(key, 'config', config);
                    }
                }
            }
            else {
                let index = -1;
                currentOptions.forEach((opt, i) => {
                    if (opt.value || opt.label) {
                        if (opt.value === optionToRemove || opt.label === optionToRemove) {
                            index = i;
                        }
                    }
                    else {
                        if (opt === optionToRemove) {
                            index = i;
                        }
                    }
                });
                if (index !== -1) {
                    currentOptions.splice(index, 1);
                }
                this.setProperty(key, 'options', [...currentOptions]);
            }
            this.triggerEvent({ controlKey: key, prop: 'options', value: control.options });
        }
    }
    modifyPickerConfig(key, config, mapper) {
        // call another method to avoid a breaking change but still enable stricter types
        this.mutatePickerConfig(key, config, mapper);
    }
    mutatePickerConfig(key, args, mapper) {
        const control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            const { minSearchLength, enableInfiniteScroll, filteredOptionsCreator, format, getLabels, emptyPickerMessage } = control.config;
            const optionsConfig = this.getOptionsConfig(args, mapper, filteredOptionsCreator, format);
            const newConfig = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (emptyPickerMessage && { emptyPickerMessage })), (Number.isInteger(minSearchLength) && { minSearchLength })), (enableInfiniteScroll && { enableInfiniteScroll })), (filteredOptionsCreator && { filteredOptionsCreator })), (getLabels && { getLabels })), (optionsConfig && optionsConfig)), { resultsTemplate: control.config.resultsTemplate || ('resultsTemplateType' in args && this.getAppropriateResultsTemplate(args.resultsTemplateType)) });
            this.setProperty(key, 'config', newConfig);
            this.triggerEvent({ controlKey: key, prop: 'pickerConfig', value: args });
        }
    }
    addPropertiesToPickerConfig(key, properties) {
        const control = this.getControl(key);
        if (!control || control.restrictFieldInteractions) {
            return;
        }
        const config = Object.assign(Object.assign({}, control.config), properties);
        this.setProperty(key, 'config', config);
        this.triggerEvent({ controlKey: key, prop: 'pickerConfig', value: properties });
    }
    getAppropriateResultsTemplate(resultsTemplateType) {
        switch (resultsTemplateType) {
            case 'entity-picker':
                return EntityPickerResults;
            default:
                return undefined;
        }
    }
    setLoading(key, loading) {
        const control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            if (loading) {
                this.form.controls[key].fieldInteractionloading = true;
                control.setErrors({ loading: true });
                // History
                clearTimeout(this.asyncBlockTimeout);
                this.asyncBlockTimeout = setTimeout(() => {
                    this.setLoading(key, false);
                    this.displayTip(key, this.labels.asyncFailure, 'info', false);
                    this.setProperty(key, '_displayedAsyncFailure', true);
                }, 10000);
            }
            else {
                this.form.controls[key].fieldInteractionloading = false;
                clearTimeout(this.asyncBlockTimeout);
                control.setErrors({ loading: null });
                control.updateValueAndValidity({ emitEvent: false });
                if (this.getProperty(key, '_displayedAsyncFailure')) {
                    this.setProperty(key, 'tipWell', null);
                }
            }
            this.triggerEvent({ controlKey: key, prop: 'loading', value: loading });
        }
    }
    addControl(key, metaForNewField, position = FieldInteractionApi.FIELD_POSITIONS.ABOVE_FIELD, initialValue) {
        if (!metaForNewField.key && !metaForNewField.name) {
            console.error('[FieldInteractionAPI] - missing "key" in meta for new field'); // tslint:disable-line
            return null;
        }
        if (!metaForNewField.key) {
            // If key is not explicitly declared, use name as key
            metaForNewField.key = metaForNewField.name;
        }
        if (this.form.controls[metaForNewField.key]) {
            // Field is already on the form
            return null;
        }
        const control = this.form.controls[key];
        let fieldsetIndex;
        let controlIndex;
        if (control) {
            fieldsetIndex = -1;
            controlIndex = -1;
            this.form.fieldsets.forEach((fieldset, fi) => {
                fieldset.controls.forEach((fieldsetControl, ci) => {
                    if (fieldsetControl.key === key) {
                        fieldsetIndex = fi;
                        controlIndex = ci;
                    }
                });
            });
            // Change the position of the newly added field
            switch (position) {
                case FieldInteractionApi.FIELD_POSITIONS.ABOVE_FIELD:
                    // Adding field above active field
                    // index can stay the same
                    break;
                case FieldInteractionApi.FIELD_POSITIONS.BELOW_FIELD:
                    // Adding field below active field
                    controlIndex += 1;
                    break;
                case FieldInteractionApi.FIELD_POSITIONS.TOP_OF_FORM:
                    // Adding field to the top of the form
                    controlIndex = 0;
                    fieldsetIndex = 0;
                    break;
                case FieldInteractionApi.FIELD_POSITIONS.BOTTOM_OF_FORM:
                    // Adding field to the bottom of the form
                    fieldsetIndex = this.form.fieldsets.length - 1;
                    controlIndex = this.form.fieldsets[fieldsetIndex].controls.length;
                    break;
                default:
                    break;
            }
            if (fieldsetIndex !== -1 && controlIndex !== -1) {
                const novoControl = this.formUtils.getControlForField(metaForNewField, this.http, {});
                novoControl.hidden = false;
                const formControl = new NovoFormControl(initialValue, novoControl);
                this.form.addControl(novoControl.key, formControl);
                this.form.fieldsets[fieldsetIndex].controls.splice(controlIndex, 0, novoControl);
                this.triggerEvent({ controlKey: key, prop: 'addControl', value: formControl });
            }
        }
    }
    removeControl(key) {
        if (!this.form.controls[key]) {
            // Field is not on the form
            return null;
        }
        const control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            let fieldsetIndex = -1;
            let controlIndex = -1;
            this.form.fieldsets.forEach((fieldset, fi) => {
                fieldset.controls.forEach((fieldsetControl, ci) => {
                    if (fieldsetControl.key === key) {
                        fieldsetIndex = fi;
                        controlIndex = ci;
                    }
                });
            });
            if (fieldsetIndex !== -1 && controlIndex !== -1) {
                this.form.removeControl(key);
                this.form.fieldsets[fieldsetIndex].controls.splice(controlIndex, 1);
                this.triggerEvent({ controlKey: key, prop: 'removeControl', value: key });
            }
        }
    }
    debounce(func, wait = 50) {
        let h;
        clearTimeout(h);
        h = setTimeout(() => func(), wait);
    }
    triggerEvent(event) {
        if (this.form && this.form.fieldInteractionEvents) {
            this.form.fieldInteractionEvents.emit(event);
        }
    }
}
FieldInteractionApi.FIELD_POSITIONS = {
    ABOVE_FIELD: 'ABOVE_FIELD',
    BELOW_FIELD: 'BELOW_FIELD',
    TOP_OF_FORM: 'TOP_OF_FORM',
    BOTTOM_OF_FORM: 'BOTTOM_OF_FORM',
};
FieldInteractionApi.ɵfac = function FieldInteractionApi_Factory(t) { return new (t || FieldInteractionApi)(ɵɵinject(NovoToastService), ɵɵinject(NovoModalService), ɵɵinject(FormUtils), ɵɵinject(HttpClient), ɵɵinject(NovoLabelService)); };
FieldInteractionApi.ɵprov = ɵɵdefineInjectable({ token: FieldInteractionApi, factory: FieldInteractionApi.ɵfac });
/*@__PURE__*/ (function () { ɵsetClassMetadata(FieldInteractionApi, [{
        type: Injectable
    }], function () { return [{ type: NovoToastService }, { type: NovoModalService }, { type: FormUtils }, { type: HttpClient }, { type: NovoLabelService }]; }, null); })();

// NG2
function NovoTipWellElement_div_0_i_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i");
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext(2);
    ɵɵclassMapInterpolate1("bhi-", ctx_r1.icon, "");
    ɵɵattribute("data-automation-id", "novo-tip-well-icon-" + ctx_r1.name);
} }
function NovoTipWellElement_div_0_p_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p");
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵɵnextContext(2);
    ɵɵattribute("data-automation-id", "novo-tip-well-tip-" + ctx_r2.name);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r2.tip);
} }
function NovoTipWellElement_div_0_p_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "p", 4);
} if (rf & 2) {
    const ctx_r3 = ɵɵnextContext(2);
    ɵɵproperty("innerHTML", ctx_r3.tipWithStyles, ɵɵsanitizeHtml);
    ɵɵattribute("data-automation-id", "novo-tip-well-tip-" + ctx_r3.name);
} }
function NovoTipWellElement_div_0_button_5_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 5);
    ɵɵlistener("click", function NovoTipWellElement_div_0_button_5_Template_button_click_0_listener() { ɵɵrestoreView(_r6); const ctx_r5 = ɵɵnextContext(2); return ctx_r5.hideTip(); });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵɵnextContext(2);
    ɵɵattribute("data-automation-id", "novo-tip-well-button-" + ctx_r4.name);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r4.buttonText, " ");
} }
function NovoTipWellElement_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div");
    ɵɵelementStart(1, "div");
    ɵɵtemplate(2, NovoTipWellElement_div_0_i_2_Template, 1, 4, "i", 1);
    ɵɵtemplate(3, NovoTipWellElement_div_0_p_3_Template, 2, 2, "p", 0);
    ɵɵtemplate(4, NovoTipWellElement_div_0_p_4_Template, 1, 2, "p", 2);
    ɵɵelementEnd();
    ɵɵtemplate(5, NovoTipWellElement_div_0_button_5_Template, 2, 2, "button", 3);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵproperty("ngIf", ctx_r0.icon);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.sanitize);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !ctx_r0.sanitize);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.button);
} }
class NovoTipWellElement {
    constructor(labels, sanitizer) {
        this.labels = labels;
        this.sanitizer = sanitizer;
        this.button = true;
        this.sanitize = true;
        this.confirmed = new EventEmitter();
        this.isActive = true;
        this.isActive = true;
        // Check if localStorage is enabled
        this.isLocalStorageEnabled = (() => {
            let isEnabled = false;
            if (typeof localStorage === 'object') {
                try {
                    localStorage.setItem('lsTest', '1');
                    localStorage.removeItem('lsTest');
                    isEnabled = true;
                }
                catch (e) {
                    console.warn('This web browser does not support storing settings locally. In Safari, the most common cause of this is using "Private Browsing Mode". Some settings may not save or some features may not work properly for you.');
                }
            }
            return isEnabled;
        })();
    }
    // Trusts the HTML in order to show CSS styles
    get tipWithStyles() {
        if (!this._tipWithStyles || this._lastTipStyled !== this.tip) {
            this._tipWithStyles = this.sanitizer.bypassSecurityTrustHtml(this.tip);
            this._lastTipStyled = this.tip;
        }
        return this._tipWithStyles;
    }
    ngOnInit() {
        this.tip = this.tip || '';
        this.buttonText = this.buttonText || this.labels.okGotIt;
        this.button = typeof this.button === 'string' ? this.button === 'true' : this.button;
        this.icon = this.icon || null;
        // Set a (semi) unique name for the tip-well
        this.name = this.name || Math.round(Math.random() * 100);
        this.localStorageKey = `novo-tw_${this.name}`;
        // Check localStorage for state
        if (this.isLocalStorageEnabled) {
            const storedValue = JSON.parse(localStorage.getItem(this.localStorageKey));
            this.isActive = storedValue !== false;
        }
    }
    hideTip() {
        if (this.isLocalStorageEnabled) {
            localStorage.setItem(this.localStorageKey, JSON.stringify(false));
        }
        this.isActive = false;
        this.confirmed.emit();
    }
}
NovoTipWellElement.ɵfac = function NovoTipWellElement_Factory(t) { return new (t || NovoTipWellElement)(ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(DomSanitizer)); };
NovoTipWellElement.ɵcmp = ɵɵdefineComponent({ type: NovoTipWellElement, selectors: [["novo-tip-well"]], hostVars: 2, hostBindings: function NovoTipWellElement_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵclassProp("active", ctx.isActive);
    } }, inputs: { name: "name", tip: "tip", buttonText: "buttonText", button: "button", icon: "icon", sanitize: "sanitize" }, outputs: { confirmed: "confirmed" }, decls: 1, vars: 1, consts: [[4, "ngIf"], [3, "class", 4, "ngIf"], [3, "innerHTML", 4, "ngIf"], ["theme", "dialogue", "size", "small", 3, "click", 4, "ngIf"], [3, "innerHTML"], ["theme", "dialogue", "size", "small", 3, "click"]], template: function NovoTipWellElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵtemplate(0, NovoTipWellElement_div_0_Template, 6, 4, "div", 0);
    } if (rf & 2) {
        ɵɵproperty("ngIf", ctx.isActive);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTipWellElement, [{
        type: Component,
        args: [{
                selector: 'novo-tip-well',
                template: `
    <div *ngIf="isActive">
      <div>
        <i class="bhi-{{ icon }}" *ngIf="icon" [attr.data-automation-id]="'novo-tip-well-icon-' + name"></i>
        <p *ngIf="sanitize" [attr.data-automation-id]="'novo-tip-well-tip-' + name">{{ tip }}</p>
        <p *ngIf="!sanitize" [attr.data-automation-id]="'novo-tip-well-tip-' + name" [innerHTML]="tipWithStyles"></p>
      </div>
      <button theme="dialogue" size="small" (click)="hideTip()" *ngIf="button" [attr.data-automation-id]="'novo-tip-well-button-' + name">
        {{ buttonText }}
      </button>
    </div>
  `,
                host: {
                    '[class.active]': 'isActive',
                },
            }]
    }], function () { return [{ type: NovoLabelService }, { type: DomSanitizer }]; }, { name: [{
            type: Input
        }], tip: [{
            type: Input
        }], buttonText: [{
            type: Input
        }], button: [{
            type: Input
        }], icon: [{
            type: Input
        }], sanitize: [{
            type: Input
        }], confirmed: [{
            type: Output
        }] }); })();

// NG2
const _c0$10 = function (a0) { return { encrypted: a0 }; };
function NovoControlElement_label_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "label", 13);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵproperty("ngClass", ɵɵpureFunction1(3, _c0$10, ctx_r0.form.controls[ctx_r0.control.key].encrypted));
    ɵɵattribute("for", ctx_r0.control.key);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r0.form.controls[ctx_r0.control.key].label, " ");
} }
function NovoControlElement_label_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "label", 14);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵclassProp("novo-control-empty", !ctx_r1.hasValue)("novo-control-focused", ctx_r1.focused)("novo-control-filled", ctx_r1.hasValue)("novo-control-always-active", ctx_r1.alwaysActive || ctx_r1.form.controls[ctx_r1.control.key].placeholder)("novo-control-extra-spacing", ctx_r1.requiresExtraSpacing);
    ɵɵattribute("for", ctx_r1.control.key);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r1.form.controls[ctx_r1.control.key].label, " ");
} }
const _c1$o = function (a0, a1) { return { "bhi-circle": a0, "bhi-check": a1 }; };
function NovoControlElement_i_8_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 15);
} if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵclassMapInterpolate1("required-indicator ", ctx_r2.form.controls[ctx_r2.control.key].controlType, "");
    ɵɵproperty("hidden", !ctx_r2.form.controls[ctx_r2.control.key].required || ctx_r2.form.controls[ctx_r2.control.key].readOnly)("ngClass", ɵɵpureFunction2(5, _c1$o, !ctx_r2.isValid, ctx_r2.isValid));
} }
function NovoControlElement_ng_container_10_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainer(0);
} }
function NovoControlElement_ng_container_10_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, NovoControlElement_ng_container_10_ng_container_1_Template, 1, 0, "ng-container", 16);
    ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r3 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", ctx_r3.templates[ctx_r3.form.controls[ctx_r3.control.key].controlType])("ngTemplateOutletContext", ctx_r3.templateContext);
} }
function NovoControlElement_ng_container_11_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵelementStart(1, "div", 17);
    ɵɵelement(2, "input", 18);
    ɵɵelementEnd();
    ɵɵelementContainerEnd();
} }
function NovoControlElement_div_12_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "span", 25);
} }
function NovoControlElement_div_12_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 25);
    ɵɵtext(1);
    ɵɵpipe(2, "uppercase");
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵtextInterpolate2("", ɵɵpipeBind1(2, 2, ctx_r10.form.controls[ctx_r10.control.key].label), " ", ctx_r10.labels.isRequired, "");
} }
function NovoControlElement_div_12_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 25);
    ɵɵtext(1);
    ɵɵpipe(2, "uppercase");
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r11 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵtextInterpolate3("", ɵɵpipeBind1(2, 3, ctx_r11.form.controls[ctx_r11.control.key].label), " ", ctx_r11.labels.minLength, " ", ctx_r11.form.controls[ctx_r11.control.key].minlength, "");
} }
function NovoControlElement_div_12_span_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 25);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r12.labels.maxlengthMet(ctx_r12.form.controls[ctx_r12.control.key].maxlength));
} }
function NovoControlElement_div_12_span_6_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 25);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r13 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r13.labels.invalidMaxlength(ctx_r13.form.controls[ctx_r13.control.key].maxlength));
} }
function NovoControlElement_div_12_span_7_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 25);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r14 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r14.labels.maxRecordsReached);
} }
function NovoControlElement_div_12_span_8_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 25);
    ɵɵtext(1);
    ɵɵpipe(2, "uppercase");
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r15 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵtextInterpolate2("", ɵɵpipeBind1(2, 2, ctx_r15.form.controls[ctx_r15.control.key].label), " ", ctx_r15.labels.invalidEmail, "");
} }
function NovoControlElement_div_12_span_9_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 25);
    ɵɵtext(1);
    ɵɵpipe(2, "uppercase");
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r16 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵtextInterpolate2("", ɵɵpipeBind1(2, 2, ctx_r16.form.controls[ctx_r16.control.key].label), " ", ctx_r16.labels.isTooLarge, "");
} }
function NovoControlElement_div_12_span_10_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵtext(1);
    ɵɵpipe(2, "uppercase");
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r17 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵtextInterpolate2("", ɵɵpipeBind1(2, 2, ctx_r17.form.controls[ctx_r17.control.key].label), " ", ctx_r17.labels.notValidYear, "");
} }
function NovoControlElement_div_12_span_11_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 25);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r18 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r18.errors.custom);
} }
function NovoControlElement_div_12_span_12_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 25);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r19 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r19.labels.invalidMaxlengthWithField(ctx_r19.control.config[ctx_r19.maxlengthErrorField] == null ? null : ctx_r19.control.config[ctx_r19.maxlengthErrorField].label, ctx_r19.control.config[ctx_r19.maxlengthErrorField] == null ? null : ctx_r19.control.config[ctx_r19.maxlengthErrorField].maxlength), " ");
} }
function NovoControlElement_div_12_span_13_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 25);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r20 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r20.labels.maxlengthMetWithField(ctx_r20.control.config[ctx_r20.maxlengthMetField] == null ? null : ctx_r20.control.config[ctx_r20.maxlengthMetField].label, ctx_r20.control.config[ctx_r20.maxlengthMetField] == null ? null : ctx_r20.control.config[ctx_r20.maxlengthMetField].maxlength), " ");
} }
function NovoControlElement_div_12_span_14_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 25);
    ɵɵtext(1);
    ɵɵpipe(2, "uppercase");
    ɵɵelementEnd();
} if (rf & 2) {
    const invalidAddressField_r27 = ctx.$implicit;
    const ctx_r26 = ɵɵnextContext(3);
    ɵɵadvance(1);
    ɵɵtextInterpolate2("", ɵɵpipeBind1(2, 2, invalidAddressField_r27), " ", ctx_r26.labels.isRequired, " ");
} }
function NovoControlElement_div_12_span_14_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵtemplate(1, NovoControlElement_div_12_span_14_span_1_Template, 3, 4, "span", 26);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r21 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r21.errors == null ? null : ctx_r21.errors.invalidAddressFields);
} }
function NovoControlElement_div_12_span_15_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 27);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r22 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r22.form.controls[ctx_r22.control.key].description, " ");
} }
function NovoControlElement_div_12_span_16_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 28);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r23 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r23.form.controls[ctx_r23.control.key].warning);
} }
function NovoControlElement_div_12_span_17_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 29);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r24 = ɵɵnextContext(2);
    ɵɵclassProp("error", (ctx_r24.errors == null ? null : ctx_r24.errors.maxlength) && !(ctx_r24.errors == null ? null : ctx_r24.errors.maxlengthFields) || (ctx_r24.errors == null ? null : ctx_r24.errors.maxlength) && (ctx_r24.errors == null ? null : ctx_r24.errors.maxlengthFields) && ctx_r24.errors.maxlengthFields.includes(ctx_r24.focusedField));
    ɵɵadvance(1);
    ɵɵtextInterpolate2("", ctx_r24.itemCount, "/", ctx_r24.maxLength || ctx_r24.form.controls[ctx_r24.control.key].maxlength, "");
} }
function NovoControlElement_div_12_span_18_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 30);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r25 = ɵɵnextContext(2);
    ɵɵclassProp("zero-count", ctx_r25.itemCount === 0)("row-picker", ctx_r25.form.controls[ctx_r25.control.key].config.columns);
    ɵɵadvance(1);
    ɵɵtextInterpolate2("", ctx_r25.itemCount, "/", ctx_r25.maxLength || ctx_r25.form.controls[ctx_r25.control.key].maxlength, "");
} }
function NovoControlElement_div_12_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 13);
    ɵɵelementStart(1, "div", 19);
    ɵɵtemplate(2, NovoControlElement_div_12_span_2_Template, 1, 0, "span", 20);
    ɵɵtemplate(3, NovoControlElement_div_12_span_3_Template, 3, 4, "span", 20);
    ɵɵtemplate(4, NovoControlElement_div_12_span_4_Template, 3, 5, "span", 20);
    ɵɵtemplate(5, NovoControlElement_div_12_span_5_Template, 2, 1, "span", 20);
    ɵɵtemplate(6, NovoControlElement_div_12_span_6_Template, 2, 1, "span", 20);
    ɵɵtemplate(7, NovoControlElement_div_12_span_7_Template, 2, 1, "span", 20);
    ɵɵtemplate(8, NovoControlElement_div_12_span_8_Template, 3, 4, "span", 20);
    ɵɵtemplate(9, NovoControlElement_div_12_span_9_Template, 3, 4, "span", 20);
    ɵɵtemplate(10, NovoControlElement_div_12_span_10_Template, 3, 4, "span", 9);
    ɵɵtemplate(11, NovoControlElement_div_12_span_11_Template, 2, 1, "span", 20);
    ɵɵtemplate(12, NovoControlElement_div_12_span_12_Template, 2, 1, "span", 20);
    ɵɵtemplate(13, NovoControlElement_div_12_span_13_Template, 2, 1, "span", 20);
    ɵɵtemplate(14, NovoControlElement_div_12_span_14_Template, 2, 1, "span", 9);
    ɵɵtemplate(15, NovoControlElement_div_12_span_15_Template, 2, 1, "span", 21);
    ɵɵtemplate(16, NovoControlElement_div_12_span_16_Template, 2, 1, "span", 22);
    ɵɵelementEnd();
    ɵɵtemplate(17, NovoControlElement_div_12_span_17_Template, 2, 4, "span", 23);
    ɵɵtemplate(18, NovoControlElement_div_12_span_18_Template, 2, 6, "span", 24);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵɵnextContext();
    ɵɵclassMapInterpolate1("field-message ", ctx_r5.form.controls[ctx_r5.control.key].controlType, "");
    ɵɵclassProp("has-tip", ctx_r5.form.controls[ctx_r5.control.key].tipWell);
    ɵɵproperty("ngClass", ctx_r5.showErrorState || ctx_r5.showMaxLengthMetMessage ? "error-shown" : "error-hidden");
    ɵɵadvance(1);
    ɵɵproperty("ngClass", ctx_r5.showMessages ? "count-shown messages-shown" : "count-hidden messages-hidden");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r5.showFieldMessage);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r5.isDirty && (ctx_r5.errors == null ? null : ctx_r5.errors.required) && ctx_r5.form.controls[ctx_r5.control.key].controlType !== "address");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r5.isDirty && (ctx_r5.errors == null ? null : ctx_r5.errors.minlength));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r5.isDirty && ctx_r5.maxLengthMet && ctx_r5.focused && !(ctx_r5.errors == null ? null : ctx_r5.errors.maxlength) && ctx_r5.form.controls[ctx_r5.control.key].controlType !== "picker");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", (ctx_r5.errors == null ? null : ctx_r5.errors.maxlength) && ctx_r5.focused && !(ctx_r5.errors == null ? null : ctx_r5.errors.maxlengthFields));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r5.maxLengthMet && ctx_r5.form.controls[ctx_r5.control.key].controlType === "picker");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r5.isDirty && (ctx_r5.errors == null ? null : ctx_r5.errors.invalidEmail));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r5.isDirty && ((ctx_r5.errors == null ? null : ctx_r5.errors.integerTooLarge) || (ctx_r5.errors == null ? null : ctx_r5.errors.doubleTooLarge)));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r5.isDirty && (ctx_r5.errors == null ? null : ctx_r5.errors.minYear));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r5.isDirty && (ctx_r5.errors == null ? null : ctx_r5.errors.custom));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", (ctx_r5.errors == null ? null : ctx_r5.errors.maxlength) && (ctx_r5.errors == null ? null : ctx_r5.errors.maxlengthFields) && ctx_r5.maxlengthErrorField && ctx_r5.focused);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r5.isDirty && ctx_r5.maxlengthMetField && ctx_r5.focused && !(ctx_r5.errors == null ? null : ctx_r5.errors.maxlengthFields == null ? null : ctx_r5.errors.maxlengthFields.includes(ctx_r5.maxlengthMetField)));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r5.isDirty && (ctx_r5.errors == null ? null : ctx_r5.errors.invalidAddress));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r5.form.controls[ctx_r5.control.key].description);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r5.form.controls[ctx_r5.control.key].warning);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r5.showCount && ctx_r5.form.controls[ctx_r5.control.key].controlType !== "picker");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r5.showCount && ctx_r5.form.controls[ctx_r5.control.key].controlType === "picker");
} }
function NovoControlElement_novo_tip_well_13_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-tip-well", 31);
} if (rf & 2) {
    const ctx_r6 = ɵɵnextContext();
    ɵɵproperty("name", ctx_r6.control.key)("tip", ctx_r6.form.controls[ctx_r6.control.key] == null ? null : ctx_r6.form.controls[ctx_r6.control.key].tipWell == null ? null : ctx_r6.form.controls[ctx_r6.control.key].tipWell.tip)("icon", ctx_r6.form.controls[ctx_r6.control.key] == null ? null : ctx_r6.form.controls[ctx_r6.control.key].tipWell == null ? null : ctx_r6.form.controls[ctx_r6.control.key].tipWell.icon)("button", ctx_r6.form.controls[ctx_r6.control.key] == null ? null : ctx_r6.form.controls[ctx_r6.control.key].tipWell == null ? null : ctx_r6.form.controls[ctx_r6.control.key].tipWell.button)("sanitize", ctx_r6.form.controls[ctx_r6.control.key] == null ? null : ctx_r6.form.controls[ctx_r6.control.key].tipWell == null ? null : ctx_r6.form.controls[ctx_r6.control.key].tipWell.sanitize);
} }
function NovoControlElement_i_14_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "i", 32);
    ɵɵnamespaceSVG();
    ɵɵelementStart(1, "svg", 33);
    ɵɵelementStart(2, "style", 34);
    ɵɵtext(3, " .spinner { fill: #ffffff; } ");
    ɵɵelementEnd();
    ɵɵelement(4, "path", 35);
    ɵɵelementEnd();
    ɵɵelementEnd();
} }
class NovoAutoSize {
    constructor(element) {
        this.element = element;
    }
    onInput(textArea) {
        this.adjust();
    }
    ngAfterContentInit() {
        setTimeout(() => {
            this.adjust();
        });
    }
    adjust() {
        const nativeElement = this.element.nativeElement;
        nativeElement.style.height = nativeElement.style.minHeight;
        nativeElement.style.height = `${nativeElement.scrollHeight}px`;
    }
}
NovoAutoSize.ɵfac = function NovoAutoSize_Factory(t) { return new (t || NovoAutoSize)(ɵɵdirectiveInject(ElementRef)); };
NovoAutoSize.ɵdir = ɵɵdefineDirective({ type: NovoAutoSize, selectors: [["textarea", "autosize", ""]], hostBindings: function NovoAutoSize_HostBindings(rf, ctx) { if (rf & 1) {
        ɵɵlistener("input", function NovoAutoSize_input_HostBindingHandler($event) { return ctx.onInput($event.target); });
    } } });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoAutoSize, [{
        type: Directive,
        args: [{
                selector: 'textarea[autosize]',
            }]
    }], function () { return [{ type: ElementRef }]; }, { onInput: [{
            type: HostListener,
            args: ['input', ['$event.target']]
        }] }); })();
// undo all template context references!
class NovoControlElement extends OutsideClick {
    constructor(element, labels, dateFormatService, fieldInteractionApi, templateService, changeDetectorRef, locale = 'en-US') {
        super(element);
        this.labels = labels;
        this.dateFormatService = dateFormatService;
        this.fieldInteractionApi = fieldInteractionApi;
        this.templateService = templateService;
        this.changeDetectorRef = changeDetectorRef;
        this.locale = locale;
        this.condensed = false;
        this.autoFocus = false;
        this.change = new EventEmitter();
        this.edit = new EventEmitter();
        this.save = new EventEmitter();
        this.delete = new EventEmitter();
        this.upload = new EventEmitter();
        this.formattedValue = '';
        this.maxLengthMet = false;
        this.itemCount = 0;
        this._blurEmitter = new EventEmitter();
        this._focusEmitter = new EventEmitter();
        this._focused = false;
        this._enteredText = '';
        this._showCount = false;
        this.maxLengthMetErrorfields = [];
        this.templates = {};
        this.loading = false;
    }
    get onBlur() {
        return this._blurEmitter.asObservable();
    }
    get onFocus() {
        return this._focusEmitter.asObservable();
    }
    get maxlengthMetField() {
        if (this.maxLengthMetErrorfields && this.maxLengthMetErrorfields.length) {
            return this.maxLengthMetErrorfields.find((field) => field === this.focusedField) || '';
        }
        else {
            return '';
        }
    }
    get maxlengthErrorField() {
        if (this.errors && this.errors.maxlengthFields && this.errors.maxlengthFields.length) {
            return this.errors.maxlengthFields.find((field) => field === this.focusedField) || '';
        }
        else {
            return '';
        }
    }
    get showFieldMessage() {
        return !this.errors && !this.maxLengthMet && Helpers.isBlank(this.control.description);
    }
    get showMaxLengthMetMessage() {
        return ((this.isDirty && this.maxLengthMet && this.focused && (!this.errors || (this.errors && !this.errors.maxlength))) ||
            (this.isDirty &&
                this.maxlengthMetField &&
                this.focused &&
                (!this.errors || (this.errors && !this.errors.maxlengthFields.includes(this.maxlengthMetField)))));
    }
    get showErrorState() {
        return ((this.isDirty && this.errors) ||
            (this.focused && this.errors && this.errors.maxlength && this.errors.maxlengthFields) ||
            (this.focused && this.errors && this.errors.maxlength && this.errors.maxlengthFields && this.maxlengthErrorField));
    }
    get showCount() {
        const MAX_LENGTH_CONTROL_TYPES = ['textbox', 'picker', 'text-area'];
        const charCount = this.focused &&
            !!this.form.controls[this.control.key].maxlength &&
            MAX_LENGTH_CONTROL_TYPES.includes(this.form.controls[this.control.key].controlType);
        return this._showCount || charCount;
    }
    set showCount(value) {
        this._showCount = value;
    }
    get showMessages() {
        return (this.showCount ||
            !Helpers.isEmpty(this.form.controls[this.control.key].warning) ||
            !Helpers.isEmpty(this.form.controls[this.control.key].description));
    }
    get decimalSeparator() {
        return new Intl.NumberFormat(this.locale).format(1.2)[1];
    }
    ngAfterViewInit() {
        const DO_NOT_FOCUS_ME = ['picker', 'time', 'date', 'date-time'];
        if (this.autoFocus && !DO_NOT_FOCUS_ME.includes(this.control.controlType)) {
            setTimeout(() => {
                const input = this.element.nativeElement.querySelector('input');
                if (input) {
                    input.focus();
                }
            });
        }
    }
    ngAfterContentInit() {
        // Subscribe to control interactions
        if (this.control.interactions && !this.form.controls[this.control.key].restrictFieldInteractions) {
            for (const interaction of this.control.interactions) {
                switch (interaction.event) {
                    case 'blur':
                        this.valueChangeSubscription = this.onBlur.pipe(debounceTime(300)).subscribe(() => {
                            if (!this.form.controls[this.control.key].restrictFieldInteractions) {
                                this.executeInteraction(interaction);
                            }
                        });
                        break;
                    case 'focus':
                        this.valueChangeSubscription = this.onFocus.pipe(debounceTime(300)).subscribe(() => {
                            if (!this.form.controls[this.control.key].restrictFieldInteractions) {
                                this.executeInteraction(interaction);
                            }
                        });
                        break;
                    case 'change':
                        this.valueChangeSubscription = this.form.controls[this.control.key].valueChanges.pipe(debounceTime(300)).subscribe(() => {
                            if (!this.form.controls[this.control.key].restrictFieldInteractions) {
                                this.executeInteraction(interaction);
                            }
                        });
                        break;
                    case 'init':
                        interaction.invokeOnInit = true;
                        break;
                    default:
                        break;
                }
                if (interaction.invokeOnInit) {
                    if (!this.form.controls[this.control.key].restrictFieldInteractions) {
                        this.executeInteraction(interaction);
                    }
                }
            }
        }
        setTimeout(() => {
            this.templates = this.templateService.getAll();
            this.loading = false;
            this.changeDetectorRef.markForCheck();
        });
    }
    ngOnInit() {
        this.loading = true;
        // Make sure to initially format the time controls
        if (this.control && this.form.controls[this.control.key].value) {
            if (this.form.controls[this.control.key].controlType === 'textbox' ||
                this.form.controls[this.control.key].controlType === 'text-area') {
                this.itemCount = this.form.controls[this.control.key].value.length;
            }
        }
        if (this.control) {
            // Listen to clear events
            this.forceClearSubscription = this.control.forceClear.subscribe(() => {
                this.clearValue();
            });
            // For Asynchronous validations
            this.statusChangeSubscription = this.form.controls[this.control.key].statusChanges.subscribe((validity) => {
                this.form.controls[this.control.key] = this.templateContext.$implicit;
                if (validity !== 'PENDING' && this.form.updateValueAndValidity) {
                    this.form.updateValueAndValidity();
                }
            });
        }
        this.templateContext = {
            $implicit: this.form.controls[this.control.key],
            methods: {
                restrictKeys: this.restrictKeys.bind(this),
                emitChange: this.emitChange.bind(this),
                handleFocus: this.handleFocus.bind(this),
                handlePercentChange: this.handlePercentChange.bind(this),
                handleBlur: this.handleBlur.bind(this),
                handleTextAreaInput: this.handleTextAreaInput.bind(this),
                handleEdit: this.handleEdit.bind(this),
                handleSave: this.handleSave.bind(this),
                handleDelete: this.handleDelete.bind(this),
                handleUpload: this.handleUpload.bind(this),
                modelChange: this.modelChange.bind(this),
                modelChangeWithRaw: this.modelChangeWithRaw.bind(this),
                handleAddressChange: this.handleAddressChange.bind(this),
                handleTyping: this.handleTyping.bind(this),
                updateValidity: this.updateValidity.bind(this),
                toggleActive: this.toggleActive.bind(this),
                validateIntegerInput: this.validateIntegerInput.bind(this),
                validateNumberOnBlur: this.validateNumberOnBlur.bind(this),
            },
            form: this.form,
        };
        this.templateContext.$implicit.tooltipPosition = this.tooltipPosition;
        this.templateContext.$implicit.tooltip = this.tooltip;
        this.templateContext.$implicit.tooltipSize = this.tooltipSize;
        this.templateContext.$implicit.tooltipPreline = this.tooltipPreline;
        this.templateContext.$implicit.removeTooltipArrow = this.removeTooltipArrow;
        this.templateContext.$implicit.startupFocus = this.form.controls[this.control.key].startupFocus;
        this.templateContext.$implicit.fileBrowserImageUploadUrl = this.form.controls[this.control.key].fileBrowserImageUploadUrl;
        this.templateContext.$implicit.minimal = this.form.controls[this.control.key].minimal;
        this.templateContext.$implicit.currencyFormat = this.form.controls[this.control.key].currencyFormat;
        this.templateContext.$implicit.percentValue = this.form.controls[this.control.key].percentValue;
        this.templateContext.$implicit.config = this.form.controls[this.control.key].config;
        if (this.form.controls[this.control.key] && this.form.controls[this.control.key].subType === 'percentage') {
            if (!Helpers.isEmpty(this.form.controls[this.control.key].value)) {
                this.templateContext.$implicit.percentValue = Number((this.form.controls[this.control.key].value * 100).toFixed(6).replace(/\.?0*$/, ''));
            }
            this.percentChangeSubscription = this.form.controls[this.control.key].displayValueChanges.subscribe((value) => {
                if (!Helpers.isEmpty(value)) {
                    this.templateContext.$implicit.percentValue = Number((value * 100).toFixed(6).replace(/\.?0*$/, ''));
                }
            });
        }
    }
    ngOnDestroy() {
        // Unsubscribe from control interactions
        if (this.valueChangeSubscription) {
            this.valueChangeSubscription.unsubscribe();
        }
        // if (this.dateChangeSubscription) {
        //     this.dateChangeSubscription.unsubscribe();
        // }
        if (this.forceClearSubscription) {
            // Un-listen for clear events
            this.forceClearSubscription.unsubscribe();
        }
        if (this.percentChangeSubscription) {
            // Un-listen for clear events
            this.percentChangeSubscription.unsubscribe();
        }
        if (this.dateChangeSubscription) {
            this.dateChangeSubscription.unsubscribe();
        }
        if (this.statusChangeSubscription) {
            this.statusChangeSubscription.unsubscribe();
        }
        super.ngOnDestroy();
    }
    get errors() {
        return this.form.controls[this.control.key].errors;
    }
    get isValid() {
        return this.form.controls[this.control.key].valid;
    }
    get isDirty() {
        return this.form.controls[this.control.key].dirty || this.control.dirty;
    }
    get hasValue() {
        return !Helpers.isEmpty(this.form.value[this.control.key]);
    }
    get focused() {
        return this._focused;
    }
    get tooltip() {
        return this.form.controls[this.control.key].tooltip;
    }
    get tooltipPosition() {
        if (Helpers.isBlank(this.form.controls[this.control.key].tooltipPosition)) {
            return 'right';
        }
        return this.form.controls[this.control.key].tooltipPosition;
    }
    get tooltipSize() {
        if (Helpers.isBlank(this.form.controls[this.control.key].tooltipSize)) {
            return '';
        }
        return this.form.controls[this.control.key].tooltipSize;
    }
    get tooltipPreline() {
        if (Helpers.isBlank(this.form.controls[this.control.key].tooltipPreline)) {
            return false;
        }
        return this.form.controls[this.control.key].tooltipPreline;
    }
    get removeTooltipArrow() {
        if (Helpers.isBlank(this.form.controls[this.control.key].removeTooltipArrow)) {
            return false;
        }
        return this.form.controls[this.control.key].removeTooltipArrow;
    }
    get alwaysActive() {
        // Controls that have the label active if there is any user entered text in the field
        if (this.form.controls[this.control.key].controlType === 'picker' && this._enteredText.length) {
            return true;
        }
        if (this.form.controls[this.control.key].alwaysActive) {
            return true;
        }
        // Controls that always have the label active
        return ([
            'tiles',
            'checklist',
            'checkbox',
            'date',
            'time',
            'date-time',
            'address',
            'file',
            'editor',
            'ace-editor',
            'radio',
            'text-area',
            'quick-note',
            'date',
            'custom',
        ].indexOf(this.form.controls[this.control.key].controlType) !== -1);
    }
    get requiresExtraSpacing() {
        // Chips
        if (this.form.controls[this.control.key].controlType === 'picker' && this.form.controls[this.control.key].multiple && this.hasValue) {
            return true;
        }
        return false;
    }
    executeInteraction(interaction) {
        if (interaction.script && Helpers.isFunction(interaction.script)) {
            setTimeout(() => {
                this.fieldInteractionApi.form = this.form;
                this.fieldInteractionApi.currentKey = this.control.key;
                try {
                    interaction.script(this.fieldInteractionApi, this.control.key);
                }
                catch (err) {
                    console.info('Field Interaction Error!', this.control.key); // tslint:disable-line
                    console.error(err); // tslint:disable-line
                }
            });
        }
    }
    handleTyping(event) {
        this._focused = event && event.length;
        this._enteredText = event;
    }
    handleFocus(event, field) {
        this._focused = true;
        this.focusedField = field;
        if (!Helpers.isBlank(this.characterCountField) && this.characterCountField === field) {
            this.showCount = true;
        }
        else if (this.form.controls[this.control.key].controlType === 'address' &&
            field &&
            !Helpers.isEmpty(this.form.value[this.control.key]) &&
            !Helpers.isBlank(this.form.value[this.control.key][field])) {
            this.handleAddressChange({ value: this.form.value[this.control.key][field], field });
        }
        this._focusEmitter.emit(event);
    }
    handleBlur(event) {
        this._focused = false;
        this.focusedField = '';
        this.showCount = false;
        this._blurEmitter.emit(event);
    }
    clearValue() {
        this.form.controls[this.control.key].setValue(null);
        this.formattedValue = null;
    }
    handleTextAreaInput(event) {
        this.emitChange(event);
        this.restrictKeys(event);
    }
    checkMaxLength(event) {
        if (this.control && this.form.controls[this.control.key].maxlength) {
            this.itemCount = event.target.value.length;
            this.maxLengthMet = event.target.value.length >= this.form.controls[this.control.key].maxlength;
        }
    }
    modelChangeWithRaw(event) {
        if (Helpers.isEmpty(event.value)) {
            this._focused = false;
            this._enteredText = '';
        }
        if (this.form.controls[this.control.key].controlType === 'picker' && this.form.controls[this.control.key].maxlength) {
            this.itemCount = event.value ? event.value.length : 0;
            this.maxLengthMet = this.itemCount >= this.form.controls[this.control.key].maxlength ? true : false;
        }
        this.form.controls[this.control.key].rawValue = event.rawValue;
        this.change.emit(event.value);
    }
    modelChange(value) {
        if (Helpers.isEmpty(value)) {
            this._focused = false;
            this._enteredText = '';
        }
        this.change.emit(value);
    }
    validateNumberOnBlur(event) {
        this._focused = false;
        this.focusedField = '';
        this.showCount = false;
        if (this.form.controls[this.control.key].subType === 'number') {
            this.validateIntegerInput();
        }
        this._blurEmitter.emit(event);
    }
    validateIntegerInput() {
        const NUMBERS_ONLY = /^[\d\-]\d*$/;
        if (this.form.controls[this.control.key].value && !NUMBERS_ONLY.test(this.form.controls[this.control.key].value)) {
            this.form.controls[this.control.key].markAsInvalid(`${this.labels.invalidIntegerInput} ${this.form.controls[this.control.key].label.toUpperCase()}`);
        }
    }
    restrictKeys(event) {
        const NUMBERS_ONLY = /[0-9\-]/;
        const NUMBERS_WITH_DECIMAL_DOT = /[0-9\.\-]/;
        const NUMBERS_WITH_DECIMAL_DOT_AND_COMMA = /[0-9\.\,\-]/;
        const UTILITY_KEYS = ['Backspace', 'Delete', 'ArrowLeft', 'ArrowRight', 'Tab'];
        const key = event.key;
        // Numbers or numbers and decimal characters only
        if (this.form.controls[this.control.key].subType === 'number' && !(NUMBERS_ONLY.test(key) || UTILITY_KEYS.includes(key))) {
            event.preventDefault();
        }
        else if (['currency', 'float', 'percentage'].includes(this.form.controls[this.control.key].subType) &&
            !((this.decimalSeparator === '.' && NUMBERS_WITH_DECIMAL_DOT.test(key)) ||
                (this.decimalSeparator === ',' && NUMBERS_WITH_DECIMAL_DOT_AND_COMMA.test(key)) ||
                UTILITY_KEYS.includes(key))) {
            event.preventDefault();
        }
        // Max Length
        if (this.form.controls[this.control.key].maxlength && event.target.value.length >= this.form.controls[this.control.key].maxlength) {
            event.preventDefault();
        }
    }
    handlePercentChange(event) {
        const value = event.target.value;
        const percent = Helpers.isEmpty(value) ? null : Number((Number(value) / 100).toFixed(6).replace(/\.?0*$/, ''));
        if (!Helpers.isEmpty(percent)) {
            this.change.emit(percent);
            this.form.controls[this.control.key].setValue(percent);
        }
        else {
            this.change.emit(null);
            this.form.controls[this.control.key].setValue(null);
        }
    }
    handleTabForPickers(event) {
        if (this.active && event && event.key) {
            if (event.key === "Escape" /* Escape */ || event.key === "Tab" /* Tab */) {
                this.toggleActive(event, false);
            }
        }
    }
    emitChange(value) {
        this.change.emit(value);
        this.checkMaxLength(value);
    }
    handleEdit(value) {
        this.edit.emit(value);
    }
    handleSave(value) {
        this.save.emit(value);
    }
    handleDelete(value) {
        this.delete.emit(value);
    }
    handleUpload(value) {
        this.upload.emit(value);
    }
    handleAddressChange(data) {
        if (data &&
            !Helpers.isBlank(data.value) &&
            data.field &&
            this.control.config[data.field] &&
            !Helpers.isEmpty(this.control.config[data.field].maxlength)) {
            this.itemCount = data.value.length;
            this.characterCountField = data.field;
            this.maxLength = this.control.config[data.field].maxlength;
            this.showCount = true;
            if (this.maxLength === this.itemCount) {
                this.maxLengthMetErrorfields.push(data.field);
            }
            else {
                this.maxLengthMetErrorfields = this.maxLengthMetErrorfields.filter((field) => field !== data.field);
            }
        }
    }
    updateValidity(shouldEventBeEmitted) {
        const emitEvent = shouldEventBeEmitted ? true : false;
        this.form.controls[this.control.key].updateValueAndValidity({ emitEvent });
    }
}
NovoControlElement.ɵfac = function NovoControlElement_Factory(t) { return new (t || NovoControlElement)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(DateFormatService), ɵɵdirectiveInject(FieldInteractionApi), ɵɵdirectiveInject(NovoTemplateService), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(LOCALE_ID)); };
NovoControlElement.ɵcmp = ɵɵdefineComponent({ type: NovoControlElement, selectors: [["novo-control"]], hostVars: 12, hostBindings: function NovoControlElement_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵattribute("data-control-type", ctx.form.controls[ctx.control.key].controlType)("data-control-key", ctx.control.key);
        ɵɵclassMap(ctx.form.controls[ctx.control.key].controlType);
        ɵɵclassProp("disabled", ctx.form.controls[ctx.control.key].readOnly)("hidden", ctx.form.controls[ctx.control.key].hidden)("inline-embedded", ctx.control.isInlineEmbedded)("embedded", ctx.control.isEmbedded);
    } }, inputs: { control: "control", form: "form", condensed: "condensed", autoFocus: "autoFocus" }, outputs: { change: "change", edit: "edit", save: "save", delete: "delete", upload: "upload", onBlur: "blur", onFocus: "focus" }, features: [ɵɵInheritDefinitionFeature], decls: 15, vars: 24, consts: [[1, "novo-control-container", 3, "hidden"], [3, "tooltip", "tooltipPosition"], [1, "bhi-lock", 3, "hidden"], [3, "ngClass", 4, "ngIf"], [1, "novo-control-outer-container"], ["class", "novo-control-label", 3, "novo-control-empty", "novo-control-focused", "novo-control-filled", "novo-control-always-active", "novo-control-extra-spacing", 4, "ngIf"], [1, "novo-control-inner-container"], [1, "novo-control-inner-input-container"], [3, "hidden", "class", "ngClass", 4, "ngIf"], [4, "ngIf"], [3, "class", "has-tip", "ngClass", 4, "ngIf"], [3, "name", "tip", "icon", "button", "sanitize", 4, "ngIf"], ["class", "loading", 4, "ngIf"], [3, "ngClass"], [1, "novo-control-label"], [3, "hidden", "ngClass"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "novo-control-input-container", "novo-control-input-with-label"], ["type", "text"], [1, "messages", 3, "ngClass"], ["class", "error-text", 4, "ngIf"], ["class", "description", 4, "ngIf"], ["class", "warning-text", 4, "ngIf"], ["class", "character-count", 3, "error", 4, "ngIf"], ["class", "record-count", 3, "zero-count", "row-picker", 4, "ngIf"], [1, "error-text"], ["class", "error-text", 4, "ngFor", "ngForOf"], [1, "description"], [1, "warning-text"], [1, "character-count"], [1, "record-count"], [3, "name", "tip", "icon", "button", "sanitize"], [1, "loading"], ["version", "1.1", "xmlns", "http://www.w3.org/2000/svg", 0, "xmlns", "xlink", "http://www.w3.org/1999/xlink", 0, "xmlns", "a", "http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/", "x", "0px", "y", "0px", "width", "18.2px", "height", "18.5px", "viewBox", "0 0 18.2 18.5", 0, "xml", "space", "preserve", 2, "enable-background", "new 0 0 18.2 18.5"], ["type", "text/css"], ["d", "M9.2,18.5C4.1,18.5,0,14.4,0,9.2S4.1,0,9.2,0c0.9,0,1.9,0.1,2.7,0.4c0.8,0.2,1.2,1.1,1,1.9\n                            c-0.2,0.8-1.1,1.2-1.9,1C10.5,3.1,9.9,3,9.2,3C5.8,3,3,5.8,3,9.2s2.8,6.2,6.2,6.2c2.8,0,5.3-1.9,6-4.7c0.2-0.8,1-1.3,1.8-1.1\n                            c0.8,0.2,1.3,1,1.1,1.8C17.1,15.7,13.4,18.5,9.2,18.5z", 1, "spinner"]], template: function NovoControlElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "div", 0);
        ɵɵelementStart(1, "span", 1);
        ɵɵelement(2, "i", 2);
        ɵɵelementEnd();
        ɵɵtemplate(3, NovoControlElement_label_3_Template, 2, 5, "label", 3);
        ɵɵelementStart(4, "div", 4);
        ɵɵtemplate(5, NovoControlElement_label_5_Template, 2, 12, "label", 5);
        ɵɵelementStart(6, "div", 6);
        ɵɵelementStart(7, "div", 7);
        ɵɵtemplate(8, NovoControlElement_i_8_Template, 1, 8, "i", 8);
        ɵɵelementStart(9, "div");
        ɵɵtemplate(10, NovoControlElement_ng_container_10_Template, 2, 2, "ng-container", 9);
        ɵɵtemplate(11, NovoControlElement_ng_container_11_Template, 3, 0, "ng-container", 9);
        ɵɵelementEnd();
        ɵɵelementEnd();
        ɵɵtemplate(12, NovoControlElement_div_12_Template, 19, 24, "div", 10);
        ɵɵtemplate(13, NovoControlElement_novo_tip_well_13_Template, 1, 5, "novo-tip-well", 11);
        ɵɵelementEnd();
        ɵɵtemplate(14, NovoControlElement_i_14_Template, 5, 0, "i", 12);
        ɵɵelementEnd();
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵproperty("hidden", ctx.form.controls[ctx.control.key].hidden || ctx.form.controls[ctx.control.key].type === "hidden" || ctx.form.controls[ctx.control.key].controlType === "hidden");
        ɵɵadvance(1);
        ɵɵproperty("tooltip", ctx.labels.encryptedFieldTooltip)("tooltipPosition", "right");
        ɵɵadvance(1);
        ɵɵproperty("hidden", !ctx.form.controls[ctx.control.key].encrypted);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.form.layout !== "vertical" && ctx.form.controls[ctx.control.key].label && !ctx.condensed);
        ɵɵadvance(2);
        ɵɵproperty("ngIf", ctx.form.layout === "vertical" && ctx.form.controls[ctx.control.key].label && !ctx.condensed);
        ɵɵadvance(1);
        ɵɵclassProp("required", ctx.form.controls[ctx.control.key].required && !ctx.form.controls[ctx.control.key].readOnly);
        ɵɵadvance(1);
        ɵɵclassProp("novo-control-filled", ctx.hasValue)("novo-control-empty", !ctx.hasValue);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", !ctx.condensed || ctx.form.controls[ctx.control.key].required);
        ɵɵadvance(1);
        ɵɵclassMapInterpolate1("novo-control-input ", ctx.form.controls[ctx.control.key].controlType, "");
        ɵɵclassProp("control-disabled", ctx.form.controls[ctx.control.key].disabled);
        ɵɵattribute("data-automation-id", ctx.control.key);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.templates);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", !ctx.templates || ctx.loading);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", !ctx.condensed);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.form.controls[ctx.control.key].tipWell);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.form.controls[ctx.control.key].fieldInteractionloading);
    } }, directives: [TooltipDirective, NgIf, NgClass, NgTemplateOutlet, NgForOf, NovoTipWellElement], pipes: [UpperCasePipe], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoControlElement, [{
        type: Component,
        args: [{
                selector: 'novo-control',
                template: `
    <div
      class="novo-control-container"
      [hidden]="
        form.controls[control.key].hidden ||
        form.controls[control.key].type === 'hidden' ||
        form.controls[control.key].controlType === 'hidden'
      "
    >
      <!--Encrypted Field-->
      <span [tooltip]="labels.encryptedFieldTooltip" [tooltipPosition]="'right'"
        ><i [hidden]="!form.controls[control.key].encrypted" class="bhi-lock"></i
      ></span>
      <!--Label (for horizontal)-->
      <label
        [attr.for]="control.key"
        *ngIf="form.layout !== 'vertical' && form.controls[control.key].label && !condensed"
        [ngClass]="{ encrypted: form.controls[control.key].encrypted }"
      >
        {{ form.controls[control.key].label }}
      </label>
      <div class="novo-control-outer-container">
        <!--Label (for vertical)-->
        <label
          *ngIf="form.layout === 'vertical' && form.controls[control.key].label && !condensed"
          class="novo-control-label"
          [attr.for]="control.key"
          [class.novo-control-empty]="!hasValue"
          [class.novo-control-focused]="focused"
          [class.novo-control-filled]="hasValue"
          [class.novo-control-always-active]="alwaysActive || form.controls[control.key].placeholder"
          [class.novo-control-extra-spacing]="requiresExtraSpacing"
        >
          {{ form.controls[control.key].label }}
        </label>
        <div
          class="novo-control-inner-container"
          [class.required]="form.controls[control.key].required && !form.controls[control.key].readOnly"
        >
          <div class="novo-control-inner-input-container" [class.novo-control-filled]="hasValue" [class.novo-control-empty]="!hasValue">
            <!--Required Indicator-->
            <i
              [hidden]="!form.controls[control.key].required || form.controls[control.key].readOnly"
              class="required-indicator {{ form.controls[control.key].controlType }}"
              [ngClass]="{ 'bhi-circle': !isValid, 'bhi-check': isValid }"
              *ngIf="!condensed || form.controls[control.key].required"
            >
            </i>
            <!--Form Controls-->
            <div
              class="novo-control-input {{ form.controls[control.key].controlType }}"
              [attr.data-automation-id]="control.key"
              [class.control-disabled]="form.controls[control.key].disabled"
            >
              <!--TODO prefix/suffix on the control-->
              <ng-container *ngIf="templates">
                <ng-container
                  *ngTemplateOutlet="templates[form.controls[control.key].controlType]; context: templateContext"
                ></ng-container>
              </ng-container>
              <ng-container *ngIf="!templates || loading">
                <div class="novo-control-input-container novo-control-input-with-label">
                  <input type="text" />
                </div>
              </ng-container>
            </div>
          </div>
          <!--Error Message-->
          <div
            class="field-message {{ form.controls[control.key].controlType }}"
            *ngIf="!condensed"
            [class.has-tip]="form.controls[control.key].tipWell"
            [ngClass]="showErrorState || showMaxLengthMetMessage ? 'error-shown' : 'error-hidden'"
          >
            <div class="messages" [ngClass]="showMessages ? 'count-shown messages-shown' : 'count-hidden messages-hidden'">
              <span class="error-text" *ngIf="showFieldMessage"></span>
              <span class="error-text" *ngIf="isDirty && errors?.required && form.controls[control.key].controlType !== 'address'"
                >{{ form.controls[control.key].label | uppercase }} {{ labels.isRequired }}</span
              >
              <span class="error-text" *ngIf="isDirty && errors?.minlength"
                >{{ form.controls[control.key].label | uppercase }} {{ labels.minLength }} {{ form.controls[control.key].minlength }}</span
              >
              <span
                class="error-text"
                *ngIf="isDirty && maxLengthMet && focused && !errors?.maxlength && form.controls[control.key].controlType !== 'picker'"
                >{{ labels.maxlengthMet(form.controls[control.key].maxlength) }}</span
              >
              <span class="error-text" *ngIf="errors?.maxlength && focused && !errors?.maxlengthFields">{{
                labels.invalidMaxlength(form.controls[control.key].maxlength)
              }}</span>
              <span class="error-text" *ngIf="maxLengthMet && form.controls[control.key].controlType === 'picker'">{{
                labels.maxRecordsReached
              }}</span>
              <span class="error-text" *ngIf="isDirty && errors?.invalidEmail"
                >{{ form.controls[control.key].label | uppercase }} {{ labels.invalidEmail }}</span
              >
              <span class="error-text" *ngIf="isDirty && (errors?.integerTooLarge || errors?.doubleTooLarge)"
                >{{ form.controls[control.key].label | uppercase }} {{ labels.isTooLarge }}</span
              >
              <span *ngIf="isDirty && errors?.minYear">{{ form.controls[control.key].label | uppercase }} {{ labels.notValidYear }}</span>
              <span class="error-text" *ngIf="isDirty && errors?.custom">{{ errors.custom }}</span>
              <span class="error-text" *ngIf="errors?.maxlength && errors?.maxlengthFields && maxlengthErrorField && focused">
                {{
                  labels.invalidMaxlengthWithField(
                    control.config[maxlengthErrorField]?.label,
                    control.config[maxlengthErrorField]?.maxlength
                  )
                }}
              </span>
              <span
                class="error-text"
                *ngIf="isDirty && maxlengthMetField && focused && !errors?.maxlengthFields?.includes(maxlengthMetField)"
              >
                {{ labels.maxlengthMetWithField(control.config[maxlengthMetField]?.label, control.config[maxlengthMetField]?.maxlength) }}
              </span>
              <span *ngIf="isDirty && errors?.invalidAddress">
                <span class="error-text" *ngFor="let invalidAddressField of errors?.invalidAddressFields"
                  >{{ invalidAddressField | uppercase }} {{ labels.isRequired }}
                </span>
              </span>
              <!--Field Hint-->
              <span class="description" *ngIf="form.controls[control.key].description">
                {{ form.controls[control.key].description }}
              </span>
              <span class="warning-text" *ngIf="form.controls[control.key].warning">{{ form.controls[control.key].warning }}</span>
            </div>
            <span
              class="character-count"
              [class.error]="
                (errors?.maxlength && !errors?.maxlengthFields) ||
                (errors?.maxlength && errors?.maxlengthFields && errors.maxlengthFields.includes(focusedField))
              "
              *ngIf="showCount && form.controls[control.key].controlType !== 'picker'"
              >{{ itemCount }}/{{ maxLength || form.controls[control.key].maxlength }}</span
            >
            <span
              class="record-count"
              [class.zero-count]="itemCount === 0"
              [class.row-picker]="form.controls[this.control.key].config.columns"
              *ngIf="showCount && form.controls[control.key].controlType === 'picker'"
              >{{ itemCount }}/{{ maxLength || form.controls[control.key].maxlength }}</span
            >
          </div>
          <!--Tip Wel-->
          <novo-tip-well
            *ngIf="form.controls[control.key].tipWell"
            [name]="control.key"
            [tip]="form.controls[control.key]?.tipWell?.tip"
            [icon]="form.controls[control.key]?.tipWell?.icon"
            [button]="form.controls[control.key]?.tipWell?.button"
            [sanitize]="form.controls[control.key]?.tipWell?.sanitize"
          ></novo-tip-well>
        </div>
        <i *ngIf="form.controls[control.key].fieldInteractionloading" class="loading">
          <svg
            version="1.1"
            xmlns="http://www.w3.org/2000/svg"
            xmlns:xlink="http://www.w3.org/1999/xlink"
            xmlns:a="http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/"
            x="0px"
            y="0px"
            width="18.2px"
            height="18.5px"
            viewBox="0 0 18.2 18.5"
            style="enable-background:new 0 0 18.2 18.5;"
            xml:space="preserve"
          >
            <style type="text/css">
              .spinner {
                fill: #ffffff;
              }
            </style>
            <path
              class="spinner"
              d="M9.2,18.5C4.1,18.5,0,14.4,0,9.2S4.1,0,9.2,0c0.9,0,1.9,0.1,2.7,0.4c0.8,0.2,1.2,1.1,1,1.9
                            c-0.2,0.8-1.1,1.2-1.9,1C10.5,3.1,9.9,3,9.2,3C5.8,3,3,5.8,3,9.2s2.8,6.2,6.2,6.2c2.8,0,5.3-1.9,6-4.7c0.2-0.8,1-1.3,1.8-1.1
                            c0.8,0.2,1.3,1,1.1,1.8C17.1,15.7,13.4,18.5,9.2,18.5z"
            />
          </svg>
        </i>
      </div>
    </div>
  `,
                host: {
                    '[class]': 'form.controls[control.key].controlType',
                    '[attr.data-control-type]': 'form.controls[control.key].controlType',
                    '[class.disabled]': 'form.controls[control.key].readOnly',
                    '[class.hidden]': 'form.controls[control.key].hidden',
                    '[attr.data-control-key]': 'control.key',
                    '[class.inline-embedded]': 'control.isInlineEmbedded',
                    '[class.embedded]': 'control.isEmbedded',
                },
            }]
    }], function () { return [{ type: ElementRef }, { type: NovoLabelService }, { type: DateFormatService }, { type: FieldInteractionApi }, { type: NovoTemplateService }, { type: ChangeDetectorRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [LOCALE_ID]
            }] }]; }, { control: [{
            type: Input
        }], form: [{
            type: Input
        }], condensed: [{
            type: Input
        }], autoFocus: [{
            type: Input
        }], change: [{
            type: Output
        }], edit: [{
            type: Output
        }], save: [{
            type: Output
        }], delete: [{
            type: Output
        }], upload: [{
            type: Output
        }], onBlur: [{
            type: Output,
            args: ['blur']
        }], onFocus: [{
            type: Output,
            args: ['focus']
        }] }); })();

// NG
function NovoControlGroup_h6_0_i_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 12);
} if (rf & 2) {
    const ctx_r9 = ɵɵnextContext(2);
    ɵɵproperty("ngClass", ctx_r9.icon);
    ɵɵattribute("data-automation-id", "novo-control-group-icon-" + ctx_r9.key);
} }
function NovoControlGroup_h6_0_i_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 13);
} if (rf & 2) {
    const ctx_r10 = ɵɵnextContext(2);
    ɵɵclassProp("toggled", ctx_r10.toggled);
    ɵɵattribute("data-automation-id", "novo-control-group-collapse-" + ctx_r10.key);
} }
function NovoControlGroup_h6_0_label_6_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "label", 14);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r11 = ɵɵnextContext(2);
    ɵɵattribute("data-automation-id", "novo-control-group-description-" + ctx_r11.key);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r11.description);
} }
function NovoControlGroup_h6_0_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "h6", 7);
    ɵɵelementStart(1, "span", 8);
    ɵɵlistener("click", function NovoControlGroup_h6_0_Template_span_click_1_listener($event) { ɵɵrestoreView(_r13); const ctx_r12 = ɵɵnextContext(); return ctx_r12.toggle($event); });
    ɵɵtemplate(2, NovoControlGroup_h6_0_i_2_Template, 1, 2, "i", 9);
    ɵɵtemplate(3, NovoControlGroup_h6_0_i_3_Template, 1, 3, "i", 10);
    ɵɵelementStart(4, "span");
    ɵɵtext(5);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵtemplate(6, NovoControlGroup_h6_0_label_6_Template, 2, 2, "label", 11);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵclassProp("clickable", ctx_r0.collapsible);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.icon && !ctx_r0.collapsible);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.collapsible);
    ɵɵadvance(1);
    ɵɵattribute("data-automation-id", "novo-control-group-label-" + ctx_r0.key);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r0.label);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.description);
} }
function NovoControlGroup_ng_template_2_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r24 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div");
    ɵɵelementStart(1, "novo-control", 20);
    ɵɵlistener("change", function NovoControlGroup_ng_template_2_div_1_Template_novo_control_change_1_listener($event) { ɵɵrestoreView(_r24); const ctx_r23 = ɵɵnextContext(2); return ctx_r23.onChange($event); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const c_r22 = ctx.$implicit;
    const ctx_r25 = ɵɵnextContext();
    const form_r15 = ctx_r25.form;
    const key_r16 = ctx_r25.key;
    const index_r14 = ctx_r25.index;
    const ctx_r17 = ɵɵnextContext();
    ɵɵclassMapInterpolate1("novo-control-container ", c_r22.key, "");
    ɵɵstyleProp("max-width", c_r22.width, "px");
    ɵɵclassProp("is-label", c_r22.controlType === "read-only");
    ɵɵadvance(1);
    ɵɵproperty("form", form_r15 == null ? null : form_r15.controls[key_r16]["controls"][index_r14])("control", c_r22)("condensed", !ctx_r17.vertical || c_r22.controlType === "read-only");
} }
function NovoControlGroup_ng_template_2_div_2_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r29 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 22);
    ɵɵlistener("click", function NovoControlGroup_ng_template_2_div_2_button_1_Template_button_click_0_listener() { ɵɵrestoreView(_r29); const index_r14 = ɵɵnextContext(2).index; const ctx_r27 = ɵɵnextContext(); return ctx_r27.editControl(index_r14); });
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r30 = ɵɵnextContext(2);
    const index_r14 = ctx_r30.index;
    const key_r16 = ctx_r30.key;
    const ctx_r26 = ɵɵnextContext();
    ɵɵproperty("disabled", !ctx_r26.disabledArray[index_r14].edit);
    ɵɵattribute("data-automation-id", "novo-control-group-edit-" + key_r16);
} }
function NovoControlGroup_ng_template_2_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 21);
    ɵɵtemplate(1, NovoControlGroup_ng_template_2_div_2_button_1_Template, 1, 2, "button", 18);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r18 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r18.edit && !ctx_r18.vertical);
} }
function NovoControlGroup_ng_template_2_div_3_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r34 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 23);
    ɵɵlistener("click", function NovoControlGroup_ng_template_2_div_3_button_1_Template_button_click_0_listener() { ɵɵrestoreView(_r34); const index_r14 = ɵɵnextContext(2).index; const ctx_r32 = ɵɵnextContext(); return ctx_r32.removeControl(index_r14); });
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r35 = ɵɵnextContext(2);
    const index_r14 = ctx_r35.index;
    const key_r16 = ctx_r35.key;
    const ctx_r31 = ɵɵnextContext();
    ɵɵproperty("disabled", !ctx_r31.disabledArray[index_r14].remove);
    ɵɵattribute("data-automation-id", "novo-control-group-delete-" + key_r16);
} }
function NovoControlGroup_ng_template_2_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 21);
    ɵɵtemplate(1, NovoControlGroup_ng_template_2_div_3_button_1_Template, 1, 2, "button", 19);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r19 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r19.remove && !ctx_r19.vertical);
} }
function NovoControlGroup_ng_template_2_button_4_Template(rf, ctx) { if (rf & 1) {
    const _r38 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 22);
    ɵɵlistener("click", function NovoControlGroup_ng_template_2_button_4_Template_button_click_0_listener() { ɵɵrestoreView(_r38); const index_r14 = ɵɵnextContext().index; const ctx_r36 = ɵɵnextContext(); return ctx_r36.editControl(index_r14); });
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r39 = ɵɵnextContext();
    const index_r14 = ctx_r39.index;
    const key_r16 = ctx_r39.key;
    const ctx_r20 = ɵɵnextContext();
    ɵɵproperty("disabled", !ctx_r20.disabledArray[index_r14].edit);
    ɵɵattribute("data-automation-id", "novo-control-group-edit-" + key_r16);
} }
function NovoControlGroup_ng_template_2_button_5_Template(rf, ctx) { if (rf & 1) {
    const _r42 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 23);
    ɵɵlistener("click", function NovoControlGroup_ng_template_2_button_5_Template_button_click_0_listener() { ɵɵrestoreView(_r42); const index_r14 = ɵɵnextContext().index; const ctx_r40 = ɵɵnextContext(); return ctx_r40.removeControl(index_r14); });
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r43 = ɵɵnextContext();
    const index_r14 = ctx_r43.index;
    const key_r16 = ctx_r43.key;
    const ctx_r21 = ɵɵnextContext();
    ɵɵproperty("disabled", !ctx_r21.disabledArray[index_r14].remove);
    ɵɵattribute("data-automation-id", "novo-control-group-delete-" + key_r16);
} }
function NovoControlGroup_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 15);
    ɵɵtemplate(1, NovoControlGroup_ng_template_2_div_1_Template, 2, 10, "div", 16);
    ɵɵtemplate(2, NovoControlGroup_ng_template_2_div_2_Template, 2, 1, "div", 17);
    ɵɵtemplate(3, NovoControlGroup_ng_template_2_div_3_Template, 2, 1, "div", 17);
    ɵɵelementEnd();
    ɵɵtemplate(4, NovoControlGroup_ng_template_2_button_4_Template, 1, 2, "button", 18);
    ɵɵtemplate(5, NovoControlGroup_ng_template_2_button_5_Template, 1, 2, "button", 19);
} if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r2.controls);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r2.edit && !ctx_r2.vertical);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r2.remove && !ctx_r2.vertical);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r2.edit && ctx_r2.vertical);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r2.remove && ctx_r2.vertical);
} }
function NovoControlGroup_ng_template_4_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div");
    ɵɵelementStart(1, "span");
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const label_r49 = ctx.$implicit;
    ɵɵclassMapInterpolate1("novo-control-group-control-label ", label_r49.key, "");
    ɵɵstyleProp("max-width", label_r49.width, "px");
    ɵɵclassProp("novo-control-group-control-hidden", label_r49.hidden)("column-required", label_r49.required);
    ɵɵadvance(1);
    ɵɵattribute("data-automation-id", "novo-control-group-label-" + label_r49.value);
    ɵɵadvance(1);
    ɵɵtextInterpolate(label_r49.value);
} }
function NovoControlGroup_ng_template_4_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "div", 26);
} if (rf & 2) {
    const key_r45 = ɵɵnextContext().key;
    ɵɵattribute("data-automation-id", "novo-control-group-edit-" + key_r45);
} }
function NovoControlGroup_ng_template_4_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "div", 26);
} if (rf & 2) {
    const key_r45 = ɵɵnextContext().key;
    ɵɵattribute("data-automation-id", "novo-control-group-delete-" + key_r45);
} }
function NovoControlGroup_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵtemplate(0, NovoControlGroup_ng_template_4_div_0_Template, 3, 11, "div", 24);
    ɵɵtemplate(1, NovoControlGroup_ng_template_4_div_1_Template, 1, 1, "div", 25);
    ɵɵtemplate(2, NovoControlGroup_ng_template_4_div_2_Template, 1, 1, "div", 25);
} if (rf & 2) {
    const ctx_r4 = ɵɵnextContext();
    ɵɵproperty("ngForOf", ctx_r4.controlLabels);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r4.edit);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r4.remove);
} }
function NovoControlGroup_ng_container_6_div_1_ng_template_1_Template(rf, ctx) { }
const _c0$11 = function (a0, a1, a2) { return { form: a0, key: a1, controlLabels: a2 }; };
function NovoControlGroup_ng_container_6_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 28);
    ɵɵtemplate(1, NovoControlGroup_ng_container_6_div_1_ng_template_1_Template, 0, 0, "ng-template", 29);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r52 = ɵɵnextContext(2);
    const _r3 = ɵɵreference(5);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", ctx_r52.columnLabelTemplate || _r3)("ngTemplateOutletContext", ɵɵpureFunction3(2, _c0$11, ctx_r52.form, ctx_r52.key, ctx_r52.controlLabels));
} }
function NovoControlGroup_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, NovoControlGroup_ng_container_6_div_1_Template, 2, 6, "div", 27);
    ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r5 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !ctx_r5.vertical && (ctx_r5.form == null ? null : ctx_r5.form.controls[ctx_r5.key]) && (ctx_r5.form == null ? null : ctx_r5.form.controls[ctx_r5.key]["controls"].length) !== 0);
} }
function NovoControlGroup_ng_container_7_div_1_ng_template_1_Template(rf, ctx) { }
const _c1$p = function (a0, a1, a2, a3, a4) { return { form: a0, formGroup: a1, index: a2, key: a3, controls: a4 }; };
function NovoControlGroup_ng_container_7_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 31);
    ɵɵtemplate(1, NovoControlGroup_ng_container_7_div_1_ng_template_1_Template, 0, 0, "ng-template", 29);
    ɵɵelementEnd();
} if (rf & 2) {
    const control_r55 = ctx.$implicit;
    const index_r56 = ctx.index;
    const ctx_r54 = ɵɵnextContext(2);
    const _r1 = ɵɵreference(3);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", ctx_r54.rowTemplate || _r1)("ngTemplateOutletContext", ɵɵpureFunction5(2, _c1$p, ctx_r54.form, control_r55, index_r56, ctx_r54.key, ctx_r54.controls));
} }
function NovoControlGroup_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, NovoControlGroup_ng_container_7_div_1_Template, 2, 8, "div", 30);
    ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r6 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r6.form == null ? null : ctx_r6.form.controls[ctx_r6.key]["controls"]);
} }
function NovoControlGroup_div_8_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 32);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵɵnextContext();
    ɵɵattribute("data-automation-id", "novo-control-group-empty-" + ctx_r7.key);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r7.emptyMessage, " ");
} }
function NovoControlGroup_div_9_Template(rf, ctx) { if (rf & 1) {
    const _r59 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 33);
    ɵɵelementStart(1, "button", 34);
    ɵɵlistener("click", function NovoControlGroup_div_9_Template_button_click_1_listener() { ɵɵrestoreView(_r59); const ctx_r58 = ɵɵnextContext(); return ctx_r58.onClickAdd(); });
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r8 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵattribute("data-automation-id", "novo-control-group-bottom-add-" + ctx_r8.key);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r8.add == null ? null : ctx_r8.add.label, " ");
} }
var EditState;
(function (EditState) {
    EditState["EDITING"] = "editing";
    EditState["NOT_EDITING"] = "notediting";
})(EditState || (EditState = {}));
class NovoControlGroup {
    constructor(formUtils, fb, ref, labels) {
        this.formUtils = formUtils;
        this.fb = fb;
        this.ref = ref;
        this.labels = labels;
        this._vertical = false;
        this._stacked = false;
        this._remove = false;
        this._edit = false;
        this._collapsible = false;
        this.onRemove = new EventEmitter();
        this.onEdit = new EventEmitter();
        this.onAdd = new EventEmitter();
        this.change = new EventEmitter();
        this.controlLabels = [];
        this.toggled = false;
        this.disabledArray = [];
        this.editState = EditState.NOT_EDITING;
        this.currentIndex = 0;
    }
    // Sets the display of the group to either be row (default) or vertical via flex-box
    set vertical(v) {
        this._vertical = coerceBooleanProperty(v);
    }
    get vertical() {
        return this._vertical;
    }
    set stacked(v) {
        this._stacked = coerceBooleanProperty(v);
    }
    get stacked() {
        return this._stacked;
    }
    // Hide/shows the remove button for removing a control
    set remove(v) {
        this._remove = coerceBooleanProperty(v);
    }
    get remove() {
        return this._remove;
    }
    // Hide/shows the edit button for editing a control
    set edit(v) {
        this._edit = coerceBooleanProperty(v);
    }
    get edit() {
        return this._edit;
    }
    // Allows the control to collapse or not
    set collapsible(v) {
        this._collapsible = coerceBooleanProperty(v);
    }
    get collapsible() {
        return this._collapsible;
    }
    // Icon of the control group (can have bhi prefix or not)
    set icon(v) {
        this._icon = v && v.indexOf('bhi') !== -1 ? v : `bhi-${v}`;
    }
    get icon() {
        return this._icon;
    }
    ngAfterContentInit() {
        if (!this.key) {
            throw new Error('novo-control-group must have the [key] attribute provided!');
        }
    }
    ngOnChanges(changes) {
        const initialValueChange = changes.initialValue;
        // If initial value changes, clear the controls
        if (initialValueChange && initialValueChange.currentValue !== initialValueChange.previousValue && !initialValueChange.firstChange) {
            this.clearControls();
        }
        // Check for array, add a control for each value
        if (this.initialValue && Array.isArray(this.initialValue)) {
            if (this.initialValue.length !== 0) {
                this.currentIndex = 0;
                this.initialValue.forEach((value) => this.addNewControl(value));
            }
        }
        else if (this.initialValue) {
            // If value is an object, just add one control
            this.addNewControl(this.initialValue);
        }
        // If we are horizontal, grab the labels to help with layout
        if (!this.vertical) {
            this.controlLabels = (this.controls || []).map((control) => {
                return {
                    value: control.label,
                    width: control.width,
                    required: control.required,
                    key: control.key,
                    hidden: control.hidden,
                };
            });
            this.ref.markForCheck();
        }
    }
    onChange(change) {
        this.change.emit(this);
    }
    onClickAdd() {
        this.addNewControl();
        // this.editState = EditState.EDITING;
    }
    onClickCancel() {
        this.editState = EditState.NOT_EDITING;
    }
    onClickSave() {
        this.disabledArray[this.currentIndex - 1].state = EditState.NOT_EDITING;
        this.editState = EditState.NOT_EDITING;
        const control = this.form.controls[this.key];
        if (control) {
            const fg = control.at(this.currentIndex - 1);
            fg.disableAllControls();
        }
    }
    resetAddRemove() {
        this.disabledArray.forEach((item, idx) => {
            item.edit = this.checkCanEdit(idx);
            item.remove = this.checkCanRemove(idx);
            if (!item.edit) {
                item.state = EditState.NOT_EDITING;
            }
        });
        this.ref.markForCheck();
    }
    addNewControl(value) {
        const control = this.form.controls[this.key];
        const newCtrl = this.buildControl(value);
        if (control) {
            control.push(newCtrl);
        }
        else {
            this.form.addControl(this.key, this.fb.array([newCtrl]));
        }
        this.disabledArray.push({
            state: EditState.EDITING,
            edit: true,
            remove: true,
        });
        this.resetAddRemove();
        if (!value) {
            this.onAdd.emit(newCtrl);
        }
        this.currentIndex++;
        this.ref.markForCheck();
    }
    buildControl(value) {
        const newControls = this.getNewControls(this.controls);
        if (value) {
            this.formUtils.setInitialValues(newControls, value);
        }
        const ctrl = this.formUtils.toFormGroup(newControls);
        return ctrl;
    }
    removeControl(index, emitEvent = true) {
        const control = this.form.controls[this.key];
        if (emitEvent) {
            this.onRemove.emit({ value: control.at(index).value, index });
        }
        control.removeAt(index);
        this.disabledArray = this.disabledArray.filter((value, idx) => idx !== index);
        this.resetAddRemove();
        this.currentIndex--;
        this.ref.markForCheck();
    }
    editControl(index) {
        const control = this.form.controls[this.key];
        const fg = control.at(index);
        fg.enableAllControls();
        this.onEdit.emit({ value: control.at(index).value, index });
    }
    toggle(event) {
        Helpers.swallowEvent(event);
        if (this.collapsible) {
            this.toggled = !this.toggled;
            this.ref.markForCheck();
        }
    }
    clearControls() {
        const control = this.form.controls[this.key];
        if (control) {
            for (let i = control.controls.length; i >= 0; i--) {
                this.removeControl(i, false);
            }
            this.currentIndex = 0;
        }
    }
    checkCanEdit(index) {
        if (this.canEdit) {
            const control = this.form.controls[this.key];
            return this.canEdit(control.at(index).value, index);
        }
        return true;
    }
    checkCanRemove(index) {
        if (this.canRemove) {
            const control = this.form.controls[this.key];
            if (control.at(index)) {
                return this.canRemove(control.at(index).value, index);
            }
            return true;
        }
        return true;
    }
    getNewControls(controls) {
        const ret = [];
        (this.controls || []).forEach((control) => {
            ret.push(new BaseControl(control.__type, control));
        });
        return ret;
    }
}
NovoControlGroup.ɵfac = function NovoControlGroup_Factory(t) { return new (t || NovoControlGroup)(ɵɵdirectiveInject(FormUtils), ɵɵdirectiveInject(FormBuilder), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(NovoLabelService)); };
NovoControlGroup.ɵcmp = ɵɵdefineComponent({ type: NovoControlGroup, selectors: [["novo-control-group"]], inputs: { vertical: "vertical", stacked: "stacked", add: "add", remove: "remove", edit: "edit", collapsible: "collapsible", form: "form", controls: "controls", key: "key", label: "label", description: "description", emptyMessage: "emptyMessage", icon: "icon", initialValue: "initialValue", canEdit: "canEdit", canRemove: "canRemove", rowTemplate: "rowTemplate", columnLabelTemplate: "columnLabelTemplate" }, outputs: { onRemove: "onRemove", onEdit: "onEdit", onAdd: "onAdd", change: "change" }, features: [ɵɵNgOnChangesFeature], decls: 10, vars: 11, consts: [["class", "novo-section-header", 4, "ngIf"], [1, "novo-control-group-controls"], ["defaultTemplate", ""], ["defaultColumnLabelTemplate", ""], [4, "ngIf"], ["class", "novo-control-group-empty", 4, "ngIf"], ["class", "novo-control-group-footer", 4, "ngIf"], [1, "novo-section-header"], [3, "click"], [3, "ngClass", 4, "ngIf"], ["class", "bhi-next", 3, "toggled", 4, "ngIf"], ["class", "novo-control-group-description", 4, "ngIf"], [3, "ngClass"], [1, "bhi-next"], [1, "novo-control-group-description"], [1, "novo-control-group-control"], [3, "class", "is-label", "max-width", 4, "ngFor", "ngForOf"], ["class", "novo-control-container last", 4, "ngIf"], ["class", "control-group-action", "type", "button", "theme", "icon", "icon", "edit", "index", "-1", 3, "disabled", "click", 4, "ngIf"], ["class", "control-group-action", "type", "button", "theme", "icon", "icon", "delete-o", "index", "-1", 3, "disabled", "click", 4, "ngIf"], [3, "form", "control", "condensed", "change"], [1, "novo-control-container", "last"], ["type", "button", "theme", "icon", "icon", "edit", "index", "-1", 1, "control-group-action", 3, "disabled", "click"], ["type", "button", "theme", "icon", "icon", "delete-o", "index", "-1", 1, "control-group-action", 3, "disabled", "click"], [3, "class", "novo-control-group-control-hidden", "max-width", "column-required", 4, "ngFor", "ngForOf"], ["class", "novo-control-group-control-label last", 4, "ngIf"], [1, "novo-control-group-control-label", "last"], ["class", "novo-control-group-labels", 4, "ngIf"], [1, "novo-control-group-labels"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], ["class", "novo-control-group-row", 4, "ngFor", "ngForOf"], [1, "novo-control-group-row"], [1, "novo-control-group-empty"], [1, "novo-control-group-footer"], ["type", "button", "theme", "dialogue", "icon", "add-thin", "side", "left", "index", "-1", 3, "click"]], template: function NovoControlGroup_Template(rf, ctx) { if (rf & 1) {
        ɵɵtemplate(0, NovoControlGroup_h6_0_Template, 7, 7, "h6", 0);
        ɵɵelementStart(1, "div", 1);
        ɵɵtemplate(2, NovoControlGroup_ng_template_2_Template, 6, 5, "ng-template", null, 2, ɵɵtemplateRefExtractor);
        ɵɵtemplate(4, NovoControlGroup_ng_template_4_Template, 3, 3, "ng-template", null, 3, ɵɵtemplateRefExtractor);
        ɵɵtemplate(6, NovoControlGroup_ng_container_6_Template, 2, 1, "ng-container", 4);
        ɵɵtemplate(7, NovoControlGroup_ng_container_7_Template, 2, 1, "ng-container", 4);
        ɵɵtemplate(8, NovoControlGroup_div_8_Template, 2, 2, "div", 5);
        ɵɵtemplate(9, NovoControlGroup_div_9_Template, 3, 2, "div", 6);
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵproperty("ngIf", ctx.label);
        ɵɵadvance(1);
        ɵɵclassProp("vertical", ctx.vertical)("horizontal", !ctx.vertical)("hidden", ctx.collapsible && !ctx.toggled);
        ɵɵadvance(5);
        ɵɵproperty("ngIf", !ctx.vertical && (ctx.form == null ? null : ctx.form.controls[ctx.key]) && (ctx.form == null ? null : ctx.form.controls[ctx.key]["controls"].length) !== 0);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.form == null ? null : ctx.form.controls[ctx.key]);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", (ctx.form == null ? null : ctx.form.controls[ctx.key]) && (ctx.form == null ? null : ctx.form.controls[ctx.key]["controls"].length) === 0);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.add);
    } }, encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoControlGroup, [{
        type: Component,
        args: [{
                selector: 'novo-control-group',
                templateUrl: './ControlGroup.html',
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: FormUtils }, { type: FormBuilder }, { type: ChangeDetectorRef }, { type: NovoLabelService }]; }, { vertical: [{
            type: Input
        }], stacked: [{
            type: Input
        }], add: [{
            type: Input
        }], remove: [{
            type: Input
        }], edit: [{
            type: Input
        }], collapsible: [{
            type: Input
        }], form: [{
            type: Input
        }], controls: [{
            type: Input
        }], key: [{
            type: Input
        }], label: [{
            type: Input
        }], description: [{
            type: Input
        }], emptyMessage: [{
            type: Input
        }], icon: [{
            type: Input
        }], initialValue: [{
            type: Input
        }], canEdit: [{
            type: Input
        }], canRemove: [{
            type: Input
        }], rowTemplate: [{
            type: Input
        }], columnLabelTemplate: [{
            type: Input
        }], onRemove: [{
            type: Output
        }], onEdit: [{
            type: Output
        }], onAdd: [{
            type: Output
        }], change: [{
            type: Output
        }] }); })();

const NOVO_RADIO_GROUP = new InjectionToken('RadioGroupComponent');

// NG2
const _c0$12 = function (a0, a1, a2) { return { unchecked: a0, checked: a1, "has-icon": a2 }; };
function NovoRadioElement_button_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "button", 3);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵproperty("ngClass", ɵɵpureFunction3(6, _c0$12, !ctx_r0.checked, ctx_r0.checked, !!ctx_r0.icon))("theme", ctx_r0.theme)("color", ctx_r0.checked ? ctx_r0.color : null)("icon", ctx_r0.icon)("size", ctx_r0.size);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r0.label, " ");
} }
const _c1$q = function (a0, a1) { return { "bhi-radio-empty": a0, "bhi-radio-filled": a1 }; };
function NovoRadioElement_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 4);
    ɵɵelement(1, "i", 5);
    ɵɵtext(2);
    ɵɵprojection(3);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngClass", ɵɵpureFunction2(2, _c1$q, !ctx_r1.checked, ctx_r1.checked));
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r1.label, " ");
} }
const _c2$b = ["*"];
// make radio-buttons ids unique
let nextId$1 = 0;
// Value accessor for the component (supports ngModel)
const RADIO_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoRadioElement),
    multi: true,
};
class NovoRadioElement {
    constructor(radioGroup, ref) {
        this.radioGroup = radioGroup;
        this.ref = ref;
        this._uniqueId = `novo-radio-${++nextId$1}`;
        this.id = this._uniqueId;
        this.name = this._uniqueId;
        this.tabindex = 0;
        this.button = false;
        this.theme = 'secondary';
        this.change = new EventEmitter();
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this._checked = false;
        this._value = false;
        this._disabled = false;
        this.onChangeCallback = (_) => {
            // placeholder
        };
        this.onTouchedCallback = () => {
            // placeholder
        };
        this.radioGroup = radioGroup;
    }
    get checked() {
        return this._checked;
    }
    set checked(value) {
        value = !!value;
        if (this._checked !== value) {
            this._checked = value;
            if (this._checked && this.radioGroup && this.radioGroup.value !== this.value) {
                this.radioGroup.value = this.value;
            }
            this.onChangeCallback(this._value);
        }
    }
    get value() {
        return this._value;
    }
    set value(value) {
        if (this.value !== value) {
            this._value = value;
            if (this.radioGroup) {
                this._checked = this.radioGroup.value === this.value;
            }
            this.onChangeCallback(this._value);
        }
    }
    // Disabled State
    get disabled() {
        return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);
    }
    set disabled(value) {
        this._disabled = !!value;
    }
    ngOnInit() {
        if (this.radioGroup) {
            this.checked = this.radioGroup.value === this._value;
            this.name = this.radioGroup.name;
        }
    }
    _onInputChange(event) {
        event.stopPropagation();
        this.change.emit(event);
        this.checked = true;
        if (this.radioGroup) {
            this.radioGroup.value = this.value;
        }
    }
    writeValue(value) {
        this.value = value;
        this.ref.markForCheck();
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    setDisabledState(disabled) {
        this.disabled = disabled;
    }
}
NovoRadioElement.ɵfac = function NovoRadioElement_Factory(t) { return new (t || NovoRadioElement)(ɵɵdirectiveInject(NOVO_RADIO_GROUP, 8), ɵɵdirectiveInject(ChangeDetectorRef)); };
NovoRadioElement.ɵcmp = ɵɵdefineComponent({ type: NovoRadioElement, selectors: [["novo-radio"]], hostVars: 4, hostBindings: function NovoRadioElement_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵclassProp("vertical", ctx.vertical)("disabled", ctx.disabled);
    } }, inputs: { id: "id", name: "name", tabindex: "tabindex", vertical: "vertical", label: "label", button: "button", theme: "theme", size: "size", icon: "icon", color: "color", checked: "checked", value: "value", disabled: "disabled" }, outputs: { change: "change", blur: "blur", focus: "focus" }, features: [ɵɵProvidersFeature([RADIO_VALUE_ACCESSOR])], ngContentSelectors: _c2$b, decls: 4, vars: 10, consts: [["type", "radio", 3, "id", "name", "checked", "tabIndex", "disabled", "focus", "blur", "change"], [3, "ngClass", "theme", "color", "icon", "size", 4, "ngIf"], ["class", "novo-radio-button-label", 4, "ngIf"], [3, "ngClass", "theme", "color", "icon", "size"], [1, "novo-radio-button-label"], [3, "ngClass"]], template: function NovoRadioElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵelementStart(0, "input", 0);
        ɵɵlistener("focus", function NovoRadioElement_Template_input_focus_0_listener($event) { return ctx.focus.emit($event); })("blur", function NovoRadioElement_Template_input_blur_0_listener($event) { return ctx.blur.emit($event); })("change", function NovoRadioElement_Template_input_change_0_listener($event) { return ctx._onInputChange($event); });
        ɵɵelementEnd();
        ɵɵelementStart(1, "label");
        ɵɵtemplate(2, NovoRadioElement_button_2_Template, 2, 10, "button", 1);
        ɵɵtemplate(3, NovoRadioElement_div_3_Template, 4, 5, "div", 2);
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵproperty("id", ctx.id)("name", ctx.name)("checked", ctx.checked)("tabIndex", ctx.tabindex)("disabled", ctx.disabled);
        ɵɵadvance(1);
        ɵɵclassProp("disabled", ctx.disabled);
        ɵɵattribute("for", ctx.id);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.button);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", !ctx.button);
    } }, directives: [NgIf, NovoButtonElement, NgClass], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoRadioElement, [{
        type: Component,
        args: [{
                selector: 'novo-radio',
                providers: [RADIO_VALUE_ACCESSOR],
                template: `
    <input
      type="radio"
      [id]="id"
      [name]="name"
      [checked]="checked"
      [tabIndex]="tabindex"
      [disabled]="disabled"
      (focus)="focus.emit($event)"
      (blur)="blur.emit($event)"
      (change)="_onInputChange($event)"
    />
    <label [attr.for]="id" [class.disabled]="disabled">
      <button
        *ngIf="button"
        [ngClass]="{ unchecked: !checked, checked: checked, 'has-icon': !!icon }"
        [theme]="theme"
        [color]="checked ? color : null"
        [icon]="icon"
        [size]="size"
      >
        {{ label }}
      </button>
      <div *ngIf="!button" class="novo-radio-button-label">
        <i [ngClass]="{ 'bhi-radio-empty': !checked, 'bhi-radio-filled': checked }"></i>
        {{ label }}
        <ng-content></ng-content>
      </div>
    </label>
  `,
                host: {
                    '[class.vertical]': 'vertical',
                },
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [NOVO_RADIO_GROUP]
            }, {
                type: Optional
            }] }, { type: ChangeDetectorRef }]; }, { id: [{
            type: Input
        }], name: [{
            type: Input
        }], tabindex: [{
            type: Input
        }], vertical: [{
            type: Input
        }], label: [{
            type: Input
        }], button: [{
            type: Input
        }], theme: [{
            type: Input
        }], size: [{
            type: Input
        }], icon: [{
            type: Input
        }], color: [{
            type: Input
        }], change: [{
            type: Output
        }], blur: [{
            type: Output
        }], focus: [{
            type: Output
        }], checked: [{
            type: Input
        }], value: [{
            type: Input
        }], disabled: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['class.disabled']
        }] }); })();

const _c0$13 = ["*"];
// make radio-button-group ids unique
let nextId$2 = 0;
// Value accessor for the component (supports ngModel)
const RADIOGROUP_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoRadioGroup),
    multi: true,
};
// Boilerplate for applying mixins
class NovoRadioGroupBase {
    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {
        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        this.ngControl = ngControl;
    }
}
const NovoRadioGroupMixins = mixinErrorState(NovoRadioGroupBase);
class NovoRadioGroup extends NovoRadioGroupMixins {
    constructor() {
        super(...arguments);
        this._uniqueId = `ngx-radio-group-${++nextId$2}`;
        /** Tab index for the chip list. */
        this._tabIndex = 0;
        /** User defined tab index. */
        this._userTabIndex = null;
        this.id = this._uniqueId;
        this.tabindex = 0;
        this.change = new EventEmitter();
        this.blur = new EventEmitter();
        this._name = this._uniqueId;
        this._value = false;
        this._required = false;
        this._disabled = false;
        this._appearance = 'horizontal';
        this.onChangeCallback = (_) => {
            // placeholder
        };
        this.onTouchedCallback = () => {
            // placeholder
        };
    }
    get appearance() {
        return this._appearance;
    }
    set appearance(value) {
        if (this._appearance !== value) {
            this._appearance = value;
            this._updateRadioButtonAppearance();
        }
    }
    get value() {
        return this._value;
    }
    set value(value) {
        if (this._value !== value) {
            this._value = value;
            this._updateSelectedRadioFromValue();
            this.onChangeCallback(this._value);
        }
    }
    get name() {
        return this._name;
    }
    set name(value) {
        if (this._name !== value) {
            this._updateRadioButtonNames();
        }
    }
    get disabled() {
        return this.ngControl ? !!this.ngControl.disabled : this._disabled;
    }
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
        this._updateRadioButtonDisabled();
    }
    /**
     * Implemented as part of NovoFieldControl.
     * @docs-private
     */
    get required() {
        return this._required;
    }
    set required(value) {
        this._required = coerceBooleanProperty(value);
        this.stateChanges.next();
    }
    /** Implemented as part of NovoFieldControl. */
    get placeholder() {
        return this._placeholder;
    }
    set placeholder(value) {
        this._placeholder = value;
    }
    get selected() {
        return this._selected;
    }
    ngAfterContentInit() {
        this._updateRadioButtonAppearance();
        this._updateRadioButtonNames();
        this._updateSelectedRadioFromValue();
    }
    writeValue(value) {
        this.value = value;
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    _updateRadioButtonAppearance() {
        if (this._radios) {
            this._radios.forEach((radio) => {
                radio.vertical = this.appearance === 'vertical';
            });
        }
    }
    _updateRadioButtonNames() {
        if (this._radios) {
            this._radios.forEach((radio) => {
                radio.name = this.name;
            });
        }
    }
    _updateRadioButtonDisabled() {
        if (this._radios) {
            this._radios.forEach((radio) => {
                radio.disabled = this.disabled;
            });
        }
    }
    _updateSelectedRadioFromValue() {
        if (this._radios) {
            this._radios.forEach((radio) => {
                radio.checked = this.value === radio.value;
                if (radio.checked) {
                    this._selected = radio;
                }
            });
        }
    }
    /** Whether any radio buttons has focus. */
    get focused() {
        // todo: implement this.
        return false;
    }
    /** Implemented as part of NovoFieldControl. */
    get empty() {
        return this.value === null;
    }
    /** Implemented as part of NovoFieldControl. */
    get shouldLabelFloat() {
        return !this.empty || this.focused;
    }
    /** Implemented as part of NovoFieldControl. */
    setDescribedByIds(ids) {
        this._ariaDescribedby = ids.join(' ');
    }
    /** Implemented as part of NovoFieldControl. */
    onContainerClick(event) {
        this.focus();
    }
    /**
     * Focuses the first non-disabled chip in this chip list, or the associated input when there
     * are no eligible chips.
     */
    focus(options) {
        if (this.disabled) {
            return;
        }
        // TODO
    }
}
NovoRadioGroup.ɵfac = function NovoRadioGroup_Factory(t) { return ɵNovoRadioGroup_BaseFactory(t || NovoRadioGroup); };
NovoRadioGroup.ɵcmp = ɵɵdefineComponent({ type: NovoRadioGroup, selectors: [["novo-radio-group"]], contentQueries: function NovoRadioGroup_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵɵcontentQuery(dirIndex, NovoRadioElement, true);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx._radios = _t);
    } }, hostAttrs: [1, "novo-radio-group"], hostVars: 6, hostBindings: function NovoRadioGroup_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵclassProp("novo-radio-group-appearance-horizontal", ctx.appearance == "horizontal")("novo-radio-group-appearance-vertical", ctx.appearance == "vertical")("disabled", ctx.disabled);
    } }, inputs: { id: "id", tabindex: "tabindex", errorStateMatcher: "errorStateMatcher", appearance: "appearance", value: "value", name: "name", disabled: "disabled", required: "required", placeholder: "placeholder" }, outputs: { change: "change", blur: "blur" }, features: [ɵɵProvidersFeature([
            RADIOGROUP_VALUE_ACCESSOR,
            { provide: NOVO_RADIO_GROUP, useExisting: NovoRadioGroup },
            { provide: NovoFieldControl, useExisting: NovoRadioGroup },
        ]), ɵɵInheritDefinitionFeature], ngContentSelectors: _c0$13, decls: 1, vars: 0, template: function NovoRadioGroup_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵprojection(0);
    } }, encapsulation: 2 });
const ɵNovoRadioGroup_BaseFactory = /*@__PURE__*/ ɵɵgetInheritedFactory(NovoRadioGroup);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoRadioGroup, [{
        type: Component,
        args: [{
                selector: 'novo-radio-group',
                providers: [
                    RADIOGROUP_VALUE_ACCESSOR,
                    { provide: NOVO_RADIO_GROUP, useExisting: NovoRadioGroup },
                    { provide: NovoFieldControl, useExisting: NovoRadioGroup },
                ],
                template: '<ng-content></ng-content>',
                host: {
                    class: 'novo-radio-group',
                    '[class.novo-radio-group-appearance-horizontal]': 'appearance=="horizontal"',
                    '[class.novo-radio-group-appearance-vertical]': 'appearance=="vertical"',
                },
            }]
    }], null, { id: [{
            type: Input
        }], tabindex: [{
            type: Input
        }], errorStateMatcher: [{
            type: Input
        }], change: [{
            type: Output
        }], blur: [{
            type: Output
        }], _radios: [{
            type: ContentChildren,
            args: [forwardRef(() => NovoRadioElement), { descendants: true }]
        }], appearance: [{
            type: Input
        }], value: [{
            type: Input
        }], name: [{
            type: Input
        }], disabled: [{
            type: HostBinding,
            args: ['class.disabled']
        }, {
            type: Input
        }], required: [{
            type: Input
        }], placeholder: [{
            type: Input
        }] }); })();

// NG2
function QuickNoteResults_novo_loading_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-loading", 4);
} }
function QuickNoteResults_novo_list_1_novo_list_item_1_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-list-item", 6);
    ɵɵlistener("click", function QuickNoteResults_novo_list_1_novo_list_item_1_Template_novo_list_item_click_0_listener($event) { ɵɵrestoreView(_r7); const ctx_r6 = ɵɵnextContext(2); return ctx_r6.selectMatch($event); })("mouseenter", function QuickNoteResults_novo_list_1_novo_list_item_1_Template_novo_list_item_mouseenter_0_listener() { ɵɵrestoreView(_r7); const match_r5 = ctx.$implicit; const ctx_r8 = ɵɵnextContext(2); return ctx_r8.selectActive(match_r5); });
    ɵɵelementStart(1, "item-content");
    ɵɵelement(2, "p", 7);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const match_r5 = ctx.$implicit;
    const ctx_r4 = ɵɵnextContext(2);
    ɵɵclassProp("active", match_r5 === ctx_r4.activeMatch);
    ɵɵadvance(2);
    ɵɵproperty("innerHtml", ctx_r4.highlight(match_r5.label, ctx_r4.term), ɵɵsanitizeHtml);
} }
function QuickNoteResults_novo_list_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-list");
    ɵɵtemplate(1, QuickNoteResults_novo_list_1_novo_list_item_1_Template, 3, 3, "novo-list-item", 5);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r1.matches);
} }
function QuickNoteResults_p_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 8);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r2.labels.quickNoteError);
} }
function QuickNoteResults_p_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 9);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r3.labels.quickNoteEmpty);
} }
class QuickNoteResults extends PickerResults {
    constructor(element, labels, ref) {
        super(element, labels, ref);
        this.labels = labels;
        // Mode that the quick note is in for tagging
        this.taggingMode = '';
    }
    get term() {
        return this._term;
    }
    set term(value) {
        this._term = value.searchTerm;
        this.taggingMode = value.taggingMode;
        this.hasError = false;
        this.isLoading = true;
        this.search(value, this.taggingMode).subscribe((results) => {
            this.matches = this.isStatic ? this.filterData(results) : results;
            this.isLoading = false;
        }, () => {
            this.hasError = true;
            this.isLoading = false;
        });
    }
    search(term, taggingMode) {
        const searchCall = this.config.options[taggingMode];
        return from(new Promise((resolve, reject) => {
            // Check if there is match data
            if (searchCall) {
                // Resolve the data
                if (Array.isArray(searchCall)) {
                    this.isStatic = true;
                    // Arrays are returned immediately
                    resolve(this.structureArray(searchCall));
                }
                else if ((searchCall.hasOwnProperty('reject') && searchCall.hasOwnProperty('resolve')) ||
                    Object.getPrototypeOf(searchCall).hasOwnProperty('then')) {
                    this.isStatic = false;
                    // Promises (ES6 or Deferred) are resolved whenever they resolve
                    searchCall.then(this.structureArray.bind(this)).then(resolve, reject);
                }
                else if (typeof searchCall === 'function') {
                    this.isStatic = false;
                    // Promises (ES6 or Deferred) are resolved whenever they resolve
                    searchCall(term).then(this.structureArray.bind(this)).then(resolve, reject);
                }
                else {
                    // All other kinds of data are rejected
                    reject('The data provided is not an array or a promise');
                    throw new Error('The data provided is not an array or a promise');
                }
            }
            else {
                // No data gets rejected
                reject('error');
            }
        }));
    }
    /**
     * @name structureArray
     * @param collection - the data once getData resolves it
     *
     * @description This function structures an array of nodes into an array of objects with a
     * 'name' field by default.
     */
    structureArray(collection) {
        if (collection && (typeof collection[0] === 'string' || typeof collection[0] === 'number')) {
            return collection.map((item) => {
                return {
                    value: item,
                    label: item,
                };
            });
        }
        return collection.map((data) => {
            const value = this.config.field ? data[this.config.field[this.taggingMode]] : data.value || data;
            const label = this.config.format ? Helpers.interpolate(this.config.format[this.taggingMode], data) : data.label || String(value);
            return { value, label, data };
        });
    }
    /**
     * @name selectMatch
     * @param event
     *
     * @description
     */
    selectMatch(event) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        const selected = this.activeMatch;
        if (selected) {
            this.parent.onSelected(this.taggingMode, selected);
            this.parent.hideResults();
        }
        return false;
    }
}
QuickNoteResults.ɵfac = function QuickNoteResults_Factory(t) { return new (t || QuickNoteResults)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(ChangeDetectorRef)); };
QuickNoteResults.ɵcmp = ɵɵdefineComponent({ type: QuickNoteResults, selectors: [["quick-note-results"]], hostAttrs: [1, "active"], features: [ɵɵInheritDefinitionFeature], decls: 4, vars: 4, consts: [["theme", "line", 4, "ngIf"], [4, "ngIf"], ["class", "picker-error", 4, "ngIf"], ["class", "picker-null", 4, "ngIf"], ["theme", "line"], [3, "active", "click", "mouseenter", 4, "ngFor", "ngForOf"], [3, "click", "mouseenter"], [3, "innerHtml"], [1, "picker-error"], [1, "picker-null"]], template: function QuickNoteResults_Template(rf, ctx) { if (rf & 1) {
        ɵɵtemplate(0, QuickNoteResults_novo_loading_0_Template, 1, 0, "novo-loading", 0);
        ɵɵtemplate(1, QuickNoteResults_novo_list_1_Template, 2, 1, "novo-list", 1);
        ɵɵtemplate(2, QuickNoteResults_p_2_Template, 2, 1, "p", 2);
        ɵɵtemplate(3, QuickNoteResults_p_3_Template, 2, 1, "p", 3);
    } if (rf & 2) {
        ɵɵproperty("ngIf", ctx.isLoading && !ctx.matches.length);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.matches.length > 0);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.hasError);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", !ctx.isLoading && !ctx.matches.length && !ctx.hasError);
    } }, directives: [NgIf, NovoLoadingElement, NovoListElement, NgForOf, NovoListItemElement, NovoItemContentElement], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(QuickNoteResults, [{
        type: Component,
        args: [{
                selector: 'quick-note-results',
                host: {
                    class: 'active',
                },
                template: `
    <novo-loading theme="line" *ngIf="isLoading && !matches.length"></novo-loading>
    <novo-list *ngIf="matches.length > 0">
      <novo-list-item
        *ngFor="let match of matches"
        (click)="selectMatch($event)"
        [class.active]="match === activeMatch"
        (mouseenter)="selectActive(match)"
      >
        <item-content>
          <p [innerHtml]="highlight(match.label, term)"></p>
        </item-content>
      </novo-list-item>
    </novo-list>
    <p class="picker-error" *ngIf="hasError">{{ labels.quickNoteError }}</p>
    <p class="picker-null" *ngIf="!isLoading && !matches.length && !hasError">{{ labels.quickNoteEmpty }}</p>
  `,
            }]
    }], function () { return [{ type: ElementRef }, { type: NovoLabelService }, { type: ChangeDetectorRef }]; }, null); })();

// NG2
const _c0$14 = ["wrapper"];
const _c1$r = ["host"];
const _c2$c = ["results"];
// Value accessor for the component (supports ngModel)
const QUICK_NOTE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => QuickNoteElement),
    multi: true,
};
class QuickNoteElement extends OutsideClick {
    constructor(zone, element, componentUtils) {
        super(element);
        this.zone = zone;
        this.componentUtils = componentUtils;
        this.startupFocus = false;
        // Emitter for selects
        this.focus = new EventEmitter();
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.placeholderVisible = false;
        this._placeholderElement = null;
        this.onModelChange = () => { };
        this.onModelTouched = () => { };
        // Bind to the active change event from the OutsideClick
        this.onActiveChange.subscribe((active) => {
            if (!active) {
                setTimeout(() => {
                    this.hideResults();
                });
            }
        });
    }
    ngOnInit() {
        // Make sure we have a proper config
        if (!this.config) {
            throw new Error('No config set for QuickNote!');
        }
        // Make sure that we have triggers
        if (!this.config.triggers) {
            throw new Error('QuickNote config must supply triggers!');
        }
        // Make sure that we have options
        if (!this.config.options) {
            throw new Error('QuickNote config must supply options!');
        }
        // Allow for callers to use a custom results template class in the config
        this.resultsComponent = this.config.resultsTemplate || QuickNoteResults;
    }
    ngOnDestroy() {
        // Tear down the CKEditor instance
        if (this.ckeInstance) {
            this.ckeInstance.focusManager.blur(true); // Remove focus from editor
            setTimeout(() => {
                this.ckeInstance.removeAllListeners();
                CKEDITOR.instances[this.ckeInstance.name].destroy();
                this.ckeInstance.destroy();
                this.ckeInstance = null;
            });
        }
    }
    /**
     * Connect to key/mouse events from CKEditor after the editor has been initialized
     */
    ngAfterViewInit() {
        if (!CKEDITOR) {
            console.error('Make sure to include CKEditor sources in your dependencies!');
            return;
        }
        // Replace the textarea with an instance of CKEditor
        this.ckeInstance = CKEDITOR.replace(this.host.nativeElement, this.getCKEditorConfig());
        // Set initial value of the note in the editor
        this.writeValue(this.model);
        // Connect to the key event in CKEditor for showing results dropdown
        this.ckeInstance.on('key', (event) => {
            if (!this.onKey(event.data.domEvent.$)) {
                event.cancel();
            }
        });
        // Connect to the change event in CKEditor for debouncing user modifications
        this.ckeInstance.on('change', () => {
            // Debounce update
            if (this.debounceTimeout) {
                clearTimeout(this.debounceTimeout);
            }
            this.debounceTimeout = setTimeout(() => {
                // Run within the context of this angular element since we don't need to cancel event
                this.zone.run(() => {
                    this.onValueChange();
                });
                this.debounceTimeout = null;
            }, 250);
        });
        // Propagate blur events from CKEditor to the Element's listeners
        this.ckeInstance.on('blur', (event) => {
            this.showPlaceholder();
            this.blur.emit(event);
        });
        // Propagate blur events from CKEditor to the Element's listeners
        this.ckeInstance.on('focus', (event) => {
            this.hidePlaceholder();
            this.focus.emit(event);
        });
        // Show placeholder if the note is empty, after the editor is instantiated
        this.ckeInstance.on('instanceReady', (event) => {
            this.showPlaceholder();
            // Set editor to readOnly
            if (this.config.readOnly) {
                this.ckeInstance.setReadOnly(this.config.readOnly);
            }
        });
    }
    // Set touched on blur
    onTouched(event) {
        this.onModelTouched();
    }
    /**
     * Handles setting the model and the view from the outside caller or the user's typing
     *
     * @param model A model that has a note (html content) and references (array of objects)
     */
    writeValue(model) {
        // Set value of the model
        if (model && (model.references || model.note)) {
            this.model = {
                note: model.note || '',
                references: model.references || {},
            };
        }
        else {
            this.model = {
                note: model,
                references: {},
            };
        }
        // Set the note html value in the editor
        if (this.ckeInstance) {
            this.ckeInstance.setData(this.model.note);
        }
    }
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    /**
     * If a renderer is not provided, the QuickNote will default to using this one, an anchor tag with no href
     */
    static defaultRenderer(symbol, item) {
        return `<a>${symbol}${item.label}</a>`;
    }
    /**
     * Returns the renderer for a given tagging mode if it exists in the config, otherwise the default.
     */
    getRenderer(taggingMode) {
        return this.config.renderer ? this.config.renderer[taggingMode] : QuickNoteElement.defaultRenderer;
    }
    /**
     * Called every time a keystroke is made in the editor. Listens for particular keys (e.g. UP arrow, ESC, etc.)
     * to handle certain behaviors of the picker.
     *
     * Runs within the context of the CKEditor, so actions that affect the view have to be run back inside of the
     * Angular zone of this class.
     *
     * @param event The key press event
     * @return true to allow the event to occur, false to cancel the event
     */
    onKey(event) {
        if (event.key) {
            if (this.quickNoteResults) {
                // Hide results on escape key
                if (event.key === "Escape" /* Escape */) {
                    this.zone.run(() => {
                        this.hideResults();
                    });
                    return false;
                }
                // Navigation inside the results
                if (event.key === "ArrowUp" /* ArrowUp */) {
                    this.zone.run(() => {
                        this.quickNoteResults.instance.prevActiveMatch();
                    });
                    return false;
                }
                if (event.key === "ArrowDown" /* ArrowDown */) {
                    this.zone.run(() => {
                        this.quickNoteResults.instance.nextActiveMatch();
                    });
                    return false;
                }
                if (event.key === "Enter" /* Enter */) {
                    this.zone.run(() => {
                        this.quickNoteResults.instance.selectActiveMatch();
                    });
                    return false;
                }
            }
            else {
                // Loop through all triggers and turn on tagging mode if the user just pressed a trigger character
                const triggers = this.config.triggers || {};
                Object.keys(triggers).forEach((key) => {
                    const trigger = triggers[key] || {};
                    if (event.key === trigger) {
                        this.isTagging = true;
                        this.taggingMode = key;
                    }
                });
            }
        }
        return true;
    }
    /**
     * Debounced method that is run in the proper Angular context when the user has modified the CKEditor.
     * After the value has been updated in CKEditor, this will propagate that change to the model and listeners.
     */
    onValueChange() {
        // Get the html text in CKEditor
        let value = this.ckeInstance.getData();
        // Remove empty 'ZERO WIDTH SPACE' characters that can get added erroneously by the editor
        const regex = new RegExp(String.fromCharCode(8203), 'g');
        value = value.replace(regex, '');
        // Make sure that any references in the model are still valid
        this.validateReferences();
        // Possibly show results if the user has entered a search term
        this.showResults();
        // Propagate change to ngModel for form validation, and send null if the note is empty
        let newModel = null;
        if (value) {
            newModel = {
                note: value,
                references: this.model.references,
            };
        }
        // Inform listeners to the ngModel change event that something has changed
        this.onModelChange(newModel);
        // Inform listeners of the `@Output() change` event that the model has been updated
        this.change.emit(newModel);
        // Inform listeners to the ngModel touched event that something has changed
        this.onTouched();
    }
    /**
     * Creates an instance of the results (called popup) and adds all the bindings to that instance.
     */
    showResults() {
        if (this.isTagging) {
            const searchTerm = this.getSearchTerm();
            if (searchTerm.length) {
                // Update Matches
                if (this.quickNoteResults) {
                    // Update existing list
                    this.quickNoteResults.instance.term = {
                        searchTerm,
                        taggingMode: this.taggingMode,
                    };
                }
                else {
                    // Create the results DOM element
                    this.quickNoteResults = this.componentUtils.append(this.resultsComponent, this.results);
                    this.quickNoteResults.instance.parent = this;
                    this.quickNoteResults.instance.config = this.config;
                    this.quickNoteResults.instance.term = {
                        searchTerm,
                        taggingMode: this.taggingMode,
                    };
                    this.positionResultsDropdown();
                }
            }
            else if (this.quickNoteResults) {
                this.quickNoteResults.destroy();
                this.quickNoteResults = null;
            }
            // Tell the OutsideClick base class to start listening for an outside clicks
            this.toggleActive(null, true);
        }
    }
    /**
     * Deletes the picker results from the DOM.
     */
    hideResults() {
        this.isTagging = false;
        if (this.quickNoteResults) {
            this.quickNoteResults.destroy();
            this.quickNoteResults = null;
        }
    }
    /**
     * Handles the selection from the QuickNoteResults Component. Called by the QuickNoteResults component on it's
     * parent (this element).
     *
     * @param taggingMode - type of tags we are looking for
     * @param selected - selected object from the picker that has a label and value
     */
    onSelected(taggingMode, selected) {
        // Turn off tagging
        this.isTagging = false;
        // Replace searchTerm with link
        const symbol = this.config.triggers[taggingMode];
        const renderer = this.getRenderer(taggingMode);
        const renderedText = renderer(symbol, selected);
        this.replaceWordAtCursor(renderedText);
        // Add the new reference, if it doesn't already exist
        this.model.references = this.model.references || {};
        this.model.references[taggingMode] = this.model.references[taggingMode] || [];
        const matchingItems = this.model.references[taggingMode].filter((item) => JSON.stringify(item) === JSON.stringify(selected));
        if (matchingItems.length === 0) {
            this.model.references[taggingMode].push(selected);
        }
        // Update the quick note with the changes due to the user's selection of an item in the dropdown
        this.onValueChange();
    }
    /**
     * Convenience method that gets the current word that the cursor is on, minus the tag.
     * Also, trims any whitespace before/after the term to aid in searching.
     */
    getSearchTerm() {
        let word = this.getWordAtCursor().trim();
        if (this.isTagging) {
            const symbol = this.config.triggers[this.taggingMode];
            if (!word.includes(symbol)) {
                this.hideResults();
                return '';
            }
            word = word.slice(word.indexOf(symbol) + symbol.length);
        }
        return word;
    }
    /**
     * Gets the current word that the cursor is on CKEditor. Current word starts at the beginning of the line or a
     * tag character if we are in tagging mode. Current word ends at the end of the line or an empty space.
     *
     * @returns plain text string (removes all html formatting)
     */
    getWordAtCursor() {
        const range = this.ckeInstance.getSelection().getRanges()[0];
        const start = range.startContainer;
        if (start.type === CKEDITOR.NODE_TEXT && range.startOffset) {
            const text = start.getText();
            const symbol = this.config.triggers[this.taggingMode];
            let wordStart = text.lastIndexOf(symbol, range.startOffset - 1);
            if (wordStart > 0) {
                const beforeSymbol = text.charAt(wordStart - 1);
                // We don't want to trigger the lookup call unless the symbol was preceded by whitespace
                if (beforeSymbol !== '\u200B' && /\S/.test(beforeSymbol)) {
                    return '';
                }
            }
            else if (start.hasPrevious() && /\S$/.test(start.getPrevious().getText())) {
                // When wordStart is <= 0, we need to check the previous node's text to see if it ended with whitespace or not
                return '';
            }
            let wordEnd = text.indexOf(' ', range.startOffset + 1);
            if (wordStart === -1) {
                wordStart = 0;
            }
            if (wordEnd === -1) {
                wordEnd = text.length;
            }
            return text.substring(wordStart, wordEnd);
        }
        // Selection starts at the 0 index of the text node or there's no previous text node in contents
        return '';
    }
    /**
     * Replaces the word that the user is on with the given html.
     *
     * CKEditor gives us access to the current line of html in the editor, so we replace the content of
     * the line, replacing only the current word.
     */
    replaceWordAtCursor(newWord) {
        const originalWord = this.getWordAtCursor().trim();
        const range = this.ckeInstance.getSelection().getRanges()[0];
        const start = range.startContainer;
        const parentNode = start.getParent();
        if (start.type === CKEDITOR.NODE_TEXT && parentNode) {
            const line = parentNode.getHtml();
            const index = line.lastIndexOf(originalWord);
            if (index >= 0) {
                // Add a space after the replaced word so that multiple references can be added back to back
                const newLine = line.substring(0, index) + newWord + ' ' + line.substring(index + originalWord.length);
                parentNode.setHtml(newLine);
                // Place selection at the end of the line
                range.moveToPosition(parentNode, CKEDITOR.POSITION_BEFORE_END);
                this.ckeInstance.getSelection().selectRanges([range]);
            }
        }
    }
    /**
     * Returns current references, minus any from the model that have been removed from the editor.
     */
    validateReferences() {
        let html = this.ckeInstance.document.getBody().getHtml();
        // CKEditor stopped supporting the config.forceSimpleAmpersand setting, so we have to convert '&amp;' to '&'
        // when we pull html from the editor - see: https://dev.ckeditor.com/ticket/13723
        const ampRegex = new RegExp('&amp;', 'g');
        html = html.replace(ampRegex, '&');
        Object.keys(this.model.references).forEach((taggingMode) => {
            const array = this.model.references[taggingMode] || [];
            const symbol = this.config.triggers[taggingMode];
            const renderer = this.getRenderer(taggingMode);
            this.model.references[taggingMode] = array.filter((item) => {
                const renderedText = renderer(symbol, item);
                return html.includes(renderedText);
            });
            // If no references, then delete the key
            if (this.model.references[taggingMode].length === 0) {
                delete this.model.references[taggingMode];
            }
        });
    }
    /**
     * Configures the CKEditor for QuickNote functionality.
     *
     * Sets the height of the CKEditor dynamically to the height of the wrapper upon initialization.
     * Removes the toolbar on the bottom and configures a slimmed down version of the toolbar.
     * Removes plugins and turns off setting to allow browser based spell checking.
     */
    getCKEditorConfig() {
        // Use the height of the wrapper element to set the initial height of the editor, then
        // set it to 100% to allow the editor to resize using the grippy.
        const editorHeight = this.wrapper.nativeElement.clientHeight - QuickNoteElement.TOOLBAR_HEIGHT;
        this.wrapper.nativeElement.style.setProperty('height', '100%');
        return {
            enterMode: CKEDITOR.ENTER_BR,
            shiftEnterMode: CKEDITOR.ENTER_P,
            disableNativeSpellChecker: false,
            height: editorHeight,
            startupFocus: this.startupFocus,
            removePlugins: 'liststyle,tabletools,contextmenu',
            toolbar: [
                {
                    name: 'basicstyles',
                    items: [
                        'Styles',
                        'FontSize',
                        'Bold',
                        'Italic',
                        'Underline',
                        'TextColor',
                        '-',
                        'NumberedList',
                        'BulletedList',
                        'Outdent',
                        'Indent',
                        'Link',
                    ],
                },
            ],
        };
    }
    /**
     * Returns the current screen position of the cursor in CKEditor, accounting for any scrolling in the editor.
     */
    getCursorPosition() {
        const range = this.ckeInstance.getSelection().getRanges()[0];
        const parentElement = range.startContainer.$.parentElement;
        const editorElement = this.ckeInstance.editable().$;
        // Since the editor is a text node in the DOM that does not know about it's position, a temporary element has to
        // be inserted in order to locate the cursor position.
        const cursorElement = document.createElement('img');
        cursorElement.setAttribute('src', 'null');
        cursorElement.setAttribute('width', '0');
        cursorElement.setAttribute('height', '0');
        parentElement.appendChild(cursorElement);
        const cursorPosition = {
            top: cursorElement.offsetTop - editorElement.scrollTop,
            left: cursorElement.offsetLeft - editorElement.scrollLeft,
        };
        cursorElement.remove();
        return cursorPosition;
    }
    /**
     * Positions the results dropdown based on the location of the cursor in the text field
     */
    positionResultsDropdown() {
        const MIN_MARGIN_TOP = QuickNoteElement.TOOLBAR_HEIGHT * 2;
        const MAX_MARGIN_TOP = this.getContentHeight() + QuickNoteElement.TOOLBAR_HEIGHT;
        const cursorPosition = this.getCursorPosition();
        let marginTop = cursorPosition.top + QuickNoteElement.TOOLBAR_HEIGHT;
        // Check that the margin is within the visible bounds
        marginTop = Math.max(marginTop, MIN_MARGIN_TOP);
        marginTop = Math.min(marginTop, MAX_MARGIN_TOP);
        // Set the margin-top of the dropdown
        this.quickNoteResults.instance.element.nativeElement.style.setProperty('margin-top', marginTop + 'px');
    }
    /**
     * Returns the height in pixels of the content area - the text that the user has entered.
     */
    getContentHeight() {
        let contentHeight = 0;
        if (this.ckeInstance.ui &&
            this.ckeInstance.ui.contentsElement &&
            this.ckeInstance.ui.contentsElement.$ &&
            this.ckeInstance.ui.contentsElement.$.style) {
            const cssText = this.ckeInstance.ui.contentsElement.$.style.cssText;
            if (cssText.indexOf('height: ') !== -1) {
                let height = cssText.split('height: ')[1];
                height = height.split('px')[0];
                contentHeight = parseInt(height, 10);
            }
        }
        return contentHeight;
    }
    /**
     * Show the placeholder text if the editor is empty
     */
    showPlaceholder() {
        if (!this.ckeInstance.getData() && !this.startupFocus) {
            this.ckeInstance.editable().getParent().$.appendChild(this.placeholderElement);
            this.placeholderVisible = true;
        }
    }
    /**
     * Hide the placeholder text by removing the placeholder element from the DOM
     */
    hidePlaceholder() {
        if (this.placeholderVisible) {
            this.ckeInstance.editable().getParent().$.removeChild(this.placeholderElement);
            this.placeholderVisible = false;
        }
    }
    /**
     * Get or create the single placeholder object that is constructed only when needed.
     */
    get placeholderElement() {
        if (!this._placeholderElement) {
            this._placeholderElement = document.createElement('div');
            this._placeholderElement.className = 'placeholder';
            this._placeholderElement.style.cssText =
                'margin: 20px; color: #AAAAAA; font-family: sans-serif; font-size: 13px; line-height: 20px; position: absolute; top: 0';
            this._placeholderElement.textContent = this.placeholder;
        }
        return this._placeholderElement;
    }
}
QuickNoteElement.TOOLBAR_HEIGHT = 40; // in pixels - configured by stylesheet
QuickNoteElement.ɵfac = function QuickNoteElement_Factory(t) { return new (t || QuickNoteElement)(ɵɵdirectiveInject(NgZone), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ComponentUtils)); };
QuickNoteElement.ɵcmp = ɵɵdefineComponent({ type: QuickNoteElement, selectors: [["novo-quick-note"]], viewQuery: function QuickNoteElement_Query(rf, ctx) { if (rf & 1) {
        ɵɵstaticViewQuery(_c0$14, true);
        ɵɵstaticViewQuery(_c1$r, true);
        ɵɵstaticViewQuery(_c2$c, true, ViewContainerRef);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.wrapper = _t.first);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.host = _t.first);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.results = _t.first);
    } }, inputs: { config: "config", startupFocus: "startupFocus", placeholder: "placeholder" }, outputs: { focus: "focus", blur: "blur", change: "change" }, features: [ɵɵProvidersFeature([QUICK_NOTE_VALUE_ACCESSOR]), ɵɵInheritDefinitionFeature], decls: 6, vars: 0, consts: [[1, "quick-note-wrapper"], ["wrapper", ""], ["host", ""], ["results", ""]], template: function QuickNoteElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "div", 0, 1);
        ɵɵelement(2, "textarea", null, 2);
        ɵɵelement(4, "span", null, 3);
        ɵɵelementEnd();
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(QuickNoteElement, [{
        type: Component,
        args: [{
                selector: 'novo-quick-note',
                providers: [QUICK_NOTE_VALUE_ACCESSOR],
                template: ` <div class="quick-note-wrapper" #wrapper><textarea #host></textarea> <span #results></span></div> `,
            }]
    }], function () { return [{ type: NgZone }, { type: ElementRef }, { type: ComponentUtils }]; }, { wrapper: [{
            type: ViewChild,
            args: ['wrapper', { static: true }]
        }], host: [{
            type: ViewChild,
            args: ['host', { static: true }]
        }], results: [{
            type: ViewChild,
            args: ['results', { read: ViewContainerRef, static: true }]
        }], config: [{
            type: Input
        }], startupFocus: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], focus: [{
            type: Output
        }], blur: [{
            type: Output
        }], change: [{
            type: Output
        }] }); })();

function NovoControlTemplates_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div");
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const form_r20 = ctx.form;
    const control_r21 = ctx.$implicit;
    ɵɵadvance(1);
    ɵɵtextInterpolate(form_r20.value[control_r21.key]);
} }
function NovoControlTemplates_ng_template_1_input_1_Template(rf, ctx) { if (rf & 1) {
    const _r33 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "input", 26);
    ɵɵlistener("input", function NovoControlTemplates_ng_template_1_input_1_Template_input_input_0_listener($event) { ɵɵrestoreView(_r33); const methods_r25 = ɵɵnextContext().methods; return methods_r25.emitChange($event); })("focus", function NovoControlTemplates_ng_template_1_input_1_Template_input_focus_0_listener($event) { ɵɵrestoreView(_r33); const methods_r25 = ɵɵnextContext().methods; return methods_r25.handleFocus($event); })("blur", function NovoControlTemplates_ng_template_1_input_1_Template_input_blur_0_listener($event) { ɵɵrestoreView(_r33); const methods_r25 = ɵɵnextContext().methods; return methods_r25.handleBlur($event); });
    ɵɵelementEnd();
} if (rf & 2) {
    const control_r22 = ɵɵnextContext().$implicit;
    ɵɵproperty("textMask", control_r22.maskOptions)("formControlName", control_r22.key)("id", control_r22.key)("type", control_r22 == null ? null : control_r22.type)("placeholder", control_r22 == null ? null : control_r22.placeholder);
} }
function NovoControlTemplates_ng_template_1_input_2_Template(rf, ctx) { if (rf & 1) {
    const _r41 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "input", 27);
    ɵɵlistener("input", function NovoControlTemplates_ng_template_1_input_2_Template_input_input_0_listener($event) { ɵɵrestoreView(_r41); const methods_r25 = ɵɵnextContext().methods; return methods_r25.emitChange($event); })("focus", function NovoControlTemplates_ng_template_1_input_2_Template_input_focus_0_listener($event) { ɵɵrestoreView(_r41); const methods_r25 = ɵɵnextContext().methods; return methods_r25.handleFocus($event); })("blur", function NovoControlTemplates_ng_template_1_input_2_Template_input_blur_0_listener($event) { ɵɵrestoreView(_r41); const methods_r25 = ɵɵnextContext().methods; return methods_r25.handleBlur($event); });
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r47 = ɵɵnextContext();
    const errors_r24 = ctx_r47.errors;
    const control_r22 = ctx_r47.$implicit;
    ɵɵclassProp("maxlength-error", errors_r24 == null ? null : errors_r24.maxlength);
    ɵɵproperty("formControlName", control_r22.key)("id", control_r22.key)("type", control_r22 == null ? null : control_r22.type)("placeholder", control_r22 == null ? null : control_r22.placeholder)("maxlength", control_r22 == null ? null : control_r22.maxlength);
} }
function NovoControlTemplates_ng_template_1_input_3_Template(rf, ctx) { if (rf & 1) {
    const _r50 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "input", 28, 29);
    ɵɵlistener("keydown", function NovoControlTemplates_ng_template_1_input_3_Template_input_keydown_0_listener($event) { ɵɵrestoreView(_r50); const methods_r25 = ɵɵnextContext().methods; return methods_r25.restrictKeys($event); })("input", function NovoControlTemplates_ng_template_1_input_3_Template_input_input_0_listener($event) { ɵɵrestoreView(_r50); const methods_r25 = ɵɵnextContext().methods; return methods_r25.emitChange($event); })("focus", function NovoControlTemplates_ng_template_1_input_3_Template_input_focus_0_listener($event) { ɵɵrestoreView(_r50); const methods_r25 = ɵɵnextContext().methods; return methods_r25.handleFocus($event); })("blur", function NovoControlTemplates_ng_template_1_input_3_Template_input_blur_0_listener($event) { ɵɵrestoreView(_r50); const methods_r25 = ɵɵnextContext().methods; return methods_r25.handleBlur($event); })("mousewheel", function NovoControlTemplates_ng_template_1_input_3_Template_input_mousewheel_0_listener() { ɵɵrestoreView(_r50); const _r48 = ɵɵreference(1); return _r48.blur(); });
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r59 = ɵɵnextContext();
    const errors_r24 = ctx_r59.errors;
    const control_r22 = ctx_r59.$implicit;
    ɵɵclassProp("maxlength-error", errors_r24 == null ? null : errors_r24.maxlength);
    ɵɵproperty("formControlName", control_r22.key)("id", control_r22.key)("type", control_r22 == null ? null : control_r22.type)("placeholder", control_r22 == null ? null : control_r22.placeholder)("maxlength", control_r22 == null ? null : control_r22.maxlength);
} }
function NovoControlTemplates_ng_template_1_input_4_Template(rf, ctx) { if (rf & 1) {
    const _r62 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "input", 30, 31);
    ɵɵlistener("keydown", function NovoControlTemplates_ng_template_1_input_4_Template_input_keydown_0_listener($event) { ɵɵrestoreView(_r62); const methods_r25 = ɵɵnextContext().methods; return methods_r25.restrictKeys($event); })("input", function NovoControlTemplates_ng_template_1_input_4_Template_input_input_0_listener($event) { ɵɵrestoreView(_r62); const methods_r25 = ɵɵnextContext().methods; return methods_r25.handlePercentChange($event); })("focus", function NovoControlTemplates_ng_template_1_input_4_Template_input_focus_0_listener($event) { ɵɵrestoreView(_r62); const methods_r25 = ɵɵnextContext().methods; return methods_r25.handleFocus($event); })("blur", function NovoControlTemplates_ng_template_1_input_4_Template_input_blur_0_listener($event) { ɵɵrestoreView(_r62); const methods_r25 = ɵɵnextContext().methods; return methods_r25.handleBlur($event); })("mousewheel", function NovoControlTemplates_ng_template_1_input_4_Template_input_mousewheel_0_listener() { ɵɵrestoreView(_r62); const _r60 = ɵɵreference(1); return _r60.blur(); });
    ɵɵelementEnd();
} if (rf & 2) {
    const control_r22 = ɵɵnextContext().$implicit;
    ɵɵproperty("type", control_r22 == null ? null : control_r22.type)("placeholder", control_r22 == null ? null : control_r22.placeholder)("value", control_r22 == null ? null : control_r22.percentValue);
} }
function NovoControlTemplates_ng_template_1_label_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "label", 32);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const control_r22 = ɵɵnextContext().$implicit;
    ɵɵadvance(1);
    ɵɵtextInterpolate(control_r22.currencyFormat);
} }
function NovoControlTemplates_ng_template_1_label_6_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "label", 32);
    ɵɵtext(1, "%");
    ɵɵelementEnd();
} }
function NovoControlTemplates_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 20);
    ɵɵtemplate(1, NovoControlTemplates_ng_template_1_input_1_Template, 1, 5, "input", 21);
    ɵɵtemplate(2, NovoControlTemplates_ng_template_1_input_2_Template, 1, 7, "input", 22);
    ɵɵtemplate(3, NovoControlTemplates_ng_template_1_input_3_Template, 2, 7, "input", 23);
    ɵɵtemplate(4, NovoControlTemplates_ng_template_1_input_4_Template, 2, 3, "input", 24);
    ɵɵtemplate(5, NovoControlTemplates_ng_template_1_label_5_Template, 2, 1, "label", 25);
    ɵɵtemplate(6, NovoControlTemplates_ng_template_1_label_6_Template, 2, 0, "label", 25);
    ɵɵelementEnd();
} if (rf & 2) {
    const control_r22 = ctx.$implicit;
    const form_r23 = ctx.form;
    ɵɵproperty("formGroup", form_r23)("tooltip", control_r22 == null ? null : control_r22.tooltip)("tooltipPosition", control_r22 == null ? null : control_r22.tooltipPosition)("tooltipSize", control_r22 == null ? null : control_r22.tooltipSize)("tooltipPreline", control_r22 == null ? null : control_r22.tooltipPreline)("removeTooltipArrow", control_r22 == null ? null : control_r22.removeTooltipArrow)("tooltipAutoPosition", control_r22 == null ? null : control_r22.tooltipAutoPosition);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", (control_r22 == null ? null : control_r22.type) !== "number" && (control_r22 == null ? null : control_r22.textMaskEnabled));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", (control_r22 == null ? null : control_r22.type) !== "number" && !(control_r22 == null ? null : control_r22.textMaskEnabled));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", (control_r22 == null ? null : control_r22.type) === "number" && (control_r22 == null ? null : control_r22.subType) !== "percentage");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", (control_r22 == null ? null : control_r22.type) === "number" && (control_r22 == null ? null : control_r22.subType) === "percentage");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", (control_r22 == null ? null : control_r22.subType) === "currency");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", (control_r22 == null ? null : control_r22.subType) === "percentage");
} }
function NovoControlTemplates_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    const _r78 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 33);
    ɵɵelementStart(1, "textarea", 34);
    ɵɵlistener("input", function NovoControlTemplates_ng_template_2_Template_textarea_input_1_listener($event) { ɵɵrestoreView(_r78); const methods_r76 = ctx.methods; return methods_r76.handleTextAreaInput($event); })("focus", function NovoControlTemplates_ng_template_2_Template_textarea_focus_1_listener($event) { ɵɵrestoreView(_r78); const methods_r76 = ctx.methods; return methods_r76.handleFocus($event); })("blur", function NovoControlTemplates_ng_template_2_Template_textarea_blur_1_listener($event) { ɵɵrestoreView(_r78); const methods_r76 = ctx.methods; return methods_r76.handleBlur($event); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const control_r73 = ctx.$implicit;
    const form_r74 = ctx.form;
    const errors_r75 = ctx.errors;
    ɵɵproperty("formGroup", form_r74)("tooltip", control_r73 == null ? null : control_r73.tooltip)("tooltipPosition", control_r73 == null ? null : control_r73.tooltipPosition)("tooltipSize", control_r73 == null ? null : control_r73.tooltipSize)("tooltipPreline", control_r73 == null ? null : control_r73.tooltipPreline)("removeTooltipArrow", control_r73 == null ? null : control_r73.removeTooltipArrow)("tooltipAutoPosition", control_r73 == null ? null : control_r73.tooltipAutoPosition);
    ɵɵadvance(1);
    ɵɵclassProp("maxlength-error", errors_r75 == null ? null : errors_r75.maxlength);
    ɵɵproperty("name", control_r73.key)("placeholder", control_r73.placeholder)("formControlName", control_r73.key)("maxlength", control_r73 == null ? null : control_r73.maxlength);
    ɵɵattribute("id", control_r73.key);
} }
function NovoControlTemplates_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    const _r86 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 35);
    ɵɵelementStart(1, "novo-editor", 36);
    ɵɵlistener("focus", function NovoControlTemplates_ng_template_3_Template_novo_editor_focus_1_listener($event) { ɵɵrestoreView(_r86); const methods_r84 = ctx.methods; return methods_r84.handleFocus($event); })("blur", function NovoControlTemplates_ng_template_3_Template_novo_editor_blur_1_listener($event) { ɵɵrestoreView(_r86); const methods_r84 = ctx.methods; return methods_r84.handleBlur($event); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const control_r81 = ctx.$implicit;
    const form_r82 = ctx.form;
    ɵɵproperty("formGroup", form_r82);
    ɵɵadvance(1);
    ɵɵproperty("name", control_r81.key)("formControlName", control_r81.key)("startupFocus", control_r81.startupFocus)("minimal", control_r81.minimal)("fileBrowserImageUploadUrl", control_r81.fileBrowserImageUploadUrl)("config", control_r81.config);
} }
function NovoControlTemplates_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    const _r93 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 35);
    ɵɵelementStart(1, "novo-ace-editor", 37);
    ɵɵlistener("focus", function NovoControlTemplates_ng_template_4_Template_novo_ace_editor_focus_1_listener($event) { ɵɵrestoreView(_r93); const methods_r91 = ctx.methods; return methods_r91.handleFocus($event); })("blur", function NovoControlTemplates_ng_template_4_Template_novo_ace_editor_blur_1_listener($event) { ɵɵrestoreView(_r93); const methods_r91 = ctx.methods; return methods_r91.handleBlur($event); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const control_r88 = ctx.$implicit;
    const form_r89 = ctx.form;
    ɵɵproperty("formGroup", form_r89);
    ɵɵadvance(1);
    ɵɵproperty("name", control_r88.key)("formControlName", control_r88.key);
} }
function NovoControlTemplates_ng_template_5_option_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "option", 41);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const control_r95 = ɵɵnextContext().$implicit;
    ɵɵadvance(1);
    ɵɵtextInterpolate(control_r95.placeholder);
} }
function NovoControlTemplates_ng_template_5_option_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "option", 42);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const opt_r102 = ctx.$implicit;
    ɵɵproperty("value", opt_r102.key);
    ɵɵadvance(1);
    ɵɵtextInterpolate(opt_r102.value);
} }
function NovoControlTemplates_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 35);
    ɵɵelementStart(1, "select", 38);
    ɵɵtemplate(2, NovoControlTemplates_ng_template_5_option_2_Template, 2, 1, "option", 39);
    ɵɵtemplate(3, NovoControlTemplates_ng_template_5_option_3_Template, 2, 2, "option", 40);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const control_r95 = ctx.$implicit;
    const form_r96 = ctx.form;
    ɵɵproperty("formGroup", form_r96);
    ɵɵadvance(1);
    ɵɵproperty("id", control_r95.key)("formControlName", control_r95.key)("tooltip", control_r95.tooltip)("tooltipPosition", control_r95.tooltipPosition)("tooltipSize", control_r95 == null ? null : control_r95.tooltipSize)("tooltipPreline", control_r95 == null ? null : control_r95.tooltipPreline)("removeTooltipArrow", control_r95 == null ? null : control_r95.removeTooltipArrow)("tooltipAutoPosition", control_r95 == null ? null : control_r95.tooltipAutoPosition);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", control_r95.placeholder);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", control_r95.options);
} }
function NovoControlTemplates_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    const _r108 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 35);
    ɵɵelementStart(1, "novo-file-input", 43);
    ɵɵlistener("edit", function NovoControlTemplates_ng_template_6_Template_novo_file_input_edit_1_listener($event) { ɵɵrestoreView(_r108); const methods_r106 = ctx.methods; return methods_r106.handleEdit($event); })("save", function NovoControlTemplates_ng_template_6_Template_novo_file_input_save_1_listener($event) { ɵɵrestoreView(_r108); const methods_r106 = ctx.methods; return methods_r106.handleSave($event); })("delete", function NovoControlTemplates_ng_template_6_Template_novo_file_input_delete_1_listener($event) { ɵɵrestoreView(_r108); const methods_r106 = ctx.methods; return methods_r106.handleDelete($event); })("upload", function NovoControlTemplates_ng_template_6_Template_novo_file_input_upload_1_listener($event) { ɵɵrestoreView(_r108); const methods_r106 = ctx.methods; return methods_r106.handleUpload($event); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const control_r103 = ctx.$implicit;
    const form_r104 = ctx.form;
    ɵɵproperty("formGroup", form_r104);
    ɵɵadvance(1);
    ɵɵproperty("formControlName", control_r103.key)("id", control_r103.key)("name", control_r103.key)("placeholder", control_r103.placeholder)("value", control_r103.value)("multiple", control_r103.multiple)("layoutOptions", control_r103.layoutOptions)("tooltip", control_r103.tooltip)("tooltipPosition", control_r103.tooltipPosition)("tooltipSize", control_r103 == null ? null : control_r103.tooltipSize)("tooltipPreline", control_r103 == null ? null : control_r103.tooltipPreline)("removeTooltipArrow", control_r103 == null ? null : control_r103.removeTooltipArrow)("tooltipAutoPosition", control_r103 == null ? null : control_r103.tooltipAutoPosition);
} }
function NovoControlTemplates_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    const _r117 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 35);
    ɵɵelementStart(1, "novo-tiles", 44);
    ɵɵlistener("onChange", function NovoControlTemplates_ng_template_7_Template_novo_tiles_onChange_1_listener($event) { ɵɵrestoreView(_r117); const methods_r115 = ctx.methods; return methods_r115.modelChange($event); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const control_r112 = ctx.$implicit;
    const form_r113 = ctx.form;
    ɵɵproperty("formGroup", form_r113);
    ɵɵadvance(1);
    ɵɵproperty("options", control_r112.options)("formControlName", control_r112.key)("tooltip", control_r112.tooltip)("tooltipPosition", control_r112.tooltipPosition)("tooltipSize", control_r112 == null ? null : control_r112.tooltipSize)("tooltipPreline", control_r112 == null ? null : control_r112.tooltipPreline)("removeTooltipArrow", control_r112 == null ? null : control_r112.removeTooltipArrow)("tooltipAutoPosition", control_r112 == null ? null : control_r112.tooltipAutoPosition)("controlDisabled", control_r112.disabled);
} }
function NovoControlTemplates_ng_template_8_novo_picker_1_Template(rf, ctx) { if (rf & 1) {
    const _r126 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-picker", 49);
    ɵɵlistener("select", function NovoControlTemplates_ng_template_8_novo_picker_1_Template_novo_picker_select_0_listener($event) { ɵɵrestoreView(_r126); const methods_r121 = ɵɵnextContext().methods; return methods_r121.modelChange($event); })("changed", function NovoControlTemplates_ng_template_8_novo_picker_1_Template_novo_picker_changed_0_listener($event) { ɵɵrestoreView(_r126); const methods_r121 = ɵɵnextContext().methods; return methods_r121.modelChangeWithRaw($event); })("typing", function NovoControlTemplates_ng_template_8_novo_picker_1_Template_novo_picker_typing_0_listener($event) { ɵɵrestoreView(_r126); const methods_r121 = ɵɵnextContext().methods; return methods_r121.handleTyping($event); })("focus", function NovoControlTemplates_ng_template_8_novo_picker_1_Template_novo_picker_focus_0_listener($event) { ɵɵrestoreView(_r126); const methods_r121 = ɵɵnextContext().methods; return methods_r121.handleFocus($event); })("blur", function NovoControlTemplates_ng_template_8_novo_picker_1_Template_novo_picker_blur_0_listener($event) { ɵɵrestoreView(_r126); const methods_r121 = ɵɵnextContext().methods; return methods_r121.handleBlur($event); });
    ɵɵelementEnd();
} if (rf & 2) {
    const control_r118 = ɵɵnextContext().$implicit;
    ɵɵproperty("config", control_r118.config)("formControlName", control_r118.key)("placeholder", control_r118.placeholder)("parentScrollSelector", control_r118.parentScrollSelector)("tooltip", control_r118.tooltip)("tooltipPosition", control_r118.tooltipPosition)("tooltipSize", control_r118 == null ? null : control_r118.tooltipSize)("tooltipPreline", control_r118 == null ? null : control_r118.tooltipPreline)("removeTooltipArrow", control_r118 == null ? null : control_r118.removeTooltipArrow)("tooltipAutoPosition", control_r118 == null ? null : control_r118.tooltipAutoPosition);
} }
function NovoControlTemplates_ng_template_8_novo_chips_2_Template(rf, ctx) { if (rf & 1) {
    const _r138 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-chips", 50);
    ɵɵlistener("changed", function NovoControlTemplates_ng_template_8_novo_chips_2_Template_novo_chips_changed_0_listener($event) { ɵɵrestoreView(_r138); const methods_r121 = ɵɵnextContext().methods; return methods_r121.modelChangeWithRaw($event); })("typing", function NovoControlTemplates_ng_template_8_novo_chips_2_Template_novo_chips_typing_0_listener($event) { ɵɵrestoreView(_r138); const methods_r121 = ɵɵnextContext().methods; return methods_r121.handleTyping($event); })("focus", function NovoControlTemplates_ng_template_8_novo_chips_2_Template_novo_chips_focus_0_listener($event) { ɵɵrestoreView(_r138); const methods_r121 = ɵɵnextContext().methods; return methods_r121.handleFocus($event); })("blur", function NovoControlTemplates_ng_template_8_novo_chips_2_Template_novo_chips_blur_0_listener($event) { ɵɵrestoreView(_r138); const methods_r121 = ɵɵnextContext().methods; return methods_r121.handleBlur($event); });
    ɵɵelementEnd();
} if (rf & 2) {
    const control_r118 = ɵɵnextContext().$implicit;
    ɵɵproperty("source", control_r118.config)("type", control_r118.config.type)("formControlName", control_r118.key)("placeholder", control_r118.placeholder)("maxlength", control_r118 == null ? null : control_r118.maxlength)("closeOnSelect", control_r118.closeOnSelect)("tooltip", control_r118.tooltip)("tooltipPosition", control_r118.tooltipPosition)("tooltipSize", control_r118 == null ? null : control_r118.tooltipSize)("tooltipPreline", control_r118 == null ? null : control_r118.tooltipPreline)("removeTooltipArrow", control_r118 == null ? null : control_r118.removeTooltipArrow)("tooltipAutoPosition", control_r118 == null ? null : control_r118.tooltipAutoPosition);
} }
function NovoControlTemplates_ng_template_8_novo_row_chips_3_Template(rf, ctx) { if (rf & 1) {
    const _r148 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-row-chips", 51);
    ɵɵlistener("changed", function NovoControlTemplates_ng_template_8_novo_row_chips_3_Template_novo_row_chips_changed_0_listener($event) { ɵɵrestoreView(_r148); const methods_r121 = ɵɵnextContext().methods; return methods_r121.modelChangeWithRaw($event); })("typing", function NovoControlTemplates_ng_template_8_novo_row_chips_3_Template_novo_row_chips_typing_0_listener($event) { ɵɵrestoreView(_r148); const methods_r121 = ɵɵnextContext().methods; return methods_r121.handleTyping($event); })("focus", function NovoControlTemplates_ng_template_8_novo_row_chips_3_Template_novo_row_chips_focus_0_listener($event) { ɵɵrestoreView(_r148); const methods_r121 = ɵɵnextContext().methods; return methods_r121.handleFocus($event); })("blur", function NovoControlTemplates_ng_template_8_novo_row_chips_3_Template_novo_row_chips_blur_0_listener($event) { ɵɵrestoreView(_r148); const methods_r121 = ɵɵnextContext().methods; return methods_r121.handleBlur($event); });
    ɵɵelementEnd();
} if (rf & 2) {
    const control_r118 = ɵɵnextContext().$implicit;
    ɵɵproperty("source", control_r118.config)("type", control_r118.config.type)("formControlName", control_r118.key)("placeholder", control_r118.placeholder)("closeOnSelect", control_r118.closeOnSelect)("tooltip", control_r118.tooltip)("tooltipPosition", control_r118.tooltipPosition)("tooltipSize", control_r118 == null ? null : control_r118.tooltipSize)("tooltipPreline", control_r118 == null ? null : control_r118.tooltipPreline)("removeTooltipArrow", control_r118 == null ? null : control_r118.removeTooltipArrow)("tooltipAutoPosition", control_r118 == null ? null : control_r118.tooltipAutoPosition);
} }
function NovoControlTemplates_ng_template_8_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 45);
    ɵɵtemplate(1, NovoControlTemplates_ng_template_8_novo_picker_1_Template, 1, 10, "novo-picker", 46);
    ɵɵtemplate(2, NovoControlTemplates_ng_template_8_novo_chips_2_Template, 1, 12, "novo-chips", 47);
    ɵɵtemplate(3, NovoControlTemplates_ng_template_8_novo_row_chips_3_Template, 1, 11, "novo-row-chips", 48);
    ɵɵelementEnd();
} if (rf & 2) {
    const control_r118 = ctx.$implicit;
    const form_r119 = ctx.form;
    ɵɵproperty("formGroup", form_r119);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !control_r118.multiple);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", control_r118.multiple && !control_r118.config.columns);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", control_r118.multiple && control_r118.config.columns);
} }
function NovoControlTemplates_ng_template_9_Template(rf, ctx) { if (rf & 1) {
    const _r162 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 35);
    ɵɵelementStart(1, "novo-select", 52);
    ɵɵlistener("onSelect", function NovoControlTemplates_ng_template_9_Template_novo_select_onSelect_1_listener($event) { ɵɵrestoreView(_r162); const methods_r160 = ctx.methods; return methods_r160.modelChange($event); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const control_r157 = ctx.$implicit;
    const form_r158 = ctx.form;
    ɵɵproperty("formGroup", form_r158);
    ɵɵadvance(1);
    ɵɵproperty("options", control_r157.options)("headerConfig", control_r157.headerConfig)("placeholder", control_r157.placeholder)("formControlName", control_r157.key)("tooltip", control_r157.tooltip)("tooltipPosition", control_r157.tooltipPosition)("tooltipSize", control_r157 == null ? null : control_r157.tooltipSize)("tooltipPreline", control_r157 == null ? null : control_r157.tooltipPreline)("removeTooltipArrow", control_r157 == null ? null : control_r157.removeTooltipArrow)("tooltipAutoPosition", control_r157 == null ? null : control_r157.tooltipAutoPosition);
} }
function NovoControlTemplates_ng_template_10_Template(rf, ctx) { if (rf & 1) {
    const _r168 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 35);
    ɵɵelementStart(1, "novo-select", 53);
    ɵɵlistener("onSelect", function NovoControlTemplates_ng_template_10_Template_novo_select_onSelect_1_listener($event) { ɵɵrestoreView(_r168); const methods_r166 = ctx.methods; return methods_r166.modelChange($event); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const control_r163 = ctx.$implicit;
    const form_r164 = ctx.form;
    ɵɵproperty("formGroup", form_r164);
    ɵɵadvance(1);
    ɵɵproperty("options", control_r163.options)("headerConfig", control_r163.headerConfig)("placeholder", control_r163.placeholder)("formControlName", control_r163.key)("tooltip", control_r163.tooltip)("tooltipPosition", control_r163.tooltipPosition)("tooltipSize", control_r163 == null ? null : control_r163.tooltipSize)("tooltipPreline", control_r163 == null ? null : control_r163.tooltipPreline)("removeTooltipArrow", control_r163 == null ? null : control_r163.removeTooltipArrow)("tooltipAutoPosition", control_r163 == null ? null : control_r163.tooltipAutoPosition);
} }
function NovoControlTemplates_ng_template_11_novo_radio_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-radio", 56);
} if (rf & 2) {
    const option_r174 = ctx.$implicit;
    const ctx_r175 = ɵɵnextContext();
    const form_r170 = ctx_r175.form;
    const control_r169 = ctx_r175.$implicit;
    ɵɵproperty("value", option_r174.value)("label", option_r174.label)("checked", option_r174.value === form_r170.value[control_r169.key] || form_r170.value[control_r169.key] && option_r174.value === form_r170.value[control_r169.key].id)("tooltip", control_r169.tooltip)("tooltipPosition", control_r169.tooltipPosition)("tooltipSize", control_r169 == null ? null : control_r169.tooltipSize)("tooltipPreline", control_r169 == null ? null : control_r169.tooltipPreline)("removeTooltipArrow", control_r169 == null ? null : control_r169.removeTooltipArrow)("tooltipAutoPosition", control_r169 == null ? null : control_r169.tooltipAutoPosition)("button", !!option_r174.icon)("icon", option_r174.icon)("color", option_r174.color)("theme", !!option_r174.icon && !option_r174.label ? "icon" : null);
    ɵɵattribute("data-automation-id", control_r169.key + "-" + ((option_r174 == null ? null : option_r174.label) || (option_r174 == null ? null : option_r174.value)));
} }
function NovoControlTemplates_ng_template_11_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 45);
    ɵɵelementStart(1, "novo-radio-group", 54);
    ɵɵtemplate(2, NovoControlTemplates_ng_template_11_novo_radio_2_Template, 1, 14, "novo-radio", 55);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const control_r169 = ctx.$implicit;
    const form_r170 = ctx.form;
    ɵɵproperty("formGroup", form_r170);
    ɵɵadvance(1);
    ɵɵproperty("name", control_r169.key)("formControlName", control_r169.key);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", control_r169.options);
} }
function NovoControlTemplates_ng_template_12_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 57);
    ɵɵelement(1, "novo-time-picker-input", 58);
    ɵɵelementEnd();
} if (rf & 2) {
    const control_r176 = ctx.$implicit;
    const form_r177 = ctx.form;
    ɵɵproperty("formGroup", form_r177)("tooltip", control_r176 == null ? null : control_r176.tooltip)("tooltipPosition", control_r176 == null ? null : control_r176.tooltipPosition)("tooltipSize", control_r176 == null ? null : control_r176.tooltipSize)("tooltipPreline", control_r176 == null ? null : control_r176.tooltipPreline)("removeTooltipArrow", control_r176 == null ? null : control_r176.removeTooltipArrow)("tooltipAutoPosition", control_r176 == null ? null : control_r176.tooltipAutoPosition);
    ɵɵadvance(1);
    ɵɵproperty("name", control_r176.key)("formControlName", control_r176.key)("placeholder", control_r176.placeholder)("military", control_r176.military);
    ɵɵattribute("id", control_r176.key);
} }
function NovoControlTemplates_ng_template_13_Template(rf, ctx) { if (rf & 1) {
    const _r185 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 20);
    ɵɵelementStart(1, "input", 59);
    ɵɵlistener("input", function NovoControlTemplates_ng_template_13_Template_input_input_1_listener($event) { ɵɵrestoreView(_r185); const methods_r183 = ctx.methods; return methods_r183.emitChange($event); })("focus", function NovoControlTemplates_ng_template_13_Template_input_focus_1_listener($event) { ɵɵrestoreView(_r185); const methods_r183 = ctx.methods; return methods_r183.handleFocus($event); })("blur", function NovoControlTemplates_ng_template_13_Template_input_blur_1_listener($event) { ɵɵrestoreView(_r185); const methods_r183 = ctx.methods; return methods_r183.handleBlur($event); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const control_r180 = ctx.$implicit;
    const form_r181 = ctx.form;
    ɵɵproperty("formGroup", form_r181)("tooltip", control_r180 == null ? null : control_r180.tooltip)("tooltipPosition", control_r180 == null ? null : control_r180.tooltipPosition)("tooltipSize", control_r180 == null ? null : control_r180.tooltipSize)("tooltipPreline", control_r180 == null ? null : control_r180.tooltipPreline)("removeTooltipArrow", control_r180 == null ? null : control_r180.removeTooltipArrow)("tooltipAutoPosition", control_r180 == null ? null : control_r180.tooltipAutoPosition);
    ɵɵadvance(1);
    ɵɵproperty("formControlName", control_r180.key)("id", control_r180.key)("type", control_r180.type)("placeholder", control_r180 == null ? null : control_r180.placeholder);
} }
function NovoControlTemplates_ng_template_14_Template(rf, ctx) { if (rf & 1) {
    const _r193 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 57);
    ɵɵelementStart(1, "novo-date-picker-input", 60);
    ɵɵlistener("focusEvent", function NovoControlTemplates_ng_template_14_Template_novo_date_picker_input_focusEvent_1_listener($event) { ɵɵrestoreView(_r193); const methods_r191 = ctx.methods; return methods_r191.handleFocus($event); })("blurEvent", function NovoControlTemplates_ng_template_14_Template_novo_date_picker_input_blurEvent_1_listener($event) { ɵɵrestoreView(_r193); const methods_r191 = ctx.methods; return methods_r191.handleBlur($event); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const control_r188 = ctx.$implicit;
    const form_r189 = ctx.form;
    ɵɵproperty("formGroup", form_r189)("tooltip", control_r188.tooltip)("tooltipPosition", control_r188.tooltipPosition)("tooltipSize", control_r188 == null ? null : control_r188.tooltipSize)("tooltipPreline", control_r188 == null ? null : control_r188.tooltipPreline)("removeTooltipArrow", control_r188 == null ? null : control_r188.removeTooltipArrow)("tooltipAutoPosition", control_r188 == null ? null : control_r188.tooltipAutoPosition);
    ɵɵadvance(1);
    ɵɵproperty("name", control_r188.key)("formControlName", control_r188.key)("start", control_r188.startDate)("end", control_r188.endDate)("format", control_r188.dateFormat)("allowInvalidDate", control_r188.allowInvalidDate)("textMaskEnabled", control_r188.textMaskEnabled)("placeholder", control_r188.placeholder)("weekStart", control_r188.weekStart);
    ɵɵattribute("id", control_r188.key);
} }
function NovoControlTemplates_ng_template_15_Template(rf, ctx) { if (rf & 1) {
    const _r200 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 57);
    ɵɵelementStart(1, "novo-date-time-picker-input", 61);
    ɵɵlistener("focusEvent", function NovoControlTemplates_ng_template_15_Template_novo_date_time_picker_input_focusEvent_1_listener($event) { ɵɵrestoreView(_r200); const methods_r198 = ctx.methods; return methods_r198.handleFocus($event); })("blurEvent", function NovoControlTemplates_ng_template_15_Template_novo_date_time_picker_input_blurEvent_1_listener($event) { ɵɵrestoreView(_r200); const methods_r198 = ctx.methods; return methods_r198.handleBlur($event); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const control_r195 = ctx.$implicit;
    const form_r196 = ctx.form;
    ɵɵproperty("formGroup", form_r196)("tooltip", control_r195.tooltip)("tooltipPosition", control_r195.tooltipPosition)("tooltipSize", control_r195 == null ? null : control_r195.tooltipSize)("tooltipPreline", control_r195 == null ? null : control_r195.tooltipPreline)("removeTooltipArrow", control_r195 == null ? null : control_r195.removeTooltipArrow)("tooltipAutoPosition", control_r195 == null ? null : control_r195.tooltipAutoPosition);
    ɵɵadvance(1);
    ɵɵproperty("name", control_r195.key)("formControlName", control_r195.key)("start", control_r195.startDate)("end", control_r195.endDate)("placeholder", control_r195.placeholder)("military", control_r195.military)("weekStart", control_r195.weekStart);
    ɵɵattribute("id", control_r195.key);
} }
function NovoControlTemplates_ng_template_16_Template(rf, ctx) { if (rf & 1) {
    const _r207 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 35);
    ɵɵelementStart(1, "novo-address", 62);
    ɵɵlistener("change", function NovoControlTemplates_ng_template_16_Template_novo_address_change_1_listener($event) { ɵɵrestoreView(_r207); const methods_r205 = ctx.methods; return methods_r205.handleAddressChange($event); })("focus", function NovoControlTemplates_ng_template_16_Template_novo_address_focus_1_listener($event) { ɵɵrestoreView(_r207); const methods_r205 = ctx.methods; return methods_r205.handleFocus($event.event, $event.field); })("blur", function NovoControlTemplates_ng_template_16_Template_novo_address_blur_1_listener($event) { ɵɵrestoreView(_r207); const methods_r205 = ctx.methods; return methods_r205.handleBlur($event.event, $event.field); })("validityChange", function NovoControlTemplates_ng_template_16_Template_novo_address_validityChange_1_listener() { const methods_r205 = ctx.methods; return methods_r205.updateValidity(); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const control_r202 = ctx.$implicit;
    const form_r203 = ctx.form;
    ɵɵproperty("formGroup", form_r203);
    ɵɵadvance(1);
    ɵɵproperty("formControlName", control_r202.key)("config", control_r202 == null ? null : control_r202.config)("readOnly", control_r202 == null ? null : control_r202.readOnly);
} }
function NovoControlTemplates_ng_template_17_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 35);
    ɵɵelement(1, "novo-checkbox", 63);
    ɵɵelementEnd();
} if (rf & 2) {
    const control_r211 = ctx.$implicit;
    const form_r212 = ctx.form;
    ɵɵproperty("formGroup", form_r212);
    ɵɵadvance(1);
    ɵɵproperty("formControlName", control_r211 == null ? null : control_r211.key)("name", control_r211 == null ? null : control_r211.key)("label", control_r211 == null ? null : control_r211.checkboxLabel)("tooltip", control_r211 == null ? null : control_r211.tooltip)("tooltipPosition", control_r211 == null ? null : control_r211.tooltipPosition)("tooltipSize", control_r211 == null ? null : control_r211.tooltipSize)("tooltipPreline", control_r211 == null ? null : control_r211.tooltipPreline)("removeTooltipArrow", control_r211 == null ? null : control_r211.removeTooltipArrow)("tooltipAutoPosition", control_r211 == null ? null : control_r211.tooltipAutoPosition)("layoutOptions", control_r211 == null ? null : control_r211.layoutOptions);
} }
function NovoControlTemplates_ng_template_18_Template(rf, ctx) { if (rf & 1) {
    const _r220 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 35);
    ɵɵelementStart(1, "novo-check-list", 64);
    ɵɵlistener("onSelect", function NovoControlTemplates_ng_template_18_Template_novo_check_list_onSelect_1_listener($event) { ɵɵrestoreView(_r220); const methods_r218 = ctx.methods; return methods_r218.modelChange($event); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const control_r215 = ctx.$implicit;
    const form_r216 = ctx.form;
    ɵɵproperty("formGroup", form_r216);
    ɵɵadvance(1);
    ɵɵproperty("formControlName", control_r215.key)("name", control_r215.key)("options", control_r215 == null ? null : control_r215.options)("tooltip", control_r215 == null ? null : control_r215.tooltip)("tooltipPosition", control_r215 == null ? null : control_r215.tooltipPosition)("tooltipSize", control_r215 == null ? null : control_r215.tooltipSize)("tooltipPreline", control_r215 == null ? null : control_r215.tooltipPreline)("removeTooltipArrow", control_r215 == null ? null : control_r215.removeTooltipArrow)("tooltipAutoPosition", control_r215 == null ? null : control_r215.tooltipAutoPosition);
} }
function NovoControlTemplates_ng_template_19_Template(rf, ctx) { if (rf & 1) {
    const _r226 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 35);
    ɵɵelementStart(1, "novo-quick-note", 65);
    ɵɵlistener("change", function NovoControlTemplates_ng_template_19_Template_novo_quick_note_change_1_listener($event) { ɵɵrestoreView(_r226); const methods_r224 = ctx.methods; return methods_r224.modelChange($event); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const control_r221 = ctx.$implicit;
    const form_r222 = ctx.form;
    ɵɵproperty("formGroup", form_r222);
    ɵɵadvance(1);
    ɵɵproperty("formControlName", control_r221.key)("startupFocus", control_r221 == null ? null : control_r221.startupFocus)("placeholder", control_r221 == null ? null : control_r221.placeholder)("config", control_r221 == null ? null : control_r221.config)("tooltip", control_r221 == null ? null : control_r221.tooltip)("tooltipPosition", control_r221 == null ? null : control_r221.tooltipPosition)("tooltipSize", control_r221 == null ? null : control_r221.tooltipSize)("removeTooltipArrow", control_r221 == null ? null : control_r221.removeTooltipArrow)("tooltipAutoPosition", control_r221 == null ? null : control_r221.tooltipAutoPosition)("tooltipPreline", control_r221 == null ? null : control_r221.tooltipPreline);
} }
class NovoControlTemplates {
    constructor(templates) {
        this.templates = templates;
    }
    ngAfterViewInit() {
        if (this.defaultTemplates && this.defaultTemplates.length) {
            this.defaultTemplates.forEach((template) => {
                this.templates.addDefault(template.name, template.template);
            });
        }
    }
}
NovoControlTemplates.ɵfac = function NovoControlTemplates_Factory(t) { return new (t || NovoControlTemplates)(ɵɵdirectiveInject(NovoTemplateService)); };
NovoControlTemplates.ɵcmp = ɵɵdefineComponent({ type: NovoControlTemplates, selectors: [["novo-control-templates"]], viewQuery: function NovoControlTemplates_Query(rf, ctx) { if (rf & 1) {
        ɵɵviewQuery(NovoTemplate, true);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.defaultTemplates = _t);
    } }, decls: 20, vars: 0, consts: [["novoTemplate", "read-only"], ["novoTemplate", "textbox"], ["novoTemplate", "text-area"], ["novoTemplate", "editor"], ["novoTemplate", "ace-editor"], ["novoTemplate", "native-select"], ["novoTemplate", "file"], ["novoTemplate", "tiles"], ["novoTemplate", "picker"], ["novoTemplate", "select"], ["novoTemplate", "timezone"], ["novoTemplate", "radio"], ["novoTemplate", "time"], ["novoTemplate", "native-input"], ["novoTemplate", "date"], ["novoTemplate", "date-time"], ["novoTemplate", "address"], ["novoTemplate", "checkbox"], ["novoTemplate", "checklist"], ["novoTemplate", "quick-note"], [1, "novo-control-input-container", "novo-control-input-with-label", 3, "formGroup", "tooltip", "tooltipPosition", "tooltipSize", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition"], ["autocomplete", "", 3, "textMask", "formControlName", "id", "type", "placeholder", "input", "focus", "blur", 4, "ngIf"], ["autocomplete", "", 3, "maxlength-error", "formControlName", "id", "type", "placeholder", "maxlength", "input", "focus", "blur", 4, "ngIf"], ["step", "any", 3, "maxlength-error", "formControlName", "id", "type", "placeholder", "maxlength", "keydown", "input", "focus", "blur", "mousewheel", 4, "ngIf"], ["step", "any", 3, "type", "placeholder", "value", "keydown", "input", "focus", "blur", "mousewheel", 4, "ngIf"], ["class", "input-label", 4, "ngIf"], ["autocomplete", "", 3, "textMask", "formControlName", "id", "type", "placeholder", "input", "focus", "blur"], ["autocomplete", "", 3, "formControlName", "id", "type", "placeholder", "maxlength", "input", "focus", "blur"], ["step", "any", 3, "formControlName", "id", "type", "placeholder", "maxlength", "keydown", "input", "focus", "blur", "mousewheel"], ["numberInput", ""], ["step", "any", 3, "type", "placeholder", "value", "keydown", "input", "focus", "blur", "mousewheel"], ["percentInput", ""], [1, "input-label"], [1, "textarea-container", 3, "formGroup", "tooltip", "tooltipPosition", "tooltipSize", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition"], ["autosize", "", 3, "name", "placeholder", "formControlName", "maxlength", "input", "focus", "blur"], [3, "formGroup"], [3, "name", "formControlName", "startupFocus", "minimal", "fileBrowserImageUploadUrl", "config", "focus", "blur"], [3, "name", "formControlName", "focus", "blur"], [3, "id", "formControlName", "tooltip", "tooltipPosition", "tooltipSize", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition"], ["value", "", "disabled", "", "selected", "", "hidden", "", 4, "ngIf"], [3, "value", 4, "ngFor", "ngForOf"], ["value", "", "disabled", "", "selected", "", "hidden", ""], [3, "value"], [3, "formControlName", "id", "name", "placeholder", "value", "multiple", "layoutOptions", "tooltip", "tooltipPosition", "tooltipSize", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "edit", "save", "delete", "upload"], [3, "options", "formControlName", "tooltip", "tooltipPosition", "tooltipSize", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "controlDisabled", "onChange"], [1, "novo-control-input-container", 3, "formGroup"], [3, "config", "formControlName", "placeholder", "parentScrollSelector", "tooltip", "tooltipPosition", "tooltipSize", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "select", "changed", "typing", "focus", "blur", 4, "ngIf"], [3, "source", "type", "formControlName", "placeholder", "maxlength", "closeOnSelect", "tooltip", "tooltipPosition", "tooltipSize", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "changed", "typing", "focus", "blur", 4, "ngIf"], [3, "source", "type", "formControlName", "placeholder", "closeOnSelect", "tooltip", "tooltipPosition", "tooltipSize", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "changed", "typing", "focus", "blur", 4, "ngIf"], [3, "config", "formControlName", "placeholder", "parentScrollSelector", "tooltip", "tooltipPosition", "tooltipSize", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "select", "changed", "typing", "focus", "blur"], [3, "source", "type", "formControlName", "placeholder", "maxlength", "closeOnSelect", "tooltip", "tooltipPosition", "tooltipSize", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "changed", "typing", "focus", "blur"], [3, "source", "type", "formControlName", "placeholder", "closeOnSelect", "tooltip", "tooltipPosition", "tooltipSize", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "changed", "typing", "focus", "blur"], [3, "options", "headerConfig", "placeholder", "formControlName", "tooltip", "tooltipPosition", "tooltipSize", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "onSelect"], ["position", "bottom", 3, "options", "headerConfig", "placeholder", "formControlName", "tooltip", "tooltipPosition", "tooltipSize", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "onSelect"], [3, "name", "formControlName"], [3, "value", "label", "checked", "tooltip", "tooltipPosition", "tooltipSize", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "button", "icon", "color", "theme", 4, "ngFor", "ngForOf"], [3, "value", "label", "checked", "tooltip", "tooltipPosition", "tooltipSize", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "button", "icon", "color", "theme"], [1, "novo-control-input-container", 3, "formGroup", "tooltip", "tooltipPosition", "tooltipSize", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition"], [3, "name", "formControlName", "placeholder", "military"], [3, "formControlName", "id", "type", "placeholder", "input", "focus", "blur"], [3, "name", "formControlName", "start", "end", "format", "allowInvalidDate", "textMaskEnabled", "placeholder", "weekStart", "focusEvent", "blurEvent"], [3, "name", "formControlName", "start", "end", "placeholder", "military", "weekStart", "focusEvent", "blurEvent"], [3, "formControlName", "config", "readOnly", "change", "focus", "blur", "validityChange"], [3, "formControlName", "name", "label", "tooltip", "tooltipPosition", "tooltipSize", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "layoutOptions"], [3, "formControlName", "name", "options", "tooltip", "tooltipPosition", "tooltipSize", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "onSelect"], [3, "formControlName", "startupFocus", "placeholder", "config", "tooltip", "tooltipPosition", "tooltipSize", "removeTooltipArrow", "tooltipAutoPosition", "tooltipPreline", "change"]], template: function NovoControlTemplates_Template(rf, ctx) { if (rf & 1) {
        ɵɵtemplate(0, NovoControlTemplates_ng_template_0_Template, 2, 1, "ng-template", 0);
        ɵɵtemplate(1, NovoControlTemplates_ng_template_1_Template, 7, 13, "ng-template", 1);
        ɵɵtemplate(2, NovoControlTemplates_ng_template_2_Template, 2, 14, "ng-template", 2);
        ɵɵtemplate(3, NovoControlTemplates_ng_template_3_Template, 2, 7, "ng-template", 3);
        ɵɵtemplate(4, NovoControlTemplates_ng_template_4_Template, 2, 3, "ng-template", 4);
        ɵɵtemplate(5, NovoControlTemplates_ng_template_5_Template, 4, 11, "ng-template", 5);
        ɵɵtemplate(6, NovoControlTemplates_ng_template_6_Template, 2, 14, "ng-template", 6);
        ɵɵtemplate(7, NovoControlTemplates_ng_template_7_Template, 2, 10, "ng-template", 7);
        ɵɵtemplate(8, NovoControlTemplates_ng_template_8_Template, 4, 4, "ng-template", 8);
        ɵɵtemplate(9, NovoControlTemplates_ng_template_9_Template, 2, 11, "ng-template", 9);
        ɵɵtemplate(10, NovoControlTemplates_ng_template_10_Template, 2, 11, "ng-template", 10);
        ɵɵtemplate(11, NovoControlTemplates_ng_template_11_Template, 3, 4, "ng-template", 11);
        ɵɵtemplate(12, NovoControlTemplates_ng_template_12_Template, 2, 12, "ng-template", 12);
        ɵɵtemplate(13, NovoControlTemplates_ng_template_13_Template, 2, 11, "ng-template", 13);
        ɵɵtemplate(14, NovoControlTemplates_ng_template_14_Template, 2, 17, "ng-template", 14);
        ɵɵtemplate(15, NovoControlTemplates_ng_template_15_Template, 2, 15, "ng-template", 15);
        ɵɵtemplate(16, NovoControlTemplates_ng_template_16_Template, 2, 4, "ng-template", 16);
        ɵɵtemplate(17, NovoControlTemplates_ng_template_17_Template, 2, 11, "ng-template", 17);
        ɵɵtemplate(18, NovoControlTemplates_ng_template_18_Template, 2, 10, "ng-template", 18);
        ɵɵtemplate(19, NovoControlTemplates_ng_template_19_Template, 2, 11, "ng-template", 19);
    } }, directives: [NovoTemplate, NgControlStatusGroup, FormGroupDirective, TooltipDirective, NgIf, DefaultValueAccessor, MaskedInputDirective, NgControlStatus, FormControlName, MaxLengthValidator, NovoAutoSize, NovoCKEditorElement, NovoAceEditor, SelectControlValueAccessor, NgForOf, NgSelectOption, ɵangular_packages_forms_forms_x, NovoFileInputElement, NovoTilesElement, NovoPickerElement, NovoChipsElement, NovoRowChipsElement, NovoSelectElement, NovoRadioGroup, NovoRadioElement, NovoTimePickerInputElement, NovoDatePickerInputElement, NovoDateTimePickerInputElement, NovoAddressElement, NovoCheckboxElement, NovoCheckListElement, QuickNoteElement], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoControlTemplates, [{
        type: Component,
        args: [{
                selector: 'novo-control-templates',
                template: `
    <!---Readonly--->
    <ng-template novoTemplate="read-only" let-form="form" let-control>
      <div>{{ form.value[control.key] }}</div>
    </ng-template>
    <!--Textbox--->
    <ng-template novoTemplate="textbox" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div
        [formGroup]="form"
        class="novo-control-input-container novo-control-input-with-label"
        [tooltip]="control?.tooltip"
        [tooltipPosition]="control?.tooltipPosition"
        [tooltipSize]="control?.tooltipSize"
        [tooltipPreline]="control?.tooltipPreline"
        [removeTooltipArrow]="control?.removeTooltipArrow"
        [tooltipAutoPosition]="control?.tooltipAutoPosition"
      >
        <input
          *ngIf="control?.type !== 'number' && control?.textMaskEnabled"
          [textMask]="control.maskOptions"
          [formControlName]="control.key"
          [id]="control.key"
          [type]="control?.type"
          [placeholder]="control?.placeholder"
          (input)="methods.emitChange($event)"
          (focus)="methods.handleFocus($event)"
          (blur)="methods.handleBlur($event)"
          autocomplete
        />
        <input
          *ngIf="control?.type !== 'number' && !control?.textMaskEnabled"
          [class.maxlength-error]="errors?.maxlength"
          [formControlName]="control.key"
          [id]="control.key"
          [type]="control?.type"
          [placeholder]="control?.placeholder"
          (input)="methods.emitChange($event)"
          [maxlength]="control?.maxlength"
          (focus)="methods.handleFocus($event)"
          (blur)="methods.handleBlur($event)"
          autocomplete
        />
        <input
          *ngIf="control?.type === 'number' && control?.subType !== 'percentage'"
          [class.maxlength-error]="errors?.maxlength"
          [formControlName]="control.key"
          [id]="control.key"
          [type]="control?.type"
          [placeholder]="control?.placeholder"
          (keydown)="methods.restrictKeys($event)"
          (input)="methods.emitChange($event)"
          [maxlength]="control?.maxlength"
          (focus)="methods.handleFocus($event)"
          (blur)="methods.handleBlur($event)"
          step="any"
          (mousewheel)="numberInput.blur()"
          #numberInput
        />
        <input
          *ngIf="control?.type === 'number' && control?.subType === 'percentage'"
          [type]="control?.type"
          [placeholder]="control?.placeholder"
          (keydown)="methods.restrictKeys($event)"
          [value]="control?.percentValue"
          (input)="methods.handlePercentChange($event)"
          (focus)="methods.handleFocus($event)"
          (blur)="methods.handleBlur($event)"
          step="any"
          (mousewheel)="percentInput.blur()"
          #percentInput
        />
        <label class="input-label" *ngIf="control?.subType === 'currency'">{{ control.currencyFormat }}</label>
        <label class="input-label" *ngIf="control?.subType === 'percentage'">%</label>
      </div>
    </ng-template>

    <!--Textarea--->
    <ng-template novoTemplate="text-area" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div
        class="textarea-container"
        [formGroup]="form"
        [tooltip]="control?.tooltip"
        [tooltipPosition]="control?.tooltipPosition"
        [tooltipSize]="control?.tooltipSize"
        [tooltipPreline]="control?.tooltipPreline"
        [removeTooltipArrow]="control?.removeTooltipArrow"
        [tooltipAutoPosition]="control?.tooltipAutoPosition"
      >
        <textarea
          [class.maxlength-error]="errors?.maxlength"
          [name]="control.key"
          [attr.id]="control.key"
          [placeholder]="control.placeholder"
          [formControlName]="control.key"
          autosize
          (input)="methods.handleTextAreaInput($event)"
          (focus)="methods.handleFocus($event)"
          (blur)="methods.handleBlur($event)"
          [maxlength]="control?.maxlength"
        ></textarea>
      </div>
    </ng-template>

    <!--Editor-->
    <ng-template novoTemplate="editor" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div [formGroup]="form">
        <novo-editor
          [name]="control.key"
          [formControlName]="control.key"
          [startupFocus]="control.startupFocus"
          [minimal]="control.minimal"
          [fileBrowserImageUploadUrl]="control.fileBrowserImageUploadUrl"
          (focus)="methods.handleFocus($event)"
          (blur)="methods.handleBlur($event)"
          [config]="control.config"
        ></novo-editor>
      </div>
    </ng-template>

    <!--AceEditor-->
    <ng-template novoTemplate="ace-editor" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div [formGroup]="form">
        <novo-ace-editor
          [name]="control.key"
          [formControlName]="control.key"
          (focus)="methods.handleFocus($event)"
          (blur)="methods.handleBlur($event)"
        ></novo-ace-editor>
      </div>
    </ng-template>

    <!--HTML5 Select-->
    <ng-template novoTemplate="native-select" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div [formGroup]="form">
        <select
          [id]="control.key"
          [formControlName]="control.key"
          [tooltip]="control.tooltip"
          [tooltipPosition]="control.tooltipPosition"
          [tooltipSize]="control?.tooltipSize"
          [tooltipPreline]="control?.tooltipPreline"
          [removeTooltipArrow]="control?.removeTooltipArrow"
          [tooltipAutoPosition]="control?.tooltipAutoPosition"
        >
          <option *ngIf="control.placeholder" value="" disabled selected hidden>{{ control.placeholder }}</option>
          <option *ngFor="let opt of control.options" [value]="opt.key">{{ opt.value }}</option>
        </select>
      </div>
    </ng-template>

    <!--File-->
    <ng-template novoTemplate="file" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div [formGroup]="form">
        <novo-file-input
          [formControlName]="control.key"
          [id]="control.key"
          [name]="control.key"
          [placeholder]="control.placeholder"
          [value]="control.value"
          [multiple]="control.multiple"
          [layoutOptions]="control.layoutOptions"
          [tooltip]="control.tooltip"
          [tooltipPosition]="control.tooltipPosition"
          [tooltipSize]="control?.tooltipSize"
          [tooltipPreline]="control?.tooltipPreline"
          [removeTooltipArrow]="control?.removeTooltipArrow"
          [tooltipAutoPosition]="control?.tooltipAutoPosition"
          (edit)="methods.handleEdit($event)"
          (save)="methods.handleSave($event)"
          (delete)="methods.handleDelete($event)"
          (upload)="methods.handleUpload($event)"
        ></novo-file-input>
      </div>
    </ng-template>

    <!--Tiles-->
    <ng-template novoTemplate="tiles" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div [formGroup]="form">
        <novo-tiles
          [options]="control.options"
          [formControlName]="control.key"
          (onChange)="methods.modelChange($event)"
          [tooltip]="control.tooltip"
          [tooltipPosition]="control.tooltipPosition"
          [tooltipSize]="control?.tooltipSize"
          [tooltipPreline]="control?.tooltipPreline"
          [removeTooltipArrow]="control?.removeTooltipArrow"
          [tooltipAutoPosition]="control?.tooltipAutoPosition"
          [controlDisabled]="control.disabled"
        ></novo-tiles>
      </div>
    </ng-template>

    <!--Picker-->
    <ng-template novoTemplate="picker" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div [formGroup]="form" class="novo-control-input-container">
        <novo-picker
          [config]="control.config"
          [formControlName]="control.key"
          [placeholder]="control.placeholder"
          [parentScrollSelector]="control.parentScrollSelector"
          *ngIf="!control.multiple"
          (select)="methods.modelChange($event)"
          (changed)="methods.modelChangeWithRaw($event)"
          (typing)="methods.handleTyping($event)"
          (focus)="methods.handleFocus($event)"
          (blur)="methods.handleBlur($event)"
          [tooltip]="control.tooltip"
          [tooltipPosition]="control.tooltipPosition"
          [tooltipSize]="control?.tooltipSize"
          [tooltipPreline]="control?.tooltipPreline"
          [removeTooltipArrow]="control?.removeTooltipArrow"
          [tooltipAutoPosition]="control?.tooltipAutoPosition"
        ></novo-picker>
        <novo-chips
          [source]="control.config"
          [type]="control.config.type"
          [formControlName]="control.key"
          [placeholder]="control.placeholder"
          [maxlength]="control?.maxlength"
          *ngIf="control.multiple && !control.config.columns"
          [closeOnSelect]="control.closeOnSelect"
          (changed)="methods.modelChangeWithRaw($event)"
          (typing)="methods.handleTyping($event)"
          (focus)="methods.handleFocus($event)"
          (blur)="methods.handleBlur($event)"
          [tooltip]="control.tooltip"
          [tooltipPosition]="control.tooltipPosition"
          [tooltipSize]="control?.tooltipSize"
          [tooltipPreline]="control?.tooltipPreline"
          [removeTooltipArrow]="control?.removeTooltipArrow"
          [tooltipAutoPosition]="control?.tooltipAutoPosition"
        ></novo-chips>
        <novo-row-chips
          [source]="control.config"
          [type]="control.config.type"
          [formControlName]="control.key"
          [placeholder]="control.placeholder"
          *ngIf="control.multiple && control.config.columns"
          [closeOnSelect]="control.closeOnSelect"
          (changed)="methods.modelChangeWithRaw($event)"
          (typing)="methods.handleTyping($event)"
          (focus)="methods.handleFocus($event)"
          (blur)="methods.handleBlur($event)"
          [tooltip]="control.tooltip"
          [tooltipPosition]="control.tooltipPosition"
          [tooltipSize]="control?.tooltipSize"
          [tooltipPreline]="control?.tooltipPreline"
          [removeTooltipArrow]="control?.removeTooltipArrow"
          [tooltipAutoPosition]="control?.tooltipAutoPosition"
        ></novo-row-chips>
      </div>
    </ng-template>

    <!--Novo Select-->
    <ng-template novoTemplate="select" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div [formGroup]="form">
        <novo-select
          [options]="control.options"
          [headerConfig]="control.headerConfig"
          [placeholder]="control.placeholder"
          [formControlName]="control.key"
          [tooltip]="control.tooltip"
          [tooltipPosition]="control.tooltipPosition"
          [tooltipSize]="control?.tooltipSize"
          [tooltipPreline]="control?.tooltipPreline"
          [removeTooltipArrow]="control?.removeTooltipArrow"
          [tooltipAutoPosition]="control?.tooltipAutoPosition"
          (onSelect)="methods.modelChange($event)"
        ></novo-select>
      </div>
    </ng-template>

    <!--Timezone -->
    <ng-template novoTemplate="timezone" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div [formGroup]="form">
        <novo-select
          [options]="control.options"
          [headerConfig]="control.headerConfig"
          [placeholder]="control.placeholder"
          [formControlName]="control.key"
          [tooltip]="control.tooltip"
          [tooltipPosition]="control.tooltipPosition"
          [tooltipSize]="control?.tooltipSize"
          [tooltipPreline]="control?.tooltipPreline"
          [removeTooltipArrow]="control?.removeTooltipArrow"
          [tooltipAutoPosition]="control?.tooltipAutoPosition"
          position="bottom"
          (onSelect)="methods.modelChange($event)"
        ></novo-select>
      </div>
    </ng-template>

    <!--Radio-->
    <ng-template novoTemplate="radio" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div [formGroup]="form" class="novo-control-input-container">
        <novo-radio-group [name]="control.key" [formControlName]="control.key">
          <novo-radio
            *ngFor="let option of control.options"
            [value]="option.value"
            [label]="option.label"
            [checked]="option.value === form.value[control.key] || (form.value[control.key] && option.value === form.value[control.key].id)"
            [tooltip]="control.tooltip"
            [tooltipPosition]="control.tooltipPosition"
            [tooltipSize]="control?.tooltipSize"
            [tooltipPreline]="control?.tooltipPreline"
            [removeTooltipArrow]="control?.removeTooltipArrow"
            [tooltipAutoPosition]="control?.tooltipAutoPosition"
            [button]="!!option.icon"
            [icon]="option.icon"
            [color]="option.color"
            [theme]="!!option.icon && !option.label ? 'icon' : null"
            [attr.data-automation-id]="control.key + '-' + (option?.label || option?.value)"
          ></novo-radio>
        </novo-radio-group>
      </div>
    </ng-template>

    <!--Time-->
    <ng-template novoTemplate="time" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div
        [formGroup]="form"
        class="novo-control-input-container"
        [tooltip]="control?.tooltip"
        [tooltipPosition]="control?.tooltipPosition"
        [tooltipSize]="control?.tooltipSize"
        [tooltipPreline]="control?.tooltipPreline"
        [removeTooltipArrow]="control?.removeTooltipArrow"
        [tooltipAutoPosition]="control?.tooltipAutoPosition"
      >
        <novo-time-picker-input
          [attr.id]="control.key"
          [name]="control.key"
          [formControlName]="control.key"
          [placeholder]="control.placeholder"
          [military]="control.military"
        ></novo-time-picker-input>
      </div>
    </ng-template>

    <!--Native Input--->
    <ng-template novoTemplate="native-input" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div
        [formGroup]="form"
        class="novo-control-input-container novo-control-input-with-label"
        [tooltip]="control?.tooltip"
        [tooltipPosition]="control?.tooltipPosition"
        [tooltipSize]="control?.tooltipSize"
        [tooltipPreline]="control?.tooltipPreline"
        [removeTooltipArrow]="control?.removeTooltipArrow"
        [tooltipAutoPosition]="control?.tooltipAutoPosition"
      >
        <input
          [formControlName]="control.key"
          [id]="control.key"
          [type]="control.type"
          [placeholder]="control?.placeholder"
          (input)="methods.emitChange($event)"
          (focus)="methods.handleFocus($event)"
          (blur)="methods.handleBlur($event)"
        />
      </div>
    </ng-template>

    <!--Date-->
    <ng-template novoTemplate="date" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div
        [formGroup]="form"
        class="novo-control-input-container"
        [tooltip]="control.tooltip"
        [tooltipPosition]="control.tooltipPosition"
        [tooltipSize]="control?.tooltipSize"
        [tooltipPreline]="control?.tooltipPreline"
        [removeTooltipArrow]="control?.removeTooltipArrow"
        [tooltipAutoPosition]="control?.tooltipAutoPosition"
      >
        <novo-date-picker-input
          [attr.id]="control.key"
          [name]="control.key"
          [formControlName]="control.key"
          [start]="control.startDate"
          [end]="control.endDate"
          [format]="control.dateFormat"
          [allowInvalidDate]="control.allowInvalidDate"
          [textMaskEnabled]="control.textMaskEnabled"
          [placeholder]="control.placeholder"
          [weekStart]="control.weekStart"
          (focusEvent)="methods.handleFocus($event)"
          (blurEvent)="methods.handleBlur($event)"
        ></novo-date-picker-input>
      </div>
    </ng-template>

    <!--Date and Time-->
    <ng-template novoTemplate="date-time" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div
        [formGroup]="form"
        class="novo-control-input-container"
        [tooltip]="control.tooltip"
        [tooltipPosition]="control.tooltipPosition"
        [tooltipSize]="control?.tooltipSize"
        [tooltipPreline]="control?.tooltipPreline"
        [removeTooltipArrow]="control?.removeTooltipArrow"
        [tooltipAutoPosition]="control?.tooltipAutoPosition"
      >
        <novo-date-time-picker-input
          [attr.id]="control.key"
          [name]="control.key"
          [formControlName]="control.key"
          [start]="control.startDate"
          [end]="control.endDate"
          [placeholder]="control.placeholder"
          [military]="control.military"
          [weekStart]="control.weekStart"
          (focusEvent)="methods.handleFocus($event)"
          (blurEvent)="methods.handleBlur($event)"
        ></novo-date-time-picker-input>
      </div>
    </ng-template>

    <!--Address-->
    <ng-template novoTemplate="address" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div [formGroup]="form">
        <novo-address
          [formControlName]="control.key"
          [config]="control?.config"
          [readOnly]="control?.readOnly"
          (change)="methods.handleAddressChange($event)"
          (focus)="methods.handleFocus($event.event, $event.field)"
          (blur)="methods.handleBlur($event.event, $event.field)"
          (validityChange)="methods.updateValidity()"
        ></novo-address>
      </div>
    </ng-template>

    <!--Checkbox-->
    <ng-template novoTemplate="checkbox" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div [formGroup]="form">
        <novo-checkbox
          [formControlName]="control?.key"
          [name]="control?.key"
          [label]="control?.checkboxLabel"
          [tooltip]="control?.tooltip"
          [tooltipPosition]="control?.tooltipPosition"
          [tooltipSize]="control?.tooltipSize"
          [tooltipPreline]="control?.tooltipPreline"
          [removeTooltipArrow]="control?.removeTooltipArrow"
          [tooltipAutoPosition]="control?.tooltipAutoPosition"
          [layoutOptions]="control?.layoutOptions"
        ></novo-checkbox>
      </div>
    </ng-template>

    <!--Checklist-->
    <ng-template novoTemplate="checklist" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div [formGroup]="form">
        <novo-check-list
          [formControlName]="control.key"
          [name]="control.key"
          [options]="control?.options"
          [tooltip]="control?.tooltip"
          [tooltipPosition]="control?.tooltipPosition"
          [tooltipSize]="control?.tooltipSize"
          [tooltipPreline]="control?.tooltipPreline"
          [removeTooltipArrow]="control?.removeTooltipArrow"
          [tooltipAutoPosition]="control?.tooltipAutoPosition"
          (onSelect)="methods.modelChange($event)"
        ></novo-check-list>
      </div>
    </ng-template>

    <!--QuickNote-->
    <ng-template novoTemplate="quick-note" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div [formGroup]="form">
        <novo-quick-note
          [formControlName]="control.key"
          [startupFocus]="control?.startupFocus"
          [placeholder]="control?.placeholder"
          [config]="control?.config"
          (change)="methods.modelChange($event)"
          [tooltip]="control?.tooltip"
          [tooltipPosition]="control?.tooltipPosition"
          [tooltipSize]="control?.tooltipSize"
          [removeTooltipArrow]="control?.removeTooltipArrow"
          [tooltipAutoPosition]="control?.tooltipAutoPosition"
          [tooltipPreline]="control?.tooltipPreline"
        ></novo-quick-note>
      </div>
    </ng-template>
  `,
            }]
    }], function () { return [{ type: NovoTemplateService }]; }, { defaultTemplates: [{
            type: ViewChildren,
            args: [NovoTemplate]
        }] }); })();

// NG
function NovoFieldsetElement_novo_fieldset_header_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-fieldset-header", 3);
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵclassProp("embedded", ctx_r0.isEmbedded)("inline-embedded", ctx_r0.isInlineEmbedded)("hidden", ctx_r0.hidden);
    ɵɵproperty("icon", ctx_r0.icon)("title", ctx_r0.title);
} }
function NovoFieldsetElement_ng_container_2_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 6);
    ɵɵelement(1, "novo-control", 7);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵɵnextContext();
    const control_r2 = ctx_r6.$implicit;
    const controlIndex_r3 = ctx_r6.index;
    const ctx_r4 = ɵɵnextContext();
    ɵɵclassProp("disabled", control_r2.disabled);
    ɵɵadvance(1);
    ɵɵproperty("autoFocus", ctx_r4.autoFocus && ctx_r4.index === 0 && controlIndex_r3 === 0)("control", control_r2)("form", ctx_r4.form);
} }
function NovoFieldsetElement_ng_container_2_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div");
    ɵɵtext(1, "TODO - GroupedControl");
    ɵɵelementEnd();
} }
function NovoFieldsetElement_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, NovoFieldsetElement_ng_container_2_div_1_Template, 2, 5, "div", 4);
    ɵɵtemplate(2, NovoFieldsetElement_ng_container_2_div_2_Template, 2, 0, "div", 5);
    ɵɵelementContainerEnd();
} if (rf & 2) {
    const control_r2 = ctx.$implicit;
    ɵɵadvance(1);
    ɵɵproperty("ngIf", control_r2.__type !== "GroupedControl");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", control_r2.__type === "GroupedControl");
} }
function NovoDynamicFormElement_ng_container_6_novo_fieldset_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-fieldset", 4);
} if (rf & 2) {
    const ctx_r4 = ɵɵnextContext();
    const i_r2 = ctx_r4.index;
    const fieldset_r1 = ctx_r4.$implicit;
    const ctx_r3 = ɵɵnextContext();
    ɵɵproperty("index", i_r2)("autoFocus", ctx_r3.autoFocusFirstField)("icon", fieldset_r1.icon)("controls", fieldset_r1.controls)("title", fieldset_r1.title)("form", ctx_r3.form)("isEmbedded", fieldset_r1.isEmbedded)("isInlineEmbedded", fieldset_r1.isInlineEmbedded)("hidden", fieldset_r1.hidden);
} }
function NovoDynamicFormElement_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, NovoDynamicFormElement_ng_container_6_novo_fieldset_1_Template, 1, 9, "novo-fieldset", 3);
    ɵɵelementContainerEnd();
} if (rf & 2) {
    const fieldset_r1 = ctx.$implicit;
    ɵɵadvance(1);
    ɵɵproperty("ngIf", fieldset_r1.controls.length);
} }
const _c0$15 = [[["form-title"]], [["form-subtitle"]]];
const _c1$s = ["form-title", "form-subtitle"];
class NovoFieldsetHeaderElement {
}
NovoFieldsetHeaderElement.ɵfac = function NovoFieldsetHeaderElement_Factory(t) { return new (t || NovoFieldsetHeaderElement)(); };
NovoFieldsetHeaderElement.ɵcmp = ɵɵdefineComponent({ type: NovoFieldsetHeaderElement, selectors: [["novo-fieldset-header"]], inputs: { title: "title", icon: "icon" }, decls: 3, vars: 3, template: function NovoFieldsetHeaderElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "h6");
        ɵɵelement(1, "i");
        ɵɵtext(2);
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵadvance(1);
        ɵɵclassMap(ctx.icon || "bhi-section");
        ɵɵadvance(1);
        ɵɵtextInterpolate(ctx.title);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoFieldsetHeaderElement, [{
        type: Component,
        args: [{
                selector: 'novo-fieldset-header',
                template: ` <h6><i [class]="icon || 'bhi-section'"></i>{{ title }}</h6> `,
            }]
    }], null, { title: [{
            type: Input
        }], icon: [{
            type: Input
        }] }); })();
class NovoFieldsetElement {
    constructor() {
        this.controls = [];
        this.isEmbedded = false;
        this.isInlineEmbedded = false;
        this.hidden = false;
    }
}
NovoFieldsetElement.ɵfac = function NovoFieldsetElement_Factory(t) { return new (t || NovoFieldsetElement)(); };
NovoFieldsetElement.ɵcmp = ɵɵdefineComponent({ type: NovoFieldsetElement, selectors: [["novo-fieldset"]], inputs: { controls: "controls", form: "form", title: "title", icon: "icon", index: "index", autoFocus: "autoFocus", isEmbedded: "isEmbedded", isInlineEmbedded: "isInlineEmbedded", hidden: "hidden" }, decls: 3, vars: 2, consts: [[1, "novo-fieldset-container"], [3, "icon", "title", "embedded", "inline-embedded", "hidden", 4, "ngIf"], [4, "ngFor", "ngForOf"], [3, "icon", "title"], ["class", "novo-form-row", 3, "disabled", 4, "ngIf"], [4, "ngIf"], [1, "novo-form-row"], [3, "autoFocus", "control", "form"]], template: function NovoFieldsetElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "div", 0);
        ɵɵtemplate(1, NovoFieldsetElement_novo_fieldset_header_1_Template, 1, 8, "novo-fieldset-header", 1);
        ɵɵtemplate(2, NovoFieldsetElement_ng_container_2_Template, 3, 2, "ng-container", 2);
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.title);
        ɵɵadvance(1);
        ɵɵproperty("ngForOf", ctx.controls);
    } }, directives: [NgIf, NgForOf, NovoFieldsetHeaderElement, NovoControlElement], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoFieldsetElement, [{
        type: Component,
        args: [{
                selector: 'novo-fieldset',
                template: `
    <div class="novo-fieldset-container">
      <novo-fieldset-header
        [icon]="icon"
        [title]="title"
        *ngIf="title"
        [class.embedded]="isEmbedded"
        [class.inline-embedded]="isInlineEmbedded"
        [class.hidden]="hidden"
      ></novo-fieldset-header>
      <ng-container *ngFor="let control of controls; let controlIndex = index">
        <div class="novo-form-row" [class.disabled]="control.disabled" *ngIf="control.__type !== 'GroupedControl'">
          <novo-control [autoFocus]="autoFocus && index === 0 && controlIndex === 0" [control]="control" [form]="form"></novo-control>
        </div>
        <div *ngIf="control.__type === 'GroupedControl'">TODO - GroupedControl</div>
      </ng-container>
    </div>
  `,
            }]
    }], null, { controls: [{
            type: Input
        }], form: [{
            type: Input
        }], title: [{
            type: Input
        }], icon: [{
            type: Input
        }], index: [{
            type: Input
        }], autoFocus: [{
            type: Input
        }], isEmbedded: [{
            type: Input
        }], isInlineEmbedded: [{
            type: Input
        }], hidden: [{
            type: Input
        }] }); })();
class NovoDynamicFormElement {
    constructor(element, templates) {
        this.element = element;
        this.templates = templates;
        this.controls = [];
        this.fieldsets = [];
        this.hideNonRequiredFields = true;
        this.autoFocusFirstField = false;
        this.allFieldsRequired = false;
        this.allFieldsNotRequired = false;
        this.showingAllFields = false;
        this.showingRequiredFields = true;
        this.numControls = 0;
    }
    ngOnInit() {
        this.ngOnChanges();
    }
    ngOnChanges(changes) {
        this.form.layout = this.layout;
        if (!(this.fieldsets && this.fieldsets.length) && this.controls && this.controls.length) {
            this.fieldsets = [
                {
                    controls: this.controls,
                },
            ];
            this.numControls = this.controls.length;
        }
        else if (this.fieldsets) {
            this.fieldsets.forEach((fieldset) => {
                this.numControls = this.numControls + fieldset.controls.length;
            });
        }
        const requiredFields = [];
        const nonRequiredFields = [];
        this.fieldsets.forEach((fieldset) => {
            fieldset.controls.forEach((control) => {
                if (control.required) {
                    requiredFields.push(control);
                }
                else {
                    nonRequiredFields.push(control);
                }
            });
        });
        this.allFieldsRequired = requiredFields.length === this.numControls;
        this.allFieldsNotRequired = nonRequiredFields.length === this.numControls;
        if (this.allFieldsNotRequired && this.hideNonRequiredFields) {
            this.fieldsets.forEach((fieldset) => {
                fieldset.controls.forEach((control) => {
                    this.form.controls[control.key].hidden = false;
                });
            });
        }
        this.form.fieldsets = [...this.fieldsets];
    }
    ngAfterContentInit() {
        if (this.customTemplates && this.customTemplates.length) {
            this.customTemplates.forEach((template) => {
                this.templates.addCustom(template.name, template.template);
            });
        }
    }
    showAllFields() {
        this.form.fieldsets.forEach((fieldset) => {
            fieldset.controls.forEach((control) => {
                const ctl = this.form.controls[control.key];
                if (!this.fieldsAlreadyHidden.includes(control.key)) {
                    ctl.hidden = false;
                }
            });
        });
        this.showingAllFields = true;
        this.showingRequiredFields = false;
    }
    showOnlyRequired(hideRequiredWithValue) {
        this.fieldsAlreadyHidden = [];
        this.form.fieldsets.forEach((fieldset) => {
            fieldset.controls.forEach((control) => {
                const ctl = this.form.controls[control.key];
                if (ctl.hidden) {
                    this.fieldsAlreadyHidden.push(control.key);
                }
                // Hide any non-required fields
                if (!control.required) {
                    ctl.hidden = true;
                }
                // Hide required fields that have been successfully filled out
                if (hideRequiredWithValue &&
                    !Helpers.isBlank(this.form.value[control.key]) &&
                    (!control.isEmpty || (control.isEmpty && control.isEmpty(ctl)))) {
                    ctl.hidden = true;
                }
                // Don't hide fields with errors
                if (ctl.errors) {
                    ctl.hidden = false;
                }
            });
        });
        this.showingAllFields = false;
        this.showingRequiredFields = true;
        this.forceValidation();
    }
    get values() {
        return this.form ? this.form.value : null;
    }
    get isValid() {
        return this.form ? this.form.valid : false;
    }
    updatedValues() {
        let ret = null;
        this.form.fieldsets.forEach((fieldset) => {
            fieldset.controls.forEach((control) => {
                if (this.form.controls[control.key].dirty || control.dirty) {
                    if (!ret) {
                        ret = {};
                    }
                    ret[control.key] = this.form.value[control.key];
                }
            });
        });
        return ret;
    }
    forceValidation() {
        Object.keys(this.form.controls).forEach((key) => {
            const control = this.form.controls[key];
            if (control.required && Helpers.isBlank(this.form.value[control.key])) {
                control.markAsDirty();
                control.markAsTouched();
            }
        });
    }
}
NovoDynamicFormElement.ɵfac = function NovoDynamicFormElement_Factory(t) { return new (t || NovoDynamicFormElement)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NovoTemplateService)); };
NovoDynamicFormElement.ɵcmp = ɵɵdefineComponent({ type: NovoDynamicFormElement, selectors: [["novo-dynamic-form"]], contentQueries: function NovoDynamicFormElement_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵɵcontentQuery(dirIndex, NovoTemplate, false);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.customTemplates = _t);
    } }, inputs: { controls: "controls", fieldsets: "fieldsets", form: "form", layout: "layout", hideNonRequiredFields: "hideNonRequiredFields", autoFocusFirstField: "autoFocusFirstField" }, features: [ɵɵProvidersFeature([NovoTemplateService]), ɵɵNgOnChangesFeature], ngContentSelectors: _c1$s, decls: 7, vars: 2, consts: [[1, "novo-form-container"], [1, "novo-form", 3, "formGroup"], [4, "ngFor", "ngForOf"], [3, "index", "autoFocus", "icon", "controls", "title", "form", "isEmbedded", "isInlineEmbedded", "hidden", 4, "ngIf"], [3, "index", "autoFocus", "icon", "controls", "title", "form", "isEmbedded", "isInlineEmbedded", "hidden"]], template: function NovoDynamicFormElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef(_c0$15);
        ɵɵelement(0, "novo-control-templates");
        ɵɵelementStart(1, "div", 0);
        ɵɵelementStart(2, "header");
        ɵɵprojection(3);
        ɵɵprojection(4, 1);
        ɵɵelementEnd();
        ɵɵelementStart(5, "form", 1);
        ɵɵtemplate(6, NovoDynamicFormElement_ng_container_6_Template, 2, 1, "ng-container", 2);
        ɵɵelementEnd();
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵadvance(5);
        ɵɵproperty("formGroup", ctx.form);
        ɵɵadvance(1);
        ɵɵproperty("ngForOf", ctx.form.fieldsets);
    } }, directives: [NovoControlTemplates, ɵangular_packages_forms_forms_y, NgControlStatusGroup, FormGroupDirective, NgForOf, NgIf, NovoFieldsetElement], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDynamicFormElement, [{
        type: Component,
        args: [{
                selector: 'novo-dynamic-form',
                template: `
    <novo-control-templates></novo-control-templates>
    <div class="novo-form-container">
      <header>
        <ng-content select="form-title"></ng-content>
        <ng-content select="form-subtitle"></ng-content>
      </header>
      <form class="novo-form" [formGroup]="form">
        <ng-container *ngFor="let fieldset of form.fieldsets; let i = index">
          <novo-fieldset
            *ngIf="fieldset.controls.length"
            [index]="i"
            [autoFocus]="autoFocusFirstField"
            [icon]="fieldset.icon"
            [controls]="fieldset.controls"
            [title]="fieldset.title"
            [form]="form"
            [isEmbedded]="fieldset.isEmbedded"
            [isInlineEmbedded]="fieldset.isInlineEmbedded"
            [hidden]="fieldset.hidden"
          ></novo-fieldset>
        </ng-container>
      </form>
    </div>
  `,
                providers: [NovoTemplateService],
            }]
    }], function () { return [{ type: ElementRef }, { type: NovoTemplateService }]; }, { controls: [{
            type: Input
        }], fieldsets: [{
            type: Input
        }], form: [{
            type: Input
        }], layout: [{
            type: Input
        }], hideNonRequiredFields: [{
            type: Input
        }], autoFocusFirstField: [{
            type: Input
        }], customTemplates: [{
            type: ContentChildren,
            args: [NovoTemplate]
        }] }); })();

// NG
function NovoFormElement_header_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "header");
    ɵɵprojection(1, 1);
    ɵɵprojection(2, 2);
    ɵɵelementEnd();
} }
const _c0$16 = ["*", [["form-title"]], [["form-subtitle"]]];
const _c1$t = ["*", "form-title", "form-subtitle"];
class NovoFormElement {
    constructor(templates) {
        this.templates = templates;
        this.hideHeader = false;
        this.showingAllFields = false;
        this.showingRequiredFields = true;
    }
    get value() {
        return this.form.getRawValue();
    }
    get isValid() {
        return this.form.valid;
    }
    ngOnInit() {
        this.form.layout = this.layout;
    }
    ngAfterContentInit() {
        if (this.customTemplates && this.customTemplates.length) {
            this.customTemplates.forEach((template) => {
                this.templates.addCustom(template.name, template.template);
            });
        }
    }
    showAllFields() {
        Object.keys(this.form.controls).forEach((key) => {
            this.form.controls[key].hidden = false;
        });
        this.showingAllFields = true;
        this.showingRequiredFields = false;
    }
    showOnlyRequired(hideRequiredWithValue) {
        Object.keys(this.form.controls).forEach((key) => {
            // Hide any non-required fields
            if (!this.form.controls[key].required) {
                this.form.controls[key].hidden = true;
            }
            // Hide required fields that have been successfully filled out
            if (hideRequiredWithValue && !Helpers.isBlank(this.form.value[key])) {
                this.form.controls[key].hidden = true;
            }
            // Don't hide fields with errors
            if (this.form.controls[key].errors) {
                this.form.controls[key].hidden = false;
            }
        });
        this.showingAllFields = false;
        this.showingRequiredFields = true;
        this.forceValidation();
    }
    forceValidation() {
        Object.keys(this.form.controls).forEach((key) => {
            const control = this.form.controls[key];
            if (control.required && Helpers.isBlank(this.form.value[control.key])) {
                control.markAsDirty();
                control.markAsTouched();
            }
        });
    }
}
NovoFormElement.ɵfac = function NovoFormElement_Factory(t) { return new (t || NovoFormElement)(ɵɵdirectiveInject(NovoTemplateService)); };
NovoFormElement.ɵcmp = ɵɵdefineComponent({ type: NovoFormElement, selectors: [["novo-form"]], contentQueries: function NovoFormElement_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵɵcontentQuery(dirIndex, NovoTemplate, false);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.customTemplates = _t);
    } }, inputs: { form: "form", layout: "layout", hideHeader: "hideHeader" }, features: [ɵɵProvidersFeature([NovoTemplateService])], ngContentSelectors: _c1$t, decls: 5, vars: 2, consts: [[1, "novo-form-container"], [4, "ngIf"], [1, "novo-form", 3, "formGroup"]], template: function NovoFormElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef(_c0$16);
        ɵɵelement(0, "novo-control-templates");
        ɵɵelementStart(1, "div", 0);
        ɵɵtemplate(2, NovoFormElement_header_2_Template, 3, 0, "header", 1);
        ɵɵelementStart(3, "form", 2);
        ɵɵprojection(4);
        ɵɵelementEnd();
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵadvance(2);
        ɵɵproperty("ngIf", !ctx.hideHeader);
        ɵɵadvance(1);
        ɵɵproperty("formGroup", ctx.form);
    } }, directives: [NovoControlTemplates, NgIf, ɵangular_packages_forms_forms_y, NgControlStatusGroup, FormGroupDirective], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoFormElement, [{
        type: Component,
        args: [{
                selector: 'novo-form',
                template: `
    <novo-control-templates></novo-control-templates>
    <div class="novo-form-container">
      <header *ngIf="!hideHeader">
        <ng-content select="form-title"></ng-content>
        <ng-content select="form-subtitle"></ng-content>
      </header>
      <form class="novo-form" [formGroup]="form">
        <ng-content></ng-content>
      </form>
    </div>
  `,
                providers: [NovoTemplateService],
            }]
    }], function () { return [{ type: NovoTemplateService }]; }, { form: [{
            type: Input
        }], layout: [{
            type: Input
        }], hideHeader: [{
            type: Input
        }], customTemplates: [{
            type: ContentChildren,
            args: [NovoTemplate]
        }] }); })();

const _c0$17 = ["*"];
function NovoHeaderComponent_ng_container_3_novo_icon_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-icon", 8);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r2.icon);
} }
function NovoHeaderComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, NovoHeaderComponent_ng_container_3_novo_icon_1_Template, 2, 1, "novo-icon", 4);
    ɵɵelementStart(2, "div", 5);
    ɵɵelementStart(3, "novo-title", 6);
    ɵɵtext(4);
    ɵɵelementEnd();
    ɵɵelementStart(5, "novo-title", 7);
    ɵɵtext(6);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.icon);
    ɵɵadvance(3);
    ɵɵtextInterpolate(ctx_r0.title);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r0.subTitle);
} }
function NovoHeaderComponent_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵprojection(1, 6);
    ɵɵelementStart(2, "div", 5);
    ɵɵprojection(3, 7);
    ɵɵelementEnd();
    ɵɵelementContainerEnd();
} }
const _c1$u = [[["", "prefix", ""]], [["section"]], [["utils"]], [["", "suffix", ""]], [["novo-action"], ["", "novo-action", ""]], "*", [["novo-icon"], ["", "novo-icon", ""]], [["h1"], ["h2"], ["h3"], ["h4"], ["h5"], ["h6"], ["small"], ["novo-title"], ["", "novo-title", ""], ["", "novo-subtitle", ""]]];
const _c2$d = ["[prefix]", "section", "utils", "[suffix]", "novo-action,[novo-action]", "*", "novo-icon, [novo-icon]", "h1, h2, h3, h4, h5, h6, small, novo-title, [novo-title], [novo-subtitle]"];
class NovoHeaderSpacer {
}
NovoHeaderSpacer.ɵfac = function NovoHeaderSpacer_Factory(t) { return new (t || NovoHeaderSpacer)(); };
NovoHeaderSpacer.ɵcmp = ɵɵdefineComponent({ type: NovoHeaderSpacer, selectors: [["header-spacer"]], ngContentSelectors: _c0$17, decls: 1, vars: 0, template: function NovoHeaderSpacer_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoHeaderSpacer, [{
        type: Component,
        args: [{
                selector: 'header-spacer',
                template: `<ng-content></ng-content>`,
            }]
    }], null, null); })();
class NovoUtilsComponent {
}
NovoUtilsComponent.ɵfac = function NovoUtilsComponent_Factory(t) { return new (t || NovoUtilsComponent)(); };
NovoUtilsComponent.ɵcmp = ɵɵdefineComponent({ type: NovoUtilsComponent, selectors: [["utils"]], ngContentSelectors: _c0$17, decls: 1, vars: 0, template: function NovoUtilsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoUtilsComponent, [{
        type: Component,
        args: [{
                selector: 'utils',
                template: `<ng-content></ng-content>`,
            }]
    }], null, null); })();
class NovoUtilActionComponent {
}
NovoUtilActionComponent.ɵfac = function NovoUtilActionComponent_Factory(t) { return new (t || NovoUtilActionComponent)(); };
NovoUtilActionComponent.ɵcmp = ɵɵdefineComponent({ type: NovoUtilActionComponent, selectors: [["util-action"], ["novo-action"]], inputs: { icon: "icon", inverse: "inverse", disabled: "disabled" }, ngContentSelectors: _c0$17, decls: 2, vars: 3, consts: [["theme", "icon", 3, "icon", "disabled"]], template: function NovoUtilActionComponent_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵelementStart(0, "button", 0);
        ɵɵprojection(1);
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵproperty("icon", ctx.icon)("disabled", ctx.disabled);
        ɵɵattribute("inverse", ctx.inverse);
    } }, directives: [NovoButtonElement], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoUtilActionComponent, [{
        type: Component,
        args: [{
                selector: 'util-action, novo-action',
                template: `
    <button theme="icon" [icon]="icon" [attr.inverse]="inverse" [disabled]="disabled">
      <ng-content></ng-content>
    </button>
  `,
            }]
    }], null, { icon: [{
            type: Input
        }], inverse: [{
            type: Input
        }], disabled: [{
            type: Input
        }] }); })();
class NovoHeaderComponent {
    constructor() {
        this.headerClass = 'novo-header';
        this.condensed = false;
        this.inverse = 'inverse';
    }
    get hb_isSizeSmall() {
        return this.size === 'small';
    }
    get hb_isSizeLarge() {
        return this.size === 'large';
    }
    get hb_isSizeDefault() {
        return !['small', 'large'].includes(this.size);
    }
    set theme(theme) {
        this._theme = theme;
        this.inverse = theme === 'white' || theme === 'off-white' || theme === 'light' ? undefined : 'inverse';
    }
    get theme() {
        return this._theme;
    }
    set icon(icon) {
        this._icon = `bhi-${icon}`;
    }
    get icon() {
        return this._icon;
    }
}
NovoHeaderComponent.ɵfac = function NovoHeaderComponent_Factory(t) { return new (t || NovoHeaderComponent)(); };
NovoHeaderComponent.ɵcmp = ɵɵdefineComponent({ type: NovoHeaderComponent, selectors: [["novo-header"], ["header", "theme", ""]], hostVars: 11, hostBindings: function NovoHeaderComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵattribute("theme", ctx.theme);
        ɵɵclassMap(ctx.headerClass);
        ɵɵclassProp("condensed", ctx.condensed)("header-size-small", ctx.hb_isSizeSmall)("header-size-large", ctx.hb_isSizeLarge)("header-size-default", ctx.hb_isSizeDefault);
    } }, inputs: { condensed: "condensed", title: "title", subTitle: "subTitle", size: "size", theme: "theme", icon: "icon" }, ngContentSelectors: _c2$d, decls: 12, vars: 2, consts: [[1, "header-title"], [4, "ngIf"], [1, "spacer"], [1, "header-actions"], ["class", "header-icon", 4, "ngIf"], [1, "header-titles"], ["size", "large"], ["size", "small"], [1, "header-icon"]], template: function NovoHeaderComponent_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef(_c1$u);
        ɵɵelementStart(0, "section");
        ɵɵelementStart(1, "div", 0);
        ɵɵprojection(2);
        ɵɵtemplate(3, NovoHeaderComponent_ng_container_3_Template, 7, 3, "ng-container", 1);
        ɵɵtemplate(4, NovoHeaderComponent_ng_container_4_Template, 4, 0, "ng-container", 1);
        ɵɵelementEnd();
        ɵɵprojection(5, 1);
        ɵɵelement(6, "span", 2);
        ɵɵprojection(7, 2);
        ɵɵprojection(8, 3);
        ɵɵelementStart(9, "div", 3);
        ɵɵprojection(10, 4);
        ɵɵelementEnd();
        ɵɵelementEnd();
        ɵɵprojection(11, 5);
    } if (rf & 2) {
        ɵɵadvance(3);
        ɵɵproperty("ngIf", ctx.title);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", !ctx.title);
    } }, directives: [NgIf, NovoTitle, NovoIconComponent], encapsulation: 2 });
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoHeaderComponent.prototype, "condensed", void 0);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoHeaderComponent, [{
        type: Component,
        args: [{
                selector: 'novo-header,header[theme]',
                template: `
    <section>
      <div class="header-title">
        <ng-content select="[prefix]"></ng-content>
        <ng-container *ngIf="title">
          <novo-icon class="header-icon" *ngIf="icon">{{ icon }}</novo-icon>
          <div class="header-titles">
            <novo-title size="large">{{ title }}</novo-title>
            <novo-title size="small">{{ subTitle }}</novo-title>
          </div>
        </ng-container>
        <ng-container *ngIf="!title">
          <ng-content select="novo-icon, [novo-icon]"></ng-content>
          <div class="header-titles">
            <ng-content select="h1, h2, h3, h4, h5, h6, small, novo-title, [novo-title], [novo-subtitle]"></ng-content>
          </div>
        </ng-container>
      </div>
      <ng-content select="section"></ng-content>
      <span class="spacer"></span>
      <ng-content select="utils"></ng-content>
      <ng-content select="[suffix]"></ng-content>
      <div class="header-actions">
        <ng-content select="novo-action,[novo-action]"></ng-content>
      </div>
    </section>
    <ng-content></ng-content>
  `,
            }]
    }], null, { headerClass: [{
            type: HostBinding,
            args: ['class']
        }], condensed: [{
            type: HostBinding,
            args: ['class.condensed']
        }, {
            type: Input
        }], title: [{
            type: Input
        }], subTitle: [{
            type: Input
        }], size: [{
            type: Input
        }], hb_isSizeSmall: [{
            type: HostBinding,
            args: ['class.header-size-small']
        }], hb_isSizeLarge: [{
            type: HostBinding,
            args: ['class.header-size-large']
        }], hb_isSizeDefault: [{
            type: HostBinding,
            args: ['class.header-size-default']
        }], theme: [{
            type: HostBinding,
            args: ['attr.theme']
        }, {
            type: Input
        }], icon: [{
            type: Input
        }] }); })();

class NovoHeaderModule {
}
NovoHeaderModule.ɵmod = ɵɵdefineNgModule({ type: NovoHeaderModule });
NovoHeaderModule.ɵinj = ɵɵdefineInjector({ factory: function NovoHeaderModule_Factory(t) { return new (t || NovoHeaderModule)(); }, imports: [[CommonModule, NovoCommonModule, NovoIconModule, NovoButtonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoHeaderModule, { declarations: [NovoHeaderComponent, NovoUtilActionComponent, NovoUtilsComponent, NovoHeaderSpacer], imports: [CommonModule, NovoCommonModule, NovoIconModule, NovoButtonModule], exports: [NovoHeaderComponent, NovoUtilActionComponent, NovoUtilsComponent, NovoHeaderSpacer] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoHeaderModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, NovoCommonModule, NovoIconModule, NovoButtonModule],
                declarations: [NovoHeaderComponent, NovoUtilActionComponent, NovoUtilsComponent, NovoHeaderSpacer],
                exports: [NovoHeaderComponent, NovoUtilActionComponent, NovoUtilsComponent, NovoHeaderSpacer],
            }]
    }], null, null); })();

// NG2
const _c0$18 = [[["header"]], [["section"]], [["button"]]];
const _c1$v = ["header", "section", "button"];
function NovoModalNotificationElement_i_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 3);
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵproperty("ngClass", ctx_r0.iconType);
} }
const _c2$e = [[["label"]], [["h1"]], [["h2"]], [["p"]], [["button"]]];
const _c3$7 = ["label", "h1", "h2", "p", "button"];
class NovoModalElement {
    constructor(modalRef) {
        this.modalRef = modalRef;
    }
}
NovoModalElement.ɵfac = function NovoModalElement_Factory(t) { return new (t || NovoModalElement)(ɵɵdirectiveInject(NovoModalRef)); };
NovoModalElement.ɵcmp = ɵɵdefineComponent({ type: NovoModalElement, selectors: [["novo-modal"]], ngContentSelectors: _c1$v, decls: 4, vars: 0, template: function NovoModalElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef(_c0$18);
        ɵɵprojection(0);
        ɵɵprojection(1, 1);
        ɵɵelementStart(2, "footer");
        ɵɵprojection(3, 2);
        ɵɵelementEnd();
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoModalElement, [{
        type: Component,
        args: [{
                selector: 'novo-modal',
                template: `
    <ng-content select="header"></ng-content>
    <ng-content select="section"></ng-content>
    <footer><ng-content select="button"></ng-content></footer>
  `,
            }]
    }], function () { return [{ type: NovoModalRef }]; }, null); })();
class NovoModalNotificationElement {
    constructor(modalRef) {
        this.modalRef = modalRef;
        this.cancel = new EventEmitter();
        this.modalRef = modalRef;
    }
    close() {
        this.cancel.emit();
        this.modalRef.close();
    }
    ngOnInit() {
        switch (this.type) {
            case 'success':
                this.iconType = 'bhi-check';
                break;
            case 'warning':
                this.iconType = 'bhi-caution-o';
                break;
            case 'error':
                this.iconType = 'bhi-caution-o';
                break;
            case 'custom':
                this.iconType = `bhi-${this.icon}`;
                break;
            default:
                break;
        }
    }
}
NovoModalNotificationElement.ɵfac = function NovoModalNotificationElement_Factory(t) { return new (t || NovoModalNotificationElement)(ɵɵdirectiveInject(NovoModalRef)); };
NovoModalNotificationElement.ɵcmp = ɵɵdefineComponent({ type: NovoModalNotificationElement, selectors: [["novo-notification"]], inputs: { type: "type", icon: "icon" }, outputs: { cancel: "cancel" }, ngContentSelectors: _c3$7, decls: 10, vars: 1, consts: [["theme", "icon", "icon", "x", 1, "modal-close", 3, "click"], [1, "notification-body"], ["class", "indicator", 3, "ngClass", 4, "ngIf"], [1, "indicator", 3, "ngClass"]], template: function NovoModalNotificationElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef(_c2$e);
        ɵɵelementStart(0, "button", 0);
        ɵɵlistener("click", function NovoModalNotificationElement_Template_button_click_0_listener() { return ctx.close(); });
        ɵɵelementEnd();
        ɵɵelementStart(1, "header");
        ɵɵprojection(2);
        ɵɵelementEnd();
        ɵɵelementStart(3, "section", 1);
        ɵɵtemplate(4, NovoModalNotificationElement_i_4_Template, 1, 1, "i", 2);
        ɵɵprojection(5, 1);
        ɵɵprojection(6, 2);
        ɵɵprojection(7, 3);
        ɵɵelementEnd();
        ɵɵelementStart(8, "footer");
        ɵɵprojection(9, 4);
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵadvance(4);
        ɵɵproperty("ngIf", ctx.iconType);
    } }, directives: [NovoButtonElement, NgIf, NgClass], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoModalNotificationElement, [{
        type: Component,
        args: [{
                selector: 'novo-notification',
                template: `
    <button class="modal-close" theme="icon" icon="x" (click)="close()"></button>
    <header><ng-content select="label"></ng-content></header>
    <section class="notification-body">
      <i class="indicator" [ngClass]="iconType" *ngIf="iconType"></i>
      <ng-content select="h1"></ng-content>
      <ng-content select="h2"></ng-content>
      <ng-content select="p"></ng-content>
    </section>
    <footer><ng-content select="button"></ng-content></footer>
  `,
            }]
    }], function () { return [{ type: NovoModalRef }]; }, { type: [{
            type: Input
        }], icon: [{
            type: Input
        }], cancel: [{
            type: Output
        }] }); })();

// NG2
class NovoModalModule {
}
NovoModalModule.ɵmod = ɵɵdefineNgModule({ type: NovoModalModule });
NovoModalModule.ɵinj = ɵɵdefineInjector({ factory: function NovoModalModule_Factory(t) { return new (t || NovoModalModule)(); }, providers: [NovoModalService], imports: [[OverlayModule, PortalModule, CommonModule, NovoButtonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoModalModule, { declarations: [NovoModalContainerComponent, NovoModalElement, NovoModalNotificationElement], imports: [OverlayModule, PortalModule, CommonModule, NovoButtonModule], exports: [NovoModalElement, NovoModalNotificationElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoModalModule, [{
        type: NgModule,
        args: [{
                imports: [OverlayModule, PortalModule, CommonModule, NovoButtonModule],
                declarations: [NovoModalContainerComponent, NovoModalElement, NovoModalNotificationElement],
                exports: [NovoModalElement, NovoModalNotificationElement],
                providers: [NovoModalService],
                entryComponents: [NovoModalContainerComponent],
            }]
    }], null, null); })();

// NG2
class NovoQuickNoteModule {
}
NovoQuickNoteModule.ɵmod = ɵɵdefineNgModule({ type: NovoQuickNoteModule });
NovoQuickNoteModule.ɵinj = ɵɵdefineInjector({ factory: function NovoQuickNoteModule_Factory(t) { return new (t || NovoQuickNoteModule)(); }, imports: [[CommonModule, FormsModule, NovoLoadingModule, NovoListModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoQuickNoteModule, { declarations: [QuickNoteElement, QuickNoteResults], imports: [CommonModule, FormsModule, NovoLoadingModule, NovoListModule], exports: [QuickNoteElement, QuickNoteResults] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoQuickNoteModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, FormsModule, NovoLoadingModule, NovoListModule],
                declarations: [QuickNoteElement, QuickNoteResults],
                exports: [QuickNoteElement, QuickNoteResults],
            }]
    }], null, null); })();

// NG2
class NovoRadioModule {
}
NovoRadioModule.ɵmod = ɵɵdefineNgModule({ type: NovoRadioModule });
NovoRadioModule.ɵinj = ɵɵdefineInjector({ factory: function NovoRadioModule_Factory(t) { return new (t || NovoRadioModule)(); }, imports: [[CommonModule, NovoButtonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoRadioModule, { declarations: [NovoRadioElement, NovoRadioGroup], imports: [CommonModule, NovoButtonModule], exports: [NovoRadioElement, NovoRadioGroup] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoRadioModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, NovoButtonModule],
                declarations: [NovoRadioElement, NovoRadioGroup],
                exports: [NovoRadioElement, NovoRadioGroup],
            }]
    }], null, null); })();

// NG2
class NovoTipWellModule {
}
NovoTipWellModule.ɵmod = ɵɵdefineNgModule({ type: NovoTipWellModule });
NovoTipWellModule.ɵinj = ɵɵdefineInjector({ factory: function NovoTipWellModule_Factory(t) { return new (t || NovoTipWellModule)(); }, imports: [[CommonModule, NovoButtonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoTipWellModule, { declarations: [NovoTipWellElement], imports: [CommonModule, NovoButtonModule], exports: [NovoTipWellElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTipWellModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, NovoButtonModule],
                declarations: [NovoTipWellElement],
                exports: [NovoTipWellElement],
            }]
    }], null, null); })();
ɵɵsetComponentScope(NovoTipWellElement, [NgClass, NgComponentOutlet, NgForOf, NgIf, NgTemplateOutlet, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase, NovoButtonElement, NovoTipWellElement], [AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, TitleCasePipe, CurrencyPipe, DatePipe, I18nPluralPipe, I18nSelectPipe, KeyValuePipe]);

// NG2
class NovoFormModule {
}
NovoFormModule.ɵmod = ɵɵdefineNgModule({ type: NovoFormModule });
NovoFormModule.ɵinj = ɵɵdefineInjector({ factory: function NovoFormModule_Factory(t) { return new (t || NovoFormModule)(); }, providers: [NovoTemplateService], imports: [[
            CommonModule,
            OverlayModule,
            ReactiveFormsModule,
            NovoRadioModule,
            NovoTilesModule,
            NovoSelectModule,
            NovoPickerModule,
            NovoChipsModule,
            NovoDatePickerModule,
            NovoTimePickerModule,
            NovoNovoCKEditorModule,
            NovoFormExtrasModule,
            NovoQuickNoteModule,
            NovoDateTimePickerModule,
            NovoHeaderModule,
            NovoTooltipModule,
            NovoDragulaModule,
            IMaskDirectiveModule,
            TextMaskModule,
            NovoTipWellModule,
            NovoModalModule,
            NovoButtonModule,
            NovoAceEditorModule,
            NovoCommonModule,
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoFormModule, { declarations: [NovoAutoSize,
        NovoControlElement,
        NovoDynamicFormElement,
        NovoFormElement,
        NovoFieldsetElement,
        NovoFieldsetHeaderElement,
        ControlConfirmModal,
        ControlPromptModal,
        NovoControlGroup,
        NovoControlTemplates], imports: [CommonModule,
        OverlayModule,
        ReactiveFormsModule,
        NovoRadioModule,
        NovoTilesModule,
        NovoSelectModule,
        NovoPickerModule,
        NovoChipsModule,
        NovoDatePickerModule,
        NovoTimePickerModule,
        NovoNovoCKEditorModule,
        NovoFormExtrasModule,
        NovoQuickNoteModule,
        NovoDateTimePickerModule,
        NovoHeaderModule,
        NovoTooltipModule,
        NovoDragulaModule,
        IMaskDirectiveModule,
        TextMaskModule,
        NovoTipWellModule,
        NovoModalModule,
        NovoButtonModule,
        NovoAceEditorModule,
        NovoCommonModule], exports: [NovoAutoSize,
        NovoDynamicFormElement,
        NovoControlElement,
        NovoFormElement,
        NovoFieldsetHeaderElement,
        NovoControlGroup,
        NovoControlTemplates] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoFormModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    OverlayModule,
                    ReactiveFormsModule,
                    NovoRadioModule,
                    NovoTilesModule,
                    NovoSelectModule,
                    NovoPickerModule,
                    NovoChipsModule,
                    NovoDatePickerModule,
                    NovoTimePickerModule,
                    NovoNovoCKEditorModule,
                    NovoFormExtrasModule,
                    NovoQuickNoteModule,
                    NovoDateTimePickerModule,
                    NovoHeaderModule,
                    NovoTooltipModule,
                    NovoDragulaModule,
                    IMaskDirectiveModule,
                    TextMaskModule,
                    NovoTipWellModule,
                    NovoModalModule,
                    NovoButtonModule,
                    NovoAceEditorModule,
                    NovoCommonModule,
                ],
                declarations: [
                    NovoAutoSize,
                    NovoControlElement,
                    NovoDynamicFormElement,
                    NovoFormElement,
                    NovoFieldsetElement,
                    NovoFieldsetHeaderElement,
                    ControlConfirmModal,
                    ControlPromptModal,
                    NovoControlGroup,
                    NovoControlTemplates,
                ],
                exports: [
                    NovoAutoSize,
                    NovoDynamicFormElement,
                    NovoControlElement,
                    NovoFormElement,
                    NovoFieldsetHeaderElement,
                    NovoControlGroup,
                    NovoControlTemplates,
                ],
                providers: [NovoTemplateService],
            }]
    }], null, null); })();
ɵɵsetComponentScope(ControlConfirmModal, [NgClass, NgComponentOutlet, NgForOf, NgIf, NgTemplateOutlet, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase, CdkConnectedOverlay, CdkOverlayOrigin, Dir, CdkScrollable, CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport, ɵangular_packages_forms_forms_y, NgSelectOption, ɵangular_packages_forms_forms_x, DefaultValueAccessor, NumberValueAccessor, RangeValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MinLengthValidator, MaxLengthValidator, PatternValidator, CheckboxRequiredValidator, EmailValidator, FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName, NovoRadioElement, NovoRadioGroup, NovoTilesElement, NovoSelectElement, NovoPickerElement, PickerResults, EntityPickerResult, EntityPickerResults, ChecklistPickerResults, GroupedMultiPickerResults, DistributionListPickerResults, WorkersCompCodesPickerResults, SkillsSpecialtyPickerResults, NovoChipElement, NovoChipAvatar, NovoChipRemove, NovoChipInput, NovoChipList, NovoChipsElement, NovoRowChipElement, NovoRowChipsElement, NovoDatePickerElement, NovoDatePickerInputElement, NovoDateRangeInputElement, NovoMultiDateInputElement, NovoMonthViewElement, NovoMonthSelectElement, NovoYearSelectElement, NovoCalendarElement, NovoTimePickerElement, NovoTimePickerInputElement, NovoCKEditorElement, NovoAddressElement, NovoCheckboxElement, NovoCheckListElement, NovoFileInputElement, QuickNoteElement, QuickNoteResults, NovoDateTimePickerElement, NovoDateTimePickerInputElement, NovoHeaderComponent, NovoUtilActionComponent, NovoUtilsComponent, NovoHeaderSpacer, TooltipDirective, NovoDragulaElement, IMaskDirective, MaskedInputDirective, NovoTipWellElement, NovoModalElement, NovoModalNotificationElement, NovoButtonElement, NovoAceEditor, NovoTemplate, NovoText, NovoTitle, NovoCaption, NovoLabel, NovoLink, MarginDirective, PaddingDirective, NovoAutoSize,
    NovoControlElement,
    NovoDynamicFormElement,
    NovoFormElement,
    NovoFieldsetElement,
    NovoFieldsetHeaderElement,
    ControlConfirmModal,
    ControlPromptModal,
    NovoControlGroup,
    NovoControlTemplates], [AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, TitleCasePipe, CurrencyPipe, DatePipe, I18nPluralPipe, I18nSelectPipe, KeyValuePipe]);
ɵɵsetComponentScope(ControlPromptModal, [NgClass, NgComponentOutlet, NgForOf, NgIf, NgTemplateOutlet, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase, CdkConnectedOverlay, CdkOverlayOrigin, Dir, CdkScrollable, CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport, ɵangular_packages_forms_forms_y, NgSelectOption, ɵangular_packages_forms_forms_x, DefaultValueAccessor, NumberValueAccessor, RangeValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MinLengthValidator, MaxLengthValidator, PatternValidator, CheckboxRequiredValidator, EmailValidator, FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName, NovoRadioElement, NovoRadioGroup, NovoTilesElement, NovoSelectElement, NovoPickerElement, PickerResults, EntityPickerResult, EntityPickerResults, ChecklistPickerResults, GroupedMultiPickerResults, DistributionListPickerResults, WorkersCompCodesPickerResults, SkillsSpecialtyPickerResults, NovoChipElement, NovoChipAvatar, NovoChipRemove, NovoChipInput, NovoChipList, NovoChipsElement, NovoRowChipElement, NovoRowChipsElement, NovoDatePickerElement, NovoDatePickerInputElement, NovoDateRangeInputElement, NovoMultiDateInputElement, NovoMonthViewElement, NovoMonthSelectElement, NovoYearSelectElement, NovoCalendarElement, NovoTimePickerElement, NovoTimePickerInputElement, NovoCKEditorElement, NovoAddressElement, NovoCheckboxElement, NovoCheckListElement, NovoFileInputElement, QuickNoteElement, QuickNoteResults, NovoDateTimePickerElement, NovoDateTimePickerInputElement, NovoHeaderComponent, NovoUtilActionComponent, NovoUtilsComponent, NovoHeaderSpacer, TooltipDirective, NovoDragulaElement, IMaskDirective, MaskedInputDirective, NovoTipWellElement, NovoModalElement, NovoModalNotificationElement, NovoButtonElement, NovoAceEditor, NovoTemplate, NovoText, NovoTitle, NovoCaption, NovoLabel, NovoLink, MarginDirective, PaddingDirective, NovoAutoSize,
    NovoControlElement,
    NovoDynamicFormElement,
    NovoFormElement,
    NovoFieldsetElement,
    NovoFieldsetHeaderElement,
    ControlConfirmModal,
    ControlPromptModal,
    NovoControlGroup,
    NovoControlTemplates], [AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, TitleCasePipe, CurrencyPipe, DatePipe, I18nPluralPipe, I18nSelectPipe, KeyValuePipe]);
ɵɵsetComponentScope(NovoControlGroup, [NgClass, NgComponentOutlet, NgForOf, NgIf, NgTemplateOutlet, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase, CdkConnectedOverlay, CdkOverlayOrigin, Dir, CdkScrollable, CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport, ɵangular_packages_forms_forms_y, NgSelectOption, ɵangular_packages_forms_forms_x, DefaultValueAccessor, NumberValueAccessor, RangeValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MinLengthValidator, MaxLengthValidator, PatternValidator, CheckboxRequiredValidator, EmailValidator, FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName, NovoRadioElement, NovoRadioGroup, NovoTilesElement, NovoSelectElement, NovoPickerElement, PickerResults, EntityPickerResult, EntityPickerResults, ChecklistPickerResults, GroupedMultiPickerResults, DistributionListPickerResults, WorkersCompCodesPickerResults, SkillsSpecialtyPickerResults, NovoChipElement, NovoChipAvatar, NovoChipRemove, NovoChipInput, NovoChipList, NovoChipsElement, NovoRowChipElement, NovoRowChipsElement, NovoDatePickerElement, NovoDatePickerInputElement, NovoDateRangeInputElement, NovoMultiDateInputElement, NovoMonthViewElement, NovoMonthSelectElement, NovoYearSelectElement, NovoCalendarElement, NovoTimePickerElement, NovoTimePickerInputElement, NovoCKEditorElement, NovoAddressElement, NovoCheckboxElement, NovoCheckListElement, NovoFileInputElement, QuickNoteElement, QuickNoteResults, NovoDateTimePickerElement, NovoDateTimePickerInputElement, NovoHeaderComponent, NovoUtilActionComponent, NovoUtilsComponent, NovoHeaderSpacer, TooltipDirective, NovoDragulaElement, IMaskDirective, MaskedInputDirective, NovoTipWellElement, NovoModalElement, NovoModalNotificationElement, NovoButtonElement, NovoAceEditor, NovoTemplate, NovoText, NovoTitle, NovoCaption, NovoLabel, NovoLink, MarginDirective, PaddingDirective, NovoAutoSize,
    NovoControlElement,
    NovoDynamicFormElement,
    NovoFormElement,
    NovoFieldsetElement,
    NovoFieldsetHeaderElement,
    ControlConfirmModal,
    ControlPromptModal,
    NovoControlGroup,
    NovoControlTemplates], [AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, TitleCasePipe, CurrencyPipe, DatePipe, I18nPluralPipe, I18nSelectPipe, KeyValuePipe]);

const _c0$19 = ["*"];
class NovoLayoutContent extends CdkScrollable$1 {
    constructor(_changeDetectorRef, _container, elementRef, scrollDispatcher, ngZone) {
        super(elementRef, scrollDispatcher, ngZone);
        this._changeDetectorRef = _changeDetectorRef;
        this._container = _container;
    }
    ngAfterContentInit() {
        this._container._contentMarginChanges.subscribe(() => {
            this._changeDetectorRef.markForCheck();
        });
    }
}
NovoLayoutContent.ɵfac = function NovoLayoutContent_Factory(t) { return new (t || NovoLayoutContent)(ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(forwardRef(() => NovoLayoutContainer)), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ScrollDispatcher), ɵɵdirectiveInject(NgZone)); };
NovoLayoutContent.ɵcmp = ɵɵdefineComponent({ type: NovoLayoutContent, selectors: [["novo-layout-content"]], hostAttrs: [1, "novo-layout-content"], hostVars: 4, hostBindings: function NovoLayoutContent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵstyleProp("margin-left", ctx._container._contentMargins.left, "px")("margin-right", ctx._container._contentMargins.right, "px");
    } }, exportAs: ["novoLayoutContent"], features: [ɵɵInheritDefinitionFeature], ngContentSelectors: _c0$19, decls: 1, vars: 0, template: function NovoLayoutContent_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoLayoutContent, [{
        type: Component,
        args: [{
                selector: 'novo-layout-content',
                exportAs: 'novoLayoutContent',
                template: '<ng-content></ng-content>',
                host: {
                    class: 'novo-layout-content',
                    '[style.margin-left.px]': '_container._contentMargins.left',
                    '[style.margin-right.px]': '_container._contentMargins.right',
                },
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
            }]
    }], function () { return [{ type: ChangeDetectorRef }, { type: NovoLayoutContainer, decorators: [{
                type: Inject,
                args: [forwardRef(() => NovoLayoutContainer)]
            }] }, { type: ElementRef }, { type: ScrollDispatcher }, { type: NgZone }]; }, null); })();

/**
 * Throws an exception when two NovoSidenav are matching the same position.
 * @docs-private
 */
function throwNovoDuplicatedSidenavError(position) {
    throw Error(`A drawer was already declared for 'position="${position}"'`);
}
/** Configures whether drawers should use auto sizing by default. */
const NOVO_LAYOUT_DEFAULT_AUTOSIZE = new InjectionToken('NOVO_LAYOUT_DEFAULT_AUTOSIZE', {
    providedIn: 'root',
    factory: NOVO_LAYOUT_DEFAULT_AUTOSIZE_FACTORY,
});
/**
 * Used to provide a drawer container to a drawer while avoiding circular references.
 * @docs-private
 */
const NOVO_LAYOUT_CONTAINER = new InjectionToken('NOVO_LAYOUT_CONTAINER');
/** @docs-private */
function NOVO_LAYOUT_DEFAULT_AUTOSIZE_FACTORY() {
    return false;
}

/**
 * Animations used by the Material drawers.
 * @docs-private
 */
const novoSidenavAnimations = {
    /** Animation that slides a drawer in and out. */
    transformDrawer: trigger('transform', [
        // We remove the `transform` here completely, rather than setting it to zero, because:
        // 1. Having a transform can cause elements with ripples or an animated
        //    transform to shift around in Chrome with an RTL layout (see #10023).
        // 2. 3d transforms causes text to appear blurry on IE and Edge.
        state('open, open-instant', style({
            transform: 'none',
            visibility: 'visible',
        })),
        state('void', style({
            // Avoids the shadow showing up when closed in SSR.
            'box-shadow': 'none',
            visibility: 'hidden',
        })),
        transition('void => open-instant', animate('0ms')),
        transition('void <=> open, open-instant => void', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),
    ]),
};

const _c0$1a = ["*"];
class NovoSidenavComponent {
    constructor(_elementRef, _focusTrapFactory, _focusMonitor, _platform, _ngZone, _doc, _container) {
        this._elementRef = _elementRef;
        this._focusTrapFactory = _focusTrapFactory;
        this._focusMonitor = _focusMonitor;
        this._platform = _platform;
        this._ngZone = _ngZone;
        this._doc = _doc;
        this._container = _container;
        this._fixedInViewport = false;
        this._fixedTopGap = 0;
        this._fixedBottomGap = 0;
        this._elementFocusedBeforeDrawerWasOpened = null;
        /** Whether the drawer is initialized. Used for disabling the initial animation. */
        this._enableAnimations = false;
        this._position = 'start';
        this._mode = 'over';
        this._disableClose = false;
        this._opened = false;
        /** Emits whenever the drawer has started animating. */
        this._animationStarted = new Subject();
        /** Emits whenever the drawer is done animating. */
        this._animationEnd = new Subject();
        /** Current state of the sidenav animation. */
        // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator
        // metadata is not inherited by child classes, instead the host binding data is defined in a way
        // that can be inherited.
        // tslint:disable:no-host-decorator-in-concrete
        this._animationState = 'void';
        /** Event emitted when the drawer open state is changed. */
        this.openedChange = 
        // Note this has to be async in order to avoid some issues with two-bindings (see #8872).
        new EventEmitter(/* isAsync */ true);
        /** Event emitted when the drawer has been opened. */
        this._openedStream = this.openedChange.pipe(filter((o) => o), map(() => { }));
        /** Event emitted when the drawer has started opening. */
        this.openedStart = this._animationStarted.pipe(filter((e) => e.fromState !== e.toState && e.toState.indexOf('open') === 0), mapTo(undefined));
        /** Event emitted when the drawer has been closed. */
        this._closedStream = this.openedChange.pipe(filter((o) => !o), map(() => { }));
        /** Event emitted when the drawer has started closing. */
        this.closedStart = this._animationStarted.pipe(filter((e) => e.fromState !== e.toState && e.toState === 'void'), mapTo(undefined));
        /** Emits when the component is destroyed. */
        this._destroyed = new Subject();
        /** Event emitted when the drawer's position changes. */
        // tslint:disable-next-line:no-output-on-prefix
        this.onPositionChanged = new EventEmitter();
        /**
         * An observable that emits when the drawer mode changes. This is used by the drawer container to
         * to know when to when the mode changes so it can adapt the margins on the content.
         */
        this._modeChanged = new Subject();
        this.openedChange.subscribe((opened) => {
            if (opened) {
                if (this._doc) {
                    this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement;
                }
                this._takeFocus();
            }
            else if (this._isFocusWithinDrawer()) {
                this._restoreFocus();
            }
        });
        /**
         * Listen to `keydown` events outside the zone so that change detection is not run every
         * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed
         * and we don't have close disabled.
         */
        this._ngZone.runOutsideAngular(() => {
            fromEvent(this._elementRef.nativeElement, 'keydown')
                .pipe(filter((event) => {
                return event.key === "Escape" /* Escape */ && !this.disableClose && !hasModifierKey(event);
            }), takeUntil(this._destroyed))
                .subscribe((event) => this._ngZone.run(() => {
                this.close();
                event.stopPropagation();
                event.preventDefault();
            }));
        });
        // We need a Subject with distinctUntilChanged, because the `done` event
        // fires twice on some browsers. See https://github.com/angular/angular/issues/24084
        this._animationEnd
            .pipe(distinctUntilChanged((x, y) => {
            return x.fromState === y.fromState && x.toState === y.toState;
        }))
            .subscribe((event) => {
            const { fromState, toState } = event;
            if ((toState.indexOf('open') === 0 && fromState === 'void') || (toState === 'void' && fromState.indexOf('open') === 0)) {
                this.openedChange.emit(this._opened);
            }
        });
    }
    /** Whether the sidenav is fixed in the viewport. */
    get fixedInViewport() {
        return this._fixedInViewport;
    }
    set fixedInViewport(value) {
        this._fixedInViewport = coerceBooleanProperty(value);
    }
    /**
     * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed
     * mode.
     */
    get fixedTopGap() {
        return this._fixedTopGap;
    }
    set fixedTopGap(value) {
        this._fixedTopGap = coerceNumberProperty(value);
    }
    /**
     * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in
     * fixed mode.
     */
    get fixedBottomGap() {
        return this._fixedBottomGap;
    }
    set fixedBottomGap(value) {
        this._fixedBottomGap = coerceNumberProperty(value);
    }
    /** The side that the drawer is attached to. */
    get position() {
        return this._position;
    }
    set position(value) {
        // Make sure we have a valid value.
        value = value === 'end' ? 'end' : 'start';
        if (value !== this._position) {
            this._position = value;
            this.onPositionChanged.emit();
        }
    }
    /** Mode of the drawer; one of 'over', 'push' or 'side'. */
    get mode() {
        return this._mode;
    }
    set mode(value) {
        this._mode = value;
        this._updateFocusTrapState();
        this._modeChanged.next();
    }
    /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */
    get disableClose() {
        return this._disableClose;
    }
    set disableClose(value) {
        this._disableClose = coerceBooleanProperty(value);
    }
    /**
     * Whether the drawer should focus the first focusable element automatically when opened.
     * Defaults to false in when `mode` is set to `side`, otherwise defaults to `true`. If explicitly
     * enabled, focus will be moved into the sidenav in `side` mode as well.
     */
    get autoFocus() {
        const value = this._autoFocus;
        // Note that usually we disable auto focusing in `side` mode, because we don't know how the
        // sidenav is being used, but in some cases it still makes sense to do it. If the consumer
        // explicitly enabled `autoFocus`, we take it as them always wanting to enable it.
        return value == null ? this.mode !== 'side' : value;
    }
    set autoFocus(value) {
        this._autoFocus = coerceBooleanProperty(value);
    }
    /**
     * Whether the drawer is opened. We overload this because we trigger an event when it
     * starts or end.
     */
    get opened() {
        return this._opened;
    }
    set opened(value) {
        this.toggle(coerceBooleanProperty(value));
    }
    /**
     * Moves focus into the drawer. Note that this works even if
     * the focus trap is disabled in `side` mode.
     */
    _takeFocus() {
        if (!this.autoFocus || !this._focusTrap) {
            return;
        }
        this._focusTrap.focusInitialElementWhenReady().then((hasMovedFocus) => {
            // If there were no focusable elements, focus the sidenav itself so the keyboard navigation
            // still works. We need to check that `focus` is a function due to Universal.
            if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {
                this._elementRef.nativeElement.focus();
            }
        });
    }
    /**
     * Restores focus to the element that was originally focused when the drawer opened.
     * If no element was focused at that time, the focus will be restored to the drawer.
     */
    _restoreFocus() {
        if (!this.autoFocus) {
            return;
        }
        // Note that we don't check via `instanceof HTMLElement` so that we can cover SVGs as well.
        if (this._elementFocusedBeforeDrawerWasOpened) {
            this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);
        }
        else {
            this._elementRef.nativeElement.blur();
        }
        this._elementFocusedBeforeDrawerWasOpened = null;
        this._openedVia = null;
    }
    /** Whether focus is currently within the drawer. */
    _isFocusWithinDrawer() {
        var _a;
        const activeEl = (_a = this._doc) === null || _a === void 0 ? void 0 : _a.activeElement;
        return !!activeEl && this._elementRef.nativeElement.contains(activeEl);
    }
    ngAfterContentInit() {
        this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);
        this._updateFocusTrapState();
    }
    ngAfterContentChecked() {
        // Enable the animations after the lifecycle hooks have run, in order to avoid animating
        // drawers that are open by default. When we're on the server, we shouldn't enable the
        // animations, because we don't want the drawer to animate the first time the user sees
        // the page.
        if (this._platform.isBrowser) {
            this._enableAnimations = true;
        }
    }
    ngOnDestroy() {
        if (this._focusTrap) {
            this._focusTrap.destroy();
        }
        this._animationStarted.complete();
        this._animationEnd.complete();
        this._modeChanged.complete();
        this._destroyed.next();
        this._destroyed.complete();
    }
    /**
     * Open the drawer.
     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.
     * Used for focus management after the sidenav is closed.
     */
    open(openedVia) {
        return this.toggle(true, openedVia);
    }
    /** Close the drawer. */
    close() {
        return this.toggle(false);
    }
    /** Closes the drawer with context that the backdrop was clicked. */
    _closeViaBackdropClick() {
        // If the drawer is closed upon a backdrop click, we always want to restore focus. We
        // don't need to check whether focus is currently in the drawer, as clicking on the
        // backdrop causes blurring of the active element.
        return this._setOpen(/* isOpen */ false, /* restoreFocus */ true);
    }
    /**
     * Toggle this drawer.
     * @param isOpen Whether the drawer should be open.
     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.
     * Used for focus management after the sidenav is closed.
     */
    toggle(isOpen = !this.opened, openedVia) {
        // If the focus is currently inside the drawer content and we are closing the drawer,
        // restore the focus to the initially focused element (when the drawer opened).
        return this._setOpen(isOpen, /* restoreFocus */ !isOpen && this._isFocusWithinDrawer(), openedVia);
    }
    /**
     * Toggles the opened state of the drawer.
     * @param isOpen Whether the drawer should open or close.
     * @param restoreFocus Whether focus should be restored on close.
     * @param openedVia Focus origin that can be optionally set when opening a drawer. The
     *   origin will be used later when focus is restored on drawer close.
     */
    _setOpen(isOpen, restoreFocus, openedVia = 'program') {
        this._opened = isOpen;
        if (isOpen) {
            this._animationState = this._enableAnimations ? 'open' : 'open-instant';
            this._openedVia = openedVia;
        }
        else {
            this._animationState = 'void';
            if (restoreFocus) {
                this._restoreFocus();
            }
        }
        this._updateFocusTrapState();
        return new Promise((resolve) => {
            this.openedChange.pipe(take(1)).subscribe((open) => resolve(open ? 'open' : 'close'));
        });
    }
    _getWidth() {
        return this._elementRef.nativeElement ? this._elementRef.nativeElement.offsetWidth || 0 : 0;
    }
    /** Updates the enabled state of the focus trap. */
    _updateFocusTrapState() {
        if (this._focusTrap) {
            // The focus trap is only enabled when the drawer is open in any mode other than side.
            this._focusTrap.enabled = this.opened && this.mode !== 'side';
        }
    }
    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.
    // In Ivy the `host` bindings will be merged when this class is extended, whereas in
    // ViewEngine they're overwritten.
    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.
    // tslint:disable-next-line:no-host-decorator-in-concrete
    _animationStartListener(event) {
        this._animationStarted.next(event);
    }
    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.
    // In Ivy the `host` bindings will be merged when this class is extended, whereas in
    // ViewEngine they're overwritten.
    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.
    // tslint:disable-next-line:no-host-decorator-in-concrete
    _animationDoneListener(event) {
        this._animationEnd.next(event);
    }
}
NovoSidenavComponent.ɵfac = function NovoSidenavComponent_Factory(t) { return new (t || NovoSidenavComponent)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(FocusTrapFactory), ɵɵdirectiveInject(FocusMonitor), ɵɵdirectiveInject(Platform), ɵɵdirectiveInject(NgZone), ɵɵdirectiveInject(DOCUMENT, 8), ɵɵdirectiveInject(NOVO_LAYOUT_CONTAINER, 8)); };
NovoSidenavComponent.ɵcmp = ɵɵdefineComponent({ type: NovoSidenavComponent, selectors: [["novo-sidenav"]], hostAttrs: ["tabIndex", "-1", 1, "novo-sidenav"], hostVars: 18, hostBindings: function NovoSidenavComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵɵsyntheticHostListener("@transform.start", function NovoSidenavComponent_animation_transform_start_HostBindingHandler($event) { return ctx._animationStartListener($event); })("@transform.done", function NovoSidenavComponent_animation_transform_done_HostBindingHandler($event) { return ctx._animationDoneListener($event); });
    } if (rf & 2) {
        ɵɵattribute("align", null);
        ɵɵsyntheticHostProperty("@transform", ctx._animationState);
        ɵɵstyleProp("top", ctx.fixedInViewport ? ctx.fixedTopGap : null, "px")("bottom", ctx.fixedInViewport ? ctx.fixedBottomGap : null, "px");
        ɵɵclassProp("novo-sidenav-end", ctx.position === "end")("novo-sidenav-over", ctx.mode === "over")("novo-sidenav-push", ctx.mode === "push")("novo-sidenav-side", ctx.mode === "side")("novo-sidenav-opened", ctx.opened)("novo-sidenav-fixed", ctx.fixedInViewport);
    } }, inputs: { fixedInViewport: "fixedInViewport", fixedTopGap: "fixedTopGap", fixedBottomGap: "fixedBottomGap", position: "position", mode: "mode", disableClose: "disableClose", autoFocus: "autoFocus", opened: "opened" }, outputs: { openedChange: "openedChange", _openedStream: "opened", openedStart: "openedStart", _closedStream: "closed", closedStart: "closedStart", onPositionChanged: "positionChanged" }, exportAs: ["novoSidenav"], ngContentSelectors: _c0$1a, decls: 2, vars: 0, consts: [[1, "novo-sidenav-inner-container"]], template: function NovoSidenavComponent_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵelementStart(0, "div", 0);
        ɵɵprojection(1);
        ɵɵelementEnd();
    } }, styles: ["@-webkit-keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}.novo-sidenav-inner-container{-webkit-overflow-scrolling:touch;height:100%;overflow:auto;width:100%}.novo-sidenav-fixed{position:fixed}.novo-sidenav{bottom:0;box-sizing:border-box;display:block;outline:0;overflow-y:auto;position:relative;position:absolute;top:0;transform:translate3d(-100%,0,0);z-index:4;z-index:3}.novo-sidenav,[dir=rtl] .novo-sidenav.novo-sidenav-end{border-right:1px solid}.novo-sidenav.novo-sidenav-end,[dir=rtl] .novo-sidenav{border-left:1px solid;border-right:none}.novo-sidenav.novo-sidenav-side{z-index:2}.novo-sidenav.novo-sidenav-end{right:0}.novo-sidenav.novo-sidenav-end,[dir=rtl] .novo-sidenav{transform:translate3d(100%,0,0)}[dir=rtl] .novo-sidenav.novo-sidenav-end{left:0;right:auto;transform:translate3d(-100%,0,0)}.novo-sidenav[theme=company]{background:#39d;color:#fff}.novo-sidenav[theme=candidate]{background:#4b7;color:#fff}.novo-sidenav[theme=navigation]{background:#2f384f;color:#fff}.novo-sidenav[theme=lead]{background:#a69;color:#fff}.novo-sidenav[theme=contact]{background:#fa4;color:#fff}.novo-sidenav[theme=opportunity]{background:#625;color:#fff}.novo-sidenav[theme=job]{background:#b56;color:#fff}.novo-sidenav[theme=earnCode],.novo-sidenav[theme=jobCode]{background:#696d79;color:#fff}.novo-sidenav[theme=sendout]{background:#747884;color:#fff}.novo-sidenav[theme=placement]{background:#0b344f;color:#fff}.novo-sidenav[theme=corporateuser],.novo-sidenav[theme=credential],.novo-sidenav[theme=distributionList],.novo-sidenav[theme=task],.novo-sidenav[theme=user]{background:#4f5361;color:#fff}.novo-sidenav[theme=aqua]{background:#3bafda;color:#fff}.novo-sidenav[theme=ocean]{background:#4a89dc;color:#fff}.novo-sidenav[theme=mint]{background:#37bc9b;color:#fff}.novo-sidenav[theme=grass]{background:#8cc152;color:#fff}.novo-sidenav[theme=sunflower]{background:#f6b042;color:#fff}.novo-sidenav[theme=bittersweet]{background:#eb6845;color:#fff}.novo-sidenav[theme=grapefruit]{background:#da4453;color:#fff}.novo-sidenav[theme=carnation]{background:#d770ad;color:#fff}.novo-sidenav[theme=lavender]{background:#967adc;color:#fff}.novo-sidenav[theme=positive]{background:#4a89dc;color:#fff}.novo-sidenav[theme=success]{background:#8cc152;color:#fff}.novo-sidenav[theme=negative]{background:#da4453;color:#fff}.novo-sidenav[theme=warning]{background:#f6b042;color:#fff}.novo-sidenav[theme=black]{background:#000;color:#fff}.novo-sidenav[theme=dark]{background:#3d464d;color:#fff}.novo-sidenav[theme=pulse]{background:#3bafda;color:#fff}.novo-sidenav[theme=neutral]{background:#4f5361;color:#fff}.novo-sidenav[theme=navy]{background:#0d2d42;color:#fff}.novo-sidenav[theme=contract]{background:#454ea0;color:#fff}.novo-sidenav[theme=mountain]{background:#9678b6;color:#fff}.novo-sidenav[theme=billableCharge],.novo-sidenav[theme=invoiceStatement],.novo-sidenav[theme=payableCharge]{background:#696d79;color:#fff}.novo-sidenav[theme=submission]{background:#a9adbb;color:#fff}.novo-sidenav[theme=note]{background:#747884;color:#fff}.novo-sidenav[theme=ash]{background:#a0a0a0;color:#fff}.novo-sidenav[theme=slate]{background:#707070;color:#fff}.novo-sidenav[theme=charcoal]{background:#282828;color:#fff}.novo-sidenav[theme=midnight]{background:#0b0f1a;color:#fff}.novo-sidenav[theme=background]{background:#f4f4f4;color:#fff}.novo-sidenav[theme=background-dark]{background:#e2e2e2;color:#fff}.novo-sidenav[theme=white]{background:#fff;color:#fff}.novo-sidenav[theme=grey]{background:#999;color:#fff}.novo-sidenav[theme=off-white]{background:#f4f4f4;color:#fff}.novo-sidenav[theme=light]{background:#bebebe;color:#fff}.novo-sidenav[theme=empty]{background:#cccdcc;color:#fff}.novo-sidenav[theme=disabled]{background:#bebebe;color:#fff}.novo-sidenav[theme=sand]{background:#f4f4f4;color:#fff}.novo-sidenav[theme=silver]{background:#e2e2e2;color:#fff}.novo-sidenav[theme=stone]{background:#bebebe;color:#fff}"], encapsulation: 2, data: { animation: [novoSidenavAnimations.transformDrawer] }, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSidenavComponent, [{
        type: Component,
        args: [{
                selector: 'novo-sidenav',
                exportAs: 'novoSidenav',
                templateUrl: './sidenav.component.html',
                styleUrls: ['./sidenav.component.scss'],
                animations: [novoSidenavAnimations.transformDrawer],
                host: {
                    class: 'novo-sidenav',
                    tabIndex: '-1',
                    // must prevent the browser from aligning text based on value
                    '[attr.align]': 'null',
                    '[class.novo-sidenav-end]': 'position === "end"',
                    '[class.novo-sidenav-over]': 'mode === "over"',
                    '[class.novo-sidenav-push]': 'mode === "push"',
                    '[class.novo-sidenav-side]': 'mode === "side"',
                    '[class.novo-sidenav-opened]': 'opened',
                    '[class.novo-sidenav-fixed]': 'fixedInViewport',
                    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',
                    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',
                },
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
            }]
    }], function () { return [{ type: ElementRef }, { type: FocusTrapFactory }, { type: FocusMonitor }, { type: Platform }, { type: NgZone }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: NovoLayoutContainer, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [NOVO_LAYOUT_CONTAINER]
            }] }]; }, { fixedInViewport: [{
            type: Input
        }], fixedTopGap: [{
            type: Input
        }], fixedBottomGap: [{
            type: Input
        }], position: [{
            type: Input
        }], mode: [{
            type: Input
        }], disableClose: [{
            type: Input
        }], autoFocus: [{
            type: Input
        }], opened: [{
            type: Input
        }], _animationState: [{
            type: HostBinding,
            args: ['@transform']
        }], openedChange: [{
            type: Output
        }], _openedStream: [{
            type: Output,
            args: ['opened']
        }], openedStart: [{
            type: Output
        }], _closedStream: [{
            type: Output,
            args: ['closed']
        }], closedStart: [{
            type: Output
        }], onPositionChanged: [{
            type: Output,
            args: ['positionChanged']
        }], _animationStartListener: [{
            type: HostListener,
            args: ['@transform.start', ['$event']]
        }], _animationDoneListener: [{
            type: HostListener,
            args: ['@transform.done', ['$event']]
        }] }); })();

function NovoLayoutContainer_div_0_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 2);
    ɵɵlistener("click", function NovoLayoutContainer_div_0_Template_div_click_0_listener() { ɵɵrestoreView(_r3); const ctx_r2 = ɵɵnextContext(); return ctx_r2._onBackdropClicked(); });
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵclassProp("novo-drawer-shown", ctx_r0._isShowingBackdrop());
} }
function NovoLayoutContainer_novo_layout_content_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-layout-content", 3);
    ɵɵprojection(1, 2);
    ɵɵelementEnd();
} }
const _c0$1b = [[["novo-sidenav"]], [["novo-layout-content"]], "*"];
const _c1$w = ["novo-sidenav", "novo-layout-content", "*"];
class NovoLayoutContainer {
    constructor(_dir, _element, _ngZone, _changeDetectorRef, viewportRuler, defaultAutosize = false, _animationMode) {
        this._dir = _dir;
        this._element = _element;
        this._ngZone = _ngZone;
        this._changeDetectorRef = _changeDetectorRef;
        this._animationMode = _animationMode;
        /** Drawers that belong to this container. */
        this._drawers = new QueryList();
        /** Event emitted when the drawer backdrop is clicked. */
        this.backdropClick = new EventEmitter();
        /** Emits when the component is destroyed. */
        this._destroyed = new Subject();
        /** Emits on every ngDoCheck. Used for debouncing reflows. */
        this._doCheckSubject = new Subject();
        /**
         * Margins to be applied to the content. These are used to push / shrink the drawer content when a
         * drawer is open. We use margin rather than transform even for push mode because transform breaks
         * fixed position elements inside of the transformed element.
         */
        this._contentMargins = { left: null, right: null };
        this._contentMarginChanges = new Subject();
        // If a `Dir` directive exists up the tree, listen direction changes
        // and update the left/right properties to point to the proper start/end.
        if (_dir) {
            _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {
                this._validateDrawers();
                this.updateContentMargins();
            });
        }
        // Since the minimum width of the sidenav depends on the viewport width,
        // we need to recompute the margins if the viewport changes.
        viewportRuler
            .change()
            .pipe(takeUntil(this._destroyed))
            .subscribe(() => this.updateContentMargins());
        this._autosize = defaultAutosize;
    }
    /** The drawer child with the `start` position. */
    get start() {
        return this._start;
    }
    /** The drawer child with the `end` position. */
    get end() {
        return this._end;
    }
    /**
     * Whether to automatically resize the container whenever
     * the size of any of its drawers changes.
     *
     * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring
     * the drawers on every change detection cycle. Can be configured globally via the
     * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.
     */
    get autosize() {
        return this._autosize;
    }
    set autosize(value) {
        this._autosize = coerceBooleanProperty(value);
    }
    /**
     * Whether the drawer container should have a backdrop while one of the sidenavs is open.
     * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`
     * mode as well.
     */
    get hasBackdrop() {
        if (this._backdropOverride == null) {
            return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';
        }
        return this._backdropOverride;
    }
    set hasBackdrop(value) {
        this._backdropOverride = value == null ? null : coerceBooleanProperty(value);
    }
    /** Reference to the CdkScrollable instance that wraps the scrollable content. */
    get scrollable() {
        return this._userContent || this._content;
    }
    ngAfterContentInit() {
        this._allDrawers.changes
            .pipe(startWith(this._allDrawers), takeUntil(this._destroyed))
            .subscribe((drawer) => {
            this._drawers.reset(drawer.filter((item) => !item._container || item._container === this));
            this._drawers.notifyOnChanges();
        });
        this._drawers.changes.pipe(startWith(null)).subscribe(() => {
            this._validateDrawers();
            this._drawers.forEach((drawer) => {
                this._watchDrawerToggle(drawer);
                this._watchDrawerPosition(drawer);
                this._watchDrawerMode(drawer);
            });
            if (!this._drawers.length || this._isDrawerOpen(this._start) || this._isDrawerOpen(this._end)) {
                this.updateContentMargins();
            }
            this._changeDetectorRef.markForCheck();
        });
        // Avoid hitting the NgZone through the debounce timeout.
        this._ngZone.runOutsideAngular(() => {
            this._doCheckSubject
                .pipe(debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps
            takeUntil(this._destroyed))
                .subscribe(() => this.updateContentMargins());
        });
    }
    ngOnDestroy() {
        this._contentMarginChanges.complete();
        this._doCheckSubject.complete();
        this._drawers.destroy();
        this._destroyed.next();
        this._destroyed.complete();
    }
    /** Calls `open` of both start and end drawers */
    open() {
        this._drawers.forEach((drawer) => drawer.open());
    }
    /** Calls `close` of both start and end drawers */
    close() {
        this._drawers.forEach((drawer) => drawer.close());
    }
    /**
     * Recalculates and updates the inline styles for the content. Note that this should be used
     * sparingly, because it causes a reflow.
     */
    updateContentMargins() {
        // 1. For drawers in `over` mode, they don't affect the content.
        // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the
        //    left margin (for left drawer) or right margin (for right the drawer).
        // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by
        //    adding to the left or right margin and simultaneously subtracting the same amount of
        //    margin from the other side.
        let left = 0;
        let right = 0;
        if (this._left && this._left.opened) {
            if (this._left.mode === 'side') {
                left += this._left._getWidth();
            }
            else if (this._left.mode === 'push') {
                const width = this._left._getWidth();
                left += width;
                right -= width;
            }
        }
        if (this._right && this._right.opened) {
            if (this._right.mode === 'side') {
                right += this._right._getWidth();
            }
            else if (this._right.mode === 'push') {
                const width = this._right._getWidth();
                right += width;
                left -= width;
            }
        }
        // If either `right` or `left` is zero, don't set a style to the element. This
        // allows users to specify a custom size via CSS class in SSR scenarios where the
        // measured widths will always be zero. Note that we reset to `null` here, rather
        // than below, in order to ensure that the types in the `if` below are consistent.
        left = left || null;
        right = right || null;
        if (left !== this._contentMargins.left || right !== this._contentMargins.right) {
            this._contentMargins = { left, right };
            // Pull back into the NgZone since in some cases we could be outside. We need to be careful
            // to do it only when something changed, otherwise we can end up hitting the zone too often.
            this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));
        }
    }
    ngDoCheck() {
        // If users opted into autosizing, do a check every change detection cycle.
        if (this._autosize && this._isPushed()) {
            // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.
            this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());
        }
    }
    /**
     * Subscribes to drawer events in order to set a class on the main container element when the
     * drawer is open and the backdrop is visible. This ensures any overflow on the container element
     * is properly hidden.
     */
    _watchDrawerToggle(drawer) {
        drawer._animationStarted
            .pipe(filter((event) => event.fromState !== event.toState), takeUntil(this._drawers.changes))
            .subscribe((event) => {
            // Set the transition class on the container so that the animations occur. This should not
            // be set initially because animations should only be triggered via a change in state.
            if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {
                this._element.nativeElement.classList.add('mat-drawer-transition');
            }
            this.updateContentMargins();
            this._changeDetectorRef.markForCheck();
        });
        if (drawer.mode !== 'side') {
            drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() => this._setContainerClass(drawer.opened));
        }
    }
    /**
     * Subscribes to drawer onPositionChanged event in order to
     * re-validate drawers when the position changes.
     */
    _watchDrawerPosition(drawer) {
        if (!drawer) {
            return;
        }
        // NOTE: We need to wait for the microtask queue to be empty before validating,
        // since both drawers may be swapping positions at the same time.
        drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {
            this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {
                this._validateDrawers();
            });
        });
    }
    /** Subscribes to changes in drawer mode so we can run change detection. */
    _watchDrawerMode(drawer) {
        if (drawer) {
            drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed))).subscribe(() => {
                this.updateContentMargins();
                this._changeDetectorRef.markForCheck();
            });
        }
    }
    /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */
    _setContainerClass(isAdd) {
        const classList = this._element.nativeElement.classList;
        const className = 'mat-drawer-container-has-open';
        if (isAdd) {
            classList.add(className);
        }
        else {
            classList.remove(className);
        }
    }
    /** Validate the state of the drawer children components. */
    _validateDrawers() {
        this._start = this._end = null;
        // Ensure that we have at most one start and one end drawer.
        this._drawers.forEach((drawer) => {
            if (drawer.position === 'end') {
                if (this._end != null) {
                    throw new Error('Duplication drawers at end');
                    // throwMatDuplicatedDrawerError('end');
                }
                this._end = drawer;
            }
            else {
                if (this._start != null) {
                    throw new Error('Duplication drawers at start');
                }
                this._start = drawer;
            }
        });
        this._right = this._left = null;
        // Detect if we're LTR or RTL.
        if (this._dir && this._dir.value === 'rtl') {
            this._left = this._end;
            this._right = this._start;
        }
        else {
            this._left = this._start;
            this._right = this._end;
        }
    }
    /** Whether the container is being pushed to the side by one of the drawers. */
    _isPushed() {
        return (this._isDrawerOpen(this._start) && this._start.mode !== 'over') || (this._isDrawerOpen(this._end) && this._end.mode !== 'over');
    }
    _onBackdropClicked() {
        this.backdropClick.emit();
        this._closeModalDrawersViaBackdrop();
    }
    _closeModalDrawersViaBackdrop() {
        // Close all open drawers where closing is not disabled and the mode is not `side`.
        [this._start, this._end]
            .filter((drawer) => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))
            .forEach((drawer) => drawer._closeViaBackdropClick());
    }
    _isShowingBackdrop() {
        return ((this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||
            (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end)));
    }
    _canHaveBackdrop(drawer) {
        return drawer.mode !== 'side' || !!this._backdropOverride;
    }
    _isDrawerOpen(drawer) {
        return drawer != null && drawer.opened;
    }
}
NovoLayoutContainer.ɵfac = function NovoLayoutContainer_Factory(t) { return new (t || NovoLayoutContainer)(ɵɵdirectiveInject(Directionality, 8), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NgZone), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(ViewportRuler), ɵɵdirectiveInject(NOVO_LAYOUT_DEFAULT_AUTOSIZE), ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };
NovoLayoutContainer.ɵcmp = ɵɵdefineComponent({ type: NovoLayoutContainer, selectors: [["novo-layout-container"]], contentQueries: function NovoLayoutContainer_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵɵcontentQuery(dirIndex, NovoLayoutContent, true);
        ɵɵcontentQuery(dirIndex, NovoSidenavComponent, true);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx._content = _t.first);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx._allDrawers = _t);
    } }, viewQuery: function NovoLayoutContainer_Query(rf, ctx) { if (rf & 1) {
        ɵɵviewQuery(NovoLayoutContent, true);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx._userContent = _t.first);
    } }, hostAttrs: [1, "novo-layout-container"], hostVars: 2, hostBindings: function NovoLayoutContainer_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵclassProp("novo-layout-container-explicit-backdrop", ctx._backdropOverride);
    } }, inputs: { autosize: "autosize", hasBackdrop: "hasBackdrop" }, outputs: { backdropClick: "backdropClick" }, exportAs: ["novoLayoutContainer"], features: [ɵɵProvidersFeature([
            {
                provide: NOVO_LAYOUT_CONTAINER,
                useExisting: NovoLayoutContainer,
            },
        ])], ngContentSelectors: _c1$w, decls: 4, vars: 2, consts: [["class", "novo-drawer-backdrop", 3, "novo-drawer-shown", "click", 4, "ngIf"], ["cdkScrollable", "", 4, "ngIf"], [1, "novo-drawer-backdrop", 3, "click"], ["cdkScrollable", ""]], template: function NovoLayoutContainer_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef(_c0$1b);
        ɵɵtemplate(0, NovoLayoutContainer_div_0_Template, 1, 2, "div", 0);
        ɵɵprojection(1);
        ɵɵprojection(2, 1);
        ɵɵtemplate(3, NovoLayoutContainer_novo_layout_content_3_Template, 2, 0, "novo-layout-content", 1);
    } if (rf & 2) {
        ɵɵproperty("ngIf", ctx.hasBackdrop);
        ɵɵadvance(3);
        ɵɵproperty("ngIf", !ctx._content);
    } }, styles: ["@-webkit-keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}.novo-layout-container{-webkit-overflow-scrolling:touch;box-sizing:border-box;display:block;height:100%;overflow:hidden;position:relative;z-index:1}.novo-layout-container[fullscreen].novo-layout-container-has-open{overflow:hidden}.novo-layout-container.novo-layout-container-explicit-backdrop .novo-drawer-side{z-index:3}.ng-animate-disabled .novo-layout-container .novo-drawer-backdrop,.ng-animate-disabled .novo-layout-container .novo-layout-content,.novo-layout-container.ng-animate-disabled .novo-drawer-backdrop,.novo-layout-container.ng-animate-disabled .novo-layout-content{transition:none}.novo-drawer-backdrop{background:#000;bottom:0;display:block;left:0;opacity:.5;position:absolute;right:0;top:0;visibility:hidden;z-index:3}.novo-drawer-backdrop.novo-drawer-shown{visibility:visible}.novo-drawer-transition .novo-drawer-backdrop{transition-duration:.1s;transition-property:background-color,visibility;transition-timing-function:ease-out}.novo-layout-content{display:block;height:100%;overflow:auto;position:relative;z-index:1}.novo-drawer-transition .novo-layout-content{transition-duration:.1s;transition-property:transform,margin-left,margin-right;transition-timing-function:ease-out}"], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoLayoutContainer, [{
        type: Component,
        args: [{
                selector: 'novo-layout-container',
                exportAs: 'novoLayoutContainer',
                templateUrl: './layout-container.component.html',
                styleUrls: ['./layout-container.component.scss'],
                host: {
                    class: 'novo-layout-container',
                    '[class.novo-layout-container-explicit-backdrop]': '_backdropOverride',
                },
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                providers: [
                    {
                        provide: NOVO_LAYOUT_CONTAINER,
                        useExisting: NovoLayoutContainer,
                    },
                ],
            }]
    }], function () { return [{ type: Directionality, decorators: [{
                type: Optional
            }] }, { type: ElementRef }, { type: NgZone }, { type: ChangeDetectorRef }, { type: ViewportRuler }, { type: undefined, decorators: [{
                type: Inject,
                args: [NOVO_LAYOUT_DEFAULT_AUTOSIZE]
            }] }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [ANIMATION_MODULE_TYPE]
            }] }]; }, { _allDrawers: [{
            type: ContentChildren,
            args: [NovoSidenavComponent, {
                    // We need to use `descendants: true`, because Ivy will no longer match
                    // indirect descendants if it's left as false.
                    descendants: true,
                }]
        }], _content: [{
            type: ContentChild,
            args: [NovoLayoutContent]
        }], _userContent: [{
            type: ViewChild,
            args: [NovoLayoutContent]
        }], autosize: [{
            type: Input
        }], hasBackdrop: [{
            type: Input
        }], backdropClick: [{
            type: Output
        }] }); })();

// NG2
class NovoLayoutModule {
}
NovoLayoutModule.ɵmod = ɵɵdefineNgModule({ type: NovoLayoutModule });
NovoLayoutModule.ɵinj = ɵɵdefineInjector({ factory: function NovoLayoutModule_Factory(t) { return new (t || NovoLayoutModule)(); }, imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoLayoutModule, { declarations: [NovoLayoutContainer, NovoLayoutContent, NovoSidenavComponent], imports: [CommonModule], exports: [NovoLayoutContainer, NovoLayoutContent, NovoSidenavComponent] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoLayoutModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [NovoLayoutContainer, NovoLayoutContent, NovoSidenavComponent],
                exports: [NovoLayoutContainer, NovoLayoutContent, NovoSidenavComponent],
            }]
    }], null, null); })();
ɵɵsetComponentScope(NovoLayoutContainer, [NgClass, NgComponentOutlet, NgForOf, NgIf, NgTemplateOutlet, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase, NovoLayoutContainer, NovoLayoutContent, NovoSidenavComponent], [AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, TitleCasePipe, CurrencyPipe, DatePipe, I18nPluralPipe, I18nSelectPipe, KeyValuePipe]);

/**
 * This is a structural directive now.  Should only be used on `novo-options`
 */
class MenuItemDirective {
    constructor(template, elementRef) {
        this.template = template;
        this.elementRef = elementRef;
        this.menuItemEnabled = true;
        this.menuItemVisible = true;
    }
}
MenuItemDirective.ɵfac = function MenuItemDirective_Factory(t) { return new (t || MenuItemDirective)(ɵɵdirectiveInject(TemplateRef), ɵɵdirectiveInject(ElementRef)); };
MenuItemDirective.ɵdir = ɵɵdefineDirective({ type: MenuItemDirective, selectors: [["", "menuItem", ""]], contentQueries: function MenuItemDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵɵcontentQuery(dirIndex, NovoOption, true);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.optionRef = _t.first);
    } }, inputs: { menuItemEnabled: "menuItemEnabled", menuItemVisible: "menuItemVisible" } });
/*@__PURE__*/ (function () { ɵsetClassMetadata(MenuItemDirective, [{
        type: Directive,
        args: [{
                selector: '[menuItem]',
            }]
    }], function () { return [{ type: TemplateRef }, { type: ElementRef }]; }, { menuItemEnabled: [{
            type: Input
        }], menuItemVisible: [{
            type: Input
        }], optionRef: [{
            type: ContentChild,
            args: [NovoOption]
        }] }); })();

class NovoMenuService {
    constructor(overlay, scrollStrategy) {
        this.overlay = overlay;
        this.scrollStrategy = scrollStrategy;
        this.isDestroyingLeafMenu = false;
        this.show = new Subject();
        this.triggerClose = new Subject();
        this.close = new Subject();
        this.overlays = [];
        this.fakeElement = {
            getBoundingClientRect: () => ({
                bottom: 0,
                height: 0,
                left: 0,
                right: 0,
                top: 0,
                width: 0,
            }),
        };
    }
    openMenu(context) {
        const { anchorElement, event, parentMenu } = context;
        if (!parentMenu) {
            const mouseEvent = event;
            this.fakeElement.getBoundingClientRect = () => ({
                bottom: mouseEvent.clientY,
                height: 0,
                left: mouseEvent.clientX,
                right: mouseEvent.clientX,
                top: mouseEvent.clientY,
                width: 0,
            });
            this.closeAllMenus({ eventType: 'cancel', event });
            const positionStrategy = this.overlay
                .position()
                .connectedTo(new ElementRef(anchorElement || this.fakeElement), { originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' })
                .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' })
                .withFallbackPosition({ originX: 'end', originY: 'top' }, { overlayX: 'start', overlayY: 'top' })
                .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'end', overlayY: 'top' })
                .withFallbackPosition({ originX: 'end', originY: 'center' }, { overlayX: 'start', overlayY: 'center' })
                .withFallbackPosition({ originX: 'start', originY: 'center' }, { overlayX: 'end', overlayY: 'center' });
            this.overlays = [
                this.overlay.create({
                    positionStrategy,
                    panelClass: 'novo-menu',
                    scrollStrategy: this.scrollStrategy.close(),
                }),
            ];
            this.attachMenu(this.overlays[0], context);
        }
        else {
            const positionStrategy = this.overlay
                .position()
                .connectedTo(new ElementRef(event ? event.target : anchorElement), { originX: 'end', originY: 'top' }, { overlayX: 'start', overlayY: 'top' })
                .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'end', overlayY: 'top' })
                .withFallbackPosition({ originX: 'end', originY: 'bottom' }, { overlayX: 'start', overlayY: 'bottom' })
                .withFallbackPosition({ originX: 'start', originY: 'bottom' }, { overlayX: 'end', overlayY: 'bottom' });
            const newOverlay = this.overlay.create({
                positionStrategy,
                panelClass: 'novo-menu',
                scrollStrategy: this.scrollStrategy.close(),
            });
            // this.destroySubMenus(parentMenu);
            this.overlays = this.overlays.concat(newOverlay);
            this.attachMenu(newOverlay, context);
        }
    }
    attachMenu(overlay, context) {
        const { event, item, menu, menuItems, menuClass, menuTrigger } = context;
        const menuContent = overlay.attach(new ComponentPortal(MenuContentComponent));
        menuContent.instance.event = event;
        menuContent.instance.item = item;
        menuContent.instance.menu = menu;
        menuContent.instance.menuItems = menuItems;
        menuContent.instance.overlay = overlay;
        menuContent.instance.isLeaf = true;
        menuContent.instance.menuClass = menuClass;
        overlay.menu = menuContent.instance;
        if (!!menuTrigger) {
            menuTrigger.menuContent = menuContent.instance;
        }
        const subscriptions = new Subscription();
        // subscriptions.add(
        //   menuContent.instance.execute
        //     .asObservable()
        //     .subscribe((executeEvent) => this.closeAllMenus({ eventType: 'execute', ...executeEvent })),
        // );
        subscriptions.add(menuContent.instance.closeAllMenus
            .asObservable()
            .subscribe((closeAllEvent) => this.closeAllMenus(Object.assign({ eventType: 'cancel' }, closeAllEvent))));
        subscriptions.add(menuContent.instance.closeLeafMenu.asObservable().subscribe((closeLeafMenuEvent) => this.destroyLeafMenu(closeLeafMenuEvent)));
        subscriptions.add(menuContent.instance.openSubMenu.asObservable().subscribe((subMenuEvent) => {
            this.destroySubMenus(menuContent.instance);
            if (!subMenuEvent.menu) {
                menuContent.instance.isLeaf = true;
                return;
            }
            menuContent.instance.isLeaf = false;
            this.show.next(subMenuEvent);
        }));
        menuContent.onDestroy(() => {
            // menuItems.forEach((menuItem) => (menuItem.isActive = false));
            subscriptions.unsubscribe();
        });
        menuContent.changeDetectorRef.detectChanges();
    }
    closeAllMenus(closeEvent) {
        if (this.overlays) {
            this.close.next(closeEvent);
            this.overlays.forEach((overlay, index) => {
                overlay.detach();
                overlay.dispose();
            });
        }
        this.overlays = [];
    }
    hasOpenMenus() {
        var _a;
        return ((_a = this.overlays) === null || _a === void 0 ? void 0 : _a.length) > 0;
    }
    getLastAttachedOverlay() {
        let overlay = this.overlays[this.overlays.length - 1];
        while (this.overlays.length > 1 && overlay && !overlay.hasAttached()) {
            overlay.detach();
            overlay.dispose();
            this.overlays = this.overlays.slice(0, -1);
            overlay = this.overlays[this.overlays.length - 1];
        }
        return overlay;
    }
    destroyLeafMenu({ exceptRootMenu, event } = {}) {
        if (this.isDestroyingLeafMenu) {
            return;
        }
        this.isDestroyingLeafMenu = true;
        setTimeout(() => {
            const overlay = this.getLastAttachedOverlay();
            if (this.overlays.length > 1 && overlay) {
                overlay.detach();
                overlay.dispose();
            }
            if (!exceptRootMenu && this.overlays.length > 0 && overlay) {
                this.close.next({ eventType: 'cancel', event });
                overlay.detach();
                overlay.dispose();
            }
            const newLeaf = this.getLastAttachedOverlay();
            if (newLeaf) {
                newLeaf.menu.isLeaf = true;
            }
            this.isDestroyingLeafMenu = false;
        });
    }
    destroySubMenus(menu) {
        const overlay = menu.overlay;
        const index = this.overlays.indexOf(overlay);
        this.overlays.slice(index + 1).forEach((subMenuOverlay) => {
            subMenuOverlay.detach();
            subMenuOverlay.dispose();
        });
    }
    isLeafMenu(menuContent) {
        const overlay = this.getLastAttachedOverlay();
        return menuContent.overlay === overlay;
    }
}
NovoMenuService.ɵfac = function NovoMenuService_Factory(t) { return new (t || NovoMenuService)(ɵɵinject(Overlay), ɵɵinject(ScrollStrategyOptions)); };
NovoMenuService.ɵprov = ɵɵdefineInjectable({ token: NovoMenuService, factory: NovoMenuService.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoMenuService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: Overlay }, { type: ScrollStrategyOptions }]; }, null); })();

const MENU_OPTIONS = new InjectionToken('MENU_OPTIONS');
const PARENT_MENU = new InjectionToken('PARENT_MENU');

const _c0$1c = ["menu"];
class MenuComponent {
    constructor(menuService, changeDetector, elementRef, options) {
        this.menuService = menuService;
        this.changeDetector = changeDetector;
        this.elementRef = elementRef;
        this.options = options;
        this.menuClass = '';
        this.autoFocus = false;
        this.disabled = false;
        this.close = new EventEmitter();
        this.open = new EventEmitter();
        this.visibleMenuItems = [];
        this.links = [];
        this.subscription = new Subscription();
        if (options) {
            this.autoFocus = options.autoFocus;
        }
        this.subscription.add(menuService.show.subscribe((menuEvent) => {
            this.onMenuEvent(menuEvent);
        }));
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    onMenuEvent(menuEvent) {
        if (this.disabled) {
            return;
        }
        const { menu, event, item } = menuEvent;
        if (menu && menu !== this) {
            return;
        }
        this.event = event;
        this.item = item;
        this.setVisibleMenuItems();
        this.menuService.openMenu(Object.assign(Object.assign({}, menuEvent), { menuItems: this.visibleMenuItems, menuClass: this.menuClass }));
        this.menuService.close
            .asObservable()
            .pipe(first())
            .subscribe((closeEvent) => this.close.emit(closeEvent));
        this.open.next(menuEvent);
    }
    isMenuItemVisible(menuItem) {
        return this.evaluateIfFunction(menuItem.menuItemVisible);
    }
    setVisibleMenuItems() {
        this.visibleMenuItems = this.menuItems.filter((menuItem) => this.isMenuItemVisible(menuItem));
    }
    evaluateIfFunction(value) {
        if (value instanceof Function) {
            return value(this.item);
        }
        return value;
    }
}
MenuComponent.ɵfac = function MenuComponent_Factory(t) { return new (t || MenuComponent)(ɵɵdirectiveInject(NovoMenuService), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(MENU_OPTIONS, 8)); };
MenuComponent.ɵcmp = ɵɵdefineComponent({ type: MenuComponent, selectors: [["novo-menu"]], contentQueries: function MenuComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵɵcontentQuery(dirIndex, MenuItemDirective, false);
        ɵɵcontentQuery(dirIndex, NovoOption, false);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.menuItems = _t);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.menuOptions = _t);
    } }, viewQuery: function MenuComponent_Query(rf, ctx) { if (rf & 1) {
        ɵɵviewQuery(_c0$1c, true);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.menuElement = _t.first);
    } }, inputs: { menuClass: "menuClass", autoFocus: "autoFocus", disabled: "disabled" }, outputs: { close: "close", open: "open" }, features: [ɵɵProvidersFeature([{ provide: PARENT_MENU, useExisting: MenuComponent }])], decls: 0, vars: 0, template: function MenuComponent_Template(rf, ctx) { }, styles: ["\n      .cdk-overlay-container {\n        position: fixed;\n        z-index: 1000;\n        pointer-events: none;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n      }\n      .novo-menu.cdk-overlay-pane {\n        position: absolute;\n        pointer-events: auto;\n        box-sizing: border-box;\n      }\n    "], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(MenuComponent, [{
        type: Component,
        args: [{
                encapsulation: ViewEncapsulation.None,
                selector: 'novo-menu',
                styles: [
                    `
      .cdk-overlay-container {
        position: fixed;
        z-index: 1000;
        pointer-events: none;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
      }
      .novo-menu.cdk-overlay-pane {
        position: absolute;
        pointer-events: auto;
        box-sizing: border-box;
      }
    `,
                ],
                template: ``,
                providers: [{ provide: PARENT_MENU, useExisting: MenuComponent }],
            }]
    }], function () { return [{ type: NovoMenuService }, { type: ChangeDetectorRef }, { type: ElementRef }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [MENU_OPTIONS]
            }] }]; }, { menuClass: [{
            type: Input
        }], autoFocus: [{
            type: Input
        }], disabled: [{
            type: Input
        }], close: [{
            type: Output
        }], open: [{
            type: Output
        }], menuItems: [{
            type: ContentChildren,
            args: [MenuItemDirective]
        }], menuOptions: [{
            type: ContentChildren,
            args: [NovoOption]
        }], menuElement: [{
            type: ViewChild,
            args: ['menu']
        }] }); })();

function MenuContentComponent_ng_container_3_ng_template_1_Template(rf, ctx) { }
const _c0$1d = function (a0) { return { $implicit: a0 }; };
function MenuContentComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, MenuContentComponent_ng_container_3_ng_template_1_Template, 0, 0, "ng-template", 4);
    ɵɵelementContainerEnd();
} if (rf & 2) {
    const menuItem_r2 = ctx.$implicit;
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", menuItem_r2.template)("ngTemplateOutletContext", ɵɵpureFunction1(2, _c0$1d, ctx_r1.item));
} }
class MenuContentComponent {
    constructor() {
        this.menuItems = [];
        this.isLeaf = false;
        ///
        this.openSubMenu = new EventEmitter();
        this.closeLeafMenu = new EventEmitter();
        this.closeAllMenus = new EventEmitter();
        // @ViewChild('menu') public menuElement: ElementRef;
        // @ViewChildren('li') public menuItemElements: QueryList<ElementRef>;
        this.autoFocus = false;
        this.subscription = new Subscription();
    }
    ngOnInit() { }
    ngAfterViewInit() {
        if (this.autoFocus) {
            setTimeout(() => this.focus());
        }
        this.overlay.updatePosition();
        this._keyManager = new ActiveDescendantKeyManager(this.menu.menuOptions).withWrap();
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    focus() {
        if (this.autoFocus) {
            // this.menuElement.nativeElement.focus();
        }
    }
    stopEvent($event) {
        $event.stopPropagation();
    }
    isMenuItemEnabled(menuItem) {
        return this.evaluateIfFunction(menuItem && menuItem.menuItemEnabled);
    }
    isMenuItemVisible(menuItem) {
        return this.evaluateIfFunction(menuItem && menuItem.menuItemVisible);
    }
    evaluateIfFunction(value) {
        if (value instanceof Function) {
            return value(this.item);
        }
        return value;
    }
    isDisabled(link) {
        return link.enabled && !link.enabled(this.item);
    }
    onKeyEvent(event) {
        if (!this.isLeaf) {
            return;
        }
        this._keyManager.onKeydown(event);
    }
    keyboardOpenSubMenu(event) {
        if (!this.isLeaf) {
            return;
        }
        this.cancelEvent(event);
        const menuItem = this.menuItems[this._keyManager.activeItemIndex];
        if (menuItem) {
            this.onOpenSubMenu(menuItem);
        }
    }
    keyboardMenuItemSelect(event) {
        if (!this.isLeaf) {
            return;
        }
        this.cancelEvent(event);
        const menuItem = this.menuItems[this._keyManager.activeItemIndex];
        const option = this._keyManager.activeItem;
        option._clickViaInteraction();
        // if (menuItem) {
        //   this.onMenuItemSelect(menuItem, event);
        // }
    }
    onCloseLeafMenu(event) {
        if (!this.isLeaf) {
            return;
        }
        this.cancelEvent(event);
        this.closeLeafMenu.emit({ exceptRootMenu: event.key === "ArrowLeft" /* ArrowLeft */, event });
    }
    // @HostListener('document:contextmenu', ['$event'])
    closeMenu(event) {
        if (event.type === 'click' && event.button === 2) {
            return;
        }
        this.closeAllMenus.emit({ event });
    }
    onMouseLeave(event) {
        if (this.isLeaf) {
            this.closeLeafMenu.emit({ exceptRootMenu: true, event });
        }
    }
    onOpenSubMenu(menuItem, event) {
        // const anchorElementRef = this.menuItemElements.toArray()[this._keyManager.activeItemIndex];
        // const anchorElement = anchorElementRef && anchorElementRef.nativeElement;
        // this.openSubMenu.emit({
        //   anchorElement,
        //   menu: menuItem.subMenu,
        //   event,
        //   item: this.item,
        //   // parentMenu: this,
        // });
    }
    onMenuItemSelect(menuItem, event) {
        event.preventDefault();
        event.stopPropagation();
        this.onOpenSubMenu(menuItem, event);
        // if (!menuItem.subMenu) {
        //   menuItem.triggerExecute(this.item, event);
        // }
    }
    cancelEvent(event) {
        if (!event) {
            return;
        }
        const target = event.target;
        if (['INPUT', 'TEXTAREA', 'SELECT'].indexOf(target.tagName) > -1 || target.isContentEditable) {
            return;
        }
        event.preventDefault();
        event.stopPropagation();
    }
}
MenuContentComponent.ɵfac = function MenuContentComponent_Factory(t) { return new (t || MenuContentComponent)(); };
MenuContentComponent.ɵcmp = ɵɵdefineComponent({ type: MenuContentComponent, selectors: [["menu-content"]], hostBindings: function MenuContentComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵɵlistener("keydown.ArrowDown", function MenuContentComponent_keydown_ArrowDown_HostBindingHandler($event) { return ctx.onKeyEvent($event); }, false, ɵɵresolveWindow)("keydown.ArrowUp", function MenuContentComponent_keydown_ArrowUp_HostBindingHandler($event) { return ctx.onKeyEvent($event); }, false, ɵɵresolveWindow)("keydown.ArrowRight", function MenuContentComponent_keydown_ArrowRight_HostBindingHandler($event) { return ctx.keyboardOpenSubMenu($event); }, false, ɵɵresolveWindow)("keydown.Enter", function MenuContentComponent_keydown_Enter_HostBindingHandler($event) { return ctx.keyboardMenuItemSelect($event); }, false, ɵɵresolveWindow)("keydown.Space", function MenuContentComponent_keydown_Space_HostBindingHandler($event) { return ctx.keyboardMenuItemSelect($event); }, false, ɵɵresolveWindow)("keydown.Escape", function MenuContentComponent_keydown_Escape_HostBindingHandler($event) { return ctx.onCloseLeafMenu($event); }, false, ɵɵresolveWindow)("keydown.ArrowLeft", function MenuContentComponent_keydown_ArrowLeft_HostBindingHandler($event) { return ctx.onCloseLeafMenu($event); }, false, ɵɵresolveWindow)("click", function MenuContentComponent_click_HostBindingHandler($event) { return ctx.closeMenu($event); }, false, ɵɵresolveDocument)("mouseleave", function MenuContentComponent_mouseleave_HostBindingHandler($event) { return ctx.onMouseLeave($event); });
    } }, inputs: { menuItems: "menuItems", item: "item", event: "event", menu: "menu", parentMenu: "parentMenu", menuClass: "menuClass", overlay: "overlay", isLeaf: "isLeaf" }, outputs: { openSubMenu: "openSubMenu", closeLeafMenu: "closeLeafMenu", closeAllMenus: "closeAllMenus" }, decls: 4, vars: 2, consts: [["tabindex", "0", 1, "menu-container", "novo-menu", 3, "ngClass"], ["tabindex", "0", 1, "menu", 2, "position", "static", "float", "none"], ["menu", ""], [4, "ngFor", "ngForOf"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"]], template: function MenuContentComponent_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "div", 0);
        ɵɵelementStart(1, "ul", 1, 2);
        ɵɵtemplate(3, MenuContentComponent_ng_container_3_Template, 2, 4, "ng-container", 3);
        ɵɵelementEnd();
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵproperty("ngClass", ctx.menuClass);
        ɵɵadvance(3);
        ɵɵproperty("ngForOf", ctx.menuItems);
    } }, directives: [NgClass, NgForOf, NgTemplateOutlet], styles: ["@-webkit-keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}@keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}[_nghost-%COMP%]   .passive[_ngcontent-%COMP%]{clear:both;display:block;font-weight:400;padding:3px 20px;white-space:nowrap}[_nghost-%COMP%]   .menu-container[_ngcontent-%COMP%]{width:180px}[_nghost-%COMP%]   .menu-container[_ngcontent-%COMP%]   .menu[_ngcontent-%COMP%]{-webkit-padding-start:0!important;background-color:#fff;box-shadow:0 -1px 3px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);cursor:default;list-style:none;padding-inline-start:0!important}[_nghost-%COMP%]   .menu-container[_ngcontent-%COMP%]   .menu[_ngcontent-%COMP%]   [_ngcontent-%COMP%]:hover{background:rgba(74,137,220,.1);color:#3d464d}[_nghost-%COMP%]   .menu-container[_ngcontent-%COMP%]   .menu[_ngcontent-%COMP%]   [_ngcontent-%COMP%]:active{background:rgba(74,137,220,.4)}[_nghost-%COMP%]   .menu-container[_ngcontent-%COMP%]   .menu[_ngcontent-%COMP%]   .menu-item-container[_ngcontent-%COMP%]{align-items:center;display:flex;position:relative}[_nghost-%COMP%]   .menu-container[_ngcontent-%COMP%]   .menu[_ngcontent-%COMP%]   .menu-item-container[_ngcontent-%COMP%]   .sub-menu-caret[_ngcontent-%COMP%]{position:absolute;right:.8rem}[_nghost-%COMP%]   .menu-container[_ngcontent-%COMP%]   .menu[_ngcontent-%COMP%]   .menu-item[_ngcontent-%COMP%]{align-items:center;box-sizing:border-box;color:inherit;cursor:pointer;display:inline;display:flex;flex:1;font-weight:400;gap:1rem;line-height:1.5rem;margin:0;padding:1.2rem 1.2rem 1.2rem 1.6rem}[_nghost-%COMP%]   .menu-container[_ngcontent-%COMP%]   .menu[_ngcontent-%COMP%]   .divider[_ngcontent-%COMP%]{background:#e2e2e2;height:1px;order:none}[_nghost-%COMP%]   .menu-container[_ngcontent-%COMP%]   .menu[_ngcontent-%COMP%]   a.disabled[_ngcontent-%COMP%]{color:#bebebe;cursor:not-allowed}"] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(MenuContentComponent, [{
        type: Component,
        args: [{
                selector: 'menu-content',
                styleUrls: ['./menu-content.component.scss'],
                template: `<div class="menu-container novo-menu" [ngClass]="menuClass" tabindex="0">
    <ul #menu class="menu" style="position: static; float: none;" tabindex="0">
      <ng-container *ngFor="let menuItem of menuItems; let i = index">
        <ng-template [ngTemplateOutlet]="menuItem.template" [ngTemplateOutletContext]="{ $implicit: item }"></ng-template>
        <!-- <novo-icon class="sub-menu-caret" suffix *ngIf="!!menuItem.subMenu" size="small" color="ash">expand</novo-icon> -->
      </ng-container>
    </ul>
  </div> `,
            }]
    }], function () { return []; }, { menuItems: [{
            type: Input
        }], item: [{
            type: Input
        }], event: [{
            type: Input
        }], menu: [{
            type: Input
        }], parentMenu: [{
            type: Input
        }], menuClass: [{
            type: Input
        }], overlay: [{
            type: Input
        }], isLeaf: [{
            type: Input
        }], openSubMenu: [{
            type: Output
        }], closeLeafMenu: [{
            type: Output
        }], closeAllMenus: [{
            type: Output
        }], onKeyEvent: [{
            type: HostListener,
            args: ['window:keydown.ArrowDown', ['$event']]
        }, {
            type: HostListener,
            args: ['window:keydown.ArrowUp', ['$event']]
        }], keyboardOpenSubMenu: [{
            type: HostListener,
            args: ['window:keydown.ArrowRight', ['$event']]
        }], keyboardMenuItemSelect: [{
            type: HostListener,
            args: ['window:keydown.Enter', ['$event']]
        }, {
            type: HostListener,
            args: ['window:keydown.Space', ['$event']]
        }], onCloseLeafMenu: [{
            type: HostListener,
            args: ['window:keydown.Escape', ['$event']]
        }, {
            type: HostListener,
            args: ['window:keydown.ArrowLeft', ['$event']]
        }], closeMenu: [{
            type: HostListener,
            args: ['document:click', ['$event']]
        }], onMouseLeave: [{
            type: HostListener,
            args: ['mouseleave', ['$event']]
        }] }); })();

class MenuDirective {
    constructor(element, menuService, cdr, _parentMenu) {
        this.element = element;
        this.menuService = menuService;
        this.cdr = cdr;
        this._parentMenu = _parentMenu;
        this.waitWhenOpen = false;
        this.capture = false;
        this.anchor = false;
        this.trigger = 'click';
        this.isSubMenu = false;
        this.isActive = false;
        if (!!this._parentMenu) {
            this.isSubMenu = true;
            this.trigger = 'mouseenter';
        }
    }
    get hb_menuActive() {
        return this.isActive;
    }
    ngOnInit() {
        this.subscription = this.menuService.close.subscribe(() => {
            this.isActive = false;
            this.cdr.detectChanges();
        });
    }
    ngOnDestroy() {
        this.isActive = false;
        this.subscription.unsubscribe();
    }
    onMenuClick(event) {
        if (this.trigger !== event.type) {
            return;
        }
        if (this.trigger === 'click' && event.button !== 0) {
            return;
        }
        else if (this.trigger === 'contextmenu' && event.button !== 2) {
            return;
        }
        else if (this.waitWhenOpen && this.menuService.hasOpenMenus()) {
            return;
        }
        if (!this.menu.disabled) {
            this.menuService.show.next({
                menu: this.menu,
                event,
                item: this.menuContext,
                anchorElement: this.anchor ? this.element.nativeElement : null,
                parentMenu: this._parentMenu,
                menuTrigger: this,
            });
            this.isActive = true;
            event.preventDefault();
            event.stopPropagation();
            this.cdr.detectChanges();
        }
    }
}
MenuDirective.ɵfac = function MenuDirective_Factory(t) { return new (t || MenuDirective)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NovoMenuService), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(PARENT_MENU, 8)); };
MenuDirective.ɵdir = ɵɵdefineDirective({ type: MenuDirective, selectors: [["", "menu", ""]], hostVars: 2, hostBindings: function MenuDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵɵlistener("click", function MenuDirective_click_HostBindingHandler($event) { return ctx.onMenuClick($event); })("contextmenu", function MenuDirective_contextmenu_HostBindingHandler($event) { return ctx.onMenuClick($event); })("mouseenter", function MenuDirective_mouseenter_HostBindingHandler($event) { return ctx.onMenuClick($event); });
    } if (rf & 2) {
        ɵɵclassProp("menu-active", ctx.hb_menuActive);
    } }, inputs: { menuContext: "menuContext", menu: "menu", menuContent: "menuContent", waitWhenOpen: "waitWhenOpen", capture: "capture", anchor: "anchor", trigger: "trigger" } });
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], MenuDirective.prototype, "waitWhenOpen", void 0);
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], MenuDirective.prototype, "capture", void 0);
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], MenuDirective.prototype, "anchor", void 0);
/*@__PURE__*/ (function () { ɵsetClassMetadata(MenuDirective, [{
        type: Directive,
        args: [{
                selector: '[menu]',
            }]
    }], function () { return [{ type: ElementRef }, { type: NovoMenuService }, { type: ChangeDetectorRef }, { type: MenuComponent, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [PARENT_MENU]
            }] }]; }, { menuContext: [{
            type: Input
        }], menu: [{
            type: Input
        }], menuContent: [{
            type: Input
        }], waitWhenOpen: [{
            type: Input
        }], capture: [{
            type: Input
        }], anchor: [{
            type: Input
        }], trigger: [{
            type: Input
        }], hb_menuActive: [{
            type: HostBinding,
            args: ['class.menu-active']
        }], onMenuClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }, {
            type: HostListener,
            args: ['contextmenu', ['$event']]
        }, {
            type: HostListener,
            args: ['mouseenter', ['$event']]
        }] }); })();

class NovoMenuModule {
    static forRoot(options) {
        return {
            ngModule: NovoMenuModule,
            providers: [
                NovoMenuService,
                {
                    provide: MENU_OPTIONS,
                    useValue: options,
                },
                { provide: OverlayContainer, useClass: FullscreenOverlayContainer },
            ],
        };
    }
}
NovoMenuModule.ɵmod = ɵɵdefineNgModule({ type: NovoMenuModule });
NovoMenuModule.ɵinj = ɵɵdefineInjector({ factory: function NovoMenuModule_Factory(t) { return new (t || NovoMenuModule)(); }, imports: [[CommonModule, OverlayModule, NovoCommonModule, NovoIconModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoMenuModule, { declarations: [MenuDirective, MenuComponent, MenuContentComponent, MenuItemDirective], imports: [CommonModule, OverlayModule, NovoCommonModule, NovoIconModule], exports: [MenuDirective, MenuComponent, MenuItemDirective] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoMenuModule, [{
        type: NgModule,
        args: [{
                declarations: [MenuDirective, MenuComponent, MenuContentComponent, MenuItemDirective],
                entryComponents: [MenuContentComponent],
                exports: [MenuDirective, MenuComponent, MenuItemDirective],
                imports: [CommonModule, OverlayModule, NovoCommonModule, NovoIconModule],
            }]
    }], null, null); })();

/*
 * Public API Surface of ngx-contextmenu
 */

// NG2
function NovoMultiPickerElement_novo_chip_0_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-chip", 6);
    ɵɵlistener("removed", function NovoMultiPickerElement_novo_chip_0_Template_novo_chip_removed_0_listener($event) { ɵɵrestoreView(_r5); const item_r3 = ctx.$implicit; const ctx_r4 = ɵɵnextContext(); return ctx_r4.removeFromDisplay($event, item_r3); })("selectionChange", function NovoMultiPickerElement_novo_chip_0_Template_novo_chip_selectionChange_0_listener($event) { ɵɵrestoreView(_r5); const item_r3 = ctx.$implicit; const ctx_r6 = ɵɵnextContext(); return ctx_r6.select($event, item_r3); });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const item_r3 = ctx.$implicit;
    const ctx_r0 = ɵɵnextContext();
    ɵɵclassProp("selected", item_r3 == ctx_r0.selected);
    ɵɵproperty("type", item_r3.type);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", item_r3.label, " ");
} }
function NovoMultiPickerElement_div_3_li_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "li");
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const type_r8 = ctx.$implicit;
    const ctx_r7 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵtextInterpolate3("+ ", type_r8.count, " ", ctx_r7.labels.more, " ", type_r8.type, "");
} }
function NovoMultiPickerElement_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div");
    ɵɵelementStart(1, "ul", 7);
    ɵɵtemplate(2, NovoMultiPickerElement_div_3_li_2_Template, 2, 3, "li", 8);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵproperty("ngForOf", ctx_r1.notShown);
} }
function NovoMultiPickerElement_label_7_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "label", 9);
    ɵɵlistener("click", function NovoMultiPickerElement_label_7_Template_label_click_0_listener() { ɵɵrestoreView(_r10); const ctx_r9 = ɵɵnextContext(); return ctx_r9.clearValue(); });
    ɵɵtext(1);
    ɵɵelement(2, "i", 10);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate1("", ctx_r2.labels.clearAll, " ");
} }
// Value accessor for the component (supports ngModel)
const CHIPS_VALUE_ACCESSOR$2 = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoMultiPickerElement),
    multi: true,
};
class NovoMultiPickerElement {
    constructor(element, labels) {
        this.element = element;
        this.labels = labels;
        this.placeholder = '';
        this.changed = new EventEmitter();
        this.focus = new EventEmitter();
        this.blur = new EventEmitter();
        this.items = [];
        this._items = new ReplaySubject(1);
        this.selected = null;
        this.config = {};
        // private data model
        this._value = {};
        this.notShown = {};
        this.onModelChange = () => { };
        this.onModelTouched = () => { };
        this.chipsCount = 4;
    }
    get value() {
        return this._value;
    }
    set value(selectedItems) {
        if (selectedItems) {
            this.types.forEach((x) => (this._value[x.value] = selectedItems[x.value]));
        }
        else {
            this._value = {};
            this.types.forEach((x) => (this._value[x.value] = []));
        }
        this.changed.emit(selectedItems);
        this.onModelChange(selectedItems);
    }
    ngOnInit() {
        this.selectAllOption = this.source.selectAllOption || false;
        this.chipsCount = this.source.chipsCount || 4;
        this.strictRelationship = this.source.strictRelationship || false;
        this.setupOptions();
    }
    clearValue() {
        this.types.forEach((type) => this.modifyAllOfType(type.value, 'unselect'));
        this.items = [];
        this._items.next(this.items);
        this.setInitialValue(null);
        this.onModelChange(this.value);
    }
    removeFromDisplay(event, item) {
        this.remove(true, item);
        this.modifyAffectedParentsOrChildren(false, item);
    }
    setupOptions() {
        this.options = this.source.options || [];
        this._options = [];
        if (this.options) {
            this.options.forEach((option) => {
                const formattedOption = this.setupOptionsByType(option);
                this._options.push(formattedOption);
            });
        }
        this.source.options = this._options;
    }
    setupOptionsByType(section) {
        const formattedSection = {
            type: section.type,
            label: section.label || section.type,
        };
        formattedSection.data = section.data.map((item) => {
            return this.formatOption(section, item);
        });
        if (this.selectAllOption) {
            const selectAll = this.createSelectAllOption(section);
            formattedSection.data.splice(0, 0, selectAll);
        }
        formattedSection.originalData = formattedSection.data.slice();
        return formattedSection;
    }
    formatOption(section, item) {
        const obj = {
            value: section.field ? item[section.field] : item.value || item,
            label: section.format ? Helpers.interpolate(section.format, item) : item.label || String(item.value || item),
            type: section.type,
            checked: undefined,
            isParentOf: section.isParentOf,
            isChildOf: section.isChildOf,
        };
        if (obj.isChildOf) {
            obj[section.isChildOf] = item[section.isChildOf];
        }
        return obj;
    }
    createSelectAllOption(section) {
        const selectAll = {
            value: 'ALL',
            label: `All ${section.type}`,
            type: section.type,
            checked: this.model && this.model.length && this.model.indexOf('ALL') !== -1,
            isParentOf: section.isParentOf,
            isChildOf: section.isChildOf,
        };
        if (section.isChildOf) {
            const allParents = section.data.reduce((accum, next) => {
                return accum.concat(next[section.isChildOf]);
            }, []);
            selectAll[section.isChildOf] = allParents;
        }
        return selectAll;
    }
    deselectAll() {
        this.selected = null;
    }
    select(event, item) {
        this.blur.emit(event);
        this.deselectAll();
        this.selected = item;
    }
    onFocus(e) {
        this.element.nativeElement.classList.add('selected');
        this.focus.emit(e);
    }
    clickOption(event) {
        if (event && !(event instanceof Event)) {
            if (event.checked === false) {
                this.remove(null, event);
            }
            else {
                this.add(event);
            }
            this.modifyAffectedParentsOrChildren(event.checked, event);
            // Set focus on the picker
            const input = this.element.nativeElement.querySelector('novo-picker > input');
            if (input) {
                input.focus();
            }
        }
    }
    add(event) {
        if (event.value === 'ALL') {
            this.modifyAllOfType(event.type, 'select');
        }
        else {
            this.updateDisplayItems(event, 'add');
            this.value[event.type].push(event.value);
            this.updateAllItemState(event.type);
            this.triggerValueUpdate();
        }
        this.updateParentOrChildren(event, 'select');
        this.select(null, event);
    }
    updateAllItemState(type) {
        const allOfType = this.getAllOfType(type);
        const allOfTypeSelected = this.allItemsSelected(allOfType, type);
        if (allOfTypeSelected) {
            this.selectAll(allOfType, type);
        }
        return { allOfType, allOfTypeSelected };
    }
    setIndeterminateState(allOfType, status) {
        if (!this.selectAllOption) {
            return;
        }
        const allItem = allOfType[0];
        allItem.indeterminate = status;
    }
    updateDisplayItems(item, action) {
        const adding = action === 'add';
        if (adding) {
            this.items.push(item);
        }
        else {
            if (this.items.indexOf(item) > -1) {
                this.items.splice(this.items.indexOf(item), 1);
            }
        }
        this.updateDisplayText(this.items);
        this._items.next(this.items);
    }
    updateDisplayText(items) {
        this.notShown = [];
        const notShown = items.slice(this.chipsCount);
        if (notShown.length > 0) {
            this.types.forEach((type) => {
                let count;
                const selectedOfType = notShown.filter((x) => x.type === type.value);
                if (selectedOfType.length === 1 && selectedOfType[0].value === 'ALL') {
                    count = this.getAllOfType(type.value).length - 1;
                }
                else {
                    count = selectedOfType.length;
                }
                const displayType = count === 1 ? type.singular : type.plural || type.value;
                if (count > 0) {
                    this.notShown.push({ type: displayType, count });
                }
            });
        }
    }
    remove(event, item) {
        let triggeredByEvent;
        if (event) {
            triggeredByEvent = true;
        }
        const itemToRemove = item;
        if (itemToRemove.value === 'ALL') {
            triggeredByEvent = false;
            this.modifyAllOfType(itemToRemove.type, 'unselect');
        }
        else if (this.allOfTypeSelected(itemToRemove.type)) {
            this.handleRemoveItemIfAllSelected(itemToRemove);
        }
        this.removeItem(item, triggeredByEvent);
    }
    removeItem(item, triggeredByEvent) {
        item.checked = false;
        this.deselectAll();
        this.removeValue(item);
        if (item.value !== 'ALL') {
            this.updateParentOrChildren(item, 'unselect');
        }
        if (triggeredByEvent) {
            this.modifyAffectedParentsOrChildren(false, item);
        }
    }
    removeValue(item) {
        const updatedValues = this.value[item.type].filter((x) => x !== item.value);
        this.value[item.type] = updatedValues;
        this.triggerValueUpdate();
        this.updateDisplayItems(item, 'remove');
    }
    onKeyDown(event) {
        if (event.key === "Backspace" /* Backspace */) {
            if (event.target && event.target.value.length === 0 && this.items.length) {
                if (event) {
                    event.stopPropagation();
                    event.preventDefault();
                }
                if (this.selected) {
                    this.remove(null, this.selected);
                }
                else {
                    this.select(event, this.items[this.items.length - 1]);
                }
            }
        }
    }
    allOfTypeSelected(type) {
        return this.items.filter((x) => x.type === type && x.value === 'ALL').length > 0;
    }
    modifyAllOfType(type, action) {
        const selecting = action === 'select';
        const allOfType = this.getAllOfType(type);
        allOfType.forEach((item) => {
            item.checked = selecting;
            item.indeterminate = false;
        });
        if (selecting) {
            this.selectAll(allOfType, type);
        }
        else {
            this.items = [...this.items.filter((x) => x.type !== type)];
            this._items.next(this.items);
            this.value[type] = [];
        }
        if (this.selectAllOption) {
            this.updateAllParentsOrChildren(allOfType[0], action);
        }
        this.triggerValueUpdate();
    }
    triggerValueUpdate() {
        const updatedObject = {};
        this.types.forEach((x) => (updatedObject[x.value] = this.value[x.value]));
        this.value = updatedObject;
    }
    selectAll(allOfType, type) {
        if (!this.selectAllOption) {
            return;
        }
        allOfType[0].checked = true;
        const values = allOfType.map((i) => {
            return i.value;
        });
        // remove 'ALL' value
        values.splice(0, 1);
        this.value[type] = values;
        const updatedItems = this.items.filter((x) => x.type !== type);
        this.items = updatedItems;
        this.updateDisplayItems(allOfType[0], 'add');
    }
    handleRemoveItemIfAllSelected(item) {
        if (!this.selectAllOption) {
            return;
        }
        const type = item.type;
        const allOfType = this.getAllOfType(type);
        const allItem = allOfType[0];
        this.removeItem(allItem);
        allItem.indeterminate = true;
        const selectedItems = allOfType.filter((i) => i.checked === true);
        this.items = [...this.items, ...selectedItems];
        const values = selectedItems.map((i) => {
            return i.value;
        });
        this.value[type] = [...values];
    }
    handleOutsideClick(event) {
        // If the elements doesn't contain the target element, it is an outside click
        if (!this.element.nativeElement.contains(event.target)) {
            this.blur.emit(event);
            this.deselectAll();
        }
    }
    getAllOfType(type) {
        return this._options.filter((x) => x.type === type)[0].originalData;
    }
    updateParentOrChildren(item, action) {
        if (this.strictRelationship && item.isParentOf) {
            this.updateChildrenValue(item, action);
        }
        else if (item.isChildOf && this.selectAllOption) {
            this.updateParentValue(item, action);
        }
    }
    modifyAffectedParentsOrChildren(selecting, itemChanged) {
        if (!itemChanged.isChildOf && !itemChanged.isParentOf) {
            return;
        }
        const parent = this.types.filter((x) => !!x.isParentOf)[0];
        const parentType = parent.value;
        const allParentType = this.getAllOfType(parentType);
        const childType = allParentType[0].isParentOf;
        const allChildren = this.getAllOfType(childType);
        const allCheckedChildren = allChildren.filter((x) => !!x.checked);
        allParentType.forEach((obj) => {
            if (obj.value === 'ALL') {
                return;
            }
            const selectedChildrenOfParent = allCheckedChildren.filter((x) => {
                return x[parentType].filter((y) => y === obj.value).length > 0;
            });
            if (selecting) {
                if (obj.checked) {
                    return;
                }
                obj.indeterminate = selectedChildrenOfParent.length > 0;
            }
            else {
                const allChildrenOfParent = allChildren.filter((x) => {
                    return x.value !== 'ALL' && x[parentType].filter((y) => y === obj.value).length > 0;
                });
                if (selectedChildrenOfParent.length > 0) {
                    if (obj.checked) {
                        if (this.strictRelationship && allChildrenOfParent.length !== selectedChildrenOfParent.length) {
                            obj.indeterminate = true;
                            obj.checked = false;
                            this.removeValue(obj);
                            this.addIndividualChildren(selectedChildrenOfParent);
                        }
                    }
                    else {
                        obj.indeterminate = true;
                    }
                    if (this.strictRelationship && itemChanged.type !== parentType) {
                        if (obj.checked) {
                            obj.checked = false;
                            this.removeValue(obj);
                            this.addIndividualChildren(selectedChildrenOfParent);
                        }
                    }
                }
                else {
                    obj.indeterminate = false;
                    if (allChildrenOfParent.length === 0) {
                        // if it has no children and is checked, it should stay checked
                        return;
                    }
                    else if (this.strictRelationship && itemChanged.type !== parentType) {
                        this.remove(null, obj);
                    }
                }
            }
        });
        if (this.selectAllOption) {
            this.updateIndeterminateStates(allParentType, allChildren, allCheckedChildren);
        }
    }
    updateAllParentsOrChildren(allItem, action) {
        if (allItem.isParentOf) {
            this.updateAllChildrenValue(allItem, action);
        }
        else if (allItem.isChildOf) {
            this.updateAllParentValue(allItem, action);
        }
    }
    updateAllChildrenValue(item, action) {
        const selecting = action === 'select';
        const childType = item.isParentOf;
        const potentialChildren = this.getAllOfType(childType);
        if (this.selectAllOption && this.allOfTypeSelected(childType) && !selecting) {
            this.remove(null, potentialChildren[0]);
            return;
        }
        potentialChildren.forEach((x) => {
            if (x.value === 'ALL' && !x.checked) {
                if (selecting) {
                    x.checked = true;
                }
                x.indeterminate = selecting;
            }
            else {
                if (x.checked && !selecting) {
                    this.remove(null, x);
                }
                x.checked = selecting;
            }
        });
    }
    updateAllParentValue(item, action) {
        const selecting = action === 'select';
        const parentType = item.isChildOf;
        const potentialParents = this.getAllOfType(parentType);
        potentialParents.forEach((x) => {
            if (!x.checked) {
                x.indeterminate = selecting;
            }
        });
    }
    updateIndeterminateStates(allParentType, allChildren, allCheckedChildren) {
        const allCheckedOrIndeterminateParents = allParentType.filter((x) => (!!x.checked || !!x.indeterminate) && x.value !== 'ALL');
        const isParentIndeterminate = !!allParentType[0].checked ? false : allCheckedOrIndeterminateParents.length > 0;
        const isChildIndeterminate = !!allChildren[0].checked ? false : allCheckedChildren.length > 0;
        this.setIndeterminateState(allParentType, isParentIndeterminate);
        this.setIndeterminateState(allChildren, isChildIndeterminate);
    }
    updateChildrenValue(parent, action) {
        const selecting = action === 'select';
        const childType = parent.isParentOf;
        const potentialChildren = this.getAllOfType(childType);
        potentialChildren.forEach((x) => {
            if (x.value === 'ALL') {
                return;
            }
            if (x[parent.type].filter((y) => y === parent.value).length > 0) {
                if (x.checked && !selecting) {
                    x.checked = false;
                    if (this.allOfTypeSelected(childType)) {
                        this.handleRemoveItemIfAllSelected(x);
                    }
                    else {
                        this.removeValue(x);
                    }
                }
                x.checked = selecting;
            }
        });
    }
    updateParentValue(child, action) {
        const allParentType = this.getAllOfType(child.isChildOf);
        if (allParentType[0].checked && action !== 'select') {
            this.handleRemoveItemIfAllSelected(allParentType[0]);
        }
    }
    addIndividualChildren(children) {
        let parentAlreadySelected = false;
        children.forEach((x) => {
            if (x.isChildOf) {
                // only add children if their parents are not already selected
                x[x.isChildOf].forEach((parent) => {
                    if (this.value[x.isChildOf].filter((p) => p === parent).length > 0) {
                        parentAlreadySelected = true;
                    }
                });
            }
            if (this.value[x.type].filter((item) => item === x.value).length === 0 && !parentAlreadySelected) {
                this.add(x);
            }
        });
    }
    setInitialValue(model) {
        this.items = [];
        this.value = model || {};
        if (!this.types) {
            return;
        }
        this.types.forEach((typeObj) => {
            const type = typeObj.value;
            if (this.value[type]) {
                let indeterminateIsSet = false;
                const options = this.updateAllItemState(type);
                const optionsByType = options.allOfType;
                const allSelected = options.allOfTypeSelected;
                this.value[type].forEach((item) => {
                    if (!allSelected && !indeterminateIsSet) {
                        indeterminateIsSet = true;
                        this.setIndeterminateState(optionsByType, true);
                    }
                    const value = optionsByType.filter((x) => x.value === item)[0];
                    value.checked = true;
                    if (!allSelected) {
                        this.updateDisplayItems(value, 'add');
                    }
                    if (this.strictRelationship && value.isParentOf) {
                        this.updateChildrenValue(value, 'select');
                    }
                });
                if (typeObj.isChildOf) {
                    this.modifyAffectedParentsOrChildren(true, { value: type, isChildOf: true });
                }
            }
            else {
                this.value[type] = [];
            }
        });
    }
    allItemsSelected(optionsByType, type) {
        return this.value[type].length === optionsByType.length - 1;
    }
    // Set touched on blur
    onTouched(e) {
        this.element.nativeElement.classList.remove('selected');
        this.onModelTouched();
        this.blur.emit(e);
    }
    writeValue(model) {
        this.model = model;
        this.setInitialValue(model);
    }
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
}
NovoMultiPickerElement.ɵfac = function NovoMultiPickerElement_Factory(t) { return new (t || NovoMultiPickerElement)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NovoLabelService)); };
NovoMultiPickerElement.ɵcmp = ɵɵdefineComponent({ type: NovoMultiPickerElement, selectors: [["multi-picker"]], hostVars: 2, hostBindings: function NovoMultiPickerElement_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵclassProp("with-value", ctx.items.length > 0);
    } }, inputs: { source: "source", placeholder: "placeholder", types: "types", value: "value" }, outputs: { changed: "changed", focus: "focus", blur: "blur" }, features: [ɵɵProvidersFeature([CHIPS_VALUE_ACCESSOR$2])], decls: 8, vars: 14, consts: [[3, "type", "selected", "removed", "selectionChange", 4, "ngFor", "ngForOf"], [4, "ngIf"], [1, "chip-input-container"], ["clearValueOnSelect", "true", 3, "config", "placeholder", "overrideElement", "select", "keydown", "focus", "blur"], [1, "bhi-search"], ["class", "clear-all", 3, "click", 4, "ngIf"], [3, "type", "removed", "selectionChange"], [1, "summary"], [4, "ngFor", "ngForOf"], [1, "clear-all", 3, "click"], [1, "bhi-times"]], template: function NovoMultiPickerElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵtemplate(0, NovoMultiPickerElement_novo_chip_0_Template, 2, 4, "novo-chip", 0);
        ɵɵpipe(1, "slice");
        ɵɵpipe(2, "async");
        ɵɵtemplate(3, NovoMultiPickerElement_div_3_Template, 3, 1, "div", 1);
        ɵɵelementStart(4, "div", 2);
        ɵɵelementStart(5, "novo-picker", 3);
        ɵɵlistener("select", function NovoMultiPickerElement_Template_novo_picker_select_5_listener($event) { return ctx.clickOption($event); })("keydown", function NovoMultiPickerElement_Template_novo_picker_keydown_5_listener($event) { return ctx.onKeyDown($event); })("focus", function NovoMultiPickerElement_Template_novo_picker_focus_5_listener($event) { return ctx.onFocus($event); })("blur", function NovoMultiPickerElement_Template_novo_picker_blur_5_listener($event) { return ctx.onTouched($event); });
        ɵɵelementEnd();
        ɵɵelementEnd();
        ɵɵelement(6, "i", 4);
        ɵɵtemplate(7, NovoMultiPickerElement_label_7_Template, 3, 1, "label", 5);
    } if (rf & 2) {
        ɵɵproperty("ngForOf", ɵɵpipeBind3(1, 8, ɵɵpipeBind1(2, 12, ctx._items), 0, ctx.chipsCount));
        ɵɵadvance(3);
        ɵɵproperty("ngIf", ctx.items.length > ctx.chipsCount);
        ɵɵadvance(2);
        ɵɵproperty("config", ctx.source)("placeholder", ctx.placeholder)("overrideElement", ctx.element);
        ɵɵadvance(1);
        ɵɵclassProp("has-value", ctx.items.length);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.items.length);
    } }, directives: [NgForOf, NgIf, NovoPickerElement, NovoChipElement], pipes: [SlicePipe, AsyncPipe], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoMultiPickerElement, [{
        type: Component,
        args: [{
                selector: 'multi-picker',
                providers: [CHIPS_VALUE_ACCESSOR$2],
                template: `
    <novo-chip
      *ngFor="let item of _items | async | slice: 0:chipsCount"
      [type]="item.type"
      [class.selected]="item == selected"
      (removed)="removeFromDisplay($event, item)"
      (selectionChange)="select($event, item)"
    >
      {{ item.label }}
    </novo-chip>
    <div *ngIf="items.length > chipsCount">
      <ul class="summary">
        <li *ngFor="let type of notShown">+ {{ type.count }} {{ labels.more }} {{ type.type }}</li>
      </ul>
    </div>
    <div class="chip-input-container">
      <novo-picker
        clearValueOnSelect="true"
        [config]="source"
        [placeholder]="placeholder"
        (select)="clickOption($event)"
        (keydown)="onKeyDown($event)"
        (focus)="onFocus($event)"
        (blur)="onTouched($event)"
        [overrideElement]="element"
      >
      </novo-picker>
    </div>
    <i class="bhi-search" [class.has-value]="items.length"></i>
    <label class="clear-all" *ngIf="items.length" (click)="clearValue()">{{ labels.clearAll }} <i class="bhi-times"></i></label>
  `,
                host: {
                    '[class.with-value]': 'items.length > 0',
                },
            }]
    }], function () { return [{ type: ElementRef }, { type: NovoLabelService }]; }, { source: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], types: [{
            type: Input
        }], changed: [{
            type: Output
        }], focus: [{
            type: Output
        }], blur: [{
            type: Output
        }], value: [{
            type: Input
        }] }); })();

// NG2
class NovoMultiPickerModule {
}
NovoMultiPickerModule.ɵmod = ɵɵdefineNgModule({ type: NovoMultiPickerModule });
NovoMultiPickerModule.ɵinj = ɵɵdefineInjector({ factory: function NovoMultiPickerModule_Factory(t) { return new (t || NovoMultiPickerModule)(); }, imports: [[CommonModule, FormsModule, NovoPickerModule, NovoChipsModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoMultiPickerModule, { declarations: [NovoMultiPickerElement], imports: [CommonModule, FormsModule, NovoPickerModule, NovoChipsModule], exports: [NovoMultiPickerElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoMultiPickerModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, FormsModule, NovoPickerModule, NovoChipsModule],
                declarations: [NovoMultiPickerElement],
                exports: [NovoMultiPickerElement],
            }]
    }], null, null); })();

// NG2
function NonIdealStateElement_novo_icon_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-icon", 3);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵproperty("color", ctx_r0.theme);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r0.icon);
} }
function NonIdealStateElement_novo_title_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-title", 4);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r1.title);
} }
function NonIdealStateElement_novo_text_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-text", 5);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r2.description);
} }
const _c0$1e = ["*"];
class NonIdealStateElement {
    constructor() {
        this.hb_class = 'novo-non-ideal-state';
        this.theme = 'light';
    }
}
NonIdealStateElement.ɵfac = function NonIdealStateElement_Factory(t) { return new (t || NonIdealStateElement)(); };
NonIdealStateElement.ɵcmp = ɵɵdefineComponent({ type: NonIdealStateElement, selectors: [["novo-non-ideal-state"]], hostVars: 2, hostBindings: function NonIdealStateElement_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵclassMap(ctx.hb_class);
    } }, inputs: { theme: "theme", icon: "icon", title: "title", description: "description" }, ngContentSelectors: _c0$1e, decls: 4, vars: 3, consts: [["class", "novo-non-ideal-state-icon", 3, "color", 4, "ngIf"], ["class", "novo-non-ideal-state-title", "marginBefore", "", 4, "ngIf"], ["block", "", "marginBefore", "", "marginAfter", "", 4, "ngIf"], [1, "novo-non-ideal-state-icon", 3, "color"], ["marginBefore", "", 1, "novo-non-ideal-state-title"], ["block", "", "marginBefore", "", "marginAfter", ""]], template: function NonIdealStateElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵtemplate(0, NonIdealStateElement_novo_icon_0_Template, 2, 2, "novo-icon", 0);
        ɵɵtemplate(1, NonIdealStateElement_novo_title_1_Template, 2, 1, "novo-title", 1);
        ɵɵtemplate(2, NonIdealStateElement_novo_text_2_Template, 2, 1, "novo-text", 2);
        ɵɵprojection(3);
    } if (rf & 2) {
        ɵɵproperty("ngIf", ctx.icon);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.title);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.description);
    } }, directives: [NgIf, NovoIconComponent, NovoTitle, NovoText], styles: ["[_nghost-%COMP%]{align-items:center;display:flex;flex-direction:column;justify-content:center;padding:2rem;text-align:center}[_nghost-%COMP%]   .novo-non-ideal-state-icon[_ngcontent-%COMP%]{font-size:xx-large}[_nghost-%COMP%]   button[_ngcontent-%COMP%]{display:inline-block}"] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NonIdealStateElement, [{
        type: Component,
        args: [{
                selector: 'novo-non-ideal-state',
                styleUrls: ['./NonIdealState.scss'],
                template: `
    <novo-icon class="novo-non-ideal-state-icon" *ngIf="icon" [color]="theme">{{ icon }}</novo-icon>
    <novo-title class="novo-non-ideal-state-title" *ngIf="title" marginBefore>{{ title }}</novo-title>
    <novo-text *ngIf="description" block marginBefore marginAfter>{{ description }}</novo-text>
    <ng-content></ng-content>
  `,
            }]
    }], null, { hb_class: [{
            type: HostBinding,
            args: ['class']
        }], theme: [{
            type: Input
        }], icon: [{
            type: Input
        }], title: [{
            type: Input
        }], description: [{
            type: Input
        }] }); })();

// NG2
class NovoNonIdealStateModule {
}
NovoNonIdealStateModule.ɵmod = ɵɵdefineNgModule({ type: NovoNonIdealStateModule });
NovoNonIdealStateModule.ɵinj = ɵɵdefineInjector({ factory: function NovoNonIdealStateModule_Factory(t) { return new (t || NovoNonIdealStateModule)(); }, imports: [[CommonModule, NovoIconModule, NovoCommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoNonIdealStateModule, { declarations: [NonIdealStateElement], imports: [CommonModule, NovoIconModule, NovoCommonModule], exports: [NonIdealStateElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoNonIdealStateModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, NovoIconModule, NovoCommonModule],
                declarations: [NonIdealStateElement],
                exports: [NonIdealStateElement],
            }]
    }], null, null); })();

class GooglePlacesService {
    constructor(_http, platformId, _global, _localStorageService) {
        this._http = _http;
        this.platformId = platformId;
        this._global = _global;
        this._localStorageService = _localStorageService;
    }
    getPredictions(url, query) {
        return new Promise((resolve) => {
            this._http.get(url + '?query=' + query).subscribe((data) => {
                if (data) {
                    resolve(data);
                }
                else {
                    resolve(false);
                }
            });
        });
    }
    getLatLngDetail(url, lat, lng) {
        return new Promise((resolve) => {
            this._http.get(url + '?lat=' + lat + '&lng=' + lng).subscribe((data) => {
                if (data) {
                    resolve(data);
                }
                else {
                    resolve(false);
                }
            });
        });
    }
    getPlaceDetails(url, placeId) {
        return new Promise((resolve) => {
            this._http.get(url + '?query=' + placeId).subscribe((data) => {
                if (data) {
                    resolve(data);
                }
                else {
                    resolve(false);
                }
            });
        });
    }
    getGeoCurrentLocation() {
        return new Promise((resolve) => {
            if (isPlatformBrowser(this.platformId)) {
                const _window = this._global.nativeGlobal;
                if (_window.navigator.geolocation) {
                    _window.navigator.geolocation.getCurrentPosition((pos) => {
                        const latlng = { lat: parseFloat(pos.coords.latitude + ''), lng: parseFloat(pos.coords.longitude + '') };
                        resolve(latlng);
                    });
                }
                else {
                    resolve(false);
                }
            }
            else {
                resolve(false);
            }
        });
    }
    getGeoLatLngDetail(latlng) {
        return new Promise((resolve) => {
            if (isPlatformBrowser(this.platformId)) {
                const _window = this._global.nativeGlobal;
                const geocoder = new _window.google.maps.Geocoder();
                geocoder.geocode({ location: latlng }, (results, status) => {
                    if (status === 'OK') {
                        this.getGeoPlaceDetail(results[0].place_id).then((result) => {
                            if (result) {
                                resolve(result);
                            }
                            else {
                                resolve(false);
                            }
                        });
                    }
                    else {
                        resolve(false);
                    }
                });
            }
            else {
                resolve(false);
            }
        });
    }
    getGeoPrediction(params) {
        return new Promise((resolve) => {
            if (isPlatformBrowser(this.platformId)) {
                const _window = this._global.nativeGlobal;
                const placesService = new _window.google.maps.places.AutocompleteService();
                let queryInput = {};
                const promiseArr = [];
                if (params.countryRestriction.length) {
                    queryInput = {
                        input: params.query,
                        componentRestrictions: { country: params.countryRestriction },
                    };
                }
                else {
                    queryInput = {
                        input: params.query,
                    };
                }
                if (params.geoLocation) {
                    queryInput.location = new _window.google.maps.LatLng(parseFloat(params.geoLocation[0]), parseFloat(params.geoLocation[1]));
                    queryInput.radius = params.radius;
                }
                if (params.geoTypes.length) {
                    for (let i = 0; i < params.geoTypes.length; i++) {
                        const _tempQuery = queryInput;
                        _tempQuery.types = new Array(params.geoTypes[i]);
                        promiseArr.push(this.geoPredictionCall(placesService, _tempQuery));
                    }
                }
                else {
                    promiseArr.push(this.geoPredictionCall(placesService, queryInput));
                }
                Promise.all(promiseArr).then((values) => {
                    const val = values;
                    if (val.length > 1) {
                        let _tempArr = [];
                        for (let j = 0; j < val.length; j++) {
                            if (val[j] && val[j].length) {
                                _tempArr = _tempArr.concat(val[j]);
                            }
                        }
                        _tempArr = this.getUniqueResults(_tempArr);
                        resolve(_tempArr);
                    }
                    else {
                        resolve(values[0]);
                    }
                });
            }
            else {
                resolve(false);
            }
        });
    }
    getGeoPlaceDetail(placeId) {
        return new Promise((resolve) => {
            if (isPlatformBrowser(this.platformId)) {
                const _window = this._global.nativeGlobal;
                const placesService = new _window.google.maps.places.PlacesService(document.createElement('div'));
                placesService.getDetails({ placeId }, (result, status) => {
                    if (result === null || result.length === 0) {
                        this.getGeoPaceDetailByReferance(result.referance).then((referanceData) => {
                            if (!referanceData) {
                                resolve(false);
                            }
                            else {
                                resolve(referanceData);
                            }
                        });
                    }
                    else {
                        resolve(result);
                    }
                });
            }
            else {
                resolve(false);
            }
        });
    }
    getGeoPaceDetailByReferance(referance) {
        return new Promise((resolve) => {
            if (isPlatformBrowser(this.platformId)) {
                const _window = this._global.nativeGlobal;
                const placesService = new _window.google.maps.places.PlacesService();
                placesService.getDetails({ reference: referance }, (result, status) => {
                    if (status === _window.google.maps.places.PlacesServiceStatus.OK) {
                        resolve(result);
                    }
                    else {
                        resolve(false);
                    }
                });
            }
            else {
                resolve(false);
            }
        });
    }
    addRecentList(localStorageName, result, itemSavedLength) {
        this.getRecentList(localStorageName).then((data) => {
            if (data) {
                for (let i = 0; i < data.length; i++) {
                    if (data[i].description === result.description) {
                        data.splice(i, 1);
                        break;
                    }
                }
                data.unshift(result);
                if (data.length > itemSavedLength) {
                    data.pop();
                }
                this._localStorageService.setItem(localStorageName, JSON.stringify(data));
            }
        });
    }
    getRecentList(localStorageName) {
        return new Promise((resolve) => {
            let value = this._localStorageService.getItem(localStorageName);
            if (value) {
                value = JSON.parse(value);
            }
            else {
                value = [];
            }
            resolve(value);
        });
    }
    getUniqueResults(arr) {
        return Array.from(arr.reduce((m, t) => m.set(t.place_id, t), new Map()).values());
    }
    geoPredictionCall(placesService, queryInput) {
        const _window = this._global.nativeGlobal;
        return new Promise((resolve) => {
            placesService.getPlacePredictions(queryInput, (result, status) => {
                if (status === _window.google.maps.places.PlacesServiceStatus.OK) {
                    resolve(result);
                }
                else {
                    resolve(false);
                }
            });
        });
    }
}
GooglePlacesService.ɵfac = function GooglePlacesService_Factory(t) { return new (t || GooglePlacesService)(ɵɵinject(HttpClient), ɵɵinject(PLATFORM_ID), ɵɵinject(GlobalRef), ɵɵinject(LocalStorageService)); };
GooglePlacesService.ɵprov = ɵɵdefineInjectable({ token: GooglePlacesService, factory: GooglePlacesService.ɵfac });
/*@__PURE__*/ (function () { ɵsetClassMetadata(GooglePlacesService, [{
        type: Injectable
    }], function () { return [{ type: HttpClient }, { type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }, { type: GlobalRef }, { type: LocalStorageService }]; }, null); })();

// NG2
function PlacesListComponent_novo_list_item_1_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-list-item", 2);
    ɵɵlistener("click", function PlacesListComponent_novo_list_item_1_Template_novo_list_item_click_0_listener($event) { ɵɵrestoreView(_r4); const $index_r2 = ctx.index; const ctx_r3 = ɵɵnextContext(); return ctx_r3.selectedListNode($event, $index_r2); });
    ɵɵelementStart(1, "item-header");
    ɵɵelement(2, "item-avatar", 3);
    ɵɵelementStart(3, "item-title");
    ɵɵtext(4);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementStart(5, "item-content");
    ɵɵtext(6);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const data_r1 = ctx.$implicit;
    ɵɵadvance(4);
    ɵɵtextInterpolate((data_r1.structured_formatting == null ? null : data_r1.structured_formatting.main_text) ? data_r1.structured_formatting.main_text : data_r1.description);
    ɵɵadvance(2);
    ɵɵtextInterpolate(data_r1.structured_formatting == null ? null : data_r1.structured_formatting.secondary_text);
} }
class PlacesListComponent {
    constructor(platformId, _elmRef, _global, _googlePlacesService) {
        this.platformId = platformId;
        this._elmRef = _elmRef;
        this._global = _global;
        this._googlePlacesService = _googlePlacesService;
        this.term = '';
        this.termChange = new EventEmitter();
        this.select = new EventEmitter();
        this.locationInput = '';
        this.gettingCurrentLocationFlag = false;
        this.dropdownOpen = false;
        this.recentDropdownOpen = false;
        this.queryItems = [];
        this.isSettingsError = false;
        this.settingsErrorMsg = '';
        this.settings = {};
        this.moduleinit = false;
        this.selectedDataIndex = -1;
        this.recentSearchData = [];
        this.userSelectedOption = '';
        this.defaultSettings = {
            geoPredictionServerUrl: '',
            geoLatLangServiceUrl: '',
            geoLocDetailServerUrl: '',
            geoCountryRestriction: [],
            geoTypes: [],
            geoLocation: [],
            geoRadius: 0,
            serverResponseListHierarchy: [],
            serverResponseatLangHierarchy: [],
            serverResponseDetailHierarchy: [],
            resOnSearchButtonClickOnly: false,
            useGoogleGeoApi: true,
            inputPlaceholderText: 'Enter Area Name',
            inputString: '',
            showSearchButton: true,
            showRecentSearch: true,
            showCurrentLocation: true,
            recentStorageName: 'recentSearches',
            noOfRecentSearchSave: 5,
            currentLocIconUrl: '',
            searchIconUrl: '',
            locationIconUrl: '',
        };
    }
    ngOnInit() {
        if (!this.moduleinit) {
            this.moduleInit();
        }
    }
    ngOnChanges() {
        this.moduleinit = true;
        this.moduleInit();
        this.searchinputCallback(null);
    }
    // function called when click event happens in input box. (Binded with view)
    searchinputClickCallback(event) {
        event.target.select();
        this.searchinputCallback(event);
    }
    // function called when there is a change in input. (Binded with view)
    searchinputCallback(event) {
        const inputVal = this.locationInput;
        if (inputVal) {
            this.getListQuery(inputVal);
        }
        else {
            this.queryItems = [];
            if (this.userSelectedOption) {
                this.userQuerySubmit('false');
            }
            this.userSelectedOption = '';
            if (this.settings.showRecentSearch) {
                this.showRecentSearch();
            }
            else {
                this.dropdownOpen = false;
            }
        }
    }
    // function to execute when user hover over autocomplete list.(binded with view)
    activeListNode(index) {
        for (let i = 0; i < this.queryItems.length; i++) {
            if (index === i) {
                this.queryItems[i].active = true;
                this.selectedDataIndex = index;
            }
            else {
                this.queryItems[i].active = false;
            }
        }
    }
    // function to execute when user select the autocomplete list.(binded with view)
    selectedListNode(event, index) {
        this.dropdownOpen = false;
        if (this.recentDropdownOpen) {
            this.setRecentLocation(this.queryItems[index]);
        }
        else {
            this.getPlaceLocationInfo(this.queryItems[index]);
        }
    }
    // function to close the autocomplete list when clicked outside. (binded with view)
    closeAutocomplete(event) {
        if (!this._elmRef.nativeElement.contains(event.target)) {
            this.selectedDataIndex = -1;
            this.dropdownOpen = false;
        }
    }
    // function to manually trigger the callback to parent component when clicked search button.
    userQuerySubmit(selectedOption) {
        const _userOption = selectedOption === 'false' ? '' : this.userSelectedOption;
        if (_userOption) {
            this.select.emit(this.userSelectedOption);
        }
        else {
            // this.select.emit(false);
        }
    }
    // function to get user current location from the device.
    currentLocationSelected() {
        if (isPlatformBrowser(this.platformId)) {
            this.gettingCurrentLocationFlag = true;
            this.dropdownOpen = false;
            this._googlePlacesService.getGeoCurrentLocation().then((result) => {
                if (!result) {
                    this.gettingCurrentLocationFlag = false;
                }
                else {
                    this.getCurrentLocationInfo(result);
                }
            });
        }
    }
    // module initialization happens. function called by ngOninit and ngOnChange
    moduleInit() {
        this.settings = this.setUserSettings();
        // condition to check if Radius is set without location detail.
        if (this.settings.geoRadius) {
            if (this.settings.geoLocation.length !== 2) {
                this.isSettingsError = true;
                this.settingsErrorMsg =
                    this.settingsErrorMsg + 'Radius should be used with GeoLocation. Please use "geoLocation" key to set lat and lng. ';
            }
        }
        // condition to check if lat and lng is set and radious is not set then it will set to 20,000KM by default
        if (this.settings.geoLocation.length === 2 && !this.settings.geoRadius) {
            this.settings.geoRadius = 20000000;
        }
        if (this.settings.showRecentSearch) {
            this.getRecentLocations();
        }
        if (!this.settings.useGoogleGeoApi) {
            if (!this.settings.geoPredictionServerUrl) {
                this.isSettingsError = true;
                this.settingsErrorMsg =
                    this.settingsErrorMsg + 'Prediction custom server url is not defined. Please use "geoPredictionServerUrl" key to set. ';
            }
            if (!this.settings.geoLatLangServiceUrl) {
                this.isSettingsError = true;
                this.settingsErrorMsg =
                    this.settingsErrorMsg + 'Latitude and longitude custom server url is not defined. Please use "geoLatLangServiceUrl" key to set. ';
            }
            if (!this.settings.geoLocDetailServerUrl) {
                this.isSettingsError = true;
                this.settingsErrorMsg =
                    this.settingsErrorMsg + 'Location detail custom server url is not defined. Please use "geoLocDetailServerUrl" key to set. ';
            }
        }
        this.locationInput = this.term;
    }
    // function to process the search query when pressed enter.
    processSearchQuery() {
        if (this.queryItems.length) {
            if (this.selectedDataIndex > -1) {
                this.selectedListNode(null, this.selectedDataIndex);
            }
            else {
                this.selectedListNode(null, 0);
            }
        }
    }
    // function to set user settings if it is available.
    setUserSettings() {
        const _tempObj = {};
        if (this.userSettings && typeof this.userSettings === 'object') {
            const keys = Object.keys(this.defaultSettings);
            for (const value of keys) {
                _tempObj[value] = this.userSettings[value] !== undefined ? this.userSettings[value] : this.defaultSettings[value];
            }
            return _tempObj;
        }
        else {
            return this.defaultSettings;
        }
    }
    // function to get the autocomplete list based on user input.
    getListQuery(value) {
        this.recentDropdownOpen = false;
        if (this.settings.useGoogleGeoApi) {
            const _tempParams = {
                query: value,
                countryRestriction: this.settings.geoCountryRestriction,
                geoTypes: this.settings.geoTypes,
            };
            if (this.settings.geoLocation.length === 2) {
                _tempParams.geoLocation = this.settings.geoLocation;
                _tempParams.radius = this.settings.geoRadius;
            }
            this._googlePlacesService.getGeoPrediction(_tempParams).then((result) => {
                this.updateListItem(result);
            });
        }
        else {
            this._googlePlacesService.getPredictions(this.settings.geoPredictionServerUrl, value).then((result) => {
                result = this.extractServerList(this.settings.serverResponseListHierarchy, result);
                this.updateListItem(result);
            });
        }
    }
    // function to extratc custom data which is send by the server.
    extractServerList(arrayList, data) {
        if (arrayList.length) {
            let _tempData = data;
            for (const key of arrayList) {
                _tempData = _tempData[key];
            }
            return _tempData;
        }
        else {
            return data;
        }
    }
    // function to update the predicted list.
    updateListItem(listData) {
        this.queryItems = listData ? listData : [];
        this.dropdownOpen = true;
    }
    // function to show the recent search result.
    showRecentSearch() {
        this.recentDropdownOpen = true;
        this.dropdownOpen = true;
        this._googlePlacesService.getRecentList(this.settings.recentStorageName).then((result) => {
            if (result) {
                this.queryItems = result;
            }
            else {
                this.queryItems = [];
            }
        });
    }
    // function to execute to get location detail based on latitude and longitude.
    getCurrentLocationInfo(latlng) {
        if (this.settings.useGoogleGeoApi) {
            this._googlePlacesService.getGeoLatLngDetail(latlng).then((result) => {
                if (result) {
                    this.setRecentLocation(result);
                }
                this.gettingCurrentLocationFlag = false;
            });
        }
        else {
            this._googlePlacesService.getLatLngDetail(this.settings.geoLatLangServiceUrl, latlng.lat, latlng.lng).then((result) => {
                if (result) {
                    result = this.extractServerList(this.settings.serverResponseatLangHierarchy, result);
                    this.setRecentLocation(result);
                }
                this.gettingCurrentLocationFlag = false;
            });
        }
    }
    // function to retrive the location info based on goovle place id.
    getPlaceLocationInfo(selectedData) {
        if (this.settings.useGoogleGeoApi) {
            this._googlePlacesService.getGeoPlaceDetail(selectedData.place_id).then((data) => {
                if (data) {
                    this.setRecentLocation(data);
                }
            });
        }
        else {
            this._googlePlacesService.getPlaceDetails(this.settings.geoLocDetailServerUrl, selectedData.place_id).then((result) => {
                if (result) {
                    result = this.extractServerList(this.settings.serverResponseDetailHierarchy, result);
                    this.setRecentLocation(result);
                }
            });
        }
    }
    // function to store the selected user search in the localstorage.
    setRecentLocation(data) {
        data = JSON.parse(JSON.stringify(data));
        data.description = data.description ? data.description : data.formatted_address;
        data.active = false;
        this.selectedDataIndex = -1;
        this.locationInput = data.description;
        if (this.settings.showRecentSearch) {
            this._googlePlacesService.addRecentList(this.settings.recentStorageName, data, this.settings.noOfRecentSearchSave);
            this.getRecentLocations();
        }
        this.userSelectedOption = data;
        // below code will execute only when user press enter or select any option selection and it emit a callback to the parent component.
        if (!this.settings.resOnSearchButtonClickOnly) {
            this.select.emit(data);
            this.termChange.emit(data);
        }
    }
    // function to retrive the stored recent user search from the localstorage.
    getRecentLocations() {
        this._googlePlacesService.getRecentList(this.settings.recentStorageName).then((data) => {
            this.recentSearchData = data && data.length ? data : [];
        });
    }
}
PlacesListComponent.ɵfac = function PlacesListComponent_Factory(t) { return new (t || PlacesListComponent)(ɵɵdirectiveInject(PLATFORM_ID), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(GlobalRef), ɵɵdirectiveInject(GooglePlacesService)); };
PlacesListComponent.ɵcmp = ɵɵdefineComponent({ type: PlacesListComponent, selectors: [["google-places-list"]], inputs: { userSettings: "userSettings", term: "term" }, outputs: { termChange: "termChange", select: "select" }, features: [ɵɵNgOnChangesFeature], decls: 2, vars: 1, consts: [["direction", "vertical"], [3, "click", 4, "ngFor", "ngForOf"], [3, "click"], ["icon", "location"]], template: function PlacesListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "novo-list", 0);
        ɵɵtemplate(1, PlacesListComponent_novo_list_item_1_Template, 7, 2, "novo-list-item", 1);
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵadvance(1);
        ɵɵproperty("ngForOf", ctx.queryItems);
    } }, directives: [NovoListElement, NgForOf, NovoListItemElement, NovoItemHeaderElement, NovoItemAvatarElement, NovoItemTitleElement, NovoItemContentElement], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(PlacesListComponent, [{
        type: Component,
        args: [{
                selector: 'google-places-list',
                template: `
    <novo-list direction="vertical">
      <novo-list-item *ngFor="let data of queryItems; let $index = index" (click)="selectedListNode($event, $index)">
        <item-header>
          <item-avatar icon="location"></item-avatar>
          <item-title>{{ data.structured_formatting?.main_text ? data.structured_formatting.main_text : data.description }}</item-title>
        </item-header>
        <item-content>{{ data.structured_formatting?.secondary_text }}</item-content>
      </novo-list-item>
    </novo-list>
  `,
            }]
    }], function () { return [{ type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }, { type: ElementRef }, { type: GlobalRef }, { type: GooglePlacesService }]; }, { userSettings: [{
            type: Input
        }], term: [{
            type: Input
        }], termChange: [{
            type: Output
        }], select: [{
            type: Output
        }] }); })();

class GooglePlacesModule {
}
GooglePlacesModule.ɵmod = ɵɵdefineNgModule({ type: GooglePlacesModule });
GooglePlacesModule.ɵinj = ɵɵdefineInjector({ factory: function GooglePlacesModule_Factory(t) { return new (t || GooglePlacesModule)(); }, providers: [GooglePlacesService], imports: [[CommonModule, HttpClientModule, FormsModule, NovoListModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(GooglePlacesModule, { declarations: [PlacesListComponent], imports: [CommonModule, HttpClientModule, FormsModule, NovoListModule], exports: [PlacesListComponent] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(GooglePlacesModule, [{
        type: NgModule,
        args: [{
                declarations: [PlacesListComponent],
                imports: [CommonModule, HttpClientModule, FormsModule, NovoListModule],
                exports: [PlacesListComponent],
                providers: [GooglePlacesService],
            }]
    }], null, null); })();

const _c0$1f = ["popoverDiv"];
const _c1$x = ["*"];
class PopOverContent {
    constructor(element, cdr) {
        this.element = element;
        this.cdr = cdr;
        this.placement = 'top';
        this.animation = true;
        this.onCloseFromOutside = new EventEmitter();
        this.top = -10000;
        this.left = -10000;
        this.displayType = 'none';
        this.isHidden = false;
    }
    ngAfterViewInit() {
        this.show();
        this.cdr.detectChanges();
    }
    toggle() {
        if (this.isHidden) {
            this.show();
        }
        else {
            this.hide();
        }
    }
    show() {
        if (!this.popover || !this.popover.getElement()) {
            return;
        }
        const p = this.positionElements(this.popover.getElement(), this.popoverDiv.nativeElement, this.placement);
        this.displayType = 'block';
        this.top = p.top;
        this.left = p.left;
        this.isHidden = false;
    }
    hide() {
        this.top = -10000;
        this.left = -10000;
        this.isHidden = true;
        this.popover.hide();
    }
    hideFromPopover() {
        this.top = -10000;
        this.left = -10000;
    }
    positionElements(hostEl, targetEl, positionStr, appendToBody = false) {
        const positionStrParts = positionStr.split('-');
        const mainSide = (this.effectivePlacement = this.getEffectivePlacement(positionStrParts[0] || 'right', hostEl, targetEl));
        const orientation = (this.effectiveAlignment = positionStrParts[1] || 'center');
        const hostElPos = appendToBody ? this.offset(hostEl) : this.position(hostEl);
        const targetElWidth = targetEl.offsetWidth;
        const targetElHeight = targetEl.offsetHeight;
        const shiftWidth = {
            center() {
                return hostElPos.left + (hostElPos.width - targetElWidth) / 2;
            },
            right() {
                return hostElPos.left;
            },
            left() {
                return hostElPos.left + (hostElPos.width - targetElWidth);
            },
        };
        const shiftHeight = {
            center() {
                return hostElPos.top + (hostElPos.height - targetElHeight) / 2;
            },
            bottom() {
                return hostElPos.top;
            },
            top() {
                return hostElPos.top + (hostElPos.height - targetElHeight);
            },
        };
        let targetElPos;
        switch (mainSide) {
            case 'right':
                targetElPos = {
                    top: shiftHeight[orientation](),
                    left: hostElPos.left + hostElPos.width,
                };
                break;
            case 'left':
                targetElPos = {
                    top: shiftHeight[orientation](),
                    left: hostElPos.left - targetElWidth,
                };
                break;
            case 'bottom':
                targetElPos = {
                    top: hostElPos.top + hostElPos.height,
                    left: shiftWidth[orientation](),
                };
                break;
            default:
                targetElPos = {
                    top: hostElPos.top - targetElHeight,
                    left: shiftWidth[orientation](),
                };
                break;
        }
        return targetElPos;
    }
    position(nativeEl) {
        let offsetParentBCR = { top: 0, left: 0 };
        const elBCR = this.offset(nativeEl);
        const offsetParentEl = this.parentOffsetEl(nativeEl);
        if (offsetParentEl !== window.document) {
            offsetParentBCR = this.offset(offsetParentEl);
            offsetParentBCR.top += offsetParentEl.clientTop - offsetParentEl.scrollTop;
            offsetParentBCR.left += offsetParentEl.clientLeft - offsetParentEl.scrollLeft;
        }
        const boundingClientRect = nativeEl.getBoundingClientRect();
        return {
            width: boundingClientRect.width || nativeEl.offsetWidth,
            height: boundingClientRect.height || nativeEl.offsetHeight,
            top: elBCR.top - offsetParentBCR.top,
            left: elBCR.left - offsetParentBCR.left,
        };
    }
    offset(nativeEl) {
        const boundingClientRect = nativeEl.getBoundingClientRect();
        return {
            width: boundingClientRect.width || nativeEl.offsetWidth,
            height: boundingClientRect.height || nativeEl.offsetHeight,
            top: boundingClientRect.top + (window.pageYOffset || window.document.documentElement.scrollTop),
            left: boundingClientRect.left + (window.pageXOffset || window.document.documentElement.scrollLeft),
        };
    }
    getStyle(nativeEl, cssProp) {
        if (nativeEl.currentStyle) {
            return nativeEl.currentStyle[cssProp];
        }
        if (window.getComputedStyle) {
            return window.getComputedStyle(nativeEl)[cssProp];
        }
        return nativeEl.style[cssProp];
    }
    isStaticPositioned(nativeEl) {
        return (this.getStyle(nativeEl, 'position') || 'static') === 'static';
    }
    parentOffsetEl(nativeEl) {
        let offsetParent = nativeEl.offsetParent || window.document;
        while (offsetParent && offsetParent !== window.document && this.isStaticPositioned(offsetParent)) {
            offsetParent = offsetParent.offsetParent;
        }
        return offsetParent || window.document;
    }
    getEffectivePlacement(desiredPlacement, hostElement, targetElement) {
        const hostElBoundingRect = hostElement.getBoundingClientRect();
        if (desiredPlacement === 'top' && hostElBoundingRect.top - targetElement.offsetHeight < 0) {
            return 'bottom';
        }
        if (desiredPlacement === 'bottom' && hostElBoundingRect.bottom + targetElement.offsetHeight > window.innerHeight) {
            return 'top';
        }
        if (desiredPlacement === 'left' && hostElBoundingRect.left - targetElement.offsetWidth < 0) {
            return 'right';
        }
        if (desiredPlacement === 'right' && hostElBoundingRect.right + targetElement.offsetWidth > window.innerWidth) {
            return 'left';
        }
        return desiredPlacement;
    }
}
PopOverContent.ɵfac = function PopOverContent_Factory(t) { return new (t || PopOverContent)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ChangeDetectorRef)); };
PopOverContent.ɵcmp = ɵɵdefineComponent({ type: PopOverContent, selectors: [["popover-content"]], viewQuery: function PopOverContent_Query(rf, ctx) { if (rf & 1) {
        ɵɵviewQuery(_c0$1f, true);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.popoverDiv = _t.first);
    } }, inputs: { content: "content", placement: "placement", title: "title", animation: "animation" }, ngContentSelectors: _c1$x, decls: 9, vars: 15, consts: [["role", "popover", 2, "display", "block"], ["popoverDiv", ""], [1, "popover-title", 3, "hidden"], [1, "popover-content"], [1, "popover-content-text"]], template: function PopOverContent_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵelementStart(0, "div", 0, 1);
        ɵɵelement(2, "div");
        ɵɵelementStart(3, "div", 2);
        ɵɵtext(4);
        ɵɵelementEnd();
        ɵɵelementStart(5, "div", 3);
        ɵɵprojection(6);
        ɵɵelementStart(7, "div", 4);
        ɵɵtext(8);
        ɵɵelementEnd();
        ɵɵelementEnd();
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵclassMapInterpolate1("popover ", ctx.effectivePlacement, "");
        ɵɵstyleProp("top", ctx.top + "px")("left", ctx.left + "px");
        ɵɵclassProp("fade", ctx.animation);
        ɵɵadvance(2);
        ɵɵclassMapInterpolate1("arrow ", ctx.effectiveAlignment, "");
        ɵɵadvance(1);
        ɵɵproperty("hidden", !ctx.title);
        ɵɵadvance(1);
        ɵɵtextInterpolate(ctx.title);
        ɵɵadvance(4);
        ɵɵtextInterpolate(ctx.content);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(PopOverContent, [{
        type: Component,
        args: [{
                selector: 'popover-content',
                template: `
    <div
      #popoverDiv
      class="popover {{ effectivePlacement }}"
      [style.top]="top + 'px'"
      [style.left]="left + 'px'"
      [class.fade]="animation"
      style="display: block"
      role="popover"
    >
      <div class="arrow {{ effectiveAlignment }}"></div>
      <div class="popover-title" [hidden]="!title">{{ title }}</div>
      <div class="popover-content">
        <ng-content></ng-content>
        <div class="popover-content-text">{{ content }}</div>
      </div>
    </div>
  `,
            }]
    }], function () { return [{ type: ElementRef }, { type: ChangeDetectorRef }]; }, { content: [{
            type: Input
        }], placement: [{
            type: Input
        }], title: [{
            type: Input
        }], animation: [{
            type: Input
        }], popoverDiv: [{
            type: ViewChild,
            args: ['popoverDiv']
        }] }); })();

// NG2
class PopOverDirective {
    constructor(viewContainerRef, resolver) {
        this.viewContainerRef = viewContainerRef;
        this.resolver = resolver;
        this.PopoverComponent = PopOverContent;
        this.popoverOnHover = false;
        this.popoverDismissTimeout = 0;
        this.onShown = new EventEmitter();
        this.onHidden = new EventEmitter();
    }
    // ---------------------------------------------------
    // Event listeners
    // ---------------------------------------------------
    showOrHideOnClick() {
        if (this.popoverOnHover || this.popoverDisabled) {
            return;
        }
        this.toggle();
    }
    showOnHover() {
        if (!this.popoverOnHover || this.popoverDisabled) {
            return;
        }
        this.show();
    }
    hideOnHover() {
        if (!this.popoverOnHover || this.popoverDisabled) {
            return;
        }
        this.hide();
    }
    ngOnChanges(changes) {
        if (changes.popoverDisabled) {
            if (changes.popoverDisabled.currentValue) {
                this.hide();
            }
        }
        if (changes.popoverAlways) {
            if (changes.popoverAlways.currentValue) {
                this.show();
            }
        }
    }
    toggle() {
        if (!this.visible) {
            this.show();
        }
        else {
            this.hide();
        }
    }
    show() {
        if (this.visible) {
            return;
        }
        this.visible = true;
        if (typeof this.content === 'string') {
            const factory = this.resolver.resolveComponentFactory(this.PopoverComponent);
            if (!this.visible) {
                return;
            }
            this.popover = this.viewContainerRef.createComponent(factory);
            const popover = this.popover.instance;
            popover.popover = this;
            popover.content = this.content;
            if (this.popoverPlacement !== undefined) {
                popover.placement = this.popoverPlacement;
            }
            if (this.popoverAnimation !== undefined) {
                popover.animation = this.popoverAnimation;
            }
            if (this.popoverTitle !== undefined) {
                popover.title = this.popoverTitle;
            }
            popover.onCloseFromOutside.subscribe(() => this.hide());
            if (this.popoverDismissTimeout > 0) {
                setTimeout(() => this.hide(), this.popoverDismissTimeout);
            }
        }
        else {
            const popover = this.content;
            popover.popover = this;
            if (this.popoverPlacement !== undefined) {
                popover.placement = this.popoverPlacement;
            }
            if (this.popoverAnimation !== undefined) {
                popover.animation = this.popoverAnimation;
            }
            if (this.popoverTitle !== undefined) {
                popover.title = this.popoverTitle;
            }
            popover.onCloseFromOutside.subscribe(() => this.hide());
            if (this.popoverDismissTimeout > 0) {
                setTimeout(() => this.hide(), this.popoverDismissTimeout);
            }
            popover.show();
        }
        this.onShown.emit(this);
    }
    hide() {
        if (!this.visible) {
            return;
        }
        this.visible = false;
        if (this.popover) {
            this.popover.destroy();
        }
        if (this.content instanceof PopOverContent) {
            this.content.hideFromPopover();
        }
        this.onHidden.emit(this);
    }
    getElement() {
        return this.viewContainerRef.element.nativeElement;
    }
}
PopOverDirective.ɵfac = function PopOverDirective_Factory(t) { return new (t || PopOverDirective)(ɵɵdirectiveInject(ViewContainerRef), ɵɵdirectiveInject(ComponentFactoryResolver)); };
PopOverDirective.ɵdir = ɵɵdefineDirective({ type: PopOverDirective, selectors: [["", "popover", ""]], hostBindings: function PopOverDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵɵlistener("click", function PopOverDirective_click_HostBindingHandler() { return ctx.showOrHideOnClick(); })("focusin", function PopOverDirective_focusin_HostBindingHandler() { return ctx.showOnHover(); })("mouseenter", function PopOverDirective_mouseenter_HostBindingHandler() { return ctx.showOnHover(); })("focusout", function PopOverDirective_focusout_HostBindingHandler() { return ctx.hideOnHover(); })("mouseleave", function PopOverDirective_mouseleave_HostBindingHandler() { return ctx.hideOnHover(); });
    } }, inputs: { content: ["popover", "content"], popoverDisabled: "popoverDisabled", popoverAlways: "popoverAlways", popoverAnimation: "popoverAnimation", popoverPlacement: "popoverPlacement", popoverTitle: "popoverTitle", popoverOnHover: "popoverOnHover", popoverDismissTimeout: "popoverDismissTimeout" }, outputs: { onShown: "onShown", onHidden: "onHidden" }, features: [ɵɵNgOnChangesFeature] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(PopOverDirective, [{
        type: Directive,
        args: [{
                selector: '[popover]',
            }]
    }], function () { return [{ type: ViewContainerRef }, { type: ComponentFactoryResolver }]; }, { content: [{
            type: Input,
            args: ['popover']
        }], popoverDisabled: [{
            type: Input
        }], popoverAlways: [{
            type: Input
        }], popoverAnimation: [{
            type: Input
        }], popoverPlacement: [{
            type: Input
        }], popoverTitle: [{
            type: Input
        }], popoverOnHover: [{
            type: Input
        }], popoverDismissTimeout: [{
            type: Input
        }], onShown: [{
            type: Output
        }], onHidden: [{
            type: Output
        }], showOrHideOnClick: [{
            type: HostListener,
            args: ['click']
        }], showOnHover: [{
            type: HostListener,
            args: ['focusin']
        }, {
            type: HostListener,
            args: ['mouseenter']
        }], hideOnHover: [{
            type: HostListener,
            args: ['focusout']
        }, {
            type: HostListener,
            args: ['mouseleave']
        }] }); })();

// NG2
class NovoPopOverModule {
}
NovoPopOverModule.ɵmod = ɵɵdefineNgModule({ type: NovoPopOverModule });
NovoPopOverModule.ɵinj = ɵɵdefineInjector({ factory: function NovoPopOverModule_Factory(t) { return new (t || NovoPopOverModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoPopOverModule, { declarations: [PopOverContent, PopOverDirective], exports: [PopOverContent, PopOverDirective] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoPopOverModule, [{
        type: NgModule,
        args: [{
                declarations: [PopOverContent, PopOverDirective],
                exports: [PopOverContent, PopOverDirective],
            }]
    }], null, null); })();

// NG2
function NovoProgressBarElement_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "div", 2);
} }
function NovoProgressBarElement__svg_svg_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵnamespaceSVG();
    ɵɵelementStart(0, "svg", 3);
    ɵɵelement(1, "circle", 4);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵstyleProp("stroke-dasharray", ctx_r1.circumference)("stroke-dashoffset", ctx_r1.dashoffset);
    ɵɵattribute("r", ctx_r1.radius);
} }
// make radio-button-group ids unique
let nextId$3 = 0;
// Value accessor for the component (supports ngModel)
const PROGRESS_BAR_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoProgressBarElement),
    multi: true,
};
class NovoProgressBarElement {
    constructor(ref, progress) {
        this.ref = ref;
        this.progress = progress;
        this._uniqueId = `novo-progress-${++nextId$3}`;
        this.appearance = ProgressAppearance.LINEAR;
        this.id = this._uniqueId;
        this.name = this._uniqueId;
        this.tabindex = 0;
        this.indeterminate = false;
        // Radial Value
        this.radius = 54;
        this.circumference = 2 * Math.PI * this.radius;
        this.striped = false;
        this.animated = false;
        this.change = new EventEmitter();
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this._percent = 0;
        this._value = 0;
        this._disabled = false;
        this.onChangeCallback = (_) => {
            // placeholder
        };
        this.onTouchedCallback = () => {
            // placeholder
        };
        this.progress = progress;
    }
    get width() {
        if (this.isRadial()) {
            return `100%`;
        }
        return `${this._percent * 100}%`;
    }
    get value() {
        return this._value;
    }
    set value(value) {
        if (this.value !== value) {
            this._value = value;
            if (this.progress) {
                this._percent = this.value / this.progress.total;
            }
            else {
                this._percent = value;
            }
            this.dashoffset = this.circumference * (1 - this._percent);
            this.onChangeCallback(this._value);
        }
    }
    // Disabled State
    get disabled() {
        return this._disabled || (this.progress != null && this.progress.disabled);
    }
    set disabled(value) {
        this._disabled = !!value;
    }
    ngOnInit() {
        var _a;
        if (this.indeterminate) {
            this.striped = true;
            this.animated = true;
            this._value = ((_a = this.progress) === null || _a === void 0 ? void 0 : _a.total) || 100;
        }
        if (this.progress) {
            this._percent = this._value / this.progress.total;
            this.appearance = this.progress.appearance;
        }
    }
    writeValue(value) {
        this.value = value;
        this.ref.markForCheck();
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    setDisabledState(disabled) {
        this.disabled = disabled;
    }
    isLinear() {
        return this.appearance === ProgressAppearance.LINEAR;
    }
    isRadial() {
        return this.appearance === ProgressAppearance.RADIAL;
    }
}
NovoProgressBarElement.ɵfac = function NovoProgressBarElement_Factory(t) { return new (t || NovoProgressBarElement)(ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(forwardRef(() => NovoProgressElement), 8)); };
NovoProgressBarElement.ɵcmp = ɵɵdefineComponent({ type: NovoProgressBarElement, selectors: [["novo-progress-bar"]], hostVars: 10, hostBindings: function NovoProgressBarElement_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵclassMap(ctx.appearance);
        ɵɵstyleProp("width", ctx.width);
        ɵɵclassProp("striped", ctx.striped)("animated", ctx.animated)("disabled", ctx.disabled);
    } }, inputs: { id: "id", name: "name", tabindex: "tabindex", label: "label", theme: "theme", color: "color", indeterminate: "indeterminate", striped: "striped", animated: "animated", value: "value", disabled: "disabled" }, outputs: { change: "change", blur: "blur", focus: "focus" }, features: [ɵɵProvidersFeature([PROGRESS_BAR_VALUE_ACCESSOR])], decls: 2, vars: 2, consts: [["class", "progress-bar", 4, "ngIf"], ["width", "120", "height", "120", 4, "ngIf"], [1, "progress-bar"], ["width", "120", "height", "120"], ["cx", "60", "cy", "60", "stroke-width", "4", "fill", "transparent", 1, "progress__value"]], template: function NovoProgressBarElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵtemplate(0, NovoProgressBarElement_div_0_Template, 1, 0, "div", 0);
        ɵɵtemplate(1, NovoProgressBarElement__svg_svg_1_Template, 2, 5, "svg", 1);
    } if (rf & 2) {
        ɵɵproperty("ngIf", ctx.isLinear());
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.isRadial());
    } }, directives: [NgIf], styles: ["@-webkit-keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}[_nghost-%COMP%]{display:flex;height:100%}.linear[_nghost-%COMP%]{background-color:#4a89dc}.linear[_nghost-%COMP%]:first-child{border-radius:.2em 0 0 .2em}.linear[_nghost-%COMP%]:last-child{border-radius:0 .2em .2em 0}.linear.striped[_nghost-%COMP%]{background-image:linear-gradient(45deg,hsla(0,0%,100%,.15) 25%,transparent 0,transparent 50%,hsla(0,0%,100%,.15) 0,hsla(0,0%,100%,.15) 75%,transparent 0,transparent);background-size:40px 40px}.linear.animated[_nghost-%COMP%]{-webkit-animation:progress-bar-stripes 2s linear infinite;animation:progress-bar-stripes 2s linear infinite}.linear[color=company][_nghost-%COMP%]{background-color:#39d}.linear[color=candidate][_nghost-%COMP%]{background-color:#4b7}.linear[color=navigation][_nghost-%COMP%]{background-color:#2f384f}.linear[color=lead][_nghost-%COMP%]{background-color:#a69}.linear[color=contact][_nghost-%COMP%]{background-color:#fa4}.linear[color=opportunity][_nghost-%COMP%]{background-color:#625}.linear[color=job][_nghost-%COMP%]{background-color:#b56}.linear[color=earnCode][_nghost-%COMP%], .linear[color=jobCode][_nghost-%COMP%]{background-color:#696d79}.linear[color=sendout][_nghost-%COMP%]{background-color:#747884}.linear[color=placement][_nghost-%COMP%]{background-color:#0b344f}.linear[color=corporateuser][_nghost-%COMP%], .linear[color=credential][_nghost-%COMP%], .linear[color=distributionList][_nghost-%COMP%], .linear[color=task][_nghost-%COMP%], .linear[color=user][_nghost-%COMP%]{background-color:#4f5361}.linear[color=aqua][_nghost-%COMP%]{background-color:#3bafda}.linear[color=ocean][_nghost-%COMP%]{background-color:#4a89dc}.linear[color=mint][_nghost-%COMP%]{background-color:#37bc9b}.linear[color=grass][_nghost-%COMP%]{background-color:#8cc152}.linear[color=sunflower][_nghost-%COMP%]{background-color:#f6b042}.linear[color=bittersweet][_nghost-%COMP%]{background-color:#eb6845}.linear[color=grapefruit][_nghost-%COMP%]{background-color:#da4453}.linear[color=carnation][_nghost-%COMP%]{background-color:#d770ad}.linear[color=lavender][_nghost-%COMP%]{background-color:#967adc}.linear[color=positive][_nghost-%COMP%]{background-color:#4a89dc}.linear[color=success][_nghost-%COMP%]{background-color:#8cc152}.linear[color=negative][_nghost-%COMP%]{background-color:#da4453}.linear[color=warning][_nghost-%COMP%]{background-color:#f6b042}.linear[color=black][_nghost-%COMP%]{background-color:#000}.linear[color=dark][_nghost-%COMP%]{background-color:#3d464d}.linear[color=pulse][_nghost-%COMP%]{background-color:#3bafda}.linear[color=neutral][_nghost-%COMP%]{background-color:#4f5361}.linear[color=navy][_nghost-%COMP%]{background-color:#0d2d42}.linear[color=contract][_nghost-%COMP%]{background-color:#454ea0}.linear[color=mountain][_nghost-%COMP%]{background-color:#9678b6}.linear[color=billableCharge][_nghost-%COMP%], .linear[color=invoiceStatement][_nghost-%COMP%], .linear[color=payableCharge][_nghost-%COMP%]{background-color:#696d79}.linear[color=submission][_nghost-%COMP%]{background-color:#a9adbb}.linear[color=note][_nghost-%COMP%]{background-color:#747884}.linear[color=ash][_nghost-%COMP%]{background-color:#a0a0a0}.linear[color=slate][_nghost-%COMP%]{background-color:#707070}.linear[color=charcoal][_nghost-%COMP%]{background-color:#282828}.linear[color=midnight][_nghost-%COMP%]{background-color:#0b0f1a}.linear[color=background][_nghost-%COMP%]{background-color:#f4f4f4}.linear[color=background-dark][_nghost-%COMP%]{background-color:#e2e2e2}.linear[color=white][_nghost-%COMP%]{background-color:#fff}.linear[color=grey][_nghost-%COMP%]{background-color:#999}.linear[color=off-white][_nghost-%COMP%]{background-color:#f4f4f4}.linear[color=light][_nghost-%COMP%]{background-color:#bebebe}.linear[color=empty][_nghost-%COMP%]{background-color:#cccdcc}.linear[color=disabled][_nghost-%COMP%]{background-color:#bebebe}.linear[color=sand][_nghost-%COMP%]{background-color:#f4f4f4}.linear[color=silver][_nghost-%COMP%]{background-color:#e2e2e2}.linear[color=stone][_nghost-%COMP%]{background-color:#bebebe}.radial[_nghost-%COMP%]{position:absolute}.radial[_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#4a89dc;transform:rotate(-90deg);transform-origin:50% 50%;transition:stroke-dashoffset .35s}.radial[_nghost-%COMP%]   svg[_ngcontent-%COMP%]   text[_ngcontent-%COMP%]{fill:#666;font-family:sans-serif;font-size:.5em;text-anchor:middle}.radial[color=company][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#39d}.radial[color=candidate][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#4b7}.radial[color=navigation][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#2f384f}.radial[color=lead][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#a69}.radial[color=contact][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#fa4}.radial[color=opportunity][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#625}.radial[color=job][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#b56}.radial[color=earnCode][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%], .radial[color=jobCode][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#696d79}.radial[color=sendout][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#747884}.radial[color=placement][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#0b344f}.radial[color=corporateuser][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%], .radial[color=credential][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%], .radial[color=distributionList][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%], .radial[color=task][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%], .radial[color=user][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#4f5361}.radial[color=aqua][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#3bafda}.radial[color=ocean][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#4a89dc}.radial[color=mint][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#37bc9b}.radial[color=grass][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#8cc152}.radial[color=sunflower][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#f6b042}.radial[color=bittersweet][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#eb6845}.radial[color=grapefruit][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#da4453}.radial[color=carnation][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#d770ad}.radial[color=lavender][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#967adc}.radial[color=positive][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#4a89dc}.radial[color=success][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#8cc152}.radial[color=negative][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#da4453}.radial[color=warning][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#f6b042}.radial[color=black][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#000}.radial[color=dark][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#3d464d}.radial[color=pulse][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#3bafda}.radial[color=neutral][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#4f5361}.radial[color=navy][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#0d2d42}.radial[color=contract][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#454ea0}.radial[color=mountain][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#9678b6}.radial[color=billableCharge][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%], .radial[color=invoiceStatement][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%], .radial[color=payableCharge][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#696d79}.radial[color=submission][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#a9adbb}.radial[color=note][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#747884}.radial[color=ash][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#a0a0a0}.radial[color=slate][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#707070}.radial[color=charcoal][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#282828}.radial[color=midnight][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#0b0f1a}.radial[color=background][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#f4f4f4}.radial[color=background-dark][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#e2e2e2}.radial[color=white][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#fff}.radial[color=grey][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#999}.radial[color=off-white][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#f4f4f4}.radial[color=light][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#bebebe}.radial[color=empty][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#cccdcc}.radial[color=disabled][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#bebebe}.radial[color=sand][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#f4f4f4}.radial[color=silver][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#e2e2e2}.radial[color=stone][_nghost-%COMP%]   svg[_ngcontent-%COMP%]   circle[_ngcontent-%COMP%]{stroke:#bebebe}@-webkit-keyframes progress-bar-stripes{0%{background-position:0 0}to{background-position:40px 0}}@keyframes progress-bar-stripes{0%{background-position:0 0}to{background-position:40px 0}}"] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoProgressBarElement, [{
        type: Component,
        args: [{
                selector: 'novo-progress-bar',
                styleUrls: ['./ProgressBar.scss'],
                providers: [PROGRESS_BAR_VALUE_ACCESSOR],
                template: `
    <div *ngIf="isLinear()" class="progress-bar"></div>
    <svg *ngIf="isRadial()" width="120" height="120">
      <circle
        [style.strokeDasharray]="circumference"
        [style.strokeDashoffset]="dashoffset"
        [attr.r]="radius"
        cx="60"
        cy="60"
        stroke-width="4"
        fill="transparent"
        class="progress__value"
      />
      <!-- <text x="18" y="20.35" class="percentage">30%</text> -->
    </svg>
  `,
            }]
    }], function () { return [{ type: ChangeDetectorRef }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [forwardRef(() => NovoProgressElement)]
            }] }]; }, { appearance: [{
            type: HostBinding,
            args: ['class']
        }], id: [{
            type: Input
        }], name: [{
            type: Input
        }], tabindex: [{
            type: Input
        }], label: [{
            type: Input
        }], theme: [{
            type: Input
        }], color: [{
            type: Input
        }], indeterminate: [{
            type: Input
        }], striped: [{
            type: HostBinding,
            args: ['class.striped']
        }, {
            type: Input
        }], animated: [{
            type: HostBinding,
            args: ['class.animated']
        }, {
            type: Input
        }], width: [{
            type: HostBinding,
            args: ['style.width']
        }], change: [{
            type: Output
        }], blur: [{
            type: Output
        }], focus: [{
            type: Output
        }], value: [{
            type: Input
        }], disabled: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['class.disabled']
        }] }); })();

// NG2
const _c0$1g = ["*"];
var ProgressAppearance;
(function (ProgressAppearance) {
    ProgressAppearance["LINEAR"] = "linear";
    ProgressAppearance["RADIAL"] = "radial";
})(ProgressAppearance || (ProgressAppearance = {}));
class NovoProgressElement {
    constructor() {
        this.total = 100;
        this.radius = 54;
        this.striped = false;
        // Private vars for getters
        this._appearance = ProgressAppearance.LINEAR;
        this._disabled = false;
    }
    get appearance() {
        return this._appearance;
    }
    set appearance(value) {
        if (this._appearance !== value) {
            this._appearance = value;
            this._updateBarAppearance();
        }
    }
    // Disabled State
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = !!value;
    }
    ngAfterContentInit() {
        this._updateBarRadius();
    }
    _updateBarAppearance() {
        if (this._bars) {
            this._bars.forEach((bar) => {
                bar.appearance = this.appearance;
            });
        }
    }
    _updateBarRadius() {
        if (this._bars) {
            this._bars.forEach((bar, i) => {
                bar.radius = this.radius - i * 5;
            });
        }
    }
}
NovoProgressElement.ɵfac = function NovoProgressElement_Factory(t) { return new (t || NovoProgressElement)(); };
NovoProgressElement.ɵcmp = ɵɵdefineComponent({ type: NovoProgressElement, selectors: [["novo-progress"]], contentQueries: function NovoProgressElement_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵɵcontentQuery(dirIndex, NovoProgressBarElement, true);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx._bars = _t);
    } }, hostVars: 6, hostBindings: function NovoProgressElement_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵclassMap(ctx.appearance);
        ɵɵclassProp("striped", ctx.striped)("disabled", ctx.disabled);
    } }, inputs: { color: "color", theme: "theme", total: "total", radius: "radius", striped: "striped", appearance: "appearance", disabled: "disabled" }, ngContentSelectors: _c0$1g, decls: 1, vars: 0, template: function NovoProgressElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵprojection(0);
    } }, styles: ["@-webkit-keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}[_nghost-%COMP%]{border-radius:.2em;display:flex;position:relative}.striped[_nghost-%COMP%]{background-image:linear-gradient(45deg,rgba(0,0,0,.25) 25%,transparent 0,transparent 50%,rgba(0,0,0,.25) 0,rgba(0,0,0,.25) 75%,transparent 0,transparent);background-size:20px 20px}.linear[_nghost-%COMP%]{background-color:#f4f4f4;border:1px solid #cccdcc;height:1.2em;width:200px}.radial[_nghost-%COMP%]{height:9.2em;width:9.2em}"] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoProgressElement, [{
        type: Component,
        args: [{
                selector: 'novo-progress',
                styleUrls: ['./Progress.scss'],
                template: ` <ng-content></ng-content> `,
            }]
    }], null, { color: [{
            type: Input
        }], theme: [{
            type: Input
        }], total: [{
            type: Input
        }], radius: [{
            type: Input
        }], striped: [{
            type: HostBinding,
            args: ['class.striped']
        }, {
            type: Input
        }], appearance: [{
            type: HostBinding,
            args: ['class']
        }, {
            type: Input
        }], disabled: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['class.disabled']
        }], _bars: [{
            type: ContentChildren,
            args: [forwardRef(() => NovoProgressBarElement), { descendants: true }]
        }] }); })();

// NG2
class NovoProgressModule {
}
NovoProgressModule.ɵmod = ɵɵdefineNgModule({ type: NovoProgressModule });
NovoProgressModule.ɵinj = ɵɵdefineInjector({ factory: function NovoProgressModule_Factory(t) { return new (t || NovoProgressModule)(); }, imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoProgressModule, { declarations: [NovoProgressBarElement, NovoProgressElement], imports: [CommonModule], exports: [NovoProgressBarElement, NovoProgressElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoProgressModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [NovoProgressBarElement, NovoProgressElement],
                exports: [NovoProgressBarElement, NovoProgressElement],
            }]
    }], null, null); })();

class ActivityTableRenderers {
    static propertyRenderer(prop) {
        const ret = (data) => {
            // TODO - allow for dots and sub props
            return data[prop];
        };
        return ret;
    }
    static dateRenderer(prop) {
        const ret = (data) => {
            return data[prop] ? new Date(data[prop]).toLocaleDateString() : '';
        };
        return ret;
    }
}

class NovoActivityTableState {
    constructor() {
        this.id = Math.random();
        this.sort = undefined;
        this.filter = undefined;
        this.page = 0;
        this.pageSize = undefined;
        this.globalSearch = undefined;
        this.selectedRows = new Map();
        this.updates = new EventEmitter();
        this.onReset = new EventEmitter();
    }
    get userFiltered() {
        return !!(this.filter || this.sort || this.globalSearch || this.outsideFilter);
    }
    reset(fireUpdate = true, persistUserFilters) {
        if (!persistUserFilters) {
            this.sort = undefined;
            this.globalSearch = undefined;
            this.filter = undefined;
        }
        this.page = 0;
        this.selectedRows.clear();
        this.onReset.emit(true);
        if (fireUpdate) {
            this.updates.emit({
                sort: this.sort,
                filter: this.filter,
                globalSearch: this.globalSearch,
            });
        }
    }
}
NovoActivityTableState.ɵfac = function NovoActivityTableState_Factory(t) { return new (t || NovoActivityTableState)(); };
NovoActivityTableState.ɵprov = ɵɵdefineInjectable({ token: NovoActivityTableState, factory: NovoActivityTableState.ɵfac });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoActivityTableState, [{
        type: Injectable
    }], null, null); })();

class NovoSortFilter {
    constructor(state) {
        this.state = state;
    }
    filter(id, value, transform) {
        let filter;
        if (!Helpers.isBlank(value)) {
            filter = { id, value, transform };
        }
        else {
            filter = undefined;
        }
        this.state.filter = filter;
        this.state.reset(false, true);
        this.state.updates.next({ filter, sort: this.state.sort });
    }
    sort(id, value, transform) {
        const sort = { id, value, transform };
        this.state.sort = sort;
        this.state.reset(false, true);
        this.state.updates.next({ sort, filter: this.state.filter });
    }
}
NovoSortFilter.ɵfac = function NovoSortFilter_Factory(t) { return new (t || NovoSortFilter)(ɵɵdirectiveInject(NovoActivityTableState)); };
NovoSortFilter.ɵdir = ɵɵdefineDirective({ type: NovoSortFilter, selectors: [["", "novoSortFilter", ""]] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSortFilter, [{
        type: Directive,
        args: [{
                selector: '[novoSortFilter]',
            }]
    }], function () { return [{ type: NovoActivityTableState }]; }, null); })();
class NovoSelection {
    constructor(state) {
        this.state = state;
        this.novoSelectAllToggle = new EventEmitter();
        this.allRows = new Map();
    }
    register(id, row) {
        this.allRows.set(id, row);
    }
    deregister(id) {
        this.allRows.delete(id);
        this.state.selectedRows.delete(id);
        clearTimeout(this.throttleTimeout);
        this.throttleTimeout = setTimeout(() => {
            if (this.state.selectedRows.size === 0) {
                this.novoSelectAllToggle.emit(false);
            }
        });
    }
    ngOnDestroy() {
        this.allRows.clear();
        this.state.selectedRows.clear();
    }
    toggle(id, selected, row) {
        if (selected) {
            this.state.selectedRows.set(id, row);
        }
        else {
            this.state.selectedRows.delete(id);
        }
    }
    selectAll(value) {
        if (value) {
            this.state.selectedRows = new Map(this.allRows);
        }
        else {
            this.state.selectedRows.clear();
        }
        this.novoSelectAllToggle.emit(value);
    }
}
NovoSelection.ɵfac = function NovoSelection_Factory(t) { return new (t || NovoSelection)(ɵɵdirectiveInject(NovoActivityTableState)); };
NovoSelection.ɵdir = ɵɵdefineDirective({ type: NovoSelection, selectors: [["", "novoSelection", ""]], outputs: { novoSelectAllToggle: "novoSelectAllToggle" } });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSelection, [{
        type: Directive,
        args: [{
                selector: '[novoSelection]',
            }]
    }], function () { return [{ type: NovoActivityTableState }]; }, { novoSelectAllToggle: [{
            type: Output
        }] }); })();

function NovoSimpleActionCell_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵɵgetCurrentView();
    ɵɵelementContainerStart(0);
    ɵɵelementStart(1, "button", 1);
    ɵɵlistener("click", function NovoSimpleActionCell_ng_container_0_Template_button_click_1_listener() { ɵɵrestoreView(_r3); const ctx_r2 = ɵɵnextContext(); return ctx_r2.column.onClick(ctx_r2.row); });
    ɵɵelementEnd();
    ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("icon", ctx_r0.column.icon)("disabled", ctx_r0.isDisabled(ctx_r0.column, ctx_r0.row));
} }
function NovoSimpleActionCell_ng_container_1_item_5_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "item", 5);
    ɵɵlistener("action", function NovoSimpleActionCell_ng_container_1_item_5_Template_item_action_0_listener() { ɵɵrestoreView(_r7); const option_r5 = ctx.$implicit; const ctx_r6 = ɵɵnextContext(2); return option_r5.onClick(ctx_r6.row); });
    ɵɵelementStart(1, "span");
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const option_r5 = ctx.$implicit;
    const ctx_r4 = ɵɵnextContext(2);
    ɵɵproperty("disabled", ctx_r4.isDisabled(option_r5, ctx_r4.row));
    ɵɵadvance(1);
    ɵɵattribute("data-automation-id", option_r5.label);
    ɵɵadvance(1);
    ɵɵtextInterpolate(option_r5.label);
} }
function NovoSimpleActionCell_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵelementStart(1, "novo-dropdown", 2);
    ɵɵelementStart(2, "button", 3);
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementStart(4, "list");
    ɵɵtemplate(5, NovoSimpleActionCell_ng_container_1_item_5_Template, 3, 3, "item", 4);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(3);
    ɵɵtextInterpolate(ctx_r1.column.label || ctx_r1.labels.actions);
    ɵɵadvance(2);
    ɵɵproperty("ngForOf", ctx_r1.column.options);
} }
/** Workaround for https://github.com/angular/angular/issues/17849 */
const _NovoCellDef = CdkCellDef;
const _NovoHeaderCellDef = CdkHeaderCellDef;
const _NovoColumnDef = CdkColumnDef;
const _NovoHeaderCell = CdkHeaderCell;
const _NovoCell = CdkCell;
class NovoSimpleCellDef extends _NovoCellDef {
}
NovoSimpleCellDef.ɵfac = function NovoSimpleCellDef_Factory(t) { return ɵNovoSimpleCellDef_BaseFactory(t || NovoSimpleCellDef); };
NovoSimpleCellDef.ɵdir = ɵɵdefineDirective({ type: NovoSimpleCellDef, selectors: [["", "novoSimpleCellDef", ""]], features: [ɵɵProvidersFeature([{ provide: CdkCellDef, useExisting: NovoSimpleCellDef }]), ɵɵInheritDefinitionFeature] });
const ɵNovoSimpleCellDef_BaseFactory = /*@__PURE__*/ ɵɵgetInheritedFactory(NovoSimpleCellDef);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSimpleCellDef, [{
        type: Directive,
        args: [{
                selector: '[novoSimpleCellDef]',
                providers: [{ provide: CdkCellDef, useExisting: NovoSimpleCellDef }],
            }]
    }], null, null); })();
class NovoSimpleHeaderCellDef extends _NovoHeaderCellDef {
}
NovoSimpleHeaderCellDef.ɵfac = function NovoSimpleHeaderCellDef_Factory(t) { return ɵNovoSimpleHeaderCellDef_BaseFactory(t || NovoSimpleHeaderCellDef); };
NovoSimpleHeaderCellDef.ɵdir = ɵɵdefineDirective({ type: NovoSimpleHeaderCellDef, selectors: [["", "novoSimpleHeaderCellDef", ""]], features: [ɵɵProvidersFeature([{ provide: CdkHeaderCellDef, useExisting: NovoSimpleHeaderCellDef }]), ɵɵInheritDefinitionFeature] });
const ɵNovoSimpleHeaderCellDef_BaseFactory = /*@__PURE__*/ ɵɵgetInheritedFactory(NovoSimpleHeaderCellDef);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSimpleHeaderCellDef, [{
        type: Directive,
        args: [{
                selector: '[novoSimpleHeaderCellDef]',
                providers: [{ provide: CdkHeaderCellDef, useExisting: NovoSimpleHeaderCellDef }],
            }]
    }], null, null); })();
class NovoSimpleColumnDef extends _NovoColumnDef {
    get name() {
        return this._name;
    }
    set name(name) {
        this._setNameInput(name);
    }
    /**
     * This has been extracted to a util because of TS 4 and VE.
     * View Engine doesn't support property rename inheritance.
     * TS 4.0 doesn't allow properties to override accessors or vice-versa.
     * @docs-private
     */
    _setNameInput(value) {
        // If the directive is set without a name (updated programatically), then this setter will
        // trigger with an empty string and should not overwrite the programatically set value.
        if (value) {
            this._name = value;
            this.cssClassFriendlyName = value.replace(/[^a-z0-9_-]/gi, '-');
            this._updateColumnCssClassName();
        }
    }
}
NovoSimpleColumnDef.ɵfac = function NovoSimpleColumnDef_Factory(t) { return ɵNovoSimpleColumnDef_BaseFactory(t || NovoSimpleColumnDef); };
NovoSimpleColumnDef.ɵdir = ɵɵdefineDirective({ type: NovoSimpleColumnDef, selectors: [["", "novoSimpleColumnDef", ""]], inputs: { name: ["novoSimpleColumnDef", "name"] }, features: [ɵɵProvidersFeature([{ provide: CdkColumnDef, useExisting: NovoSimpleColumnDef }]), ɵɵInheritDefinitionFeature] });
const ɵNovoSimpleColumnDef_BaseFactory = /*@__PURE__*/ ɵɵgetInheritedFactory(NovoSimpleColumnDef);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSimpleColumnDef, [{
        type: Directive,
        args: [{
                selector: '[novoSimpleColumnDef]',
                providers: [{ provide: CdkColumnDef, useExisting: NovoSimpleColumnDef }],
            }]
    }], null, { name: [{
            type: Input,
            args: ['novoSimpleColumnDef']
        }] }); })();
class NovoSimpleHeaderCell extends _NovoHeaderCell {
    constructor(columnDef, elementRef, renderer) {
        super(columnDef, elementRef);
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.role = 'columnheader';
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', `novo-column-header-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, `novo-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, 'novo-simple-header-cell');
    }
    ngOnInit() {
        if (this.column.width) {
            this.renderer.setStyle(this.elementRef.nativeElement, 'min-width', `${this.column.width}px`);
            this.renderer.setStyle(this.elementRef.nativeElement, 'max-width', `${this.column.width}px`);
            this.renderer.setStyle(this.elementRef.nativeElement, 'width', `${this.column.width}px`);
        }
    }
}
NovoSimpleHeaderCell.ɵfac = function NovoSimpleHeaderCell_Factory(t) { return new (t || NovoSimpleHeaderCell)(ɵɵdirectiveInject(CdkColumnDef), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2)); };
NovoSimpleHeaderCell.ɵdir = ɵɵdefineDirective({ type: NovoSimpleHeaderCell, selectors: [["novo-simple-header-cell"]], hostVars: 1, hostBindings: function NovoSimpleHeaderCell_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵattribute("role", ctx.role);
    } }, inputs: { column: "column" }, features: [ɵɵInheritDefinitionFeature] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSimpleHeaderCell, [{
        type: Directive,
        args: [{
                selector: 'novo-simple-header-cell',
            }]
    }], function () { return [{ type: CdkColumnDef }, { type: ElementRef }, { type: Renderer2 }]; }, { role: [{
            type: HostBinding,
            args: ['attr.role']
        }], column: [{
            type: Input
        }] }); })();
class NovoSimpleEmptyHeaderCell extends _NovoHeaderCell {
    constructor(columnDef, elementRef, renderer) {
        super(columnDef, elementRef);
        this.role = 'columnheader';
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', `novo-column-header-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, `novo-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, 'novo-simple-empty-header-cell');
    }
}
NovoSimpleEmptyHeaderCell.ɵfac = function NovoSimpleEmptyHeaderCell_Factory(t) { return new (t || NovoSimpleEmptyHeaderCell)(ɵɵdirectiveInject(CdkColumnDef), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2)); };
NovoSimpleEmptyHeaderCell.ɵdir = ɵɵdefineDirective({ type: NovoSimpleEmptyHeaderCell, selectors: [["novo-simple-empty-header-cell"]], hostVars: 1, hostBindings: function NovoSimpleEmptyHeaderCell_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵattribute("role", ctx.role);
    } }, features: [ɵɵInheritDefinitionFeature] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSimpleEmptyHeaderCell, [{
        type: Directive,
        args: [{
                selector: 'novo-simple-empty-header-cell',
            }]
    }], function () { return [{ type: CdkColumnDef }, { type: ElementRef }, { type: Renderer2 }]; }, { role: [{
            type: HostBinding,
            args: ['attr.role']
        }] }); })();
class NovoSimpleCheckboxHeaderCell extends _NovoHeaderCell {
    constructor(columnDef, elementRef, renderer, ref, _selection) {
        super(columnDef, elementRef);
        this._selection = _selection;
        this.role = 'columnheader';
        this.selectAll = false;
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', `novo-checkbox-column-header-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, `novo-checkbox-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, 'novo-simple-checkbox-header-cell');
        this.selectAllSubscription = _selection.novoSelectAllToggle.subscribe((value) => {
            this.selectAll = value;
            ref.markForCheck();
        });
    }
    ngOnDestroy() {
        this.selectAllSubscription.unsubscribe();
    }
    toggle(value) {
        this._selection.selectAll(value);
    }
}
NovoSimpleCheckboxHeaderCell.ɵfac = function NovoSimpleCheckboxHeaderCell_Factory(t) { return new (t || NovoSimpleCheckboxHeaderCell)(ɵɵdirectiveInject(CdkColumnDef), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(NovoSelection, 8)); };
NovoSimpleCheckboxHeaderCell.ɵcmp = ɵɵdefineComponent({ type: NovoSimpleCheckboxHeaderCell, selectors: [["novo-simple-checkbox-header-cell"]], hostVars: 1, hostBindings: function NovoSimpleCheckboxHeaderCell_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵattribute("role", ctx.role);
    } }, features: [ɵɵInheritDefinitionFeature], decls: 1, vars: 1, consts: [[3, "ngModel", "ngModelChange"]], template: function NovoSimpleCheckboxHeaderCell_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "novo-checkbox", 0);
        ɵɵlistener("ngModelChange", function NovoSimpleCheckboxHeaderCell_Template_novo_checkbox_ngModelChange_0_listener($event) { return ctx.selectAll = $event; })("ngModelChange", function NovoSimpleCheckboxHeaderCell_Template_novo_checkbox_ngModelChange_0_listener($event) { return ctx.toggle($event); });
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵproperty("ngModel", ctx.selectAll);
    } }, directives: [NovoCheckboxElement, NgControlStatus, NgModel], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSimpleCheckboxHeaderCell, [{
        type: Component,
        args: [{
                selector: 'novo-simple-checkbox-header-cell',
                template: `<novo-checkbox [(ngModel)]="selectAll" (ngModelChange)="toggle($event)"></novo-checkbox>`,
            }]
    }], function () { return [{ type: CdkColumnDef }, { type: ElementRef }, { type: Renderer2 }, { type: ChangeDetectorRef }, { type: NovoSelection, decorators: [{
                type: Optional
            }] }]; }, { role: [{
            type: HostBinding,
            args: ['attr.role']
        }] }); })();
class NovoSimpleCell extends _NovoCell {
    constructor(columnDef, elementRef, renderer) {
        super(columnDef, elementRef);
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.role = 'gridcell';
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', `novo-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, `novo-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, 'novo-simple-cell');
    }
    ngOnInit() {
        if (this.column.customClass) {
            this.renderer.addClass(this.elementRef.nativeElement, this.column.customClass(this.row));
        }
        if (this.column.width) {
            this.renderer.setStyle(this.elementRef.nativeElement, 'min-width', `${this.column.width}px`);
            this.renderer.setStyle(this.elementRef.nativeElement, 'max-width', `${this.column.width}px`);
            this.renderer.setStyle(this.elementRef.nativeElement, 'width', `${this.column.width}px`);
            // TODO - this inhibits resizing the page after the initial load -- but do we care?!?!
            // this.renderer.setStyle(this.spanElement.nativeElement, 'min-width', `${this.column.width - 20}px`);
            // this.renderer.setStyle(this.spanElement.nativeElement, 'max-width', `${this.column.width - 20}px`);
            // this.renderer.setStyle(this.spanElement.nativeElement, 'width', `${this.column.width - 20}px`);
        }
        // else {
        //     // TODO - this inhibits resizing the page after the initial load -- but do we care?!?!
        //     this.renderer.setStyle(this.spanElement.nativeElement, 'min-width', `${this.elementRef.nativeElement.offsetWidth - 20}px`);
        //     this.renderer.setStyle(this.spanElement.nativeElement, 'max-width', `${this.elementRef.nativeElement.offsetWidth - 20}px`);
        //     this.renderer.setStyle(this.spanElement.nativeElement, 'width', `${this.elementRef.nativeElement.offsetWidth - 20}px`);
        // }
    }
    onClick(event) {
        Helpers.swallowEvent(event);
        if (this.column.onClick) {
            this.column.onClick(this.row);
        }
        return;
    }
}
NovoSimpleCell.ɵfac = function NovoSimpleCell_Factory(t) { return new (t || NovoSimpleCell)(ɵɵdirectiveInject(CdkColumnDef), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2)); };
NovoSimpleCell.ɵcmp = ɵɵdefineComponent({ type: NovoSimpleCell, selectors: [["novo-simple-cell"]], hostVars: 1, hostBindings: function NovoSimpleCell_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵattribute("role", ctx.role);
    } }, inputs: { row: "row", column: "column" }, features: [ɵɵInheritDefinitionFeature], decls: 3, vars: 3, consts: [[3, "click"], ["span", ""]], template: function NovoSimpleCell_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "span", 0, 1);
        ɵɵlistener("click", function NovoSimpleCell_Template_span_click_0_listener($event) { return ctx.onClick($event); });
        ɵɵtext(2);
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵclassProp("clickable", !!ctx.column.onClick);
        ɵɵadvance(2);
        ɵɵtextInterpolate(ctx.column.renderer(ctx.row));
    } }, encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSimpleCell, [{
        type: Component,
        args: [{
                selector: 'novo-simple-cell',
                template: ` <span [class.clickable]="!!column.onClick" (click)="onClick($event)" #span>{{ column.renderer(row) }}</span> `,
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: CdkColumnDef }, { type: ElementRef }, { type: Renderer2 }]; }, { role: [{
            type: HostBinding,
            args: ['attr.role']
        }], row: [{
            type: Input
        }], column: [{
            type: Input
        }] }); })();
class NovoSimpleCheckboxCell extends _NovoCell {
    constructor(columnDef, elementRef, renderer, _selection) {
        super(columnDef, elementRef);
        this.columnDef = columnDef;
        this._selection = _selection;
        this.role = 'gridcell';
        this.selected = false;
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', `novo-checkbox-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, `novo-checkbox-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, 'novo-simple-checkbox-cell');
        this.selectAllSubscription = _selection.novoSelectAllToggle.subscribe((value) => {
            this.selected = value;
        });
    }
    ngOnInit() {
        this._selection.register(this.row.id || this.index, this.row);
        this.selected = this._selection.state.selectedRows.has(this.row.id || this.index);
    }
    ngOnDestroy() {
        this._selection.deregister(this.row.id || this.index);
        this.selectAllSubscription.unsubscribe();
    }
    toggle(value) {
        this._selection.toggle(this.row.id || this.index, value, this.row);
    }
}
NovoSimpleCheckboxCell.ɵfac = function NovoSimpleCheckboxCell_Factory(t) { return new (t || NovoSimpleCheckboxCell)(ɵɵdirectiveInject(CdkColumnDef), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(NovoSelection, 8)); };
NovoSimpleCheckboxCell.ɵcmp = ɵɵdefineComponent({ type: NovoSimpleCheckboxCell, selectors: [["novo-simple-checkbox-cell"]], hostVars: 1, hostBindings: function NovoSimpleCheckboxCell_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵattribute("role", ctx.role);
    } }, inputs: { row: "row", index: "index" }, features: [ɵɵInheritDefinitionFeature], decls: 1, vars: 1, consts: [[3, "ngModel", "ngModelChange"]], template: function NovoSimpleCheckboxCell_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "novo-checkbox", 0);
        ɵɵlistener("ngModelChange", function NovoSimpleCheckboxCell_Template_novo_checkbox_ngModelChange_0_listener($event) { return ctx.toggle($event); });
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵproperty("ngModel", ctx.selected);
    } }, directives: [NovoCheckboxElement, NgControlStatus, NgModel], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSimpleCheckboxCell, [{
        type: Component,
        args: [{
                selector: 'novo-simple-checkbox-cell',
                template: ` <novo-checkbox [ngModel]="selected" (ngModelChange)="toggle($event)"></novo-checkbox> `,
            }]
    }], function () { return [{ type: CdkColumnDef }, { type: ElementRef }, { type: Renderer2 }, { type: NovoSelection, decorators: [{
                type: Optional
            }] }]; }, { role: [{
            type: HostBinding,
            args: ['attr.role']
        }], row: [{
            type: Input
        }], index: [{
            type: Input
        }] }); })();
class NovoSimpleActionCell extends _NovoCell {
    constructor(columnDef, elementRef, renderer, labels) {
        super(columnDef, elementRef);
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.labels = labels;
        this.role = 'gridcell';
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', `novo-action-column-${columnDef.cssClassFriendlyName}`);
    }
    ngOnInit() {
        if (this.column.options) {
            this.renderer.addClass(this.elementRef.nativeElement, 'novo-simple-dropdown-cell');
        }
        else {
            this.renderer.addClass(this.elementRef.nativeElement, 'novo-simple-button-cell');
        }
    }
    isDisabled(check, row) {
        if (check.disabled === true) {
            return true;
        }
        if (check.disabledCheck) {
            return check.disabledCheck(row);
        }
        return false;
    }
}
NovoSimpleActionCell.ɵfac = function NovoSimpleActionCell_Factory(t) { return new (t || NovoSimpleActionCell)(ɵɵdirectiveInject(CdkColumnDef), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(NovoLabelService)); };
NovoSimpleActionCell.ɵcmp = ɵɵdefineComponent({ type: NovoSimpleActionCell, selectors: [["novo-simple-action-cell"]], hostVars: 1, hostBindings: function NovoSimpleActionCell_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵattribute("role", ctx.role);
    } }, inputs: { row: "row", column: "column" }, features: [ɵɵInheritDefinitionFeature], decls: 2, vars: 2, consts: [[4, "ngIf"], ["theme", "icon", 3, "icon", "disabled", "click"], ["parentScrollSelector", ".novo-simple-table", "containerClass", "novo-table-dropdown-cell"], ["type", "button", "theme", "dialogue", "icon", "collapse", "inverse", ""], [3, "disabled", "action", 4, "ngFor", "ngForOf"], [3, "disabled", "action"]], template: function NovoSimpleActionCell_Template(rf, ctx) { if (rf & 1) {
        ɵɵtemplate(0, NovoSimpleActionCell_ng_container_0_Template, 2, 2, "ng-container", 0);
        ɵɵtemplate(1, NovoSimpleActionCell_ng_container_1_Template, 6, 2, "ng-container", 0);
    } if (rf & 2) {
        ɵɵproperty("ngIf", !ctx.column.options);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.column.options);
    } }, directives: [NgIf, NovoButtonElement, NovoDropdownElement, NovoDropdownListElement, NgForOf, NovoItemElement], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSimpleActionCell, [{
        type: Component,
        args: [{
                selector: 'novo-simple-action-cell',
                template: `
    <ng-container *ngIf="!column.options">
      <button theme="icon" [icon]="column.icon" (click)="column.onClick(row)" [disabled]="isDisabled(column, row)"></button>
    </ng-container>
    <ng-container *ngIf="column.options">
      <novo-dropdown parentScrollSelector=".novo-simple-table" containerClass="novo-table-dropdown-cell">
        <button type="button" theme="dialogue" icon="collapse" inverse>{{ column.label || labels.actions }}</button>
        <list>
          <item *ngFor="let option of column.options" (action)="option.onClick(row)" [disabled]="isDisabled(option, row)">
            <span [attr.data-automation-id]="option.label">{{ option.label }}</span>
          </item>
        </list>
      </novo-dropdown>
    </ng-container>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: CdkColumnDef }, { type: ElementRef }, { type: Renderer2 }, { type: NovoLabelService }]; }, { role: [{
            type: HostBinding,
            args: ['attr.role']
        }], row: [{
            type: Input
        }], column: [{
            type: Input
        }] }); })();

const _c0$1h = ["novo-simple-cell-config", ""];
function NovoSimpleCellHeader_button_3_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 3);
    ɵɵlistener("click", function NovoSimpleCellHeader_button_3_Template_button_click_0_listener() { ɵɵrestoreView(_r3); const ctx_r2 = ɵɵnextContext(); return ctx_r2.sort(); });
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵclassProp("active", ctx_r0.sortActive);
    ɵɵproperty("icon", ctx_r0.icon);
} }
function NovoSimpleCellHeader_novo_dropdown_4_button_5_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 11);
    ɵɵlistener("click", function NovoSimpleCellHeader_novo_dropdown_4_button_5_Template_button_click_0_listener() { ɵɵrestoreView(_r9); const ctx_r8 = ɵɵnextContext(2); return ctx_r8.clearFilter(); });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r4.labels.clear, " ");
} }
function NovoSimpleCellHeader_novo_dropdown_4_list_7_ng_container_1_item_1_i_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 18);
} }
function NovoSimpleCellHeader_novo_dropdown_4_list_7_ng_container_1_item_1_Template(rf, ctx) { if (rf & 1) {
    const _r17 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "item", 16);
    ɵɵlistener("click", function NovoSimpleCellHeader_novo_dropdown_4_list_7_ng_container_1_item_1_Template_item_click_0_listener() { ɵɵrestoreView(_r17); const option_r14 = ctx.$implicit; const ctx_r16 = ɵɵnextContext(4); return ctx_r16.filterData(option_r14); });
    ɵɵtext(1);
    ɵɵtemplate(2, NovoSimpleCellHeader_novo_dropdown_4_list_7_ng_container_1_item_1_i_2_Template, 1, 0, "i", 17);
    ɵɵelementEnd();
} if (rf & 2) {
    const option_r14 = ctx.$implicit;
    const ctx_r13 = ɵɵnextContext(4);
    ɵɵclassProp("active", ctx_r13.activeDateFilter === option_r14.label);
    ɵɵattribute("data-automation-id", "novo-activity-table-filter-" + option_r14.label);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", option_r14.label, " ");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r13.activeDateFilter === option_r14.label);
} }
function NovoSimpleCellHeader_novo_dropdown_4_list_7_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, NovoSimpleCellHeader_novo_dropdown_4_list_7_ng_container_1_item_1_Template, 3, 5, "item", 15);
    ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r10 = ɵɵnextContext(3);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r10.config.filterConfig.options);
} }
function NovoSimpleCellHeader_novo_dropdown_4_list_7_item_2_i_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 18);
} }
function NovoSimpleCellHeader_novo_dropdown_4_list_7_item_2_Template(rf, ctx) { if (rf & 1) {
    const _r20 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "item", 19);
    ɵɵlistener("click", function NovoSimpleCellHeader_novo_dropdown_4_list_7_item_2_Template_item_click_0_listener($event) { ɵɵrestoreView(_r20); const ctx_r19 = ɵɵnextContext(3); return ctx_r19.toggleCustomRange($event, true); });
    ɵɵtext(1);
    ɵɵtemplate(2, NovoSimpleCellHeader_novo_dropdown_4_list_7_item_2_i_2_Template, 1, 0, "i", 17);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r11 = ɵɵnextContext(3);
    ɵɵclassProp("active", ctx_r11.labels.customDateRange === ctx_r11.activeDateFilter);
    ɵɵproperty("keepOpen", true);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r11.labels.customDateRange, " ");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r11.labels.customDateRange === ctx_r11.activeDateFilter);
} }
function NovoSimpleCellHeader_novo_dropdown_4_list_7_div_3_Template(rf, ctx) { if (rf & 1) {
    const _r22 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 20);
    ɵɵelementStart(1, "div", 16);
    ɵɵlistener("click", function NovoSimpleCellHeader_novo_dropdown_4_list_7_div_3_Template_div_click_1_listener($event) { ɵɵrestoreView(_r22); const ctx_r21 = ɵɵnextContext(3); return ctx_r21.toggleCustomRange($event, false); });
    ɵɵelement(2, "i", 21);
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementStart(4, "novo-date-picker", 22);
    ɵɵlistener("onSelect", function NovoSimpleCellHeader_novo_dropdown_4_list_7_div_3_Template_novo_date_picker_onSelect_4_listener($event) { ɵɵrestoreView(_r22); const ctx_r23 = ɵɵnextContext(3); return ctx_r23.filterData($event); })("ngModelChange", function NovoSimpleCellHeader_novo_dropdown_4_list_7_div_3_Template_novo_date_picker_ngModelChange_4_listener($event) { ɵɵrestoreView(_r22); const ctx_r24 = ɵɵnextContext(3); return ctx_r24.filter = $event; });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = ɵɵnextContext(3);
    ɵɵadvance(3);
    ɵɵtextInterpolate(ctx_r12.labels.backToPresetFilters);
    ɵɵadvance(1);
    ɵɵproperty("ngModel", ctx_r12.filter);
} }
function NovoSimpleCellHeader_novo_dropdown_4_list_7_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "list");
    ɵɵtemplate(1, NovoSimpleCellHeader_novo_dropdown_4_list_7_ng_container_1_Template, 2, 1, "ng-container", 12);
    ɵɵtemplate(2, NovoSimpleCellHeader_novo_dropdown_4_list_7_item_2_Template, 3, 5, "item", 13);
    ɵɵtemplate(3, NovoSimpleCellHeader_novo_dropdown_4_list_7_div_3_Template, 5, 2, "div", 14);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !ctx_r5.showCustomRange);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r5.config.filterConfig.allowCustomRange && !ctx_r5.showCustomRange);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r5.showCustomRange);
} }
function NovoSimpleCellHeader_novo_dropdown_4_list_8_item_1_i_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 18);
} }
function NovoSimpleCellHeader_novo_dropdown_4_list_8_item_1_Template(rf, ctx) { if (rf & 1) {
    const _r29 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "item", 16);
    ɵɵlistener("click", function NovoSimpleCellHeader_novo_dropdown_4_list_8_item_1_Template_item_click_0_listener() { ɵɵrestoreView(_r29); const option_r26 = ctx.$implicit; const ctx_r28 = ɵɵnextContext(3); return ctx_r28.filterData(option_r26); });
    ɵɵelementStart(1, "span");
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵtemplate(3, NovoSimpleCellHeader_novo_dropdown_4_list_8_item_1_i_3_Template, 1, 0, "i", 17);
    ɵɵelementEnd();
} if (rf & 2) {
    const option_r26 = ctx.$implicit;
    const ctx_r25 = ɵɵnextContext(3);
    ɵɵclassProp("active", ctx_r25.filter === option_r26);
    ɵɵattribute("data-automation-id", "novo-activity-table-filter-" + ((option_r26 == null ? null : option_r26.label) || option_r26));
    ɵɵadvance(2);
    ɵɵtextInterpolate((option_r26 == null ? null : option_r26.label) || option_r26);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", option_r26.hasOwnProperty("value") ? ctx_r25.filter === option_r26.value : ctx_r25.filter === option_r26);
} }
function NovoSimpleCellHeader_novo_dropdown_4_list_8_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "list");
    ɵɵtemplate(1, NovoSimpleCellHeader_novo_dropdown_4_list_8_item_1_Template, 4, 5, "item", 15);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r6.config.filterConfig.options);
} }
function NovoSimpleCellHeader_novo_dropdown_4_list_9_Template(rf, ctx) { if (rf & 1) {
    const _r31 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "list");
    ɵɵelementStart(1, "item", 23);
    ɵɵelementStart(2, "input", 24);
    ɵɵlistener("ngModelChange", function NovoSimpleCellHeader_novo_dropdown_4_list_9_Template_input_ngModelChange_2_listener($event) { ɵɵrestoreView(_r31); const ctx_r30 = ɵɵnextContext(2); return ctx_r30.filter = $event; })("ngModelChange", function NovoSimpleCellHeader_novo_dropdown_4_list_9_Template_input_ngModelChange_2_listener($event) { ɵɵrestoreView(_r31); const ctx_r32 = ɵɵnextContext(2); return ctx_r32.filterData($event); });
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵproperty("ngModel", ctx_r7.filter);
} }
function NovoSimpleCellHeader_novo_dropdown_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-dropdown", 4);
    ɵɵelement(1, "button", 5);
    ɵɵelementStart(2, "div", 6);
    ɵɵelementStart(3, "span");
    ɵɵtext(4);
    ɵɵelementEnd();
    ɵɵtemplate(5, NovoSimpleCellHeader_novo_dropdown_4_button_5_Template, 2, 1, "button", 7);
    ɵɵelementEnd();
    ɵɵelementContainerStart(6, 8);
    ɵɵtemplate(7, NovoSimpleCellHeader_novo_dropdown_4_list_7_Template, 4, 3, "list", 9);
    ɵɵtemplate(8, NovoSimpleCellHeader_novo_dropdown_4_list_8_Template, 2, 1, "list", 9);
    ɵɵtemplate(9, NovoSimpleCellHeader_novo_dropdown_4_list_9_Template, 3, 1, "list", 10);
    ɵɵelementContainerEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵclassProp("active", ctx_r1.filterActive);
    ɵɵadvance(3);
    ɵɵtextInterpolate(ctx_r1.labels.filters);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r1.filter);
    ɵɵadvance(1);
    ɵɵproperty("ngSwitch", ctx_r1.config.filterConfig.type);
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", "date");
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", "select");
} }
const _c1$y = ["*"];
class NovoSimpleFilterFocus {
    constructor(element) {
        this.element = element;
    }
    ngAfterViewInit() {
        this.element.nativeElement.focus();
    }
}
NovoSimpleFilterFocus.ɵfac = function NovoSimpleFilterFocus_Factory(t) { return new (t || NovoSimpleFilterFocus)(ɵɵdirectiveInject(ElementRef)); };
NovoSimpleFilterFocus.ɵdir = ɵɵdefineDirective({ type: NovoSimpleFilterFocus, selectors: [["", "novoSimpleFilterFocus", ""]] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSimpleFilterFocus, [{
        type: Directive,
        args: [{
                selector: '[novoSimpleFilterFocus]',
            }]
    }], function () { return [{ type: ElementRef }]; }, null); })();
class NovoSimpleCellHeader {
    constructor(changeDetectorRef, labels, state, _sort, _cdkColumnDef) {
        this.changeDetectorRef = changeDetectorRef;
        this.labels = labels;
        this.state = state;
        this._sort = _sort;
        this._cdkColumnDef = _cdkColumnDef;
        this.icon = 'sortable';
        this.filterActive = false;
        this.sortActive = false;
        this.showCustomRange = false;
        this._rerenderSubscription = state.updates.subscribe((change) => {
            if (change.sort && change.sort.id === this.id) {
                this.icon = `sort-${change.sort.value}`;
                this.sortActive = true;
            }
            else {
                this.icon = 'sortable';
                this.sortActive = false;
            }
            if (change.filter && change.filter.id === this.id) {
                this.filterActive = true;
                this.filter = change.filter.value;
            }
            else {
                this.filterActive = false;
                this.filter = undefined;
            }
            changeDetectorRef.markForCheck();
        });
    }
    get config() {
        return this._config;
    }
    set config(v) {
        if (!v) {
            this._config = {
                sortable: false,
                filterable: false,
                filterConfig: {
                    type: 'text',
                },
            };
        }
        else {
            this._config = {
                sortable: coerceBooleanProperty(v.sortable),
                filterable: coerceBooleanProperty(v.filterable),
                transforms: v.transforms || {},
                filterConfig: v.filterConfig || {
                    type: 'text',
                },
            };
            if (this._config.filterConfig.type === 'date' && !this._config.filterConfig.options) {
                this._config.filterConfig.options = this.getDefaultDateFilterOptions();
            }
        }
    }
    ngOnInit() {
        if (this._cdkColumnDef) {
            this.id = this._cdkColumnDef.name;
        }
        if (this.defaultSort && this.id === this.defaultSort.id) {
            this.icon = `sort-${this.defaultSort.value}`;
            this.sortActive = true;
            this.changeDetectorRef.markForCheck();
        }
    }
    ngOnDestroy() {
        this._rerenderSubscription.unsubscribe();
    }
    sort() {
        if (this.changeTimeout) {
            clearTimeout(this.changeTimeout);
        }
        this.changeTimeout = setTimeout(() => {
            this.direction = this.getNextSortDirection(this.direction);
            this._sort.sort(this.id, this.direction, this._config.transforms.sort);
            this.changeDetectorRef.markForCheck();
        }, 300);
    }
    toggleCustomRange(event, value) {
        Helpers.swallowEvent(event);
        this.showCustomRange = value;
        this.changeDetectorRef.markForCheck();
        this.dropdown.openPanel(); // Ensures that the panel correctly updates to the dynamic size of the dropdown
    }
    filterData(filter) {
        let actualFilter = filter;
        if (this.config.filterConfig.type === 'date' && filter) {
            this.activeDateFilter = filter.label || this.labels.customDateRange;
            if (filter.startDate && filter.endDate) {
                actualFilter = {
                    min: startOfDay(filter.startDate.date),
                    max: startOfDay(addDays(startOfDay(filter.endDate.date), 1)),
                };
            }
            else {
                actualFilter = {
                    min: filter.min ? addDays(startOfToday(), filter.min) : startOfToday(),
                    max: filter.max ? addDays(startOfTomorrow(), filter.max) : startOfTomorrow(),
                };
            }
        }
        if (actualFilter && actualFilter.hasOwnProperty('value')) {
            actualFilter = filter.value;
        }
        if (this.changeTimeout) {
            clearTimeout(this.changeTimeout);
        }
        this.changeTimeout = setTimeout(() => {
            if (actualFilter === '') {
                actualFilter = undefined;
            }
            this._sort.filter(this.id, actualFilter, this.config.transforms.filter);
            this.changeDetectorRef.markForCheck();
        }, 300);
    }
    clearFilter() {
        this.filter = undefined;
        this.activeDateFilter = undefined;
        this.filterData();
    }
    getNextSortDirection(direction) {
        if (!direction) {
            return 'asc';
        }
        if (direction === 'asc') {
            return 'desc';
        }
        return 'asc';
    }
    getDefaultDateFilterOptions() {
        const opts = [
            { label: this.labels.past1Day, min: -1, max: 0 },
            { label: this.labels.past7Days, min: -7, max: 0 },
            { label: this.labels.past30Days, min: -30, max: 0 },
            { label: this.labels.past90Days, min: -90, max: 0 },
            { label: this.labels.past1Year, min: -366, max: 0 },
            { label: this.labels.next1Day, min: 0, max: 1 },
            { label: this.labels.next7Days, min: 0, max: 7 },
            { label: this.labels.next30Days, min: 0, max: 30 },
            { label: this.labels.next90Days, min: 0, max: 90 },
            { label: this.labels.next1Year, min: 0, max: 366 },
        ];
        return opts;
    }
}
NovoSimpleCellHeader.ɵfac = function NovoSimpleCellHeader_Factory(t) { return new (t || NovoSimpleCellHeader)(ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(NovoActivityTableState), ɵɵdirectiveInject(NovoSortFilter, 8), ɵɵdirectiveInject(CdkColumnDef, 8)); };
NovoSimpleCellHeader.ɵcmp = ɵɵdefineComponent({ type: NovoSimpleCellHeader, selectors: [["", "novo-simple-cell-config", ""]], viewQuery: function NovoSimpleCellHeader_Query(rf, ctx) { if (rf & 1) {
        ɵɵviewQuery(NovoDropdownElement, true);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.dropdown = _t.first);
    } }, inputs: { defaultSort: "defaultSort", config: ["novo-simple-cell-config", "config"] }, attrs: _c0$1h, ngContentSelectors: _c1$y, decls: 5, vars: 4, consts: [["data-automation-id", "novo-activity-table-label", 3, "click"], ["theme", "icon", "data-automation-id", "novo-activity-table-sort", 3, "icon", "active", "click", 4, "ngIf"], ["side", "right", "parentScrollSelector", ".novo-simple-table", "containerClass", "simple-table-dropdown", "data-automation-id", "novo-activity-table-filter", 4, "ngIf"], ["theme", "icon", "data-automation-id", "novo-activity-table-sort", 3, "icon", "click"], ["side", "right", "parentScrollSelector", ".novo-simple-table", "containerClass", "simple-table-dropdown", "data-automation-id", "novo-activity-table-filter"], ["type", "button", "theme", "icon", "icon", "filter"], [1, "header"], ["theme", "dialogue", "color", "negative", "icon", "times", "data-automation-id", "novo-activity-table-filter-clear", 3, "click", 4, "ngIf"], [3, "ngSwitch"], [4, "ngSwitchCase"], [4, "ngSwitchDefault"], ["theme", "dialogue", "color", "negative", "icon", "times", "data-automation-id", "novo-activity-table-filter-clear", 3, "click"], [4, "ngIf"], [3, "active", "keepOpen", "click", 4, "ngIf"], ["class", "calendar-container", 4, "ngIf"], [3, "active", "click", 4, "ngFor", "ngForOf"], [3, "click"], ["class", "bhi-check", 4, "ngIf"], [1, "bhi-check"], [3, "keepOpen", "click"], [1, "calendar-container"], [1, "bhi-previous"], ["range", "true", 3, "ngModel", "onSelect", "ngModelChange"], ["keepOpen", "true", 1, "filter-search"], ["type", "text", "novoSimpleFilterFocus", "", "data-automation-id", "novo-activity-table-filter-input", 3, "ngModel", "ngModelChange"]], template: function NovoSimpleCellHeader_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵelementStart(0, "label", 0);
        ɵɵlistener("click", function NovoSimpleCellHeader_Template_label_click_0_listener() { return ctx.sort(); });
        ɵɵprojection(1);
        ɵɵelementEnd();
        ɵɵelementStart(2, "div");
        ɵɵtemplate(3, NovoSimpleCellHeader_button_3_Template, 1, 3, "button", 1);
        ɵɵtemplate(4, NovoSimpleCellHeader_novo_dropdown_4_Template, 10, 7, "novo-dropdown", 2);
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵclassProp("sort-disabled", !ctx.config.sortable);
        ɵɵadvance(3);
        ɵɵproperty("ngIf", ctx.config.sortable);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.config.filterable);
    } }, directives: [NgIf, NovoButtonElement, NovoDropdownElement, NgSwitch, NgSwitchCase, NgSwitchDefault, NovoDropdownListElement, NgForOf, NovoItemElement, NovoDatePickerElement, NgControlStatus, NgModel, DefaultValueAccessor, NovoSimpleFilterFocus], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSimpleCellHeader, [{
        type: Component,
        args: [{
                selector: '[novo-simple-cell-config]',
                template: `
    <label (click)="sort()" data-automation-id="novo-activity-table-label" [class.sort-disabled]="!config.sortable">
      <ng-content></ng-content>
    </label>
    <div>
      <button
        *ngIf="config.sortable"
        theme="icon"
        [icon]="icon"
        (click)="sort()"
        [class.active]="sortActive"
        data-automation-id="novo-activity-table-sort"
      ></button>
      <novo-dropdown
        *ngIf="config.filterable"
        side="right"
        parentScrollSelector=".novo-simple-table"
        containerClass="simple-table-dropdown"
        data-automation-id="novo-activity-table-filter"
      >
        <button type="button" theme="icon" icon="filter" [class.active]="filterActive"></button>
        <div class="header">
          <span>{{ labels.filters }}</span>
          <button
            theme="dialogue"
            color="negative"
            icon="times"
            (click)="clearFilter()"
            *ngIf="filter"
            data-automation-id="novo-activity-table-filter-clear"
          >
            {{ labels.clear }}
          </button>
        </div>
        <ng-container [ngSwitch]="config.filterConfig.type">
          <list *ngSwitchCase="'date'">
            <ng-container *ngIf="!showCustomRange">
              <item
                [class.active]="activeDateFilter === option.label"
                *ngFor="let option of config.filterConfig.options"
                (click)="filterData(option)"
                [attr.data-automation-id]="'novo-activity-table-filter-' + option.label"
              >
                {{ option.label }} <i class="bhi-check" *ngIf="activeDateFilter === option.label"></i>
              </item>
            </ng-container>
            <item
              [class.active]="labels.customDateRange === activeDateFilter"
              (click)="toggleCustomRange($event, true)"
              *ngIf="config.filterConfig.allowCustomRange && !showCustomRange"
              [keepOpen]="true"
            >
              {{ labels.customDateRange }} <i class="bhi-check" *ngIf="labels.customDateRange === activeDateFilter"></i>
            </item>
            <div class="calendar-container" *ngIf="showCustomRange">
              <div (click)="toggleCustomRange($event, false)"><i class="bhi-previous"></i>{{ labels.backToPresetFilters }}</div>
              <novo-date-picker (onSelect)="filterData($event)" [(ngModel)]="filter" range="true"></novo-date-picker>
            </div>
          </list>
          <list *ngSwitchCase="'select'">
            <item
              [class.active]="filter === option"
              *ngFor="let option of config.filterConfig.options"
              (click)="filterData(option)"
              [attr.data-automation-id]="'novo-activity-table-filter-' + (option?.label || option)"
            >
              <span>{{ option?.label || option }}</span>
              <i class="bhi-check" *ngIf="option.hasOwnProperty('value') ? filter === option.value : filter === option"></i>
            </item>
          </list>
          <list *ngSwitchDefault>
            <item class="filter-search" keepOpen="true">
              <input
                type="text"
                [(ngModel)]="filter"
                (ngModelChange)="filterData($event)"
                novoSimpleFilterFocus
                data-automation-id="novo-activity-table-filter-input"
              />
            </item>
          </list>
        </ng-container>
      </novo-dropdown>
    </div>
  `,
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: ChangeDetectorRef }, { type: NovoLabelService }, { type: NovoActivityTableState }, { type: NovoSortFilter, decorators: [{
                type: Optional
            }] }, { type: CdkColumnDef, decorators: [{
                type: Optional
            }] }]; }, { dropdown: [{
            type: ViewChild,
            args: [NovoDropdownElement]
        }], defaultSort: [{
            type: Input
        }], config: [{
            type: Input,
            args: ['novo-simple-cell-config']
        }] }); })();

function NovoSimpleTablePagination_novo_tiles_1_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-tiles", 7);
    ɵɵlistener("ngModelChange", function NovoSimpleTablePagination_novo_tiles_1_Template_novo_tiles_ngModelChange_0_listener($event) { ɵɵrestoreView(_r3); const ctx_r2 = ɵɵnextContext(); return ctx_r2.pageSize = $event; })("onChange", function NovoSimpleTablePagination_novo_tiles_1_Template_novo_tiles_onChange_0_listener($event) { ɵɵrestoreView(_r3); const ctx_r4 = ɵɵnextContext(); return ctx_r4.changePageSize($event); });
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵproperty("ngModel", ctx_r0.pageSize)("options", ctx_r0.displayedPageSizeOptions);
} }
function NovoSimpleTablePagination_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div");
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r1.pageSize);
} }
const DEFAULT_PAGE_SIZE = 50;
class NovoSimpleTablePagination {
    constructor(changeDetectorRef, labels, state) {
        this.changeDetectorRef = changeDetectorRef;
        this.labels = labels;
        this.state = state;
        this._page = 0;
        this._length = 0;
        this._pageSizeOptions = [];
        this.pageChange = new EventEmitter();
        if (state && state.onReset) {
            this.resetSubscription = this.state.onReset.subscribe((clear) => {
                if (clear) {
                    this.page = 0;
                    this.changeDetectorRef.markForCheck();
                }
            });
        }
    }
    get page() {
        return this._page;
    }
    set page(page) {
        this._page = page;
        this.changeDetectorRef.markForCheck();
        this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
        this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
        this.state.page = this._page;
    }
    get length() {
        return this._length;
    }
    set length(length) {
        this._length = length;
        this.changeDetectorRef.markForCheck();
        this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
        this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
    }
    get pageSize() {
        return this._pageSize;
    }
    set pageSize(pageSize) {
        this._pageSize = pageSize;
        this.updateDisplayedPageSizeOptions();
        this.state.pageSize = this._pageSize;
    }
    get pageSizeOptions() {
        return this._pageSizeOptions;
    }
    set pageSizeOptions(pageSizeOptions) {
        this._pageSizeOptions = pageSizeOptions;
        this.updateDisplayedPageSizeOptions();
    }
    ngOnInit() {
        this._initialized = true;
        this.updateDisplayedPageSizeOptions();
    }
    ngOnDestroy() {
        this.resetSubscription.unsubscribe();
    }
    nextPage() {
        if (!this.hasNextPage()) {
            return;
        }
        this.page++;
        this.emitPageEvent();
    }
    previousPage() {
        if (!this.hasPreviousPage()) {
            return;
        }
        this.page--;
        this.emitPageEvent();
    }
    hasPreviousPage() {
        return this.page >= 1 && this.pageSize !== 0;
    }
    hasNextPage() {
        const numberOfPages = Math.ceil(this.length / this.pageSize) - 1;
        return this.page < numberOfPages && this.pageSize !== 0;
    }
    changePageSize(pageSize) {
        this.page = 0;
        this.pageSize = pageSize;
        this.emitPageEvent();
    }
    updateDisplayedPageSizeOptions() {
        if (!this._initialized) {
            return;
        }
        if (!this.pageSize) {
            this._pageSize = this.pageSizeOptions.length !== 0 ? this.pageSizeOptions[0] : DEFAULT_PAGE_SIZE;
        }
        this.displayedPageSizeOptions = this.pageSizeOptions.slice();
        if (this.displayedPageSizeOptions.indexOf(this.pageSize) === -1) {
            this.displayedPageSizeOptions.push(this.pageSize);
        }
        this.displayedPageSizeOptions.sort((a, b) => a - b);
        this.changeDetectorRef.markForCheck();
        this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
        this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
    }
    emitPageEvent() {
        const event = {
            page: this.page,
            pageSize: this.pageSize,
            length: this.length,
        };
        this.pageChange.next(event);
        this.state.page = this.page;
        this.state.pageSize = this.pageSize;
        this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
        this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
        this.state.updates.next(event);
    }
}
NovoSimpleTablePagination.ɵfac = function NovoSimpleTablePagination_Factory(t) { return new (t || NovoSimpleTablePagination)(ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(NovoActivityTableState)); };
NovoSimpleTablePagination.ɵcmp = ɵɵdefineComponent({ type: NovoSimpleTablePagination, selectors: [["novo-simple-table-pagination"]], inputs: { page: "page", length: "length", pageSize: "pageSize", pageSizeOptions: "pageSizeOptions" }, outputs: { pageChange: "pageChange" }, decls: 13, vars: 8, consts: [[1, "novo-simple-table-pagination-size"], ["data-automation-id", "novo-simple-table-pagination-tiles", 3, "ngModel", "options", "ngModelChange", "onChange", 4, "ngIf"], [4, "ngIf"], ["data-automation-id", "novo-simple-table-pagination-range-label-long", 1, "novo-simple-table-range-label-long"], ["data-automation-id", "novo-simple-table-pagination-range-label-short", 1, "novo-simple-table-range-label-short"], ["theme", "dialogue", "type", "button", "icon", "previous", "side", "left", "data-automation-id", "novo-simple-table-pagination-previous", 1, "novo-simple-table-pagination-navigation-previous", 3, "disabled", "click"], ["theme", "dialogue", "type", "button", "icon", "next", "side", "right", "data-automation-id", "novo-simple-table-pagination-next", 1, "novo-simple-table-pagination-navigation-next", 3, "disabled", "click"], ["data-automation-id", "novo-simple-table-pagination-tiles", 3, "ngModel", "options", "ngModelChange", "onChange"]], template: function NovoSimpleTablePagination_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "div", 0);
        ɵɵtemplate(1, NovoSimpleTablePagination_novo_tiles_1_Template, 1, 2, "novo-tiles", 1);
        ɵɵtemplate(2, NovoSimpleTablePagination_div_2_Template, 2, 1, "div", 2);
        ɵɵelementEnd();
        ɵɵelementStart(3, "div", 3);
        ɵɵtext(4);
        ɵɵelementEnd();
        ɵɵelementStart(5, "div", 4);
        ɵɵtext(6);
        ɵɵelementEnd();
        ɵɵelementStart(7, "button", 5);
        ɵɵlistener("click", function NovoSimpleTablePagination_Template_button_click_7_listener() { return ctx.previousPage(); });
        ɵɵelementStart(8, "span");
        ɵɵtext(9);
        ɵɵelementEnd();
        ɵɵelementEnd();
        ɵɵelementStart(10, "button", 6);
        ɵɵlistener("click", function NovoSimpleTablePagination_Template_button_click_10_listener() { return ctx.nextPage(); });
        ɵɵelementStart(11, "span");
        ɵɵtext(12);
        ɵɵelementEnd();
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.displayedPageSizeOptions.length > 1);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.displayedPageSizeOptions.length <= 1);
        ɵɵadvance(2);
        ɵɵtextInterpolate1(" ", ctx.longRangeLabel, " ");
        ɵɵadvance(2);
        ɵɵtextInterpolate1(" ", ctx.shortRangeLabel, " ");
        ɵɵadvance(1);
        ɵɵproperty("disabled", !ctx.hasPreviousPage());
        ɵɵadvance(2);
        ɵɵtextInterpolate(ctx.labels.previous);
        ɵɵadvance(1);
        ɵɵproperty("disabled", !ctx.hasNextPage());
        ɵɵadvance(2);
        ɵɵtextInterpolate(ctx.labels.next);
    } }, directives: [NgIf, NovoButtonElement, NovoTilesElement, NgControlStatus, NgModel], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSimpleTablePagination, [{
        type: Component,
        args: [{
                selector: 'novo-simple-table-pagination',
                template: `
    <div class="novo-simple-table-pagination-size">
      <novo-tiles
        *ngIf="displayedPageSizeOptions.length > 1"
        [(ngModel)]="pageSize"
        [options]="displayedPageSizeOptions"
        (onChange)="changePageSize($event)"
        data-automation-id="novo-simple-table-pagination-tiles"
      >
      </novo-tiles>
      <div *ngIf="displayedPageSizeOptions.length <= 1">{{ pageSize }}</div>
    </div>

    <div class="novo-simple-table-range-label-long" data-automation-id="novo-simple-table-pagination-range-label-long">
      {{ longRangeLabel }}
    </div>
    <div class="novo-simple-table-range-label-short" data-automation-id="novo-simple-table-pagination-range-label-short">
      {{ shortRangeLabel }}
    </div>

    <button
      theme="dialogue"
      type="button"
      class="novo-simple-table-pagination-navigation-previous"
      (click)="previousPage()"
      icon="previous"
      side="left"
      [disabled]="!hasPreviousPage()"
      data-automation-id="novo-simple-table-pagination-previous"
    >
      <span>{{ labels.previous }}</span>
    </button>
    <button
      theme="dialogue"
      type="button"
      class="novo-simple-table-pagination-navigation-next"
      (click)="nextPage()"
      icon="next"
      side="right"
      [disabled]="!hasNextPage()"
      data-automation-id="novo-simple-table-pagination-next"
    >
      <span>{{ labels.next }}</span>
    </button>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: ChangeDetectorRef }, { type: NovoLabelService }, { type: NovoActivityTableState }]; }, { page: [{
            type: Input
        }], length: [{
            type: Input
        }], pageSize: [{
            type: Input
        }], pageSizeOptions: [{
            type: Input
        }], pageChange: [{
            type: Output
        }] }); })();

/** Workaround for https://github.com/angular/angular/issues/17849 */
const _NovoHeaderRowDef = CdkHeaderRowDef;
const _NovoCdkRowDef = CdkRowDef;
const _NovoHeaderRow = CdkHeaderRow;
const _NovoRow = CdkRow;
class NovoSimpleHeaderRowDef extends _NovoHeaderRowDef {
}
NovoSimpleHeaderRowDef.ɵfac = function NovoSimpleHeaderRowDef_Factory(t) { return ɵNovoSimpleHeaderRowDef_BaseFactory(t || NovoSimpleHeaderRowDef); };
NovoSimpleHeaderRowDef.ɵdir = ɵɵdefineDirective({ type: NovoSimpleHeaderRowDef, selectors: [["", "novoSimpleHeaderRowDef", ""]], inputs: { columns: ["novoSimpleHeaderRowDef", "columns"] }, features: [ɵɵProvidersFeature([{ provide: CdkHeaderRowDef, useExisting: NovoSimpleHeaderRowDef }]), ɵɵInheritDefinitionFeature] });
const ɵNovoSimpleHeaderRowDef_BaseFactory = /*@__PURE__*/ ɵɵgetInheritedFactory(NovoSimpleHeaderRowDef);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSimpleHeaderRowDef, [{
        type: Directive,
        args: [{
                selector: '[novoSimpleHeaderRowDef]',
                providers: [{ provide: CdkHeaderRowDef, useExisting: NovoSimpleHeaderRowDef }],
            }]
    }], null, { columns: [{
            type: Input,
            args: ['novoSimpleHeaderRowDef']
        }] }); })();
class NovoSimpleRowDef extends _NovoCdkRowDef {
}
NovoSimpleRowDef.ɵfac = function NovoSimpleRowDef_Factory(t) { return ɵNovoSimpleRowDef_BaseFactory(t || NovoSimpleRowDef); };
NovoSimpleRowDef.ɵdir = ɵɵdefineDirective({ type: NovoSimpleRowDef, selectors: [["", "novoSimpleRowDef", ""]], inputs: { columns: ["novoSimpleRowDefColumns", "columns"] }, features: [ɵɵProvidersFeature([{ provide: CdkRowDef, useExisting: NovoSimpleRowDef }]), ɵɵInheritDefinitionFeature] });
const ɵNovoSimpleRowDef_BaseFactory = /*@__PURE__*/ ɵɵgetInheritedFactory(NovoSimpleRowDef);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSimpleRowDef, [{
        type: Directive,
        args: [{
                selector: '[novoSimpleRowDef]',
                providers: [{ provide: CdkRowDef, useExisting: NovoSimpleRowDef }],
            }]
    }], null, { columns: [{
            type: Input,
            args: ['novoSimpleRowDefColumns']
        }] }); })();
class NovoSimpleHeaderRow extends _NovoHeaderRow {
    constructor() {
        super(...arguments);
        this.rowClass = 'novo-simple-header-row';
        this.role = 'row';
    }
}
NovoSimpleHeaderRow.ɵfac = function NovoSimpleHeaderRow_Factory(t) { return ɵNovoSimpleHeaderRow_BaseFactory(t || NovoSimpleHeaderRow); };
NovoSimpleHeaderRow.ɵcmp = ɵɵdefineComponent({ type: NovoSimpleHeaderRow, selectors: [["novo-simple-header-row"]], hostVars: 3, hostBindings: function NovoSimpleHeaderRow_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵattribute("role", ctx.role);
        ɵɵclassMap(ctx.rowClass);
    } }, features: [ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [["cdkCellOutlet", ""]], template: function NovoSimpleHeaderRow_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementContainer(0, 0);
    } }, directives: [CdkCellOutlet], encapsulation: 2, changeDetection: 0 });
const ɵNovoSimpleHeaderRow_BaseFactory = /*@__PURE__*/ ɵɵgetInheritedFactory(NovoSimpleHeaderRow);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSimpleHeaderRow, [{
        type: Component,
        args: [{
                selector: 'novo-simple-header-row',
                template: CDK_ROW_TEMPLATE,
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], null, { rowClass: [{
            type: HostBinding,
            args: ['class']
        }], role: [{
            type: HostBinding,
            args: ['attr.role']
        }] }); })();
class NovoSimpleRow extends _NovoRow {
    constructor() {
        super(...arguments);
        this.rowClass = 'novo-simple-row';
        this.role = 'row';
    }
}
NovoSimpleRow.ɵfac = function NovoSimpleRow_Factory(t) { return ɵNovoSimpleRow_BaseFactory(t || NovoSimpleRow); };
NovoSimpleRow.ɵcmp = ɵɵdefineComponent({ type: NovoSimpleRow, selectors: [["novo-simple-row"]], hostVars: 3, hostBindings: function NovoSimpleRow_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵattribute("role", ctx.role);
        ɵɵclassMap(ctx.rowClass);
    } }, features: [ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [["cdkCellOutlet", ""]], template: function NovoSimpleRow_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementContainer(0, 0);
    } }, directives: [CdkCellOutlet], encapsulation: 2, changeDetection: 0 });
const ɵNovoSimpleRow_BaseFactory = /*@__PURE__*/ ɵɵgetInheritedFactory(NovoSimpleRow);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSimpleRow, [{
        type: Component,
        args: [{
                selector: 'novo-simple-row',
                template: CDK_ROW_TEMPLATE,
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], null, { rowClass: [{
            type: HostBinding,
            args: ['class']
        }], role: [{
            type: HostBinding,
            args: ['attr.role']
        }] }); })();

class RemoteActivityTableService {
}
class StaticActivityTableService {
    constructor(data = []) {
        this.data = data;
    }
    getTableResults(sort, filter, page = 0, pageSize, globalSearch, outsideFilter) {
        let ret = Helpers.deepClone(this.data);
        if (ret.length !== 0) {
            if (globalSearch) {
                ret = ret.filter((item) => Object.keys(item).some((key) => `${item[key]}`.toLowerCase().includes(globalSearch.toLowerCase())));
            }
            if (filter) {
                const value = Helpers.isString(filter.value) ? filter.value.replace(/[.*+?^${}()|[\]\\]/g, '\\$&') : filter.value;
                ret = ret.filter(Helpers.filterByField(filter.id, value));
            }
            if (sort) {
                ret = ret.sort(Helpers.sortByField(sort.id, sort.value === 'desc'));
            }
            if (!Helpers.isBlank(page) && !Helpers.isBlank(pageSize)) {
                ret = ret.slice(page * pageSize, (page + 1) * pageSize);
            }
        }
        return of({ results: ret, total: this.data.length });
    }
}
class ActivityTableDataSource extends DataSource {
    constructor(tableService, state, ref) {
        super();
        this.tableService = tableService;
        this.state = state;
        this.ref = ref;
        this.total = 0;
        this.current = 0;
        this.loading = false;
        this.pristine = true;
    }
    get totallyEmpty() {
        return this.total === 0;
    }
    get currentlyEmpty() {
        return this.current === 0;
    }
    connect() {
        const displayDataChanges = [this.state.updates];
        return merge(...displayDataChanges).pipe(startWith(null), switchMap(() => {
            this.pristine = false;
            this.loading = true;
            return this.tableService.getTableResults(this.state.sort, this.state.filter, this.state.page, this.state.pageSize, this.state.globalSearch, this.state.outsideFilter);
        }), map((data) => {
            this.loading = false;
            this.total = data.total;
            this.current = data.results.length;
            setTimeout(() => {
                this.ref.markForCheck();
            });
            return data.results;
        }), catchError((error) => {
            console.error(error); // tslint: disable-line
            this.loading = false;
            return of(null);
        }));
    }
    disconnect() { }
}

const _c0$1i = [[["caption"]], [["colgroup"], ["col"]]];
const _c1$z = ["caption", "colgroup, col"];
function NovoActivityTable_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div");
    ɵɵelementStart(1, "p");
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementStart(3, "p");
    ɵɵtext(4);
    ɵɵelementEnd();
    ɵɵelementStart(5, "p");
    ɵɵtext(6);
    ɵɵelementEnd();
    ɵɵelementStart(7, "p");
    ɵɵtext(8);
    ɵɵelementEnd();
    ɵɵelementStart(9, "p");
    ɵɵtext(10);
    ɵɵelementEnd();
    ɵɵelementStart(11, "p");
    ɵɵtext(12);
    ɵɵelementEnd();
    ɵɵelementStart(13, "p");
    ɵɵtext(14);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵtextInterpolate1("Total: ", ctx_r0.dataSource == null ? null : ctx_r0.dataSource.total, "");
    ɵɵadvance(2);
    ɵɵtextInterpolate1("Current: ", ctx_r0.dataSource == null ? null : ctx_r0.dataSource.current, "");
    ɵɵadvance(2);
    ɵɵtextInterpolate1("Totally Empty: ", ctx_r0.dataSource == null ? null : ctx_r0.dataSource.totallyEmpty, "");
    ɵɵadvance(2);
    ɵɵtextInterpolate1("Currently Empty: ", ctx_r0.dataSource == null ? null : ctx_r0.dataSource.currentlyEmpty, "");
    ɵɵadvance(2);
    ɵɵtextInterpolate1("Loading (DataSource): ", ctx_r0.dataSource == null ? null : ctx_r0.dataSource.loading, "");
    ɵɵadvance(2);
    ɵɵtextInterpolate1("User Filtered: ", ctx_r0.state.userFiltered, "");
    ɵɵadvance(2);
    ɵɵtextInterpolate1("Loading (Table): ", ctx_r0.loading, "");
} }
function NovoActivityTable_header_1_novo_search_2_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-search", 11);
    ɵɵlistener("searchChanged", function NovoActivityTable_header_1_novo_search_2_Template_novo_search_searchChanged_0_listener($event) { ɵɵrestoreView(_r10); const ctx_r9 = ɵɵnextContext(2); return ctx_r9.onSearchChange($event); })("ngModelChange", function NovoActivityTable_header_1_novo_search_2_Template_novo_search_ngModelChange_0_listener($event) { ɵɵrestoreView(_r10); const ctx_r11 = ɵɵnextContext(2); return ctx_r11.state.globalSearch = $event; });
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵɵnextContext(2);
    ɵɵproperty("ngModel", ctx_r7.state.globalSearch)("placeholder", ctx_r7.searchOptions == null ? null : ctx_r7.searchOptions.placeholder)("hint", ctx_r7.searchOptions == null ? null : ctx_r7.searchOptions.tooltip);
} }
function NovoActivityTable_header_1_novo_simple_table_pagination_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-simple-table-pagination", 12);
} if (rf & 2) {
    const ctx_r8 = ɵɵnextContext(2);
    ɵɵproperty("length", ctx_r8.dataSource == null ? null : ctx_r8.dataSource.total)("page", ctx_r8.paginationOptions.page)("pageSize", ctx_r8.paginationOptions.pageSize)("pageSizeOptions", ctx_r8.paginationOptions.pageSizeOptions);
} }
function NovoActivityTable_header_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "header");
    ɵɵprojection(1);
    ɵɵtemplate(2, NovoActivityTable_header_1_novo_search_2_Template, 1, 3, "novo-search", 8);
    ɵɵtemplate(3, NovoActivityTable_header_1_novo_simple_table_pagination_3_Template, 1, 4, "novo-simple-table-pagination", 9);
    ɵɵelementStart(4, "div", 10);
    ɵɵprojection(5, 1);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵproperty("ngIf", !ctx_r1.hideGlobalSearch);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r1.paginationOptions);
} }
function NovoActivityTable_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 13);
    ɵɵelement(1, "novo-loading");
    ɵɵelementEnd();
} }
function NovoActivityTable_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 14);
    ɵɵprojection(1, 2);
    ɵɵelementEnd();
} }
function NovoActivityTable_novo_simple_table_6_novo_simple_checkbox_header_cell_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-simple-checkbox-header-cell");
} }
function NovoActivityTable_novo_simple_table_6_novo_simple_checkbox_cell_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-simple-checkbox-cell", 22);
} if (rf & 2) {
    const row_r18 = ctx.$implicit;
    const i_r19 = ctx.index;
    ɵɵproperty("row", row_r18)("index", i_r19);
} }
function NovoActivityTable_novo_simple_table_6_ng_container_5_novo_simple_empty_header_cell_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-simple-empty-header-cell");
} if (rf & 2) {
    const column_r20 = ɵɵnextContext().$implicit;
    ɵɵclassProp("button-header-cell", !column_r20.options)("dropdown-header-cell", column_r20.options);
} }
function NovoActivityTable_novo_simple_table_6_ng_container_5_novo_simple_action_cell_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-simple-action-cell", 26);
} if (rf & 2) {
    const row_r24 = ctx.$implicit;
    const column_r20 = ɵɵnextContext().$implicit;
    ɵɵproperty("row", row_r24)("column", column_r20);
} }
function NovoActivityTable_novo_simple_table_6_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainerStart(0, 23);
    ɵɵtemplate(1, NovoActivityTable_novo_simple_table_6_ng_container_5_novo_simple_empty_header_cell_1_Template, 1, 4, "novo-simple-empty-header-cell", 24);
    ɵɵtemplate(2, NovoActivityTable_novo_simple_table_6_ng_container_5_novo_simple_action_cell_2_Template, 1, 2, "novo-simple-action-cell", 25);
    ɵɵelementContainerEnd();
} if (rf & 2) {
    const column_r20 = ctx.$implicit;
    ɵɵproperty("novoSimpleColumnDef", column_r20.id);
} }
function NovoActivityTable_novo_simple_table_6_ng_container_6_novo_simple_header_cell_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-simple-header-cell", 29);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const column_r27 = ɵɵnextContext().$implicit;
    const ctx_r28 = ɵɵnextContext(2);
    ɵɵproperty("column", column_r27)("novo-simple-cell-config", column_r27.config)("defaultSort", ctx_r28.defaultSort);
    ɵɵadvance(1);
    ɵɵtextInterpolate(column_r27.label);
} }
function NovoActivityTable_novo_simple_table_6_ng_container_6_novo_simple_cell_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-simple-cell", 30);
} if (rf & 2) {
    const row_r31 = ctx.$implicit;
    const column_r27 = ɵɵnextContext().$implicit;
    ɵɵproperty("column", column_r27)("row", row_r31);
} }
function NovoActivityTable_novo_simple_table_6_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainerStart(0, 23);
    ɵɵtemplate(1, NovoActivityTable_novo_simple_table_6_ng_container_6_novo_simple_header_cell_1_Template, 2, 4, "novo-simple-header-cell", 27);
    ɵɵtemplate(2, NovoActivityTable_novo_simple_table_6_ng_container_6_novo_simple_cell_2_Template, 1, 2, "novo-simple-cell", 28);
    ɵɵelementContainerEnd();
} if (rf & 2) {
    const column_r27 = ctx.$implicit;
    ɵɵproperty("novoSimpleColumnDef", column_r27.id);
} }
function NovoActivityTable_novo_simple_table_6_novo_simple_header_row_7_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-simple-header-row");
} }
function NovoActivityTable_novo_simple_table_6_novo_simple_row_8_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-simple-row");
} }
function NovoActivityTable_novo_simple_table_6_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-simple-table", 15);
    ɵɵprojection(1, 3);
    ɵɵelementContainerStart(2, 16);
    ɵɵtemplate(3, NovoActivityTable_novo_simple_table_6_novo_simple_checkbox_header_cell_3_Template, 1, 0, "novo-simple-checkbox-header-cell", 17);
    ɵɵtemplate(4, NovoActivityTable_novo_simple_table_6_novo_simple_checkbox_cell_4_Template, 1, 2, "novo-simple-checkbox-cell", 18);
    ɵɵelementContainerEnd();
    ɵɵtemplate(5, NovoActivityTable_novo_simple_table_6_ng_container_5_Template, 3, 1, "ng-container", 19);
    ɵɵtemplate(6, NovoActivityTable_novo_simple_table_6_ng_container_6_Template, 3, 1, "ng-container", 19);
    ɵɵtemplate(7, NovoActivityTable_novo_simple_table_6_novo_simple_header_row_7_Template, 1, 0, "novo-simple-header-row", 20);
    ɵɵtemplate(8, NovoActivityTable_novo_simple_table_6_novo_simple_row_8_Template, 1, 0, "novo-simple-row", 21);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵɵnextContext();
    ɵɵclassProp("empty", (ctx_r4.dataSource == null ? null : ctx_r4.dataSource.currentlyEmpty) && ctx_r4.state.userFiltered);
    ɵɵproperty("dataSource", ctx_r4.dataSource)("hidden", (ctx_r4.dataSource == null ? null : ctx_r4.dataSource.totallyEmpty) && !ctx_r4.state.userFiltered);
    ɵɵadvance(5);
    ɵɵproperty("ngForOf", ctx_r4.actionColumns);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r4.columns);
    ɵɵadvance(1);
    ɵɵproperty("novoSimpleHeaderRowDef", ctx_r4.displayedColumns);
    ɵɵadvance(1);
    ɵɵproperty("novoSimpleRowDefColumns", ctx_r4.displayedColumns);
} }
function NovoActivityTable_div_7_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 34);
    ɵɵelementStart(1, "h4");
    ɵɵelement(2, "i", 35);
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r35 = ɵɵnextContext(2);
    ɵɵadvance(3);
    ɵɵtextInterpolate1(" ", ctx_r35.labels.noMatchingRecordsMessage, "");
} }
function NovoActivityTable_div_7_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 31);
    ɵɵelementStart(1, "div", null, 32);
    ɵɵprojection(3, 4);
    ɵɵelementEnd();
    ɵɵtemplate(4, NovoActivityTable_div_7_div_4_Template, 4, 1, "div", 33);
    ɵɵelementEnd();
} if (rf & 2) {
    const _r34 = ɵɵreference(2);
    ɵɵadvance(4);
    ɵɵproperty("ngIf", _r34.childNodes.length == 0);
} }
function NovoActivityTable_div_8_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 34);
    ɵɵelementStart(1, "h4");
    ɵɵelement(2, "i", 35);
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r37 = ɵɵnextContext(2);
    ɵɵadvance(3);
    ɵɵtextInterpolate1(" ", ctx_r37.labels.emptyTableMessage, "");
} }
function NovoActivityTable_div_8_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 36);
    ɵɵelementStart(1, "div", null, 37);
    ɵɵprojection(3, 5);
    ɵɵelementEnd();
    ɵɵtemplate(4, NovoActivityTable_div_8_div_4_Template, 4, 1, "div", 33);
    ɵɵelementEnd();
} if (rf & 2) {
    const _r36 = ɵɵreference(2);
    ɵɵadvance(4);
    ɵɵproperty("ngIf", _r36.childNodes.length == 0);
} }
const _c2$f = [[["", "novo-activity-table-custom-header", ""]], [["", "novo-activity-table-actions", ""]], [["", "novo-activity-table-custom-filter", ""]], "*", [["", "novo-activity-table-no-results-message", ""]], [["", "novo-activity-table-empty-message", ""]]];
const _c3$8 = ["[novo-activity-table-custom-header]", "[novo-activity-table-actions]", "[novo-activity-table-custom-filter]", "*", "[novo-activity-table-no-results-message]", "[novo-activity-table-empty-message]"];
/** Workaround for https://github.com/angular/angular/issues/17849 */
const _NovoTable = CdkTable;
class NovoTable extends _NovoTable {
}
NovoTable.ɵfac = function NovoTable_Factory(t) { return ɵNovoTable_BaseFactory(t || NovoTable); };
NovoTable.ɵcmp = ɵɵdefineComponent({ type: NovoTable, selectors: [["novo-simple-table"]], features: [ɵɵInheritDefinitionFeature], ngContentSelectors: _c1$z, decls: 6, vars: 0, consts: [["headerRowOutlet", ""], ["rowOutlet", ""], ["noDataRowOutlet", ""], ["footerRowOutlet", ""]], template: function NovoTable_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef(_c0$1i);
        ɵɵprojection(0);
        ɵɵprojection(1, 1);
        ɵɵelementContainer(2, 0);
        ɵɵelementContainer(3, 1);
        ɵɵelementContainer(4, 2);
        ɵɵelementContainer(5, 3);
    } }, directives: [HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet], encapsulation: 2, changeDetection: 0 });
const ɵNovoTable_BaseFactory = /*@__PURE__*/ ɵɵgetInheritedFactory(NovoTable);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTable, [{
        type: Component,
        args: [{
                selector: 'novo-simple-table',
                template: CDK_TABLE_TEMPLATE,
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], null, null); })();
class NovoActivityTableActions {
}
NovoActivityTableActions.ɵfac = function NovoActivityTableActions_Factory(t) { return new (t || NovoActivityTableActions)(); };
NovoActivityTableActions.ɵdir = ɵɵdefineDirective({ type: NovoActivityTableActions, selectors: [["novo-activity-table-actions"]] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoActivityTableActions, [{
        type: Directive,
        args: [{
                selector: 'novo-activity-table-actions',
            }]
    }], null, null); })();
class NovoActivityTableCustomHeader {
}
NovoActivityTableCustomHeader.ɵfac = function NovoActivityTableCustomHeader_Factory(t) { return new (t || NovoActivityTableCustomHeader)(); };
NovoActivityTableCustomHeader.ɵdir = ɵɵdefineDirective({ type: NovoActivityTableCustomHeader, selectors: [["novo-activity-table-custom-header"]] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoActivityTableCustomHeader, [{
        type: Directive,
        args: [{
                selector: 'novo-activity-table-custom-header',
            }]
    }], null, null); })();
class NovoActivityTableCustomFilter {
}
NovoActivityTableCustomFilter.ɵfac = function NovoActivityTableCustomFilter_Factory(t) { return new (t || NovoActivityTableCustomFilter)(); };
NovoActivityTableCustomFilter.ɵdir = ɵɵdefineDirective({ type: NovoActivityTableCustomFilter, selectors: [["novo-activity-table-custom-filter"]] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoActivityTableCustomFilter, [{
        type: Directive,
        args: [{
                selector: 'novo-activity-table-custom-filter',
            }]
    }], null, null); })();
class NovoActivityTableEmptyMessage {
}
NovoActivityTableEmptyMessage.ɵfac = function NovoActivityTableEmptyMessage_Factory(t) { return new (t || NovoActivityTableEmptyMessage)(); };
NovoActivityTableEmptyMessage.ɵdir = ɵɵdefineDirective({ type: NovoActivityTableEmptyMessage, selectors: [["novo-activity-table-empty-message"]] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoActivityTableEmptyMessage, [{
        type: Directive,
        args: [{
                selector: 'novo-activity-table-empty-message',
            }]
    }], null, null); })();
class NovoActivityTableNoResultsMessage {
}
NovoActivityTableNoResultsMessage.ɵfac = function NovoActivityTableNoResultsMessage_Factory(t) { return new (t || NovoActivityTableNoResultsMessage)(); };
NovoActivityTableNoResultsMessage.ɵdir = ɵɵdefineDirective({ type: NovoActivityTableNoResultsMessage, selectors: [["novo-activity-table-no-results-message"]] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoActivityTableNoResultsMessage, [{
        type: Directive,
        args: [{
                selector: 'novo-activity-table-no-results-message',
            }]
    }], null, null); })();
class NovoActivityTable {
    constructor(labels, ref, state) {
        this.labels = labels;
        this.ref = ref;
        this.state = state;
        this.globalSearchHiddenClassToggle = false;
        this.loading = true;
        notify('[Deprecated]: The simple table is deprecated. Please migrate to novo-data-tables!');
    }
    set customFilter(v) {
        this._customFilter = coerceBooleanProperty(v);
    }
    get customFilter() {
        return this._customFilter;
    }
    set forceShowHeader(v) {
        this._forceShowHeader = coerceBooleanProperty(v);
    }
    get forceShowHeader() {
        return this._forceShowHeader;
    }
    set hideGlobalSearch(v) {
        this._hideGlobalSearch = coerceBooleanProperty(v);
        this.globalSearchHiddenClassToggle = this._hideGlobalSearch;
    }
    get hideGlobalSearch() {
        return this._hideGlobalSearch;
    }
    set debug(v) {
        this._debug = coerceBooleanProperty(v);
    }
    get debug() {
        return this._debug;
    }
    get empty() {
        return this.dataSource && this.dataSource.totallyEmpty;
    }
    get loadingClass() {
        return this.loading || (this.dataSource && this.dataSource.loading);
    }
    ngOnChanges(changes) {
        this.loading = changes.activityService && !changes.activityService.currentValue;
        this.ref.detectChanges();
        if (changes.activityService && changes.activityService.currentValue) {
            this.loading = false;
            this.dataSource = new ActivityTableDataSource(this.activityService, this.state, this.ref);
            this.ref.detectChanges();
        }
        if (changes.outsideFilter && changes.outsideFilter.currentValue) {
            if (!this.outsideFilterSubscription) {
                this.outsideFilterSubscription = this.outsideFilter.subscribe((filter) => {
                    this.state.outsideFilter = filter;
                    this.state.updates.next({ globalSearch: this.state.globalSearch, filter: this.state.filter, sort: this.state.sort });
                    this.ref.markForCheck();
                });
            }
        }
    }
    ngOnDestroy() {
        if (this.outsideFilterSubscription) {
            this.outsideFilterSubscription.unsubscribe();
        }
    }
    ngAfterContentInit() {
        if (this.paginationOptions && !this.paginationOptions.page) {
            this.paginationOptions.page = 0;
        }
        if (this.paginationOptions && !this.paginationOptions.pageSize) {
            this.paginationOptions.pageSize = 50;
        }
        if (this.paginationOptions && !this.paginationOptions.pageSizeOptions) {
            this.paginationOptions.pageSizeOptions = [10, 25, 50, 100];
        }
        this.state.page = this.paginationOptions ? this.paginationOptions.page : undefined;
        this.state.pageSize = this.paginationOptions ? this.paginationOptions.pageSize : undefined;
        this.ref.markForCheck();
    }
    onSearchChange(term) {
        this.state.globalSearch = term;
        this.state.reset(false, true);
        this.state.updates.next({ globalSearch: term, filter: this.state.filter, sort: this.state.sort });
    }
}
NovoActivityTable.ɵfac = function NovoActivityTable_Factory(t) { return new (t || NovoActivityTable)(ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(NovoActivityTableState)); };
NovoActivityTable.ɵcmp = ɵɵdefineComponent({ type: NovoActivityTable, selectors: [["novo-activity-table"]], hostVars: 6, hostBindings: function NovoActivityTable_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵclassProp("global-search-hidden", ctx.globalSearchHiddenClassToggle)("empty", ctx.empty)("loading", ctx.loadingClass);
    } }, inputs: { activityService: "activityService", columns: "columns", displayedColumns: "displayedColumns", actionColumns: "actionColumns", paginationOptions: "paginationOptions", searchOptions: "searchOptions", defaultSort: "defaultSort", outsideFilter: "outsideFilter", customFilter: "customFilter", forceShowHeader: "forceShowHeader", hideGlobalSearch: "hideGlobalSearch", debug: "debug" }, features: [ɵɵProvidersFeature([NovoActivityTableState]), ɵɵNgOnChangesFeature], ngContentSelectors: _c3$8, decls: 9, vars: 7, consts: [[4, "ngIf"], ["class", "novo-activity-table-loading-mask", "data-automation-id", "novo-activity-table-loading", 4, "ngIf"], [1, "novo-activity-table-filter-container"], ["class", "novo-activity-table-custom-filter", 4, "ngIf"], [1, "novo-activity-table-container"], ["novoSortFilter", "", "novoSelection", "", 3, "dataSource", "empty", "hidden", 4, "ngIf"], ["class", "novo-activity-table-no-results-container", 4, "ngIf"], ["class", "novo-activity-table-empty-container", 4, "ngIf"], ["alwaysOpen", "true", 3, "ngModel", "placeholder", "hint", "searchChanged", "ngModelChange", 4, "ngIf"], [3, "length", "page", "pageSize", "pageSizeOptions", 4, "ngIf"], [1, "novo-activity-table-actions"], ["alwaysOpen", "true", 3, "ngModel", "placeholder", "hint", "searchChanged", "ngModelChange"], [3, "length", "page", "pageSize", "pageSizeOptions"], ["data-automation-id", "novo-activity-table-loading", 1, "novo-activity-table-loading-mask"], [1, "novo-activity-table-custom-filter"], ["novoSortFilter", "", "novoSelection", "", 3, "dataSource", "hidden"], ["novoSimpleColumnDef", "selection"], [4, "novoSimpleHeaderCellDef"], [3, "row", "index", 4, "novoSimpleCellDef"], [3, "novoSimpleColumnDef", 4, "ngFor", "ngForOf"], [4, "novoSimpleHeaderRowDef"], [4, "novoSimpleRowDef", "novoSimpleRowDefColumns"], [3, "row", "index"], [3, "novoSimpleColumnDef"], [3, "button-header-cell", "dropdown-header-cell", 4, "novoSimpleHeaderCellDef"], [3, "row", "column", 4, "novoSimpleCellDef"], [3, "row", "column"], [3, "column", "novo-simple-cell-config", "defaultSort", 4, "novoSimpleHeaderCellDef"], [3, "column", "row", 4, "novoSimpleCellDef"], [3, "column", "novo-simple-cell-config", "defaultSort"], [3, "column", "row"], [1, "novo-activity-table-no-results-container"], ["filtered", ""], ["class", "novo-activity-table-empty-message", 4, "ngIf"], [1, "novo-activity-table-empty-message"], [1, "bhi-search-question"], [1, "novo-activity-table-empty-container"], ["empty", ""]], template: function NovoActivityTable_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef(_c2$f);
        ɵɵtemplate(0, NovoActivityTable_div_0_Template, 15, 7, "div", 0);
        ɵɵtemplate(1, NovoActivityTable_header_1_Template, 6, 2, "header", 0);
        ɵɵtemplate(2, NovoActivityTable_div_2_Template, 2, 0, "div", 1);
        ɵɵelementStart(3, "div", 2);
        ɵɵtemplate(4, NovoActivityTable_div_4_Template, 2, 0, "div", 3);
        ɵɵelementStart(5, "div", 4);
        ɵɵtemplate(6, NovoActivityTable_novo_simple_table_6_Template, 9, 8, "novo-simple-table", 5);
        ɵɵtemplate(7, NovoActivityTable_div_7_Template, 5, 1, "div", 6);
        ɵɵtemplate(8, NovoActivityTable_div_8_Template, 5, 1, "div", 7);
        ɵɵelementEnd();
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵproperty("ngIf", ctx.debug);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", !((ctx.dataSource == null ? null : ctx.dataSource.totallyEmpty) && !ctx.state.userFiltered) && !ctx.loading || ctx.forceShowHeader);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", (ctx.dataSource == null ? null : ctx.dataSource.loading) || ctx.loading);
        ɵɵadvance(2);
        ɵɵproperty("ngIf", ctx.customFilter);
        ɵɵadvance(2);
        ɵɵproperty("ngIf", (ctx.columns == null ? null : ctx.columns.length) > 0);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", (ctx.dataSource == null ? null : ctx.dataSource.currentlyEmpty) && ctx.state.userFiltered && !(ctx.dataSource == null ? null : ctx.dataSource.loading) && !ctx.loading && !ctx.dataSource.pristine);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", (ctx.dataSource == null ? null : ctx.dataSource.totallyEmpty) && !(ctx.dataSource == null ? null : ctx.dataSource.loading) && !ctx.loading && !ctx.state.userFiltered && !ctx.dataSource.pristine);
    } }, directives: [NgIf, NovoSearchBoxElement, NgControlStatus, NgModel, NovoSimpleTablePagination, NovoLoadingElement, NovoTable, NovoSortFilter, NovoSelection, NovoSimpleColumnDef, NovoSimpleHeaderCellDef, NovoSimpleCellDef, NgForOf, NovoSimpleHeaderRowDef, NovoSimpleRowDef, NovoSimpleCheckboxHeaderCell, NovoSimpleCheckboxCell, NovoSimpleEmptyHeaderCell, NovoSimpleActionCell, NovoSimpleHeaderCell, NovoSimpleCellHeader, NovoSimpleCell, NovoSimpleHeaderRow, NovoSimpleRow], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoActivityTable, [{
        type: Component,
        args: [{
                selector: 'novo-activity-table',
                template: `
    <div *ngIf="debug">
      <p>Total: {{ dataSource?.total }}</p>
      <p>Current: {{ dataSource?.current }}</p>
      <p>Totally Empty: {{ dataSource?.totallyEmpty }}</p>
      <p>Currently Empty: {{ dataSource?.currentlyEmpty }}</p>
      <p>Loading (DataSource): {{ dataSource?.loading }}</p>
      <p>User Filtered: {{ state.userFiltered }}</p>
      <p>Loading (Table): {{ loading }}</p>
    </div>
    <header *ngIf="(!(dataSource?.totallyEmpty && !state.userFiltered) && !loading) || forceShowHeader">
      <ng-content select="[novo-activity-table-custom-header]"></ng-content>
      <novo-search
        alwaysOpen="true"
        (searchChanged)="onSearchChange($event)"
        [(ngModel)]="state.globalSearch"
        *ngIf="!hideGlobalSearch"
        [placeholder]="searchOptions?.placeholder"
        [hint]="searchOptions?.tooltip"
      >
      </novo-search>
      <novo-simple-table-pagination
        *ngIf="paginationOptions"
        [length]="dataSource?.total"
        [page]="paginationOptions.page"
        [pageSize]="paginationOptions.pageSize"
        [pageSizeOptions]="paginationOptions.pageSizeOptions"
      >
      </novo-simple-table-pagination>
      <div class="novo-activity-table-actions">
        <ng-content select="[novo-activity-table-actions]"></ng-content>
      </div>
    </header>
    <div class="novo-activity-table-loading-mask" *ngIf="dataSource?.loading || loading" data-automation-id="novo-activity-table-loading">
      <novo-loading></novo-loading>
    </div>
    <div class="novo-activity-table-filter-container">
      <div class="novo-activity-table-custom-filter" *ngIf="customFilter">
        <ng-content select="[novo-activity-table-custom-filter]"></ng-content>
      </div>
      <div class="novo-activity-table-container">
        <novo-simple-table
          *ngIf="columns?.length > 0"
          [dataSource]="dataSource"
          novoSortFilter
          novoSelection
          [class.empty]="dataSource?.currentlyEmpty && state.userFiltered"
          [hidden]="dataSource?.totallyEmpty && !state.userFiltered"
        >
          <ng-content></ng-content>
          <ng-container novoSimpleColumnDef="selection">
            <novo-simple-checkbox-header-cell *novoSimpleHeaderCellDef></novo-simple-checkbox-header-cell>
            <novo-simple-checkbox-cell *novoSimpleCellDef="let row; let i = index" [row]="row" [index]="i"></novo-simple-checkbox-cell>
          </ng-container>
          <ng-container *ngFor="let column of actionColumns" [novoSimpleColumnDef]="column.id">
            <novo-simple-empty-header-cell
              [class.button-header-cell]="!column.options"
              [class.dropdown-header-cell]="column.options"
              *novoSimpleHeaderCellDef
            ></novo-simple-empty-header-cell>
            <novo-simple-action-cell *novoSimpleCellDef="let row; let i = index" [row]="row" [column]="column"></novo-simple-action-cell>
          </ng-container>
          <ng-container *ngFor="let column of columns" [novoSimpleColumnDef]="column.id">
            <novo-simple-header-cell
              *novoSimpleHeaderCellDef
              [column]="column"
              [novo-simple-cell-config]="column.config"
              [defaultSort]="defaultSort"
              >{{ column.label }}</novo-simple-header-cell
            >
            <novo-simple-cell *novoSimpleCellDef="let row" [column]="column" [row]="row"></novo-simple-cell>
          </ng-container>
          <novo-simple-header-row *novoSimpleHeaderRowDef="displayedColumns"></novo-simple-header-row>
          <novo-simple-row *novoSimpleRowDef="let row; columns: displayedColumns"></novo-simple-row>
        </novo-simple-table>
        <div
          class="novo-activity-table-no-results-container"
          *ngIf="dataSource?.currentlyEmpty && state.userFiltered && !dataSource?.loading && !loading && !dataSource.pristine"
        >
          <div #filtered><ng-content select="[novo-activity-table-no-results-message]"></ng-content></div>
          <div class="novo-activity-table-empty-message" *ngIf="filtered.childNodes.length == 0">
            <h4><i class="bhi-search-question"></i> {{ labels.noMatchingRecordsMessage }}</h4>
          </div>
        </div>
        <div
          class="novo-activity-table-empty-container"
          *ngIf="dataSource?.totallyEmpty && !dataSource?.loading && !loading && !state.userFiltered && !dataSource.pristine"
        >
          <div #empty><ng-content select="[novo-activity-table-empty-message]"></ng-content></div>
          <div class="novo-activity-table-empty-message" *ngIf="empty.childNodes.length == 0">
            <h4><i class="bhi-search-question"></i> {{ labels.emptyTableMessage }}</h4>
          </div>
        </div>
      </div>
    </div>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [NovoActivityTableState],
            }]
    }], function () { return [{ type: NovoLabelService }, { type: ChangeDetectorRef }, { type: NovoActivityTableState }]; }, { globalSearchHiddenClassToggle: [{
            type: HostBinding,
            args: ['class.global-search-hidden']
        }], activityService: [{
            type: Input
        }], columns: [{
            type: Input
        }], displayedColumns: [{
            type: Input
        }], actionColumns: [{
            type: Input
        }], paginationOptions: [{
            type: Input
        }], searchOptions: [{
            type: Input
        }], defaultSort: [{
            type: Input
        }], outsideFilter: [{
            type: Input
        }], customFilter: [{
            type: Input
        }], forceShowHeader: [{
            type: Input
        }], hideGlobalSearch: [{
            type: Input
        }], debug: [{
            type: Input
        }], empty: [{
            type: HostBinding,
            args: ['class.empty']
        }], loadingClass: [{
            type: HostBinding,
            args: ['class.loading']
        }] }); })();

class NovoSimpleTableModule {
}
NovoSimpleTableModule.ɵmod = ɵɵdefineNgModule({ type: NovoSimpleTableModule });
NovoSimpleTableModule.ɵinj = ɵɵdefineInjector({ factory: function NovoSimpleTableModule_Factory(t) { return new (t || NovoSimpleTableModule)(); }, providers: [NovoActivityTableState], imports: [[
            NovoDatePickerModule,
            CdkTableModule,
            CommonModule,
            FormsModule,
            NovoButtonModule,
            NovoDropdownModule,
            NovoFormExtrasModule,
            NovoLoadingModule,
            NovoTilesModule,
            NovoSearchBoxModule,
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoSimpleTableModule, { declarations: [NovoTable,
        NovoSimpleCellDef,
        NovoSimpleHeaderCellDef,
        NovoSimpleColumnDef,
        NovoActivityTableEmptyMessage,
        NovoActivityTableNoResultsMessage,
        NovoSimpleHeaderRowDef,
        NovoSimpleRowDef,
        NovoSimpleCellHeader,
        NovoSortFilter,
        NovoSimpleActionCell,
        NovoSimpleEmptyHeaderCell,
        NovoSimpleHeaderCell,
        NovoSimpleCell,
        NovoSimpleHeaderRow,
        NovoSimpleRow,
        NovoSimpleFilterFocus,
        NovoSimpleTablePagination,
        NovoActivityTableCustomHeader,
        NovoSimpleCheckboxCell,
        NovoSimpleCheckboxHeaderCell,
        NovoSelection,
        NovoActivityTable,
        NovoActivityTableActions,
        NovoActivityTableCustomFilter], imports: [NovoDatePickerModule,
        CdkTableModule,
        CommonModule,
        FormsModule,
        NovoButtonModule,
        NovoDropdownModule,
        NovoFormExtrasModule,
        NovoLoadingModule,
        NovoTilesModule,
        NovoSearchBoxModule], exports: [NovoTable,
        NovoSimpleCellDef,
        NovoSimpleHeaderCellDef,
        NovoSimpleColumnDef,
        NovoActivityTableEmptyMessage,
        NovoActivityTableNoResultsMessage,
        NovoSimpleHeaderRowDef,
        NovoSimpleRowDef,
        NovoSimpleCellHeader,
        NovoSortFilter,
        NovoSimpleActionCell,
        NovoSimpleEmptyHeaderCell,
        NovoSimpleHeaderCell,
        NovoSimpleCell,
        NovoSimpleHeaderRow,
        NovoSimpleRow,
        NovoSimpleFilterFocus,
        NovoSimpleTablePagination,
        NovoActivityTableCustomHeader,
        NovoSimpleCheckboxCell,
        NovoSimpleCheckboxHeaderCell,
        NovoSelection,
        NovoActivityTable,
        NovoActivityTableActions,
        NovoActivityTableCustomFilter] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSimpleTableModule, [{
        type: NgModule,
        args: [{
                imports: [
                    NovoDatePickerModule,
                    CdkTableModule,
                    CommonModule,
                    FormsModule,
                    NovoButtonModule,
                    NovoDropdownModule,
                    NovoFormExtrasModule,
                    NovoLoadingModule,
                    NovoTilesModule,
                    NovoSearchBoxModule,
                ],
                exports: [
                    NovoTable,
                    NovoSimpleCellDef,
                    NovoSimpleHeaderCellDef,
                    NovoSimpleColumnDef,
                    NovoActivityTableEmptyMessage,
                    NovoActivityTableNoResultsMessage,
                    NovoSimpleHeaderRowDef,
                    NovoSimpleRowDef,
                    NovoSimpleCellHeader,
                    NovoSortFilter,
                    NovoSimpleActionCell,
                    NovoSimpleEmptyHeaderCell,
                    NovoSimpleHeaderCell,
                    NovoSimpleCell,
                    NovoSimpleHeaderRow,
                    NovoSimpleRow,
                    NovoSimpleFilterFocus,
                    NovoSimpleTablePagination,
                    NovoActivityTableCustomHeader,
                    NovoSimpleCheckboxCell,
                    NovoSimpleCheckboxHeaderCell,
                    NovoSelection,
                    NovoActivityTable,
                    NovoActivityTableActions,
                    NovoActivityTableCustomFilter,
                ],
                declarations: [
                    NovoTable,
                    NovoSimpleCellDef,
                    NovoSimpleHeaderCellDef,
                    NovoSimpleColumnDef,
                    NovoActivityTableEmptyMessage,
                    NovoActivityTableNoResultsMessage,
                    NovoSimpleHeaderRowDef,
                    NovoSimpleRowDef,
                    NovoSimpleCellHeader,
                    NovoSortFilter,
                    NovoSimpleActionCell,
                    NovoSimpleEmptyHeaderCell,
                    NovoSimpleHeaderCell,
                    NovoSimpleCell,
                    NovoSimpleHeaderRow,
                    NovoSimpleRow,
                    NovoSimpleFilterFocus,
                    NovoSimpleTablePagination,
                    NovoActivityTableCustomHeader,
                    NovoSimpleCheckboxCell,
                    NovoSimpleCheckboxHeaderCell,
                    NovoSelection,
                    NovoActivityTable,
                    NovoActivityTableActions,
                    NovoActivityTableCustomFilter,
                ],
                providers: [NovoActivityTableState],
            }]
    }], null, null); })();

// NG2
function NovoSliderElement_button_3_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 7);
    ɵɵlistener("click", function NovoSliderElement_button_3_Template_button_click_0_listener() { ɵɵrestoreView(_r5); const ctx_r4 = ɵɵnextContext(); return ctx_r4.changeSlide("back"); });
    ɵɵelementEnd();
} }
function NovoSliderElement_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "div", 8);
} if (rf & 2) {
    const indicator_r6 = ctx.$implicit;
    ɵɵproperty("ngClass", indicator_r6);
} }
function NovoSliderElement_button_6_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 9);
    ɵɵlistener("click", function NovoSliderElement_button_6_Template_button_click_0_listener() { ɵɵrestoreView(_r9); const ctx_r8 = ɵɵnextContext(); return ctx_r8.changeSlide("next"); });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r2.labels.next);
} }
function NovoSliderElement_ng_content_7_Template(rf, ctx) { if (rf & 1) {
    ɵɵprojection(0, 1, ["*ngIf", "end"]);
} }
const _c0$1j = [[["div", "slide", ""]], [["button"]]];
const _c1$A = ["div[slide]", "button"];
class NovoSliderElement {
    constructor(element, labels) {
        this.element = element;
        this.labels = labels;
        this.currentSlide = 0;
        this.start = true;
        this.end = true;
        this.currSlides = ['active'];
        this.handleKeyDownFunc = this.handleKeyDown.bind(this);
    }
    ngOnInit() {
        for (let i = 0; i < this.slides; i++) {
            this.currSlides[i] = i > 0 ? 'inactive' : 'active';
        }
        // Catch Tab Events
        this.element.nativeElement.addEventListener('keydown', this.handleKeyDownFunc);
    }
    ngOnDestroy() {
        this.element.nativeElement.removeEventListener('keydown', this.handleKeyDownFunc);
    }
    handleKeyDown(event) {
        if (event.key === "Tab" /* Tab */) {
            event.stopImmediatePropagation();
            event.preventDefault();
        }
    }
    changeSlide(direction) {
        if (direction === 'next') {
            if (this.currentSlide === this.slides - 1) {
                return;
            }
            this.currentSlide++;
        }
        else {
            if (this.currentSlide === 0) {
                return;
            }
            this.currentSlide--;
        }
        for (let i = 0; i < this.slides; i++) {
            this.currSlides[i] = 'inactive';
        }
        this.currSlides[this.currentSlide] = 'active';
        this.start = this.currentSlide === 0;
        this.end = this.currentSlide === this.slides - 1;
        this.currentClass = `slide-${this.currentSlide}`;
    }
}
NovoSliderElement.ɵfac = function NovoSliderElement_Factory(t) { return new (t || NovoSliderElement)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NovoLabelService)); };
NovoSliderElement.ɵcmp = ɵɵdefineComponent({ type: NovoSliderElement, selectors: [["novo-slider"]], hostVars: 2, hostBindings: function NovoSliderElement_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵclassMap(ctx.currentClass);
    } }, inputs: { slides: "slides" }, ngContentSelectors: _c1$A, decls: 8, vars: 4, consts: [[1, "slides"], [1, "controls"], ["theme", "icon", "icon", "previous", 3, "click", 4, "ngIf"], [1, "indicators"], ["class", "indicator-circle", 3, "ngClass", 4, "ngFor", "ngForOf"], ["theme", "primary", "icon", "next", 3, "click", 4, "ngIf"], [4, "ngIf"], ["theme", "icon", "icon", "previous", 3, "click"], [1, "indicator-circle", 3, "ngClass"], ["theme", "primary", "icon", "next", 3, "click"]], template: function NovoSliderElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef(_c0$1j);
        ɵɵelementStart(0, "section", 0);
        ɵɵprojection(1);
        ɵɵelementEnd();
        ɵɵelementStart(2, "div", 1);
        ɵɵtemplate(3, NovoSliderElement_button_3_Template, 1, 0, "button", 2);
        ɵɵelementStart(4, "div", 3);
        ɵɵtemplate(5, NovoSliderElement_div_5_Template, 1, 1, "div", 4);
        ɵɵelementEnd();
        ɵɵtemplate(6, NovoSliderElement_button_6_Template, 2, 1, "button", 5);
        ɵɵtemplate(7, NovoSliderElement_ng_content_7_Template, 1, 0, "ng-content", 6);
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵadvance(3);
        ɵɵproperty("ngIf", !ctx.start);
        ɵɵadvance(2);
        ɵɵproperty("ngForOf", ctx.currSlides);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", !ctx.end);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.end);
    } }, directives: [NgIf, NgForOf, NovoButtonElement, NgClass], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSliderElement, [{
        type: Component,
        args: [{
                selector: 'novo-slider',
                template: `
    <section class="slides">
      <ng-content select="div[slide]"></ng-content>
    </section>
    <div class="controls">
      <button *ngIf="!start" theme="icon" icon="previous" (click)="changeSlide('back')"></button>
      <div class="indicators">
        <div class="indicator-circle" *ngFor="let indicator of currSlides; let i = index" [ngClass]="indicator"></div>
      </div>
      <button *ngIf="!end" theme="primary" icon="next" (click)="changeSlide('next')">{{ labels.next }}</button>
      <ng-content select="button" *ngIf="end"></ng-content>
    </div>
  `,
                host: {
                    '[class]': 'currentClass',
                },
            }]
    }], function () { return [{ type: ElementRef }, { type: NovoLabelService }]; }, { slides: [{
            type: Input
        }] }); })();

// NG2
class NovoSliderModule {
}
NovoSliderModule.ɵmod = ɵɵdefineNgModule({ type: NovoSliderModule });
NovoSliderModule.ɵinj = ɵɵdefineInjector({ factory: function NovoSliderModule_Factory(t) { return new (t || NovoSliderModule)(); }, imports: [[CommonModule, NovoButtonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoSliderModule, { declarations: [NovoSliderElement], imports: [CommonModule, NovoButtonModule], exports: [NovoSliderElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSliderModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, NovoButtonModule],
                declarations: [NovoSliderElement],
                exports: [NovoSliderElement],
            }]
    }], null, null); })();

class NovoStepLabel extends CdkStepLabel {
    constructor(template) {
        super(template);
    }
}
NovoStepLabel.ɵfac = function NovoStepLabel_Factory(t) { return new (t || NovoStepLabel)(ɵɵdirectiveInject(TemplateRef)); };
NovoStepLabel.ɵdir = ɵɵdefineDirective({ type: NovoStepLabel, selectors: [["", "novoStepLabel", ""]], features: [ɵɵInheritDefinitionFeature] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoStepLabel, [{
        type: Directive,
        args: [{
                selector: '[novoStepLabel]',
            }]
    }], function () { return [{ type: TemplateRef }]; }, null); })();

function NovoStepHeader_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵelementStart(1, "novo-icon", 5);
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("theme", ctx_r0.theme);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r0.icon);
} }
function NovoStepHeader_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵelementStart(1, "span", 6);
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r1.index + 1);
} }
function NovoStepHeader_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainer(0, 7);
} if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵproperty("ngTemplateOutlet", ctx_r2._templateLabel().template);
} }
function NovoStepHeader_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 8);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r3.label);
} }
class NovoStepHeader extends CdkStepHeader {
    constructor(_focusMonitor, _element) {
        super(_element);
        this._focusMonitor = _focusMonitor;
        this._element = _element;
        _focusMonitor.monitor(_element.nativeElement, true);
    }
    /** Index of the given step. */
    get index() {
        return this._index;
    }
    set index(value) {
        this._index = coerceNumberProperty(value);
    }
    /** Whether the given step is selected. */
    get selected() {
        return this._selected;
    }
    set selected(value) {
        this._selected = coerceBooleanProperty(value);
    }
    /** Whether the given step label is active. */
    get active() {
        return this._active;
    }
    set active(value) {
        this._active = coerceBooleanProperty(value);
    }
    /** Whether the given step label is active. */
    get touched() {
        return this.selected || this.state === 'edit' || this.state === 'done';
    }
    /** Whether the given step is optional. */
    get optional() {
        return this._optional;
    }
    set optional(value) {
        this._optional = coerceBooleanProperty(value);
    }
    ngOnDestroy() {
        this._focusMonitor.stopMonitoring(this._element.nativeElement);
    }
    /** Returns string label of given step if it is a text label. */
    _stringLabel() {
        return this.label instanceof NovoStepLabel ? null : this.label;
    }
    /** Returns NovoStepLabel if the label of given step is a template label. */
    _templateLabel() {
        return this.label instanceof NovoStepLabel ? this.label : null;
    }
    /** Returns the host HTML element. */
    _getHostElement() {
        return this._element.nativeElement;
    }
}
NovoStepHeader.ɵfac = function NovoStepHeader_Factory(t) { return new (t || NovoStepHeader)(ɵɵdirectiveInject(FocusMonitor), ɵɵdirectiveInject(ElementRef)); };
NovoStepHeader.ɵcmp = ɵɵdefineComponent({ type: NovoStepHeader, selectors: [["novo-step-header"]], hostAttrs: ["role", "tab", 1, "novo-step-header"], inputs: { theme: "theme", color: "color", icon: "icon", state: "state", label: "label", iconOverrides: "iconOverrides", index: "index", selected: "selected", active: "active", optional: "optional" }, features: [ɵɵInheritDefinitionFeature], decls: 7, vars: 13, consts: [[4, "ngIf"], [1, "novo-step-label"], [3, "ngTemplateOutlet", 4, "ngIf"], ["class", "novo-step-text-label", 4, "ngIf"], [3, "state"], ["size", "small", "raised", "true", 3, "theme"], [1, "novo-step-number"], [3, "ngTemplateOutlet"], [1, "novo-step-text-label"]], template: function NovoStepHeader_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "div");
        ɵɵtemplate(1, NovoStepHeader_ng_container_1_Template, 3, 2, "ng-container", 0);
        ɵɵtemplate(2, NovoStepHeader_ng_container_2_Template, 3, 1, "ng-container", 0);
        ɵɵelementEnd();
        ɵɵelementStart(3, "div", 1);
        ɵɵtemplate(4, NovoStepHeader_ng_container_4_Template, 1, 1, "ng-container", 2);
        ɵɵtemplate(5, NovoStepHeader_div_5_Template, 2, 1, "div", 3);
        ɵɵelementEnd();
        ɵɵelement(6, "novo-step-status", 4);
    } if (rf & 2) {
        ɵɵclassProp("novo-step-icon", ctx.touched)("novo-step-icon-not-touched", !ctx.touched);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.icon);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", !ctx.icon);
        ɵɵadvance(1);
        ɵɵclassProp("novo-step-label-active", ctx.active)("novo-step-label-selected", ctx.selected);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx._templateLabel());
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx._stringLabel());
        ɵɵadvance(1);
        ɵɵproperty("state", ctx.state);
    } }, styles: ["@-webkit-keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}.novo-step-header[_ngcontent-%COMP%]{cursor:pointer;outline:none;overflow:visible;position:relative}.novo-step-optional[_ngcontent-%COMP%]{font-size:12px}.novo-step-icon[_ngcontent-%COMP%], .novo-step-icon-not-touched[_ngcontent-%COMP%]{align-items:center;border-radius:50%;display:flex;height:24px;justify-content:center;width:24px}.novo-step-icon-not-touched[_ngcontent-%COMP%]   .novo-step-number[_ngcontent-%COMP%], .novo-step-icon[_ngcontent-%COMP%]   .novo-step-number[_ngcontent-%COMP%]{align-items:center;border-radius:4px;box-shadow:2px 2px 0 rgba(0,0,0,.2);display:flex;font-size:1em;height:1.6em;justify-content:center;min-width:1.6em}.novo-step-icon[_ngcontent-%COMP%]   .novo-step-number[_ngcontent-%COMP%]{background:#4a89dc;color:#fff}.novo-step-icon-not-touched[_ngcontent-%COMP%]   .novo-step-number[_ngcontent-%COMP%]{background:#a9adbb;color:#fff}.novo-step-label[_ngcontent-%COMP%]{display:inline-block;min-width:50px;padding:4px 0;vertical-align:middle;white-space:nowrap}.novo-step-label[_ngcontent-%COMP%], .novo-step-text-label[_ngcontent-%COMP%]{overflow:hidden;text-align:center;text-overflow:ellipsis}"], changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoStepHeader, [{
        type: Component,
        args: [{
                selector: 'novo-step-header',
                templateUrl: 'step-header.component.html',
                styleUrls: ['step-header.component.scss'],
                host: {
                    class: 'novo-step-header',
                    role: 'tab',
                },
                preserveWhitespaces: false,
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: FocusMonitor }, { type: ElementRef }]; }, { theme: [{
            type: Input
        }], color: [{
            type: Input
        }], icon: [{
            type: Input
        }], state: [{
            type: Input
        }], label: [{
            type: Input
        }], iconOverrides: [{
            type: Input
        }], index: [{
            type: Input
        }], selected: [{
            type: Input
        }], active: [{
            type: Input
        }], optional: [{
            type: Input
        }] }); })();

/** Animations used by the Novo steppers. */
const novoStepperAnimations = {
    /** Animation that transitions the step along the X axis in a horizontal stepper. */
    horizontalStepTransition: trigger('stepTransition', [
        state('previous', style({ transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden' })),
        state('current', style({ transform: 'none', visibility: 'visible' })),
        state('next', style({ transform: 'translate3d(100%, 0, 0)', visibility: 'hidden' })),
        transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),
    ]),
    /** Animation that transitions the step along the Y axis in a vertical stepper. */
    verticalStepTransition: trigger('stepTransition', [
        state('previous', style({ height: '0px', visibility: 'hidden' })),
        state('next', style({ height: '0px', visibility: 'hidden' })),
        state('current', style({ height: '*', visibility: 'visible' })),
        transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),
    ]),
};

function NovoStep_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵprojection(0);
} }
const _c0$1k = ["*"];
function NovoHorizontalStepper_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵɵgetCurrentView();
    ɵɵelementContainerStart(0);
    ɵɵelementStart(1, "novo-step-header", 6);
    ɵɵlistener("click", function NovoHorizontalStepper_ng_container_2_Template_novo_step_header_click_1_listener() { const step_r2 = ctx.$implicit; return step_r2.select(); })("keydown", function NovoHorizontalStepper_ng_container_2_Template_novo_step_header_keydown_1_listener($event) { ɵɵrestoreView(_r7); const ctx_r6 = ɵɵnextContext(); return ctx_r6._onKeydown($event); });
    ɵɵelementEnd();
    ɵɵelementContainerEnd();
} if (rf & 2) {
    const step_r2 = ctx.$implicit;
    const i_r3 = ctx.index;
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("tabIndex", ctx_r0._getFocusIndex() === i_r3 ? 0 : 0 - 1)("id", ctx_r0._getStepLabelId(i_r3))("index", i_r3)("theme", step_r2.theme)("color", step_r2.color)("icon", step_r2.icon)("state", ctx_r0.getIndicatorType(i_r3))("label", step_r2.stepLabel || step_r2.label)("selected", ctx_r0.selectedIndex === i_r3)("active", step_r2.completed || ctx_r0.selectedIndex === i_r3 || !ctx_r0.linear)("optional", step_r2.optional)("iconOverrides", ctx_r0._iconOverrides);
    ɵɵattribute("aria-controls", ctx_r0._getStepContentId(i_r3))("aria-selected", ctx_r0.selectedIndex == i_r3);
} }
function NovoHorizontalStepper_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 7);
    ɵɵelementContainer(1, 8);
    ɵɵelementEnd();
} if (rf & 2) {
    const step_r8 = ctx.$implicit;
    const i_r9 = ctx.index;
    const ctx_r1 = ɵɵnextContext();
    ɵɵproperty("@stepTransition", ctx_r1._getAnimationDirection(i_r9))("id", ctx_r1._getStepContentId(i_r9));
    ɵɵattribute("aria-labelledby", ctx_r1._getStepLabelId(i_r9))("aria-expanded", ctx_r1.selectedIndex === i_r9);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", step_r8.content);
} }
function NovoVerticalStepper_div_0_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 1);
    ɵɵelementStart(1, "novo-step-header", 2);
    ɵɵlistener("click", function NovoVerticalStepper_div_0_Template_novo_step_header_click_1_listener() { const step_r1 = ctx.$implicit; return step_r1.select(); })("keydown", function NovoVerticalStepper_div_0_Template_novo_step_header_keydown_1_listener($event) { ɵɵrestoreView(_r6); const ctx_r5 = ɵɵnextContext(); return ctx_r5._onKeydown($event); });
    ɵɵelementEnd();
    ɵɵelementStart(2, "div", 3);
    ɵɵelementStart(3, "div", 4);
    ɵɵelementStart(4, "div", 5);
    ɵɵelementContainer(5, 6);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const step_r1 = ctx.$implicit;
    const i_r2 = ctx.index;
    const isLast_r3 = ctx.last;
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("tabIndex", ctx_r0._getFocusIndex() == i_r2 ? 0 : 0 - 1)("id", ctx_r0._getStepLabelId(i_r2))("index", i_r2)("theme", step_r1.theme)("color", step_r1.color)("icon", step_r1.icon)("state", ctx_r0.getIndicatorType(i_r2))("label", step_r1.stepLabel || step_r1.label)("selected", ctx_r0.selectedIndex === i_r2)("active", step_r1.completed || ctx_r0.selectedIndex === i_r2 || !ctx_r0.linear)("optional", step_r1.optional)("iconOverrides", ctx_r0._iconOverrides);
    ɵɵattribute("aria-controls", ctx_r0._getStepContentId(i_r2))("aria-selected", ctx_r0.selectedIndex === i_r2);
    ɵɵadvance(1);
    ɵɵclassProp("novo-stepper-vertical-line", !isLast_r3);
    ɵɵproperty("ngClass", ctx_r0.getIndicatorType(i_r2));
    ɵɵadvance(1);
    ɵɵproperty("@stepTransition", ctx_r0._getAnimationDirection(i_r2))("id", ctx_r0._getStepContentId(i_r2));
    ɵɵattribute("aria-labelledby", ctx_r0._getStepLabelId(i_r2))("aria-expanded", ctx_r0.selectedIndex === i_r2);
    ɵɵadvance(2);
    ɵɵproperty("ngTemplateOutlet", step_r1.content);
} }
const _c1$B = "@-webkit-keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@keyframes rotate{0%{transform:rotate(0deg)}75%{transform:rotate(200deg)}to{transform:rotate(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@keyframes half-rotate{0%{transform:rotate(45deg)}75%{transform:rotate(100deg)}to{transform:rotate(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@keyframes rotateBack{0%{transform:rotate(90deg)}to{transform:rotate(0deg)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}to{opacity:1;transform:translateX(0)}}.novo-stepper-horizontal[_ngcontent-%COMP%], .novo-stepper-vertical[_ngcontent-%COMP%]{display:block}.novo-horizontal-stepper-header-container[_ngcontent-%COMP%]{align-items:center;background:#f4f4f4;display:flex;justify-content:center;margin-bottom:1em;white-space:nowrap}.novo-stepper-horizontal-line[_ngcontent-%COMP%]{border-bottom:1px solid #bebebe;flex:auto;height:80px;min-width:0}.novo-stepper-horizontal-line.complete[_ngcontent-%COMP%]{border-bottom:1px solid #4a89dc}.novo-horizontal-stepper-header[_ngcontent-%COMP%]{align-items:center;display:flex;flex-flow:column;height:80px;justify-content:center;overflow:visible;padding:0 24px}.novo-horizontal-stepper-header[_ngcontent-%COMP%]   .novo-step-status[_ngcontent-%COMP%]{align-items:center;bottom:0;display:flex;height:1px;justify-content:center;position:absolute;width:100%}.novo-horizontal-stepper-header[_ngcontent-%COMP%]   .novo-step-status[_ngcontent-%COMP%]   .novo-stepper-status-line[_ngcontent-%COMP%]{position:absolute;width:100%}.novo-horizontal-stepper-header[_ngcontent-%COMP%]   .novo-step-status[_ngcontent-%COMP%]   .novo-stepper-status-line[_ngcontent-%COMP%]:before{border-bottom:1px solid #bebebe;content:\"\";display:block;margin-right:8px;width:calc(50% - 8px)}.novo-horizontal-stepper-header[_ngcontent-%COMP%]   .novo-step-status[_ngcontent-%COMP%]   .novo-stepper-status-line[_ngcontent-%COMP%]:after{border-top:1px solid #bebebe;content:\"\";display:block;margin-left:calc(50% + 8px);margin-top:-1px;width:calc(50% - 8px)}.novo-horizontal-stepper-header[_ngcontent-%COMP%]   .novo-step-status[_ngcontent-%COMP%]   .novo-stepper-status-line.done[_ngcontent-%COMP%]:before, .novo-horizontal-stepper-header[_ngcontent-%COMP%]   .novo-step-status[_ngcontent-%COMP%]   .novo-stepper-status-line.edit[_ngcontent-%COMP%]:before{border-bottom:1px solid #4a89dc}.novo-horizontal-stepper-header[_ngcontent-%COMP%]   .novo-step-status[_ngcontent-%COMP%]   .novo-stepper-status-line.done[_ngcontent-%COMP%]:after{border-top:1px solid #4a89dc}.novo-horizontal-stepper-header[_ngcontent-%COMP%]   .novo-step-status[_ngcontent-%COMP%]   .novo-stepper-status-icon[_ngcontent-%COMP%]{position:relative}.novo-horizontal-stepper-header[_ngcontent-%COMP%]   .novo-step-status[_ngcontent-%COMP%]   .novo-stepper-status-icon[_ngcontent-%COMP%]:before{background:#fff;border-radius:50%;bottom:1px;content:\"\";display:block;left:1px;position:absolute;right:1px;top:1px;z-index:0}.novo-horizontal-stepper-header[_ngcontent-%COMP%]   .novo-step-status[_ngcontent-%COMP%]   .novo-stepper-status-icon[_ngcontent-%COMP%] > *[_ngcontent-%COMP%]{position:relative;z-index:1}.novo-vertical-stepper-header[_ngcontent-%COMP%]{align-items:center;display:flex;max-height:24px;padding:24px}.novo-vertical-stepper-header[_ngcontent-%COMP%]   .novo-step-icon[_ngcontent-%COMP%], .novo-vertical-stepper-header[_ngcontent-%COMP%]   .novo-step-icon-not-touched[_ngcontent-%COMP%]{margin-right:12px}[dir=rtl][_ngcontent-%COMP%]   .novo-vertical-stepper-header[_ngcontent-%COMP%]   .novo-step-icon[_ngcontent-%COMP%], [dir=rtl][_ngcontent-%COMP%]   .novo-vertical-stepper-header[_ngcontent-%COMP%]   .novo-step-icon-not-touched[_ngcontent-%COMP%]{margin-left:12px;margin-right:0}.novo-horizontal-stepper-content[_ngcontent-%COMP%]{overflow:hidden}.novo-horizontal-stepper-content[aria-expanded=false][_ngcontent-%COMP%]{height:0}.novo-horizontal-content-container[_ngcontent-%COMP%]{overflow:hidden;padding:0 24px 24px}.novo-vertical-content-container[_ngcontent-%COMP%]{border:0;margin-left:36px;position:relative}[dir=rtl][_ngcontent-%COMP%]   .novo-vertical-content-container[_ngcontent-%COMP%]{margin-left:0;margin-right:36px}.novo-stepper-vertical-line[_ngcontent-%COMP%]:before{border-left:1px solid #bebebe;bottom:-16px;content:\"\";left:0;position:absolute;top:-16px;z-index:-1}[dir=rtl][_ngcontent-%COMP%]   .novo-stepper-vertical-line[_ngcontent-%COMP%]:before{left:auto;right:0}.novo-stepper-vertical-line.done[_ngcontent-%COMP%]:after, .novo-stepper-vertical-line.done[_ngcontent-%COMP%]:before, .novo-stepper-vertical-line.edit[_ngcontent-%COMP%]:before{border-left-color:1px solid #4a89dc}.novo-stepper-vertical[_ngcontent-%COMP%]   novo-step-status[_ngcontent-%COMP%]{left:35px;position:absolute;top:25px;transform:scale(.8)}.novo-vertical-stepper-content[_ngcontent-%COMP%]{overflow:hidden}.novo-vertical-content[_ngcontent-%COMP%]{padding:0 24px 24px}.novo-step[_ngcontent-%COMP%]:last-child   .novo-vertical-content-container[_ngcontent-%COMP%]{border:none}";
class NovoStep extends CdkStep {
    constructor(stepper) {
        super(stepper);
    }
}
NovoStep.ɵfac = function NovoStep_Factory(t) { return new (t || NovoStep)(ɵɵdirectiveInject(forwardRef(() => NovoStepper))); };
NovoStep.ɵcmp = ɵɵdefineComponent({ type: NovoStep, selectors: [["novo-step"]], contentQueries: function NovoStep_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵɵcontentQuery(dirIndex, NovoStepLabel, true);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.stepLabel = _t.first);
    } }, inputs: { theme: "theme", color: "color", icon: "icon" }, features: [ɵɵProvidersFeature([{ provide: CdkStep, useExisting: NovoStep }]), ɵɵInheritDefinitionFeature], ngContentSelectors: _c0$1k, decls: 1, vars: 0, template: function NovoStep_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵtemplate(0, NovoStep_ng_template_0_Template, 1, 0, "ng-template");
    } }, encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoStep, [{
        type: Component,
        args: [{
                selector: 'novo-step',
                templateUrl: 'step.component.html',
                preserveWhitespaces: false,
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [{ provide: CdkStep, useExisting: NovoStep }],
            }]
    }], function () { return [{ type: CdkStepper, decorators: [{
                type: Inject,
                args: [forwardRef(() => NovoStepper)]
            }] }]; }, { stepLabel: [{
            type: ContentChild,
            args: [NovoStepLabel]
        }], theme: [{
            type: Input
        }], color: [{
            type: Input
        }], icon: [{
            type: Input
        }] }); })();
class NovoStepper extends CdkStepper {
    constructor() {
        super(...arguments);
        /** Consumer-specified template-refs to be used to override the header icons. */
        this._iconOverrides = {};
    }
    get completed() {
        try {
            const steps = this._steps.toArray();
            const length = steps.length - 1;
            return steps[length].completed && length === this.selectedIndex;
        }
        catch (err) {
            return false;
        }
    }
    ngAfterContentInit() {
        // Mark the component for change detection whenever the content children query changes
        this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());
    }
    complete() {
        try {
            const steps = this._steps.toArray();
            steps[this.selectedIndex].completed = true;
            this.next();
            this._stateChanged();
        }
        catch (err) {
            // do nothing
        }
    }
    getIndicatorType(index) {
        const steps = this._steps.toArray();
        if (index === this.selectedIndex) {
            if (steps[index] && index === steps.length - 1 && steps[index].completed) {
                return 'done';
            }
            return 'edit';
        }
        if (index < this.selectedIndex) {
            return 'done';
        }
        return 'none';
    }
}
NovoStepper.ɵfac = function NovoStepper_Factory(t) { return ɵNovoStepper_BaseFactory(t || NovoStepper); };
NovoStepper.ɵdir = ɵɵdefineDirective({ type: NovoStepper, selectors: [["", "novoStepper", ""]], contentQueries: function NovoStepper_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵɵcontentQuery(dirIndex, NovoStep, false);
        ɵɵcontentQuery(dirIndex, NovoIconComponent, false);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx._steps = _t);
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx._icons = _t);
    } }, viewQuery: function NovoStepper_Query(rf, ctx) { if (rf & 1) {
        ɵɵviewQuery(NovoStepHeader, true);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx._stepHeader = _t);
    } }, features: [ɵɵProvidersFeature([{ provide: CdkStepper, useExisting: NovoStepper }]), ɵɵInheritDefinitionFeature] });
const ɵNovoStepper_BaseFactory = /*@__PURE__*/ ɵɵgetInheritedFactory(NovoStepper);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoStepper, [{
        type: Directive,
        args: [{
                selector: '[novoStepper]',
                providers: [{ provide: CdkStepper, useExisting: NovoStepper }],
            }]
    }], null, { _stepHeader: [{
            type: ViewChildren,
            args: [NovoStepHeader]
        }], _steps: [{
            type: ContentChildren,
            args: [NovoStep]
        }], _icons: [{
            type: ContentChildren,
            args: [NovoIconComponent]
        }] }); })();
class NovoHorizontalStepper extends NovoStepper {
}
NovoHorizontalStepper.ɵfac = function NovoHorizontalStepper_Factory(t) { return ɵNovoHorizontalStepper_BaseFactory(t || NovoHorizontalStepper); };
NovoHorizontalStepper.ɵcmp = ɵɵdefineComponent({ type: NovoHorizontalStepper, selectors: [["novo-horizontal-stepper"]], hostAttrs: ["aria-orientation", "horizontal", "role", "tablist", 1, "novo-stepper-horizontal"], exportAs: ["novoHorizontalStepper"], features: [ɵɵProvidersFeature([
            { provide: NovoStepper, useExisting: NovoHorizontalStepper },
            { provide: CdkStepper, useExisting: NovoHorizontalStepper },
        ]), ɵɵInheritDefinitionFeature], decls: 6, vars: 4, consts: [[1, "novo-horizontal-stepper-header-container"], [1, "novo-stepper-horizontal-line", "complete"], [4, "ngFor", "ngForOf"], [1, "novo-stepper-horizontal-line"], [1, "novo-horizontal-content-container"], ["class", "novo-horizontal-stepper-content", "role", "tabpanel", 3, "id", 4, "ngFor", "ngForOf"], [1, "novo-horizontal-stepper-header", 3, "tabIndex", "id", "index", "theme", "color", "icon", "state", "label", "selected", "active", "optional", "iconOverrides", "click", "keydown"], ["role", "tabpanel", 1, "novo-horizontal-stepper-content", 3, "id"], [3, "ngTemplateOutlet"]], template: function NovoHorizontalStepper_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "div", 0);
        ɵɵelement(1, "div", 1);
        ɵɵtemplate(2, NovoHorizontalStepper_ng_container_2_Template, 2, 14, "ng-container", 2);
        ɵɵelement(3, "div", 3);
        ɵɵelementEnd();
        ɵɵelementStart(4, "div", 4);
        ɵɵtemplate(5, NovoHorizontalStepper_div_5_Template, 2, 5, "div", 5);
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵadvance(2);
        ɵɵproperty("ngForOf", ctx._steps);
        ɵɵadvance(1);
        ɵɵclassProp("complete", ctx.completed);
        ɵɵadvance(2);
        ɵɵproperty("ngForOf", ctx._steps);
    } }, directives: [NgForOf, NovoStepHeader, NgTemplateOutlet], styles: [_c1$B], data: { animation: [novoStepperAnimations.horizontalStepTransition] }, changeDetection: 0 });
const ɵNovoHorizontalStepper_BaseFactory = /*@__PURE__*/ ɵɵgetInheritedFactory(NovoHorizontalStepper);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoHorizontalStepper, [{
        type: Component,
        args: [{
                selector: 'novo-horizontal-stepper',
                exportAs: 'novoHorizontalStepper',
                templateUrl: 'stepper-horizontal.html',
                styleUrls: ['stepper.component.scss'],
                host: {
                    class: 'novo-stepper-horizontal',
                    'aria-orientation': 'horizontal',
                    role: 'tablist',
                },
                animations: [novoStepperAnimations.horizontalStepTransition],
                providers: [
                    { provide: NovoStepper, useExisting: NovoHorizontalStepper },
                    { provide: CdkStepper, useExisting: NovoHorizontalStepper },
                ],
                // encapsulation: ViewEncapsulation.None,
                preserveWhitespaces: false,
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], null, null); })();
class NovoVerticalStepper extends NovoStepper {
    constructor(dir, changeDetectorRef) {
        super(dir, changeDetectorRef);
        this._orientation = 'vertical';
    }
}
NovoVerticalStepper.ɵfac = function NovoVerticalStepper_Factory(t) { return new (t || NovoVerticalStepper)(ɵɵdirectiveInject(Directionality, 8), ɵɵdirectiveInject(ChangeDetectorRef)); };
NovoVerticalStepper.ɵcmp = ɵɵdefineComponent({ type: NovoVerticalStepper, selectors: [["novo-vertical-stepper"]], hostAttrs: ["aria-orientation", "vertical", "role", "tablist", 1, "novo-stepper-vertical"], exportAs: ["novoVerticalStepper"], features: [ɵɵProvidersFeature([
            { provide: NovoStepper, useExisting: NovoVerticalStepper },
            { provide: CdkStepper, useExisting: NovoVerticalStepper },
        ]), ɵɵInheritDefinitionFeature], decls: 1, vars: 1, consts: [["class", "novo-step", 4, "ngFor", "ngForOf"], [1, "novo-step"], [1, "novo-vertical-stepper-header", 3, "tabIndex", "id", "index", "theme", "color", "icon", "state", "label", "selected", "active", "optional", "iconOverrides", "click", "keydown"], [1, "novo-vertical-content-container", 3, "ngClass"], ["role", "tabpanel", 1, "novo-vertical-stepper-content", 3, "id"], [1, "novo-vertical-content"], [3, "ngTemplateOutlet"]], template: function NovoVerticalStepper_Template(rf, ctx) { if (rf & 1) {
        ɵɵtemplate(0, NovoVerticalStepper_div_0_Template, 6, 22, "div", 0);
    } if (rf & 2) {
        ɵɵproperty("ngForOf", ctx._steps);
    } }, directives: [NgForOf, NovoStepHeader, NgClass, NgTemplateOutlet], styles: [_c1$B], data: { animation: [novoStepperAnimations.verticalStepTransition] }, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoVerticalStepper, [{
        type: Component,
        args: [{
                selector: 'novo-vertical-stepper',
                exportAs: 'novoVerticalStepper',
                templateUrl: 'stepper-vertical.html',
                styleUrls: ['stepper.component.scss'],
                host: {
                    class: 'novo-stepper-vertical',
                    'aria-orientation': 'vertical',
                    role: 'tablist',
                },
                animations: [novoStepperAnimations.verticalStepTransition],
                providers: [
                    { provide: NovoStepper, useExisting: NovoVerticalStepper },
                    { provide: CdkStepper, useExisting: NovoVerticalStepper },
                ],
                preserveWhitespaces: false,
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: Directionality, decorators: [{
                type: Optional
            }] }, { type: ChangeDetectorRef }]; }, null); })();

function NovoStepStatus_novo_icon_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-icon", 4);
    ɵɵtext(1, "check-circle");
    ɵɵelementEnd();
} }
function NovoStepStatus_novo_icon_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-icon", 4);
    ɵɵtext(1, "check-circle-filled");
    ɵɵelementEnd();
} }
function NovoStepStatus_novo_icon_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-icon", 4);
    ɵɵtext(1, "circle-o");
    ɵɵelementEnd();
} }
class NovoStepStatus {
    constructor(stepper, step) { }
}
NovoStepStatus.ɵfac = function NovoStepStatus_Factory(t) { return new (t || NovoStepStatus)(ɵɵdirectiveInject(forwardRef(() => NovoStepper)), ɵɵdirectiveInject(forwardRef(() => NovoStepHeader))); };
NovoStepStatus.ɵcmp = ɵɵdefineComponent({ type: NovoStepStatus, selectors: [["novo-step-status"]], hostAttrs: [1, "novo-step-status"], inputs: { state: "state" }, decls: 5, vars: 4, consts: [[1, "novo-stepper-status-line", 3, "ngClass"], [1, "novo-stepper-status-icon", 3, "ngSwitch"], ["size", "small", "color", "positive", 4, "ngSwitchCase"], ["size", "small", "color", "positive", 4, "ngSwitchDefault"], ["size", "small", "color", "positive"]], template: function NovoStepStatus_Template(rf, ctx) { if (rf & 1) {
        ɵɵelement(0, "div", 0);
        ɵɵelementStart(1, "div", 1);
        ɵɵtemplate(2, NovoStepStatus_novo_icon_2_Template, 2, 0, "novo-icon", 2);
        ɵɵtemplate(3, NovoStepStatus_novo_icon_3_Template, 2, 0, "novo-icon", 2);
        ɵɵtemplate(4, NovoStepStatus_novo_icon_4_Template, 2, 0, "novo-icon", 3);
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵproperty("ngClass", ctx.state);
        ɵɵadvance(1);
        ɵɵproperty("ngSwitch", ctx.state);
        ɵɵadvance(1);
        ɵɵproperty("ngSwitchCase", "edit");
        ɵɵadvance(1);
        ɵɵproperty("ngSwitchCase", "done");
    } }, directives: [NgClass, NgSwitch, NgSwitchCase, NgSwitchDefault, NovoIconComponent], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoStepStatus, [{
        type: Component,
        args: [{
                selector: 'novo-step-status',
                templateUrl: 'step-status.component.html',
                // encapsulation: ViewEncapsulation.None,
                preserveWhitespaces: false,
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: {
                    class: 'novo-step-status',
                },
            }]
    }], function () { return [{ type: NovoStepper, decorators: [{
                type: Inject,
                args: [forwardRef(() => NovoStepper)]
            }] }, { type: NovoStepHeader, decorators: [{
                type: Inject,
                args: [forwardRef(() => NovoStepHeader)]
            }] }]; }, { state: [{
            type: Input
        }] }); })();

class NovoStepperModule {
}
NovoStepperModule.ɵmod = ɵɵdefineNgModule({ type: NovoStepperModule });
NovoStepperModule.ɵinj = ɵɵdefineInjector({ factory: function NovoStepperModule_Factory(t) { return new (t || NovoStepperModule)(); }, imports: [[CommonModule, PortalModule, NovoButtonModule, CdkStepperModule, NovoIconModule, A11yModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoStepperModule, { declarations: [NovoHorizontalStepper, NovoVerticalStepper, NovoStep, NovoStepLabel, NovoStepper, NovoStepHeader, NovoStepStatus], imports: [CommonModule, PortalModule, NovoButtonModule, CdkStepperModule, NovoIconModule, A11yModule], exports: [NovoHorizontalStepper, NovoVerticalStepper, NovoStep, NovoStepLabel, NovoStepper, NovoStepHeader, NovoStepStatus] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoStepperModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, PortalModule, NovoButtonModule, CdkStepperModule, NovoIconModule, A11yModule],
                exports: [NovoHorizontalStepper, NovoVerticalStepper, NovoStep, NovoStepLabel, NovoStepper, NovoStepHeader, NovoStepStatus],
                declarations: [NovoHorizontalStepper, NovoVerticalStepper, NovoStep, NovoStepLabel, NovoStepper, NovoStepHeader, NovoStepStatus],
            }]
    }], null, null); })();
ɵɵsetComponentScope(NovoStepHeader, [NgClass, NgComponentOutlet, NgForOf, NgIf, NgTemplateOutlet, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase, CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective, NovoButtonElement, CdkStep, CdkStepper, CdkStepHeader, CdkStepLabel, CdkStepperNext, CdkStepperPrevious, NovoIconComponent, CdkAriaLive, CdkTrapFocus, CdkMonitorFocus, NovoHorizontalStepper, NovoVerticalStepper, NovoStep, NovoStepLabel, NovoStepper, NovoStepHeader, NovoStepStatus], [AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, TitleCasePipe, CurrencyPipe, DatePipe, I18nPluralPipe, I18nSelectPipe, KeyValuePipe]);

const _c0$1l = ["tabbedGroupPickerVirtualScrollViewport"];
function NovoTabbedGroupPickerElement_i_7_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 16);
} }
function NovoTabbedGroupPickerElement_i_9_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "i", 17);
    ɵɵlistener("click", function NovoTabbedGroupPickerElement_i_9_Template_i_click_0_listener($event) { ɵɵrestoreView(_r8); const ctx_r7 = ɵɵnextContext(); return ctx_r7.onClearFilter($event); });
    ɵɵelementEnd();
} }
function NovoTabbedGroupPickerElement_novo_tab_14_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-tab", 18);
    ɵɵlistener("activeChange", function NovoTabbedGroupPickerElement_novo_tab_14_Template_novo_tab_activeChange_0_listener() { ɵɵrestoreView(_r11); const tab_r9 = ctx.$implicit; const ctx_r10 = ɵɵnextContext(); return ctx_r10.changeTab(tab_r9); });
    ɵɵelementStart(1, "span");
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelement(3, "i", 19);
    ɵɵelementEnd();
} if (rf & 2) {
    const tab_r9 = ctx.$implicit;
    ɵɵattribute("data-automation-id", tab_r9.typeName);
    ɵɵadvance(2);
    ɵɵtextInterpolate2("", tab_r9.typeLabel, " (", tab_r9.data.length, ")");
} }
function NovoTabbedGroupPickerElement_button_15_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 20);
    ɵɵlistener("click", function NovoTabbedGroupPickerElement_button_15_Template_button_click_0_listener($event) { ɵɵrestoreView(_r13); const ctx_r12 = ɵɵnextContext(); return ctx_r12.deselectEverything($event); });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r3.labelService.clear);
} }
function NovoTabbedGroupPickerElement_div_17_novo_list_item_4_Template(rf, ctx) { if (rf & 1) {
    const _r17 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-list-item", 25);
    ɵɵlistener("click", function NovoTabbedGroupPickerElement_div_17_novo_list_item_4_Template_novo_list_item_click_0_listener() { ɵɵrestoreView(_r17); const quickSelect_r15 = ctx.$implicit; const ctx_r16 = ɵɵnextContext(2); quickSelect_r15.selected = !quickSelect_r15.selected; return ctx_r16.onItemToggled(quickSelect_r15); });
    ɵɵelementStart(1, "item-content");
    ɵɵelementStart(2, "novo-checkbox", 26);
    ɵɵlistener("ngModelChange", function NovoTabbedGroupPickerElement_div_17_novo_list_item_4_Template_novo_checkbox_ngModelChange_2_listener($event) { ɵɵrestoreView(_r17); const quickSelect_r15 = ctx.$implicit; return quickSelect_r15.selected = $event; })("ngModelChange", function NovoTabbedGroupPickerElement_div_17_novo_list_item_4_Template_novo_checkbox_ngModelChange_2_listener() { ɵɵrestoreView(_r17); const quickSelect_r15 = ctx.$implicit; const ctx_r19 = ɵɵnextContext(2); return ctx_r19.onItemToggled(quickSelect_r15); });
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const quickSelect_r15 = ctx.$implicit;
    ɵɵattribute("data-automation-id", quickSelect_r15.label);
    ɵɵadvance(2);
    ɵɵproperty("label", quickSelect_r15.label)("name", "selected")("ngModel", quickSelect_r15.selected);
} }
function NovoTabbedGroupPickerElement_div_17_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 21);
    ɵɵelementStart(1, "div", 22);
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementStart(3, "novo-list", 23);
    ɵɵtemplate(4, NovoTabbedGroupPickerElement_div_17_novo_list_item_4_Template, 3, 4, "novo-list-item", 24);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r4.quickSelectConfig.label);
    ɵɵadvance(2);
    ɵɵproperty("ngForOf", ctx_r4.quickSelectConfig.items);
} }
function NovoTabbedGroupPickerElement_novo_list_19_novo_list_item_3_Template(rf, ctx) { if (rf & 1) {
    const _r24 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-list-item", 31);
    ɵɵlistener("click", function NovoTabbedGroupPickerElement_novo_list_19_novo_list_item_3_Template_novo_list_item_click_0_listener() { ɵɵrestoreView(_r24); const item_r22 = ctx.$implicit; const ctx_r23 = ɵɵnextContext(2); item_r22.selected = !item_r22.selected; return ctx_r23.onItemToggled(item_r22); });
    ɵɵelementStart(1, "item-content");
    ɵɵelementStart(2, "novo-checkbox", 32);
    ɵɵlistener("ngModelChange", function NovoTabbedGroupPickerElement_novo_list_19_novo_list_item_3_Template_novo_checkbox_ngModelChange_2_listener($event) { ɵɵrestoreView(_r24); const item_r22 = ctx.$implicit; return item_r22.selected = $event; })("ngModelChange", function NovoTabbedGroupPickerElement_novo_list_19_novo_list_item_3_Template_novo_checkbox_ngModelChange_2_listener() { ɵɵrestoreView(_r24); const item_r22 = ctx.$implicit; const ctx_r26 = ɵɵnextContext(2); return ctx_r26.onItemToggled(item_r22); });
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const item_r22 = ctx.$implicit;
    const ctx_r21 = ɵɵnextContext(2);
    ɵɵattribute("data-automation-id", item_r22[ctx_r21.displayTab.labelField]);
    ɵɵadvance(2);
    ɵɵproperty("label", item_r22[ctx_r21.displayTab.labelField])("name", "selected")("indeterminate", item_r22.indeterminate)("ngModel", item_r22.selected);
} }
function NovoTabbedGroupPickerElement_novo_list_19_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-list", 27);
    ɵɵelementStart(1, "cdk-virtual-scroll-viewport", 28, 29);
    ɵɵtemplate(3, NovoTabbedGroupPickerElement_novo_list_19_novo_list_item_3_Template, 3, 5, "novo-list-item", 30);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("itemSize", ctx_r5.virtualScrollItemSize)("maxBufferPx", ctx_r5.maxBufferPx)("minBufferPx", ctx_r5.minBufferPx);
    ɵɵadvance(2);
    ɵɵproperty("cdkVirtualForOf", ctx_r5.displayTab.data);
} }
function NovoTabbedGroupPickerElement_div_20_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 33);
    ɵɵelement(1, "i");
    ɵɵelementStart(2, "div", 34);
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementStart(4, "div", 35);
    ɵɵtext(5);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵclassMap(ctx_r6.displayTab.icon || "bhi-search");
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r6.labelService.tabbedGroupPickerEmpty);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r6.labelService.tabbedGroupClearSuggestion(ctx_r6.displayTab.typeLabel));
} }
class NovoTabbedGroupPickerElement {
    constructor(labelService, ref) {
        this.labelService = labelService;
        this.ref = ref;
        this.selectionChange = new EventEmitter();
        this.displayTabIndex = 0;
        this.filterText = new BehaviorSubject('');
        this.loading = true;
        this.showClearAll = false;
        // Initial height based on 13 px font rendered in chrome. Actual height retrieved onDropdownToggled.
        this.scrollViewportHeight = 351;
        this.virtualScrollItemSize = 39;
        this.getSelectedState = (childArray) => {
            const numberOfSelectedItems = childArray.filter(({ selected }) => selected).length;
            if (!numberOfSelectedItems) {
                return undefined;
            }
            return numberOfSelectedItems === childArray.length ? 'selected' : 'indeterminate';
        };
        this.filter = (searchTerm) => {
            this.displayTabs.forEach((displayTab, i) => (displayTab.data = this.tabs[i].data.filter((item) => item[displayTab.labelField].toLowerCase().includes(searchTerm.toLowerCase()))));
            this.ref.markForCheck();
        };
    }
    get displayTab() {
        return this.displayTabs[this.displayTabIndex];
    }
    set displayTab(tab) {
        this.displayTabIndex = this.tabs.map(({ typeName }) => typeName).indexOf(tab.typeName);
    }
    get minBufferPx() {
        return this.scrollViewportHeight; // render at least 2x the number of items visible (viewport + min buffer)
    }
    get maxBufferPx() {
        return 2 * this.scrollViewportHeight; // render at most 3x the number of items visible (viewport + max buffer)
    }
    ngOnInit() {
        this.setupDisplayData();
        this.createChildrenReferences();
        this.initializeDescendantSelection();
        this.updateParentsAndQuickSelect();
        this.updateClearAll();
        this.loading = false;
        this.filterTextSubscription = this.filterText.pipe(debounceTime(300)).subscribe({
            next: this.filter,
        });
    }
    ngOnDestroy() {
        if (this.filterTextSubscription) {
            this.filterTextSubscription.unsubscribe();
        }
    }
    changeTab(tab) {
        this.displayTab = tab;
        if (this.scrollableInstance) {
            this.scrollableInstance.scrollTo({ behavior: 'auto', top: 0 });
        }
    }
    getPixelHeight(element) {
        return Number(getComputedStyle(element, '').height.match(/(\d+(\.\d+)?)px$/)[1]);
    }
    setupDisplayData() {
        // shallow copy here so that reassigning displayTabs[i].data doesn't mutate tabs[i].data
        // but both data values point to the same items
        this.displayTabs = this.tabs.map((tab) => (Object.assign({}, tab)));
        this.displayTab = this.tabs[0];
    }
    // Replace each parent's child object with a reference to the child to avoid
    // a child lookup for selected status; linking references allows M x N
    // time complexity instead of M x N^2
    createChildrenReferences() {
        this.tabs.forEach((tab) => {
            // would rather filter but TypeScript still wants a type narrowing here
            if ('childTypeName' in tab) {
                const childTab = this.tabs.find(({ typeName }) => typeName === tab.childTypeName);
                const compareFunction = this.makeCompareFunction(childTab.valueField);
                const warnFunction = this.makeWarningFunction(tab.typeName, childTab.typeName, childTab.valueField);
                const sortedChildren = childTab.data.slice().sort(compareFunction);
                tab.data
                    .filter(({ children }) => children && children.length)
                    .forEach((parent) => this.replaceChildrenWithReferences(parent, sortedChildren, compareFunction, warnFunction));
            }
        });
        if (this.quickSelectConfig) {
            this.quickSelectConfig.items
                .filter((parent) => 'all' in parent)
                .forEach((parent) => {
                parent.children = this.tabs.find(({ typeName }) => parent.childTypeName === typeName).data;
            });
            this.quickSelectConfig.items
                .filter((parent) => !('all' in parent))
                .forEach((parent) => {
                const childTab = this.tabs.find(({ typeName }) => typeName === parent.childTypeName);
                const compareFunction = this.makeCompareFunction(childTab.valueField);
                const warnFunction = this.makeWarningFunction(parent.label, childTab.typeName, childTab.valueField);
                const sortedChildren = childTab.data.slice().sort(compareFunction);
                this.replaceChildrenWithReferences(parent, sortedChildren, compareFunction, warnFunction);
            });
        }
    }
    makeCompareFunction(key) {
        return (a, b) => {
            const aValue = (a && a[key]) || a;
            const bValue = (b && b[key]) || b;
            if (aValue < bValue) {
                return -1;
            }
            else if (aValue > bValue) {
                return 1;
            }
            else if (aValue === bValue) {
                return 0;
            }
            else {
                return undefined;
            }
        };
    }
    replaceChildrenWithReferences(parent, sortedData, compareFunction, warnFunction) {
        parent.children = parent.children
            .map((child) => binarySearch(child, sortedData, compareFunction) || warnFunction(child))
            .filter(Boolean); // since map can return undefined, remove undefined elements
    }
    makeWarningFunction(parentLabel, childLabel, childValueField) {
        return (child) => {
            const childValue = child[childValueField] || child;
            console.warn(`No ${childLabel} found with value ${childValue} for parent ${parentLabel}`);
        };
    }
    onDropdownToggle(event) {
        if (event) {
            this.scrollViewportHeight = this.getPixelHeight(this.scrollableInstance.getElementRef().nativeElement);
            this.virtualScrollItemSize = this.getPixelHeight(this.scrollableInstance.getElementRef().nativeElement.querySelector('novo-list-item'));
        }
    }
    onItemToggled(item) {
        if (Array.isArray(item.children)) {
            this.updateDescendants(item.selected, item.children);
        }
        this.updateParentsAndQuickSelect();
        this.updateClearAll(item.selected);
        this.emitSelectedValues();
        this.ref.markForCheck();
    }
    initializeDescendantSelection() {
        this.tabs.forEach((tab) => {
            if ('childTypeName' in tab && tab.data && tab.data.length) {
                tab.data.forEach((parent) => {
                    if (parent.selected && parent.children && parent.children.length) {
                        parent.children.forEach((child) => {
                            child.selected = true;
                        });
                    }
                });
            }
        });
    }
    updateDescendants(parentIsSelected, children) {
        children.forEach((item) => {
            parentIsSelected ? (item.selected = true) : delete item.selected;
            if (Array.isArray(item.children)) {
                this.updateDescendants(item.selected, item.children);
            }
        });
    }
    updateClearAll(itemWasJustSelected) {
        this.showClearAll = itemWasJustSelected
            ? true
            : this.tabs.some((tab) => {
                if (tab.childTypeName) {
                    return tab.data.some(({ selected, indeterminate }) => selected || indeterminate);
                }
                else {
                    return tab.data.some(({ selected }) => selected);
                }
            });
    }
    updateParentsAndQuickSelect() {
        // mutate here to avoid dereferencing the objects in displayTabs
        this.tabs
            .filter((tab) => 'childTypeName' in tab && !!tab.childTypeName)
            .forEach((tab) => {
            const parents = tab.data.filter(({ children }) => children && children.length);
            parents.forEach((parent) => {
                ['indeterminate', 'selected'].forEach((selectedStateOption) => delete parent[selectedStateOption]);
                const selectedState = this.getSelectedState(parent.children);
                if (selectedState) {
                    parent[selectedState] = true;
                }
            });
        });
        if (this.quickSelectConfig) {
            this.quickSelectConfig.items.forEach((quickSelect) => {
                delete quickSelect.selected;
                const selectedState = this.getSelectedState(quickSelect.children);
                if (selectedState) {
                    quickSelect[selectedState] = true;
                }
            });
        }
    }
    emitSelectedValues() {
        const selectedValues = this.tabs.map((tab) => (Object.assign(Object.assign({}, tab), { data: tab.data.filter(({ selected }) => selected) })));
        this.selectionChange.emit(selectedValues);
    }
    deselectEverything(event) {
        Helpers.swallowEvent(event);
        this.showClearAll = false;
        if (this.quickSelectConfig) {
            this.quickSelectConfig.items.forEach((quickSelect) => {
                delete quickSelect.selected;
            });
        }
        this.tabs.forEach((tab) => {
            if (tab.childTypeName) {
                tab.data.forEach((item) => {
                    delete item.selected;
                    delete item.indeterminate;
                    item.children.forEach((child) => delete child.selected);
                });
            }
            else {
                tab.data.forEach((item) => delete item.selected);
            }
        });
        this.emitSelectedValues();
        this.ref.markForCheck();
    }
    onClearFilter(event) {
        Helpers.swallowEvent(event);
        this.filterText.next('');
    }
    onFilter(event) {
        this.filterText.next(event.target.value);
    }
}
NovoTabbedGroupPickerElement.ɵfac = function NovoTabbedGroupPickerElement_Factory(t) { return new (t || NovoTabbedGroupPickerElement)(ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(ChangeDetectorRef)); };
NovoTabbedGroupPickerElement.ɵcmp = ɵɵdefineComponent({ type: NovoTabbedGroupPickerElement, selectors: [["novo-tabbed-group-picker"]], viewQuery: function NovoTabbedGroupPickerElement_Query(rf, ctx) { if (rf & 1) {
        ɵɵviewQuery(_c0$1l, true);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.scrollableInstance = _t.first);
    } }, inputs: { buttonConfig: "buttonConfig", tabs: "tabs", quickSelectConfig: "quickSelectConfig" }, outputs: { selectionChange: "selectionChange" }, decls: 22, vars: 24, consts: [[3, "toggled"], [1, "tabbed-group-picker-button", 3, "theme", "side", "icon", "loading"], [1, "tabbed-group-picker-button-label"], ["data-automation-id", "tabbed-group-picker-search", 1, "tabbed-group-picker-search"], ["type", "text", 3, "placeholder", "value", "input"], ["class", "bhi-search", 4, "ngIf"], ["class", "bhi-times", 3, "click", 4, "ngIf"], [1, "tabbed-group-picker-column-container"], [1, "tabbed-group-picker-column", "left"], ["theme", "white", "direction", "vertical"], [3, "activeChange", 4, "ngFor", "ngForOf"], ["class", "clear-all-button", "theme", "dialogue", "icon", "times", "side", "right", "color", "grapefruit", 3, "click", 4, "ngIf"], [1, "tabbed-group-picker-column", "right"], ["class", "quick-select", 4, "ngIf"], ["direction", "vertical", 4, "ngIf"], ["class", "tabbed-group-picker-empty-item", 4, "ngIf"], [1, "bhi-search"], [1, "bhi-times", 3, "click"], [3, "activeChange"], [1, "bhi-next"], ["theme", "dialogue", "icon", "times", "side", "right", "color", "grapefruit", 1, "clear-all-button", 3, "click"], [1, "quick-select"], [1, "quick-select-label"], ["direction", "vertical", 1, "quick-select-list"], ["class", "quick-select-item", 3, "click", 4, "ngFor", "ngForOf"], [1, "quick-select-item", 3, "click"], [3, "label", "name", "ngModel", "ngModelChange"], ["direction", "vertical"], [3, "itemSize", "maxBufferPx", "minBufferPx"], ["tabbedGroupPickerVirtualScrollViewport", ""], [3, "click", 4, "cdkVirtualFor", "cdkVirtualForOf"], [3, "click"], [3, "label", "name", "indeterminate", "ngModel", "ngModelChange"], [1, "tabbed-group-picker-empty-item"], [1, "empty-item-main-message"], [1, "empty-item-sub-message"]], template: function NovoTabbedGroupPickerElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "novo-dropdown", 0);
        ɵɵlistener("toggled", function NovoTabbedGroupPickerElement_Template_novo_dropdown_toggled_0_listener($event) { return ctx.onDropdownToggle($event); });
        ɵɵelementStart(1, "button", 1);
        ɵɵelementStart(2, "div", 2);
        ɵɵtext(3);
        ɵɵelementEnd();
        ɵɵelementEnd();
        ɵɵelementStart(4, "div", 3);
        ɵɵelementStart(5, "input", 4);
        ɵɵlistener("input", function NovoTabbedGroupPickerElement_Template_input_input_5_listener($event) { return ctx.onFilter($event); });
        ɵɵpipe(6, "async");
        ɵɵelementEnd();
        ɵɵtemplate(7, NovoTabbedGroupPickerElement_i_7_Template, 1, 0, "i", 5);
        ɵɵpipe(8, "async");
        ɵɵtemplate(9, NovoTabbedGroupPickerElement_i_9_Template, 1, 0, "i", 6);
        ɵɵpipe(10, "async");
        ɵɵelementEnd();
        ɵɵelementStart(11, "div", 7);
        ɵɵelementStart(12, "div", 8);
        ɵɵelementStart(13, "novo-nav", 9);
        ɵɵtemplate(14, NovoTabbedGroupPickerElement_novo_tab_14_Template, 4, 3, "novo-tab", 10);
        ɵɵelementEnd();
        ɵɵtemplate(15, NovoTabbedGroupPickerElement_button_15_Template, 2, 1, "button", 11);
        ɵɵelementEnd();
        ɵɵelementStart(16, "div", 12);
        ɵɵtemplate(17, NovoTabbedGroupPickerElement_div_17_Template, 5, 2, "div", 13);
        ɵɵpipe(18, "async");
        ɵɵtemplate(19, NovoTabbedGroupPickerElement_novo_list_19_Template, 4, 4, "novo-list", 14);
        ɵɵtemplate(20, NovoTabbedGroupPickerElement_div_20_Template, 6, 5, "div", 15);
        ɵɵpipe(21, "async");
        ɵɵelementEnd();
        ɵɵelementEnd();
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵadvance(1);
        ɵɵproperty("theme", ctx.buttonConfig.theme)("side", ctx.buttonConfig.side)("icon", ctx.buttonConfig.icon)("loading", ctx.loading);
        ɵɵadvance(2);
        ɵɵtextInterpolate(ctx.buttonConfig.label);
        ɵɵadvance(2);
        ɵɵproperty("placeholder", ctx.labelService.search)("value", ɵɵpipeBind1(6, 14, ctx.filterText));
        ɵɵadvance(2);
        ɵɵproperty("ngIf", !ɵɵpipeBind1(8, 16, ctx.filterText));
        ɵɵadvance(2);
        ɵɵproperty("ngIf", ɵɵpipeBind1(10, 18, ctx.filterText));
        ɵɵadvance(5);
        ɵɵproperty("ngForOf", ctx.displayTabs);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.showClearAll);
        ɵɵadvance(2);
        ɵɵproperty("ngIf", ctx.quickSelectConfig && !ɵɵpipeBind1(18, 20, ctx.filterText));
        ɵɵadvance(2);
        ɵɵproperty("ngIf", ctx.displayTab.data.length);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", !ctx.displayTab.data.length && ɵɵpipeBind1(21, 22, ctx.filterText));
    } }, directives: [NovoDropdownElement, NovoButtonElement, NgIf, NovoNavElement, NgForOf, NovoTabElement, NovoListElement, NovoListItemElement, NovoItemContentElement, NovoCheckboxElement, NgControlStatus, NgModel, CdkVirtualScrollViewport, CdkFixedSizeVirtualScroll, CdkVirtualForOf], pipes: [AsyncPipe], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTabbedGroupPickerElement, [{
        type: Component,
        args: [{
                selector: 'novo-tabbed-group-picker',
                templateUrl: './TabbedGroupPicker.html',
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: NovoLabelService }, { type: ChangeDetectorRef }]; }, { scrollableInstance: [{
            type: ViewChild,
            args: ['tabbedGroupPickerVirtualScrollViewport']
        }], buttonConfig: [{
            type: Input
        }], tabs: [{
            type: Input
        }], quickSelectConfig: [{
            type: Input
        }], selectionChange: [{
            type: Output
        }] }); })();

// NG2
class NovoTabbedGroupPickerModule {
}
NovoTabbedGroupPickerModule.ɵmod = ɵɵdefineNgModule({ type: NovoTabbedGroupPickerModule });
NovoTabbedGroupPickerModule.ɵinj = ɵɵdefineInjector({ factory: function NovoTabbedGroupPickerModule_Factory(t) { return new (t || NovoTabbedGroupPickerModule)(); }, providers: [NovoLabelService], imports: [[
            CommonModule,
            FormsModule,
            ScrollingModule,
            NovoTabModule,
            NovoListModule,
            NovoFormExtrasModule,
            NovoButtonModule,
            NovoDropdownModule,
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoTabbedGroupPickerModule, { declarations: [NovoTabbedGroupPickerElement], imports: [CommonModule,
        FormsModule,
        ScrollingModule,
        NovoTabModule,
        NovoListModule,
        NovoFormExtrasModule,
        NovoButtonModule,
        NovoDropdownModule], exports: [NovoTabbedGroupPickerElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTabbedGroupPickerModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    ScrollingModule,
                    NovoTabModule,
                    NovoListModule,
                    NovoFormExtrasModule,
                    NovoButtonModule,
                    NovoDropdownModule,
                ],
                providers: [NovoLabelService],
                declarations: [NovoTabbedGroupPickerElement],
                exports: [NovoTabbedGroupPickerElement],
            }]
    }], null, null); })();

class BaseRenderer {
    constructor() {
        this.data = {};
        this.value = '';
        this.meta = {};
    }
}

// NG2
class DateCell extends BaseRenderer {
    constructor(labels) {
        super();
        this.labels = labels;
    }
    getFormattedDate() {
        return this.labels.formatDate(this.value);
    }
}
DateCell.ɵfac = function DateCell_Factory(t) { return new (t || DateCell)(ɵɵdirectiveInject(NovoLabelService)); };
DateCell.ɵcmp = ɵɵdefineComponent({ type: DateCell, selectors: [["date-cell"]], inputs: { value: "value" }, features: [ɵɵInheritDefinitionFeature], decls: 3, vars: 1, consts: [[1, "date-cell"]], template: function DateCell_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "div", 0);
        ɵɵelementStart(1, "label");
        ɵɵtext(2);
        ɵɵelementEnd();
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵadvance(2);
        ɵɵtextInterpolate(ctx.getFormattedDate());
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(DateCell, [{
        type: Component,
        args: [{
                selector: 'date-cell',
                template: `
    <div class="date-cell">
      <label>{{ getFormattedDate() }}</label>
    </div>
  `,
            }]
    }], function () { return [{ type: NovoLabelService }]; }, { value: [{
            type: Input
        }] }); })();

// NG2
function NovoDropdownCell_ng_container_5_dropdown_item_header_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "dropdown-item-header");
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const config_r1 = ɵɵnextContext().$implicit;
    ɵɵadvance(1);
    ɵɵtextInterpolate(config_r1.category);
} }
function NovoDropdownCell_ng_container_5_item_2_i_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 8);
} }
function NovoDropdownCell_ng_container_5_item_2_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "item", 6);
    ɵɵlistener("action", function NovoDropdownCell_ng_container_5_item_2_Template_item_action_0_listener() { ɵɵrestoreView(_r11); const option_r7 = ctx.$implicit; const config_r1 = ɵɵnextContext().$implicit; const ctx_r9 = ɵɵnextContext(); return ctx_r9.onClick(config_r1, option_r7, option_r7.value); });
    ɵɵelementStart(1, "span");
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵtemplate(3, NovoDropdownCell_ng_container_5_item_2_i_3_Template, 1, 0, "i", 7);
    ɵɵelementEnd();
} if (rf & 2) {
    const option_r7 = ctx.$implicit;
    const ctx_r4 = ɵɵnextContext(2);
    ɵɵclassProp("active", (option_r7 || option_r7.value) === ctx_r4.value);
    ɵɵadvance(1);
    ɵɵattribute("data-automation-id", option_r7.label || option_r7);
    ɵɵadvance(1);
    ɵɵtextInterpolate(option_r7.label || option_r7);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", (option_r7 || option_r7.value) === ctx_r4.value);
} }
function NovoDropdownCell_ng_container_5_hr_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "hr");
} }
function NovoDropdownCell_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, NovoDropdownCell_ng_container_5_dropdown_item_header_1_Template, 2, 1, "dropdown-item-header", 4);
    ɵɵtemplate(2, NovoDropdownCell_ng_container_5_item_2_Template, 4, 5, "item", 5);
    ɵɵtemplate(3, NovoDropdownCell_ng_container_5_hr_3_Template, 1, 0, "hr", 4);
    ɵɵelementContainerEnd();
} if (rf & 2) {
    const config_r1 = ctx.$implicit;
    const i_r2 = ctx.index;
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngIf", config_r1.category);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", config_r1.options);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", i_r2 < ctx_r0.meta.dropdownCellConfig.length - 1);
} }
class NovoDropdownCell extends BaseRenderer {
    ngOnInit() {
        // Check for and fix bad config
        if (!this.meta.dropdownCellConfig) {
            throw new Error('Missing "dropdownCellConfig" on the column setup');
        }
    }
    onClick(config, option, value) {
        const callback = option.callback || config.callback;
        callback(this.data, value || option);
    }
}
NovoDropdownCell.ɵfac = function NovoDropdownCell_Factory(t) { return ɵNovoDropdownCell_BaseFactory(t || NovoDropdownCell); };
NovoDropdownCell.ɵcmp = ɵɵdefineComponent({ type: NovoDropdownCell, selectors: [["novo-dropdown-cell"]], inputs: { meta: "meta", value: "value" }, features: [ɵɵInheritDefinitionFeature], decls: 6, vars: 2, consts: [["parentScrollSelector", ".table-container", "containerClass", "novo-table-dropdown-cell"], ["type", "button", "theme", "secondary", "icon", "collapse", "inverse", ""], ["data-automation-id", "novo-dropdown-cell-value"], [4, "ngFor", "ngForOf"], [4, "ngIf"], [3, "active", "action", 4, "ngFor", "ngForOf"], [3, "action"], ["class", "bhi-check", 4, "ngIf"], [1, "bhi-check"]], template: function NovoDropdownCell_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "novo-dropdown", 0);
        ɵɵelementStart(1, "button", 1);
        ɵɵelementStart(2, "span", 2);
        ɵɵtext(3);
        ɵɵelementEnd();
        ɵɵelementEnd();
        ɵɵelementStart(4, "list");
        ɵɵtemplate(5, NovoDropdownCell_ng_container_5_Template, 4, 3, "ng-container", 3);
        ɵɵelementEnd();
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵadvance(3);
        ɵɵtextInterpolate(ctx.value);
        ɵɵadvance(2);
        ɵɵproperty("ngForOf", ctx.meta.dropdownCellConfig);
    } }, directives: [NovoDropdownElement, NovoButtonElement, NovoDropdownListElement, NgForOf, NgIf, NovoDropDownItemHeaderElement, NovoItemElement], encapsulation: 2 });
const ɵNovoDropdownCell_BaseFactory = /*@__PURE__*/ ɵɵgetInheritedFactory(NovoDropdownCell);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDropdownCell, [{
        type: Component,
        args: [{
                selector: 'novo-dropdown-cell',
                template: `
    <novo-dropdown parentScrollSelector=".table-container" containerClass="novo-table-dropdown-cell">
      <button type="button" theme="secondary" icon="collapse" inverse>
        <span data-automation-id="novo-dropdown-cell-value">{{ value }}</span>
      </button>
      <list>
        <ng-container *ngFor="let config of meta.dropdownCellConfig; let i = index">
          <dropdown-item-header *ngIf="config.category">{{ config.category }}</dropdown-item-header>
          <item
            *ngFor="let option of config.options"
            (action)="onClick(config, option, option.value)"
            [class.active]="(option || option.value) === value"
          >
            <span [attr.data-automation-id]="option.label || option">{{ option.label || option }}</span>
            <i *ngIf="(option || option.value) === value" class="bhi-check"></i>
          </item>
          <hr *ngIf="i < meta.dropdownCellConfig.length - 1" />
        </ng-container>
      </list>
    </novo-dropdown>
  `,
            }]
    }], null, { meta: [{
            type: Input
        }], value: [{
            type: Input
        }] }); })();

// NG2
class NovoTableKeepFilterFocus {
    constructor(element) {
        this.element = element;
    }
    ngAfterViewInit() {
        this.element.nativeElement.focus();
    }
}
NovoTableKeepFilterFocus.ɵfac = function NovoTableKeepFilterFocus_Factory(t) { return new (t || NovoTableKeepFilterFocus)(ɵɵdirectiveInject(ElementRef)); };
NovoTableKeepFilterFocus.ɵdir = ɵɵdefineDirective({ type: NovoTableKeepFilterFocus, selectors: [["", "keepFilterFocused", ""]] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTableKeepFilterFocus, [{
        type: Directive,
        args: [{
                selector: '[keepFilterFocused]',
            }]
    }], function () { return [{ type: ElementRef }]; }, null); })();

// NG2
function Pagination_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵɵgetCurrentView();
    ɵɵelementContainerStart(0);
    ɵɵelementStart(1, "h5", 6);
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementStart(3, "novo-select", 7);
    ɵɵlistener("ngModelChange", function Pagination_ng_container_0_Template_novo_select_ngModelChange_3_listener($event) { ɵɵrestoreView(_r3); const ctx_r2 = ɵɵnextContext(); return ctx_r2.itemsPerPage = $event; })("onSelect", function Pagination_ng_container_0_Template_novo_select_onSelect_3_listener($event) { ɵɵrestoreView(_r3); const ctx_r4 = ɵɵnextContext(); return ctx_r4.onPageSizeChanged($event); });
    ɵɵelementEnd();
    ɵɵelement(4, "span", 8);
    ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r0.label);
    ɵɵadvance(1);
    ɵɵproperty("options", ctx_r0.rowOptions)("placeholder", ctx_r0.labels.select)("ngModel", ctx_r0.itemsPerPage);
} }
const _c0$1m = function (a0) { return { active: a0 }; };
function Pagination_li_4_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "li", 2);
    ɵɵlistener("click", function Pagination_li_4_Template_li_click_0_listener($event) { ɵɵrestoreView(_r7); const p_r5 = ctx.$implicit; const ctx_r6 = ɵɵnextContext(); return ctx_r6.selectPage(p_r5.num, $event); });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const p_r5 = ctx.$implicit;
    const ctx_r1 = ɵɵnextContext();
    ɵɵclassProp("disabled", ctx_r1.disablePageSelection);
    ɵɵproperty("ngClass", ɵɵpureFunction1(4, _c0$1m, p_r5.active));
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", p_r5.text, " ");
} }
const _c1$C = function (a0) { return { disabled: a0 }; };
class Pagination {
    constructor(labels) {
        this.labels = labels;
        this.itemsPerPage = 10;
        this.pageChange = new EventEmitter();
        this.itemsPerPageChange = new EventEmitter();
        this.onPageChange = new EventEmitter();
        this.maxPagesDisplayed = 5;
    }
    get disablePageSelection() {
        return this.pageSelectDisabled;
    }
    set disablePageSelection(val) {
        this.pageSelectDisabled = coerceBooleanProperty(val);
    }
    ngOnInit() {
        this.label = this.label || this.labels.itemsPerPage;
        this.rowOptions = this.rowOptions || this.getDefaultRowOptions();
    }
    ngOnChanges(changes) {
        this.page = this.page || 1;
        this.totalPages = this.calculateTotalPages();
        this.pages = this.getPages(this.page, this.totalPages);
    }
    getDefaultRowOptions() {
        return [
            { value: 10, label: '10' },
            { value: 25, label: '25' },
            { value: 50, label: '50' },
            { value: 100, label: '100' },
        ];
    }
    onPageSizeChanged(event) {
        this.page = 1;
        this.itemsPerPage = event.selected;
        this.totalPages = this.calculateTotalPages();
        this.pages = this.getPages(this.page, this.totalPages);
        this.pageChange.emit(this.page);
        this.itemsPerPageChange.emit(this.itemsPerPage);
        this.onPageChange.emit({
            page: this.page,
            itemsPerPage: this.itemsPerPage,
        });
    }
    selectPage(page, event) {
        if (event) {
            event.preventDefault();
        }
        this.page = page;
        this.pages = this.getPages(this.page, this.totalPages);
        this.pageChange.emit(this.page);
        this.onPageChange.emit({
            page: this.page,
            itemsPerPage: this.itemsPerPage,
        });
    }
    noPrevious() {
        return this.page === 1;
    }
    noNext() {
        return this.page === this.totalPages;
    }
    // Create page object used in template
    makePage(num, text, isActive) {
        return { num, text, active: isActive };
    }
    getPages(currentPage, totalPages) {
        const pages = [];
        // Default page limits
        let startPage = 1;
        let endPage = totalPages;
        const isMaxSized = this.maxPagesDisplayed < totalPages;
        // recompute if maxPagesDisplayed
        if (isMaxSized) {
            // Current page is displayed in the middle of the visible ones
            startPage = Math.max(currentPage - Math.floor(this.maxPagesDisplayed / 2), 1);
            endPage = startPage + this.maxPagesDisplayed - 1;
            // Adjust if limit is exceeded
            if (endPage > totalPages) {
                endPage = totalPages;
                startPage = endPage - this.maxPagesDisplayed + 1;
            }
        }
        // Add page number links
        for (let num = startPage; num <= endPage; num++) {
            const page = this.makePage(num, num.toString(), num === currentPage);
            pages.push(page);
        }
        return pages;
    }
    calculateTotalPages() {
        const totalPages = this.itemsPerPage < 1 ? 1 : Math.ceil(this.totalItems / this.itemsPerPage);
        return Math.max(totalPages || 0, 1);
    }
}
Pagination.ɵfac = function Pagination_Factory(t) { return new (t || Pagination)(ɵɵdirectiveInject(NovoLabelService)); };
Pagination.ɵcmp = ɵɵdefineComponent({ type: Pagination, selectors: [["novo-pagination"]], inputs: { page: "page", totalItems: "totalItems", itemsPerPage: "itemsPerPage", rowOptions: "rowOptions", label: "label", disablePageSelection: "disablePageSelection" }, outputs: { pageChange: "pageChange", itemsPerPageChange: "itemsPerPageChange", onPageChange: "onPageChange" }, features: [ɵɵNgOnChangesFeature], decls: 7, vars: 8, consts: [[4, "ngIf"], ["data-automation-id", "pager", 1, "pager"], [1, "page", 3, "ngClass", "click"], ["data-automation-id", "pager-previous", 1, "bhi-previous"], ["class", "page", 3, "ngClass", "disabled", "click", 4, "ngFor", "ngForOf"], ["data-automation-id", "pager-next", 1, "bhi-next"], [1, "rows"], ["data-automation-id", "pager-select", 3, "options", "placeholder", "ngModel", "ngModelChange", "onSelect"], [1, "spacer"]], template: function Pagination_Template(rf, ctx) { if (rf & 1) {
        ɵɵtemplate(0, Pagination_ng_container_0_Template, 5, 4, "ng-container", 0);
        ɵɵelementStart(1, "ul", 1);
        ɵɵelementStart(2, "li", 2);
        ɵɵlistener("click", function Pagination_Template_li_click_2_listener() { return ctx.selectPage(ctx.page - 1); });
        ɵɵelement(3, "i", 3);
        ɵɵelementEnd();
        ɵɵtemplate(4, Pagination_li_4_Template, 2, 6, "li", 4);
        ɵɵelementStart(5, "li", 2);
        ɵɵlistener("click", function Pagination_Template_li_click_5_listener() { return ctx.selectPage(ctx.page + 1); });
        ɵɵelement(6, "i", 5);
        ɵɵelementEnd();
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵproperty("ngIf", ctx.rowOptions.length > 1);
        ɵɵadvance(2);
        ɵɵproperty("ngClass", ɵɵpureFunction1(4, _c1$C, ctx.noPrevious()));
        ɵɵadvance(2);
        ɵɵproperty("ngForOf", ctx.pages);
        ɵɵadvance(1);
        ɵɵproperty("ngClass", ɵɵpureFunction1(6, _c1$C, ctx.noNext()));
    } }, directives: [NgIf, NgClass, NgForOf, NovoSelectElement, NgControlStatus, NgModel], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(Pagination, [{
        type: Component,
        args: [{
                selector: 'novo-pagination',
                template: `
    <ng-container *ngIf="rowOptions.length > 1">
      <h5 class="rows">{{ label }}</h5>
      <novo-select
        [options]="rowOptions"
        [placeholder]="labels.select"
        [(ngModel)]="itemsPerPage"
        (onSelect)="onPageSizeChanged($event)"
        data-automation-id="pager-select"
      ></novo-select>
      <span class="spacer"></span>
    </ng-container>
    <ul class="pager" data-automation-id="pager">
      <li class="page" (click)="selectPage(page - 1)" [ngClass]="{ disabled: noPrevious() }">
        <i class="bhi-previous" data-automation-id="pager-previous"></i>
      </li>
      <li
        class="page"
        [ngClass]="{ active: p.active }"
        [class.disabled]="disablePageSelection"
        *ngFor="let p of pages"
        (click)="selectPage(p.num, $event)"
      >
        {{ p.text }}
      </li>
      <li class="page" (click)="selectPage(page + 1)" [ngClass]="{ disabled: noNext() }">
        <i class="bhi-next" data-automation-id="pager-next"></i>
      </li>
    </ul>
  `,
            }]
    }], function () { return [{ type: NovoLabelService }]; }, { page: [{
            type: Input
        }], totalItems: [{
            type: Input
        }], itemsPerPage: [{
            type: Input
        }], rowOptions: [{
            type: Input
        }], label: [{
            type: Input
        }], disablePageSelection: [{
            type: Input
        }], pageChange: [{
            type: Output
        }], itemsPerPageChange: [{
            type: Output
        }], onPageChange: [{
            type: Output
        }] }); })();

// NG2
function PercentageCell_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 1);
    ɵɵtext(1);
    ɵɵpipe(2, "percent");
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ɵɵpipeBind2(2, 1, ctx_r0.value, "1.0-2"));
} }
class PercentageCell extends BaseRenderer {
}
PercentageCell.ɵfac = function PercentageCell_Factory(t) { return ɵPercentageCell_BaseFactory(t || PercentageCell); };
PercentageCell.ɵcmp = ɵɵdefineComponent({ type: PercentageCell, selectors: [["percentage-cell"]], features: [ɵɵInheritDefinitionFeature], decls: 1, vars: 1, consts: [["class", "percentage", 4, "ngIf"], [1, "percentage"]], template: function PercentageCell_Template(rf, ctx) { if (rf & 1) {
        ɵɵtemplate(0, PercentageCell_div_0_Template, 3, 4, "div", 0);
    } if (rf & 2) {
        ɵɵproperty("ngIf", ctx.value || ctx.value === 0);
    } }, directives: [NgIf], pipes: [PercentPipe], encapsulation: 2 });
const ɵPercentageCell_BaseFactory = /*@__PURE__*/ ɵɵgetInheritedFactory(PercentageCell);
/*@__PURE__*/ (function () { ɵsetClassMetadata(PercentageCell, [{
        type: Component,
        args: [{
                selector: 'percentage-cell',
                template: ` <div class="percentage" *ngIf="value || value === 0">{{ value | percent: '1.0-2' }}</div> `,
            }]
    }], null, null); })();

// NG2
const _c0$1n = ["container"];
class RowDetails {
    constructor(element, componentUtils) {
        this.element = element;
        this.componentUtils = componentUtils;
        this.value = '';
    }
    ngOnInit() {
        if (this.renderer) {
            if (this.renderer.prototype instanceof BaseRenderer) {
                const componentRef = this.componentUtils.append(this.renderer, this.container);
                componentRef.instance.data = this.data;
            }
            else {
                this.value = this.renderer(this.data);
            }
        }
        else {
            // this.value = this.row[this.column.name];
        }
    }
}
RowDetails.ɵfac = function RowDetails_Factory(t) { return new (t || RowDetails)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ComponentUtils)); };
RowDetails.ɵcmp = ɵɵdefineComponent({ type: RowDetails, selectors: [["novo-row-details"]], viewQuery: function RowDetails_Query(rf, ctx) { if (rf & 1) {
        ɵɵstaticViewQuery(_c0$1n, true, ViewContainerRef);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.container = _t.first);
    } }, inputs: { data: "data", renderer: "renderer" }, decls: 4, vars: 1, consts: [["container", ""]], template: function RowDetails_Template(rf, ctx) { if (rf & 1) {
        ɵɵelement(0, "span", null, 0);
        ɵɵelementStart(2, "span");
        ɵɵtext(3);
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵadvance(3);
        ɵɵtextInterpolate(ctx.value);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(RowDetails, [{
        type: Component,
        args: [{
                selector: 'novo-row-details',
                template: ` <span #container></span> <span>{{ value }}</span> `,
            }]
    }], function () { return [{ type: ElementRef }, { type: ComponentUtils }]; }, { container: [{
            type: ViewChild,
            args: ['container', { read: ViewContainerRef, static: true }]
        }], data: [{
            type: Input
        }], renderer: [{
            type: Input
        }] }); })();

// NG2
const _c0$1o = ["*"];
class NovoTableActionsElement {
}
NovoTableActionsElement.ɵfac = function NovoTableActionsElement_Factory(t) { return new (t || NovoTableActionsElement)(); };
NovoTableActionsElement.ɵcmp = ɵɵdefineComponent({ type: NovoTableActionsElement, selectors: [["novo-table-actions"]], ngContentSelectors: _c0$1o, decls: 1, vars: 0, template: function NovoTableActionsElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTableActionsElement, [{
        type: Component,
        args: [{
                selector: 'novo-table-actions',
                template: '<ng-content></ng-content>',
            }]
    }], null, null); })();

// NG2
const _c0$1p = ["container"];
function TableCell_date_cell_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "date-cell", 5);
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵproperty("value", ctx_r1.value);
} }
function TableCell_a_4_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "a", 6);
    ɵɵlistener("click", function TableCell_a_4_Template_a_click_0_listener($event) { ɵɵrestoreView(_r5); const ctx_r4 = ɵɵnextContext(); return ctx_r4.onClick($event); });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r2.value);
} }
function TableCell_span_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r3.value);
} }
class TableCell {
    constructor(element, componentUtils) {
        this.element = element;
        this.componentUtils = componentUtils;
        this.value = '';
        this.element = element;
        this.componentUtils = componentUtils;
    }
    ngOnInit() {
        this.column._type = this.column.type || 'text';
        if (this.column.renderer) {
            if (this.column.renderer.prototype instanceof BaseRenderer) {
                this.column._type = 'custom';
                const componentRef = this.componentUtils.append(this.column.renderer, this.container);
                componentRef.instance.meta = this.column;
                componentRef.instance.data = this.row;
                componentRef.instance.value = this.form && this.hasEditor ? this.form.value[this.column.name] : this.row[this.column.name];
                // TODO - save ref to this and update in the valueChanges below!!
            }
            else {
                // TODO - wtf to do here?
                this.value = this.column.renderer(this.row);
            }
        }
        else {
            this.value = this.form && this.hasEditor ? this.form.value[this.column.name] : this.row[this.column.name];
        }
        if (this.form && this.hasEditor) {
            this.valueChangeSubscription = this.form.valueChanges.pipe(debounceTime(300), distinctUntilChanged()).subscribe((value) => {
                this.value = value[this.column.name];
            });
        }
    }
    ngOnDestroy() {
        if (this.valueChangeSubscription) {
            this.valueChangeSubscription.unsubscribe();
        }
    }
    onClick(event) {
        if (event) {
            event.preventDefault();
            event.stopPropagation();
        }
        if (this.column.onClick) {
            this.column.onClick(this.row);
        }
    }
}
TableCell.ɵfac = function TableCell_Factory(t) { return new (t || TableCell)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ComponentUtils)); };
TableCell.ɵcmp = ɵɵdefineComponent({ type: TableCell, selectors: [["novo-table-cell"]], viewQuery: function TableCell_Query(rf, ctx) { if (rf & 1) {
        ɵɵstaticViewQuery(_c0$1p, true, ViewContainerRef);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.container = _t.first);
    } }, inputs: { column: "column", row: "row", form: "form", hasEditor: "hasEditor" }, decls: 6, vars: 3, consts: [[3, "ngSwitch"], ["container", ""], [3, "value", 4, "ngSwitchCase"], [3, "click", 4, "ngSwitchCase"], [4, "ngSwitchDefault"], [3, "value"], [3, "click"]], template: function TableCell_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "div", 0);
        ɵɵelement(1, "span", null, 1);
        ɵɵtemplate(3, TableCell_date_cell_3_Template, 1, 1, "date-cell", 2);
        ɵɵtemplate(4, TableCell_a_4_Template, 2, 1, "a", 3);
        ɵɵtemplate(5, TableCell_span_5_Template, 2, 1, "span", 4);
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵproperty("ngSwitch", ctx.column._type);
        ɵɵadvance(3);
        ɵɵproperty("ngSwitchCase", "date");
        ɵɵadvance(1);
        ɵɵproperty("ngSwitchCase", "link");
    } }, directives: [NgSwitch, NgSwitchCase, NgSwitchDefault, DateCell], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(TableCell, [{
        type: Component,
        args: [{
                selector: 'novo-table-cell',
                template: `
    <div [ngSwitch]="column._type">
      <span #container></span>
      <date-cell *ngSwitchCase="'date'" [value]="value"></date-cell>
      <a *ngSwitchCase="'link'" (click)="onClick($event)">{{ value }}</a> <span *ngSwitchDefault>{{ value }}</span>
    </div>
  `,
            }]
    }], function () { return [{ type: ElementRef }, { type: ComponentUtils }]; }, { container: [{
            type: ViewChild,
            args: ['container', { read: ViewContainerRef, static: true }]
        }], column: [{
            type: Input
        }], row: [{
            type: Input
        }], form: [{
            type: Input
        }], hasEditor: [{
            type: Input
        }] }); })();

// NG2
class TableFilter {
    constructor(element, renderer) {
        this.element = element;
        this.renderer = renderer;
        this.onFilterChange = new EventEmitter();
        this.element = element;
        this.renderer = renderer;
    }
    ngOnInit() {
        this.ngOnChanges();
    }
    ngOnChanges(changes) {
        let label = '';
        if (this.config.freetextFilter) {
            label = this.config.freetextFilter;
        }
        else if (this.config.filter) {
            label = this.config.filter;
        }
        this.renderer.setProperty(this.element, 'value', label);
    }
    onChangeFilter(event) {
        clearTimeout(this.filterThrottle);
        if ("Enter" /* Enter */ === event.key) {
            this.config.filter = event.target.value;
            this.onFilterChange.emit({ filtering: this.config });
        }
        else {
            this.filterThrottle = setTimeout(() => {
                this.config.filter = event.target.value;
                this.onFilterChange.emit({ filtering: this.config });
            }, 300);
        }
    }
    onClick(event) {
        Helpers.swallowEvent(event);
    }
}
TableFilter.ɵfac = function TableFilter_Factory(t) { return new (t || TableFilter)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2)); };
TableFilter.ɵdir = ɵɵdefineDirective({ type: TableFilter, selectors: [["", "novoTableFilter", ""]], hostBindings: function TableFilter_HostBindings(rf, ctx) { if (rf & 1) {
        ɵɵlistener("keydown", function TableFilter_keydown_HostBindingHandler($event) { return ctx.onChangeFilter($event); })("click", function TableFilter_click_HostBindingHandler($event) { return ctx.onClick($event); });
    } }, inputs: { config: ["novoTableFilter", "config"] }, outputs: { onFilterChange: "onFilterChange" }, features: [ɵɵNgOnChangesFeature] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(TableFilter, [{
        type: Directive,
        args: [{
                selector: '[novoTableFilter]',
            }]
    }], function () { return [{ type: ElementRef }, { type: Renderer2 }]; }, { config: [{
            type: Input,
            args: ['novoTableFilter']
        }], onFilterChange: [{
            type: Output
        }], onChangeFilter: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }], onClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }] }); })();

// NG2
const _c0$1q = ["*"];
class NovoTableFooterElement {
}
NovoTableFooterElement.ɵfac = function NovoTableFooterElement_Factory(t) { return new (t || NovoTableFooterElement)(); };
NovoTableFooterElement.ɵcmp = ɵɵdefineComponent({ type: NovoTableFooterElement, selectors: [["novo-table-footer"]], ngContentSelectors: _c0$1q, decls: 1, vars: 0, template: function NovoTableFooterElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTableFooterElement, [{
        type: Component,
        args: [{
                selector: 'novo-table-footer',
                template: '<ng-content></ng-content>',
            }]
    }], null, null); })();

// NG2
const _c0$1r = ["*"];
class NovoTableHeaderElement {
}
NovoTableHeaderElement.ɵfac = function NovoTableHeaderElement_Factory(t) { return new (t || NovoTableHeaderElement)(); };
NovoTableHeaderElement.ɵcmp = ɵɵdefineComponent({ type: NovoTableHeaderElement, selectors: [["novo-table-header"]], ngContentSelectors: _c0$1r, decls: 1, vars: 0, template: function NovoTableHeaderElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef();
        ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTableHeaderElement, [{
        type: Component,
        args: [{
                selector: 'novo-table-header',
                template: '<ng-content></ng-content>',
            }]
    }], null, null); })();

// NG2
class ThOrderable {
    constructor(element) {
        this.element = element;
        this.onOrderChange = new EventEmitter();
        this.element = element;
    }
    get index() {
        let index = null;
        if (this.element.nativeElement && this.element.nativeElement.parentNode) {
            const children = Array.prototype.slice.call(this.element.nativeElement.parentNode.children);
            index = children.indexOf(this.element.nativeElement);
        }
        return index;
    }
    ngOnInit() {
        if (this.column.ordering) {
            this.element.nativeElement.setAttribute('draggable', true);
            this.table = this.findTable(this.element.nativeElement);
        }
    }
    onDragStart(event) {
        if (this.column.ordering) {
            this.element.nativeElement.classList.add('dragging');
            event.dataTransfer.effectAllowed = 'move';
            event.dataTransfer.setData('text/plain', JSON.stringify(this.column));
            this.clone = this.table.cloneNode(true);
            this.clone.style.position = 'absolute';
            this.clone.style.left = '100%';
            this.clone.style.width = '150px';
            this.deleteColumns(this.clone);
            document.body.appendChild(this.clone);
            event.dataTransfer.setDragImage(this.clone, 75, 30);
        }
    }
    deleteColumns(table) {
        // TODO: `table` should be immutable and this method should return the modified data to its caller
        if (table.rows.length > 0) {
            const allRows = table.rows;
            for (let i = 0; i < allRows.length; i++) {
                if (i > 10) {
                    table.deleteRow(-1);
                }
                else {
                    const cellLength = allRows[i].cells.length;
                    for (let c = 0; c < cellLength; c++) {
                        if (c < this.index) {
                            allRows[i].deleteCell(0);
                        }
                        else if (c > this.index) {
                            allRows[i].deleteCell(-1);
                        }
                    }
                }
            }
        }
    }
    findTable(start) {
        let htmlElementNode = start;
        while (htmlElementNode) {
            htmlElementNode = htmlElementNode.parentNode;
            if (htmlElementNode && htmlElementNode.tagName.toLowerCase() === 'table') {
                return htmlElementNode;
            }
        }
        return undefined;
    }
    onDrag(event) {
        Helpers.swallowEvent(event);
        return false;
    }
    onDragEnd(event) {
        Helpers.swallowEvent(event);
        this.element.nativeElement.classList.remove('over');
        this.element.nativeElement.classList.remove('dragging');
        document.body.removeChild(this.clone);
        return false;
    }
    onDrop(event) {
        Helpers.swallowEvent(event);
        this.element.nativeElement.classList.remove('over');
        const data = JSON.parse(event.dataTransfer.getData('text/plain'));
        this.onOrderChange.emit({
            first: data,
            second: this.column,
        });
        return false;
    }
    onDragOver(event) {
        Helpers.swallowEvent(event);
        event.dataTransfer.dropEffect = 'move';
        return false;
    }
    onDragEnter(event) {
        this.element.nativeElement.classList.add('over');
        this.target = event.target;
    }
    onDragLeave(event) {
        this.element.nativeElement.classList.remove('over');
    }
}
ThOrderable.ɵfac = function ThOrderable_Factory(t) { return new (t || ThOrderable)(ɵɵdirectiveInject(ElementRef)); };
ThOrderable.ɵdir = ɵɵdefineDirective({ type: ThOrderable, selectors: [["", "novoThOrderable", ""]], hostBindings: function ThOrderable_HostBindings(rf, ctx) { if (rf & 1) {
        ɵɵlistener("dragstart", function ThOrderable_dragstart_HostBindingHandler($event) { return ctx.onDragStart($event); })("dragover", function ThOrderable_dragover_HostBindingHandler($event) { return ctx.onDragOver($event); })("dragenter", function ThOrderable_dragenter_HostBindingHandler($event) { return ctx.onDragEnter($event); })("dragleave", function ThOrderable_dragleave_HostBindingHandler($event) { return ctx.onDragLeave($event); })("dragend", function ThOrderable_dragend_HostBindingHandler($event) { return ctx.onDragEnd($event); })("drop", function ThOrderable_drop_HostBindingHandler($event) { return ctx.onDrop($event); });
    } }, inputs: { column: ["novoThOrderable", "column"] }, outputs: { onOrderChange: "onOrderChange" } });
/*@__PURE__*/ (function () { ɵsetClassMetadata(ThOrderable, [{
        type: Directive,
        args: [{
                selector: '[novoThOrderable]',
                host: {
                    '(dragstart)': 'onDragStart($event)',
                    '(dragover)': 'onDragOver($event)',
                    '(dragenter)': 'onDragEnter($event)',
                    '(dragleave)': 'onDragLeave($event)',
                    '(dragend)': 'onDragEnd($event)',
                    '(drop)': 'onDrop($event)',
                },
            }]
    }], function () { return [{ type: ElementRef }]; }, { column: [{
            type: Input,
            args: ['novoThOrderable']
        }], onOrderChange: [{
            type: Output
        }] }); })();

// NG2
class ThSortable {
    constructor() {
        this.onSortChange = new EventEmitter();
    }
    onToggleSort(event) {
        if (event) {
            event.preventDefault();
        }
        if (this.config && this.column && this.config.sorting !== false && this.column.sorting !== false) {
            switch (this.column.sort) {
                case 'asc':
                    this.column.sort = 'desc';
                    break;
                default:
                    this.column.sort = 'asc';
                    break;
            }
            this.onSortChange.emit(this.column);
        }
    }
}
ThSortable.ɵfac = function ThSortable_Factory(t) { return new (t || ThSortable)(); };
ThSortable.ɵdir = ɵɵdefineDirective({ type: ThSortable, selectors: [["", "novoThSortable", ""]], hostBindings: function ThSortable_HostBindings(rf, ctx) { if (rf & 1) {
        ɵɵlistener("click", function ThSortable_click_HostBindingHandler($event) { return ctx.onToggleSort($event); });
    } }, inputs: { config: ["novoThSortable", "config"], column: "column" }, outputs: { onSortChange: "onSortChange" } });
/*@__PURE__*/ (function () { ɵsetClassMetadata(ThSortable, [{
        type: Directive,
        args: [{
                selector: '[novoThSortable]',
                host: {
                    '(click)': 'onToggleSort($event)',
                },
            }]
    }], null, { config: [{
            type: Input,
            args: ['novoThSortable']
        }], column: [{
            type: Input
        }], onSortChange: [{
            type: Output
        }] }); })();

// NG2
class NovoTableExtrasModule {
}
NovoTableExtrasModule.ɵmod = ɵɵdefineNgModule({ type: NovoTableExtrasModule });
NovoTableExtrasModule.ɵinj = ɵɵdefineInjector({ factory: function NovoTableExtrasModule_Factory(t) { return new (t || NovoTableExtrasModule)(); }, imports: [[CommonModule, FormsModule, NovoSelectModule, NovoDropdownModule, NovoButtonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoTableExtrasModule, { declarations: [NovoTableHeaderElement,
        NovoTableFooterElement,
        NovoTableActionsElement,
        NovoTableKeepFilterFocus,
        Pagination,
        RowDetails,
        TableCell,
        TableFilter,
        ThOrderable,
        ThSortable,
        DateCell,
        PercentageCell,
        NovoDropdownCell], imports: [CommonModule, FormsModule, NovoSelectModule, NovoDropdownModule, NovoButtonModule], exports: [NovoTableHeaderElement,
        NovoTableFooterElement,
        NovoTableActionsElement,
        NovoTableKeepFilterFocus,
        Pagination,
        RowDetails,
        TableCell,
        TableFilter,
        ThOrderable,
        ThSortable,
        DateCell,
        PercentageCell,
        NovoDropdownCell] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTableExtrasModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, FormsModule, NovoSelectModule, NovoDropdownModule, NovoButtonModule],
                declarations: [
                    NovoTableHeaderElement,
                    NovoTableFooterElement,
                    NovoTableActionsElement,
                    NovoTableKeepFilterFocus,
                    Pagination,
                    RowDetails,
                    TableCell,
                    TableFilter,
                    ThOrderable,
                    ThSortable,
                    DateCell,
                    PercentageCell,
                    NovoDropdownCell,
                ],
                exports: [
                    NovoTableHeaderElement,
                    NovoTableFooterElement,
                    NovoTableActionsElement,
                    NovoTableKeepFilterFocus,
                    Pagination,
                    RowDetails,
                    TableCell,
                    TableFilter,
                    ThOrderable,
                    ThSortable,
                    DateCell,
                    PercentageCell,
                    NovoDropdownCell,
                ],
            }]
    }], null, null); })();

// NG2
const _c0$1s = ["filterInput"];
function NovoTableElement_header_0_novo_pagination_3_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-pagination", 6);
    ɵɵlistener("pageChange", function NovoTableElement_header_0_novo_pagination_3_Template_novo_pagination_pageChange_0_listener($event) { ɵɵrestoreView(_r6); const ctx_r5 = ɵɵnextContext(2); return ctx_r5.dataProvider.page = $event; })("itemsPerPageChange", function NovoTableElement_header_0_novo_pagination_3_Template_novo_pagination_itemsPerPageChange_0_listener($event) { ɵɵrestoreView(_r6); const ctx_r7 = ɵɵnextContext(2); return ctx_r7.dataProvider.pageSize = $event; })("onPageChange", function NovoTableElement_header_0_novo_pagination_3_Template_novo_pagination_onPageChange_0_listener($event) { ɵɵrestoreView(_r6); const ctx_r8 = ɵɵnextContext(2); return ctx_r8.onPageChange($event); });
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵɵnextContext(2);
    ɵɵproperty("rowOptions", ctx_r4.config.paging.rowOptions)("disablePageSelection", ctx_r4.config.paging.disablePageSelection)("page", ctx_r4.dataProvider.page)("itemsPerPage", ctx_r4.dataProvider.pageSize)("totalItems", ctx_r4.dataProvider.total);
} }
function NovoTableElement_header_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "header");
    ɵɵprojection(1);
    ɵɵelementStart(2, "div", 4);
    ɵɵtemplate(3, NovoTableElement_header_0_novo_pagination_3_Template, 1, 5, "novo-pagination", 5);
    ɵɵprojection(4, 1);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(3);
    ɵɵproperty("ngIf", ctx_r0.config.paging && !(ctx_r0.dataProvider.isEmpty() && !ctx_r0.dataProvider.isFiltered()));
} }
function NovoTableElement_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 7);
    ɵɵelement(1, "novo-loading");
    ɵɵelementEnd();
} }
function NovoTableElement_novo_toast_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-toast", 8);
} if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵproperty("theme", ctx_r2.toast == null ? null : ctx_r2.toast.theme)("icon", ctx_r2.toast == null ? null : ctx_r2.toast.icon)("message", ctx_r2.toast == null ? null : ctx_r2.toast.message);
} }
function NovoTableElement_div_3_thead_3_th_2_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r22 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 23);
    ɵɵlistener("click", function NovoTableElement_div_3_thead_3_th_2_button_1_Template_button_click_0_listener() { ɵɵrestoreView(_r22); const ctx_r21 = ɵɵnextContext(4); return ctx_r21.expandAllOnPage(ctx_r21.config.expandAll); });
    ɵɵelementEnd();
} }
function NovoTableElement_div_3_thead_3_th_2_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r24 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 24);
    ɵɵlistener("click", function NovoTableElement_div_3_thead_3_th_2_button_2_Template_button_click_0_listener() { ɵɵrestoreView(_r24); const ctx_r23 = ɵɵnextContext(4); return ctx_r23.expandAllOnPage(ctx_r23.config.expandAll); });
    ɵɵelementEnd();
} }
function NovoTableElement_div_3_thead_3_th_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "th", 20);
    ɵɵtemplate(1, NovoTableElement_div_3_thead_3_th_2_button_1_Template, 1, 0, "button", 21);
    ɵɵtemplate(2, NovoTableElement_div_3_thead_3_th_2_button_2_Template, 1, 0, "button", 22);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r16 = ɵɵnextContext(3);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !ctx_r16.config.expandAll);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r16.config.expandAll);
} }
function NovoTableElement_div_3_thead_3_th_3_Template(rf, ctx) { if (rf & 1) {
    const _r26 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "th", 25);
    ɵɵelementStart(1, "novo-checkbox", 26);
    ɵɵlistener("ngModelChange", function NovoTableElement_div_3_thead_3_th_3_Template_novo_checkbox_ngModelChange_1_listener($event) { ɵɵrestoreView(_r26); const ctx_r25 = ɵɵnextContext(3); return ctx_r25.master = $event; })("ngModelChange", function NovoTableElement_div_3_thead_3_th_3_Template_novo_checkbox_ngModelChange_1_listener($event) { ɵɵrestoreView(_r26); const ctx_r27 = ɵɵnextContext(3); return ctx_r27.selectPage($event); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r17 = ɵɵnextContext(3);
    ɵɵadvance(1);
    ɵɵproperty("ngModel", ctx_r17.master)("indeterminate", ctx_r17.pageSelected.length > 0 && ctx_r17.pageSelected.length < ctx_r17.pagedData.length)("tooltip", ctx_r17.master ? ctx_r17.labels.deselectAll : ctx_r17.labels.selectAllOnPage);
} }
function NovoTableElement_div_3_thead_3_th_4_div_1_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 33);
    ɵɵelement(1, "i", 34);
    ɵɵelement(2, "i", 35);
    ɵɵelementEnd();
} if (rf & 2) {
    const column_r28 = ɵɵnextContext(2).$implicit;
    const ctx_r30 = ɵɵnextContext(3);
    ɵɵproperty("tooltip", ctx_r30.labels.sort)("ngClass", column_r28.sort || "");
} }
function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_2_button_5_Template(rf, ctx) { if (rf & 1) {
    const _r41 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 43);
    ɵɵlistener("click", function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_2_button_5_Template_button_click_0_listener() { ɵɵrestoreView(_r41); const column_r28 = ɵɵnextContext(4).$implicit; const ctx_r39 = ɵɵnextContext(3); return ctx_r39.onFilterClear(column_r28); });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r36 = ɵɵnextContext(7);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r36.labels.clear, " ");
} }
function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_2_input_6_Template(rf, ctx) { if (rf & 1) {
    const _r44 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "input", 44, 45);
    ɵɵlistener("onFilterChange", function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_2_input_6_Template_input_onFilterChange_0_listener($event) { ɵɵrestoreView(_r44); const ctx_r43 = ɵɵnextContext(7); return ctx_r43.onFilterKeywords($event); })("ngModelChange", function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_2_input_6_Template_input_ngModelChange_0_listener($event) { ɵɵrestoreView(_r44); const column_r28 = ɵɵnextContext(4).$implicit; return column_r28.freetextFilter = $event; });
    ɵɵelementEnd();
} if (rf & 2) {
    const column_r28 = ɵɵnextContext(4).$implicit;
    ɵɵproperty("novoTableFilter", column_r28)("ngModel", column_r28.freetextFilter);
    ɵɵattribute("id", column_r28.name + "-input");
} }
function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_2_item_7_i_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 48);
} }
const _c1$D = function (a0) { return { active: a0 }; };
function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_2_item_7_Template(rf, ctx) { if (rf & 1) {
    const _r52 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "item", 46);
    ɵɵlistener("click", function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_2_item_7_Template_item_click_0_listener() { ɵɵrestoreView(_r52); const option_r48 = ctx.$implicit; const column_r28 = ɵɵnextContext(4).$implicit; const ctx_r50 = ɵɵnextContext(3); return ctx_r50.onFilterClick(column_r28, option_r48); });
    ɵɵelementStart(1, "span");
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵtemplate(3, NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_2_item_7_i_3_Template, 1, 0, "i", 47);
    ɵɵelementEnd();
} if (rf & 2) {
    const option_r48 = ctx.$implicit;
    const column_r28 = ɵɵnextContext(4).$implicit;
    const ctx_r38 = ɵɵnextContext(3);
    ɵɵproperty("ngClass", ɵɵpureFunction1(4, _c1$D, ctx_r38.isFilterActive(column_r28, option_r48)));
    ɵɵattribute("data-automation-id", ctx_r38.getOptionDataAutomationId(option_r48));
    ɵɵadvance(2);
    ɵɵtextInterpolate((option_r48 == null ? null : option_r48.label) || option_r48);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r38.isFilterActive(column_r28, option_r48));
} }
function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "list");
    ɵɵelementStart(1, "item", 38);
    ɵɵelementStart(2, "div", 39);
    ɵɵelementStart(3, "span");
    ɵɵtext(4);
    ɵɵelementEnd();
    ɵɵtemplate(5, NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_2_button_5_Template, 2, 1, "button", 40);
    ɵɵelementEnd();
    ɵɵtemplate(6, NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_2_input_6_Template, 2, 3, "input", 41);
    ɵɵelementEnd();
    ɵɵtemplate(7, NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_2_item_7_Template, 4, 6, "item", 42);
    ɵɵelementEnd();
} if (rf & 2) {
    const column_r28 = ɵɵnextContext(3).$implicit;
    const ctx_r33 = ɵɵnextContext(3);
    ɵɵadvance(4);
    ɵɵtextInterpolate(ctx_r33.labels.filters);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", column_r28.filter || column_r28.filter === false);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !!column_r28.allowCustomTextOption);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", column_r28.options);
} }
function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_3_button_5_Template(rf, ctx) { if (rf & 1) {
    const _r59 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 43);
    ɵɵlistener("click", function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_3_button_5_Template_button_click_0_listener() { ɵɵrestoreView(_r59); const column_r28 = ɵɵnextContext(4).$implicit; const ctx_r57 = ɵɵnextContext(3); return ctx_r57.onFilterClear(column_r28); });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r55 = ɵɵnextContext(7);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r55.labels.clear, " ");
} }
function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_3_Template(rf, ctx) { if (rf & 1) {
    const _r61 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "list");
    ɵɵelementStart(1, "item", 38);
    ɵɵelementStart(2, "div", 39);
    ɵɵelementStart(3, "span");
    ɵɵtext(4);
    ɵɵelementEnd();
    ɵɵtemplate(5, NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_3_button_5_Template, 2, 1, "button", 40);
    ɵɵelementEnd();
    ɵɵelementStart(6, "input", 44, 45);
    ɵɵlistener("onFilterChange", function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_3_Template_input_onFilterChange_6_listener($event) { ɵɵrestoreView(_r61); const ctx_r60 = ɵɵnextContext(6); return ctx_r60.onFilterChange($event); })("ngModelChange", function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_3_Template_input_ngModelChange_6_listener($event) { ɵɵrestoreView(_r61); const column_r28 = ɵɵnextContext(3).$implicit; return column_r28.filter = $event; });
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const column_r28 = ɵɵnextContext(3).$implicit;
    const ctx_r34 = ɵɵnextContext(3);
    ɵɵadvance(4);
    ɵɵtextInterpolate(ctx_r34.labels.filters);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", column_r28.filter);
    ɵɵadvance(1);
    ɵɵproperty("novoTableFilter", column_r28)("ngModel", column_r28.filter);
    ɵɵattribute("id", column_r28.name + "-input");
} }
function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_4_item_1_button_4_Template(rf, ctx) { if (rf & 1) {
    const _r71 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 43);
    ɵɵlistener("click", function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_4_item_1_button_4_Template_button_click_0_listener() { ɵɵrestoreView(_r71); const column_r28 = ɵɵnextContext(5).$implicit; const ctx_r69 = ɵɵnextContext(3); return ctx_r69.onFilterClear(column_r28); });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r68 = ɵɵnextContext(8);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r68.labels.clear, " ");
} }
function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_4_item_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "item", 38);
    ɵɵelementStart(1, "div", 39);
    ɵɵelementStart(2, "span");
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵtemplate(4, NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_4_item_1_button_4_Template, 2, 1, "button", 40);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const column_r28 = ɵɵnextContext(4).$implicit;
    const ctx_r65 = ɵɵnextContext(3);
    ɵɵadvance(3);
    ɵɵtextInterpolate(ctx_r65.labels.filters);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", column_r28.filter);
} }
function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_4_item_2_i_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 48);
} }
function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_4_item_2_Template(rf, ctx) { if (rf & 1) {
    const _r77 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "item", 56);
    ɵɵlistener("click", function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_4_item_2_Template_item_click_0_listener() { ɵɵrestoreView(_r77); const option_r73 = ctx.$implicit; const column_r28 = ɵɵnextContext(4).$implicit; const ctx_r75 = ɵɵnextContext(3); return ctx_r75.onFilterClick(column_r28, option_r73); });
    ɵɵtext(1);
    ɵɵtemplate(2, NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_4_item_2_i_2_Template, 1, 0, "i", 47);
    ɵɵelementEnd();
} if (rf & 2) {
    const option_r73 = ctx.$implicit;
    const column_r28 = ɵɵnextContext(4).$implicit;
    const ctx_r66 = ɵɵnextContext(3);
    ɵɵproperty("ngClass", ɵɵpureFunction1(6, _c1$D, ctx_r66.isFilterActive(column_r28, option_r73)))("keepOpen", option_r73.range)("hidden", column_r28.calenderShow);
    ɵɵattribute("data-automation-id", (option_r73 == null ? null : option_r73.label) || option_r73);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", (option_r73 == null ? null : option_r73.label) || option_r73, " ");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r66.isFilterActive(column_r28, option_r73));
} }
function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_4_Template(rf, ctx) { if (rf & 1) {
    const _r81 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "list");
    ɵɵtemplate(1, NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_4_item_1_Template, 5, 2, "item", 49);
    ɵɵtemplate(2, NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_4_item_2_Template, 3, 8, "item", 50);
    ɵɵelementStart(3, "div", 51);
    ɵɵelementStart(4, "div", 52);
    ɵɵlistener("click", function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_4_Template_div_click_4_listener() { ɵɵrestoreView(_r81); const column_r28 = ɵɵnextContext(3).$implicit; return column_r28.calenderShow = false; });
    ɵɵelement(5, "i", 53);
    ɵɵtext(6);
    ɵɵelementEnd();
    ɵɵelementStart(7, "novo-date-picker", 54, 55);
    ɵɵlistener("onSelect", function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_4_Template_novo_date_picker_onSelect_7_listener($event) { ɵɵrestoreView(_r81); const column_r28 = ɵɵnextContext(3).$implicit; const ctx_r82 = ɵɵnextContext(3); return ctx_r82.onCalenderSelect(column_r28, $event); })("ngModelChange", function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_4_Template_novo_date_picker_ngModelChange_7_listener($event) { ɵɵrestoreView(_r81); const column_r28 = ɵɵnextContext(3).$implicit; return column_r28.filter = $event; });
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const column_r28 = ɵɵnextContext(3).$implicit;
    const ctx_r35 = ɵɵnextContext(3);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !column_r28.calenderShow);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", column_r28.options);
    ɵɵadvance(1);
    ɵɵproperty("hidden", !column_r28.calenderShow);
    ɵɵadvance(3);
    ɵɵtextInterpolate(ctx_r35.labels.backToPresetFilters);
    ɵɵadvance(1);
    ɵɵproperty("ngModel", column_r28.filter);
} }
function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_Template(rf, ctx) { if (rf & 1) {
    const _r88 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-dropdown", 36);
    ɵɵlistener("toggled", function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_Template_novo_dropdown_toggled_0_listener($event) { ɵɵrestoreView(_r88); const column_r28 = ɵɵnextContext(2).$implicit; const ctx_r87 = ɵɵnextContext(3); return ctx_r87.onDropdownToggled($event, column_r28.name); });
    ɵɵelementStart(1, "button", 37);
    ɵɵlistener("click", function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_Template_button_click_1_listener() { ɵɵrestoreView(_r88); const ctx_r90 = ɵɵnextContext(5); return ctx_r90.focusInput(); });
    ɵɵelementEnd();
    ɵɵtemplate(2, NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_2_Template, 8, 4, "list", 0);
    ɵɵtemplate(3, NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_3_Template, 8, 5, "list", 0);
    ɵɵtemplate(4, NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_4_Template, 9, 5, "list", 0);
    ɵɵelementEnd();
} if (rf & 2) {
    const column_r28 = ɵɵnextContext(2).$implicit;
    const ctx_r31 = ɵɵnextContext(3);
    ɵɵadvance(1);
    ɵɵclassProp("filtered", column_r28.filter || column_r28.filter === false);
    ɵɵproperty("tooltip", ctx_r31.labels.filters);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ((column_r28 == null ? null : column_r28.options == null ? null : column_r28.options.length) || (column_r28 == null ? null : column_r28.originalOptions == null ? null : column_r28.originalOptions.length)) && (column_r28 == null ? null : column_r28.type) !== "date" && ctx_r31.toggledDropdownMap[column_r28.name]);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !((column_r28 == null ? null : column_r28.options == null ? null : column_r28.options.length) || (column_r28 == null ? null : column_r28.originalOptions == null ? null : column_r28.originalOptions.length)) && ctx_r31.toggledDropdownMap[column_r28.name]);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", (column_r28 == null ? null : column_r28.options == null ? null : column_r28.options.length) && (column_r28 == null ? null : column_r28.type) === "date" && ctx_r31.toggledDropdownMap[column_r28.name]);
} }
function NovoTableElement_div_3_thead_3_th_4_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r93 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 29);
    ɵɵelementStart(1, "div", 30);
    ɵɵlistener("onSortChange", function NovoTableElement_div_3_thead_3_th_4_div_1_Template_div_onSortChange_1_listener($event) { ɵɵrestoreView(_r93); const ctx_r92 = ɵɵnextContext(4); return ctx_r92.onSortChange($event); });
    ɵɵelementStart(2, "label");
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵtemplate(4, NovoTableElement_div_3_thead_3_th_4_div_1_div_4_Template, 3, 2, "div", 31);
    ɵɵelementEnd();
    ɵɵtemplate(5, NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_Template, 5, 6, "novo-dropdown", 32);
    ɵɵelementEnd();
} if (rf & 2) {
    const column_r28 = ɵɵnextContext().$implicit;
    const ctx_r29 = ɵɵnextContext(3);
    ɵɵattribute("data-automation-id", column_r28.id || column_r28.name);
    ɵɵadvance(1);
    ɵɵproperty("ngClass", ctx_r29.config.sorting !== false && column_r28.sorting !== false ? "sortable" : "")("novoThSortable", ctx_r29.config)("column", column_r28);
    ɵɵadvance(2);
    ɵɵtextInterpolate(column_r28.title || column_r28.label);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r29.config.sorting !== false && column_r28.sorting !== false);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r29.config.filtering !== false && column_r28.filtering !== false);
} }
const _c2$g = function (a0, a1, a2) { return { "mass-action": a0, actions: a1, preview: a2 }; };
function NovoTableElement_div_3_thead_3_th_4_Template(rf, ctx) { if (rf & 1) {
    const _r96 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "th", 27);
    ɵɵlistener("onOrderChange", function NovoTableElement_div_3_thead_3_th_4_Template_th_onOrderChange_0_listener($event) { ɵɵrestoreView(_r96); const ctx_r95 = ɵɵnextContext(3); return ctx_r95.onOrderChange($event); });
    ɵɵtemplate(1, NovoTableElement_div_3_thead_3_th_4_div_1_Template, 6, 7, "div", 28);
    ɵɵelementEnd();
} if (rf & 2) {
    const column_r28 = ctx.$implicit;
    const ctx_r18 = ɵɵnextContext(3);
    ɵɵproperty("ngClass", ɵɵpureFunction3(4, _c2$g, (ctx_r18.config == null ? null : ctx_r18.config.rowSelectionStyle) === "checkbox", (column_r28 == null ? null : column_r28.actions == null ? null : column_r28.actions.items == null ? null : column_r28.actions.items.length) > 0, (column_r28 == null ? null : column_r28.name) === "preview"))("novoThOrderable", column_r28)("hidden", ctx_r18.isColumnHidden(column_r28));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !column_r28.hideHeader);
} }
function NovoTableElement_div_3_thead_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "thead");
    ɵɵelementStart(1, "tr", 16);
    ɵɵtemplate(2, NovoTableElement_div_3_thead_3_th_2_Template, 3, 2, "th", 17);
    ɵɵtemplate(3, NovoTableElement_div_3_thead_3_th_3_Template, 2, 3, "th", 18);
    ɵɵtemplate(4, NovoTableElement_div_3_thead_3_th_4_Template, 2, 8, "th", 19);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r9 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵproperty("ngIf", ctx_r9.config.hasDetails);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r9.config.rowSelectionStyle === "checkbox");
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r9.columns);
} }
function NovoTableElement_div_3_tbody_4_tr_1_Template(rf, ctx) { if (rf & 1) {
    const _r100 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "tr", 59);
    ɵɵelementStart(1, "td", 60);
    ɵɵtext(2);
    ɵɵelementStart(3, "a", 61);
    ɵɵlistener("click", function NovoTableElement_div_3_tbody_4_tr_1_Template_a_click_3_listener() { ɵɵrestoreView(_r100); const ctx_r99 = ɵɵnextContext(3); return ctx_r99.selectAll(true); });
    ɵɵtext(4);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r97 = ɵɵnextContext(3);
    ɵɵadvance(2);
    ɵɵtextInterpolate1(" ", ctx_r97.labels.selectedRecords(ctx_r97.selected.length), " ");
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r97.labels.totalRecords(ctx_r97.dataProvider.total));
} }
function NovoTableElement_div_3_tbody_4_ng_template_2_td_1_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r111 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 68);
    ɵɵlistener("click", function NovoTableElement_div_3_tbody_4_ng_template_2_td_1_button_1_Template_button_click_0_listener() { ɵɵrestoreView(_r111); const row_r101 = ɵɵnextContext(2).$implicit; return row_r101._expanded = !row_r101._expanded; });
    ɵɵelementEnd();
} }
function NovoTableElement_div_3_tbody_4_ng_template_2_td_1_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r114 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 69);
    ɵɵlistener("click", function NovoTableElement_div_3_tbody_4_ng_template_2_td_1_button_2_Template_button_click_0_listener() { ɵɵrestoreView(_r114); const row_r101 = ɵɵnextContext(2).$implicit; return row_r101._expanded = !row_r101._expanded; });
    ɵɵelementEnd();
} }
function NovoTableElement_div_3_tbody_4_ng_template_2_td_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "td", 20);
    ɵɵtemplate(1, NovoTableElement_div_3_tbody_4_ng_template_2_td_1_button_1_Template, 1, 0, "button", 66);
    ɵɵtemplate(2, NovoTableElement_div_3_tbody_4_ng_template_2_td_1_button_2_Template, 1, 0, "button", 67);
    ɵɵelementEnd();
} if (rf & 2) {
    const row_r101 = ɵɵnextContext().$implicit;
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !row_r101._expanded);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", row_r101._expanded);
} }
function NovoTableElement_div_3_tbody_4_ng_template_2_td_2_Template(rf, ctx) { if (rf & 1) {
    const _r118 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "td", 70);
    ɵɵelementStart(1, "novo-checkbox", 71);
    ɵɵlistener("ngModelChange", function NovoTableElement_div_3_tbody_4_ng_template_2_td_2_Template_novo_checkbox_ngModelChange_1_listener($event) { ɵɵrestoreView(_r118); const row_r101 = ɵɵnextContext().$implicit; return row_r101._selected = $event; })("ngModelChange", function NovoTableElement_div_3_tbody_4_ng_template_2_td_2_Template_novo_checkbox_ngModelChange_1_listener() { ɵɵrestoreView(_r118); const row_r101 = ɵɵnextContext().$implicit; const ctx_r119 = ɵɵnextContext(3); return ctx_r119.rowSelectHandler(row_r101); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const row_r101 = ɵɵnextContext().$implicit;
    ɵɵadvance(1);
    ɵɵproperty("ngModel", row_r101._selected);
} }
function NovoTableElement_div_3_tbody_4_ng_template_2_td_3_novo_table_cell_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-table-cell", 75);
} if (rf & 2) {
    const column_r122 = ɵɵnextContext().$implicit;
    const ctx_r126 = ɵɵnextContext();
    const row_r101 = ctx_r126.$implicit;
    const i_r102 = ctx_r126.index;
    const ctx_r123 = ɵɵnextContext(3);
    ɵɵproperty("hasEditor", ctx_r123.editable)("column", column_r122)("row", row_r101)("form", ctx_r123.getRowControlForm(i_r102));
} }
function NovoTableElement_div_3_tbody_4_ng_template_2_td_3_novo_control_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-control", 76);
} if (rf & 2) {
    const column_r122 = ɵɵnextContext().$implicit;
    const ctx_r127 = ɵɵnextContext();
    const i_r102 = ctx_r127.index;
    const row_r101 = ctx_r127.$implicit;
    const ctx_r124 = ɵɵnextContext(3);
    ɵɵproperty("form", ctx_r124.getRowControlForm(i_r102))("control", row_r101.controls[column_r122.name]);
} }
function NovoTableElement_div_3_tbody_4_ng_template_2_td_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "td", 72);
    ɵɵtemplate(1, NovoTableElement_div_3_tbody_4_ng_template_2_td_3_novo_table_cell_1_Template, 1, 4, "novo-table-cell", 73);
    ɵɵtemplate(2, NovoTableElement_div_3_tbody_4_ng_template_2_td_3_novo_control_2_Template, 1, 2, "novo-control", 74);
    ɵɵelementEnd();
} if (rf & 2) {
    const column_r122 = ctx.$implicit;
    const row_r101 = ɵɵnextContext().$implicit;
    const ctx_r105 = ɵɵnextContext(3);
    ɵɵclassProp("novo-form-row", ctx_r105.editable);
    ɵɵproperty("hidden", ctx_r105.isColumnHidden(column_r122));
    ɵɵattribute("data-automation-id", column_r122.id || column_r122.name);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", row_r101._editing && !row_r101._editing[column_r122.name]);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", row_r101._editing && row_r101._editing[column_r122.name]);
} }
function NovoTableElement_div_3_tbody_4_ng_template_2_tr_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "tr", 77);
    ɵɵelement(1, "td", 20);
    ɵɵelementStart(2, "td");
    ɵɵelement(3, "novo-row-details", 78);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const row_r101 = ɵɵnextContext().$implicit;
    const ctx_r106 = ɵɵnextContext(3);
    ɵɵproperty("hidden", !row_r101._expanded);
    ɵɵattribute("data-automation-id", "details-row-" + row_r101.id);
    ɵɵadvance(2);
    ɵɵattribute("colspan", ctx_r106.config.rowSelectionStyle === "checkbox" ? ctx_r106.columns.length + 1 : ctx_r106.columns.length);
    ɵɵadvance(1);
    ɵɵproperty("data", row_r101)("renderer", ctx_r106.config.detailsRenderer);
} }
function NovoTableElement_div_3_tbody_4_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    const _r132 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "tr", 62);
    ɵɵlistener("click", function NovoTableElement_div_3_tbody_4_ng_template_2_Template_tr_click_0_listener() { ɵɵrestoreView(_r132); const row_r101 = ctx.$implicit; const ctx_r131 = ɵɵnextContext(3); return ctx_r131.rowClickHandler(row_r101); });
    ɵɵtemplate(1, NovoTableElement_div_3_tbody_4_ng_template_2_td_1_Template, 3, 2, "td", 17);
    ɵɵtemplate(2, NovoTableElement_div_3_tbody_4_ng_template_2_td_2_Template, 2, 1, "td", 63);
    ɵɵtemplate(3, NovoTableElement_div_3_tbody_4_ng_template_2_td_3_Template, 3, 6, "td", 64);
    ɵɵelementEnd();
    ɵɵtemplate(4, NovoTableElement_div_3_tbody_4_ng_template_2_tr_4_Template, 4, 5, "tr", 65);
} if (rf & 2) {
    const row_r101 = ctx.$implicit;
    const ctx_r98 = ɵɵnextContext(3);
    ɵɵclassProp("active", row_r101.id === ctx_r98.activeId);
    ɵɵproperty("ngClass", row_r101.customClass || "")("id", ctx_r98.name + "-" + row_r101[ctx_r98.rowIdentifier]);
    ɵɵattribute("data-automation-id", row_r101.id);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r98.config.hasDetails);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r98.config.rowSelectionStyle === "checkbox");
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r98.columns);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r98.config.hasDetails);
} }
function NovoTableElement_div_3_tbody_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "tbody");
    ɵɵtemplate(1, NovoTableElement_div_3_tbody_4_tr_1_Template, 5, 2, "tr", 57);
    ɵɵtemplate(2, NovoTableElement_div_3_tbody_4_ng_template_2_Template, 5, 9, "ng-template", 58);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r10.config.rowSelectionStyle === "checkbox" && ctx_r10.showSelectAllMessage && ctx_r10.config.selectAllEnabled);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r10.rows);
} }
function NovoTableElement_div_3_tbody_5_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 82);
    ɵɵelementStart(1, "h4");
    ɵɵelement(2, "i", 83);
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r134 = ɵɵnextContext(3);
    ɵɵadvance(3);
    ɵɵtextInterpolate1(" ", ctx_r134.labels.emptyTableMessage, "");
} }
function NovoTableElement_div_3_tbody_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "tbody", 79);
    ɵɵelementStart(1, "tr");
    ɵɵelementStart(2, "td", 60);
    ɵɵelementStart(3, "div", null, 80);
    ɵɵprojection(5, 2);
    ɵɵelementEnd();
    ɵɵtemplate(6, NovoTableElement_div_3_tbody_5_div_6_Template, 4, 1, "div", 81);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const _r133 = ɵɵreference(4);
    ɵɵadvance(6);
    ɵɵproperty("ngIf", _r133.childNodes.length == 0);
} }
function NovoTableElement_div_3_tbody_6_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 86);
    ɵɵelementStart(1, "h4");
    ɵɵelement(2, "i", 83);
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r136 = ɵɵnextContext(3);
    ɵɵadvance(3);
    ɵɵtextInterpolate1(" ", ctx_r136.labels.noMatchingRecordsMessage, "");
} }
function NovoTableElement_div_3_tbody_6_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "tbody", 79);
    ɵɵelementStart(1, "tr");
    ɵɵelementStart(2, "td", 60);
    ɵɵelementStart(3, "div", null, 84);
    ɵɵprojection(5, 3);
    ɵɵelementEnd();
    ɵɵtemplate(6, NovoTableElement_div_3_tbody_6_div_6_Template, 4, 1, "div", 85);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const _r135 = ɵɵreference(4);
    ɵɵadvance(6);
    ɵɵproperty("ngIf", _r135.childNodes.length == 0);
} }
function NovoTableElement_div_3_tbody_7_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 90);
    ɵɵelementStart(1, "h4");
    ɵɵelement(2, "i", 91);
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r138 = ɵɵnextContext(3);
    ɵɵadvance(3);
    ɵɵtextInterpolate1(" ", ctx_r138.labels.erroredTableMessage, "");
} }
function NovoTableElement_div_3_tbody_7_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "tbody", 87);
    ɵɵelementStart(1, "tr");
    ɵɵelementStart(2, "td", 60);
    ɵɵelementStart(3, "div", null, 88);
    ɵɵprojection(5, 4);
    ɵɵelementEnd();
    ɵɵtemplate(6, NovoTableElement_div_3_tbody_7_div_6_Template, 4, 1, "div", 89);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const _r137 = ɵɵreference(4);
    ɵɵadvance(6);
    ɵɵproperty("ngIf", _r137.childNodes.length == 0);
} }
function NovoTableElement_div_3_tfoot_8_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "tfoot", 92);
    ɵɵelementStart(1, "tr");
    ɵɵelementStart(2, "td", 60);
    ɵɵprojection(3, 5);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r14 = ɵɵnextContext(2);
    ɵɵproperty("ngClass", ctx_r14.dataProvider.length % 2 == 0 ? "odd" : "even");
} }
function NovoTableElement_div_3_tfoot_9_td_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "td");
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const column_r142 = ctx.$implicit;
    const ctx_r143 = ɵɵnextContext();
    const i_r140 = ctx_r143.index;
    const footer_r139 = ctx_r143.$implicit;
    ɵɵattribute("data-automation-id", (column_r142.id || column_r142.name) + "-total-" + i_r140);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", footer_r139[column_r142.name], " ");
} }
function NovoTableElement_div_3_tfoot_9_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "tfoot", 93);
    ɵɵelementStart(1, "tr");
    ɵɵtemplate(2, NovoTableElement_div_3_tfoot_9_td_2_Template, 2, 2, "td", 94);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r15 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵproperty("ngForOf", ctx_r15.columns);
} }
function NovoTableElement_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 9);
    ɵɵelementStart(1, "novo-form", 10);
    ɵɵelementStart(2, "table", 11);
    ɵɵtemplate(3, NovoTableElement_div_3_thead_3_Template, 5, 3, "thead", 0);
    ɵɵtemplate(4, NovoTableElement_div_3_tbody_4_Template, 3, 2, "tbody", 0);
    ɵɵtemplate(5, NovoTableElement_div_3_tbody_5_Template, 7, 1, "tbody", 12);
    ɵɵtemplate(6, NovoTableElement_div_3_tbody_6_Template, 7, 1, "tbody", 12);
    ɵɵtemplate(7, NovoTableElement_div_3_tbody_7_Template, 7, 1, "tbody", 13);
    ɵɵtemplate(8, NovoTableElement_div_3_tfoot_8_Template, 4, 1, "tfoot", 14);
    ɵɵtemplate(9, NovoTableElement_div_3_tfoot_9_Template, 3, 1, "tfoot", 15);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("form", ctx_r3.tableForm);
    ɵɵadvance(1);
    ɵɵclassProp("table-details", ctx_r3.config.hasDetails);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r3.columns.length && (!ctx_r3.dataProvider.isEmpty() || ctx_r3.dataProvider.isFiltered() || ctx_r3.skipSortAndFilterClear || ctx_r3.editing));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !ctx_r3.dataProvider.isEmpty() || ctx_r3.editing);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r3.dataProvider.isEmpty() && !ctx_r3.dataProvider.isFiltered() && !ctx_r3.editing);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r3.dataProvider.isEmpty() && ctx_r3.dataProvider.isFiltered());
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r3.dataProvider.hasErrors());
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !ctx_r3.config.footers);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r3.footers);
} }
const _c3$9 = [[["novo-table-header"]], [["novo-table-actions"]], [["", "table-empty-message", ""]], [["", "table-no-matching-records-message", ""]], [["", "table-error-message", ""]], [["novo-table-footer"]]];
const _c4$4 = ["novo-table-header", "novo-table-actions", "[table-empty-message]", "[table-no-matching-records-message]", "[table-error-message]", "novo-table-footer"];
// TODO - support (1) clicking cell to edit, (2) clicking row to edit, (3) button to trigger full table to edit
var NovoTableMode;
(function (NovoTableMode) {
    NovoTableMode[NovoTableMode["VIEW"] = 1] = "VIEW";
    NovoTableMode[NovoTableMode["EDIT"] = 2] = "EDIT";
})(NovoTableMode || (NovoTableMode = {}));
class NovoTableElement {
    constructor(labels, formUtils, builder) {
        this.labels = labels;
        this.formUtils = formUtils;
        this.builder = builder;
        this.config = {};
        this.skipSortAndFilterClear = false;
        this.mode = NovoTableMode.VIEW;
        this.editable = false;
        this.rowIdentifier = 'id';
        this.name = 'table';
        this.onRowClick = new EventEmitter();
        this.onRowSelect = new EventEmitter();
        this.onTableChange = new EventEmitter();
        this._rows = [];
        this.selected = [];
        this.activeId = 0;
        this.master = false;
        this.expandAll = false;
        this.indeterminate = false;
        this.lastPage = 0;
        this.selectedPageCount = 0;
        this.showSelectAllMessage = false;
        this.pagedData = [];
        // Map to keep track of what dropdowns are toggled
        // Used to properly *ngIf the <list> so that the keepFilterFocused Directive
        // will properly fire the ngAfterViewInit event
        this.toggledDropdownMap = {};
        this.NovoTableMode = NovoTableMode;
        this.tableForm = new FormGroup({});
        this.footers = [];
        this.grossFlagToAvoidTheTableFromBeingUglyWhenHidingTheToast = false;
        this.loading = false;
        notify('[Deprecated]: The table is deprecated. Please migrate to novo-data-tables!');
    }
    set rows(rows) {
        this.dataProvider = rows;
        if (rows && rows.length > 0) {
            this.setupColumnDefaults();
        }
        // this is a temporary/hacky fix until async dataloading is handled within the table
        if (!this.skipSortAndFilterClear) {
            this.clearAllSortAndFilters();
        }
    }
    get rows() {
        return this._rows;
    }
    set dataProvider(dp) {
        this._dataProvider = Array.isArray(dp) ? new PagedArrayCollection(dp) : dp;
        this._dataProvider.dataChange.pipe(debounceTime(100)).subscribe((event) => {
            switch (event.type) {
                case CollectionEvent.CHANGE:
                    this._rows = event.data;
                    // Setup form
                    this.tableForm = this.builder.group({
                        rows: this.builder.array([]),
                    });
                    // Remove all selection on sort change if selection is on
                    if (this.config.rowSelectionStyle === 'checkbox') {
                        this.pagedData = event.data;
                        this.pageSelected = this.pagedData.filter((r) => r._selected);
                        this.rowSelectHandler();
                    }
                    // Find that columns we might need to sum up via the footer
                    let columnsToSum = [];
                    const columnSums = {};
                    if (this.config.footers) {
                        this.config.footers.forEach((config) => {
                            columnsToSum.push(...config.columns);
                        });
                        // Only have unique columns, filter out duplicates
                        columnsToSum = columnsToSum.filter((item, index, array) => array.indexOf(item) === index);
                    }
                    // Make a form for each row
                    const tableFormRows = this.tableForm.controls.rows;
                    this._rows.forEach((row, index) => {
                        const rowControls = [];
                        row.controls = {};
                        row._editing = {};
                        row._expanded = this.config.expandAll;
                        row.rowId = this._rows.length;
                        this.columns.forEach((column) => {
                            // Use the control passed or use a ReadOnlyControl so that the form has the values
                            const control = column.editorConfig
                                ? ControlFactory.create(column.editorType, column.editorConfig)
                                : new ReadOnlyControl({ key: column.name });
                            row.controls[column.name] = control;
                            rowControls.push(control);
                        });
                        this.formUtils.setInitialValues(rowControls, row, false);
                        tableFormRows.push(this.formUtils.toFormGroup(rowControls));
                        // Setup the total footer if configured
                        // Array of keys to total
                        if (columnsToSum.length !== 0) {
                            columnsToSum.forEach((column) => {
                                if (Helpers.isBlank(columnSums[column])) {
                                    columnSums[column] = 0;
                                }
                                columnSums[column] += row[column];
                            });
                        }
                    });
                    if (this.mode === NovoTableMode.EDIT) {
                        this.setTableEdit();
                    }
                    // Setup the footers (if any)
                    if (this.config.footers) {
                        this.footers = [];
                        this.config.footers.forEach((footerConfig, footerConfigIndex) => {
                            const footer = {};
                            footer[footerConfig.labelColumn] = footerConfig.label;
                            footerConfig.columns.forEach((column) => {
                                if (footerConfig.method === 'AVG' && this._rows.length !== 0) {
                                    footer[column] = columnSums[column] / this._rows.length;
                                }
                                else {
                                    footer[column] = columnSums[column];
                                }
                            });
                            this.footers.push(footer);
                        });
                    }
                    break;
                default:
                    break;
            }
        });
        if (this.config.paging) {
            this._dataProvider.page = this.config.paging.current;
            this._dataProvider.pageSize = this.config.paging.itemsPerPage;
        }
        else {
            // Paging turned off, return basically all of the data
            this._dataProvider.page = 1;
            this._dataProvider.pageSize = 500;
        }
        if (dp && dp.length > 0) {
            this.setupColumnDefaults();
        }
        this._dataProvider.refresh();
    }
    get dataProvider() {
        return this._dataProvider;
    }
    get editing() {
        return this.mode === NovoTableMode.EDIT;
    }
    get formValue() {
        return this.tableForm.value;
    }
    onDropdownToggled(event, column) {
        this.toggledDropdownMap[column] = event;
    }
    focusInput() {
        if (this.filterInputs && this.filterInputs.length) {
            this.filterInputs.forEach((filterInput) => {
                if (filterInput.nativeElement) {
                    setTimeout(() => filterInput.nativeElement.focus(), 0);
                }
            });
        }
    }
    onPageChange(event) {
        // this.dataProvider.page = event.page;
        // this.dataProvider.pageSize = event.itemsPerPage;
    }
    getOptionDataAutomationId(option) {
        if (!Helpers.isBlank(option.value)) {
            return option.value;
        }
        return option;
    }
    setupColumnDefaults() {
        // Check columns for cell option types
        this.columns.forEach((column) => {
            if (column && column.type) {
                switch (column.type) {
                    case 'date':
                        // Set options based on dates if there are none
                        column.options = column.options || this.getDefaultOptions(column);
                        break;
                    default:
                        break;
                }
            }
        });
    }
    ngDoCheck() {
        if (this.config.paging && this.config.paging.current !== this.lastPage) {
            this.rowSelectHandler();
            this.showSelectAllMessage = false;
        }
        this.lastPage = this.config.paging ? this.config.paging.current : 1;
    }
    getPageStart() {
        return this.config.paging ? (this.dataProvider.page - 1) * this.dataProvider.pageSize : 0;
    }
    getPageEnd() {
        return this.config.paging && this.dataProvider.pageSize > -1 ? this.getPageStart() + this.dataProvider.pageSize : this.rows.length;
    }
    getRowControlForm(i) {
        const tableFormRows = this.tableForm.controls.rows;
        return tableFormRows.controls[i];
    }
    onFilterClick(column, filter) {
        if (filter.range && !column.calendarShow) {
            column.calenderShow = true;
            return;
        }
        if (Array.isArray(column.filter) && column.multiple) {
            if (~column.filter.indexOf(filter)) {
                // Remove filter
                column.filter.splice(column.filter.indexOf(filter), 1);
                if (filter.range) {
                    column.calenderShow = false;
                }
                if (column.filter.length === 0) {
                    column.filter = null;
                }
            }
            else {
                // Add filter
                column.filter.push(filter);
            }
        }
        else if (column.multiple) {
            column.filter = new Array();
            column.filter.push(Helpers.isBlank(filter.value) ? filter : filter.value);
        }
        else {
            column.filter = Helpers.isBlank(filter.value) ? filter : filter.value;
        }
        this.onFilterChange();
    }
    onFilterClear(column) {
        setTimeout(() => {
            column.filter = null;
            column.freetextFilter = null;
            this.onFilterChange();
            if (column.originalOptions) {
                column.options = column.originalOptions;
            }
        });
    }
    clearAllSortAndFilters() {
        if (this.config.filtering) {
            this.columns.forEach((column) => {
                column.filter = null;
                column.sort = null;
            });
        }
    }
    /**
     * @description This method updates the row data to reflect the active filters.
     */
    onFilterChange(event) {
        if (this.config.filtering) {
            // Array of filters
            const filters = this.columns.filter((col) => !Helpers.isEmpty(col.filter));
            if (filters.length) {
                let query = {};
                for (const column of filters) {
                    if (Helpers.isFunction(column.match)) {
                        query[column.name] = (value, record) => {
                            return column.match(record, column.filter);
                        };
                    }
                    else if (column.preFilter && Helpers.isFunction(column.preFilter)) {
                        query = Object.assign({}, query, column.preFilter(this.escapeCharacters(column.filter)));
                    }
                    else if (Array.isArray(column.filter)) {
                        // The filters are an array (multi-select), check value
                        let options = column.filter;
                        // We have an array of {value: '', labels: ''}
                        if (options[0].value || options[0].label) {
                            options = column.filter.map((opt) => opt.value);
                        }
                        query[column.name] = { any: options };
                    }
                    else if (column.type && column.type === 'date') {
                        if (column.filter.startDate && column.filter.endDate) {
                            query[column.name] = {
                                min: startOfDay(column.filter.startDate),
                                max: startOfDay(addDays(startOfDay(column.filter.endDate), 1)),
                            };
                        }
                        else {
                            query[column.name] = {
                                min: column.filter.min ? addDays(startOfToday(), column.filter.min) : startOfToday(),
                                max: column.filter.max ? addDays(startOfTomorrow(), column.filter.max) : startOfTomorrow(),
                            };
                        }
                    }
                    else {
                        query[column.name] = column.filter;
                    }
                }
                if (Helpers.isFunction(this.config.filtering)) {
                    this.config.filtering(query);
                }
                else {
                    this._dataProvider.filter = query;
                }
            }
            else {
                this._dataProvider.filter = {};
            }
            // Trickle down to keep sort
            // this.onSortChange(this.currentSortColumn);
            this.fireTableChangeEvent();
            // If paging, reset page
            if (this.config.paging) {
                this.config.paging.current = 1;
            }
            // Remove all selection on sort change if selection is on
            if (this.config.rowSelectionStyle === 'checkbox') {
                this.selectAll(false);
            }
        }
    }
    escapeCharacters(filter) {
        if (typeof filter === 'string') {
            return filter.replace(/'/g, "''");
        }
        return filter;
    }
    isFilterActive(column, filter) {
        // TODO: This needs to be refactored
        let isActive = false;
        if (column && !Helpers.isBlank(column.filter) && !Helpers.isBlank(filter)) {
            if (Array.isArray(column.filter)) {
                if (typeof filter !== 'string') {
                    isActive = column.filter.some((item) => {
                        return item.label === filter.label;
                    });
                }
                else {
                    isActive = column.filter.includes(filter);
                }
            }
            else {
                if (typeof column.filter === typeof filter) {
                    isActive = column.filter === filter;
                }
                else {
                    isActive = column.filter === filter.value;
                }
            }
        }
        return isActive;
    }
    onSortChange(column) {
        this.currentSortColumn = column;
        const sortedColumns = this.columns.filter((thisColumn) => {
            return thisColumn.sort && thisColumn !== this.currentSortColumn;
        });
        for (const sortedColumn of sortedColumns) {
            sortedColumn.sort = null;
        }
        if (column) {
            if (Helpers.isFunction(this.config.sorting)) {
                this.config.sorting();
            }
            else if (Helpers.isFunction(column.preSort)) {
                this._dataProvider.sort = [].concat(column.preSort(column));
            }
            else {
                this._dataProvider.sort = [{ field: column.compare || column.name, reverse: column.sort === 'desc' }];
            }
        }
        // Fire table change event
        // this.fireTableChangeEvent();
        // If paging, reset page
        if (this.config.paging) {
            this.config.paging.current = 1;
        }
        // Remove all selection on sort change if selection is on
        if (this.config.rowSelectionStyle === 'checkbox') {
            this.selectAll(false);
        }
    }
    fireTableChangeEvent() {
        // Construct a table change object
        const onTableChange = {};
        const filters = this.columns.filter((col) => col.filter && col.filter.length);
        onTableChange.filter = filters.length ? filters : false;
        onTableChange.sort = this.currentSortColumn ? this.currentSortColumn : false;
        onTableChange.rows = this.rows;
        // Emit event
        this.onTableChange.emit(onTableChange);
    }
    findColumnIndex(value) {
        for (let i = 0; i < this.columns.length; i += 1) {
            if (this.columns[i].name === value) {
                return i;
            }
        }
        return null;
    }
    onOrderChange(event) {
        const oldIndex = this.findColumnIndex(event.first.name);
        const newIndex = this.findColumnIndex(event.second.name);
        this.columns.splice(newIndex, 0, this.columns.splice(oldIndex, 1)[0]);
        this.onSortChange(this.currentSortColumn);
    }
    expandAllOnPage(expanded) {
        this.config.expandAll = !expanded;
        for (const row of this.dataProvider.list) {
            row._expanded = this.config.expandAll;
        }
    }
    selectPage(data) {
        if (!this.master) {
            this.selectAll(false);
            // Only show the select all message when there is only one new page selected at a time
            this.selectedPageCount = this.selectedPageCount > 0 ? this.selectedPageCount - 1 : 0;
            this.showSelectAllMessage = false;
        }
        else {
            this.indeterminate = false;
            // this.pagedData = this.rows.slice(this.getPageStart(), this.getPageEnd());
            for (const row of this.pagedData) {
                row._selected = this.master;
            }
            this.selected = this.dataProvider.list.filter((r) => r._selected);
            this.pageSelected = this.pagedData.filter((r) => r._selected);
            this.emitSelected(this.selected);
            // Only show the select all message when there is only one new page selected at a time
            this.selectedPageCount++;
            this.showSelectAllMessage = this.selectedPageCount === 1 && this.selected.length !== this.dataProvider.total;
        }
    }
    selectAll(value) {
        this.master = value;
        this.indeterminate = false;
        for (const row of this.dataProvider.list) {
            row._selected = value;
        }
        this.selected = value ? this.dataProvider.list : [];
        this.showSelectAllMessage = false;
        this.selectedPageCount = this.selectedPageCount > 0 ? this.selectedPageCount - 1 : 0;
        this.rowSelectHandler();
    }
    rowSelectHandler(data) {
        // this.pagedData = this.rows.slice(this.getPageStart(), this.getPageEnd());
        this.pageSelected = this.pagedData.filter((r) => r._selected);
        this.selected = this.dataProvider.list.filter((r) => r._selected);
        if (this.pageSelected.length === 0) {
            this.master = false;
            this.indeterminate = false;
        }
        else if (this.pageSelected.length === this.pagedData.length) {
            this.master = true;
            this.indeterminate = false;
        }
        else {
            this.master = false;
            this.indeterminate = true;
            // Breaking the selected page count
            this.showSelectAllMessage = false;
            this.selectedPageCount = this.selectedPageCount > 0 ? this.selectedPageCount - 1 : 0;
        }
        this.emitSelected(this.selected);
    }
    emitSelected(selected) {
        this.onRowSelect.emit({ length: selected.length, selected });
    }
    rowClickHandler(row) {
        if (this.config.rowSelect) {
            this.activeId = row.id || 0;
            this.onRowClick.emit(row);
        }
    }
    getDefaultOptions(column) {
        // TODO - needs to come from label service - https://github.com/bullhorn/novo-elements/issues/116
        const opts = [
            { label: this.labels.past1Day, min: -1, max: 0 },
            { label: this.labels.past7Days, min: -7, max: 0 },
            { label: this.labels.past30Days, min: -30, max: 0 },
            { label: this.labels.past90Days, min: -90, max: 0 },
            { label: this.labels.past1Year, min: -366, max: 0 },
            { label: this.labels.next1Day, min: 0, max: 1 },
            { label: this.labels.next7Days, min: 0, max: 7 },
            { label: this.labels.next30Days, min: 0, max: 30 },
            { label: this.labels.next90Days, min: 0, max: 90 },
            { label: this.labels.next1Year, min: 0, max: 366 },
        ];
        if (column && column.range) {
            opts.push({
                label: this.labels.customDateRange,
                range: true,
            });
        }
        return opts;
    }
    onCalenderSelect(column, event) {
        setTimeout(() => {
            if (event.startDate && event.endDate) {
                this.onFilterChange();
            }
        }, 10);
    }
    onFilterKeywords(config) {
        if (config && config.filtering && config.filtering.freetextFilter) {
            const filterKeywords = config.filtering.freetextFilter.toLowerCase();
            if (!config.filtering.originalOptions) {
                config.filtering.originalOptions = config.filtering.options;
            }
            const newOptions = config.filtering.originalOptions.filter((option) => {
                let value = option && option.label ? option.label : option;
                value = value.toLowerCase() ? value.toLowerCase() : value;
                if (value === filterKeywords) {
                    return true;
                }
                else if (~value.indexOf(filterKeywords) || ~value.indexOf(filterKeywords)) {
                    return true;
                }
                return false;
            });
            config.filtering.options = newOptions;
            config.filtering.filter = config.filtering.freetextFilter;
        }
        else {
            config.filtering.options = config.filtering.originalOptions;
        }
        this.onFilterChange();
    }
    /**
     * @description Sets the Table into EDIT mode, based on the row/column passed you can enter in a few states
     * (1) setTableEdit() - don't pass any to put the FULL table into edit mode
     * (2) setTableEdit(1) - pass only row to put that FULL row of the table into edit mode
     * (3) setTableEdit(1, 1) - pass row and column to put that column of the row of the table into edit mode
     * @memberOf NovoTableElement
     */
    setTableEdit(rowNumber, columnNumber) {
        this.mode = NovoTableMode.EDIT;
        this._dataProvider.edit();
        this._rows.forEach((row, rowIndex) => {
            row._editing = row._editing || {};
            this.columns.forEach((column, columnIndex) => {
                if (column.viewOnly) {
                    row._editing[column.name] = false;
                }
                else if (Helpers.isEmpty(rowNumber) && Helpers.isEmpty(columnNumber)) {
                    row._editing[column.name] = true;
                }
                else if (!Helpers.isEmpty(rowNumber) && rowIndex === Number(rowNumber) && Helpers.isEmpty(columnNumber)) {
                    row._editing[column.name] = true;
                }
                else if (!Helpers.isEmpty(rowNumber) &&
                    !Helpers.isEmpty(columnNumber) &&
                    rowIndex === Number(rowNumber) &&
                    columnIndex === Number(columnNumber)) {
                    row._editing[column.name] = true;
                }
                else {
                    row._editing[column.name] = false;
                }
            });
        });
    }
    /**
     * @description Leaves edit mode for the Table and puts everything back to VIEW only
     * @memberOf NovoTableElement
     * @param cancel - whether or not to save data or undo
     */
    leaveEditMode(cancel) {
        this.mode = NovoTableMode.VIEW;
        this._rows.forEach((row) => {
            row._editing = row._editing || {};
            this.columns.forEach((column) => {
                row._editing[column.name] = false;
            });
        });
        if (cancel) {
            this._dataProvider.undo();
        }
        else {
            this._dataProvider.commit();
        }
        this.hideToastMessage();
    }
    /**
     * @description Adds a new row into the table to be edited, can be called from a local reference of the table in your template
     * @memberOf NovoTableElement
     */
    addEditableRow(defaultValue = {}) {
        const tableFormRows = this.tableForm.controls.rows;
        const row = {};
        const rowControls = [];
        row.controls = {};
        row._editing = {};
        row.rowId = this._rows.length + 1;
        this.columns.forEach((column) => {
            // Use the control passed or use a ReadOnlyControl so that the form has the values
            const control = column.editorConfig
                ? ControlFactory.create(column.editorType, column.editorConfig)
                : new ReadOnlyControl({ key: column.name });
            control.value = null; // remove copied column value
            row.controls[column.name] = control;
            row._editing[column.name] = !column.viewOnly;
            rowControls.push(control);
        });
        this.formUtils.setInitialValues(rowControls, defaultValue, false);
        tableFormRows.push(this.formUtils.toFormGroup(rowControls));
        this._rows.push(row);
    }
    /**
     * @description Validates the Form inside of the Table, if there are errors it will display/return the errors for each row.
     * If there are no errors, then it will return ONLY the changed data for each row, the data returned will be in the form:
     * { id: ID_OF_RECORD, key: value } -- data that was updated
     * { id: undefined, key: value } -- data that was added
     * @memberOf NovoTableElement
     */
    validateAndGetUpdatedData() {
        if (this.tableForm && this.tableForm.controls && this.tableForm.controls.rows) {
            const changedRows = [];
            const errors = [];
            // Go over the FormArray's controls
            this.tableForm.controls.rows.controls.forEach((formGroup, index) => {
                let changedRow = null;
                let error = null;
                // Go over the form group controls
                Object.keys(formGroup.controls).forEach((key) => {
                    const control = formGroup.controls[key];
                    // Handle value changing
                    if (control && control.dirty && !control.errors) {
                        if (!changedRow) {
                            // Append the ID, so we have some key to save against
                            changedRow = {};
                            if (this._rows[index].id) {
                                changedRow.id = this._rows[index].id;
                            }
                        }
                        // If dirty, grab value off the form
                        changedRow[key] = this.tableForm.value.rows[index][key];
                        // Set value back to row (should be already done via the server call, but do it anyway)
                        this._rows[index][key] = changedRow[key];
                    }
                    else if (control && control.errors) {
                        // Handle errors
                        if (!error) {
                            error = {};
                        }
                        error[key] = control.errors;
                        control.markAsDirty();
                        control.markAsTouched();
                    }
                });
                if (changedRow) {
                    changedRows.push(changedRow);
                }
                if (error) {
                    errors.push({ errors: error, row: this._rows[index], index });
                }
            });
            const ret = {};
            // Return errors if any, otherwise return the changed rows
            if (errors.length === 0) {
                return { changed: changedRows };
            }
            return { errors };
        }
    }
    /**
     * @description Refresh the data provider and leave edit mode
     * @memberOf NovoTableElement
     */
    cancelEditing() {
        this.leaveEditMode(true);
    }
    /**
     * @description Refresh the data provider and leave edit mode
     * @memberOf NovoTableElement
     */
    saveChanges() {
        this.leaveEditMode(false);
    }
    /**
     * @description Displays a toast message inside of the table
     * @memberOf NovoTableElement
     */
    displayToastMessage(toast, hideDelay) {
        this.loading = false;
        this.toast = toast;
        if (hideDelay) {
            setTimeout(() => this.hideToastMessage(), hideDelay);
        }
    }
    /**
     * @description Force hide the toast message
     * @memberOf NovoTableElement
     */
    hideToastMessage() {
        this.toast = null;
        // Hack to make the table display properly after hiding the toast
        this.grossFlagToAvoidTheTableFromBeingUglyWhenHidingTheToast = true;
        setTimeout(() => {
            this.grossFlagToAvoidTheTableFromBeingUglyWhenHidingTheToast = false;
        });
    }
    /**
     * @description display the loading overlay on the table
     * @memberOf NovoTableElement
     */
    toggleLoading(show) {
        this.loading = show;
    }
    /**
     * @description hide a column in edit or view mode
     * @memberOf NovoTableElement
     */
    isColumnHidden(column) {
        return this.editing ? !!column.hideColumnOnEdit : !!column.hideColumnOnView;
    }
}
NovoTableElement.ɵfac = function NovoTableElement_Factory(t) { return new (t || NovoTableElement)(ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(FormUtils), ɵɵdirectiveInject(FormBuilder)); };
NovoTableElement.ɵcmp = ɵɵdefineComponent({ type: NovoTableElement, selectors: [["novo-table"]], viewQuery: function NovoTableElement_Query(rf, ctx) { if (rf & 1) {
        ɵɵviewQuery(_c0$1s, true, ElementRef);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.filterInputs = _t);
    } }, hostVars: 5, hostBindings: function NovoTableElement_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵattribute("theme", ctx.theme);
        ɵɵclassProp("editing", ctx.mode === ctx.NovoTableMode.EDIT)("novo-table-loading", ctx.loading);
    } }, inputs: { config: "config", columns: "columns", theme: "theme", skipSortAndFilterClear: "skipSortAndFilterClear", mode: "mode", editable: "editable", rowIdentifier: "rowIdentifier", name: "name", rows: "rows", dataProvider: "dataProvider" }, outputs: { onRowClick: "onRowClick", onRowSelect: "onRowSelect", onTableChange: "onTableChange" }, ngContentSelectors: _c4$4, decls: 4, vars: 4, consts: [[4, "ngIf"], ["class", "novo-table-loading-overlay", 4, "ngIf"], [3, "theme", "icon", "message", 4, "ngIf"], ["class", "table-container", 4, "ngIf"], [1, "header-actions"], [3, "rowOptions", "disablePageSelection", "page", "itemsPerPage", "totalItems", "pageChange", "itemsPerPageChange", "onPageChange", 4, "ngIf"], [3, "rowOptions", "disablePageSelection", "page", "itemsPerPage", "totalItems", "pageChange", "itemsPerPageChange", "onPageChange"], [1, "novo-table-loading-overlay"], [3, "theme", "icon", "message"], [1, "table-container"], ["hideHeader", "true", 3, "form"], ["role", "grid", 1, "table", "table-striped", "dataTable"], ["class", "table-message", "data-automation-id", "empty-table", 4, "ngIf"], ["class", "table-message", "data-automation-id", "table-errors", 4, "ngIf"], [3, "ngClass", 4, "ngIf"], ["class", "novo-table-total-footer", 4, "ngFor", "ngForOf"], ["role", "row"], ["class", "row-actions", 4, "ngIf"], ["class", "row-actions checkbox mass-action", 4, "ngIf"], [3, "ngClass", "novoThOrderable", "hidden", "onOrderChange", 4, "ngFor", "ngForOf"], [1, "row-actions"], ["theme", "icon", "icon", "next", "data-automation-id", "expand-all", 3, "click", 4, "ngIf"], ["theme", "icon", "icon", "sort-desc", "data-automation-id", "collapse-all", 3, "click", 4, "ngIf"], ["theme", "icon", "icon", "next", "data-automation-id", "expand-all", 3, "click"], ["theme", "icon", "icon", "sort-desc", "data-automation-id", "collapse-all", 3, "click"], [1, "row-actions", "checkbox", "mass-action"], ["data-automation-id", "select-all-checkbox", "tooltipPosition", "right", 3, "ngModel", "indeterminate", "tooltip", "ngModelChange"], [3, "ngClass", "novoThOrderable", "hidden", "onOrderChange"], ["class", "th-group", 4, "ngIf"], [1, "th-group"], [1, "th-title", 3, "ngClass", "novoThSortable", "column", "onSortChange"], ["class", "table-sort-icons", "tooltipPosition", "bottom", 3, "tooltip", "ngClass", 4, "ngIf"], ["side", "right", "class", "column-filters", "parentScrollSelector", ".table-container", "containerClass", "table-dropdown", 3, "toggled", 4, "ngIf"], ["tooltipPosition", "bottom", 1, "table-sort-icons", 3, "tooltip", "ngClass"], [1, "bhi-arrow-up"], [1, "bhi-arrow-down"], ["side", "right", "parentScrollSelector", ".table-container", "containerClass", "table-dropdown", 1, "column-filters", 3, "toggled"], ["type", "button", "theme", "icon", "icon", "filter", "tooltipPosition", "bottom", 3, "tooltip", "click"], [1, "filter-search"], [1, "header"], ["theme", "dialogue", "color", "negative", "icon", "times", 3, "click", 4, "ngIf"], ["type", "text", "keepFilterFocused", "", 3, "novoTableFilter", "ngModel", "onFilterChange", "ngModelChange", 4, "ngIf"], [3, "ngClass", "click", 4, "ngFor", "ngForOf"], ["theme", "dialogue", "color", "negative", "icon", "times", 3, "click"], ["type", "text", "keepFilterFocused", "", 3, "novoTableFilter", "ngModel", "onFilterChange", "ngModelChange"], ["filterInput", ""], [3, "ngClass", "click"], ["class", "bhi-check", 4, "ngIf"], [1, "bhi-check"], ["class", "filter-search", 4, "ngIf"], [3, "ngClass", "keepOpen", "hidden", "click", 4, "ngFor", "ngForOf"], [1, "calendar-container", 3, "hidden"], [3, "click"], [1, "bhi-previous"], ["range", "true", 3, "ngModel", "onSelect", "ngModelChange"], ["rangePicker", ""], [3, "ngClass", "keepOpen", "hidden", "click"], ["class", "table-selection-row", "data-automation-id", "table-selection-row", 4, "ngIf"], ["ngFor", "", 3, "ngForOf"], ["data-automation-id", "table-selection-row", 1, "table-selection-row"], ["colspan", "100%"], ["data-automation-id", "all-matching-records", 3, "click"], [1, "table-row", 3, "ngClass", "id", "click"], ["class", "row-actions checkbox", 4, "ngIf"], [3, "novo-form-row", "hidden", 4, "ngFor", "ngForOf"], ["class", "details-row", 3, "hidden", 4, "ngIf"], ["theme", "icon", "icon", "next", 3, "click", 4, "ngIf"], ["theme", "icon", "icon", "sort-desc", 3, "click", 4, "ngIf"], ["theme", "icon", "icon", "next", 3, "click"], ["theme", "icon", "icon", "sort-desc", 3, "click"], [1, "row-actions", "checkbox"], ["data-automation-id", "select-row-checkbox", 3, "ngModel", "ngModelChange"], [3, "hidden"], [3, "hasEditor", "column", "row", "form", 4, "ngIf"], ["condensed", "true", 3, "form", "control", 4, "ngIf"], [3, "hasEditor", "column", "row", "form"], ["condensed", "true", 3, "form", "control"], [1, "details-row", 3, "hidden"], [3, "data", "renderer"], ["data-automation-id", "empty-table", 1, "table-message"], ["emptymessage", ""], ["class", "table-empty-message", 4, "ngIf"], [1, "table-empty-message"], [1, "bhi-search-question"], ["nomatchmessage", ""], ["class", "no-matching-records", 4, "ngIf"], [1, "no-matching-records"], ["data-automation-id", "table-errors", 1, "table-message"], ["errormessage", ""], ["class", "table-error-message", 4, "ngIf"], [1, "table-error-message"], [1, "bhi-caution"], [3, "ngClass"], [1, "novo-table-total-footer"], [4, "ngFor", "ngForOf"]], template: function NovoTableElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵprojectionDef(_c3$9);
        ɵɵtemplate(0, NovoTableElement_header_0_Template, 5, 1, "header", 0);
        ɵɵtemplate(1, NovoTableElement_div_1_Template, 2, 0, "div", 1);
        ɵɵtemplate(2, NovoTableElement_novo_toast_2_Template, 1, 3, "novo-toast", 2);
        ɵɵtemplate(3, NovoTableElement_div_3_Template, 10, 10, "div", 3);
    } if (rf & 2) {
        ɵɵproperty("ngIf", ctx.columns.length);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.loading || ctx.dataProvider.isLoading());
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.toast);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", !ctx.grossFlagToAvoidTheTableFromBeingUglyWhenHidingTheToast);
    } }, directives: [NgIf, Pagination, NovoLoadingElement, NovoToastElement, NovoFormElement, NgForOf, NovoButtonElement, NovoCheckboxElement, NgControlStatus, NgModel, TooltipDirective, NgClass, ThOrderable, ThSortable, NovoDropdownElement, NovoDropdownListElement, NovoItemElement, DefaultValueAccessor, NovoTableKeepFilterFocus, TableFilter, NovoDatePickerElement, TableCell, NovoControlElement, RowDetails], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTableElement, [{
        type: Component,
        args: [{
                selector: 'novo-table',
                host: {
                    '[attr.theme]': 'theme',
                    '[class.editing]': 'mode === NovoTableMode.EDIT',
                    '[class.novo-table-loading]': 'loading',
                },
                // directives: [],
                template: `
    <header *ngIf="columns.length">
      <ng-content select="novo-table-header"></ng-content>
      <div class="header-actions">
        <novo-pagination
          *ngIf="config.paging && !(dataProvider.isEmpty() && !dataProvider.isFiltered())"
          [rowOptions]="config.paging.rowOptions"
          [disablePageSelection]="config.paging.disablePageSelection"
          [(page)]="dataProvider.page"
          [(itemsPerPage)]="dataProvider.pageSize"
          [totalItems]="dataProvider.total"
          (onPageChange)="onPageChange($event)"
        >
        </novo-pagination>
        <ng-content select="novo-table-actions"></ng-content>
      </div>
    </header>
    <div class="novo-table-loading-overlay" *ngIf="loading || dataProvider.isLoading()">
      <novo-loading></novo-loading>
    </div>
    <novo-toast *ngIf="toast" [theme]="toast?.theme" [icon]="toast?.icon" [message]="toast?.message"></novo-toast>
    <div class="table-container" *ngIf="!grossFlagToAvoidTheTableFromBeingUglyWhenHidingTheToast">
      <novo-form hideHeader="true" [form]="tableForm">
        <table class="table table-striped dataTable" [class.table-details]="config.hasDetails" role="grid">
          <!-- skipSortAndFilterClear is a hack right now, will be removed once Canvas is refactored -->
          <thead *ngIf="columns.length && (!dataProvider.isEmpty() || dataProvider.isFiltered() || skipSortAndFilterClear || editing)">
            <tr role="row">
              <!-- DETAILS -->
              <th class="row-actions" *ngIf="config.hasDetails">
                <button
                  theme="icon"
                  icon="next"
                  (click)="expandAllOnPage(config.expandAll)"
                  *ngIf="!config.expandAll"
                  data-automation-id="expand-all"
                ></button>
                <button
                  theme="icon"
                  icon="sort-desc"
                  (click)="expandAllOnPage(config.expandAll)"
                  *ngIf="config.expandAll"
                  data-automation-id="collapse-all"
                ></button>
              </th>
              <!-- CHECKBOX -->
              <th class="row-actions checkbox mass-action" *ngIf="config.rowSelectionStyle === 'checkbox'">
                <novo-checkbox
                  [(ngModel)]="master"
                  [indeterminate]="pageSelected.length > 0 && pageSelected.length < pagedData.length"
                  (ngModelChange)="selectPage($event)"
                  data-automation-id="select-all-checkbox"
                  [tooltip]="master ? labels.deselectAll : labels.selectAllOnPage"
                  tooltipPosition="right"
                ></novo-checkbox>
              </th>
              <!-- TABLE HEADERS -->
              <th
                *ngFor="let column of columns"
                [ngClass]="{
                  'mass-action': config?.rowSelectionStyle === 'checkbox',
                  actions: column?.actions?.items?.length > 0,
                  preview: column?.name === 'preview'
                }"
                [novoThOrderable]="column"
                (onOrderChange)="onOrderChange($event)"
                [hidden]="isColumnHidden(column)"
              >
                <div class="th-group" [attr.data-automation-id]="column.id || column.name" *ngIf="!column.hideHeader">
                  <!-- LABEL & SORT ARROWS -->
                  <div
                    class="th-title"
                    [ngClass]="config.sorting !== false && column.sorting !== false ? 'sortable' : ''"
                    [novoThSortable]="config"
                    [column]="column"
                    (onSortChange)="onSortChange($event)"
                  >
                    <label>{{ column.title || column.label }}</label>
                    <div
                      class="table-sort-icons"
                      tooltipPosition="bottom"
                      [tooltip]="labels.sort"
                      [ngClass]="column.sort || ''"
                      *ngIf="config.sorting !== false && column.sorting !== false"
                    >
                      <i class="bhi-arrow-up"></i>
                      <i class="bhi-arrow-down"></i>
                    </div>
                  </div>
                  <!-- FILTER DROP-DOWN -->
                  <novo-dropdown
                    side="right"
                    *ngIf="config.filtering !== false && column.filtering !== false"
                    class="column-filters"
                    (toggled)="onDropdownToggled($event, column.name)"
                    parentScrollSelector=".table-container"
                    containerClass="table-dropdown"
                  >
                    <button
                      type="button"
                      theme="icon"
                      icon="filter"
                      tooltipPosition="bottom"
                      [tooltip]="labels.filters"
                      [class.filtered]="column.filter || column.filter === false"
                      (click)="focusInput()"
                    ></button>
                    <!-- FILTER OPTIONS LIST -->
                    <list
                      *ngIf="
                        (column?.options?.length || column?.originalOptions?.length) &&
                        column?.type !== 'date' &&
                        toggledDropdownMap[column.name]
                      "
                    >
                      <item class="filter-search">
                        <div class="header">
                          <span>{{ labels.filters }}</span>
                          <button
                            theme="dialogue"
                            color="negative"
                            icon="times"
                            (click)="onFilterClear(column)"
                            *ngIf="column.filter || column.filter === false"
                          >
                            {{ labels.clear }}
                          </button>
                        </div>
                        <input
                          type="text"
                          *ngIf="!!column.allowCustomTextOption"
                          [attr.id]="column.name + '-input'"
                          [novoTableFilter]="column"
                          (onFilterChange)="onFilterKeywords($event)"
                          [(ngModel)]="column.freetextFilter"
                          keepFilterFocused
                          #filterInput
                        />
                      </item>
                      <item
                        [ngClass]="{ active: isFilterActive(column, option) }"
                        *ngFor="let option of column.options"
                        (click)="onFilterClick(column, option)"
                        [attr.data-automation-id]="getOptionDataAutomationId(option)"
                      >
                        <span>{{ option?.label || option }}</span> <i class="bhi-check" *ngIf="isFilterActive(column, option)"></i>
                      </item>
                    </list>
                    <!-- FILTER SEARCH INPUT -->
                    <list *ngIf="!(column?.options?.length || column?.originalOptions?.length) && toggledDropdownMap[column.name]">
                      <item class="filter-search">
                        <div class="header">
                          <span>{{ labels.filters }}</span>
                          <button theme="dialogue" color="negative" icon="times" (click)="onFilterClear(column)" *ngIf="column.filter">
                            {{ labels.clear }}
                          </button>
                        </div>
                        <input
                          type="text"
                          [attr.id]="column.name + '-input'"
                          [novoTableFilter]="column"
                          (onFilterChange)="onFilterChange($event)"
                          [(ngModel)]="column.filter"
                          keepFilterFocused
                          #filterInput
                        />
                      </item>
                    </list>
                    <!-- FILTER DATE OPTIONS -->
                    <list *ngIf="column?.options?.length && column?.type === 'date' && toggledDropdownMap[column.name]">
                      <item class="filter-search" *ngIf="!column.calenderShow">
                        <div class="header">
                          <span>{{ labels.filters }}</span>
                          <button theme="dialogue" color="negative" icon="times" (click)="onFilterClear(column)" *ngIf="column.filter">
                            {{ labels.clear }}
                          </button>
                        </div>
                      </item>
                      <item
                        [ngClass]="{ active: isFilterActive(column, option) }"
                        *ngFor="let option of column.options"
                        (click)="onFilterClick(column, option)"
                        [keepOpen]="option.range"
                        [hidden]="column.calenderShow"
                        [attr.data-automation-id]="option?.label || option"
                      >
                        {{ option?.label || option }} <i class="bhi-check" *ngIf="isFilterActive(column, option)"></i>
                      </item>
                      <div class="calendar-container" [hidden]="!column.calenderShow">
                        <div (click)="column.calenderShow = false"><i class="bhi-previous"></i>{{ labels.backToPresetFilters }}</div>
                        <novo-date-picker
                          #rangePicker
                          (onSelect)="onCalenderSelect(column, $event)"
                          [(ngModel)]="column.filter"
                          range="true"
                        ></novo-date-picker>
                      </div>
                    </list>
                  </novo-dropdown>
                </div>
              </th>
            </tr>
          </thead>
          <!-- TABLE DATA -->
          <tbody *ngIf="!dataProvider.isEmpty() || editing">
            <tr
              class="table-selection-row"
              *ngIf="config.rowSelectionStyle === 'checkbox' && showSelectAllMessage && config.selectAllEnabled"
              data-automation-id="table-selection-row"
            >
              <td colspan="100%">
                {{ labels.selectedRecords(selected.length) }}
                <a (click)="selectAll(true)" data-automation-id="all-matching-records">{{ labels.totalRecords(dataProvider.total) }}</a>
              </td>
            </tr>
            <ng-template ngFor let-row="$implicit" let-i="index" [ngForOf]="rows">
              <tr
                class="table-row"
                [ngClass]="row.customClass || ''"
                [id]="name + '-' + row[rowIdentifier]"
                [attr.data-automation-id]="row.id"
                (click)="rowClickHandler(row)"
                [class.active]="row.id === activeId"
              >
                <td class="row-actions" *ngIf="config.hasDetails">
                  <button theme="icon" icon="next" (click)="row._expanded = !row._expanded" *ngIf="!row._expanded"></button>
                  <button theme="icon" icon="sort-desc" (click)="row._expanded = !row._expanded" *ngIf="row._expanded"></button>
                </td>
                <td class="row-actions checkbox" *ngIf="config.rowSelectionStyle === 'checkbox'">
                  <novo-checkbox
                    [(ngModel)]="row._selected"
                    (ngModelChange)="rowSelectHandler(row)"
                    data-automation-id="select-row-checkbox"
                  ></novo-checkbox>
                </td>
                <td
                  *ngFor="let column of columns"
                  [attr.data-automation-id]="column.id || column.name"
                  [class.novo-form-row]="editable"
                  [hidden]="isColumnHidden(column)"
                >
                  <novo-table-cell
                    *ngIf="row._editing && !row._editing[column.name]"
                    [hasEditor]="editable"
                    [column]="column"
                    [row]="row"
                    [form]="getRowControlForm(i)"
                  ></novo-table-cell>
                  <novo-control
                    *ngIf="row._editing && row._editing[column.name]"
                    condensed="true"
                    [form]="getRowControlForm(i)"
                    [control]="row.controls[column.name]"
                  ></novo-control>
                </td>
              </tr>
              <tr
                class="details-row"
                *ngIf="config.hasDetails"
                [hidden]="!row._expanded"
                [attr.data-automation-id]="'details-row-' + row.id"
              >
                <td class="row-actions"></td>
                <td [attr.colspan]="config.rowSelectionStyle === 'checkbox' ? columns.length + 1 : columns.length">
                  <novo-row-details [data]="row" [renderer]="config.detailsRenderer"></novo-row-details>
                </td>
              </tr>
            </ng-template>
          </tbody>
          <!-- NO TABLE DATA PLACEHOLDER -->
          <tbody
            class="table-message"
            *ngIf="dataProvider.isEmpty() && !dataProvider.isFiltered() && !editing"
            data-automation-id="empty-table"
          >
            <tr>
              <td colspan="100%">
                <div #emptymessage><ng-content select="[table-empty-message]"></ng-content></div>
                <div class="table-empty-message" *ngIf="emptymessage.childNodes.length == 0">
                  <h4><i class="bhi-search-question"></i> {{ labels.emptyTableMessage }}</h4>
                </div>
              </td>
            </tr>
          </tbody>
          <!-- NO MATCHING RECORDS -->
          <tbody class="table-message" *ngIf="dataProvider.isEmpty() && dataProvider.isFiltered()" data-automation-id="empty-table">
            <tr>
              <td colspan="100%">
                <div #nomatchmessage><ng-content select="[table-no-matching-records-message]"></ng-content></div>
                <div class="no-matching-records" *ngIf="nomatchmessage.childNodes.length == 0">
                  <h4><i class="bhi-search-question"></i> {{ labels.noMatchingRecordsMessage }}</h4>
                </div>
              </td>
            </tr>
          </tbody>
          <!-- TABLE DATA ERROR PLACEHOLDER -->
          <tbody class="table-message" *ngIf="dataProvider.hasErrors()" data-automation-id="table-errors">
            <tr>
              <td colspan="100%">
                <div #errormessage><ng-content select="[table-error-message]"></ng-content></div>
                <div class="table-error-message" *ngIf="errormessage.childNodes.length == 0">
                  <h4><i class="bhi-caution"></i> {{ labels.erroredTableMessage }}</h4>
                </div>
              </td>
            </tr>
          </tbody>
          <tfoot *ngIf="!config.footers" [ngClass]="dataProvider.length % 2 == 0 ? 'odd' : 'even'">
            <tr>
              <td colspan="100%">
                <ng-content select="novo-table-footer"></ng-content>
              </td>
            </tr>
          </tfoot>
          <tfoot *ngFor="let footer of footers; let i = index" class="novo-table-total-footer">
            <tr>
              <td *ngFor="let column of columns" [attr.data-automation-id]="(column.id || column.name) + '-total-' + i">
                {{ footer[column.name] }}
              </td>
            </tr>
          </tfoot>
        </table>
      </novo-form>
    </div>
  `,
            }]
    }], function () { return [{ type: NovoLabelService }, { type: FormUtils }, { type: FormBuilder }]; }, { filterInputs: [{
            type: ViewChildren,
            args: ['filterInput', { read: ElementRef }]
        }], config: [{
            type: Input
        }], columns: [{
            type: Input
        }], theme: [{
            type: Input
        }], skipSortAndFilterClear: [{
            type: Input
        }], mode: [{
            type: Input
        }], editable: [{
            type: Input
        }], rowIdentifier: [{
            type: Input
        }], name: [{
            type: Input
        }], onRowClick: [{
            type: Output
        }], onRowSelect: [{
            type: Output
        }], onTableChange: [{
            type: Output
        }], rows: [{
            type: Input
        }], dataProvider: [{
            type: Input
        }] }); })();

// NG2
class NovoToastModule {
}
NovoToastModule.ɵmod = ɵɵdefineNgModule({ type: NovoToastModule });
NovoToastModule.ɵinj = ɵɵdefineInjector({ factory: function NovoToastModule_Factory(t) { return new (t || NovoToastModule)(); }, imports: [[CommonModule, NovoButtonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoToastModule, { declarations: [NovoToastElement], imports: [CommonModule, NovoButtonModule], exports: [NovoToastElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoToastModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, NovoButtonModule],
                declarations: [NovoToastElement],
                exports: [NovoToastElement],
            }]
    }], null, null); })();
ɵɵsetComponentScope(NovoToastElement, [NgClass, NgComponentOutlet, NgForOf, NgIf, NgTemplateOutlet, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase, NovoButtonElement, NovoToastElement], [AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, TitleCasePipe, CurrencyPipe, DatePipe, I18nPluralPipe, I18nSelectPipe, KeyValuePipe]);

// NG2
class NovoTableModule {
}
NovoTableModule.ɵmod = ɵɵdefineNgModule({ type: NovoTableModule });
NovoTableModule.ɵinj = ɵɵdefineInjector({ factory: function NovoTableModule_Factory(t) { return new (t || NovoTableModule)(); }, imports: [[
            CommonModule,
            FormsModule,
            NovoFormModule,
            NovoTableExtrasModule,
            NovoToastModule,
            NovoButtonModule,
            NovoTooltipModule,
            NovoDropdownModule,
            NovoLoadingModule,
            NovoDatePickerModule,
            NovoFormExtrasModule,
            TextMaskModule,
            IMaskDirectiveModule,
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoTableModule, { declarations: [NovoTableElement], imports: [CommonModule,
        FormsModule,
        NovoFormModule,
        NovoTableExtrasModule,
        NovoToastModule,
        NovoButtonModule,
        NovoTooltipModule,
        NovoDropdownModule,
        NovoLoadingModule,
        NovoDatePickerModule,
        NovoFormExtrasModule,
        TextMaskModule,
        IMaskDirectiveModule], exports: [NovoTableElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTableModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    NovoFormModule,
                    NovoTableExtrasModule,
                    NovoToastModule,
                    NovoButtonModule,
                    NovoTooltipModule,
                    NovoDropdownModule,
                    NovoLoadingModule,
                    NovoDatePickerModule,
                    NovoFormExtrasModule,
                    TextMaskModule,
                    IMaskDirectiveModule,
                ],
                declarations: [NovoTableElement],
                exports: [NovoTableElement],
            }]
    }], null, null); })();

class TestCmp {
}
TestCmp.ɵfac = function TestCmp_Factory(t) { return new (t || TestCmp)(); };
TestCmp.ɵcmp = ɵɵdefineComponent({ type: TestCmp, selectors: [["test-cmp"]], decls: 1, vars: 0, consts: [["bhUnless", "false"]], template: function TestCmp_Template(rf, ctx) { if (rf & 1) {
        ɵɵelement(0, "div", 0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(TestCmp, [{
        type: Component,
        args: [{
                selector: 'test-cmp',
                template: ` <div bhUnless="false"></div> `,
            }]
    }], null, null); })();

// NG2
class Unless {
    constructor(templateRef, viewContainer, security) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.security = security;
        this.permissions = '';
        this.isDisplayed = false;
        this.security.subscribe(this.check.bind(this));
    }
    set bhUnless(value) {
        this.permissions = value || '';
        this.check();
    }
    check() {
        let display = false;
        if (~this.permissions.indexOf('||')) {
            const ps = this.permissions.split('||');
            for (const p of ps) {
                if (this.security.has(p.trim())) {
                    display = true;
                }
            }
        }
        else {
            display = this.permissions.split('&&').every((p) => this.security.has(p.trim()));
        }
        if (display) {
            if (!this.isDisplayed) {
                this.isDisplayed = true;
                this.viewContainer.createEmbeddedView(this.templateRef);
            }
        }
        else {
            this.isDisplayed = false;
            this.viewContainer.clear();
        }
    }
}
Unless.ɵfac = function Unless_Factory(t) { return new (t || Unless)(ɵɵdirectiveInject(TemplateRef), ɵɵdirectiveInject(ViewContainerRef), ɵɵdirectiveInject(Security)); };
Unless.ɵdir = ɵɵdefineDirective({ type: Unless, selectors: [["", "bhUnless", ""]], inputs: { bhUnless: "bhUnless" } });
/*@__PURE__*/ (function () { ɵsetClassMetadata(Unless, [{
        type: Directive,
        args: [{
                selector: '[bhUnless]',
            }]
    }], function () { return [{ type: TemplateRef }, { type: ViewContainerRef }, { type: Security }]; }, { bhUnless: [{
            type: Input
        }] }); })();

// NG2
class UnlessModule {
}
UnlessModule.ɵmod = ɵɵdefineNgModule({ type: UnlessModule });
UnlessModule.ɵinj = ɵɵdefineInjector({ factory: function UnlessModule_Factory(t) { return new (t || UnlessModule)(); }, imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(UnlessModule, { declarations: [Unless], imports: [CommonModule], exports: [Unless] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(UnlessModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [Unless],
                exports: [Unless],
            }]
    }], null, null); })();

// NG2
/**
 * @classdesc
 * Renders data appropriately based on the data type found in Meta
 * All data types defined by bullhorn should be supported:
 *
 * - **String**: trims value and returns
 * - **Integer**: return value
 * - **Double**: return value fixed to 2 decimals
 * - **BigDecimal**: return value fixed to 2 decimals
 * - **Address**: only city and/or state returned
 * - **Address1**: only city and/or state returned
 * - **AddressWithoutCountry**: only city and/or state returned
 * - **Currency**: put a $ in front
 * - **Percentage**: divide by 100 fix to 2 decimals place and return
 * - **Options**: returns the appropriate 'label' for the 'value' from 'options'
 * - **Array**: returns list comma separated
 * - **DateTime**: formats the date
 * - **TimeStamp**: formats the date
 * - **ToOne**: return the entity specific name (ie. name, firstName lastName, title, ...)
 * - **ToMany**: return an array of the entity specific names (ie. name, firstName lastName, title, ...)
 *
 * @example
 * ```
 * {{ expression | render:field }}
 * ```
 */
class RenderPipe {
    constructor(changeDetector, sanitizationService, labels) {
        this.changeDetector = changeDetector;
        this.sanitizationService = sanitizationService;
        this.labels = labels;
    }
    equals(objectOne, objectTwo) {
        if (objectOne === objectTwo) {
            return true;
        }
        if (objectOne === null || objectTwo === null) {
            return false;
        }
        if (objectOne !== objectOne && objectTwo !== objectTwo) {
            return true;
        }
        const t1 = typeof objectOne;
        const t2 = typeof objectTwo;
        let length;
        let key;
        let keySet;
        if (t1 === t2 && t1 === 'object') {
            if (Array.isArray(objectOne)) {
                if (!Array.isArray(objectTwo)) {
                    return false;
                }
                length = objectOne.length;
                if (length === objectTwo.length) {
                    for (key = 0; key < length; key++) {
                        if (!this.equals(objectOne[key], objectTwo[key])) {
                            return false;
                        }
                    }
                    return true;
                }
            }
            else {
                if (Array.isArray(objectTwo)) {
                    return false;
                }
                keySet = Object.create(null);
                for (key in objectOne) {
                    if (objectOne[key]) {
                        if (!this.equals(objectOne[key], objectTwo[key])) {
                            return false;
                        }
                        keySet[key] = true;
                    }
                }
                for (key in objectTwo) {
                    if (!(key in keySet) && typeof objectTwo[key] !== 'undefined') {
                        return false;
                    }
                }
                return true;
            }
        }
        return false;
    }
    getEntityLabel(item, entity) {
        switch (entity) {
            case 'CorporateUser':
            case 'ClientContact':
            case 'ClientContact1':
            case 'ClientContact2':
            case 'ClientContact3':
            case 'ClientContact4':
            case 'ClientContact5':
            case 'Lead':
            case 'Candidate':
            case 'Person':
                return `${item.firstName || ''} ${item.lastName || ''}`.trim();
            case 'ClientCorporation':
            case 'ClientCorporation1':
            case 'ClientCorporation2':
            case 'ClientCorporation3':
            case 'ClientCorporation4':
            case 'ClientCorporation5':
                return `${item.name || ''}`.trim();
            case 'JobOrder':
            case 'JobOrder1':
            case 'JobOrder2':
            case 'JobOrder3':
            case 'JobOrder4':
            case 'JobOrder5':
            case 'Opportunity':
                return `${item.title || ''}`.trim();
            case 'Placement':
                let label = '';
                if (item.candidate) {
                    label = `${item.candidate.firstName} ${item.candidate.lastName}`.trim();
                }
                if (item.jobOrder) {
                    label = `${label} - ${item.jobOrder.title}`.trim();
                }
                return label;
            default:
                return '';
        }
    }
    /**
     * Define the fields to set or retrieve for the given entity. Getter and Setter methods will automagically
     * be set up on the entity once the fields are defined.
     * @param args - fields can either be sent as a list of arguments or as an Array
     * @return text
     */
    render(value, args) {
        let type = null;
        let text = value;
        // Handle when we don't have meta, but passing an entity
        if (value && value._subtype && !args) {
            return this.getEntityLabel(value, value._subtype);
        }
        // Stop logic for nulls
        if (value === undefined || value === null || !args) {
            return text;
        }
        if (args.formatter && typeof args.formatter === 'function') {
            return args.formatter(value, args);
        }
        // TODO move this to a service
        // Determine TYPE because its not just 1 value that determines this.
        if (args.type === 'TO_MANY') {
            type = 'ToMany';
        }
        else if (args.type === 'TO_ONE') {
            type = args.associatedEntity.entity;
        }
        else if (args.dataSpecialization === 'DATETIME') {
            type = 'DateTime';
        }
        else if (args.dataSpecialization === 'YEAR') {
            type = 'Year';
        }
        else if (args.dataSpecialization === 'TIME') {
            type = 'Time';
        }
        else if (args.dataSpecialization === 'DATE' && args.dataType === 'Date') {
            type = 'Date';
        }
        else if (args.dataType === 'Timestamp') {
            type = 'Timestamp';
        }
        else if (['mobile', 'phone', 'phone1', 'phone2', 'phone3', 'workPhone'].indexOf(args.name) > -1) {
            type = 'Phone';
        }
        else if (args.name && args.name.substring(0, 5) === 'email') {
            type = 'Email';
        }
        else if ((args.name && args.name === 'address.countryID') || args.optionsType === 'Country') {
            type = 'Country';
        }
        else if (args.optionsType === 'SkillText') {
            type = 'SkillText';
        }
        else if (args.options || args.inputType === 'SELECT' || args.inputType === 'CHECKBOX') {
            type = 'Options';
        }
        else if (['MONEY', 'PERCENTAGE', 'HTML', 'SSN'].indexOf(args.dataSpecialization) > -1) {
            type = this.capitalize(args.dataSpecialization.toLowerCase());
        }
        else {
            type = args.dataType || 'default';
        }
        // Transform data here
        try {
            switch (type) {
                case 'Address':
                case 'Address1':
                case 'AddressWithoutCountry':
                case 'SecondaryAddress':
                case 'BillingAddress':
                    const country = findByCountryId(Number(value.countryName));
                    text = '';
                    if (value.address1 || value.address2) {
                        text += `${value.address1 || ''} ${value.address2 || ''}<br />\n`;
                    }
                    text += `${value.city || ''} ${value.state || ''} ${value.zip || ''}${value.city || value.state || value.zip ? '<br />\n' : ''}`;
                    text += `${country ? country.name : value.countryName || ''}${country || value.countryName ? '<br />\n' : ''}`;
                    text = this.sanitizationService.bypassSecurityTrustHtml(text.trim());
                    break;
                case 'DateTime':
                case 'Timestamp':
                    text = this.labels.formatDateShort(value);
                    break;
                case 'Date':
                    text = this.labels.formatDate(new Date(value));
                    break;
                case 'Year':
                    text = new Date(value).getFullYear();
                    break;
                case 'Time':
                    text = this.labels.formatTimeWithFormat(value, { hour: 'numeric', minute: 'numeric' });
                    break;
                case 'Phone':
                case 'Email':
                    text = value;
                    break;
                case 'Money':
                    text = this.labels.formatCurrency(value);
                    break;
                case 'Percentage':
                    text = this.labels.formatNumber(parseFloat(value).toString(), { style: 'percent', minimumFractionDigits: 2 });
                    break;
                case 'Double':
                case 'BigDecimal':
                    text = this.labels.formatNumber(value, { minimumFractionDigits: this.getNumberDecimalPlaces(value) });
                    break;
                case 'Integer':
                    text = value;
                    break;
                case 'BusinessSector':
                case 'Category':
                case 'Certification':
                case 'ClientCorporation':
                case 'CorporationDepartment':
                case 'DistributionList':
                case 'Skill':
                case 'Tearsheet':
                case 'Specialty':
                    text = value.label || value.name || '';
                    break;
                case 'SkillText':
                    text = Array.isArray(value) ? value.join(', ') : value;
                    break;
                case 'Lead':
                case 'Candidate':
                case 'ClientContact':
                case 'CorporateUser':
                case 'Person':
                    text = value.label || `${value.firstName || ''} ${value.lastName || ''}`;
                    break;
                case 'Opportunity':
                case 'JobOrder':
                    text = value.label || value.title || '';
                    break;
                case 'Placement':
                    if (value.candidate) {
                        text = `${value.candidate.firstName || ''} ${value.candidate.lastName || ''}`;
                    }
                    if (value.jobOrder) {
                        text = value.candidate ? `${text} - ${value.jobOrder.title || ''}` : `${value.jobOrder.title || ''}`;
                    }
                    break;
                case 'JobSubmission':
                    text =
                        value.label ||
                            `${value.jobOrder ? `${value.jobOrder.title} - ` : ''} ${value.candidate ? value.candidate.firstName : ''} ${value.candidate ? value.candidate.lastName : ''}`;
                    break;
                case 'WorkersCompensationRate':
                    text = `${value.compensation ? `${value.compensation.code} - ` : ''} ${value.compensation ? value.compensation.name : ''}`;
                    break;
                case 'Options':
                    text = this.options(value, args.options, args);
                    break;
                case 'ToMany':
                    if (['Candidate', 'CorporateUser', 'Person'].indexOf(args.associatedEntity.entity) > -1) {
                        text = this.concat(value.data, 'firstName', 'lastName');
                        if (value.data.length < value.total) {
                            text = text + ', ' + this.labels.getToManyPlusMore({ quantity: value.total - value.data.length });
                        }
                    }
                    else if (['Category', 'BusinessSector', 'Skill', 'Specialty', 'ClientCorporation', 'CorporationDepartment'].indexOf(args.associatedEntity.entity) > -1) {
                        text = this.concat(value.data, 'name');
                        if (value.data.length < value.total) {
                            text = text + ', ' + this.labels.getToManyPlusMore({ quantity: value.total - value.data.length });
                        }
                    }
                    else if (args.associatedEntity.entity === 'MailListPushHistoryDetail') {
                        text = this.concat(value.data, 'externalListName');
                    }
                    else {
                        text = `${value.total || ''}`;
                    }
                    break;
                case 'Country':
                    const countryObj = findByCountryId(Number(value));
                    text = countryObj ? countryObj.name : value;
                    break;
                case 'Html':
                    if (Array.isArray(value)) {
                        value = value.join(' ');
                    }
                    if (typeof text === 'string') {
                        text = this.sanitizationService.bypassSecurityTrustHtml(value.replace(/\<a/gi, '<a target="_blank"'));
                    }
                    break;
                case 'CandidateComment':
                    text = value.comments ? `${this.labels.formatDateShort(value.dateLastModified)} (${value.name}) - ${value.comments}` : '';
                    break;
                default:
                    text = value.trim ? value.trim() : value;
                    break;
            }
            return text;
        }
        catch (e) {
            console.error(`WARNING: There was a problem rendering the value of the field: ${args.label}. Please check the configuration`);
            console.error(e);
            return text;
        }
    }
    updateValue(value, args) {
        this.value = this.render(value, args);
        this.changeDetector.markForCheck();
    }
    transform(value, args) {
        if (value === undefined || value === null) {
            return '';
        }
        if (this.equals(value, this.lastValue) && this.equals(args, this.lastArgs)) {
            return this.value;
        }
        this.lastValue = value;
        this.lastArgs = args;
        this.updateValue(this.lastValue, this.lastArgs);
        return this.value;
    }
    /**
     * Simple function concat a list of fields from a list of objects
     * @param list - the list of values to use
     * @param fields - list of fields to extract
     */
    concat(list, ...fields) {
        const data = [];
        for (const item of list) {
            const label = [];
            for (const field of fields) {
                label.push(`${item[field]}`);
            }
            data.push(label.join(' '));
        }
        return data.join(', ');
    }
    /**
     * Simple function to look up the **label** to display from options
     * @param value - the value to find
     * @param list - list of options (label/value pairs)
     */
    options(value, list, args) {
        if (!Array.isArray(value)) {
            value = [value];
        }
        try {
            return value.map((item) => {
                for (const option of list) {
                    if (option.value === item) {
                        return option.label;
                    }
                }
                return item;
            });
        }
        catch (e) {
            if (!args.optionsType) {
                throw Error(e);
            }
            return value;
        }
    }
    getNumberDecimalPlaces(value) {
        let decimalPlaces;
        if (value) {
            const numberString = parseFloat(value).toString();
            const decimalPlace = (numberString || '').split('.')[1] || '';
            decimalPlaces = decimalPlace.length;
        }
        return decimalPlaces || 1;
    }
    /**
     * Capitalizes the first letter
     */
    capitalize(value) {
        return value.charAt(0).toUpperCase() + value.slice(1);
    }
}
RenderPipe.ɵfac = function RenderPipe_Factory(t) { return new (t || RenderPipe)(ɵɵinjectPipeChangeDetectorRef(), ɵɵdirectiveInject(DomSanitizer), ɵɵdirectiveInject(NovoLabelService)); };
RenderPipe.ɵpipe = ɵɵdefinePipe({ name: "render", type: RenderPipe, pure: false });
RenderPipe.ɵprov = ɵɵdefineInjectable({ token: RenderPipe, factory: RenderPipe.ɵfac });
/*@__PURE__*/ (function () { ɵsetClassMetadata(RenderPipe, [{
        type: Pipe,
        args: [{
                name: 'render',
                pure: false,
            }]
    }, {
        type: Injectable
    }], function () { return [{ type: ChangeDetectorRef }, { type: DomSanitizer }, { type: NovoLabelService }]; }, null); })();

// NG2
function EntityList_div_0_a_1_Template(rf, ctx) { if (rf & 1) {
    const _r7 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "a", 4);
    ɵɵlistener("click", function EntityList_div_0_a_1_Template_a_click_0_listener() { ɵɵrestoreView(_r7); const entity_r1 = ɵɵnextContext().$implicit; const ctx_r5 = ɵɵnextContext(); return ctx_r5.openLink(entity_r1); });
    ɵɵelement(1, "i");
    ɵɵtext(2);
    ɵɵpipe(3, "render");
    ɵɵelementEnd();
} if (rf & 2) {
    const entity_r1 = ɵɵnextContext().$implicit;
    const ctx_r2 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵclassMapInterpolate1("bhi-circle ", entity_r1.class, "");
    ɵɵadvance(1);
    ɵɵtextInterpolate1("", ɵɵpipeBind2(3, 4, entity_r1, ctx_r2.metaDisplay), " ");
} }
function EntityList_div_0_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵelement(1, "i");
    ɵɵtext(2);
    ɵɵpipe(3, "render");
    ɵɵelementEnd();
} if (rf & 2) {
    const entity_r1 = ɵɵnextContext().$implicit;
    const ctx_r3 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵclassMapInterpolate1("bhi-circle ", entity_r1.class, "");
    ɵɵadvance(1);
    ɵɵtextInterpolate1("", ɵɵpipeBind2(3, 4, entity_r1, ctx_r3.metaDisplay), " ");
} }
function EntityList_div_0_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵtext(1);
    ɵɵpipe(2, "render");
    ɵɵelementEnd();
} if (rf & 2) {
    const entity_r1 = ɵɵnextContext().$implicit;
    const ctx_r4 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ɵɵpipeBind2(2, 1, entity_r1, ctx_r4.metaDisplay), " ");
} }
function EntityList_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 1);
    ɵɵtemplate(1, EntityList_div_0_a_1_Template, 4, 7, "a", 2);
    ɵɵtemplate(2, EntityList_div_0_span_2_Template, 4, 7, "span", 3);
    ɵɵtemplate(3, EntityList_div_0_span_3_Template, 3, 4, "span", 3);
    ɵɵelementEnd();
} if (rf & 2) {
    const entity_r1 = ctx.$implicit;
    ɵɵadvance(1);
    ɵɵproperty("ngIf", entity_r1.isLinkable);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !entity_r1.isLinkable && entity_r1.personSubtype);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !entity_r1.isLinkable && !entity_r1.personSubtype);
} }
class EntityList {
    constructor() {
        this.baseEntity = '';
        this.ENTITY_SHORT_NAMES = {
            Lead: 'lead',
            ClientContact: 'contact',
            ClientContact1: 'contact',
            ClientContact2: 'contact',
            ClientContact3: 'contact',
            ClientContact4: 'contact',
            ClientContact5: 'contact',
            ClientCorporation: 'company',
            ClientCorporation1: 'company',
            ClientCorporation2: 'company',
            ClientCorporation3: 'company',
            ClientCorporation4: 'company',
            ClientCorporation5: 'company',
            Opportunity: 'opportunity',
            Task: 'task',
            Note: 'note',
            CorporateUser: 'user',
            Candidate: 'candidate',
            JobOrder: 'job',
            JobOrder1: 'job',
            JobOrder2: 'job',
            JobOrder3: 'job',
            JobOrder4: 'job',
            JobOrder5: 'job',
            Placement: 'placement',
            JobSubmission: 'submission',
            CandidateReference: 'references',
            DistributionList: 'distributionList',
            Appointment: 'appointment',
        };
    }
    ngOnInit() {
        // use a local copy of the meta to set the type to TO_ONE for proper display
        // without changing the input object
        this.metaDisplay = Helpers.deepClone(this.meta);
        this.metaDisplay.type = 'TO_ONE';
        this.baseEntity = this.meta.associatedEntity.entity;
        for (const entity of this.data.data) {
            entity.isLinkable = this.isLinkable(entity);
            entity.class = this.getClass(entity);
        }
    }
    getClass(entity) {
        return this.ENTITY_SHORT_NAMES[entity.personSubtype];
    }
    openLink(entity) {
        entity.openLink(entity);
    }
    isLinkable(entity) {
        return entity.openLink;
    }
}
EntityList.ɵfac = function EntityList_Factory(t) { return new (t || EntityList)(); };
EntityList.ɵcmp = ɵɵdefineComponent({ type: EntityList, selectors: [["novo-entity-list"]], inputs: { data: "data", meta: "meta" }, decls: 1, vars: 1, consts: [["class", "entity", 4, "ngFor", "ngForOf"], [1, "entity"], [3, "click", 4, "ngIf"], [4, "ngIf"], [3, "click"]], template: function EntityList_Template(rf, ctx) { if (rf & 1) {
        ɵɵtemplate(0, EntityList_div_0_Template, 4, 3, "div", 0);
    } if (rf & 2) {
        ɵɵproperty("ngForOf", ctx.data.data);
    } }, directives: [NgForOf, NgIf], pipes: [RenderPipe], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(EntityList, [{
        type: Component,
        args: [{
                selector: 'novo-entity-list',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
    <div *ngFor="let entity of data.data" class="entity">
      <a *ngIf="entity.isLinkable" (click)="openLink(entity)">
        <i class="bhi-circle {{ entity.class }}"></i>{{ entity | render: metaDisplay }}
      </a>
      <span *ngIf="!entity.isLinkable && entity.personSubtype">
        <i class="bhi-circle {{ entity.class }}"></i>{{ entity | render: metaDisplay }}
      </span>
      <span *ngIf="!entity.isLinkable && !entity.personSubtype">
        {{ entity | render: metaDisplay }}
      </span>
    </div>
  `,
            }]
    }], function () { return []; }, { data: [{
            type: Input
        }], meta: [{
            type: Input
        }] }); })();

function NovoValueElement_div_1_i_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i");
} if (rf & 2) {
    const ctx_r3 = ɵɵnextContext(2);
    ɵɵclassMapInterpolate1("bhi-circle ", ctx_r3.meta.entityIconClass, "");
} }
function NovoValueElement_div_1_a_5_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "a", 10);
    ɵɵlistener("click", function NovoValueElement_div_1_a_5_Template_a_click_0_listener() { ɵɵrestoreView(_r8); const ctx_r7 = ɵɵnextContext(2); return ctx_r7.openLink(); });
    ɵɵpipe(1, "render");
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵɵnextContext(2);
    ɵɵproperty("innerHTML", ɵɵpipeBind2(1, 1, ctx_r4.data, ctx_r4.meta), ɵɵsanitizeHtml);
} }
function NovoValueElement_div_1_a_6_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "a", 11);
    ɵɵpipe(1, "render");
} if (rf & 2) {
    const ctx_r5 = ɵɵnextContext(2);
    ɵɵproperty("href", ctx_r5.url, ɵɵsanitizeUrl)("innerHTML", ɵɵpipeBind2(1, 2, ctx_r5.data, ctx_r5.meta), ɵɵsanitizeHtml);
} }
function NovoValueElement_div_1_novo_entity_list_7_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-entity-list", 12);
} if (rf & 2) {
    const ctx_r6 = ɵɵnextContext(2);
    ɵɵproperty("data", ctx_r6.data)("meta", ctx_r6.meta);
} }
function NovoValueElement_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 4);
    ɵɵelementStart(1, "novo-label");
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementStart(3, "span", 5);
    ɵɵtemplate(4, NovoValueElement_div_1_i_4_Template, 1, 3, "i", 6);
    ɵɵtemplate(5, NovoValueElement_div_1_a_5_Template, 2, 4, "a", 7);
    ɵɵtemplate(6, NovoValueElement_div_1_a_6_Template, 2, 5, "a", 8);
    ɵɵelementEnd();
    ɵɵtemplate(7, NovoValueElement_div_1_novo_entity_list_7_Template, 1, 2, "novo-entity-list", 9);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r0.meta.label);
    ɵɵadvance(2);
    ɵɵproperty("ngIf", ctx_r0.meta.showEntityIcon);
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", ctx_r0.NOVO_VALUE_TYPE.INTERNAL_LINK);
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", ctx_r0.NOVO_VALUE_TYPE.LINK);
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", ctx_r0.NOVO_VALUE_TYPE.ENTITY_LIST);
} }
function NovoValueElement_div_2_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "div", 15);
    ɵɵpipe(1, "render");
} if (rf & 2) {
    const ctx_r9 = ɵɵnextContext(2);
    ɵɵproperty("innerHTML", ɵɵpipeBind2(1, 1, ctx_r9.data, ctx_r9.meta), ɵɵsanitizeHtml);
} }
function NovoValueElement_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 13);
    ɵɵelementStart(1, "novo-label");
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵtemplate(3, NovoValueElement_div_2_div_3_Template, 2, 4, "div", 14);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵproperty("ngClass", ctx_r1.customClass);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r1.meta.label);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r1.isDefault);
} }
function NovoValueElement_div_3_i_1_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "i", 18);
    ɵɵlistener("click", function NovoValueElement_div_3_i_1_Template_i_click_0_listener() { ɵɵrestoreView(_r13); const icon_r11 = ctx.$implicit; const ctx_r12 = ɵɵnextContext(2); return ctx_r12.onValueClick(icon_r11); });
    ɵɵelementEnd();
} if (rf & 2) {
    const icon_r11 = ctx.$implicit;
    const ctx_r10 = ɵɵnextContext(2);
    ɵɵclassMap(ctx_r10.iconClass(icon_r11));
} }
function NovoValueElement_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 16);
    ɵɵtemplate(1, NovoValueElement_div_3_i_1_Template, 1, 2, "i", 17);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r2.meta.icons);
} }
var NOVO_VALUE_TYPE;
(function (NOVO_VALUE_TYPE) {
    NOVO_VALUE_TYPE[NOVO_VALUE_TYPE["DEFAULT"] = 0] = "DEFAULT";
    NOVO_VALUE_TYPE[NOVO_VALUE_TYPE["ENTITY_LIST"] = 1] = "ENTITY_LIST";
    NOVO_VALUE_TYPE[NOVO_VALUE_TYPE["LINK"] = 2] = "LINK";
    NOVO_VALUE_TYPE[NOVO_VALUE_TYPE["INTERNAL_LINK"] = 3] = "INTERNAL_LINK";
})(NOVO_VALUE_TYPE || (NOVO_VALUE_TYPE = {}));
var NOVO_VALUE_THEME;
(function (NOVO_VALUE_THEME) {
    NOVO_VALUE_THEME[NOVO_VALUE_THEME["DEFAULT"] = 0] = "DEFAULT";
    NOVO_VALUE_THEME[NOVO_VALUE_THEME["MOBILE"] = 1] = "MOBILE";
})(NOVO_VALUE_THEME || (NOVO_VALUE_THEME = {}));
class NovoValueElement {
    constructor() {
        this.meta = { type: 'SCALAR', label: '' }; // TODO use interface
        this.theme = NOVO_VALUE_THEME.DEFAULT;
        this.row = false;
        this.NOVO_VALUE_TYPE = NOVO_VALUE_TYPE;
        this.NOVO_VALUE_THEME = NOVO_VALUE_THEME;
        this.customClass = '';
    }
    set label(lbl) {
        this.meta.label = lbl;
    }
    get label() {
        return this.meta.label;
    }
    set type(typ) {
        this.meta.type = typ;
    }
    get type() {
        return this.meta.type;
    }
    ngOnInit() {
        if (Helpers.isEmpty(this.meta)) {
            this.meta = {
                label: '',
            };
        }
    }
    get isMobile() {
        return this.theme === NOVO_VALUE_THEME.MOBILE;
    }
    iconClass(icon) {
        let iconClass = '';
        if (icon && icon.iconCls) {
            iconClass = `bhi-${icon.iconCls} actions`;
            if (icon.onIconClick) {
                iconClass = `${iconClass} clickable`;
            }
            return iconClass;
        }
        return iconClass;
    }
    get isDefault() {
        return true;
    }
    get showLabel() {
        return (this._type === NOVO_VALUE_TYPE.INTERNAL_LINK || this._type === NOVO_VALUE_TYPE.LINK || this._type === NOVO_VALUE_TYPE.ENTITY_LIST);
    }
    get showIcon() {
        return this.meta && this.meta.icons && this.meta.icons.length && !Helpers.isEmpty(this.data);
    }
    onValueClick(icon) {
        if (icon.onIconClick && typeof icon.onIconClick === 'function') {
            icon.onIconClick(this.data, this.meta);
        }
    }
    openLink() {
        if (this.meta && this.meta.openLink && typeof this.meta.openLink === 'function') {
            this.meta.openLink(this.data, this.meta);
        }
    }
    ngOnChanges(changes) {
        if (this.meta && this.isLinkField(this.meta, this.data)) {
            this._type = NOVO_VALUE_TYPE.LINK;
            // Make sure the value has a protocol, otherwise the URL will be relative
            const hasProtocol = new RegExp('^(http|https)://', 'i');
            if (!hasProtocol.test(this.data)) {
                this.url = `http://${this.data}`;
            }
            else {
                this.url = this.data;
            }
        }
        else if (this.isEntityList(this.meta.type)) {
            this._type = NOVO_VALUE_TYPE.ENTITY_LIST;
        }
        else if (this.isHTMLField(this.meta)) {
            this.customClass = this.meta.customClass ? this.meta.customClass : '';
            if (this.meta.stripHTML && this.data && this.data.replace) {
                this.data = this.data.replace(/<(?!style|\/style).+?>/gi, '').trim();
            }
        }
        else if (this.meta && this.meta.associatedEntity) {
            switch (this.meta.associatedEntity.entity) {
                case 'ClientCorporation':
                case 'ClientContact':
                case 'Candidate':
                case 'Opportunity':
                case 'JobOrder':
                case 'Placement':
                case 'Lead':
                    this._type = NOVO_VALUE_TYPE.INTERNAL_LINK;
                    break;
                default:
                    break;
            }
        }
    }
    isLinkField(field, data) {
        const linkFields = ['companyURL', 'clientCorporationCompanyURL'];
        const regex = new RegExp('^(https?://(?:www.|(?!www))[^s.]+.[^s]{2,}|www.[^s]+.[^s]{2,})$', 'gi');
        const isURL = Helpers.isString(data) && regex.exec(data.trim());
        return linkFields.indexOf(field.name) > -1 || !!isURL || field.type === NOVO_VALUE_TYPE.LINK;
    }
    isEntityList(type) {
        return type === 'TO_MANY';
    }
    isHTMLField(meta) {
        return meta.dataSpecialization === 'HTML' || meta.inputType === 'TEXTAREA';
    }
}
NovoValueElement.ɵfac = function NovoValueElement_Factory(t) { return new (t || NovoValueElement)(); };
NovoValueElement.ɵcmp = ɵɵdefineComponent({ type: NovoValueElement, selectors: [["novo-value"]], hostVars: 4, hostBindings: function NovoValueElement_HostBindings(rf, ctx) { if (rf & 2) {
        ɵɵclassProp("horizontal", ctx.row)("mobile", ctx.isMobile);
    } }, inputs: { data: "data", meta: "meta", theme: "theme", row: "row", label: "label", type: "type" }, features: [ɵɵNgOnChangesFeature], decls: 4, vars: 3, consts: [[3, "ngSwitch"], ["class", "value-outer", 4, "ngIf"], ["class", "value-outer", 3, "ngClass", 4, "ngSwitchDefault"], ["class", "actions", 4, "ngIf"], [1, "value-outer"], [1, "value"], [3, "class", 4, "ngIf"], [3, "innerHTML", "click", 4, "ngSwitchCase"], ["class", "value", "target", "_blank", 3, "href", "innerHTML", 4, "ngSwitchCase"], [3, "data", "meta", 4, "ngSwitchCase"], [3, "innerHTML", "click"], ["target", "_blank", 1, "value", 3, "href", "innerHTML"], [3, "data", "meta"], [1, "value-outer", 3, "ngClass"], ["class", "value", 3, "innerHTML", 4, "ngIf"], [1, "value", 3, "innerHTML"], [1, "actions"], [3, "class", "click", 4, "ngFor", "ngForOf"], [3, "click"]], template: function NovoValueElement_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementContainerStart(0, 0);
        ɵɵtemplate(1, NovoValueElement_div_1_Template, 8, 5, "div", 1);
        ɵɵtemplate(2, NovoValueElement_div_2_Template, 4, 3, "div", 2);
        ɵɵtemplate(3, NovoValueElement_div_3_Template, 2, 1, "div", 3);
        ɵɵelementContainerEnd();
    } if (rf & 2) {
        ɵɵproperty("ngSwitch", ctx._type);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.showLabel);
        ɵɵadvance(2);
        ɵɵproperty("ngIf", ctx.showIcon);
    } }, directives: [NgSwitch, NgIf, NgSwitchDefault, NovoLabel, NgSwitchCase, EntityList, NgClass, NgForOf], pipes: [RenderPipe], encapsulation: 2 });
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoValueElement.prototype, "row", void 0);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoValueElement, [{
        type: Component,
        args: [{
                selector: 'novo-value',
                template: `
    <ng-container [ngSwitch]="_type">
      <div class="value-outer" *ngIf="showLabel">
        <novo-label>{{ meta.label }}</novo-label>
        <span class="value">
          <i *ngIf="meta.showEntityIcon" class="bhi-circle {{ meta.entityIconClass }}"></i>
          <a *ngSwitchCase="NOVO_VALUE_TYPE.INTERNAL_LINK" (click)="openLink()" [innerHTML]="data | render: meta"></a>
          <a *ngSwitchCase="NOVO_VALUE_TYPE.LINK" class="value" [href]="url" target="_blank" [innerHTML]="data | render: meta"></a>
        </span>
        <novo-entity-list *ngSwitchCase="NOVO_VALUE_TYPE.ENTITY_LIST" [data]="data" [meta]="meta"></novo-entity-list>
      </div>
      <div *ngSwitchDefault class="value-outer" [ngClass]="customClass">
        <novo-label>{{ meta.label }}</novo-label>
        <div *ngIf="isDefault" class="value" [innerHTML]="data | render: meta"></div>
      </div>
      <div class="actions" *ngIf="showIcon">
        <i *ngFor="let icon of meta.icons" [class]="iconClass(icon)" (click)="onValueClick(icon)"></i>
      </div>
    </ng-container>
  `,
            }]
    }], null, { data: [{
            type: Input
        }], meta: [{
            type: Input
        }], theme: [{
            type: Input
        }], row: [{
            type: HostBinding,
            args: ['class.horizontal']
        }, {
            type: Input
        }], label: [{
            type: Input
        }], type: [{
            type: Input
        }], isMobile: [{
            type: HostBinding,
            args: ['class.mobile']
        }] }); })();

// NG2
class NovoValueModule {
}
NovoValueModule.ɵmod = ɵɵdefineNgModule({ type: NovoValueModule });
NovoValueModule.ɵinj = ɵɵdefineInjector({ factory: function NovoValueModule_Factory(t) { return new (t || NovoValueModule)(); }, imports: [[CommonModule, NovoCommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoValueModule, { declarations: [NovoValueElement, RenderPipe, EntityList], imports: [CommonModule, NovoCommonModule], exports: [NovoValueElement, RenderPipe, EntityList] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoValueModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, NovoCommonModule],
                declarations: [NovoValueElement, RenderPipe, EntityList],
                exports: [NovoValueElement, RenderPipe, EntityList],
            }]
    }], null, null); })();

// NG2
class NovoElementsModule {
}
NovoElementsModule.ɵmod = ɵɵdefineNgModule({ type: NovoElementsModule });
NovoElementsModule.ɵinj = ɵɵdefineInjector({ factory: function NovoElementsModule_Factory(t) { return new (t || NovoElementsModule)(); }, providers: [
        { provide: ComponentUtils, useClass: ComponentUtils },
        { provide: DateFormatService, useClass: DateFormatService },
        { provide: NovoLabelService, useClass: NovoLabelService },
        { provide: NovoDragulaService, useClass: NovoDragulaService },
        { provide: GooglePlacesService, useClass: GooglePlacesService },
        { provide: GlobalRef, useClass: BrowserGlobalRef },
        { provide: LocalStorageService, useClass: LocalStorageService },
        { provide: OptionsService, useClass: OptionsService },
        { provide: FormUtils, useClass: FormUtils },
    ], imports: [[ReactiveFormsModule], NovoAsideModule,
        NovoAvatarModule,
        NovoPipesModule,
        NovoButtonModule,
        NovoLoadingModule,
        NovoCardModule,
        NovoCalendarModule,
        NovoFlexModule,
        NovoLayoutModule,
        NovoDividerModule,
        NovoToastModule,
        NovoTooltipModule,
        NovoHeaderModule,
        NovoTabModule,
        NovoTilesModule,
        NovoModalModule,
        NovoQuickNoteModule,
        NovoRadioModule,
        NovoDropdownModule,
        NovoSelectModule,
        NovoListModule,
        NovoSwitchModule,
        NovoDragulaModule,
        NovoSliderModule,
        NovoPickerModule,
        NovoChipsModule,
        NovoDatePickerModule,
        NovoTimePickerModule,
        NovoDateTimePickerModule,
        NovoNovoCKEditorModule,
        NovoTipWellModule,
        NovoSimpleTableModule,
        NovoTableModule,
        NovoTableExtrasModule,
        NovoFormModule,
        NovoFormExtrasModule,
        NovoCategoryDropdownModule,
        NovoMultiPickerModule,
        NovoPopOverModule,
        NovoDataTableModule,
        NovoSearchBoxModule,
        NovoProgressModule,
        NovoOverlayModule,
        GooglePlacesModule,
        NovoValueModule,
        NovoAceEditorModule,
        NovoIconModule,
        NovoExpansionModule,
        UnlessModule,
        NovoCommonModule,
        NovoOptionModule,
        NovoStepperModule,
        ScrollingModule,
        NovoTabbedGroupPickerModule,
        NovoNonIdealStateModule,
        NovoBreadcrumbModule,
        NovoFieldModule,
        NovoColorPickerModule,
        NovoMenuModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoElementsModule, { imports: [ReactiveFormsModule], exports: [NovoAsideModule,
        NovoAvatarModule,
        NovoPipesModule,
        NovoButtonModule,
        NovoLoadingModule,
        NovoCardModule,
        NovoCalendarModule,
        NovoFlexModule,
        NovoLayoutModule,
        NovoDividerModule,
        NovoToastModule,
        NovoTooltipModule,
        NovoHeaderModule,
        NovoTabModule,
        NovoTilesModule,
        NovoModalModule,
        NovoQuickNoteModule,
        NovoRadioModule,
        NovoDropdownModule,
        NovoSelectModule,
        NovoListModule,
        NovoSwitchModule,
        NovoDragulaModule,
        NovoSliderModule,
        NovoPickerModule,
        NovoChipsModule,
        NovoDatePickerModule,
        NovoTimePickerModule,
        NovoDateTimePickerModule,
        NovoNovoCKEditorModule,
        NovoTipWellModule,
        NovoSimpleTableModule,
        NovoTableModule,
        NovoTableExtrasModule,
        NovoFormModule,
        NovoFormExtrasModule,
        NovoCategoryDropdownModule,
        NovoMultiPickerModule,
        NovoPopOverModule,
        NovoDataTableModule,
        NovoSearchBoxModule,
        NovoProgressModule,
        NovoOverlayModule,
        GooglePlacesModule,
        NovoValueModule,
        NovoAceEditorModule,
        NovoIconModule,
        NovoExpansionModule,
        UnlessModule,
        NovoCommonModule,
        NovoOptionModule,
        NovoStepperModule,
        ScrollingModule,
        NovoTabbedGroupPickerModule,
        NovoNonIdealStateModule,
        NovoBreadcrumbModule,
        NovoFieldModule,
        NovoColorPickerModule,
        NovoMenuModule] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoElementsModule, [{
        type: NgModule,
        args: [{
                imports: [ReactiveFormsModule],
                exports: [
                    NovoAsideModule,
                    NovoAvatarModule,
                    NovoPipesModule,
                    NovoButtonModule,
                    NovoLoadingModule,
                    NovoCardModule,
                    NovoCalendarModule,
                    NovoFlexModule,
                    NovoLayoutModule,
                    NovoDividerModule,
                    NovoToastModule,
                    NovoTooltipModule,
                    NovoHeaderModule,
                    NovoTabModule,
                    NovoTilesModule,
                    NovoModalModule,
                    NovoQuickNoteModule,
                    NovoRadioModule,
                    NovoDropdownModule,
                    NovoSelectModule,
                    NovoListModule,
                    NovoSwitchModule,
                    NovoDragulaModule,
                    NovoSliderModule,
                    NovoPickerModule,
                    NovoChipsModule,
                    NovoDatePickerModule,
                    NovoTimePickerModule,
                    NovoDateTimePickerModule,
                    NovoNovoCKEditorModule,
                    NovoTipWellModule,
                    NovoSimpleTableModule,
                    NovoTableModule,
                    NovoTableExtrasModule,
                    NovoFormModule,
                    NovoFormExtrasModule,
                    NovoCategoryDropdownModule,
                    NovoMultiPickerModule,
                    NovoPopOverModule,
                    NovoDataTableModule,
                    NovoSearchBoxModule,
                    NovoProgressModule,
                    NovoOverlayModule,
                    GooglePlacesModule,
                    NovoValueModule,
                    NovoAceEditorModule,
                    NovoIconModule,
                    NovoExpansionModule,
                    UnlessModule,
                    NovoCommonModule,
                    NovoOptionModule,
                    NovoStepperModule,
                    ScrollingModule,
                    NovoTabbedGroupPickerModule,
                    NovoNonIdealStateModule,
                    NovoBreadcrumbModule,
                    NovoFieldModule,
                    NovoColorPickerModule,
                    NovoMenuModule,
                ],
                providers: [
                    { provide: ComponentUtils, useClass: ComponentUtils },
                    { provide: DateFormatService, useClass: DateFormatService },
                    { provide: NovoLabelService, useClass: NovoLabelService },
                    { provide: NovoDragulaService, useClass: NovoDragulaService },
                    { provide: GooglePlacesService, useClass: GooglePlacesService },
                    { provide: GlobalRef, useClass: BrowserGlobalRef },
                    { provide: LocalStorageService, useClass: LocalStorageService },
                    { provide: OptionsService, useClass: OptionsService },
                    { provide: FormUtils, useClass: FormUtils },
                ],
            }]
    }], null, null); })();

// NG2
const NOVO_ELEMENTS_PROVIDERS = [
    { provide: NovoDragulaService, useClass: NovoDragulaService },
    // { provide: NovoAsideRef, useClass: NovoAsideRef },
    { provide: NovoAsideService, useClass: NovoAsideService },
    // { provide: NovoModalRef, useClass: NovoModalRef },
    { provide: NovoModalService, useClass: NovoModalService },
    { provide: GooglePlacesService, useClass: GooglePlacesService },
    { provide: NovoToastService, useClass: NovoToastService },
    { provide: ComponentUtils, useClass: ComponentUtils },
    { provide: GlobalRef, useClass: BrowserGlobalRef },
    { provide: LocalStorageService, useClass: LocalStorageService },
    { provide: OptionsService, useClass: OptionsService },
    FieldInteractionApi,
    DateFormatService,
    Security,
    NovoTemplateService,
];
class NovoElementProviders {
    static forRoot(options) {
        return {
            ngModule: NovoElementProviders,
            providers: [
                ...NOVO_ELEMENTS_PROVIDERS,
                {
                    provide: MENU_OPTIONS,
                    useValue: options && options.menu,
                },
            ],
        };
    }
    static forChild() {
        return {
            ngModule: NovoElementProviders,
        };
    }
}
NovoElementProviders.ɵmod = ɵɵdefineNgModule({ type: NovoElementProviders });
NovoElementProviders.ɵinj = ɵɵdefineInjector({ factory: function NovoElementProviders_Factory(t) { return new (t || NovoElementProviders)(); }, imports: [[]] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoElementProviders, [{
        type: NgModule,
        args: [{
                imports: [],
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { AceEditorControl, ActivityTableDataSource, ActivityTableRenderers, AddressControl, AppBridge, AppBridgeHandler, AppBridgeService, ArrayCollection, AsideComponent, BaseControl, BasePickerResults, BaseRenderer, BooleanInput, BreadcrumbElement, BreadcrumbItemElement, BreadcrumbService, BrowserGlobalRef, COUNTRIES, CalendarEventResponse, Can, CardActionsElement, CardContentElement, CardElement, CardFooterElement, CardHeaderElement, CheckListControl, CheckboxControl, ChecklistPickerResults, CollectionEvent, ComponentUtils, ControlConfirmModal, ControlFactory, ControlPromptModal, CustomControl, DATEFORMAT_VALUE_ACCESSOR, DATE_FORMATS, DataTableBigDecimalRendererPipe, DataTableInterpolatePipe, DataTableSource, DataTableState, DateCell, DateControl, DateFormatService, DateTableCurrencyRendererPipe, DateTableDateRendererPipe, DateTableDateTimeRendererPipe, DateTableNumberRendererPipe, DateTableTimeRendererPipe, DateTimeControl, DayOfMonthPipe, DecodeURIPipe, DefaultDateSelectionStrategy, DefaultPipe, Deferred, DevAppBridge, DevAppBridgeService, DistributionListPickerResults, EXPANSION_PANEL_ANIMATION_TIMING, EditState, EditorControl, EndOfWeekDisplayPipe, EntityList, EntityPickerResult, EntityPickerResults, ErrorStateMatcher, FieldInteractionApi, FileControl, FormUtils, FormValidators, GlobalRef, GooglePlacesModule, GooglePlacesService, GroupByPipe, GroupedControl, GroupedMultiPickerResults, Helpers, HoursPipe, IsoDatePipe, IsoDateRangePipe, IsoTimePipe, IsoTimeRangePipe, KeyCodes, LocalStorageService, MarginDirective, MenuComponent, MenuContentComponent, MenuDirective, MenuItemDirective, MonthDayPipe, MonthPipe, MultiDateSelectionStrategy, NOVO_CHIPS_DEFAULT_OPTIONS, NOVO_DATE_SELECTION_STRATEGY, NOVO_DATE_SELECTION_STRATEGY_PROVIDER, NOVO_DATE_SELECTION_STRATEGY_PROVIDER_FACTORY, NOVO_ELEMENTS_LABELS_PROVIDERS, NOVO_FORM_FIELD, NOVO_INPUT_FORMAT, NOVO_INPUT_VALUE_ACCESSOR, NOVO_LAYOUT_CONTAINER, NOVO_LAYOUT_DEFAULT_AUTOSIZE, NOVO_LAYOUT_DEFAULT_AUTOSIZE_FACTORY, NOVO_OPTGROUP, NOVO_OPTION_PARENT_COMPONENT, NOVO_RADIO_GROUP, NOVO_VALUE_THEME, NOVO_VALUE_TYPE, NativeSelectControl, NodeGlobalRef, NonIdealStateElement, NovoAccordion, NovoAceEditor, NovoAceEditorModule, NovoActivityTable, NovoActivityTableActions, NovoActivityTableCustomFilter, NovoActivityTableCustomHeader, NovoActivityTableEmptyMessage, NovoActivityTableNoResultsMessage, NovoActivityTableState, NovoAddressElement, NovoAsideModule, NovoAsideRef, NovoAsideService, NovoAutoSize, NovoAutocompleteElement, NovoAvatarElement, NovoAvatarModule, NovoAvatarStackElement, NovoBaseTextElement, NovoBreadcrumbModule, NovoButtonElement, NovoButtonModule, NovoCKEditorElement, NovoCalendarAllDayEventElement, NovoCalendarDateChangeElement, NovoCalendarDayEventElement, NovoCalendarDayViewElement, NovoCalendarElement, NovoCalendarHourSegmentElement, NovoCalendarModule, NovoCalendarMonthDayElement, NovoCalendarMonthHeaderElement, NovoCalendarMonthViewElement, NovoCalendarWeekEventElement, NovoCalendarWeekHeaderElement, NovoCalendarWeekViewElement, NovoCaption, NovoCardModule, NovoCategoryDropdownElement, NovoCategoryDropdownModule, NovoCheckListElement, NovoCheckboxElement, NovoChipAvatar, NovoChipElement, NovoChipInput, NovoChipList, NovoChipListChange, NovoChipRemove, NovoChipSelectionChange, NovoChipsElement, NovoChipsModule, NovoColorInputElement, NovoColorPickerComponent, NovoColorPickerModule, NovoColorSwatchComponent, NovoCommonModule, NovoControlElement, NovoControlGroup, NovoControlTemplates, NovoDataTable, NovoDataTableCell, NovoDataTableCellHeader, NovoDataTableCheckboxCell, NovoDataTableCheckboxHeaderCell, NovoDataTableClearButton, NovoDataTableExpandCell, NovoDataTableExpandDirective, NovoDataTableExpandHeaderCell, NovoDataTableFilterUtils, NovoDataTableHeaderCell, NovoDataTableHeaderRow, NovoDataTableModule, NovoDataTablePagination, NovoDataTableRow, NovoDataTableSortButton, NovoDataTableSortFilter, NovoDateFormatDirective, NovoDatePickerElement, NovoDatePickerInputElement, NovoDatePickerModule, NovoDateRangeInputElement, NovoDateTimePickerElement, NovoDateTimePickerInputElement, NovoDateTimePickerModule, NovoDividerComponent, NovoDividerModule, NovoDragulaElement, NovoDragulaModule, NovoDragulaService, NovoDropDownItemHeaderElement, NovoDropdownCell, NovoDropdownElement, NovoDropdownListElement, NovoDropdownModule, NovoDynamicFormElement, NovoElementProviders, NovoElementsModule, NovoErrorElement, NovoEventTypeLegendElement, NovoExpansionModule, NovoExpansionPanel, NovoExpansionPanelActionRow, NovoExpansionPanelContent, NovoExpansionPanelDescription, NovoExpansionPanelHeader, NovoExpansionPanelTitle, NovoFieldControl, NovoFieldElement, NovoFieldModule, NovoFieldPrefixDirective, NovoFieldSuffixDirective, NovoFieldsElement, NovoFieldsetElement, NovoFieldsetHeaderElement, NovoFile, NovoFileInputElement, NovoFlexElement, NovoFlexModule, NovoFormControl, NovoFormElement, NovoFormExtrasModule, NovoFormGroup, NovoFormModule, NovoGridElement, NovoHeaderComponent, NovoHeaderModule, NovoHeaderSpacer, NovoHintElement, NovoHorizontalStepper, NovoIconComponent, NovoIconModule, NovoInput, NovoIsLoadingDirective, NovoItemAvatarElement, NovoItemContentElement, NovoItemDateElement, NovoItemElement, NovoItemEndElement, NovoItemHeaderElement, NovoItemTitleElement, NovoLabel, NovoLabelElement, NovoLabelService, NovoLayoutContainer, NovoLayoutContent, NovoLayoutModule, NovoLink, NovoListElement, NovoListItemElement, NovoListModule, NovoLoadedDirective, NovoLoadingElement, NovoLoadingModule, NovoMenuModule, NovoMenuService, NovoModalContainerComponent, NovoModalElement, NovoModalModule, NovoModalNotificationElement, NovoModalParams, NovoModalRef, NovoModalService, NovoMonthSelectElement, NovoMonthViewElement, NovoMultiDateInputElement, NovoMultiPickerElement, NovoMultiPickerModule, NovoNavContentElement, NovoNavElement, NovoNavHeaderElement, NovoNavOutletElement, NovoNonIdealStateModule, NovoNovoCKEditorModule, NovoOptgroup, NovoOptgroupBase, NovoOptgroupMixinBase, NovoOption, NovoOptionBase, NovoOptionModule, NovoOptionSelectedEvent, NovoOptionSelectionChange, NovoOverlayModule, NovoOverlayTemplateComponent, NovoPickerDirective, NovoPickerElement, NovoPickerModule, NovoPickerToggleElement, NovoPipesModule, NovoPopOverModule, NovoProgressBarElement, NovoProgressElement, NovoProgressModule, NovoPseudoCheckbox, NovoPseudoCheckboxModule, NovoQuickNoteModule, NovoRadioElement, NovoRadioGroup, NovoRadioModule, NovoRowChipElement, NovoRowChipsElement, NovoSearchBoxElement, NovoSearchBoxModule, NovoSelectChange, NovoSelectElement, NovoSelectModule, NovoSelection, NovoSidenavComponent, NovoSimpleActionCell, NovoSimpleCell, NovoSimpleCellDef, NovoSimpleCellHeader, NovoSimpleCheckboxCell, NovoSimpleCheckboxHeaderCell, NovoSimpleColumnDef, NovoSimpleEmptyHeaderCell, NovoSimpleFilterFocus, NovoSimpleHeaderCell, NovoSimpleHeaderCellDef, NovoSimpleHeaderRow, NovoSimpleHeaderRowDef, NovoSimpleRow, NovoSimpleRowDef, NovoSimpleTableModule, NovoSimpleTablePagination, NovoSkeletonDirective, NovoSliderElement, NovoSliderModule, NovoSortFilter, NovoSpinnerElement, NovoStep, NovoStepHeader, NovoStepLabel, NovoStepStatus, NovoStepper, NovoStepperModule, NovoSwitchElement, NovoSwitchModule, NovoTabButtonElement, NovoTabElement, NovoTabLinkElement, NovoTabModule, NovoTabbedGroupPickerElement, NovoTabbedGroupPickerModule, NovoTable, NovoTableActionsElement, NovoTableElement, NovoTableExtrasModule, NovoTableFooterElement, NovoTableHeaderElement, NovoTableKeepFilterFocus, NovoTableMode, NovoTableModule, NovoTemplate, NovoTemplateService, NovoText, NovoTilesElement, NovoTilesModule, NovoTimeFormatDirective, NovoTimePickerElement, NovoTimePickerInputElement, NovoTimePickerModule, NovoTipWellElement, NovoTipWellModule, NovoTitle, NovoToastElement, NovoToastModule, NovoToastService, NovoTooltip, NovoTooltipModule, NovoUtilActionComponent, NovoUtilsComponent, NovoValueElement, NovoValueModule, NovoVerticalStepper, NovoYearSelectElement, OptionsService, OutsideClick, PaddingDirective, PagedArrayCollection, Pagination, PercentageCell, PickerControl, PickerResults, PlacesListComponent, PluralPipe, PopOverContent, PopOverDirective, ProgressAppearance, QuickNoteControl, QuickNoteElement, QuickNoteResults, REMOVABLE_REF, RadioControl, RangeSelectionStrategy, ReadOnlyControl, RemoteActivityTableService, RemoteDataTableService, RenderPipe, RowDetails, Security, SelectControl, ShowOnDirtyErrorStateMatcher, SkillsSpecialtyPickerResults, SortDirection, StaticActivityTableService, StaticDataTableService, TIMEFORMAT_VALUE_ACCESSOR, TIME_FORMATS, TIME_VALUE_FORMATS, TableCell, TableFilter, TablePickerControl, TestCmp, TextAreaControl, TextBoxControl, ThOrderable, ThSortable, TilesControl, TimeControl, TimezoneControl, TooltipDirective, Unless, UnlessModule, WeekSelectionStrategy, WeekdayPipe, WorkersCompCodesPickerResults, YearPipe, _NovoCdkRowDef, _NovoCell, _NovoCellDef, _NovoColumnDef, _NovoHeaderCell, _NovoHeaderCellDef, _NovoHeaderRow, _NovoHeaderRowDef, _NovoRow, _NovoTable, _countGroupLabelsBeforeOption, _getOptionScrollPosition, binarySearch, can, findByCountryCode, findByCountryId, findByCountryName, getCountries, getDayView, getDayViewHourGrid, getMonthView, getStateObjects, getStates, getWeekView, getWeekViewEventOffset, getWeekViewHeader, interpolateCell, mixinColor, mixinDisabled, mixinErrorState, mixinOverlay, mixinRequired, mixinTabIndex, notify, novoExpansionAnimations, novoStepperAnimations, slideInOut, throwNovoDuplicatedSidenavError, zoomInOut };
//# sourceMappingURL=novo-elements.js.map
