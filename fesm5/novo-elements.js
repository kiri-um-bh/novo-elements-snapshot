import 'brace/index';
import 'brace/theme/chrome';
import 'brace/mode/javascript';
import 'brace/ext/language_tools.js';
import { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';
import * as dragulaImported from '@bullhorn/dragula';
import createAutoCorrectedDatePipe from 'text-mask-addons/dist/createAutoCorrectedDatePipe';
import { TextMaskModule } from 'angular2-text-mask';
import { DomSanitizer } from '@angular/platform-browser';
import { CdkAccordion, CdkAccordionItem, CdkAccordionModule } from '@angular/cdk/accordion';
import { UniqueSelectionDispatcher } from '@angular/cdk/collections';
import { TAB, ENTER, ESCAPE, SPACE } from '@angular/cdk/keycodes';
import { ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';
import { FocusMonitor, A11yModule } from '@angular/cdk/a11y';
import { CdkStepLabel, CdkStep, CdkStepper, CdkStepperModule } from '@angular/cdk/stepper';
import { Directionality } from '@angular/cdk/bidi';
import { trigger, state, style, animate, transition, animateChild, group, query } from '@angular/animations';
import { ScrollDispatchModule } from '@angular/cdk/scrolling';
import { Subject, from, of, merge, fromEvent, ReplaySubject, Subscription } from 'rxjs';
import { filter, first, switchMap, debounceTime, distinctUntilChanged, map, startWith, take, takeUntil, catchError } from 'rxjs/operators';
import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { DataSource, CdkCell, CdkColumnDef, CdkHeaderRow, CDK_ROW_TEMPLATE, CdkRow, CdkHeaderCell, CdkTableModule, CDK_TABLE_TEMPLATE, CdkTable, CdkCellDef, CdkHeaderCellDef, CdkRowDef, CdkHeaderRowDef } from '@angular/cdk/table';
import { subMonths, addMonths, isDate, parse, getYear, getMonth, getDate, setYear, setMonth, setDate, differenceInSeconds, addSeconds, setMilliseconds, setSeconds, setMinutes, setHours, getHours, getMinutes, getSeconds, getMilliseconds, isValid, format, startOfDay, addDays, startOfToday, endOfToday, addWeeks, startOfWeek, endOfWeek, startOfTomorrow, differenceInDays, addMinutes, endOfDay, isSameSecond, startOfMinute, isAfter, isBefore, isSameDay, getDay, differenceInMinutes, startOfMonth, endOfMonth, isSameMonth, addHours, isToday } from 'date-fns';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { NG_VALUE_ACCESSOR, ReactiveFormsModule, FormsModule, FormControl, Validators, FormGroup, FormBuilder } from '@angular/forms';
import { __extends, __values, __spread, __read, __assign } from 'tslib';
import { Component, EventEmitter, Output, ElementRef, Input, forwardRef, NgModule, Injectable, Pipe, ChangeDetectionStrategy, Directive, TemplateRef, ViewContainerRef, ContentChildren, HostBinding, HostListener, Inject, Optional, LOCALE_ID, ChangeDetectorRef, ComponentFactoryResolver, ReflectiveInjector, ViewChild, NgZone, isDevMode, Renderer2, ViewChildren, ContentChild, Host, ViewEncapsulation, PLATFORM_ID } from '@angular/core';
import { CommonModule, DOCUMENT, isPlatformBrowser } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// @dynamic
var  
// @dynamic
Helpers = /** @class */ (function () {
    function Helpers() {
    }
    /**
     * Swallows an event to stop further execution
     * @param event
     */
    /**
     * Swallows an event to stop further execution
     * @param {?} event
     * @return {?}
     */
    Helpers.swallowEvent = /**
     * Swallows an event to stop further execution
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
    };
    /**
     * @param {?} str
     * @param {?} props
     * @return {?}
     */
    Helpers.interpolate = /**
     * @param {?} str
     * @param {?} props
     * @return {?}
     */
    function (str, props) {
        return str.replace(/\$([\w\.]+)/g, function (original, key) {
            /** @type {?} */
            var keys = key.split('.');
            /** @type {?} */
            var value = props[keys.shift()];
            while (keys.length && value !== undefined) {
                /** @type {?} */
                var k = keys.shift();
                value = k ? value[k] : value + ".";
            }
            return value !== undefined ? value : '';
        });
    };
    /**
     * @param {?} formatString
     * @param {?} data
     * @return {?}
     */
    Helpers.interpolateWithFallback = /**
     * @param {?} formatString
     * @param {?} data
     * @return {?}
     */
    function (formatString, data) {
        // Format string can be an array, it will attempt to interpolate each item
        // in the array, if there is a failure to replace it will mark it as such
        // It will either return the first successful replacement of ALL variables,
        // or an empty string
        if (Array.isArray(formatString)) {
            /** @type {?} */
            var successes_1 = [];
            formatString.forEach(function (format$$1) {
                /** @type {?} */
                var isSuccess = true;
                /** @type {?} */
                var attempt = format$$1.replace(/\$([\w\.]+)/g, function (original, key) {
                    /** @type {?} */
                    var keys = key.split('.');
                    /** @type {?} */
                    var value = data[keys.shift()];
                    while (keys.length && value !== undefined) {
                        /** @type {?} */
                        var k = keys.shift();
                        value = k ? value[k] : value + ".";
                    }
                    if (isSuccess && Helpers.isEmpty(value)) {
                        isSuccess = false;
                    }
                    return Helpers.isEmpty(value) ? '' : value;
                });
                if (isSuccess) {
                    successes_1.push(attempt);
                }
            });
            if (successes_1.length !== 0) {
                return successes_1[0];
            }
            return '';
        }
        else {
            return Helpers.interpolate(formatString, data);
        }
    };
    /**
     * Verifies that an object has every property expected by a string to interpolate
     * @param str   The string to interpolate
     * @param props The params to replace in string.
     */
    /**
     * Verifies that an object has every property expected by a string to interpolate
     * @param {?} str   The string to interpolate
     * @param {?} props The params to replace in string.
     * @return {?}
     */
    Helpers.validateInterpolationProps = /**
     * Verifies that an object has every property expected by a string to interpolate
     * @param {?} str   The string to interpolate
     * @param {?} props The params to replace in string.
     * @return {?}
     */
    function (str, props) {
        /** @type {?} */
        var keys = str.match(/\$([\w\.]+)/g);
        return keys.every(function (key) {
            return props.hasOwnProperty(key.substr(1));
        });
    };
    /**
     * @param {?} item
     * @return {?}
     */
    Helpers.isObject = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return item && typeof item === 'object' && !Array.isArray(item) && item !== null;
    };
    /**
     * Checks to see if the object is a string
     */
    /**
     * Checks to see if the object is a string
     * @param {?} obj
     * @return {?}
     */
    Helpers.isString = /**
     * Checks to see if the object is a string
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return typeof obj === 'string';
    };
    /**
     * @param {?} val
     * @return {?}
     */
    Helpers.isNumber = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        if (typeof val === 'string') {
            return val.length > 0 && val !== '.' && /^\d*\.?\d*$/.test(val);
        }
        else {
            return !isNaN(parseFloat(val));
        }
    };
    /**
     * Checks to see if the object is a undefined or null
     */
    /**
     * Checks to see if the object is a undefined or null
     * @param {?} obj
     * @return {?}
     */
    Helpers.isBlank = /**
     * Checks to see if the object is a undefined or null
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return obj === undefined || obj === null;
    };
    /**
     * Checks to see if the object is a undefined or null
     */
    /**
     * Checks to see if the object is a undefined or null
     * @param {?} obj
     * @return {?}
     */
    Helpers.isEmpty = /**
     * Checks to see if the object is a undefined or null
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return Helpers.isBlank(obj) || obj === '' || (Array.isArray(obj) && obj.length === 0);
    };
    /**
     * Checks to see if the object is a function
     */
    /**
     * Checks to see if the object is a function
     * @param {?} obj
     * @return {?}
     */
    Helpers.isFunction = /**
     * Checks to see if the object is a function
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return !!(obj && obj.constructor && obj.call && obj.apply);
    };
    /**
     * Checks to see if the object is a Date
     */
    /**
     * Checks to see if the object is a Date
     * @param {?} obj
     * @return {?}
     */
    Helpers.isDate = /**
     * Checks to see if the object is a Date
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return obj instanceof Date;
    };
    /**
     * @param {?} fields
     * @param {?=} reverse
     * @return {?}
     */
    Helpers.sortByField = /**
     * @param {?} fields
     * @param {?=} reverse
     * @return {?}
     */
    function (fields, reverse) {
        if (reverse === void 0) { reverse = false; }
        return function (previous, current) {
            if (Helpers.isFunction(fields)) {
                return fields(reverse ? 'desc' : 'asc', previous, current);
            }
            if (!Array.isArray(fields)) {
                fields = [fields];
            }
            for (var i = 0; i < fields.length; i++) {
                /** @type {?} */
                var field = fields[i];
                /** @type {?} */
                var first$$1 = previous[field] || '';
                /** @type {?} */
                var second = current[field] || '';
                if (Helpers.isDate(first$$1) && Helpers.isDate(second)) {
                    // Dates
                    first$$1 = first$$1.getTime();
                    second = second.getTime();
                }
                else if (Helpers.isString(first$$1) && Helpers.isString(second)) {
                    // Basic strings
                    first$$1 = first$$1.toLowerCase();
                    second = second.toLowerCase();
                }
                else {
                    // Numbers
                    first$$1 = isNaN(Number(first$$1)) ? first$$1 : Number(first$$1);
                    second = isNaN(Number(second)) ? second : Number(second);
                }
                if (first$$1 > second) {
                    return reverse ? -1 : 1;
                }
                else if (first$$1 < second) {
                    return reverse ? 1 : -1;
                }
            }
            return 0;
        };
    };
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    Helpers.filterByField = /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        return function (item) {
            /** @type {?} */
            var results = [];
            /** @type {?} */
            var field = can(item).have(key);
            if (value instanceof Function) {
                results.push(value(field, item));
            }
            else if (Array.isArray(value)) {
                results.push(value.includes(field));
            }
            else if (value instanceof Object) {
                if (field instanceof Date) {
                    field = field.getTime();
                }
                if (value.min) {
                    results.push(field >= value.min);
                }
                if (value.max) {
                    results.push(field <= value.max);
                }
                if (value.any && Array.isArray(value.any)) {
                    if (Array.isArray(field)) {
                        results.push(value.any.some(function (v) { return field.includes(v); }));
                    }
                    else {
                        results.push(value.any.includes(field));
                    }
                }
                if (value.all && Array.isArray(value.all)) {
                    results.push(value.all.every(function (v) { return field.includes(v); }));
                }
                if (value.not) {
                    results.push(!Helpers.filterByField(key, value.not)(item));
                }
                for (var subkey in value) {
                    if (['min', 'max', 'any', 'all', 'not'].indexOf(subkey) < 0) {
                        /** @type {?} */
                        var subvalue = value[subkey];
                        results.push(Helpers.filterByField(key + "." + subkey, subvalue)(item));
                    }
                }
            }
            else {
                results.push(JSON.stringify(field).match(new RegExp(value, 'gi')));
            }
            return results.every(function (x) { return x; });
        };
    };
    /**
     * @param {?} element
     * @param {?} selector
     * @return {?}
     */
    Helpers.findAncestor = /**
     * @param {?} element
     * @param {?} selector
     * @return {?}
     */
    function (element, selector) {
        while ((element = element.parentElement) && !element.matches.call(element, selector))
            ; // tslint:disable-line
        return element;
    };
    /**
     * @param {?} item
     * @return {?}
     */
    Helpers.deepClone = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (Array.isArray(item)) {
            /** @type {?} */
            var newArr = [];
            for (var i = item.length; i-- > 0;) {
                // tslint:disable-line
                newArr[i] = Helpers.deepClone(item[i]);
            }
            return newArr;
        }
        if (typeof item === 'function' && !/\(\) \{ \[native/.test(item.toString())) {
            /** @type {?} */
            var obj = void 0;
            eval('obj = ' + item.toString()); // tslint:disable-line
            for (var k in item) {
                if (k in item) {
                    obj[k] = Helpers.deepClone(item[k]);
                }
            }
            return obj;
        }
        if (item && typeof item === 'object') {
            /** @type {?} */
            var obj = {};
            for (var k in item) {
                if (k in item) {
                    obj[k] = Helpers.deepClone(item[k]);
                }
            }
            return obj;
        }
        return item;
    };
    /**
     * @param {...?} objs
     * @return {?}
     */
    Helpers.deepAssign = /**
     * @param {...?} objs
     * @return {?}
     */
    function () {
        var objs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            objs[_i] = arguments[_i];
        }
        if (objs.length < 2) {
            throw new Error('Need two or more objects to merge');
        }
        /** @type {?} */
        var target = Object.assign({}, objs[0]);
        var _loop_1 = function (i) {
            /** @type {?} */
            var source = Object.assign({}, objs[i]);
            Object.keys(source).forEach(function (prop) {
                /** @type {?} */
                var value = source[prop];
                if (Helpers.isObject(value)) {
                    if (target.hasOwnProperty(prop) && Helpers.isObject(target[prop])) {
                        target[prop] = Helpers.deepAssign(target[prop], value);
                    }
                    else {
                        target[prop] = value;
                    }
                }
                else if (Array.isArray(value)) {
                    if (target.hasOwnProperty(prop) && Array.isArray(target[prop])) {
                        /** @type {?} */
                        var targetArray_1 = target[prop];
                        value.forEach(function (sourceItem, itemIndex) {
                            if (itemIndex < targetArray_1.length) {
                                /** @type {?} */
                                var targetItem = targetArray_1[itemIndex];
                                if (Object.is(targetItem, sourceItem)) {
                                    return;
                                }
                                if (Helpers.isObject(targetItem) && Helpers.isObject(sourceItem)) {
                                    targetArray_1[itemIndex] = Helpers.deepAssign(targetItem, sourceItem);
                                }
                                else if (Array.isArray(targetItem) && Array.isArray(sourceItem)) {
                                    targetArray_1[itemIndex] = Helpers.deepAssign(targetItem, sourceItem);
                                }
                                else {
                                    targetArray_1[itemIndex] = sourceItem;
                                }
                            }
                            else {
                                targetArray_1.push(sourceItem);
                            }
                        });
                    }
                    else {
                        target[prop] = value;
                    }
                }
                else {
                    target[prop] = value;
                }
            });
        };
        for (var i = 1; i < objs.length; i++) {
            _loop_1(i);
        }
        return target;
    };
    /**
     * Workaround for Edge browser since Element:nextElementSibling is undefined inside of template directives
     * @param element any document element
     * @returns the next sibling node that is of type: Element
     */
    /**
     * Workaround for Edge browser since Element:nextElementSibling is undefined inside of template directives
     * @param {?} element any document element
     * @return {?} the next sibling node that is of type: Element
     */
    Helpers.getNextElementSibling = /**
     * Workaround for Edge browser since Element:nextElementSibling is undefined inside of template directives
     * @param {?} element any document element
     * @return {?} the next sibling node that is of type: Element
     */
    function (element) {
        if (element.nextElementSibling) {
            return element.nextElementSibling;
        }
        else {
            /** @type {?} */
            var e = element.nextSibling;
            while (e && 1 !== e.nodeType) {
                e = e.nextSibling;
            }
            return e;
        }
    };
    return Helpers;
}());
var Can = /** @class */ (function () {
    function Can(obj) {
        this.obj = obj;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    Can.prototype.have = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        /** @type {?} */
        var props = key.split('.');
        /** @type {?} */
        var item = this.obj;
        for (var i = 0; i < props.length; i++) {
            item = item[props[i]];
            if (this.check(item) === false) {
                return item;
            }
        }
        return item;
    };
    /**
     * @param {?} thing
     * @return {?}
     */
    Can.prototype.check = /**
     * @param {?} thing
     * @return {?}
     */
    function (thing) {
        return thing !== void 0;
    };
    return Can;
}());
/**
 * @param {?} obj
 * @return {?}
 */
function can(obj) {
    return new Can(obj);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var ACE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NovoAceEditor; }),
    multi: true,
};
var NovoAceEditor = /** @class */ (function () {
    function NovoAceEditor(elementRef) {
        this.elementRef = elementRef;
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this._options = {
            showPrintMargin: false,
            displayIndentGuides: true,
        };
        this._theme = 'chrome';
        this._mode = 'javascript';
        this.text = '';
        this.onChange = function (_) { };
        this.onTouched = function () { };
    }
    Object.defineProperty(NovoAceEditor.prototype, "theme", {
        set: /**
         * @param {?} theme
         * @return {?}
         */
        function (theme) {
            this.setTheme(theme);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoAceEditor.prototype, "options", {
        set: /**
         * @param {?} options
         * @return {?}
         */
        function (options) {
            this.setOptions(options);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoAceEditor.prototype, "mode", {
        set: /**
         * @param {?} mode
         * @return {?}
         */
        function (mode) {
            this.setMode(mode);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoAceEditor.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.editor) {
            this.editor.destroy();
        }
    };
    /**
     * @return {?}
     */
    NovoAceEditor.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initializeEditor();
        this.initializeOptions();
        this.initializeEvents();
    };
    /**
     * @private
     * @return {?}
     */
    NovoAceEditor.prototype.initializeEditor = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var el = this.elementRef.nativeElement;
        this.editor = ace.edit(el);
        this.editor.$blockScrolling = Infinity;
    };
    /**
     * @private
     * @return {?}
     */
    NovoAceEditor.prototype.initializeOptions = /**
     * @private
     * @return {?}
     */
    function () {
        this.setOptions(this._options || {});
        this.setTheme(this._theme);
        this.setMode(this._mode);
    };
    /**
     * @private
     * @return {?}
     */
    NovoAceEditor.prototype.initializeEvents = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.editor.on('focus', function (event) { return _this.focus.emit(event); });
        this.editor.on('blur', function (event) { return _this.focus.emit(event); });
        this.editor.on('change', function () { return _this.updateText(); });
        this.editor.on('paste', function () { return _this.updateText(); });
    };
    /**
     * @private
     * @return {?}
     */
    NovoAceEditor.prototype.updateText = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var newVal = this.editor.getValue();
        if (newVal === this.oldText) {
            return;
        }
        this.text = newVal;
        this.onChange(newVal);
        this.oldText = newVal;
    };
    /**
     * @private
     * @param {?} text
     * @return {?}
     */
    NovoAceEditor.prototype.setText = /**
     * @private
     * @param {?} text
     * @return {?}
     */
    function (text) {
        if (Helpers.isBlank(text)) {
            text = '';
        }
        if (this.text !== text) {
            this.text = text;
            this.editor.setValue(text);
            this.onChange(text);
            this.editor.clearSelection();
        }
    };
    /**
     * @private
     * @param {?} options
     * @return {?}
     */
    NovoAceEditor.prototype.setOptions = /**
     * @private
     * @param {?} options
     * @return {?}
     */
    function (options) {
        this._options = options;
        this.editor.setOptions(options || {});
    };
    /**
     * @private
     * @param {?} theme
     * @return {?}
     */
    NovoAceEditor.prototype.setTheme = /**
     * @private
     * @param {?} theme
     * @return {?}
     */
    function (theme) {
        this._theme = theme;
        this.editor.setTheme("ace/theme/" + theme);
    };
    /**
     * @private
     * @param {?} mode
     * @return {?}
     */
    NovoAceEditor.prototype.setMode = /**
     * @private
     * @param {?} mode
     * @return {?}
     */
    function (mode) {
        this._mode = mode;
        this.editor.getSession().setMode("ace/mode/" + this._mode);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoAceEditor.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.setText(value);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoAceEditor.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoAceEditor.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    NovoAceEditor.decorators = [
        { type: Component, args: [{
                    selector: 'novo-ace-editor',
                    template: '',
                    providers: [ACE_VALUE_ACCESSOR]
                }] }
    ];
    /** @nocollapse */
    NovoAceEditor.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    NovoAceEditor.propDecorators = {
        theme: [{ type: Input }],
        options: [{ type: Input }],
        mode: [{ type: Input }],
        name: [{ type: Input }],
        blur: [{ type: Output }],
        focus: [{ type: Output }]
    };
    return NovoAceEditor;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoAceEditorModule = /** @class */ (function () {
    function NovoAceEditorModule() {
    }
    NovoAceEditorModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    declarations: [NovoAceEditor],
                    exports: [NovoAceEditor],
                },] }
    ];
    return NovoAceEditorModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Rule storage - pluralize and singularize need to be run sequentially,
// while other rules can be optimized using an object for instant lookups.
/** @type {?} */
var pluralRules = [];
/** @type {?} */
var singularRules = [];
/** @type {?} */
var uncountables = {};
/** @type {?} */
var irregularPlurals = {};
/** @type {?} */
var irregularSingles = {};
/**
 * Title case a string.
 * @param {?} str
 * @return {?}
 */
function toTitleCase(str) {
    return str.charAt(0).toUpperCase() + str.substr(1).toLowerCase();
}
/**
 * Sanitize a pluralization rule to a usable regular expression.
 * @param {?} rule
 * @return {?}
 */
function sanitizeRule(rule) {
    if (typeof rule === 'string') {
        return new RegExp('^' + rule + '$', 'i');
    }
    return rule;
}
/**
 * Pass in a word token to produce a function that can replicate the case on
 * another word.
 * @param {?} word
 * @param {?} token
 * @return {?}
 */
function restoreCase(word, token) {
    // Upper cased words. E.g. "HELLO".
    if (word === word.toUpperCase()) {
        return token.toUpperCase();
    }
    // Title cased words. E.g. "Title".
    if (word[0] === word[0].toUpperCase()) {
        return toTitleCase(token);
    }
    // Lower cased words. E.g. "test".
    return token.toLowerCase();
}
/**
 * Interpolate a regexp string.
 * @param {?} str
 * @param {?} args
 * @return {?}
 */
function interpolate(str, args) {
    return str.replace(/\$(\d{1,2})/g, function (match, index) {
        return args[index] || '';
    });
}
/**
 * Sanitize a word by passing in the word and sanitization rules.
 * @param {?} token
 * @param {?} word
 * @param {?} collection
 * @return {?}
 */
function sanitizeWord(token, word, collection) {
    // Empty string or doesn't need fixing.
    if (!token.length || uncountables.hasOwnProperty(token)) {
        return word;
    }
    /** @type {?} */
    var len = collection.length;
    var _loop_1 = function () {
        /** @type {?} */
        var rule = collection[len];
        // If the rule passes, return the replacement.
        if (rule[0].test(word)) {
            return { value: word.replace(rule[0], function (match, index, words) {
                    /** @type {?} */
                    var result = interpolate(rule[1], [match, index, words]);
                    if (match === '') {
                        return restoreCase(words[index - 1], result);
                    }
                    return restoreCase(match, result);
                }) };
        }
    };
    // Iterate over the sanitization rules and use the first one to match.
    while (len--) {
        var state_1 = _loop_1();
        if (typeof state_1 === "object")
            return state_1.value;
    }
    return word;
}
/**
 * Replace a word with the updated word.
 * @param {?} replaceMap
 * @param {?} keepMap
 * @param {?} rules
 * @return {?}
 */
function replaceWord(replaceMap, keepMap, rules) {
    return function (word) {
        // Get the correct token and case restoration functions.
        /** @type {?} */
        var token = word.toLowerCase();
        // Check against the keep object map.
        if (keepMap.hasOwnProperty(token)) {
            return restoreCase(word, token);
        }
        // Check against the replacement map for a direct word replacement.
        if (replaceMap.hasOwnProperty(token)) {
            return restoreCase(word, replaceMap[token]);
        }
        // Run all the rules against the word.
        return sanitizeWord(token, word, rules);
    };
}
var Pluralize = /** @class */ (function () {
    function Pluralize() {
    }
    /**
     * @param {?} word
     * @param {?=} count
     * @param {?=} inclusive
     * @return {?}
     */
    Pluralize.pluralize = /**
     * @param {?} word
     * @param {?=} count
     * @param {?=} inclusive
     * @return {?}
     */
    function (word, count, inclusive) {
        if (count === void 0) { count = 1; }
        /** @type {?} */
        var pluralized = count === 1 ? Pluralize.singular(word) : Pluralize.plural(word);
        return (inclusive ? count + " " : '') + pluralized;
    };
    /**
     * @param {?} word
     * @return {?}
     */
    Pluralize.singular = /**
     * @param {?} word
     * @return {?}
     */
    function (word) {
        return replaceWord(irregularSingles, irregularPlurals, pluralRules)(word);
    };
    /**
     * @param {?} word
     * @return {?}
     */
    Pluralize.plural = /**
     * @param {?} word
     * @return {?}
     */
    function (word) {
        return replaceWord(irregularPlurals, irregularSingles, singularRules)(word);
    };
    /**
     * @param {?} rule
     * @param {?} replacement
     * @return {?}
     */
    Pluralize.addPluralRule = /**
     * @param {?} rule
     * @param {?} replacement
     * @return {?}
     */
    function (rule, replacement) {
        pluralRules.push([sanitizeRule(rule), replacement]);
    };
    /**
     * @param {?} rule
     * @param {?} replacement
     * @return {?}
     */
    Pluralize.addSingularRule = /**
     * @param {?} rule
     * @param {?} replacement
     * @return {?}
     */
    function (rule, replacement) {
        singularRules.push([sanitizeRule(rule), replacement]);
    };
    /**
     * @param {?} word
     * @return {?}
     */
    Pluralize.addUncountableRule = /**
     * @param {?} word
     * @return {?}
     */
    function (word) {
        if (typeof word === 'string') {
            uncountables[word.toLowerCase()] = true;
            return;
        }
        // Set singular and plural references for the word.
        Pluralize.addPluralRule(word, '$0');
        Pluralize.addSingularRule(word, '$0');
    };
    /**
     * @param {?} single
     * @param {?} plural
     * @return {?}
     */
    Pluralize.addIrregularRule = /**
     * @param {?} single
     * @param {?} plural
     * @return {?}
     */
    function (single, plural) {
        /** @type {?} */
        var one = plural.toLowerCase();
        /** @type {?} */
        var many = single.toLowerCase();
        irregularSingles[one] = many;
        irregularPlurals[many] = one;
    };
    return Pluralize;
}());
/**
 * Irregular rules.
 */
[
    // Pronouns.
    ['I', 'we'],
    ['me', 'us'],
    ['he', 'they'],
    ['she', 'they'],
    ['them', 'them'],
    ['myself', 'ourselves'],
    ['yourself', 'yourselves'],
    ['itself', 'themselves'],
    ['herself', 'themselves'],
    ['himself', 'themselves'],
    ['themself', 'themselves'],
    ['is', 'are'],
    ['this', 'these'],
    ['that', 'those'],
    // Words ending in with a consonant and `o`.
    ['echo', 'echoes'],
    ['dingo', 'dingoes'],
    ['volcano', 'volcanoes'],
    ['tornado', 'tornadoes'],
    ['torpedo', 'torpedoes'],
    // Ends with `us`.
    ['genus', 'genera'],
    ['viscus', 'viscera'],
    // Ends with `ma`.
    ['stigma', 'stigmata'],
    ['stoma', 'stomata'],
    ['dogma', 'dogmata'],
    ['lemma', 'lemmata'],
    ['schema', 'schemata'],
    ['anathema', 'anathemata'],
    // Other irregular rules.
    ['ox', 'oxen'],
    ['axe', 'axes'],
    ['die', 'dice'],
    ['yes', 'yeses'],
    ['foot', 'feet'],
    ['eave', 'eaves'],
    ['goose', 'geese'],
    ['tooth', 'teeth'],
    ['quiz', 'quizzes'],
    ['human', 'humans'],
    ['proof', 'proofs'],
    ['carve', 'carves'],
    ['valve', 'valves'],
    ['thief', 'thieves'],
    ['genie', 'genies'],
    ['groove', 'grooves'],
    ['pickaxe', 'pickaxes'],
    ['whiskey', 'whiskies'],
].forEach(function (rule) {
    return Pluralize.addIrregularRule(rule[0], rule[1]);
});
/**
 * Pluralization rules.
 */
[
    [/s?$/i, 's'],
    [/([^aeiou]ese)$/i, '$1'],
    [/(ax|test)is$/i, '$1es'],
    [/(alias|[^aou]us|tlas|gas|ris)$/i, '$1es'],
    [/(e[mn]u)s?$/i, '$1s'],
    [/([^l]ias|[aeiou]las|[emjzr]as|[iu]am)$/i, '$1'],
    [/(alumn|syllab|octop|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1i'],
    [/(alumn|alg|vertebr)(?:a|ae)$/i, '$1ae'],
    [/(seraph|cherub)(?:im)?$/i, '$1im'],
    [/(her|at|gr)o$/i, '$1oes'],
    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$/i, '$1a'],
    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)(?:a|on)$/i, '$1a'],
    [/sis$/i, 'ses'],
    [/(?:(kni|wi|li)fe|(ar|l|ea|eo|oa|hoo)f)$/i, '$1$2ves'],
    [/([^aeiouy]|qu)y$/i, '$1ies'],
    [/([^ch][ieo][ln])ey$/i, '$1ies'],
    [/(x|ch|ss|sh|zz)$/i, '$1es'],
    [/(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$/i, '$1ices'],
    [/(m|l)(?:ice|ouse)$/i, '$1ice'],
    [/(pe)(?:rson|ople)$/i, '$1ople'],
    [/(child)(?:ren)?$/i, '$1ren'],
    [/eaux$/i, '$0'],
    [/m[ae]n$/i, 'men'],
    ['thou', 'you'],
].forEach(function (rule) {
    return Pluralize.addPluralRule(rule[0], rule[1]);
});
/**
 * Singularization rules.
 */
[
    [/s$/i, ''],
    [/(ss)$/i, '$1'],
    [/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)(?:sis|ses)$/i, '$1sis'],
    [/(^analy)(?:sis|ses)$/i, '$1sis'],
    [/(wi|kni|(?:after|half|high|low|mid|non|night|[^\w]|^)li)ves$/i, '$1fe'],
    [/(ar|(?:wo|[ae])l|[eo][ao])ves$/i, '$1f'],
    [/([^aeiouy]|qu)ies$/i, '$1y'],
    [/(^[pl]|zomb|^(?:neck)?t|[aeo][lt]|cut)ies$/i, '$1ie'],
    [/(\b(?:mon|smil))ies$/i, '$1ey'],
    [/(m|l)ice$/i, '$1ouse'],
    [/(seraph|cherub)im$/i, '$1'],
    [/(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|tlas|gas|(?:her|at|gr)o|ris)(?:es)?$/i, '$1'],
    [/(e[mn]u)s?$/i, '$1'],
    [/(movie|twelve)s$/i, '$1'],
    [/(cris|test|diagnos)(?:is|es)$/i, '$1is'],
    [/(alumn|syllab|octop|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1us'],
    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$/i, '$1um'],
    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$/i, '$1on'],
    [/(alumn|alg|vertebr)ae$/i, '$1a'],
    [/(cod|mur|sil|vert|ind)ices$/i, '$1ex'],
    [/(matr|append)ices$/i, '$1ix'],
    [/(pe)(rson|ople)$/i, '$1rson'],
    [/(child)ren$/i, '$1'],
    [/(eau)x?$/i, '$1'],
    [/men$/i, 'man'],
].forEach(function (rule) {
    return Pluralize.addSingularRule(rule[0], rule[1]);
});
/**
 * Uncountable rules.
 */
[
    // Singular words with no plurals.
    'advice',
    'adulthood',
    'agenda',
    'aid',
    'alcohol',
    'ammo',
    'athletics',
    'bison',
    'blood',
    'bream',
    'buffalo',
    'butter',
    'carp',
    'cash',
    'chassis',
    'chess',
    'clothing',
    'commerce',
    'cod',
    'cooperation',
    'corps',
    'digestion',
    'debris',
    'diabetes',
    'energy',
    'equipment',
    'elk',
    'excretion',
    'expertise',
    'flounder',
    'fun',
    'gallows',
    'garbage',
    'graffiti',
    'headquarters',
    'health',
    'herpes',
    'highjinks',
    'homework',
    'housework',
    'information',
    'jeans',
    'justice',
    'kudos',
    'labour',
    'literature',
    'machinery',
    'mackerel',
    'media',
    'mews',
    'moose',
    'music',
    'news',
    'pike',
    'plankton',
    'pliers',
    'pollution',
    'premises',
    'rain',
    'research',
    'rice',
    'salmon',
    'scissors',
    'series',
    'sewage',
    'shambles',
    'shrimp',
    'species',
    'staff',
    'swine',
    'trout',
    'traffic',
    'transporation',
    'tuna',
    'wealth',
    'welfare',
    'whiting',
    'wildebeest',
    'wildlife',
    'you',
    // Regexes.
    /pox$/i,
    /ois$/i,
    /deer$/i,
    /fish$/i,
    /sheep$/i,
    /measles$/i,
    /[^aeiou]ese$/i,
].forEach(Pluralize.addUncountableRule);
var PluralPipe = /** @class */ (function () {
    function PluralPipe() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    PluralPipe.prototype.transform = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return Pluralize.pluralize(value);
    };
    PluralPipe.decorators = [
        { type: Pipe, args: [{ name: 'plural' },] },
        { type: Injectable }
    ];
    return PluralPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DecodeURIPipe = /** @class */ (function () {
    function DecodeURIPipe() {
    }
    /**
     * @param {?} encodedString
     * @return {?}
     */
    DecodeURIPipe.prototype.transform = /**
     * @param {?} encodedString
     * @return {?}
     */
    function (encodedString) {
        /** @type {?} */
        var decodedString = '';
        if (!Helpers.isBlank(encodedString) && typeof encodedString === 'string') {
            decodedString = decodeURIComponent(encodedString);
        }
        return decodedString;
    };
    DecodeURIPipe.decorators = [
        { type: Pipe, args: [{ name: 'decodeURI' },] },
        { type: Injectable }
    ];
    return DecodeURIPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var GroupByPipe = /** @class */ (function () {
    function GroupByPipe() {
    }
    /**
     * @param {?} input
     * @param {?} prop
     * @return {?}
     */
    GroupByPipe.prototype.transform = /**
     * @param {?} input
     * @param {?} prop
     * @return {?}
     */
    function (input, prop) {
        var e_1, _a;
        if (!Array.isArray(input)) {
            return input;
        }
        /** @type {?} */
        var arr = {};
        try {
            for (var input_1 = __values(input), input_1_1 = input_1.next(); !input_1_1.done; input_1_1 = input_1.next()) {
                var value = input_1_1.value;
                /** @type {?} */
                var field = can(value).have(prop);
                if (Helpers.isBlank(arr[field])) {
                    arr[field] = [];
                }
                arr[field].push(value);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (input_1_1 && !input_1_1.done && (_a = input_1.return)) _a.call(input_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return Object.keys(arr).map(function (key) { return ({ key: key, value: arr[key] }); });
    };
    GroupByPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'groupBy',
                },] }
    ];
    return GroupByPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoPipesModule = /** @class */ (function () {
    function NovoPipesModule() {
    }
    NovoPipesModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [PluralPipe, DecodeURIPipe, GroupByPipe],
                    exports: [PluralPipe, DecodeURIPipe, GroupByPipe],
                },] }
    ];
    return NovoPipesModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoButtonElement = /** @class */ (function () {
    function NovoButtonElement() {
        this.side = 'right';
    }
    Object.defineProperty(NovoButtonElement.prototype, "icon", {
        get: /**
         * @return {?}
         */
        function () {
            return this._icon;
        },
        set: /**
         * @param {?} icon
         * @return {?}
         */
        function (icon) {
            if (icon) {
                this._icon = "bhi-" + icon;
            }
        },
        enumerable: true,
        configurable: true
    });
    NovoButtonElement.decorators = [
        { type: Component, args: [{
                    selector: 'button[theme]',
                    host: {
                        '[attr.theme]': 'theme',
                        '[attr.color]': 'color',
                        '[attr.icon]': 'icon',
                        '[attr.loading]': 'loading',
                        '[attr.side]': 'side',
                    },
                    template: "\n        <div class=\"flex-wrapper\">\n            <!--Left Icon-->\n            <i *ngIf=\"icon && side === 'left' && !loading\" [ngClass]=\"icon\"></i>\n            <!--Transcluded Content-->\n            <ng-content></ng-content>\n            <!--Right Icon-->\n            <i *ngIf=\"icon && side === 'right' && !loading\" [ngClass]=\"icon\"></i>\n            <!--Loading-->\n            <i *ngIf=\"loading\" class=\"loading\">\n                <svg version=\"1.1\"\n                    xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:a=\"http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/\"\n                    x=\"0px\" y=\"0px\" width=\"18.2px\" height=\"18.5px\" viewBox=\"0 0 18.2 18.5\" style=\"enable-background:new 0 0 18.2 18.5;\"\n                    xml:space=\"preserve\">\n                <style type=\"text/css\">\n                    .spinner { fill:#FFFFFF; }\n                </style>\n                    <path class=\"spinner\" d=\"M9.2,18.5C4.1,18.5,0,14.4,0,9.2S4.1,0,9.2,0c0.9,0,1.9,0.1,2.7,0.4c0.8,0.2,1.2,1.1,1,1.9\n                        c-0.2,0.8-1.1,1.2-1.9,1C10.5,3.1,9.9,3,9.2,3C5.8,3,3,5.8,3,9.2s2.8,6.2,6.2,6.2c2.8,0,5.3-1.9,6-4.7c0.2-0.8,1-1.3,1.8-1.1\n                        c0.8,0.2,1.3,1,1.1,1.8C17.1,15.7,13.4,18.5,9.2,18.5z\"/>\n                </svg>\n            </i>\n        </div>\n    ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    NovoButtonElement.propDecorators = {
        color: [{ type: Input }],
        side: [{ type: Input }],
        theme: [{ type: Input }],
        loading: [{ type: Input }],
        icon: [{ type: Input }]
    };
    return NovoButtonElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoButtonModule = /** @class */ (function () {
    function NovoButtonModule() {
    }
    NovoButtonModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    declarations: [NovoButtonElement],
                    exports: [NovoButtonElement],
                },] }
    ];
    return NovoButtonModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoLoadingElement = /** @class */ (function () {
    function NovoLoadingElement() {
    }
    NovoLoadingElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-loading',
                    host: {
                        '[class]': 'theme || ""',
                    },
                    template: "\n        <span class=\"dot\"></span>\n        <span class=\"dot\"></span>\n        <span class=\"dot\"></span>\n        <span class=\"dot\"></span>\n        <span class=\"dot\"></span>\n    "
                }] }
    ];
    NovoLoadingElement.propDecorators = {
        theme: [{ type: Input }]
    };
    return NovoLoadingElement;
}());
var NovoSpinnerElement = /** @class */ (function () {
    function NovoSpinnerElement() {
    }
    NovoSpinnerElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-spinner',
                    template: "\n        <svg class=\"bullhornSpinner\" [ngClass]=\"theme\" height=\"100\" width=\"100\" viewBox=\"0 0 100 100\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" [attr.inverse]=\"inverse\">\n            <title>Bullhorn Spinner Animation</title>\n            <desc>Spinner animation indicating loading</desc>\n            <defs>\n                <style>\n                    .bullhornSpinner g.circleGroup {\n                        -webkit-filter: url(\"{{baseHref || ''}}#gooEffect\");\n                        filter: url(\"{{baseHref || ''}}#gooEffect\");\n                    }\n                    _:-webkit-full-screen:not(:root:root), .bullhornSpinner g.circleGroup {\n                        -webkit-filter: none;\n                        filter: none;\n                    }\n                    @supports (-webkit-text-size-adjust:none) and (not (-ms-accelerator:true)) and (not (-moz-appearance:none)) {\n                        .bullhornSpinner g.circleGroup {\n                            -webkit-filter: none;\n                            filter: none;\n                        }\n                    }\n                    @supports (-webkit-text-size-adjust:none) and (not (-ms-accelerator:true)) and (not (-moz-appearance:none)) {\n                        .bullhornSpinner g.circleGroup {\n                            -webkit-filter: none;\n                            filter: none;\n                        }\n                    }\n                </style>\n                <filter id=\"gooEffect\">\n                    <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"5\" result=\"blur\" />\n                    <feColorMatrix in=\"blur\" mode=\"matrix\" values=\"\n                            1.3 0 0 0 0\n                            0 1.3 0 0 0\n                            0 0 1.3 0 0\n                            0 0 0 19 -7\" result=\"gooEffect\" />\n                    <feComposite in=\"SourceGraphic\" in2=\"gooEffect\" operator=\"atop\" />\n                </filter>\n            </defs>\n            <path d=\"M 43 43 L 54 45 L 80 40 L 43 43\" stroke=\"none\" fill=\"none\" id=\"firstLinePath\"/>\n            <path d=\"M 43 43 L 48 41 L 48 18 L 43 43\" stroke=\"none\" fill=\"none\" id=\"secondLinePath\"/>\n            <path d=\"M 43 43 L 42 45 L 15 40 L 43 43\" stroke=\"none\" fill=\"none\" id=\"thirdLinePath\"/>\n            <path d=\"M 43 43 L 44 52 L 29 78 L 43 43\" stroke=\"none\" fill=\"none\" id=\"fourthLinePath\"/>\n            <path d=\"M 43 43 L 52 52 L 68 78 L 43 43\" stroke=\"none\" fill=\"none\" id=\"fifthLinePath\"/>\n            <g class=\"circleGroup\" transform=\"translate(7, 7)\">\n                <circle r=\"6\" cx=\"0\" cy=\"0\">\n                    <!-- Define the motion path animation -->\n                    <animateMotion dur=\"3.4\" repeatCount=\"indefinite\">\n                        <mpath xlink:href=\"#firstLinePath\"/>\n                    </animateMotion>\n                </circle>\n                <circle r=\"6\" cx=\"0\" cy=\"0\">\n                    <!-- Define the motion path animation -->\n                    <animateMotion dur=\"3.4\" repeatCount=\"indefinite\">\n                        <mpath xlink:href=\"#secondLinePath\"/>\n                    </animateMotion>\n                </circle>\n                <circle r=\"6\" cx=\"0\" cy=\"0\">\n                    <!-- Define the motion path animation -->\n                    <animateMotion dur=\"3.4\" repeatCount=\"indefinite\">\n                        <mpath xlink:href=\"#thirdLinePath\"/>\n                    </animateMotion>\n                </circle>\n                <circle r=\"6\" cx=\"0\" cy=\"0\">\n                    <!-- Define the motion path animation -->\n                    <animateMotion dur=\"3.4\" repeatCount=\"indefinite\">\n                        <mpath xlink:href=\"#fourthLinePath\"/>\n                    </animateMotion>\n                </circle>\n                <circle r=\"6\" cx=\"0\" cy=\"0\">\n                    <!-- Define the motion path animation -->\n                    <animateMotion dur=\"3.4\" repeatCount=\"indefinite\">\n                        <mpath xlink:href=\"#fifthLinePath\"/>\n                    </animateMotion>\n                </circle>\n            </g>\n        </svg>\n    "
                }] }
    ];
    NovoSpinnerElement.propDecorators = {
        theme: [{ type: Input }],
        inverse: [{ type: Input }],
        baseHref: [{ type: Input }]
    };
    return NovoSpinnerElement;
}());
var NovoSkeletonDirective = /** @class */ (function () {
    function NovoSkeletonDirective() {
        this.skeleton = true;
    }
    NovoSkeletonDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[skeleton]',
                },] }
    ];
    NovoSkeletonDirective.propDecorators = {
        skeleton: [{ type: HostBinding, args: ['class.skeleton',] }]
    };
    return NovoSkeletonDirective;
}());
var NovoLoadedDirective = /** @class */ (function () {
    function NovoLoadedDirective() {
    }
    NovoLoadedDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[loaded]',
                },] }
    ];
    return NovoLoadedDirective;
}());
var NovoIsLoadingDirective = /** @class */ (function () {
    function NovoIsLoadingDirective(viewContainer) {
        this.viewContainer = viewContainer;
        this.hasView = false;
        this.skeletonViews = [];
        this.loadedViews = [];
    }
    Object.defineProperty(NovoIsLoadingDirective.prototype, "isLoading", {
        set: /**
         * @param {?} condition
         * @return {?}
         */
        function (condition) {
            if (!condition && !this.hasView) {
                this.destroyViews(this.loadedViews);
                this.skeletonViews = this.createViews(this.skeletonTemplates);
                this.hasView = true;
            }
            else if (condition && this.hasView) {
                this.destroyViews(this.skeletonViews);
                this.loadedViews = this.createViews(this.loadedTemplates);
                this.hasView = false;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} templates
     * @return {?}
     */
    NovoIsLoadingDirective.prototype.createViews = /**
     * @param {?} templates
     * @return {?}
     */
    function (templates) {
        var _this = this;
        return templates && templates.map(function (v) { return _this.viewContainer.createEmbeddedView(v); });
    };
    /**
     * @param {?} views
     * @return {?}
     */
    NovoIsLoadingDirective.prototype.destroyViews = /**
     * @param {?} views
     * @return {?}
     */
    function (views) {
        var e_1, _a;
        if (views) {
            try {
                for (var views_1 = __values(views), views_1_1 = views_1.next(); !views_1_1.done; views_1_1 = views_1.next()) {
                    var view = views_1_1.value;
                    view.destroy();
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (views_1_1 && !views_1_1.done && (_a = views_1.return)) _a.call(views_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
    };
    NovoIsLoadingDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[isLoading]',
                },] }
    ];
    /** @nocollapse */
    NovoIsLoadingDirective.ctorParameters = function () { return [
        { type: ViewContainerRef }
    ]; };
    NovoIsLoadingDirective.propDecorators = {
        skeletonTemplates: [{ type: ContentChildren, args: [NovoSkeletonDirective, { read: TemplateRef },] }],
        loadedTemplates: [{ type: ContentChildren, args: [NovoLoadedDirective, { read: TemplateRef },] }],
        isLoading: [{ type: Input }]
    };
    return NovoIsLoadingDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoLoadingModule = /** @class */ (function () {
    function NovoLoadingModule() {
    }
    NovoLoadingModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    declarations: [NovoLoadingElement, NovoSpinnerElement, NovoIsLoadingDirective, NovoLoadedDirective, NovoSkeletonDirective],
                    exports: [NovoLoadingElement, NovoSpinnerElement, NovoIsLoadingDirective, NovoLoadedDirective, NovoSkeletonDirective],
                },] }
    ];
    return NovoLoadingModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoTooltip = /** @class */ (function () {
    function NovoTooltip() {
    }
    NovoTooltip.decorators = [
        { type: Component, args: [{
                    selector: 'novo-tooltip',
                    template: "<div [@state]=\"noAnimate ? 'no-animation' : 'visible'\"\n  [ngClass]=\"[tooltipType, this.rounded ? 'rounded' : '', size ? size : '', this.preline? 'preline' : '', position]\">{{message}}</div>",
                    animations: [
                        trigger('state', [
                            state('initial, void, hidden', style({ opacity: '0' })),
                            state('visible', style({ opacity: '1' })),
                            transition('* => visible', [
                                style({
                                    opacity: 0,
                                    visibility: 'visible',
                                }),
                                animate('0.3s ease-in'),
                            ]),
                            transition('* => hidden', [
                                style({
                                    opacity: 1,
                                    visibility: 'hidden',
                                }),
                                animate('0.3s ease-in'),
                            ]),
                        ]),
                    ],
                    styles: ["novo-tooltip div{background:#383838;color:#fff;padding:8px 10px;font-size:12px;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;line-height:12px;white-space:nowrap;text-shadow:0 -1px 0 #000;box-shadow:4px 4px 8px rgba(0,0,0,.3)}novo-tooltip div.error{background-color:#b34e4d;text-shadow:0 -1px 0 #592726}novo-tooltip div.info{background-color:#3986ac;text-shadow:0 -1px 0 #1a3c4d}novo-tooltip div.warning{background-color:#c09854;text-shadow:0 -1px 0 #6c5328}novo-tooltip div.success{background-color:#458746;text-shadow:0 -1px 0 #1a321a}novo-tooltip div.rounded{border-radius:4px}novo-tooltip div.extra-large,novo-tooltip div.large,novo-tooltip div.medium,novo-tooltip div.small{white-space:normal;line-height:1.4em;word-wrap:break-word}novo-tooltip div.extra-large{width:400px;font-size:1.2vh}novo-tooltip div.large{width:300px}novo-tooltip div.medium{width:150px}novo-tooltip div.small{width:80px}novo-tooltip div.preline{white-space:pre-line}novo-tooltip div.top:before{margin-bottom:-11px;left:calc(50% - 6px);bottom:0;border-top-color:#383838}novo-tooltip div.top.error:before{border-top-color:#b34e4d}novo-tooltip div.top.info:before{border-top-color:#3986ac}novo-tooltip div.top.warning:before{border-top-color:#c09854}novo-tooltip div.top.success:before{border-top-color:#458746}novo-tooltip div.top-left:before{border-top-color:#383838;margin-right:0;margin-bottom:-11px;right:0;bottom:0}novo-tooltip div.top-left.error:before{border-top-color:#b34e4d}novo-tooltip div.top-left.info:before{border-top-color:#3986ac}novo-tooltip div.top-left.warning:before{border-top-color:#c09854}novo-tooltip div.top-left.success:before{border-top-color:#458746}novo-tooltip div.top-right:before{border-top-color:#383838;margin-left:0;margin-bottom:-11px;left:0;bottom:0}novo-tooltip div.top-right.error:before{border-top-color:#b34e4d}novo-tooltip div.top-right.info:before{border-top-color:#3986ac}novo-tooltip div.top-right.warning:before{border-top-color:#c09854}novo-tooltip div.top-right.success:before{border-top-color:#458746}novo-tooltip div.bottom:before{margin-top:-11px;left:calc(50% - 6px);top:0;border-bottom-color:#383838}novo-tooltip div.bottom.error:before{border-top-color:#b34e4d}novo-tooltip div.bottom.info:before{border-top-color:#3986ac}novo-tooltip div.bottom.warning:before{border-top-color:#c09854}novo-tooltip div.bottom.success:before{border-top-color:#458746}novo-tooltip div.bottom-left:before{border-bottom-color:#383838;margin-right:0;margin-top:-11px;right:0;top:0}novo-tooltip div.bottom-left.error:before{border-bottom-color:#b34e4d}novo-tooltip div.bottom-left.info:before{border-bottom-color:#3986ac}novo-tooltip div.bottom-left.warning:before{border-bottom-color:#c09854}novo-tooltip div.bottom-left.success:before{border-bottom-color:#458746}novo-tooltip div.bottom-right:before{border-bottom-color:#383838;margin-left:0;margin-top:-11px;left:0;top:0}novo-tooltip div.bottom-right.error:before{border-bottom-color:#b34e4d}novo-tooltip div.bottom-right.info:before{border-bottom-color:#3986ac}novo-tooltip div.bottom-right.warning:before{border-bottom-color:#c09854}novo-tooltip div.bottom-right.success:before{border-bottom-color:#458746}novo-tooltip div.left:before{border-left-color:#383838;margin-right:-11px;margin-bottom:-6px;right:0;bottom:50%}novo-tooltip div.left.error:before{border-left-color:#b34e4d}novo-tooltip div.left.info:before{border-left-color:#3986ac}novo-tooltip div.left.warning:before{border-left-color:#c09854}novo-tooltip div.left.success:before{border-left-color:#458746}novo-tooltip div.right:before{left:0;bottom:50%;border-right-color:#383838;margin-left:-11px;margin-bottom:-6px}novo-tooltip div.right.error:before{border-right-color:#b34e4d}novo-tooltip div.right.info:before{border-right-color:#3986ac}novo-tooltip div.right.warning:before{border-right-color:#c09854}novo-tooltip div.right.success:before{border-right-color:#458746}novo-tooltip div:before{content:'';position:absolute;background:0 0;border:6px solid transparent;box-sizing:border-box}"]
                }] }
    ];
    return NovoTooltip;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TooltipDirective = /** @class */ (function () {
    function TooltipDirective(overlay, viewContainerRef, elementRef) {
        this.overlay = overlay;
        this.viewContainerRef = viewContainerRef;
        this.elementRef = elementRef;
        this.position = 'top';
        this.type = 'normal';
        this.active = true;
        this.removeArrow = false;
        this.autoPosition = false;
    }
    /**
     * @param {?} position
     * @return {?}
     */
    TooltipDirective.prototype.isPosition = /**
     * @param {?} position
     * @return {?}
     */
    function (position) {
        return position.toLowerCase() === (this.position || '').toLowerCase();
    };
    /**
     * @param {?} type
     * @return {?}
     */
    TooltipDirective.prototype.isType = /**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        return type.toLowerCase() === (this.type || '').toLowerCase();
    };
    /**
     * @param {?} size
     * @return {?}
     */
    TooltipDirective.prototype.isSize = /**
     * @param {?} size
     * @return {?}
     */
    function (size) {
        return size.toLowerCase() === (this.size || '').toLowerCase();
    };
    /**
     * @return {?}
     */
    TooltipDirective.prototype.onMouseEnter = /**
     * @return {?}
     */
    function () {
        if (this.tooltip && this.active && !this.always) {
            this.show();
        }
    };
    /**
     * @return {?}
     */
    TooltipDirective.prototype.onMouseLeave = /**
     * @return {?}
     */
    function () {
        if (this.overlayRef && !this.always) {
            this.hide();
            this.overlayRef.dispose();
        }
    };
    /**
     * @return {?}
     */
    TooltipDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.tooltip && this.always && this.active) {
            this.show();
        }
    };
    /**
     * @return {?}
     */
    TooltipDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.overlayRef && !this.always) {
            this.hide();
            this.overlayRef.dispose();
        }
    };
    /**
     * @private
     * @return {?}
     */
    TooltipDirective.prototype.show = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var overlayState = new OverlayConfig();
        overlayState.positionStrategy = this.getPosition();
        if (this.always) {
            overlayState.scrollStrategy = this.overlay.scrollStrategies.reposition();
        }
        else {
            overlayState.scrollStrategy = this.overlay.scrollStrategies.close();
        }
        overlayState.scrollStrategy.enable();
        this.overlayRef = this.overlay.create(overlayState);
        this.overlayRef.detach();
        this.portal = this.portal || new ComponentPortal(NovoTooltip, this.viewContainerRef);
        /** @type {?} */
        var tooltipInstance = this.overlayRef.attach(this.portal).instance;
        tooltipInstance.message = this.tooltip;
        tooltipInstance.tooltipType = this.type;
        tooltipInstance.rounded = this.rounded;
        tooltipInstance.size = this.size;
        tooltipInstance.preline = this.preline;
        tooltipInstance.noAnimate = this.noAnimate;
        tooltipInstance.position = this.removeArrow ? 'no-arrow' : this.position;
    };
    /**
     * @private
     * @return {?}
     */
    TooltipDirective.prototype.hide = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.overlayRef) {
            this.overlayRef.detach();
        }
    };
    /**
     * @private
     * @return {?}
     */
    TooltipDirective.prototype.getPosition = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var strategy;
        /** @type {?} */
        var originPosition;
        /** @type {?} */
        var overlayPosition;
        /** @type {?} */
        var offsetX;
        /** @type {?} */
        var offsetY;
        switch (this.position) {
            case 'right':
                originPosition = { originX: 'end', originY: 'center' };
                overlayPosition = { overlayX: 'start', overlayY: 'center' };
                offsetX = 8;
                offsetY = 0;
                break;
            case 'bottom':
                originPosition = { originX: 'center', originY: 'bottom' };
                overlayPosition = { overlayX: 'center', overlayY: 'top' };
                offsetX = 0;
                offsetY = 8;
                break;
            case 'top':
                originPosition = { originX: 'center', originY: 'top' };
                overlayPosition = { overlayX: 'center', overlayY: 'bottom' };
                offsetX = 0;
                offsetY = -8;
                break;
            case 'left':
                originPosition = { originX: 'start', originY: 'center' };
                overlayPosition = { overlayX: 'end', overlayY: 'center' };
                offsetX = -8;
                offsetY = 0;
                break;
            case 'top-left':
                originPosition = { originX: 'start', originY: 'top' };
                overlayPosition = { overlayX: 'end', overlayY: 'bottom' };
                offsetX = 8;
                offsetY = -8;
                break;
            case 'bottom-left':
                originPosition = { originX: 'start', originY: 'bottom' };
                overlayPosition = { overlayX: 'end', overlayY: 'top' };
                offsetX = 8;
                offsetY = 8;
                break;
            case 'top-right':
                originPosition = { originX: 'end', originY: 'top' };
                overlayPosition = { overlayX: 'start', overlayY: 'bottom' };
                offsetX = -8;
                offsetY = -8;
                break;
            case 'bottom-right':
                originPosition = { originX: 'end', originY: 'bottom' };
                overlayPosition = { overlayX: 'start', overlayY: 'top' };
                offsetX = -8;
                offsetY = 8;
                break;
            default:
                break;
        }
        strategy = this.overlay
            .position()
            .connectedTo(this.elementRef, originPosition, overlayPosition)
            .withOffsetX(offsetX)
            .withOffsetY(offsetY);
        return this.autoPosition ? this.withFallbackStrategy(strategy) : strategy;
    };
    /**
     * @private
     * @param {?} strategy
     * @return {?}
     */
    TooltipDirective.prototype.withFallbackStrategy = /**
     * @private
     * @param {?} strategy
     * @return {?}
     */
    function (strategy) {
        strategy
            .withFallbackPosition({ originX: 'center', originY: 'bottom' }, { overlayX: 'center', overlayY: 'top' }, 0, 8)
            .withFallbackPosition({ originX: 'end', originY: 'bottom' }, { overlayX: 'end', overlayY: 'top' }, 0, 8)
            .withFallbackPosition({ originX: 'end', originY: 'center' }, { overlayX: 'start', overlayY: 'center' }, 8, 0)
            .withFallbackPosition({ originX: 'start', originY: 'center' }, { overlayX: 'end', overlayY: 'center' }, -8, 0)
            .withFallbackPosition({ originX: 'center', originY: 'top' }, { overlayX: 'center', overlayY: 'bottom' }, 0, -8)
            .withFallbackPosition({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }, 0, 8)
            .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' }, 0, -8)
            .withFallbackPosition({ originX: 'end', originY: 'top' }, { overlayX: 'end', overlayY: 'bottom' }, 0, -8)
            .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'end', overlayY: 'bottom' }, 8, -8)
            .withFallbackPosition({ originX: 'start', originY: 'bottom' }, { overlayX: 'end', overlayY: 'top' }, 8, 8)
            .withFallbackPosition({ originX: 'end', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' }, -8, -8)
            .withFallbackPosition({ originX: 'end', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }, -8, 8);
        return strategy;
    };
    TooltipDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[tooltip]',
                    host: {
                        '[attr.data-hint]': 'tooltip',
                    },
                },] }
    ];
    /** @nocollapse */
    TooltipDirective.ctorParameters = function () { return [
        { type: Overlay },
        { type: ViewContainerRef },
        { type: ElementRef }
    ]; };
    TooltipDirective.propDecorators = {
        tooltip: [{ type: Input }],
        position: [{ type: Input, args: ['tooltipPosition',] }],
        type: [{ type: Input, args: ['tooltipType',] }],
        size: [{ type: Input, args: ['tooltipSize',] }],
        bounce: [{ type: Input, args: ['tooltipBounce',] }],
        noAnimate: [{ type: Input, args: ['tooltipNoAnimate',] }],
        rounded: [{ type: Input, args: ['tooltipRounded',] }],
        always: [{ type: Input, args: ['tooltipAlways',] }],
        active: [{ type: Input, args: ['tooltipActive',] }],
        preline: [{ type: Input, args: ['tooltipPreline',] }],
        removeArrow: [{ type: Input, args: ['removeTooltipArrow',] }],
        autoPosition: [{ type: Input, args: ['tooltipAutoPosition',] }],
        onMouseEnter: [{ type: HostListener, args: ['mouseenter',] }],
        onMouseLeave: [{ type: HostListener, args: ['mouseleave',] }]
    };
    return TooltipDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoTooltipModule = /** @class */ (function () {
    function NovoTooltipModule() {
    }
    NovoTooltipModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [TooltipDirective, NovoTooltip],
                    exports: [TooltipDirective],
                    entryComponents: [NovoTooltip],
                    imports: [CommonModule],
                },] }
    ];
    return NovoTooltipModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoLabelService = /** @class */ (function () {
    function NovoLabelService(userLocale) {
        if (userLocale === void 0) { userLocale = 'en-US'; }
        this.userLocale = userLocale;
        this.filters = 'Filter';
        this.clear = 'Clear';
        this.sort = 'Sort';
        this.distributionListOwner = 'Owner';
        this.dateAdded = 'Date Added';
        this.emptyTableMessage = 'No Records to display...';
        this.noMatchingRecordsMessage = 'No Matching Records';
        this.erroredTableMessage = 'Oops! An error occurred.';
        this.pickerError = 'Oops! An error occurred.';
        this.pickerEmpty = 'No results to display...';
        this.quickNoteError = 'Oops! An error occurred.';
        this.quickNoteEmpty = 'No results to display...';
        this.required = 'Required';
        this.numberTooLarge = 'Number is too large';
        this.save = 'Save';
        this.cancel = 'Cancel';
        this.next = 'Next';
        this.itemsPerPage = 'Items per page:';
        this.select = 'Select...';
        this.selected = 'Selected';
        this.selectAllOnPage = 'Select all on page';
        this.deselectAll = 'Deselect all';
        this.refresh = 'Refresh';
        this.close = 'Close';
        this.move = 'Move';
        this.startDate = 'Start Date';
        this.endDate = 'End Date';
        this.more = 'more';
        this.clearAll = 'CLEAR ALL';
        this.clearAllNormalCase = 'Clear All';
        this.clearSort = 'Clear Sort';
        this.clearFilter = 'Clear Filter';
        this.today = 'Today';
        this.now = 'Now';
        this.isRequired = 'is required';
        this.notValidYear = 'is not a valid year';
        this.isTooLarge = 'is too large';
        this.invalidAddress = 'requires at least one field filled out';
        this.invalidEmail = 'requires a valid email (ex. abc@123.com)';
        this.minLength = 'is required to be a minimum length of';
        this.past1Day = 'Past 1 Day';
        this.past7Days = 'Past 7 Days';
        this.past30Days = 'Past 30 Days';
        this.past90Days = 'Past 90 Days';
        this.past1Year = 'Past 1 Year';
        this.next1Day = 'Next 1 Day';
        this.next7Days = 'Next 7 Days';
        this.next30Days = 'Next 30 Days';
        this.next90Days = 'Next 90 Days';
        this.next1Year = 'Next 1 Year';
        this.customDateRange = 'Custom Date Range';
        this.backToPresetFilters = 'Back to Preset Filters';
        this.okGotIt = 'Ok, Got it';
        this.address = 'Address';
        this.address1 = 'Address';
        this.apt = 'Apt'; // TODO delete
        // TODO delete
        this.address2 = 'Apt';
        this.city = 'City / Locality';
        this.state = 'State / Region';
        this.zip = 'Postal Code';
        this.zipCode = 'Postal Code'; // TODO delete
        // TODO delete
        this.country = 'Country';
        this.or = 'or';
        this.clickToBrowse = 'click to browse';
        this.chooseAFile = 'Choose a file';
        this.no = 'No';
        this.yes = 'Yes';
        this.search = 'SEARCH';
        this.noItems = 'There are no items';
        this.dateFormat = 'MM/dd/yyyy';
        this.dateFormatPlaceholder = 'MM/DD/YYYY';
        this.timeFormatPlaceholderAM = 'hh:mm AM';
        this.timeFormatPlaceholder24Hour = 'HH:mm';
        this.timeFormatAM = 'AM';
        this.timeFormatPM = 'PM';
        this.confirmChangesModalMessage = 'Are you sure you want to change this field?';
        this.promptModalMessage = 'Do you want to perform the following changes?';
        this.asyncFailure = 'Async validation was not called within the 10s threshold, you might want to reload the page to try again';
        this.previous = 'Previous';
        this.actions = 'Actions';
        this.all = 'All';
        this.groupedMultiPickerEmpty = 'No items to display';
        this.groupedMultiPickerSelectCategory = 'Select a category from the right to get started';
        this.add = 'Add';
        this.encryptedFieldTooltip = 'This data has been stored at the highest level of security';
        this.noStatesForCountry = 'No states available for the selected country';
        this.selectCountryFirst = 'Please select a country before selecting a state';
        this.invalidIntegerInput = 'Special characters are not allowed for';
        this.maxRecordsReached = 'Sorry, you have reached the maximum number of records allowed for this field';
    }
    /**
     * @param {?} field
     * @param {?} maxlength
     * @return {?}
     */
    NovoLabelService.prototype.maxlengthMetWithField = /**
     * @param {?} field
     * @param {?} maxlength
     * @return {?}
     */
    function (field, maxlength) {
        return "Sorry, you have reached the maximum character count of " + maxlength + " for " + field + ".";
    };
    /**
     * @param {?} maxlength
     * @return {?}
     */
    NovoLabelService.prototype.maxlengthMet = /**
     * @param {?} maxlength
     * @return {?}
     */
    function (maxlength) {
        return "Sorry, you have reached the maximum character count of " + maxlength + " for this field.";
    };
    /**
     * @param {?} field
     * @param {?} maxlength
     * @return {?}
     */
    NovoLabelService.prototype.invalidMaxlengthWithField = /**
     * @param {?} field
     * @param {?} maxlength
     * @return {?}
     */
    function (field, maxlength) {
        return "Sorry, you have exceeded the maximum character count of " + maxlength + " for " + field + ".";
    };
    /**
     * @param {?} maxlength
     * @return {?}
     */
    NovoLabelService.prototype.invalidMaxlength = /**
     * @param {?} maxlength
     * @return {?}
     */
    function (maxlength) {
        return "Sorry, you have exceeded the maximum character count of " + maxlength + " for this field.";
    };
    /**
     * @param {?} toMany
     * @return {?}
     */
    NovoLabelService.prototype.getToManyPlusMore = /**
     * @param {?} toMany
     * @return {?}
     */
    function (toMany) {
        return "+" + toMany.quantity + " more";
    };
    /**
     * @param {?} selected
     * @return {?}
     */
    NovoLabelService.prototype.selectedRecords = /**
     * @param {?} selected
     * @return {?}
     */
    function (selected) {
        return selected + " records are selected.";
    };
    /**
     * @param {?} shown
     * @param {?} total
     * @return {?}
     */
    NovoLabelService.prototype.showingXofXResults = /**
     * @param {?} shown
     * @param {?} total
     * @return {?}
     */
    function (shown, total) {
        return "Showing " + shown + " of " + total + " Results.";
    };
    /**
     * @param {?} total
     * @param {?=} select
     * @return {?}
     */
    NovoLabelService.prototype.totalRecords = /**
     * @param {?} total
     * @param {?=} select
     * @return {?}
     */
    function (total, select) {
        if (select === void 0) { select = false; }
        return select ? "Select all " + total + " records." : "De-select remaining " + total + " records.";
    };
    /**
     * @param {?} value
     * @param {?} format
     * @return {?}
     */
    NovoLabelService.prototype.formatDateWithFormat = /**
     * @param {?} value
     * @param {?} format
     * @return {?}
     */
    function (value, format$$1) {
        /** @type {?} */
        var date = value instanceof Date ? value : new Date(value);
        if (date.getTime() !== date.getTime()) {
            return value;
        }
        return new Intl.DateTimeFormat(this.userLocale, format$$1).format(date);
    };
    /**
     * @return {?}
     */
    NovoLabelService.prototype.getWeekdays = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /**
         * @param {?} dayOfWeek
         * @return {?}
         */
        function getDay$$1(dayOfWeek) {
            /** @type {?} */
            var dt = new Date();
            return dt.setDate(dt.getDate() - dt.getDay() + dayOfWeek);
        }
        return [getDay$$1(0), getDay$$1(1), getDay$$1(2), getDay$$1(3), getDay$$1(4), getDay$$1(5), getDay$$1(6)].reduce(function (weekdays, dt) {
            weekdays.push(new Intl.DateTimeFormat(_this.userLocale, { weekday: 'long' }).format(dt));
            return weekdays;
        }, []);
    };
    /**
     * @return {?}
     */
    NovoLabelService.prototype.getMonths = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /**
         * @param {?} month
         * @return {?}
         */
        function getMonth$$1(month) {
            /** @type {?} */
            var dt = new Date();
            return dt.setMonth(month, 1);
        }
        return [
            getMonth$$1(0),
            getMonth$$1(1),
            getMonth$$1(2),
            getMonth$$1(3),
            getMonth$$1(4),
            getMonth$$1(5),
            getMonth$$1(6),
            getMonth$$1(7),
            getMonth$$1(8),
            getMonth$$1(9),
            getMonth$$1(10),
            getMonth$$1(11),
        ].reduce(function (months, dt) {
            months.push(new Intl.DateTimeFormat(_this.userLocale, { month: 'long' }).format(dt));
            return months;
        }, []);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoLabelService.prototype.getProperty = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return this[value];
    };
    /**
     * @param {?} page
     * @param {?} pageSize
     * @param {?} length
     * @param {?} short
     * @return {?}
     */
    NovoLabelService.prototype.getRangeText = /**
     * @param {?} page
     * @param {?} pageSize
     * @param {?} length
     * @param {?} short
     * @return {?}
     */
    function (page, pageSize, length, short) {
        if (length === 0 || pageSize === 0) {
            return "Displaying 0 of " + length;
        }
        length = Math.max(length, 0);
        /** @type {?} */
        var startIndex = page * pageSize;
        // If the start index exceeds the list length, do not try and fix the end index to the end.
        /** @type {?} */
        var endIndex = startIndex < length ? Math.min(startIndex + pageSize, length) : startIndex + pageSize;
        return short ? startIndex + 1 + " - " + endIndex + "/" + length : "Displaying " + (startIndex + 1) + " - " + endIndex + " of " + length;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoLabelService.prototype.formatCurrency = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var options = { style: 'currency', currency: 'USD' };
        return new Intl.NumberFormat(this.userLocale, options).format(value);
    };
    /**
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */
    NovoLabelService.prototype.formatNumber = /**
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */
    function (value, options) {
        return new Intl.NumberFormat(this.userLocale, options).format(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoLabelService.prototype.formatDateShort = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var options = {
            // DD/MM/YYYY, HH:MM A - 02/14/2017, 1:17 PM
            month: '2-digit',
            day: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
        };
        /** @type {?} */
        var _value = value === null || value === undefined || value === '' ? new Date() : new Date(value);
        return new Intl.DateTimeFormat(this.userLocale, options).format(_value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoLabelService.prototype.formatTime = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var options = {
            // HH:MM A - 1:17 PM
            hour: '2-digit',
            minute: '2-digit',
        };
        /** @type {?} */
        var _value = value === null || value === undefined || value === '' ? new Date() : new Date(value);
        return new Intl.DateTimeFormat(this.userLocale, options).format(_value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoLabelService.prototype.formatDate = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var options = {
            // DD/MM/YYYY - 02/14/2017
            month: '2-digit',
            day: '2-digit',
            year: 'numeric',
        };
        /** @type {?} */
        var _value = value === null || value === undefined || value === '' ? new Date() : new Date(value);
        return new Intl.DateTimeFormat(this.userLocale, options).format(_value);
    };
    NovoLabelService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    NovoLabelService.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [LOCALE_ID,] }] }
    ]; };
    return NovoLabelService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CardActionsElement = /** @class */ (function () {
    function CardActionsElement() {
    }
    CardActionsElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-card-actions',
                    template: '<ng-content></ng-content>'
                }] }
    ];
    return CardActionsElement;
}());
var CardElement = /** @class */ (function () {
    function CardElement(labels) {
        this.padding = true;
        this.config = {};
        this.onClose = new EventEmitter();
        this.onRefresh = new EventEmitter();
        this.labels = labels;
    }
    /**
     * @return {?}
     */
    CardElement.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.config = this.config || {};
    };
    /**
     * @param {?=} changes
     * @return {?}
     */
    CardElement.prototype.ngOnChanges = /**
     * @param {?=} changes
     * @return {?}
     */
    function (changes) {
        this.config = this.config || {};
        this.cardAutomationId = (this.title || this.config.title || 'no-title').toLowerCase().replace(/\s/g, '-') + "-card";
        /** @type {?} */
        var newIcon = this.icon || this.config.icon;
        /** @type {?} */
        var newMessageIcon = this.messageIcon || this.config.messageIcon;
        this.iconClass = newIcon ? "bhi-" + newIcon : null;
        this.messageIconClass = newMessageIcon ? "bhi-" + newMessageIcon : null;
    };
    /**
     * @return {?}
     */
    CardElement.prototype.toggleClose = /**
     * @return {?}
     */
    function () {
        if (!this.config.onClose) {
            this.onClose.next();
        }
        else {
            this.config.onClose();
        }
    };
    /**
     * @return {?}
     */
    CardElement.prototype.toggleRefresh = /**
     * @return {?}
     */
    function () {
        if (!this.config.onRefresh) {
            this.onRefresh.next();
        }
        else {
            this.config.onRefresh();
        }
    };
    CardElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-card',
                    template: "\n        <div class=\"novo-card\" [attr.data-automation-id]=\"cardAutomationId\" [ngClass]=\"{'no-padding': !padding}\" [class.loading]=\"loading || config.loading\">\n            <!--Loading-->\n            <div class=\"card-loading-container\" *ngIf=\"loading || config.loading\">\n                <novo-loading theme=\"line\" [attr.data-automation-id]=\"cardAutomationId + '-loading'\"></novo-loading>\n            </div>\n            <!--Card Header-->\n            <header>\n                <div class=\"title\">\n                    <!--Grabber Icon-->\n                    <span tooltip=\"{{ labels.move }}\" tooltipPosition=\"bottom-right\"><i *ngIf=\"move || config.move\" class=\"bhi-move\" [attr.data-automation-id]=\"cardAutomationId + '-move'\"></i></span>\n                    <!--Card Title-->\n                    <h3 [attr.data-automation-id]=\"cardAutomationId + '-title'\"><span [tooltip]=\"iconTooltip\" tooltipPosition=\"right\"><i *ngIf=\"icon\" [ngClass]=\"iconClass\"></i></span> {{title || config.title}}</h3>\n                </div>\n                <!--Card Actions-->\n                <div class=\"actions\" [attr.data-automation-id]=\"cardAutomationId + '-actions'\">\n                    <ng-content select=\"novo-card-actions\"></ng-content>\n                    <button theme=\"icon\" icon=\"refresh\"  (click)=\"toggleRefresh()\" *ngIf=\"refresh || config.refresh\" [attr.data-automation-id]=\"cardAutomationId + '-refresh'\" tooltip=\"{{ labels.refresh }}\" tooltipPosition=\"bottom-left\"></button>\n                    <button theme=\"icon\" icon=\"close-o\" (click)=\"toggleClose()\" *ngIf=\"close || config.close\" [attr.data-automation-id]=\"cardAutomationId + '-close'\" tooltip=\"{{ labels.close }}\" tooltipPosition=\"bottom-left\"></button>\n                </div>\n            </header>\n            <!--Card Main-->\n            <main>\n                <!--Content (transcluded)-->\n                <ng-content *ngIf=\"!(loading || config.loading) && !(message || config.message)\"></ng-content>\n                <!--Error/Empty Message-->\n                <p class=\"card-message\" *ngIf=\"!(loading || config.loading) && (message || config.message)\" [attr.data-automation-id]=\"cardAutomationId + '-message'\"><i *ngIf=\"messageIconClass\" [ngClass]=\"messageIconClass\"></i> <span [innerHtml]=\"message || config.message\"></span></p>\n            </main>\n            <!--Card Footer-->\n            <ng-content *ngIf=\"!(loading || config.loading) && !(message || config.message)\" select=\"footer\"></ng-content>\n        </div>\n    "
                }] }
    ];
    /** @nocollapse */
    CardElement.ctorParameters = function () { return [
        { type: NovoLabelService }
    ]; };
    CardElement.propDecorators = {
        padding: [{ type: Input }],
        config: [{ type: Input }],
        title: [{ type: Input }],
        message: [{ type: Input }],
        messageIcon: [{ type: Input }],
        icon: [{ type: Input }],
        iconTooltip: [{ type: Input }],
        refresh: [{ type: Input }],
        close: [{ type: Input }],
        move: [{ type: Input }],
        loading: [{ type: Input }],
        onClose: [{ type: Output }],
        onRefresh: [{ type: Output }]
    };
    return CardElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoCardModule = /** @class */ (function () {
    function NovoCardModule() {
    }
    NovoCardModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, NovoButtonModule, NovoLoadingModule, NovoTooltipModule],
                    declarations: [CardElement, CardActionsElement],
                    exports: [CardElement, CardActionsElement],
                },] }
    ];
    return NovoCardModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoEventTypeLegendElement = /** @class */ (function () {
    function NovoEventTypeLegendElement() {
        this.eventTypeClicked = new EventEmitter();
    }
    NovoEventTypeLegendElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-event-type-legend',
                    template: "\n    <ng-template #defaultTemplate>\n      <div class=\"cal-event-legend\">\n        <div class=\"cal-event-type\"\n          *ngFor=\"let type of events | groupBy : 'type'\"\n          (click)=\"$event.stopPropagation(); eventTypeClicked.emit({event:type?.key})\">\n          <div class=\"cal-event-type-swatch\"></div><div>{{type?.key}}</div>\n        </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{events: events, eventTypeClicked: eventTypeClicked}\">\n    </ng-template>\n  "
                }] }
    ];
    NovoEventTypeLegendElement.propDecorators = {
        events: [{ type: Input }],
        customTemplate: [{ type: Input }],
        eventTypeClicked: [{ type: Output }]
    };
    return NovoEventTypeLegendElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoCalendarDateChangeElement = /** @class */ (function () {
    function NovoCalendarDateChangeElement(locale) {
        /**
         * Called when the view date is changed
         */
        this.viewDateChange = new EventEmitter();
        this.locale = locale;
    }
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    NovoCalendarDateChangeElement.prototype.subtractDate = /**
     * @hidden
     * @return {?}
     */
    function () {
        this.changeDate(-1);
    };
    /**
     * @return {?}
     */
    NovoCalendarDateChangeElement.prototype.addDate = /**
     * @return {?}
     */
    function () {
        this.changeDate(1);
    };
    /**
     * @param {?} unit
     * @return {?}
     */
    NovoCalendarDateChangeElement.prototype.changeDate = /**
     * @param {?} unit
     * @return {?}
     */
    function (unit) {
        /** @type {?} */
        var addFn = {
            day: addDays,
            week: addWeeks,
            month: addMonths,
        }[this.view];
        this.viewDateChange.emit(addFn(this.viewDate, unit));
    };
    Object.defineProperty(NovoCalendarDateChangeElement.prototype, "startOfWeek", {
        get: /**
         * @return {?}
         */
        function () {
            return startOfWeek(this.viewDate);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoCalendarDateChangeElement.prototype, "endOfWeek", {
        get: /**
         * @return {?}
         */
        function () {
            return endOfWeek(this.viewDate);
        },
        enumerable: true,
        configurable: true
    });
    NovoCalendarDateChangeElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-calendar-date-change',
                    template: "\n    <div class=\"cal-date-change\">\n        <i class=\"bhi-arrow-left\" (click)=\"subtractDate()\" ></i>\n        <span [ngSwitch]=\"view\">\n            <span *ngSwitchCase=\"'month'\">{{ ( viewDate | month:locale ) + ' ' + ( viewDate | year:locale ) }}</span>\n            <span *ngSwitchCase=\"'week'\">{{ ( startOfWeek | monthday:locale:'long' ) + ' - ' + ( endOfWeek | endofweekdisplay:startOfWeek:locale:'long' ) }}</span>\n            <span *ngSwitchCase=\"'day'\">{{ ( viewDate | weekday:locale:'long' ) + ', ' + ( viewDate | month:locale ) + ' ' + ( viewDate | dayofmonth:locale ) }}</span>\n        </span>\n        <i class=\"bhi-arrow-right\" (click)=\"addDate()\"></i>\n    </div>\n  "
                }] }
    ];
    /** @nocollapse */
    NovoCalendarDateChangeElement.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
    ]; };
    NovoCalendarDateChangeElement.propDecorators = {
        view: [{ type: Input }],
        viewDate: [{ type: Input }],
        locale: [{ type: Input }],
        viewDateChange: [{ type: Output }]
    };
    return NovoCalendarDateChangeElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var WEEKEND_DAY_NUMBERS = [0, 6];
/** @type {?} */
var DAYS_IN_WEEK = 7;
/** @type {?} */
var HOURS_IN_DAY = 24;
/** @type {?} */
var MINUTES_IN_HOUR = 60;
/** @enum {number} */
var CalendarEventResponse = {
    Maybe: 0,
    Accepted: 1,
    Rejected: 2,
};
CalendarEventResponse[CalendarEventResponse.Maybe] = 'Maybe';
CalendarEventResponse[CalendarEventResponse.Accepted] = 'Accepted';
CalendarEventResponse[CalendarEventResponse.Rejected] = 'Rejected';
/**
 * @param {?} __0
 * @return {?}
 */
function getExcludedDays(_a) {
    var startDate = _a.startDate, days = _a.days, excluded = _a.excluded;
    if (excluded.length < 1) {
        return 0;
    }
    /** @type {?} */
    var day = startDate.getDay();
    /** @type {?} */
    var reduce = 0;
    for (var i = 0; i < days; i++) {
        if (day === DAYS_IN_WEEK) {
            day = 0;
        }
        if (excluded.some(function (e) { return e === day; })) {
            reduce++;
        }
        day++;
    }
    return reduce;
}
/**
 * @param {?} __0
 * @return {?}
 */
function getWeekViewEventOffset(_a) {
    var event = _a.event, startOfWeek$$1 = _a.startOfWeek, _b = _a.excluded, excluded = _b === void 0 ? [] : _b;
    if (event.start < startOfWeek$$1) {
        return 0;
    }
    /** @type {?} */
    var distance = differenceInDays(event.start, startOfWeek$$1);
    return distance - getExcludedDays({ startDate: startOfWeek$$1, days: distance, excluded: excluded });
}
/**
 * @param {?} __0
 * @return {?}
 */
function isEventIsPeriod(_a) {
    var event = _a.event, periodStart = _a.periodStart, periodEnd = _a.periodEnd;
    /** @type {?} */
    var eventStart = event.start;
    /** @type {?} */
    var eventEnd = event.end || event.start;
    if (eventStart > periodStart && eventStart < periodEnd) {
        return true;
    }
    if (eventEnd > periodStart && eventEnd < periodEnd) {
        return true;
    }
    if (eventStart < periodStart && eventEnd > periodEnd) {
        return true;
    }
    if (isSameSecond(eventStart, periodStart) || isSameSecond(eventStart, periodEnd)) {
        return true;
    }
    if (isSameSecond(eventEnd, periodStart) || isSameSecond(eventEnd, periodEnd)) {
        return true;
    }
    return false;
}
/**
 * @param {?} __0
 * @return {?}
 */
function getEventsInPeriod(_a) {
    var events = _a.events, periodStart = _a.periodStart, periodEnd = _a.periodEnd;
    return events.filter(function (event) { return isEventIsPeriod({ event: event, periodStart: periodStart, periodEnd: periodEnd }); });
}
/**
 * @param {?} events
 * @param {?} dayStart
 * @param {?} dayEnd
 * @return {?}
 */
function getEventsInTimeRange(events, dayStart, dayEnd) {
    return events.filter(function (event) {
        /** @type {?} */
        var eventStart = event.start;
        /** @type {?} */
        var eventEnd = event.end || eventStart;
        /** @type {?} */
        var startOfView = setMinutes(setHours(startOfDay(eventStart), dayStart.hour), dayStart.minute);
        /** @type {?} */
        var endOfView = setMinutes(setHours(startOfMinute(eventStart), dayEnd.hour), dayEnd.minute);
        return isAfter(eventEnd, startOfView) && isBefore(eventStart, endOfView);
    });
}
/**
 * @param {?} __0
 * @return {?}
 */
function getWeekDay(_a) {
    var date = _a.date;
    /** @type {?} */
    var today = startOfDay(new Date());
    return {
        date: date,
        isPast: date < today,
        isToday: isSameDay(date, today),
        isFuture: date > today,
        isWeekend: WEEKEND_DAY_NUMBERS.indexOf(getDay(date)) > -1,
    };
}
/**
 * @param {?} __0
 * @return {?}
 */
function getWeekViewHeader(_a) {
    var viewDate = _a.viewDate, weekStartsOn = _a.weekStartsOn, _b = _a.excluded, excluded = _b === void 0 ? [] : _b;
    /** @type {?} */
    var start = startOfWeek(viewDate, { weekStartsOn: weekStartsOn });
    /** @type {?} */
    var days = [];
    var _loop_1 = function (i) {
        /** @type {?} */
        var date = addDays(start, i);
        if (!excluded.some(function (e) { return date.getDay() === e; })) {
            days.push(getWeekDay({ date: date }));
        }
    };
    for (var i = 0; i < DAYS_IN_WEEK; i++) {
        _loop_1(i);
    }
    return days;
}
/**
 * @param {?} __0
 * @return {?}
 */
function getWeekView(_a) {
    var _b = _a.events, events = _b === void 0 ? [] : _b, viewDate = _a.viewDate, weekStartsOn = _a.weekStartsOn, _c = _a.excluded, excluded = _c === void 0 ? [] : _c, hourSegments = _a.hourSegments, segmentHeight = _a.segmentHeight, dayStart = _a.dayStart, dayEnd = _a.dayEnd;
    if (!events) {
        events = [];
    }
    /** @type {?} */
    var startOfViewWeek = startOfWeek(viewDate, { weekStartsOn: weekStartsOn });
    /** @type {?} */
    var endOfViewWeek = endOfWeek(viewDate, { weekStartsOn: weekStartsOn });
    /** @type {?} */
    var maxRange = DAYS_IN_WEEK - excluded.length;
    /** @type {?} */
    var eventsMapped = getEventsInTimeRange(getEventsInPeriod({ events: events, periodStart: startOfViewWeek, periodEnd: endOfViewWeek }), dayStart, dayEnd)
        .map(function (event) {
        /** @type {?} */
        var offset = getWeekViewEventOffset({ event: event, startOfWeek: startOfViewWeek, excluded: excluded });
        /** @type {?} */
        var span = 1;
        return { event: event, offset: offset, span: span };
    })
        .filter(function (e) { return e.offset < maxRange; })
        .filter(function (e) { return e.span > 0; })
        .map(function (entry) { return ({
        event: entry.event,
        offset: entry.offset,
        span: entry.span,
        startsBeforeWeek: entry.event.start < startOfViewWeek,
        endsAfterWeek: (entry.event.end || entry.event.start) > endOfViewWeek,
        top: 0,
    }); })
        .sort(function (itemA, itemB) {
        /** @type {?} */
        var startSecondsDiff = differenceInSeconds(itemA.event.start, itemB.event.start);
        if (startSecondsDiff === 0) {
            return differenceInSeconds(itemB.event.end || itemB.event.start, itemA.event.end || itemA.event.start);
        }
        return startSecondsDiff;
    })
        .map(function (entry) {
        /** @type {?} */
        var startOfView = setMinutes(setHours(startOfDay(entry.event.start), dayStart.hour), dayStart.minute);
        /** @type {?} */
        var endOfView = setMinutes(setHours(startOfMinute(endOfDay(entry.event.start)), dayEnd.hour), dayEnd.minute);
        /** @type {?} */
        var eventStart = entry.event.start;
        /** @type {?} */
        var eventEnd = entry.event.end || eventStart;
        /** @type {?} */
        var hourHeightModifier = (hourSegments * segmentHeight) / MINUTES_IN_HOUR;
        if (eventStart > startOfView) {
            entry.top += differenceInMinutes(eventStart, startOfView);
        }
        entry.top *= hourHeightModifier;
        /** @type {?} */
        var startsBeforeDay = eventStart < startOfView;
        /** @type {?} */
        var endsAfterDay = eventEnd > endOfView;
        /** @type {?} */
        var startDate = startsBeforeDay ? startOfView : eventStart;
        /** @type {?} */
        var endDate = endsAfterDay ? endOfView : eventEnd;
        /** @type {?} */
        var height = differenceInMinutes(endDate, startDate);
        if (!entry.event.end) {
            height = segmentHeight;
        }
        else {
            height *= hourHeightModifier;
        }
        entry.height = height;
        return entry;
    });
    /** @type {?} */
    var eventRows = [];
    /** @type {?} */
    var allocatedEvents = [];
    eventsMapped.forEach(function (event, index) {
        if (allocatedEvents.indexOf(event) === -1) {
            allocatedEvents.push(event);
            /** @type {?} */
            var otherRowEvents = eventsMapped.slice(index + 1).filter(function (nextEvent) {
                return nextEvent.top === event.top && nextEvent.offset === event.offset;
            });
            if (otherRowEvents.length > 0) {
                /** @type {?} */
                var totalEventsForRow = otherRowEvents.length + 1;
                event.span = 1 / totalEventsForRow;
                /** @type {?} */
                var nextOffset_1 = event.span + event.offset;
                otherRowEvents.forEach(function (nextEvent) {
                    nextEvent.offset = nextOffset_1;
                    nextEvent.span = event.span;
                    nextOffset_1 = nextEvent.span + nextEvent.offset;
                });
                allocatedEvents.push.apply(allocatedEvents, __spread(otherRowEvents));
            }
            eventRows.push({
                row: __spread([event], otherRowEvents),
            });
        }
    });
    return eventRows;
}
/**
 * @param {?} __0
 * @return {?}
 */
function getMonthView(_a) {
    var _b = _a.events, events = _b === void 0 ? [] : _b, viewDate = _a.viewDate, weekStartsOn = _a.weekStartsOn, _c = _a.excluded, excluded = _c === void 0 ? [] : _c;
    if (!events) {
        events = [];
    }
    /** @type {?} */
    var start = startOfWeek(startOfMonth(viewDate), { weekStartsOn: weekStartsOn });
    /** @type {?} */
    var end = endOfWeek(endOfMonth(viewDate), { weekStartsOn: weekStartsOn });
    /** @type {?} */
    var eventsInMonth = getEventsInPeriod({
        events: events,
        periodStart: start,
        periodEnd: end,
    });
    /** @type {?} */
    var days = [];
    var _loop_2 = function (i) {
        /** @type {?} */
        var date = addDays(start, i);
        if (!excluded.some(function (e) { return date.getDay() === e; })) {
            /** @type {?} */
            var day = (/** @type {?} */ (getWeekDay({ date: date })));
            /** @type {?} */
            var calEvents = getEventsInPeriod({
                events: eventsInMonth,
                periodStart: startOfDay(date),
                periodEnd: endOfDay(date),
            });
            day.inMonth = isSameMonth(date, viewDate);
            day.events = calEvents;
            day.badgeTotal = calEvents.length;
            days.push(day);
        }
    };
    for (var i = 0; i < differenceInDays(end, start) + 1; i++) {
        _loop_2(i);
    }
    /** @type {?} */
    var totalDaysVisibleInWeek = DAYS_IN_WEEK - excluded.length;
    /** @type {?} */
    var rows = Math.floor(days.length / totalDaysVisibleInWeek);
    /** @type {?} */
    var rowOffsets = [];
    for (var i = 0; i < rows; i++) {
        rowOffsets.push(i * totalDaysVisibleInWeek);
    }
    return {
        rowOffsets: rowOffsets,
        totalDaysVisibleInWeek: totalDaysVisibleInWeek,
        days: days,
    };
}
/**
 * @param {?} __0
 * @return {?}
 */
function getDayView(_a) {
    var _b = _a.events, events = _b === void 0 ? [] : _b, viewDate = _a.viewDate, hourSegments = _a.hourSegments, dayStart = _a.dayStart, dayEnd = _a.dayEnd, eventWidth = _a.eventWidth, segmentHeight = _a.segmentHeight;
    if (!events) {
        events = [];
    }
    /** @type {?} */
    var startOfView = setMinutes(setHours(startOfDay(viewDate), dayStart.hour), dayStart.minute);
    /** @type {?} */
    var endOfView = setMinutes(setHours(startOfMinute(endOfDay(viewDate)), dayEnd.hour), dayEnd.minute);
    /** @type {?} */
    var previousDayEvents = [];
    /** @type {?} */
    var dayViewEvents = getEventsInTimeRange(getEventsInPeriod({
        events: events.filter(function (event) { return !event.allDay; }),
        periodStart: startOfView,
        periodEnd: endOfView,
    }), dayStart, dayEnd)
        .sort(function (eventA, eventB) {
        return eventA.start.valueOf() - eventB.start.valueOf();
    })
        .map(function (event) {
        /** @type {?} */
        var eventStart = event.start;
        /** @type {?} */
        var eventEnd = event.end || eventStart;
        /** @type {?} */
        var startsBeforeDay = eventStart < startOfView;
        /** @type {?} */
        var endsAfterDay = eventEnd > endOfView;
        /** @type {?} */
        var hourHeightModifier = (hourSegments * segmentHeight) / MINUTES_IN_HOUR;
        /** @type {?} */
        var top = 0;
        if (eventStart > startOfView) {
            top += differenceInMinutes(eventStart, startOfView);
        }
        top *= hourHeightModifier;
        /** @type {?} */
        var startDate = startsBeforeDay ? startOfView : eventStart;
        /** @type {?} */
        var endDate = endsAfterDay ? endOfView : eventEnd;
        /** @type {?} */
        var height = differenceInMinutes(endDate, startDate);
        if (!event.end) {
            height = segmentHeight;
        }
        else {
            height *= hourHeightModifier;
        }
        /** @type {?} */
        var bottom = top + height;
        /** @type {?} */
        var overlappingPreviousEvents = previousDayEvents.filter(function (previousEvent) {
            /** @type {?} */
            var previousEventTop = previousEvent.top;
            /** @type {?} */
            var previousEventBottom = previousEvent.top + previousEvent.height;
            if (top < previousEventBottom && previousEventBottom < bottom) {
                return true;
            }
            else if (previousEventTop <= top && bottom <= previousEventBottom) {
                return true;
            }
            return false;
        });
        /** @type {?} */
        var left = 0;
        while (overlappingPreviousEvents.some(function (previousEvent) { return previousEvent.left === left; })) {
            left += eventWidth;
        }
        /** @type {?} */
        var dayEvent = {
            event: event,
            height: height,
            width: eventWidth,
            top: top,
            left: left,
            startsBeforeDay: startsBeforeDay,
            endsAfterDay: endsAfterDay,
        };
        if (height > 0) {
            previousDayEvents.push(dayEvent);
        }
        return dayEvent;
    })
        .filter(function (dayEvent) { return dayEvent.height > 0; });
    /** @type {?} */
    var width = Math.max.apply(Math, __spread(dayViewEvents.map(function (event) { return event.left + event.width; })));
    /** @type {?} */
    var allDayEvents = getEventsInPeriod({
        events: events.filter(function (event) { return event.allDay; }),
        periodStart: startOfDay(startOfView),
        periodEnd: endOfDay(endOfView),
    });
    return {
        events: dayViewEvents,
        width: width,
        allDayEvents: allDayEvents,
    };
}
/**
 * @param {?} __0
 * @return {?}
 */
function getDayViewHourGrid(_a) {
    var viewDate = _a.viewDate, hourSegments = _a.hourSegments, dayStart = _a.dayStart, dayEnd = _a.dayEnd;
    /** @type {?} */
    var hours = [];
    /** @type {?} */
    var startOfView = setMinutes(setHours(startOfDay(viewDate), dayStart.hour), dayStart.minute);
    /** @type {?} */
    var endOfView = setMinutes(setHours(startOfMinute(endOfDay(viewDate)), dayEnd.hour), dayEnd.minute);
    /** @type {?} */
    var segmentDuration = MINUTES_IN_HOUR / hourSegments;
    /** @type {?} */
    var startOfViewDay = startOfDay(viewDate);
    for (var i = 0; i < HOURS_IN_DAY; i++) {
        /** @type {?} */
        var segments = [];
        for (var j = 0; j < hourSegments; j++) {
            /** @type {?} */
            var date = addMinutes(addHours(startOfViewDay, i), j * segmentDuration);
            if (date >= startOfView && date < endOfView) {
                segments.push({
                    date: date,
                    isStart: j === 0,
                });
            }
        }
        if (segments.length > 0) {
            hours.push({ segments: segments });
        }
    }
    return hours;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Shows all events on a given month. Example usage:
 *
 * ```
 * &lt;novo-calendar-month-view
 *  [viewDate]="viewDate"
 *  [events]="events"&gt;
 * &lt;/novo-calendar-month-view&gt;
 * ```
 */
var NovoCalendarMonthViewElement = /** @class */ (function () {
    /**
     * @hidden
     */
    function NovoCalendarMonthViewElement(cdr, locale) {
        this.cdr = cdr;
        /**
         * An array of events to display on view
         */
        this.events = [];
        /**
         * An array of day indexes (0 = sunday, 1 = monday etc) that will be hidden on the view
         */
        this.excludeDays = [];
        /**
         * The locale used to format dates
         */
        this.locale = 'en-US';
        /**
         * The placement of the event tooltip
         */
        this.tooltipPosition = 'top';
        /**
         * Called when the day cell is clicked
         */
        this.dayClicked = new EventEmitter();
        /**
         * Called when the event title is clicked
         */
        this.eventClicked = new EventEmitter();
        /**
         * Called when an event is dragged and dropped
         */
        this.eventTimesChanged = new EventEmitter();
        this.viewDateChange = new EventEmitter();
        this.locale = locale;
    }
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    NovoCalendarMonthViewElement.prototype.ngOnInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.refresh) {
            this.refreshSubscription = this.refresh.subscribe(function () {
                _this.refreshAll();
                _this.cdr.markForCheck();
            });
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} changes
     * @return {?}
     */
    NovoCalendarMonthViewElement.prototype.ngOnChanges = /**
     * @hidden
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.viewDate || changes.excludeDays) {
            this.refreshHeader();
        }
        if (changes.viewDate || changes.events || changes.excludeDays) {
            this.refreshBody();
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    NovoCalendarMonthViewElement.prototype.ngOnDestroy = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (this.refreshSubscription) {
            this.refreshSubscription.unsubscribe();
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} day
     * @param {?} event
     * @return {?}
     */
    NovoCalendarMonthViewElement.prototype.eventDropped = /**
     * @hidden
     * @param {?} day
     * @param {?} event
     * @return {?}
     */
    function (day, event) {
        /** @type {?} */
        var year = getYear(day.date);
        /** @type {?} */
        var month = getMonth(day.date);
        /** @type {?} */
        var date = getDate(day.date);
        /** @type {?} */
        var newStart = setYear(setMonth(setDate(event.start, date), month), year);
        /** @type {?} */
        var newEnd;
        if (event.end) {
            /** @type {?} */
            var secondsDiff = differenceInSeconds(newStart, event.start);
            newEnd = addSeconds(event.end, secondsDiff);
        }
        this.eventTimesChanged.emit({ event: event, newStart: newStart, newEnd: newEnd });
    };
    /**
     * @private
     * @return {?}
     */
    NovoCalendarMonthViewElement.prototype.refreshHeader = /**
     * @private
     * @return {?}
     */
    function () {
        this.columnHeaders = getWeekViewHeader({
            viewDate: this.viewDate,
            weekStartsOn: this.weekStartsOn,
            excluded: this.excludeDays,
        });
    };
    /**
     * @private
     * @return {?}
     */
    NovoCalendarMonthViewElement.prototype.refreshBody = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.view = getMonthView({
            events: this.events,
            viewDate: this.viewDate,
            weekStartsOn: this.weekStartsOn,
            excluded: this.excludeDays,
        });
        if (this.dayModifier) {
            this.view.days.forEach(function (day) { return _this.dayModifier(day); });
        }
    };
    /**
     * @return {?}
     */
    NovoCalendarMonthViewElement.prototype.refreshAll = /**
     * @return {?}
     */
    function () {
        this.refreshHeader();
        this.refreshBody();
        this.viewDateChange.emit(this.viewDate);
    };
    NovoCalendarMonthViewElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-calendar-month',
                    template: "\n    <div class=\"calendar-month-view\">\n       <novo-calendar-month-header\n         [(viewDate)]=\"viewDate\"\n         [days]=\"columnHeaders\"\n         [locale]=\"locale\"\n         [customTemplate]=\"headerTemplate\"\n         (viewDateChange)=\"refreshAll()\">\n       </novo-calendar-month-header>\n      <div class=\"calendar-days\">\n        <div *ngFor=\"let rowIndex of view.rowOffsets\">\n          <div class=\"calendar-cell-row\">\n            <novo-calendar-month-day\n              *ngFor=\"let day of view.days | slice : rowIndex : rowIndex + (view.totalDaysVisibleInWeek)\"\n              [day]=\"day\"\n              [locale]=\"locale\"\n              [customTemplate]=\"cellTemplate\"\n              (click)=\"dayClicked.emit({day: day})\"\n              (eventClicked)=\"eventClicked.emit({ day: day, event: $event.event})\">\n            </novo-calendar-month-day>\n          </div>\n        </div>\n      </div>\n    </div>\n  "
                }] }
    ];
    /** @nocollapse */
    NovoCalendarMonthViewElement.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
    ]; };
    NovoCalendarMonthViewElement.propDecorators = {
        viewDate: [{ type: Input }],
        events: [{ type: Input }],
        excludeDays: [{ type: Input }],
        dayModifier: [{ type: Input }],
        refresh: [{ type: Input }],
        locale: [{ type: Input }],
        tooltipPosition: [{ type: Input }],
        weekStartsOn: [{ type: Input }],
        headerTemplate: [{ type: Input }],
        cellTemplate: [{ type: Input }],
        dayClicked: [{ type: Output }],
        eventClicked: [{ type: Output }],
        eventTimesChanged: [{ type: Output }],
        viewDateChange: [{ type: Output }]
    };
    return NovoCalendarMonthViewElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoCalendarMonthHeaderElement = /** @class */ (function () {
    function NovoCalendarMonthHeaderElement() {
        /**
         * Called when the view date is changed
         */
        this.viewDateChange = new EventEmitter();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    NovoCalendarMonthHeaderElement.prototype.prevMonth = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.viewDateChange.emit(subMonths(this.viewDate, 1));
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoCalendarMonthHeaderElement.prototype.nextMonth = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.viewDateChange.emit(addMonths(this.viewDate, 1));
    };
    NovoCalendarMonthHeaderElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-calendar-month-header',
                    template: "\n    <ng-template #defaultTemplate>\n      <div class=\"calendar-header\">\n        <div class=\"calendar-header-top\">\n          <button theme=\"icon\" icon=\"previous\" (click)=\"prevMonth($event)\"></button>\n          <div class=\"calendar-month\">{{ viewDate | month:locale }}</div>\n          <button theme=\"icon\" icon=\"next\" (click)=\"nextMonth($event)\"></button>\n        </div>\n        <div class=\"calendar-weekdays\">\n          <div\n            class=\"calendar-weekday\"\n            *ngFor=\"let day of days\"\n            [class.calendar-past]=\"day.isPast\"\n            [class.calendar-today]=\"day.isToday\"\n            [class.calendar-future]=\"day.isFuture\"\n            [class.calendar-weekend]=\"day.isWeekend\">\n            {{ day.date | weekday:locale }}\n          </div>\n        </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{days: days, locale: locale, viewDate: viewDate}\">\n    </ng-template>\n  "
                }] }
    ];
    NovoCalendarMonthHeaderElement.propDecorators = {
        viewDate: [{ type: Input }],
        days: [{ type: Input }],
        locale: [{ type: Input }],
        customTemplate: [{ type: Input }],
        viewDateChange: [{ type: Output }]
    };
    return NovoCalendarMonthHeaderElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoCalendarMonthDayElement = /** @class */ (function () {
    function NovoCalendarMonthDayElement() {
        this.eventClicked = new EventEmitter();
    }
    Object.defineProperty(NovoCalendarMonthDayElement.prototype, "accepted", {
        get: /**
         * @return {?}
         */
        function () {
            if (!this.day) {
                return [];
            }
            return this.day.events.filter(function (evt) {
                return evt.response === CalendarEventResponse.Accepted;
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoCalendarMonthDayElement.prototype, "rejected", {
        get: /**
         * @return {?}
         */
        function () {
            if (!this.day) {
                return [];
            }
            return this.day.events.filter(function (evt) {
                return evt.response === CalendarEventResponse.Rejected;
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoCalendarMonthDayElement.prototype, "maybes", {
        get: /**
         * @return {?}
         */
        function () {
            if (!this.day) {
                return [];
            }
            return this.day.events.filter(function (evt) {
                return evt.response === CalendarEventResponse.Maybe;
            });
        },
        enumerable: true,
        configurable: true
    });
    NovoCalendarMonthDayElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-calendar-month-day',
                    template: "\n    <ng-template #defaultTemplate>\n      <div class=\"calendar-day-top\">\n        <span class=\"calendar-day-badge\" *ngIf=\"day.badgeTotal > 0\">{{ day.badgeTotal }}</span>\n        <span class=\"calendar-day-number\">{{ day.date | dayofmonth:locale }}</span>\n      </div>\n      <div class=\"calendar-events\">\n        <div\n          class=\"calendar-event\"\n          *ngFor=\"let type of day.events | groupBy : 'type'\"\n          [style.backgroundColor]=\"type?.value[0]?.color.primary\"\n          [ngClass]=\"type?.value[0]?.cssClass\"\n          (click)=\"$event.stopPropagation(); eventClicked.emit({event:type?.value[0]})\">\n          {{type?.value.length}}\n        </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        day: day,\n        locale: locale,\n        tooltipPosition: tooltipPosition,\n        eventClicked: eventClicked,\n        accepted: accepted,\n        rejected: rejected,\n        maybes: maybes\n      }\">\n    </ng-template>\n  ",
                    host: {
                        '[class]': '"calendar-cell calendar-day-cell " + day?.cssClass',
                        '[class.calendar-day-accepted]': 'accepted.length',
                        '[class.calendar-day-rejected]': 'rejected.length',
                        '[class.calendar-past]': 'day.isPast',
                        '[class.calendar-today]': 'day.isToday',
                        '[class.calendar-future]': 'day.isFuture',
                        '[class.calendar-weekend]': 'day.isWeekend',
                        '[class.calendar-in-month]': 'day.inMonth',
                        '[class.calendar-out-month]': '!day.inMonth',
                        '[class.calendar-has-events]': 'day.events.length > 0',
                        '[style.backgroundColor]': 'day.backgroundColor',
                    }
                }] }
    ];
    NovoCalendarMonthDayElement.propDecorators = {
        day: [{ type: Input }],
        locale: [{ type: Input }],
        tooltipPosition: [{ type: Input }],
        customTemplate: [{ type: Input }],
        eventClicked: [{ type: Output }]
    };
    return NovoCalendarMonthDayElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @hidden
 * @type {?}
 */
var SEGMENT_HEIGHT = 30;
/**
 * Shows all events on a given week. Example usage:
 *
 * ```typescript
 * &lt;novo-calendar-week
 *  [viewDate]="viewDate"
 *  [events]="events"&gt;
 * &lt;/novo-calendar-week&gt;
 * ```
 */
var NovoCalendarWeekViewElement = /** @class */ (function () {
    /**
     * @hidden
     */
    function NovoCalendarWeekViewElement(cdr, locale) {
        this.cdr = cdr;
        /**
         * An array of events to display on view
         */
        this.events = [];
        /**
         * An array of day indexes (0 = sunday, 1 = monday etc) that will be hidden on the view
         */
        this.excludeDays = [];
        /**
         * The placement of the event tooltip
         */
        this.tooltipPosition = 'bottom';
        /**
         * The precision to display events.
         * `days` will round event start and end dates to the nearest day and `minutes` will not do this rounding
         */
        this.precision = 'days';
        /**
         * The number of segments in an hour. Must be <= 6
         */
        this.hourSegments = 2;
        /**
         * The day start hours in 24 hour time. Must be 0-23
         */
        this.dayStartHour = 0;
        /**
         * The day start minutes. Must be 0-59
         */
        this.dayStartMinute = 0;
        /**
         * The day end hours in 24 hour time. Must be 0-23
         */
        this.dayEndHour = 23;
        /**
         * The day end minutes. Must be 0-59
         */
        this.dayEndMinute = 59;
        /**
         * Called when an hour segment is clicked
         */
        this.hourSegmentClicked = new EventEmitter();
        /**
         * Called when a header week day is clicked
         */
        this.dayClicked = new EventEmitter();
        /**
         * Called when the event title is clicked
         */
        this.eventClicked = new EventEmitter();
        /**
         * Called when an event is resized or dragged and dropped
         */
        this.eventTimesChanged = new EventEmitter();
        /**
         * @hidden
         */
        this.hours = [];
        /**
         * @hidden
         */
        this.eventRows = [];
        this.locale = locale;
    }
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    NovoCalendarWeekViewElement.prototype.ngOnInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.refresh) {
            this.refreshSubscription = this.refresh.subscribe(function () {
                _this.refreshAll();
                _this.cdr.detectChanges();
            });
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} changes
     * @return {?}
     */
    NovoCalendarWeekViewElement.prototype.ngOnChanges = /**
     * @hidden
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.viewDate || changes.excludeDays) {
            this.refreshHeader();
        }
        if (changes.events || changes.viewDate || changes.excludeDays) {
            this.refreshBody();
        }
        if (changes.viewDate || changes.dayStartHour || changes.dayStartMinute || changes.dayEndHour || changes.dayEndMinute) {
            this.refreshHourGrid();
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    NovoCalendarWeekViewElement.prototype.ngOnDestroy = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (this.refreshSubscription) {
            this.refreshSubscription.unsubscribe();
        }
    };
    /*
      resizeStarted(weekViewContainer: HTMLElement, weekEvent: WeekViewEvent, resizeEvent: ResizeEvent): void {
        this.currentResize = {
          originalOffset: weekEvent.offset,
          originalSpan: weekEvent.span,
          edge: typeof resizeEvent.edges.left !== 'undefined' ? 'left' : 'right'
        };
        const resizeHelper: CalendarResizeHelper = new CalendarResizeHelper(weekViewContainer, this.getDayColumnWidth(weekViewContainer));
        this.validateResize = ({rectangle}) => resizeHelper.validateResize({rectangle});
        this.cdr.detectChanges();
      }
  
      resizing(weekEvent: WeekViewEvent, resizeEvent: ResizeEvent, dayWidth: number): void {
        if (resizeEvent.edges.left) {
          const diff: number = Math.round(+resizeEvent.edges.left / dayWidth);
          weekEvent.offset = this.currentResize.originalOffset + diff;
          weekEvent.span = this.currentResize.originalSpan - diff;
        } else if (resizeEvent.edges.right) {
          const diff: number = Math.round(+resizeEvent.edges.right / dayWidth);
          weekEvent.span = this.currentResize.originalSpan + diff;
        }
      }
  
      resizeEnded(weekEvent: WeekViewEvent): void {
  
        let daysDiff: number;
        if (this.currentResize.edge === 'left') {
          daysDiff = weekEvent.offset - this.currentResize.originalOffset;
        } else {
          daysDiff = weekEvent.span - this.currentResize.originalSpan;
        }
  
        weekEvent.offset = this.currentResize.originalOffset;
        weekEvent.span = this.currentResize.originalSpan;
  
        let newStart: Date = weekEvent.event.start;
        let newEnd: Date = weekEvent.event.end;
        if (this.currentResize.edge === 'left') {
          newStart = addDays(newStart, daysDiff);
        } else if (newEnd) {
          newEnd = addDays(newEnd, daysDiff);
        }
  
        this.eventTimesChanged.emit({newStart, newEnd, event: weekEvent.event});
        this.currentResize = null;
  
      }
  
      eventDragged(weekEvent: WeekViewEvent, draggedByPx: number, dayWidth: number): void {
  
        const daysDragged: number = draggedByPx / dayWidth;
        const newStart: Date = addDays(weekEvent.event.start, daysDragged);
        let newEnd: Date;
        if (weekEvent.event.end) {
          newEnd = addDays(weekEvent.event.end, daysDragged);
        }
  
        this.eventTimesChanged.emit({newStart, newEnd, event: weekEvent.event});
  
      }
  
      dragStart(weekViewContainer: HTMLElement, event: HTMLElement): void {
        const dragHelper: CalendarDragHelper = new CalendarDragHelper(weekViewContainer, event);
        this.validateDrag = ({x, y}) => !this.currentResize && dragHelper.validateDrag({x, y});
        this.cdr.detectChanges();
      }
      */
    /*
        resizeStarted(weekViewContainer: HTMLElement, weekEvent: WeekViewEvent, resizeEvent: ResizeEvent): void {
          this.currentResize = {
            originalOffset: weekEvent.offset,
            originalSpan: weekEvent.span,
            edge: typeof resizeEvent.edges.left !== 'undefined' ? 'left' : 'right'
          };
          const resizeHelper: CalendarResizeHelper = new CalendarResizeHelper(weekViewContainer, this.getDayColumnWidth(weekViewContainer));
          this.validateResize = ({rectangle}) => resizeHelper.validateResize({rectangle});
          this.cdr.detectChanges();
        }
    
        resizing(weekEvent: WeekViewEvent, resizeEvent: ResizeEvent, dayWidth: number): void {
          if (resizeEvent.edges.left) {
            const diff: number = Math.round(+resizeEvent.edges.left / dayWidth);
            weekEvent.offset = this.currentResize.originalOffset + diff;
            weekEvent.span = this.currentResize.originalSpan - diff;
          } else if (resizeEvent.edges.right) {
            const diff: number = Math.round(+resizeEvent.edges.right / dayWidth);
            weekEvent.span = this.currentResize.originalSpan + diff;
          }
        }
    
        resizeEnded(weekEvent: WeekViewEvent): void {
    
          let daysDiff: number;
          if (this.currentResize.edge === 'left') {
            daysDiff = weekEvent.offset - this.currentResize.originalOffset;
          } else {
            daysDiff = weekEvent.span - this.currentResize.originalSpan;
          }
    
          weekEvent.offset = this.currentResize.originalOffset;
          weekEvent.span = this.currentResize.originalSpan;
    
          let newStart: Date = weekEvent.event.start;
          let newEnd: Date = weekEvent.event.end;
          if (this.currentResize.edge === 'left') {
            newStart = addDays(newStart, daysDiff);
          } else if (newEnd) {
            newEnd = addDays(newEnd, daysDiff);
          }
    
          this.eventTimesChanged.emit({newStart, newEnd, event: weekEvent.event});
          this.currentResize = null;
    
        }
    
        eventDragged(weekEvent: WeekViewEvent, draggedByPx: number, dayWidth: number): void {
    
          const daysDragged: number = draggedByPx / dayWidth;
          const newStart: Date = addDays(weekEvent.event.start, daysDragged);
          let newEnd: Date;
          if (weekEvent.event.end) {
            newEnd = addDays(weekEvent.event.end, daysDragged);
          }
    
          this.eventTimesChanged.emit({newStart, newEnd, event: weekEvent.event});
    
        }
    
        dragStart(weekViewContainer: HTMLElement, event: HTMLElement): void {
          const dragHelper: CalendarDragHelper = new CalendarDragHelper(weekViewContainer, event);
          this.validateDrag = ({x, y}) => !this.currentResize && dragHelper.validateDrag({x, y});
          this.cdr.detectChanges();
        }
        */
    /**
     * @param {?} eventRowContainer
     * @return {?}
     */
    NovoCalendarWeekViewElement.prototype.getDayColumnWidth = /*
        resizeStarted(weekViewContainer: HTMLElement, weekEvent: WeekViewEvent, resizeEvent: ResizeEvent): void {
          this.currentResize = {
            originalOffset: weekEvent.offset,
            originalSpan: weekEvent.span,
            edge: typeof resizeEvent.edges.left !== 'undefined' ? 'left' : 'right'
          };
          const resizeHelper: CalendarResizeHelper = new CalendarResizeHelper(weekViewContainer, this.getDayColumnWidth(weekViewContainer));
          this.validateResize = ({rectangle}) => resizeHelper.validateResize({rectangle});
          this.cdr.detectChanges();
        }
    
        resizing(weekEvent: WeekViewEvent, resizeEvent: ResizeEvent, dayWidth: number): void {
          if (resizeEvent.edges.left) {
            const diff: number = Math.round(+resizeEvent.edges.left / dayWidth);
            weekEvent.offset = this.currentResize.originalOffset + diff;
            weekEvent.span = this.currentResize.originalSpan - diff;
          } else if (resizeEvent.edges.right) {
            const diff: number = Math.round(+resizeEvent.edges.right / dayWidth);
            weekEvent.span = this.currentResize.originalSpan + diff;
          }
        }
    
        resizeEnded(weekEvent: WeekViewEvent): void {
    
          let daysDiff: number;
          if (this.currentResize.edge === 'left') {
            daysDiff = weekEvent.offset - this.currentResize.originalOffset;
          } else {
            daysDiff = weekEvent.span - this.currentResize.originalSpan;
          }
    
          weekEvent.offset = this.currentResize.originalOffset;
          weekEvent.span = this.currentResize.originalSpan;
    
          let newStart: Date = weekEvent.event.start;
          let newEnd: Date = weekEvent.event.end;
          if (this.currentResize.edge === 'left') {
            newStart = addDays(newStart, daysDiff);
          } else if (newEnd) {
            newEnd = addDays(newEnd, daysDiff);
          }
    
          this.eventTimesChanged.emit({newStart, newEnd, event: weekEvent.event});
          this.currentResize = null;
    
        }
    
        eventDragged(weekEvent: WeekViewEvent, draggedByPx: number, dayWidth: number): void {
    
          const daysDragged: number = draggedByPx / dayWidth;
          const newStart: Date = addDays(weekEvent.event.start, daysDragged);
          let newEnd: Date;
          if (weekEvent.event.end) {
            newEnd = addDays(weekEvent.event.end, daysDragged);
          }
    
          this.eventTimesChanged.emit({newStart, newEnd, event: weekEvent.event});
    
        }
    
        dragStart(weekViewContainer: HTMLElement, event: HTMLElement): void {
          const dragHelper: CalendarDragHelper = new CalendarDragHelper(weekViewContainer, event);
          this.validateDrag = ({x, y}) => !this.currentResize && dragHelper.validateDrag({x, y});
          this.cdr.detectChanges();
        }
        */
    /**
     * @param {?} eventRowContainer
     * @return {?}
     */
    function (eventRowContainer) {
        return Math.floor(eventRowContainer.offsetWidth / this.days.length);
    };
    /**
     * @private
     * @return {?}
     */
    NovoCalendarWeekViewElement.prototype.refreshHeader = /**
     * @private
     * @return {?}
     */
    function () {
        this.days = getWeekViewHeader({
            viewDate: this.viewDate,
            weekStartsOn: this.weekStartsOn,
            excluded: this.excludeDays,
        });
    };
    /**
     * @private
     * @return {?}
     */
    NovoCalendarWeekViewElement.prototype.refreshBody = /**
     * @private
     * @return {?}
     */
    function () {
        this.eventRows = getWeekView({
            events: this.events,
            viewDate: this.viewDate,
            weekStartsOn: this.weekStartsOn,
            excluded: this.excludeDays,
            hourSegments: this.hourSegments,
            segmentHeight: SEGMENT_HEIGHT,
            dayStart: {
                hour: this.dayStartHour,
                minute: this.dayStartMinute,
            },
            dayEnd: {
                hour: this.dayEndHour,
                minute: this.dayEndMinute,
            },
        });
    };
    /**
     * @private
     * @return {?}
     */
    NovoCalendarWeekViewElement.prototype.refreshHourGrid = /**
     * @private
     * @return {?}
     */
    function () {
        this.hours = getDayViewHourGrid({
            viewDate: this.viewDate,
            hourSegments: this.hourSegments,
            dayStart: {
                hour: this.dayStartHour,
                minute: this.dayStartMinute,
            },
            dayEnd: {
                hour: this.dayEndHour,
                minute: this.dayEndMinute,
            },
        });
        // if (this.hourSegmentModifier) {
        //   this.hours.forEach(hour => {
        //     hour.segments.forEach(segment => this.hourSegmentModifier(segment));
        //   });
        // }
    };
    /**
     * @private
     * @return {?}
     */
    NovoCalendarWeekViewElement.prototype.refreshAll = /**
     * @private
     * @return {?}
     */
    function () {
        this.refreshHeader();
        this.refreshHourGrid();
        this.refreshBody();
    };
    NovoCalendarWeekViewElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-calendar-week',
                    template: "\n    <div class=\"cal-week-view\" #weekViewContainer>\n      <novo-calendar-week-header\n        [days]=\"days\"\n        [locale]=\"locale\"\n        [customTemplate]=\"headerTemplate\"\n        (dayClicked)=\"dayClicked.emit($event)\">\n      </novo-calendar-week-header>\n      <div *ngFor=\"let eventRow of eventRows\" #eventRowContainer>\n        <div\n          class=\"cal-event-container\"\n          #event\n          *ngFor=\"let weekEvent of eventRow.row\"\n          [style.width]=\"((100 / days.length) * weekEvent.span) + '%'\"\n          [style.marginTop.px]=\"weekEvent.top\"\n          [style.height.px]=\"weekEvent.height\"\n          [style.marginLeft]=\"((100 / days.length) * weekEvent.offset) + '%'\">\n          <novo-calendar-week-event\n            [weekEvent]=\"weekEvent\"\n            [tooltipPosition]=\"tooltipPosition\"\n            [customTemplate]=\"eventTemplate\"\n            (eventClicked)=\"eventClicked.emit($event)\">\n          </novo-calendar-week-event>\n        </div>\n      </div>\n      <div class=\"cal-hour\" *ngFor=\"let hour of hours\" [style.minWidth.px]=\"70\">\n        <novo-calendar-day-hour-segment\n          *ngFor=\"let segment of hour.segments\"\n          [segment]=\"segment\"\n          [locale]=\"locale\"\n          [customTemplate]=\"hourSegmentTemplate\"\n          (click)=\"hourSegmentClicked.emit({date: segment.date})\">\n        </novo-calendar-day-hour-segment>\n      </div>\n    </div>\n  "
                }] }
    ];
    /** @nocollapse */
    NovoCalendarWeekViewElement.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
    ]; };
    NovoCalendarWeekViewElement.propDecorators = {
        viewDate: [{ type: Input }],
        events: [{ type: Input }],
        excludeDays: [{ type: Input }],
        refresh: [{ type: Input }],
        locale: [{ type: Input }],
        tooltipPosition: [{ type: Input }],
        weekStartsOn: [{ type: Input }],
        headerTemplate: [{ type: Input }],
        eventTemplate: [{ type: Input }],
        precision: [{ type: Input }],
        hourSegments: [{ type: Input }],
        dayStartHour: [{ type: Input }],
        dayStartMinute: [{ type: Input }],
        dayEndHour: [{ type: Input }],
        dayEndMinute: [{ type: Input }],
        hourSegmentTemplate: [{ type: Input }],
        hourSegmentClicked: [{ type: Output }],
        dayClicked: [{ type: Output }],
        eventClicked: [{ type: Output }],
        eventTimesChanged: [{ type: Output }]
    };
    return NovoCalendarWeekViewElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoCalendarWeekHeaderElement = /** @class */ (function () {
    function NovoCalendarWeekHeaderElement() {
        this.dayClicked = new EventEmitter();
        this.eventDropped = new EventEmitter();
    }
    NovoCalendarWeekHeaderElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-calendar-week-header',
                    template: "\n    <ng-template #defaultTemplate>\n      <div class=\"cal-day-headers\">\n        <div\n          class=\"cal-header\"\n          *ngFor=\"let day of days\"\n          [class.cal-past]=\"day.isPast\"\n          [class.cal-today]=\"day.isToday\"\n          [class.cal-future]=\"day.isFuture\"\n          [class.cal-weekend]=\"day.isWeekend\"\n          [class.cal-drag-over]=\"day.dragOver\"\n          (click)=\"dayClicked.emit({date: day.date})\"\n          mwlDroppable\n          (dragEnter)=\"day.dragOver = true\"\n          (dragLeave)=\"day.dragOver = false\"\n          (drop)=\"day.dragOver = false; eventDropped.emit({event: $event.dropData.event, newStart: day.date})\">\n          <b>{{ day.date | weekday:locale:'long'}}</b><br>\n          <span>{{ day.date | monthday:locale }}</span>\n        </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{days: days, locale: locale, dayClicked: dayClicked, eventDropped: eventDropped}\">\n    </ng-template>\n  "
                }] }
    ];
    NovoCalendarWeekHeaderElement.propDecorators = {
        days: [{ type: Input }],
        locale: [{ type: Input }],
        customTemplate: [{ type: Input }],
        dayClicked: [{ type: Output }],
        eventDropped: [{ type: Output }]
    };
    return NovoCalendarWeekHeaderElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoCalendarWeekEventElement = /** @class */ (function () {
    function NovoCalendarWeekEventElement() {
        this.eventClicked = new EventEmitter();
    }
    NovoCalendarWeekEventElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-calendar-week-event',
                    template: "\n    <ng-template #defaultTemplate>\n      <div\n        class=\"cal-event\"\n        [class.cal-starts-within-week]=\"!weekEvent.startsBeforeWeek\"\n        [class.cal-ends-within-week]=\"!weekEvent.endsAfterWeek\"\n        [ngClass]=\"weekEvent.event?.cssClass\"\n        [tooltip]=\"weekEvent.event.description\"\n        [tooltipPosition]=\"tooltipPosition\"\n        (click)=\"eventClicked.emit({event: weekEvent.event})\">\n        <div class=\"cal-event-ribbon\" [style.backgroundColor]=\"weekEvent.event.color.primary\"></div>\n        <div class=\"cal-event-title\">{{weekEvent.event?.title}}</div>\n        <div class=\"cal-event-description\">{{weekEvent.event?.description}}</div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{weekEvent: weekEvent, tooltipPosition: tooltipPosition, eventClicked: eventClicked}\">\n    </ng-template>\n  "
                }] }
    ];
    NovoCalendarWeekEventElement.propDecorators = {
        weekEvent: [{ type: Input }],
        tooltipPosition: [{ type: Input }],
        customTemplate: [{ type: Input }],
        eventClicked: [{ type: Output }]
    };
    return NovoCalendarWeekEventElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @hidden
 * @type {?}
 */
var SEGMENT_HEIGHT$1 = 30;
/**
 * Shows all events on a given day. Example usage:
 *
 * ```typescript
 * &lt;novo-calendar-day
 *  [viewDate]="viewDate"
 *  [events]="events"&gt;
 * &lt;/novo-calendar-day&gt;
 * ```
 */
var NovoCalendarDayViewElement = /** @class */ (function () {
    /**
     * @hidden
     */
    function NovoCalendarDayViewElement(cdr, locale) {
        this.cdr = cdr;
        /**
         * An array of events to display on view
         */
        this.events = [];
        /**
         * The number of segments in an hour. Must be <= 6
         */
        this.hourSegments = 2;
        /**
         * The day start hours in 24 hour time. Must be 0-23
         */
        this.dayStartHour = 0;
        /**
         * The day start minutes. Must be 0-59
         */
        this.dayStartMinute = 0;
        /**
         * The day end hours in 24 hour time. Must be 0-23
         */
        this.dayEndHour = 23;
        /**
         * The day end minutes. Must be 0-59
         */
        this.dayEndMinute = 59;
        /**
         * The width in pixels of each event on the view
         */
        this.eventWidth = 150;
        /**
         * The grid size to snap resizing and dragging of events to
         */
        this.eventSnapSize = 30;
        /**
         * The placement of the event tooltip
         */
        this.tooltipPosition = 'top';
        /**
         * Called when an event title is clicked
         */
        this.eventClicked = new EventEmitter();
        /**
         * Called when an hour segment is clicked
         */
        this.hourSegmentClicked = new EventEmitter();
        /**
         * Called when an event is resized or dragged and dropped
         */
        this.eventTimesChanged = new EventEmitter();
        /**
         * @hidden
         */
        this.hours = [];
        /**
         * @hidden
         */
        this.width = 0;
        this.locale = locale;
    }
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    NovoCalendarDayViewElement.prototype.ngOnInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.refresh) {
            this.refreshSubscription = this.refresh.subscribe(function () {
                _this.refreshAll();
                _this.cdr.detectChanges();
            });
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    NovoCalendarDayViewElement.prototype.ngOnDestroy = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (this.refreshSubscription) {
            this.refreshSubscription.unsubscribe();
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} changes
     * @return {?}
     */
    NovoCalendarDayViewElement.prototype.ngOnChanges = /**
     * @hidden
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.viewDate || changes.dayStartHour || changes.dayStartMinute || changes.dayEndHour || changes.dayEndMinute) {
            this.refreshHourGrid();
        }
        if (changes.viewDate ||
            changes.events ||
            changes.dayStartHour ||
            changes.dayStartMinute ||
            changes.dayEndHour ||
            changes.dayEndMinute ||
            changes.eventWidth) {
            this.refreshView();
        }
    };
    /*
      eventDropped(dropEvent: {dropData?: {event?: CalendarEvent}}, segment: DayViewHourSegment): void {
        if (dropEvent.dropData && dropEvent.dropData.event) {
          this.eventTimesChanged.emit({event: dropEvent.dropData.event, newStart: segment.date});
        }
      }
  
      resizeStarted(event: DayViewEvent, resizeEvent: ResizeEvent, dayViewContainer: HTMLElement): void {
        this.currentResize = {
          originalTop: event.top,
          originalHeight: event.height,
          edge: typeof resizeEvent.edges.top !== 'undefined' ? 'top' : 'bottom'
        };
        const resizeHelper: CalendarResizeHelper = new CalendarResizeHelper(dayViewContainer);
        this.validateResize = ({rectangle}) => resizeHelper.validateResize({rectangle});
        this.cdr.detectChanges();
      }
  
      resizing(event: DayViewEvent, resizeEvent: ResizeEvent): void {
        if (resizeEvent.edges.top) {
          event.top = this.currentResize.originalTop + +resizeEvent.edges.top;
          event.height = this.currentResize.originalHeight - +resizeEvent.edges.top;
        } else if (resizeEvent.edges.bottom) {
          event.height = this.currentResize.originalHeight + +resizeEvent.edges.bottom;
        }
      }
  
      resizeEnded(dayEvent: DayViewEvent): void {
  
        let pixelsMoved: number;
        if (this.currentResize.edge === 'top') {
          pixelsMoved = (dayEvent.top - this.currentResize.originalTop);
        } else {
          pixelsMoved = (dayEvent.height - this.currentResize.originalHeight);
        }
  
        dayEvent.top = this.currentResize.originalTop;
        dayEvent.height = this.currentResize.originalHeight;
  
        const pixelAmountInMinutes: number = MINUTES_IN_HOUR / (this.hourSegments * SEGMENT_HEIGHT);
        const minutesMoved: number = pixelsMoved * pixelAmountInMinutes;
        let newStart: Date = dayEvent.event.start;
        let newEnd: Date = dayEvent.event.end;
        if (this.currentResize.edge === 'top') {
          newStart = addMinutes(newStart, minutesMoved);
        } else if (newEnd) {
          newEnd = addMinutes(newEnd, minutesMoved);
        }
  
        this.eventTimesChanged.emit({newStart, newEnd, event: dayEvent.event});
        this.currentResize = null;
  
      }
  
      dragStart(event: HTMLElement, dayViewContainer: HTMLElement): void {
        const dragHelper: CalendarDragHelper = new CalendarDragHelper(dayViewContainer, event);
        this.validateDrag = ({x, y}) => !this.currentResize && dragHelper.validateDrag({x, y});
        this.cdr.detectChanges();
      }
  
      eventDragged(dayEvent: DayViewEvent, draggedInPixels: number): void {
        const pixelAmountInMinutes: number = MINUTES_IN_HOUR / (this.hourSegments * SEGMENT_HEIGHT);
        const minutesMoved: number = draggedInPixels * pixelAmountInMinutes;
        const newStart: Date = addMinutes(dayEvent.event.start, minutesMoved);
        let newEnd: Date;
        if (dayEvent.event.end) {
          newEnd = addMinutes(dayEvent.event.end, minutesMoved);
        }
        this.eventTimesChanged.emit({newStart, newEnd, event: dayEvent.event});
      }
      */
    /*
        eventDropped(dropEvent: {dropData?: {event?: CalendarEvent}}, segment: DayViewHourSegment): void {
          if (dropEvent.dropData && dropEvent.dropData.event) {
            this.eventTimesChanged.emit({event: dropEvent.dropData.event, newStart: segment.date});
          }
        }
    
        resizeStarted(event: DayViewEvent, resizeEvent: ResizeEvent, dayViewContainer: HTMLElement): void {
          this.currentResize = {
            originalTop: event.top,
            originalHeight: event.height,
            edge: typeof resizeEvent.edges.top !== 'undefined' ? 'top' : 'bottom'
          };
          const resizeHelper: CalendarResizeHelper = new CalendarResizeHelper(dayViewContainer);
          this.validateResize = ({rectangle}) => resizeHelper.validateResize({rectangle});
          this.cdr.detectChanges();
        }
    
        resizing(event: DayViewEvent, resizeEvent: ResizeEvent): void {
          if (resizeEvent.edges.top) {
            event.top = this.currentResize.originalTop + +resizeEvent.edges.top;
            event.height = this.currentResize.originalHeight - +resizeEvent.edges.top;
          } else if (resizeEvent.edges.bottom) {
            event.height = this.currentResize.originalHeight + +resizeEvent.edges.bottom;
          }
        }
    
        resizeEnded(dayEvent: DayViewEvent): void {
    
          let pixelsMoved: number;
          if (this.currentResize.edge === 'top') {
            pixelsMoved = (dayEvent.top - this.currentResize.originalTop);
          } else {
            pixelsMoved = (dayEvent.height - this.currentResize.originalHeight);
          }
    
          dayEvent.top = this.currentResize.originalTop;
          dayEvent.height = this.currentResize.originalHeight;
    
          const pixelAmountInMinutes: number = MINUTES_IN_HOUR / (this.hourSegments * SEGMENT_HEIGHT);
          const minutesMoved: number = pixelsMoved * pixelAmountInMinutes;
          let newStart: Date = dayEvent.event.start;
          let newEnd: Date = dayEvent.event.end;
          if (this.currentResize.edge === 'top') {
            newStart = addMinutes(newStart, minutesMoved);
          } else if (newEnd) {
            newEnd = addMinutes(newEnd, minutesMoved);
          }
    
          this.eventTimesChanged.emit({newStart, newEnd, event: dayEvent.event});
          this.currentResize = null;
    
        }
    
        dragStart(event: HTMLElement, dayViewContainer: HTMLElement): void {
          const dragHelper: CalendarDragHelper = new CalendarDragHelper(dayViewContainer, event);
          this.validateDrag = ({x, y}) => !this.currentResize && dragHelper.validateDrag({x, y});
          this.cdr.detectChanges();
        }
    
        eventDragged(dayEvent: DayViewEvent, draggedInPixels: number): void {
          const pixelAmountInMinutes: number = MINUTES_IN_HOUR / (this.hourSegments * SEGMENT_HEIGHT);
          const minutesMoved: number = draggedInPixels * pixelAmountInMinutes;
          const newStart: Date = addMinutes(dayEvent.event.start, minutesMoved);
          let newEnd: Date;
          if (dayEvent.event.end) {
            newEnd = addMinutes(dayEvent.event.end, minutesMoved);
          }
          this.eventTimesChanged.emit({newStart, newEnd, event: dayEvent.event});
        }
        */
    /**
     * @private
     * @return {?}
     */
    NovoCalendarDayViewElement.prototype.refreshHourGrid = /*
        eventDropped(dropEvent: {dropData?: {event?: CalendarEvent}}, segment: DayViewHourSegment): void {
          if (dropEvent.dropData && dropEvent.dropData.event) {
            this.eventTimesChanged.emit({event: dropEvent.dropData.event, newStart: segment.date});
          }
        }
    
        resizeStarted(event: DayViewEvent, resizeEvent: ResizeEvent, dayViewContainer: HTMLElement): void {
          this.currentResize = {
            originalTop: event.top,
            originalHeight: event.height,
            edge: typeof resizeEvent.edges.top !== 'undefined' ? 'top' : 'bottom'
          };
          const resizeHelper: CalendarResizeHelper = new CalendarResizeHelper(dayViewContainer);
          this.validateResize = ({rectangle}) => resizeHelper.validateResize({rectangle});
          this.cdr.detectChanges();
        }
    
        resizing(event: DayViewEvent, resizeEvent: ResizeEvent): void {
          if (resizeEvent.edges.top) {
            event.top = this.currentResize.originalTop + +resizeEvent.edges.top;
            event.height = this.currentResize.originalHeight - +resizeEvent.edges.top;
          } else if (resizeEvent.edges.bottom) {
            event.height = this.currentResize.originalHeight + +resizeEvent.edges.bottom;
          }
        }
    
        resizeEnded(dayEvent: DayViewEvent): void {
    
          let pixelsMoved: number;
          if (this.currentResize.edge === 'top') {
            pixelsMoved = (dayEvent.top - this.currentResize.originalTop);
          } else {
            pixelsMoved = (dayEvent.height - this.currentResize.originalHeight);
          }
    
          dayEvent.top = this.currentResize.originalTop;
          dayEvent.height = this.currentResize.originalHeight;
    
          const pixelAmountInMinutes: number = MINUTES_IN_HOUR / (this.hourSegments * SEGMENT_HEIGHT);
          const minutesMoved: number = pixelsMoved * pixelAmountInMinutes;
          let newStart: Date = dayEvent.event.start;
          let newEnd: Date = dayEvent.event.end;
          if (this.currentResize.edge === 'top') {
            newStart = addMinutes(newStart, minutesMoved);
          } else if (newEnd) {
            newEnd = addMinutes(newEnd, minutesMoved);
          }
    
          this.eventTimesChanged.emit({newStart, newEnd, event: dayEvent.event});
          this.currentResize = null;
    
        }
    
        dragStart(event: HTMLElement, dayViewContainer: HTMLElement): void {
          const dragHelper: CalendarDragHelper = new CalendarDragHelper(dayViewContainer, event);
          this.validateDrag = ({x, y}) => !this.currentResize && dragHelper.validateDrag({x, y});
          this.cdr.detectChanges();
        }
    
        eventDragged(dayEvent: DayViewEvent, draggedInPixels: number): void {
          const pixelAmountInMinutes: number = MINUTES_IN_HOUR / (this.hourSegments * SEGMENT_HEIGHT);
          const minutesMoved: number = draggedInPixels * pixelAmountInMinutes;
          const newStart: Date = addMinutes(dayEvent.event.start, minutesMoved);
          let newEnd: Date;
          if (dayEvent.event.end) {
            newEnd = addMinutes(dayEvent.event.end, minutesMoved);
          }
          this.eventTimesChanged.emit({newStart, newEnd, event: dayEvent.event});
        }
        */
    /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.hours = getDayViewHourGrid({
            viewDate: this.viewDate,
            hourSegments: this.hourSegments,
            dayStart: {
                hour: this.dayStartHour,
                minute: this.dayStartMinute,
            },
            dayEnd: {
                hour: this.dayEndHour,
                minute: this.dayEndMinute,
            },
        });
        if (this.hourSegmentModifier) {
            this.hours.forEach(function (hour) {
                hour.segments.forEach(function (segment) { return _this.hourSegmentModifier(segment); });
            });
        }
    };
    /**
     * @private
     * @return {?}
     */
    NovoCalendarDayViewElement.prototype.refreshView = /**
     * @private
     * @return {?}
     */
    function () {
        this.view = getDayView({
            events: this.events,
            viewDate: this.viewDate,
            hourSegments: this.hourSegments,
            dayStart: {
                hour: this.dayStartHour,
                minute: this.dayStartMinute,
            },
            dayEnd: {
                hour: this.dayEndHour,
                minute: this.dayEndMinute,
            },
            eventWidth: this.eventWidth,
            segmentHeight: SEGMENT_HEIGHT$1,
        });
    };
    /**
     * @private
     * @return {?}
     */
    NovoCalendarDayViewElement.prototype.refreshAll = /**
     * @private
     * @return {?}
     */
    function () {
        this.refreshHourGrid();
        this.refreshView();
    };
    NovoCalendarDayViewElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-calendar-day',
                    template: "\n    <div class=\"cal-day-view\" #dayViewContainer>\n      <novo-calendar-all-day-event\n        *ngFor=\"let event of view.allDayEvents\"\n        [event]=\"event\"\n        [customTemplate]=\"allDayEventTemplate\"\n        (eventClicked)=\"eventClicked.emit({event: event})\">\n      </novo-calendar-all-day-event>\n      <div class=\"cal-hour-rows\">\n        <div class=\"cal-events\">\n          <div\n            #event\n            *ngFor=\"let dayEvent of view?.events\"\n            class=\"cal-event-container\"\n            [style.marginTop.px]=\"dayEvent.top\"\n            [style.height.px]=\"dayEvent.height\"\n            [style.marginLeft.px]=\"dayEvent.left + 70\"\n            [style.width.px]=\"dayEvent.width - 1\">\n            <novo-calendar-day-event\n              [dayEvent]=\"dayEvent\"\n              [tooltipPosition]=\"tooltipPosition\"\n              [customTemplate]=\"eventTemplate\"\n              (eventClicked)=\"eventClicked.emit($event)\">\n            </novo-calendar-day-event>\n          </div>\n        </div>\n        <div class=\"cal-hour\" *ngFor=\"let hour of hours\" [style.minWidth.px]=\"view?.width + 70\">\n          <novo-calendar-day-hour-segment\n            *ngFor=\"let segment of hour.segments\"\n            [segment]=\"segment\"\n            [locale]=\"locale\"\n            [customTemplate]=\"hourSegmentTemplate\"\n            (click)=\"hourSegmentClicked.emit({date: segment.date})\">\n          </novo-calendar-day-hour-segment>\n        </div>\n      </div>\n    </div>\n  "
                }] }
    ];
    /** @nocollapse */
    NovoCalendarDayViewElement.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
    ]; };
    NovoCalendarDayViewElement.propDecorators = {
        viewDate: [{ type: Input }],
        events: [{ type: Input }],
        hourSegments: [{ type: Input }],
        dayStartHour: [{ type: Input }],
        dayStartMinute: [{ type: Input }],
        dayEndHour: [{ type: Input }],
        dayEndMinute: [{ type: Input }],
        eventWidth: [{ type: Input }],
        refresh: [{ type: Input }],
        locale: [{ type: Input }],
        hourSegmentModifier: [{ type: Input }],
        eventSnapSize: [{ type: Input }],
        tooltipPosition: [{ type: Input }],
        hourSegmentTemplate: [{ type: Input }],
        allDayEventTemplate: [{ type: Input }],
        eventTemplate: [{ type: Input }],
        eventClicked: [{ type: Output }],
        hourSegmentClicked: [{ type: Output }],
        eventTimesChanged: [{ type: Output }]
    };
    return NovoCalendarDayViewElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoCalendarDayEventElement = /** @class */ (function () {
    function NovoCalendarDayEventElement() {
        this.eventClicked = new EventEmitter();
    }
    NovoCalendarDayEventElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-calendar-day-event',
                    template: "\n    <ng-template #defaultTemplate>\n      <div\n        class=\"cal-event\"\n        [style.borderColor]=\"dayEvent.event.color.secondary\"\n        [class.cal-starts-within-day]=\"!dayEvent.startsBeforeDay\"\n        [class.cal-ends-within-day]=\"!dayEvent.endsAfterDay\"\n        [ngClass]=\"dayEvent.event.cssClass\"\n        [tooltip]=\"dayEvent.event.description\"\n        [tooltipPosition]=\"tooltipPosition\"\n        (click)=\"eventClicked.emit({event: dayEvent.event})\">\n          <div class=\"cal-event-ribbon\" [style.backgroundColor]=\"dayEvent.event.color.primary\"></div>\n          <div class=\"cal-event-group\">\n            <div class=\"cal-event-title\">{{dayEvent.event.title}}</div>\n            <div class=\"cal-event-description\">{{dayEvent.event?.description}}</div>\n          </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{dayEvent: dayEvent, tooltipPosition: tooltipPosition, eventClicked: eventClicked}\">\n    </ng-template>\n  "
                }] }
    ];
    NovoCalendarDayEventElement.propDecorators = {
        dayEvent: [{ type: Input }],
        tooltipPosition: [{ type: Input }],
        customTemplate: [{ type: Input }],
        eventClicked: [{ type: Output }]
    };
    return NovoCalendarDayEventElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoCalendarHourSegmentElement = /** @class */ (function () {
    function NovoCalendarHourSegmentElement() {
    }
    NovoCalendarHourSegmentElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-calendar-day-hour-segment',
                    template: "\n    <ng-template #defaultTemplate>\n      <div\n        class=\"cal-hour-segment\"\n        [class.cal-hour-start]=\"segment.isStart\"\n        [class.cal-after-hour-start]=\"!segment.isStart\"\n        [ngClass]=\"segment.cssClass\">\n        <div class=\"cal-time\">\n          {{ segment.date | hours:locale }}\n        </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        segment: segment,\n        locale: locale\n      }\">\n    </ng-template>\n  "
                }] }
    ];
    NovoCalendarHourSegmentElement.propDecorators = {
        segment: [{ type: Input }],
        locale: [{ type: Input }],
        customTemplate: [{ type: Input }]
    };
    return NovoCalendarHourSegmentElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoCalendarAllDayEventElement = /** @class */ (function () {
    function NovoCalendarAllDayEventElement() {
        this.eventClicked = new EventEmitter();
    }
    NovoCalendarAllDayEventElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-calendar-all-day-event',
                    template: "\n    <ng-template #defaultTemplate>\n      <div\n        class=\"cal-all-day-event\"\n        [style.backgroundColor]=\"event.color.secondary\"\n        [style.borderColor]=\"event.color.primary\">\n        {{event.title}}\n        <!--<novo-calendar-event-title\n          [event]=\"event\"\n          view=\"day\"\n          (click)=\"eventClicked.emit()\">\n        </novo-calendar-event-title>\n        <novo-calendar-event-actions [event]=\"event\"></novo-calendar-event-actions>-->\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        event: event,\n        eventClicked: eventClicked\n      }\">\n    </ng-template>\n  "
                }] }
    ];
    NovoCalendarAllDayEventElement.propDecorators = {
        event: [{ type: Input }],
        customTemplate: [{ type: Input }],
        eventClicked: [{ type: Output }]
    };
    return NovoCalendarAllDayEventElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var WeekdayPipe = /** @class */ (function () {
    function WeekdayPipe(locale) {
        if (locale === void 0) { locale = 'en-US'; }
        this.locale = locale;
    }
    /**
     * @param {?} date
     * @param {?=} locale
     * @param {?=} method
     * @return {?}
     */
    WeekdayPipe.prototype.transform = /**
     * @param {?} date
     * @param {?=} locale
     * @param {?=} method
     * @return {?}
     */
    function (date, locale, method) {
        if (locale === void 0) { locale = this.locale; }
        if (method === void 0) { method = 'short'; }
        return new Intl.DateTimeFormat(locale, { weekday: method }).format(date);
    };
    WeekdayPipe.decorators = [
        { type: Pipe, args: [{ name: 'weekday' },] }
    ];
    /** @nocollapse */
    WeekdayPipe.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
    ]; };
    return WeekdayPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MonthPipe = /** @class */ (function () {
    function MonthPipe(locale) {
        if (locale === void 0) { locale = 'en-US'; }
        this.locale = locale;
    }
    /**
     * @param {?} date
     * @param {?=} locale
     * @param {?=} method
     * @return {?}
     */
    MonthPipe.prototype.transform = /**
     * @param {?} date
     * @param {?=} locale
     * @param {?=} method
     * @return {?}
     */
    function (date, locale, method) {
        if (locale === void 0) { locale = this.locale; }
        if (method === void 0) { method = 'long'; }
        return new Intl.DateTimeFormat(locale, { month: method }).format(date);
    };
    MonthPipe.decorators = [
        { type: Pipe, args: [{ name: 'month' },] }
    ];
    /** @nocollapse */
    MonthPipe.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
    ]; };
    return MonthPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MonthDayPipe = /** @class */ (function () {
    function MonthDayPipe(locale) {
        if (locale === void 0) { locale = 'en-US'; }
        this.locale = locale;
    }
    /**
     * @param {?} date
     * @param {?=} locale
     * @param {?=} method
     * @return {?}
     */
    MonthDayPipe.prototype.transform = /**
     * @param {?} date
     * @param {?=} locale
     * @param {?=} method
     * @return {?}
     */
    function (date, locale, method) {
        if (locale === void 0) { locale = this.locale; }
        if (method === void 0) { method = 'short'; }
        return new Intl.DateTimeFormat(locale, { month: method, day: 'numeric' }).format(date);
    };
    MonthDayPipe.decorators = [
        { type: Pipe, args: [{ name: 'monthday' },] }
    ];
    /** @nocollapse */
    MonthDayPipe.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
    ]; };
    return MonthDayPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var YearPipe = /** @class */ (function () {
    function YearPipe(locale) {
        if (locale === void 0) { locale = 'en-US'; }
        this.locale = locale;
    }
    /**
     * @param {?} date
     * @param {?=} locale
     * @param {?=} method
     * @return {?}
     */
    YearPipe.prototype.transform = /**
     * @param {?} date
     * @param {?=} locale
     * @param {?=} method
     * @return {?}
     */
    function (date, locale, method) {
        if (locale === void 0) { locale = this.locale; }
        if (method === void 0) { method = 'numeric'; }
        return new Intl.DateTimeFormat(locale, { year: method }).format(date);
    };
    YearPipe.decorators = [
        { type: Pipe, args: [{ name: 'year' },] }
    ];
    /** @nocollapse */
    YearPipe.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
    ]; };
    return YearPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var HoursPipe = /** @class */ (function () {
    function HoursPipe(locale) {
        if (locale === void 0) { locale = 'en-US'; }
        this.locale = locale;
    }
    /**
     * @param {?} date
     * @param {?=} locale
     * @param {?=} method
     * @return {?}
     */
    HoursPipe.prototype.transform = /**
     * @param {?} date
     * @param {?=} locale
     * @param {?=} method
     * @return {?}
     */
    function (date, locale, method) {
        if (locale === void 0) { locale = this.locale; }
        if (method === void 0) { method = 'numeric'; }
        return new Intl.DateTimeFormat(locale, { hour: method }).format(date);
    };
    HoursPipe.decorators = [
        { type: Pipe, args: [{ name: 'hours' },] }
    ];
    /** @nocollapse */
    HoursPipe.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
    ]; };
    return HoursPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DayOfMonthPipe = /** @class */ (function () {
    function DayOfMonthPipe(locale) {
        if (locale === void 0) { locale = 'en-US'; }
        this.locale = locale;
    }
    /**
     * @param {?} date
     * @param {?=} locale
     * @param {?=} method
     * @return {?}
     */
    DayOfMonthPipe.prototype.transform = /**
     * @param {?} date
     * @param {?=} locale
     * @param {?=} method
     * @return {?}
     */
    function (date, locale, method) {
        if (locale === void 0) { locale = this.locale; }
        if (method === void 0) { method = 'numeric'; }
        return new Intl.DateTimeFormat(locale, { day: method }).format(date);
    };
    DayOfMonthPipe.decorators = [
        { type: Pipe, args: [{ name: 'dayofmonth' },] }
    ];
    /** @nocollapse */
    DayOfMonthPipe.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
    ]; };
    return DayOfMonthPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var EndOfWeekDisplayPipe = /** @class */ (function () {
    function EndOfWeekDisplayPipe(locale) {
        if (locale === void 0) { locale = 'en-US'; }
        this.locale = locale;
    }
    /**
     * @param {?} endOfWeek
     * @param {?} startOfWeek
     * @param {?=} locale
     * @param {?=} method
     * @return {?}
     */
    EndOfWeekDisplayPipe.prototype.transform = /**
     * @param {?} endOfWeek
     * @param {?} startOfWeek
     * @param {?=} locale
     * @param {?=} method
     * @return {?}
     */
    function (endOfWeek$$1, startOfWeek$$1, locale, method) {
        if (locale === void 0) { locale = this.locale; }
        if (method === void 0) { method = 'short'; }
        if (endOfWeek$$1.getMonth() === startOfWeek$$1.getMonth()) {
            return new Intl.DateTimeFormat(locale, { day: 'numeric' }).format(endOfWeek$$1);
        }
        return new Intl.DateTimeFormat(locale, { month: method, day: 'numeric' }).format(endOfWeek$$1);
    };
    EndOfWeekDisplayPipe.decorators = [
        { type: Pipe, args: [{ name: 'endofweekdisplay' },] }
    ];
    /** @nocollapse */
    EndOfWeekDisplayPipe.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
    ]; };
    return EndOfWeekDisplayPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoCalendarModule = /** @class */ (function () {
    function NovoCalendarModule() {
    }
    NovoCalendarModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, NovoButtonModule, NovoTooltipModule, NovoPipesModule],
                    declarations: [
                        NovoEventTypeLegendElement,
                        NovoCalendarMonthViewElement,
                        NovoCalendarMonthHeaderElement,
                        NovoCalendarMonthDayElement,
                        NovoCalendarWeekViewElement,
                        NovoCalendarWeekHeaderElement,
                        NovoCalendarWeekEventElement,
                        NovoCalendarDayViewElement,
                        NovoCalendarDayEventElement,
                        NovoCalendarHourSegmentElement,
                        NovoCalendarAllDayEventElement,
                        NovoCalendarDateChangeElement,
                        WeekdayPipe,
                        DayOfMonthPipe,
                        MonthPipe,
                        MonthDayPipe,
                        YearPipe,
                        HoursPipe,
                        EndOfWeekDisplayPipe,
                    ],
                    exports: [
                        NovoEventTypeLegendElement,
                        NovoCalendarMonthViewElement,
                        NovoCalendarMonthHeaderElement,
                        NovoCalendarMonthDayElement,
                        NovoCalendarWeekViewElement,
                        NovoCalendarWeekHeaderElement,
                        NovoCalendarWeekEventElement,
                        NovoCalendarDayViewElement,
                        NovoCalendarDayEventElement,
                        NovoCalendarHourSegmentElement,
                        NovoCalendarAllDayEventElement,
                        NovoCalendarDateChangeElement,
                        WeekdayPipe,
                        DayOfMonthPipe,
                        MonthPipe,
                        MonthDayPipe,
                        YearPipe,
                        HoursPipe,
                        EndOfWeekDisplayPipe,
                    ],
                },] }
    ];
    return NovoCalendarModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoToastElement = /** @class */ (function () {
    function NovoToastElement(sanitizer) {
        this.sanitizer = sanitizer;
        this.theme = 'danger';
        this.icon = 'caution';
        this.hasDialogue = false;
        this.isCloseable = false;
        this.closed = new EventEmitter();
        this.show = false;
        this.animate = false;
        this.parent = null;
        this.launched = false;
    }
    Object.defineProperty(NovoToastElement.prototype, "message", {
        set: /**
         * @param {?} m
         * @return {?}
         */
        function (m) {
            this._message = this.sanitizer.bypassSecurityTrustHtml(m);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoToastElement.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!this.launched) {
            // clear position and time
            this.position = null;
            this.time = null;
            // set icon and styling
            this.iconClass = "bhi-" + this.icon;
            this.alertTheme = this.theme + " toast-container embedded";
            if (this.hasDialogue) {
                this.alertTheme += ' dialogue';
            }
        }
    };
    /**
     * @param {?=} changes
     * @return {?}
     */
    NovoToastElement.prototype.ngOnChanges = /**
     * @param {?=} changes
     * @return {?}
     */
    function (changes) {
        // set icon and styling
        this.iconClass = "bhi-" + this.icon;
        this.alertTheme = this.theme + " toast-container embedded";
        if (this.hasDialogue) {
            this.alertTheme += ' dialogue';
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoToastElement.prototype.clickHandler = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.isCloseable) {
            if (event) {
                event.stopPropagation();
                event.preventDefault();
            }
            if (this.parent) {
                this.parent.hide(this);
            }
            else {
                this.closed.emit({ closed: true });
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoToastElement.prototype.close = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        if (this.parent) {
            this.parent.hide(this);
        }
        else {
            this.closed.emit({ closed: true });
        }
    };
    NovoToastElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-toast',
                    host: {
                        '[class]': 'alertTheme',
                        '[class.show]': 'show',
                        '[class.animate]': 'animate',
                        '[class.embedded]': 'embedded',
                        '(click)': '!isCloseable && clickHandler($event)',
                    },
                    template: "\n        <div class=\"toast-icon\">\n            <i [ngClass]=\"iconClass\"></i>\n        </div>\n        <div class=\"toast-content\">\n            <h5 *ngIf=\"title\">{{title}}</h5>\n            <p *ngIf=\"_message\" [class.message-only]=\"!title\" [innerHtml]=\"_message\"></p>\n            <div *ngIf=\"link\" class=\"link-generated\">\n                <input type=\"text\" [value]=\"link\" onfocus=\"this.select();\"/>\n            </div>\n            <div class=\"dialogue\">\n                <ng-content></ng-content>\n            </div>\n        </div>\n        <div class=\"close-icon\" *ngIf=\"isCloseable\" (click)=\"close($event)\">\n            <i class=\"bhi-times\"></i>\n        </div>\n    "
                }] }
    ];
    /** @nocollapse */
    NovoToastElement.ctorParameters = function () { return [
        { type: DomSanitizer }
    ]; };
    NovoToastElement.propDecorators = {
        theme: [{ type: Input }],
        icon: [{ type: Input }],
        title: [{ type: Input }],
        hasDialogue: [{ type: Input }],
        link: [{ type: Input }],
        isCloseable: [{ type: Input }],
        message: [{ type: Input }],
        closed: [{ type: Output }]
    };
    return NovoToastElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoToastModule = /** @class */ (function () {
    function NovoToastModule() {
    }
    NovoToastModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    declarations: [NovoToastElement],
                    exports: [NovoToastElement],
                    entryComponents: [NovoToastElement],
                },] }
    ];
    return NovoToastModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoHeaderSpacer = /** @class */ (function () {
    function NovoHeaderSpacer() {
    }
    NovoHeaderSpacer.decorators = [
        { type: Component, args: [{
                    selector: 'header-spacer',
                    template: "\n    <ng-content></ng-content>\n  "
                }] }
    ];
    return NovoHeaderSpacer;
}());
var NovoUtilsComponent = /** @class */ (function () {
    function NovoUtilsComponent() {
    }
    NovoUtilsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'utils',
                    template: "\n    <ng-content></ng-content>\n  "
                }] }
    ];
    return NovoUtilsComponent;
}());
var NovoUtilActionComponent = /** @class */ (function () {
    function NovoUtilActionComponent() {
    }
    NovoUtilActionComponent.decorators = [
        { type: Component, args: [{
                    selector: 'util-action, novo-action',
                    template: "\n    <button theme=\"icon\" [icon]=\"icon\" [attr.inverse]=\"inverse\" [disabled]=\"disabled\">\n      <ng-content></ng-content>\n    </button>\n  "
                }] }
    ];
    NovoUtilActionComponent.propDecorators = {
        icon: [{ type: Input }],
        inverse: [{ type: Input }],
        disabled: [{ type: Input }]
    };
    return NovoUtilActionComponent;
}());
var NovoHeaderComponent = /** @class */ (function () {
    function NovoHeaderComponent() {
        this.headerClass = 'novo-header';
        this.condensed = false;
        this.inverse = 'inverse';
    }
    Object.defineProperty(NovoHeaderComponent.prototype, "theme", {
        get: /**
         * @return {?}
         */
        function () {
            return this._theme;
        },
        set: /**
         * @param {?} theme
         * @return {?}
         */
        function (theme) {
            this._theme = theme;
            this.inverse = theme === 'white' || theme === 'off-white' || theme === 'light' ? undefined : 'inverse';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoHeaderComponent.prototype, "icon", {
        get: /**
         * @return {?}
         */
        function () {
            return this._icon;
        },
        set: /**
         * @param {?} icon
         * @return {?}
         */
        function (icon) {
            this._icon = "bhi-" + icon;
        },
        enumerable: true,
        configurable: true
    });
    NovoHeaderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'header[theme]',
                    template: "\n    <section>\n      <div class=\"header-title\">\n        <ng-container *ngIf=\"title\">\n          <i *ngIf=\"icon\" class=\"header-icon\" [ngClass]=\"icon\"></i>\n          <div class=\"header-titles\">\n            <h1>{{ title }}</h1>\n            <small *ngIf=\"subTitle\">{{ subTitle }}</small>\n          </div>\n        </ng-container>\n        <ng-container *ngIf=\"!title\">\n          <ng-content select=\"novo-icon, [novo-icon]\"></ng-content>\n          <div class=\"header-titles\">\n            <ng-content select=\"h1, h2, h3, h4, h5, h6, small, [novo-title], [novo-subtitle]\"></ng-content>\n          </div>\n        </ng-container>\n      </div>\n      <ng-content select=\"section\"></ng-content>\n      <span flex></span>\n      <ng-content select=\"utils\"></ng-content>\n      <ng-content select=\"novo-action\"></ng-content>\n    </section>\n    <ng-content></ng-content>\n  "
                }] }
    ];
    NovoHeaderComponent.propDecorators = {
        headerClass: [{ type: HostBinding, args: ['class',] }],
        condensed: [{ type: HostBinding, args: ['class.condensed',] }, { type: Input }],
        title: [{ type: Input }],
        subTitle: [{ type: Input }],
        theme: [{ type: HostBinding, args: ['attr.theme',] }, { type: Input }],
        icon: [{ type: Input }]
    };
    return NovoHeaderComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoHeaderModule = /** @class */ (function () {
    function NovoHeaderModule() {
    }
    NovoHeaderModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, NovoButtonModule],
                    declarations: [NovoHeaderComponent, NovoUtilActionComponent, NovoUtilsComponent, NovoHeaderSpacer],
                    exports: [NovoHeaderComponent, NovoUtilActionComponent, NovoUtilsComponent, NovoHeaderSpacer],
                },] }
    ];
    return NovoHeaderModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoNavElement = /** @class */ (function () {
    function NovoNavElement() {
        this.theme = '';
        this.direction = '';
        this.condensed = false;
        this.items = [];
    }
    /**
     * @param {?} item
     * @return {?}
     */
    NovoNavElement.prototype.select = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        /**
         * Deactivate all other tabs
         * @param {?} items
         * @return {?}
         */
        function _deactivateAllItems(items) {
            items.forEach(function (t) {
                if (t.active === true) ;
                t.active = false;
            });
        }
        _deactivateAllItems(this.items);
        item.active = true;
        if (this.outlet) {
            this.outlet.show(this.items.indexOf(item));
        }
        // TODO - remove hack to make DOM rerender - jgodi
        /** @type {?} */
        var element = (/** @type {?} */ (document.querySelector('novo-tab-link.active span.indicator')));
        if (element) {
            element.style.opacity = 0.99;
            setTimeout(function () {
                element.style.opacity = 1;
            }, 10);
        }
    };
    /**
     * @param {?} item
     * @return {?}
     */
    NovoNavElement.prototype.add = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (this.items.length === 0) {
            item.active = true;
            // item.selected.next();
        }
        this.items.push(item);
    };
    NovoNavElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-nav',
                    template: '<ng-content></ng-content>'
                }] }
    ];
    NovoNavElement.propDecorators = {
        theme: [{ type: Input }],
        direction: [{ type: Input }],
        outlet: [{ type: Input }],
        router: [{ type: Input }],
        condensed: [{ type: HostBinding, args: ['class.condensed',] }, { type: Input }]
    };
    return NovoNavElement;
}());
var NovoTabElement = /** @class */ (function () {
    function NovoTabElement(nav) {
        this.active = false;
        this.disabled = false;
        this.activeChange = new EventEmitter();
        this.nav = nav;
        this.nav.add(this);
    }
    /**
     * @return {?}
     */
    NovoTabElement.prototype.select = /**
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this.activeChange.emit(true);
            this.nav.select(this);
        }
    };
    NovoTabElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-tab',
                    host: {
                        '(click)': 'select()',
                        '[class.active]': 'active',
                        '[class.disabled]': 'disabled',
                    },
                    template: "\n        <div class=\"novo-tab-link\">\n            <ng-content></ng-content>\n        </div>\n        <span class=\"indicator\"></span>\n   "
                }] }
    ];
    /** @nocollapse */
    NovoTabElement.ctorParameters = function () { return [
        { type: NovoNavElement }
    ]; };
    NovoTabElement.propDecorators = {
        active: [{ type: Input }],
        disabled: [{ type: Input }],
        activeChange: [{ type: Output }]
    };
    return NovoTabElement;
}());
var NovoTabButtonElement = /** @class */ (function () {
    function NovoTabButtonElement(nav) {
        this.active = false;
        this.disabled = false;
        this.nav = nav;
        this.nav.add(this);
    }
    /**
     * @return {?}
     */
    NovoTabButtonElement.prototype.select = /**
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this.nav.select(this);
        }
    };
    NovoTabButtonElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-tab-button',
                    host: {
                        '(click)': 'select()',
                        '[class.active]': 'active',
                        '[class.disabled]': 'disabled',
                    },
                    template: '<ng-content></ng-content>'
                }] }
    ];
    /** @nocollapse */
    NovoTabButtonElement.ctorParameters = function () { return [
        { type: NovoNavElement }
    ]; };
    NovoTabButtonElement.propDecorators = {
        active: [{ type: Input }],
        disabled: [{ type: Input }]
    };
    return NovoTabButtonElement;
}());
var NovoTabLinkElement = /** @class */ (function () {
    function NovoTabLinkElement(nav) {
        this.active = false;
        this.disabled = false;
        this.nav = nav;
        this.nav.add(this);
    }
    /**
     * @return {?}
     */
    NovoTabLinkElement.prototype.select = /**
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this.nav.select(this);
        }
    };
    NovoTabLinkElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-tab-link',
                    host: {
                        '(click)': 'select()',
                        '[class.active]': 'active',
                        '[class.disabled]': 'disabled',
                    },
                    template: "\n        <div class=\"novo-tab-link\">\n            <ng-content></ng-content>\n        </div>\n        <span class=\"indicator\"></span>\n    "
                }] }
    ];
    /** @nocollapse */
    NovoTabLinkElement.ctorParameters = function () { return [
        { type: NovoNavElement }
    ]; };
    NovoTabLinkElement.propDecorators = {
        active: [{ type: Input }],
        disabled: [{ type: Input }]
    };
    return NovoTabLinkElement;
}());
var NovoNavOutletElement = /** @class */ (function () {
    function NovoNavOutletElement() {
        this.items = [];
    }
    /**
     * @param {?} index
     * @return {?}
     */
    NovoNavOutletElement.prototype.show = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        /** @type {?} */
        var item = this.items[index];
        /**
         * Deactivates other tab items
         * @param {?} items - deactivated items
         * @return {?}
         */
        function _deactivateAllItems(items) {
            items.forEach(function (t) {
                if (t.active === true) ;
                t.active = false;
            });
        }
        _deactivateAllItems(this.items);
        item.active = true;
    };
    /**
     * @param {?} item
     * @return {?}
     */
    NovoNavOutletElement.prototype.add = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (this.items.length === 0) {
            item.active = true;
        }
        this.items.push(item);
    };
    NovoNavOutletElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-nav-outlet',
                    template: '<ng-content></ng-content>'
                }] }
    ];
    return NovoNavOutletElement;
}());
var NovoNavContentElement = /** @class */ (function () {
    function NovoNavContentElement(outlet) {
        this.active = false;
        outlet.add(this);
    }
    NovoNavContentElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-nav-content',
                    host: {
                        '[class.active]': 'active',
                    },
                    template: '<ng-content></ng-content>'
                }] }
    ];
    /** @nocollapse */
    NovoNavContentElement.ctorParameters = function () { return [
        { type: NovoNavOutletElement }
    ]; };
    NovoNavContentElement.propDecorators = {
        active: [{ type: Input }]
    };
    return NovoNavContentElement;
}());
var NovoNavHeaderElement = /** @class */ (function () {
    function NovoNavHeaderElement(outlet) {
        this.active = false;
        this.active = this.active || false;
        this.outlet = outlet;
    }
    /**
     * @param {?=} event
     * @return {?}
     */
    NovoNavHeaderElement.prototype.show = /**
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        try {
            /** @type {?} */
            var INDEX = this.outlet.items.indexOf(this.forElement);
            if (INDEX > -1) {
                this.outlet.show(INDEX);
            }
        }
        catch (err) {
            // do nothing
        }
    };
    NovoNavHeaderElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-nav-header',
                    host: {
                        '[class.active]': 'active',
                        '(click)': 'show($event)',
                    },
                    template: '<ng-content></ng-content>'
                }] }
    ];
    /** @nocollapse */
    NovoNavHeaderElement.ctorParameters = function () { return [
        { type: NovoNavOutletElement }
    ]; };
    NovoNavHeaderElement.propDecorators = {
        active: [{ type: Input }],
        forElement: [{ type: Input, args: ['for',] }]
    };
    return NovoNavHeaderElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoTabModule = /** @class */ (function () {
    function NovoTabModule() {
    }
    NovoTabModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    declarations: [
                        NovoNavElement,
                        NovoTabElement,
                        NovoTabButtonElement,
                        NovoTabLinkElement,
                        NovoNavOutletElement,
                        NovoNavContentElement,
                        NovoNavHeaderElement,
                    ],
                    exports: [
                        NovoNavElement,
                        NovoTabElement,
                        NovoTabButtonElement,
                        NovoTabLinkElement,
                        NovoNavOutletElement,
                        NovoNavContentElement,
                        NovoNavHeaderElement,
                    ],
                },] }
    ];
    return NovoTabModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Value accessor for the component (supports ngModel)
/** @type {?} */
var TILES_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NovoTilesElement; }),
    multi: true,
};
var NovoTilesElement = /** @class */ (function () {
    function NovoTilesElement(element, ref) {
        this.element = element;
        this.ref = ref;
        this.name = new Date().getTime().toString();
        this.disabled = false;
        this.onChange = new EventEmitter();
        this.onSelectedOptionClick = new EventEmitter();
        this.onDisabledOptionClick = new EventEmitter();
        this._options = [];
        this.activeTile = null;
        this.state = 'inactive';
        this.focused = false;
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
    }
    /**
     * @param {?} focus
     * @return {?}
     */
    NovoTilesElement.prototype.setFocus = /**
     * @param {?} focus
     * @return {?}
     */
    function (focus) {
        this.focused = focus;
    };
    /**
     * @return {?}
     */
    NovoTilesElement.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.name = this.name || '';
        this.setupOptions();
    };
    /**
     * @param {?} change
     * @return {?}
     */
    NovoTilesElement.prototype.ngOnChanges = /**
     * @param {?} change
     * @return {?}
     */
    function (change) {
        if (change['options'] && change['options'].currentValue && !change['options'].firstChange) {
            this.name = this.name || '';
            this._options = [];
            this.setupOptions();
        }
    };
    /**
     * @return {?}
     */
    NovoTilesElement.prototype.setupOptions = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.options && this.options.length && (this.options[0].value === undefined || this.options[0].value === null)) {
            this._options = this.options.map(function (x) {
                /** @type {?} */
                var item = { value: x, label: x, checked: _this.model === x };
                if (item.checked) {
                    _this.setTile(item);
                }
                return item;
            });
        }
        else {
            this._options = this.options.map(function (x) {
                x.checked = _this.model === x.value;
                if (x.checked) {
                    _this.setTile(x);
                }
                return x;
            });
        }
        this.ref.markForCheck();
    };
    /**
     * @param {?} event
     * @param {?} item
     * @return {?}
     */
    NovoTilesElement.prototype.select = /**
     * @param {?} event
     * @param {?} item
     * @return {?}
     */
    function (event, item) {
        var e_1, _a;
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        if (!item.disabled) {
            if (item.checked) {
                this.onSelectedOptionClick.emit(item);
                return;
            }
            try {
                for (var _b = __values(this._options), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var option = _c.value;
                    option.checked = false;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            item.checked = !item.checked;
            this.onChange.emit(item.value);
            this.onModelChange(item.value);
            this.setTile(item);
            this.model = item.value;
        }
        else {
            this.onDisabledOptionClick.emit(item);
        }
        this.ref.markForCheck();
    };
    /**
     * @param {?} item
     * @return {?}
     */
    NovoTilesElement.prototype.setTile = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (item) {
            this.activeTile = item.value;
            this.moveTile();
        }
    };
    /**
     * @return {?}
     */
    NovoTilesElement.prototype.moveTile = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            /** @type {?} */
            var ind = _this.element.nativeElement.querySelector('.active-indicator');
            /** @type {?} */
            var el = _this.element.nativeElement.querySelector('.tile.active');
            if (ind && el) {
                /** @type {?} */
                var w = el.clientWidth;
                /** @type {?} */
                var left = el.offsetLeft - el.offsetTop;
                ind.style.width = "calc(" + w + "px + 0.32em)";
                ind.style.left = left + "px";
                _this.state = 'active';
                _this.ref.markForCheck();
            }
        });
    };
    /**
     * @param {?} model
     * @return {?}
     */
    NovoTilesElement.prototype.writeValue = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        this.model = model;
        if (!Helpers.isBlank(model)) {
            this.setupOptions();
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoTilesElement.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoTilesElement.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelTouched = fn;
    };
    /**
     * @param {?} disabled
     * @return {?}
     */
    NovoTilesElement.prototype.setDisabledState = /**
     * @param {?} disabled
     * @return {?}
     */
    function (disabled) {
        this.disabled = disabled;
    };
    NovoTilesElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-tiles',
                    providers: [TILES_VALUE_ACCESSOR],
                    template: "\n        <div class=\"tile-container\" [class.active]=\"focused\" [class.disabled]=\"disabled\">\n            <div class=\"tile\" *ngFor=\"let option of _options; let i = index\" [ngClass]=\"{active: option.checked, disabled: option.disabled}\" (click)=\"select($event, option)\" [attr.data-automation-id]=\"option.label || option\">\n                <input class=\"tiles-input\" [name]=\"name\" type=\"radio\" [value]=\"option.checked || option\" [attr.id]=\"name + i\" (change)=\"select($event, option)\" (focus)=\"setFocus(true)\" (blur)=\"setFocus(false)\" [disabled]=\"disabled\">\n                <label [attr.for]=\"name + i\" [attr.data-automation-id]=\"option.label || option\">\n                    {{ option.label || option }}\n                </label>\n            </div>\n            <span class=\"active-indicator\" [@tileState]=\"state\" [hidden]=\"activeTile === undefined || activeTile === null\"></span>\n        </div>\n    ",
                    animations: [
                        trigger('tileState', [
                            state('inactive', style({
                                opacity: '0',
                            })),
                            state('active', style({
                                opacity: '1',
                            })),
                            transition('inactive => active', animate('200ms ease-in')),
                            transition('active => inactive', animate('200ms ease-out')),
                        ]),
                    ],
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    NovoTilesElement.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    NovoTilesElement.propDecorators = {
        name: [{ type: Input }],
        options: [{ type: Input }],
        required: [{ type: Input }],
        disabled: [{ type: Input, args: ['controlDisabled',] }],
        onChange: [{ type: Output }],
        onSelectedOptionClick: [{ type: Output }],
        onDisabledOptionClick: [{ type: Output }]
    };
    return NovoTilesElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoTilesModule = /** @class */ (function () {
    function NovoTilesModule() {
    }
    NovoTilesModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, ReactiveFormsModule],
                    declarations: [NovoTilesElement],
                    exports: [NovoTilesElement],
                },] }
    ];
    return NovoTilesModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * A Promise that uses the deferred anti-pattern
 * @return {?}
 */
function Deferred() {
    /** @type {?} */
    var temp = {};
    /** @type {?} */
    var promise = new Promise(function (resolve, reject) {
        temp.resolve = resolve;
        temp.reject = reject;
    });
    promise.resolve = temp.resolve;
    promise.reject = temp.reject;
    return promise;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ComponentUtils = /** @class */ (function () {
    function ComponentUtils(componentFactoryResolver) {
        this.componentFactoryResolver = componentFactoryResolver;
    }
    /**
     * @param {?} ComponentClass
     * @param {?} location
     * @param {?=} providers
     * @return {?}
     */
    ComponentUtils.prototype.appendNextToLocation = /**
     * @param {?} ComponentClass
     * @param {?} location
     * @param {?=} providers
     * @return {?}
     */
    function (ComponentClass, location, providers) {
        /** @type {?} */
        var componentFactory = this.componentFactoryResolver.resolveComponentFactory(ComponentClass);
        /** @type {?} */
        var parentInjector = location.parentInjector;
        /** @type {?} */
        var childInjector = parentInjector;
        if (providers && providers.length > 0) {
            childInjector = ReflectiveInjector.fromResolvedProviders(providers, parentInjector);
        }
        return location.createComponent(componentFactory, location.length, childInjector);
    };
    /**
     * @param {?} ComponentClass
     * @param {?} location
     * @param {?=} providers
     * @return {?}
     */
    ComponentUtils.prototype.appendTopOfLocation = /**
     * @param {?} ComponentClass
     * @param {?} location
     * @param {?=} providers
     * @return {?}
     */
    function (ComponentClass, location, providers) {
        /** @type {?} */
        var componentFactory = this.componentFactoryResolver.resolveComponentFactory(ComponentClass);
        /** @type {?} */
        var parentInjector = location.parentInjector;
        /** @type {?} */
        var childInjector = parentInjector;
        if (providers && providers.length > 0) {
            childInjector = ReflectiveInjector.fromResolvedProviders(providers, parentInjector);
        }
        return location.createComponent(componentFactory, 0, childInjector);
    };
    ComponentUtils.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ComponentUtils.ctorParameters = function () { return [
        { type: ComponentFactoryResolver }
    ]; };
    return ComponentUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoModalParams = /** @class */ (function () {
    function NovoModalParams() {
    }
    return NovoModalParams;
}());
/**
 * Reference to an opened dialog.
 */
var NovoModalRef = /** @class */ (function () {
    function NovoModalRef() {
        this.component = null;
        this.contentRef = null;
        this.containerRef = null;
        this.isClosed = false;
        this._onClosed = Deferred();
    }
    Object.defineProperty(NovoModalRef.prototype, "onClosed", {
        // Gets a promise that is resolved when the dialog is closed.
        get: 
        // Gets a promise that is resolved when the dialog is closed.
        /**
         * @return {?}
         */
        function () {
            return this._onClosed;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoModalRef.prototype.open = /**
     * @return {?}
     */
    function () {
        document.body.classList.add('modal-open');
    };
    /**
     * @param {?=} result
     * @return {?}
     */
    NovoModalRef.prototype.close = /**
     * @param {?=} result
     * @return {?}
     */
    function (result) {
        document.body.classList.remove('modal-open');
        if (this.contentRef) {
            this.contentRef.destroy();
        }
        if (this.containerRef) {
            this.containerRef.destroy();
        }
        this._onClosed.resolve(result);
    };
    NovoModalRef.decorators = [
        { type: Injectable }
    ];
    return NovoModalRef;
}());
var NovoModalContainerElement = /** @class */ (function () {
    function NovoModalContainerElement(modalRef, componentUtils) {
        this.modalRef = modalRef;
        this.componentUtils = componentUtils;
    }
    /**
     * @return {?}
     */
    NovoModalContainerElement.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            _this.modalRef.contentRef = _this.componentUtils.appendNextToLocation(_this.modalRef.component, _this.container);
        });
    };
    NovoModalContainerElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-modal-container',
                    template: '<span #container></span>'
                }] }
    ];
    /** @nocollapse */
    NovoModalContainerElement.ctorParameters = function () { return [
        { type: NovoModalRef },
        { type: ComponentUtils }
    ]; };
    NovoModalContainerElement.propDecorators = {
        container: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }]
    };
    return NovoModalContainerElement;
}());
var NovoModalElement = /** @class */ (function () {
    function NovoModalElement(modalRef) {
        this.modalRef = modalRef;
    }
    /**
     * @return {?}
     */
    NovoModalElement.prototype.close = /**
     * @return {?}
     */
    function () {
        this.modalRef.close();
    };
    NovoModalElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-modal',
                    template: "\n        <ng-content select=\"header\"></ng-content>\n        <ng-content select=\"section\"></ng-content>\n        <footer>\n            <ng-content select=\"button\"></ng-content>\n        </footer>\n    "
                }] }
    ];
    /** @nocollapse */
    NovoModalElement.ctorParameters = function () { return [
        { type: NovoModalRef }
    ]; };
    return NovoModalElement;
}());
var NovoModalNotificationElement = /** @class */ (function () {
    function NovoModalNotificationElement(modalRef) {
        this.modalRef = modalRef;
        this.cancel = new EventEmitter();
        this.modalRef = modalRef;
    }
    /**
     * @return {?}
     */
    NovoModalNotificationElement.prototype.close = /**
     * @return {?}
     */
    function () {
        this.cancel.emit();
        this.modalRef.close();
    };
    /**
     * @return {?}
     */
    NovoModalNotificationElement.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        switch (this.type) {
            case 'success':
                this.iconType = 'bhi-check';
                break;
            case 'warning':
                this.iconType = 'bhi-caution-o';
                break;
            case 'error':
                this.iconType = 'bhi-caution-o';
                break;
            case 'custom':
                this.iconType = "bhi-" + this.icon;
                break;
            default:
                break;
        }
    };
    NovoModalNotificationElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-notification',
                    template: "\n        <button class=\"modal-close\" theme=\"icon\" icon=\"times\" (click)=\"close()\"></button>\n        <header>\n            <ng-content select=\"label\"></ng-content>\n        </header>\n        <section class=\"notification-body\">\n            <i class=\"indicator\" [ngClass]=\"iconType\" *ngIf=\"iconType\"></i>\n            <ng-content select=\"h1\"></ng-content>\n            <ng-content select=\"h2\"></ng-content>\n            <ng-content select=\"p\"></ng-content>\n        </section>\n        <footer>\n            <ng-content select=\"button\"></ng-content>\n        </footer>\n    "
                }] }
    ];
    /** @nocollapse */
    NovoModalNotificationElement.ctorParameters = function () { return [
        { type: NovoModalRef }
    ]; };
    NovoModalNotificationElement.propDecorators = {
        type: [{ type: Input }],
        icon: [{ type: Input }],
        cancel: [{ type: Output }]
    };
    return NovoModalNotificationElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoModalModule = /** @class */ (function () {
    function NovoModalModule() {
    }
    NovoModalModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, NovoButtonModule],
                    declarations: [NovoModalContainerElement, NovoModalElement, NovoModalNotificationElement],
                    exports: [NovoModalElement, NovoModalNotificationElement],
                    entryComponents: [NovoModalContainerElement],
                },] }
    ];
    return NovoModalModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoListElement = /** @class */ (function () {
    function NovoListElement(element) {
        this.element = element;
    }
    NovoListElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-list',
                    host: {
                        '[class.vertical-list]': 'direction === "vertical"',
                        '[class.horizontal-list]': 'direction === "horizontal"',
                        '[attr.theme]': 'theme',
                    },
                    template: "\n        <ng-content></ng-content>\n    "
                }] }
    ];
    /** @nocollapse */
    NovoListElement.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    NovoListElement.propDecorators = {
        theme: [{ type: Input }],
        direction: [{ type: Input }]
    };
    return NovoListElement;
}());
var NovoListItemElement = /** @class */ (function () {
    function NovoListItemElement(element) {
        this.element = element;
        this.avatar = false;
    }
    /**
     * @return {?}
     */
    NovoListItemElement.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.avatar = !!this.element.nativeElement.querySelector('item-avatar');
    };
    NovoListItemElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-list-item',
                    template: "\n        <div class=\"list-item\" [ngClass]=\"{'avatar': avatar}\">\n            <ng-content select=\"item-header\"></ng-content>\n            <ng-content select=\"item-content\"></ng-content>\n        </div>\n        <ng-content></ng-content>\n        <ng-content select=\"item-end\"></ng-content>\n    "
                }] }
    ];
    /** @nocollapse */
    NovoListItemElement.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return NovoListItemElement;
}());
var NovoItemAvatarElement = /** @class */ (function () {
    function NovoItemAvatarElement() {
    }
    /**
     * @param {?=} changes
     * @return {?}
     */
    NovoItemAvatarElement.prototype.ngOnChanges = /**
     * @param {?=} changes
     * @return {?}
     */
    function (changes) {
        this.iconClass = this.icon ? "bhi-" + this.icon : null;
        this.classMap = [this.iconClass, this.icon];
    };
    /**
     * @return {?}
     */
    NovoItemAvatarElement.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.ngOnChanges();
    };
    NovoItemAvatarElement.decorators = [
        { type: Component, args: [{
                    selector: 'item-avatar',
                    template: "\n        <i *ngIf=\"iconClass\" [ngClass]=\"classMap\" theme=\"contained\"></i>\n    "
                }] }
    ];
    NovoItemAvatarElement.propDecorators = {
        icon: [{ type: Input }]
    };
    return NovoItemAvatarElement;
}());
var NovoItemTitleElement = /** @class */ (function () {
    function NovoItemTitleElement() {
    }
    NovoItemTitleElement.decorators = [
        { type: Component, args: [{
                    selector: 'item-title',
                    template: "\n        <h6><ng-content></ng-content></h6>\n    "
                }] }
    ];
    return NovoItemTitleElement;
}());
var NovoItemHeaderElement = /** @class */ (function () {
    function NovoItemHeaderElement() {
    }
    NovoItemHeaderElement.decorators = [
        { type: Component, args: [{
                    selector: 'item-header',
                    template: "\n        <ng-content select=\"item-avatar\"></ng-content>\n        <ng-content select=\"item-title\"></ng-content>\n        <ng-content select=\"item-header-end\"></ng-content>\n    "
                }] }
    ];
    return NovoItemHeaderElement;
}());
var NovoItemDateElement = /** @class */ (function () {
    function NovoItemDateElement() {
    }
    NovoItemDateElement.decorators = [
        { type: Component, args: [{
                    selector: 'item-header-end',
                    template: "\n        <ng-content></ng-content>\n    "
                }] }
    ];
    return NovoItemDateElement;
}());
var NovoItemContentElement = /** @class */ (function () {
    function NovoItemContentElement() {
    }
    NovoItemContentElement.decorators = [
        { type: Component, args: [{
                    selector: 'item-content',
                    host: {
                        '[class.vertical-list]': 'direction === "vertical"',
                        '[class.horizontal-list]': 'direction === "horizontal"',
                    },
                    template: "\n        <ng-content></ng-content>\n    "
                }] }
    ];
    NovoItemContentElement.propDecorators = {
        direction: [{ type: Input }]
    };
    return NovoItemContentElement;
}());
var NovoItemEndElement = /** @class */ (function () {
    function NovoItemEndElement() {
    }
    NovoItemEndElement.decorators = [
        { type: Component, args: [{
                    selector: 'item-end',
                    template: "\n        <ng-content></ng-content>\n    "
                }] }
    ];
    return NovoItemEndElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoListModule = /** @class */ (function () {
    function NovoListModule() {
    }
    NovoListModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    declarations: [
                        NovoListElement,
                        NovoListItemElement,
                        NovoItemAvatarElement,
                        NovoItemTitleElement,
                        NovoItemContentElement,
                        NovoItemEndElement,
                        NovoItemHeaderElement,
                        NovoItemDateElement,
                    ],
                    exports: [
                        NovoListElement,
                        NovoListItemElement,
                        NovoItemAvatarElement,
                        NovoItemTitleElement,
                        NovoItemHeaderElement,
                        NovoItemContentElement,
                        NovoItemEndElement,
                        NovoItemDateElement,
                    ],
                },] }
    ];
    return NovoListModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Outside click helper, makes to set the element as inactive when clicking outside of it
 */
var  /**
 * Outside click helper, makes to set the element as inactive when clicking outside of it
 */
OutsideClick = /** @class */ (function () {
    function OutsideClick(element) {
        this.active = false;
        this.onActiveChange = new EventEmitter();
        // Component element
        this.element = element;
        // Outside click handler
        // Property because `this.func.bind(this)` returns a new function each time
        this.onOutsideClick = this.handleOutsideClick.bind(this);
    }
    /**
     * When the element is destroyed, make sure to remove the handler
     */
    /**
     * When the element is destroyed, make sure to remove the handler
     * @return {?}
     */
    OutsideClick.prototype.ngOnDestroy = /**
     * When the element is destroyed, make sure to remove the handler
     * @return {?}
     */
    function () {
        window.removeEventListener('click', this.onOutsideClick);
    };
    /**
     * Toggles the element as active and adds/removes the outside click handler
     * @param event
     * @param forceValue
     */
    /**
     * Toggles the element as active and adds/removes the outside click handler
     * @param {?=} event
     * @param {?=} forceValue
     * @return {?}
     */
    OutsideClick.prototype.toggleActive = /**
     * Toggles the element as active and adds/removes the outside click handler
     * @param {?=} event
     * @param {?=} forceValue
     * @return {?}
     */
    function (event, forceValue) {
        // Reverse the active property (if forceValue, use that)
        this.active = !Helpers.isBlank(forceValue) ? forceValue : !this.active;
        // Bind window click events to hide on outside click
        if (this.active) {
            window.addEventListener('click', this.onOutsideClick);
        }
        else {
            window.removeEventListener('click', this.onOutsideClick);
        }
        // Fire the active change event
        this.onActiveChange.emit(this.active);
    };
    /**
     * When clicking outside, checks the element and closes if outside
     * @param event
     */
    /**
     * When clicking outside, checks the element and closes if outside
     * @param {?} event
     * @return {?}
     */
    OutsideClick.prototype.handleOutsideClick = /**
     * When clicking outside, checks the element and closes if outside
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // If the elements doesn't contain the target element, it is an outside click
        /** @type {?} */
        var outsideClick = !this.element.nativeElement.contains(event.target);
        if (this.otherElement && outsideClick) {
            outsideClick = !this.otherElement.nativeElement.contains(event.target);
        }
        if (outsideClick) {
            this.toggleActive(event, false);
        }
    };
    return OutsideClick;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Helper to keep track of key codes
/** @type {?} */
var KeyCodes = {
    BACKSPACE: 8,
    TAB: 9,
    NUM_CENTER: 12,
    ENTER: 13,
    RETURN: 13,
    SHIFT: 16,
    CTRL: 17,
    ALT: 18,
    PAUSE: 19,
    CAPS_LOCK: 20,
    ESC: 27,
    SPACE: 32,
    PAGE_UP: 33,
    PAGE_DOWN: 34,
    HASH_SYMBOL: 35,
    HOME: 36,
    LEFT: 37,
    UP: 38,
    RIGHT: 39,
    DOWN: 40,
    PRINT_SCREEN: 44,
    INSERT: 45,
    DELETE: 46,
    ZERO: 48,
    ONE: 49,
    TWO: 50,
    THREE: 51,
    FOUR: 52,
    FIVE: 53,
    SIX: 54,
    SEVEN: 55,
    EIGHT: 56,
    NINE: 57,
    AT_SYMBOL: 64,
    A: 65,
    B: 66,
    C: 67,
    D: 68,
    E: 69,
    F: 70,
    G: 71,
    H: 72,
    I: 73,
    J: 74,
    K: 75,
    L: 76,
    M: 77,
    N: 78,
    O: 79,
    P: 80,
    Q: 81,
    R: 82,
    S: 83,
    T: 84,
    U: 85,
    V: 86,
    W: 87,
    X: 88,
    Y: 89,
    Z: 90,
    CONTEXT_MENU: 93,
    NUM_ZERO: 96,
    NUM_ONE: 97,
    NUM_TWO: 98,
    NUM_THREE: 99,
    NUM_FOUR: 100,
    NUM_FIVE: 101,
    NUM_SIX: 102,
    NUM_SEVEN: 103,
    NUM_EIGHT: 104,
    NUM_NINE: 105,
    NUM_MULTIPLY: 106,
    NUM_PLUS: 107,
    NUM_MINUS: 109,
    NUM_PERIOD: 110,
    NUM_DIVISION: 111,
    F1: 112,
    F2: 113,
    F3: 114,
    F4: 115,
    F5: 116,
    F6: 117,
    F7: 118,
    F8: 119,
    F9: 120,
    F10: 121,
    F11: 122,
    F12: 123,
    DASH: 189,
    PERIOD: 190,
    FORWARD_SLASH: 191,
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@name: PickerResults
 *
 * \@description This is the actual list of matches that gets injected into the DOM. It's also the piece that can be
 * overwritten if custom list options are needed.
 */
var BasePickerResults = /** @class */ (function () {
    function BasePickerResults(element, ref) {
        this._term = '';
        this.selected = [];
        this.matches = [];
        this.hasError = false;
        this.isLoading = false;
        this.isStatic = true;
        this.page = 0;
        this.lastPage = false;
        this.autoSelectFirstOption = true;
        this.selectingMatches = false;
        this.element = element;
        this.ref = ref;
        this.scrollHandler = this.onScrollDown.bind(this);
    }
    /**
     * @return {?}
     */
    BasePickerResults.prototype.cleanUp = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var element = this.getListElement();
        if (element && element.hasAttribute('scrollListener')) {
            element.removeAttribute('scrollListener');
            element.removeEventListener('scroll', this.scrollHandler);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    BasePickerResults.prototype.onScrollDown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var element = event.target;
        if (element) {
            /** @type {?} */
            var offset = element.offsetHeight + element.scrollTop;
            /** @type {?} */
            var bottom = element.scrollHeight - 300;
            if (offset >= bottom) {
                event.stopPropagation();
                if (!this.lastPage && !this.isLoading) {
                    this.processSearch();
                }
            }
        }
    };
    Object.defineProperty(BasePickerResults.prototype, "term", {
        get: /**
         * @return {?}
         */
        function () {
            return this._term;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value !== this._term || this.page === 0) {
                this._term = value;
                this.page = 0;
                this.matches = [];
                this.processSearch(true);
            }
            else {
                this.addScrollListener();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    BasePickerResults.prototype.addScrollListener = /**
     * @return {?}
     */
    function () {
        if (this.config.enableInfiniteScroll) {
            /** @type {?} */
            var element = this.getListElement();
            if (element && !element.hasAttribute('scrollListener')) {
                element.setAttribute('scrollListener', 'true');
                element.addEventListener('scroll', this.scrollHandler);
            }
        }
    };
    /**
     * @param {?=} shouldReset
     * @return {?}
     */
    BasePickerResults.prototype.processSearch = /**
     * @param {?=} shouldReset
     * @return {?}
     */
    function (shouldReset) {
        var _this = this;
        this.hasError = false;
        this.isLoading = true;
        this.ref.markForCheck();
        this.search(this.term).subscribe(function (results) {
            if (shouldReset) {
                _this.matches = [];
            }
            if (_this.isStatic) {
                _this.matches = _this.filterData(results);
            }
            else {
                _this.matches = _this.matches.concat(results);
                _this.lastPage = results && !results.length;
            }
            if (_this.matches.length > 0 && _this.autoSelectFirstOption && !_this.selectingMatches) {
                _this.nextActiveMatch();
            }
            _this.isLoading = false;
            _this.ref.markForCheck();
            setTimeout(function () {
                _this.overlay.updatePosition();
                _this.addScrollListener();
            }); // @bkimball: This was added for Dylan Schulte, 9.18.2017 4:14PM EST, you're welcome!
        }, function (err) {
            _this.hasError = _this.term && _this.term.length !== 0;
            _this.isLoading = false;
            _this.lastPage = true;
            if (_this.term && _this.term.length !== 0) {
                console.error(err); // tslint:disable-lineno
            }
            _this.ref.markForCheck();
        });
    };
    /**
     * @param {?} term
     * @param {?=} mode
     * @return {?}
     */
    BasePickerResults.prototype.search = /**
     * @param {?} term
     * @param {?=} mode
     * @return {?}
     */
    function (term, mode) {
        var _this = this;
        /** @type {?} */
        var options = this.config.options;
        return from(new Promise(function (resolve, reject) {
            // Check if there is match data
            if (options) {
                // Resolve the data
                if (Array.isArray(options)) {
                    _this.isStatic = true;
                    // Arrays are returned immediately
                    resolve(_this.structureArray(options));
                }
                else if (term && term.length >= (_this.config.minSearchLength || 1)) {
                    if ((options.hasOwnProperty('reject') && options.hasOwnProperty('resolve')) ||
                        Object.getPrototypeOf(options).hasOwnProperty('then')) {
                        _this.isStatic = false;
                        // Promises (ES6 or Deferred) are resolved whenever they resolve
                        options.then(_this.structureArray.bind(_this)).then(resolve, reject);
                    }
                    else if (typeof options === 'function') {
                        _this.isStatic = false;
                        // Promises (ES6 or Deferred) are resolved whenever they resolve
                        options(term, ++_this.page)
                            .then(_this.structureArray.bind(_this))
                            .then(resolve, reject);
                    }
                    else {
                        // All other kinds of data are rejected
                        reject('The data provided is not an array or a promise');
                        throw new Error('The data provided is not an array or a promise');
                    }
                }
                else {
                    if (_this.config.defaultOptions) {
                        _this.isStatic = false;
                        if (typeof _this.config.defaultOptions === 'function') {
                            /** @type {?} */
                            var defaultOptions = _this.config.defaultOptions(term, ++_this.page);
                            if (Object.getPrototypeOf(defaultOptions).hasOwnProperty('then')) {
                                defaultOptions.then(_this.structureArray.bind(_this)).then(resolve, reject);
                            }
                            else {
                                resolve(_this.structureArray(defaultOptions));
                            }
                        }
                        else {
                            resolve(_this.structureArray(_this.config.defaultOptions));
                        }
                    }
                    else {
                        // No search term gets rejected
                        reject('No search term');
                    }
                }
            }
            else {
                // No data gets rejected
                reject('error');
            }
        }));
    };
    /**
     * @name structureArray
     * @param collection - the data once getData resolves it
     *
     * @description This function structures an array of nodes into an array of objects with a
     * 'name' field by default.
     */
    /**
     * \@name structureArray
     * \@description This function structures an array of nodes into an array of objects with a
     * 'name' field by default.
     * @param {?} collection - the data once getData resolves it
     *
     * @return {?}
     */
    BasePickerResults.prototype.structureArray = /**
     * \@name structureArray
     * \@description This function structures an array of nodes into an array of objects with a
     * 'name' field by default.
     * @param {?} collection - the data once getData resolves it
     *
     * @return {?}
     */
    function (collection) {
        var _this = this;
        /** @type {?} */
        var dataArray = collection.data ? collection.data : collection;
        if (dataArray && (typeof dataArray[0] === 'string' || typeof dataArray[0] === 'number')) {
            return collection.map(function (item) {
                return {
                    value: item,
                    label: item,
                };
            });
        }
        return dataArray.map(function (data) {
            /** @type {?} */
            var value = _this.config.field ? data[_this.config.field] : data.value || data;
            if (_this.config.valueFormat) {
                value = Helpers.interpolate(_this.config.valueFormat, data);
            }
            /** @type {?} */
            var label = _this.config.format ? Helpers.interpolate(_this.config.format, data) : data.label || String(value);
            return { value: value, label: label, data: data };
        });
    };
    /**
     * @name filterData=
     * @param matches - Collection of objects=
     *
     * @description This function loops through the picker options and creates a filtered list of objects that contain
     * the newSearch.
     */
    /**
     * \@name filterData=
     * \@description This function loops through the picker options and creates a filtered list of objects that contain
     * the newSearch.
     * @param {?} matches - Collection of objects=
     *
     * @return {?}
     */
    BasePickerResults.prototype.filterData = /**
     * \@name filterData=
     * \@description This function loops through the picker options and creates a filtered list of objects that contain
     * the newSearch.
     * @param {?} matches - Collection of objects=
     *
     * @return {?}
     */
    function (matches) {
        var _this = this;
        if (this.term && matches) {
            return matches.filter(function (match) {
                return ~String(match.label)
                    .toLowerCase()
                    .indexOf(_this.term.toLowerCase());
            });
        }
        // Show no recent results template
        return matches;
    };
    /**
     * @name selectActiveMatch
     *
     * @description This function is called when the user presses the enter key to call the selectMatch method.
     */
    /**
     * \@name selectActiveMatch
     *
     * \@description This function is called when the user presses the enter key to call the selectMatch method.
     * @return {?}
     */
    BasePickerResults.prototype.selectActiveMatch = /**
     * \@name selectActiveMatch
     *
     * \@description This function is called when the user presses the enter key to call the selectMatch method.
     * @return {?}
     */
    function () {
        this.selectMatch();
    };
    /**
     * @name prevActiveMatch
     *
     * @description This function sets activeMatch to the match before the current node.
     */
    /**
     * \@name prevActiveMatch
     *
     * \@description This function sets activeMatch to the match before the current node.
     * @return {?}
     */
    BasePickerResults.prototype.prevActiveMatch = /**
     * \@name prevActiveMatch
     *
     * \@description This function sets activeMatch to the match before the current node.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var index = this.matches.indexOf(this.activeMatch);
        this.activeMatch = this.matches[index - 1 < 0 ? this.matches.length - 1 : index - 1];
        this.scrollToActive();
        this.ref.markForCheck();
    };
    /**
     * @name nextActiveMatch
     *
     * @description This function sets activeMatch to the match after the current node.
     */
    /**
     * \@name nextActiveMatch
     *
     * \@description This function sets activeMatch to the match after the current node.
     * @return {?}
     */
    BasePickerResults.prototype.nextActiveMatch = /**
     * \@name nextActiveMatch
     *
     * \@description This function sets activeMatch to the match after the current node.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var index = this.matches.indexOf(this.activeMatch);
        this.activeMatch = this.matches[index + 1 > this.matches.length - 1 ? 0 : index + 1];
        this.scrollToActive();
        this.ref.markForCheck();
    };
    /**
     * @return {?}
     */
    BasePickerResults.prototype.getListElement = /**
     * @return {?}
     */
    function () {
        return this.element.nativeElement;
    };
    /**
     * @return {?}
     */
    BasePickerResults.prototype.getChildrenOfListElement = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var children = [];
        if (this.getListElement()) {
            children = this.getListElement().children;
        }
        return children;
    };
    /**
     * @return {?}
     */
    BasePickerResults.prototype.scrollToActive = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var list = this.getListElement();
        /** @type {?} */
        var items = this.getChildrenOfListElement();
        /** @type {?} */
        var index = this.matches.indexOf(this.activeMatch);
        /** @type {?} */
        var item = items[index];
        if (item) {
            list.scrollTop = item.offsetTop;
        }
    };
    /**
     * @name selectActive
     * @param match
     *
     * @description
     */
    /**
     * \@name selectActive
     * \@description
     * @param {?} match
     *
     * @return {?}
     */
    BasePickerResults.prototype.selectActive = /**
     * \@name selectActive
     * \@description
     * @param {?} match
     *
     * @return {?}
     */
    function (match) {
        this.activeMatch = match;
    };
    /**
     * @name isActive
     * @param match
     *
     * @description
     */
    /**
     * \@name isActive
     * \@description
     * @param {?} match
     *
     * @return {?}
     */
    BasePickerResults.prototype.isActive = /**
     * \@name isActive
     * \@description
     * @param {?} match
     *
     * @return {?}
     */
    function (match) {
        return this.activeMatch === match;
    };
    /**
     * @name selectMatch
     * @param event
     * @param item
     *
     * @description
     */
    /**
     * \@name selectMatch
     * \@description
     * @param {?=} event
     * @param {?=} item
     *
     * @return {?}
     */
    BasePickerResults.prototype.selectMatch = /**
     * \@name selectMatch
     * \@description
     * @param {?=} event
     * @param {?=} item
     *
     * @return {?}
     */
    function (event, item) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        /** @type {?} */
        var selected = this.activeMatch;
        if (selected && this.parent) {
            this.parent.value = selected;
            this.selectingMatches = true;
            if (this.parent.closeOnSelect) {
                this.parent.hideResults();
                this.selectingMatches = false;
            }
        }
        this.ref.markForCheck();
        return false;
    };
    /**
     * @name escapeRegexp
     * @param queryToEscape
     *
     * @description This function captures the whole query string and replace it with the string that will be used to
     * match.
     */
    /**
     * \@name escapeRegexp
     * \@description This function captures the whole query string and replace it with the string that will be used to
     * match.
     * @param {?} queryToEscape
     *
     * @return {?}
     */
    BasePickerResults.prototype.escapeRegexp = /**
     * \@name escapeRegexp
     * \@description This function captures the whole query string and replace it with the string that will be used to
     * match.
     * @param {?} queryToEscape
     *
     * @return {?}
     */
    function (queryToEscape) {
        // Ex: if the capture is "a" the result will be \a
        return queryToEscape.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
    };
    /**
     * @name highlight
     * @param match
     * @param query
     *
     * @description This function should return a <strong>-tag wrapped HTML string.
     */
    /**
     * \@name highlight
     * \@description This function should return a <strong>-tag wrapped HTML string.
     * @param {?} match
     * @param {?} query
     *
     * @return {?}
     */
    BasePickerResults.prototype.highlight = /**
     * \@name highlight
     * \@description This function should return a <strong>-tag wrapped HTML string.
     * @param {?} match
     * @param {?} query
     *
     * @return {?}
     */
    function (match, query$$1) {
        // Replaces the capture string with a the same string inside of a "strong" tag
        return query$$1 ? match.replace(new RegExp(this.escapeRegexp(query$$1.trim()), 'gi'), '<strong>$&</strong>') : match;
    };
    /**
     * @param {?} match
     * @return {?}
     */
    BasePickerResults.prototype.preselected = /**
     * @param {?} match
     * @return {?}
     */
    function (match) {
        return (this.selected.findIndex(function (item) {
            /** @type {?} */
            var isPreselected = false;
            if (item && item.value && match && match.value) {
                if (item.value.id && match.value.id) {
                    isPreselected = item.value.id === match.value.id;
                }
                else {
                    isPreselected = item.value === match.value;
                }
            }
            return isPreselected;
        }) !== -1);
    };
    BasePickerResults.propDecorators = {
        matches: [{ type: Input }]
    };
    return BasePickerResults;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PickerResults = /** @class */ (function (_super) {
    __extends(PickerResults, _super);
    function PickerResults(element, labels, ref) {
        var _this = _super.call(this, element, ref) || this;
        _this.labels = labels;
        return _this;
    }
    /**
     * @return {?}
     */
    PickerResults.prototype.getListElement = /**
     * @return {?}
     */
    function () {
        return this.element.nativeElement.querySelector('novo-list');
    };
    PickerResults.decorators = [
        { type: Component, args: [{
                    selector: 'picker-results',
                    host: {
                        class: 'active',
                    },
                    template: "\n        <novo-list *ngIf=\"matches.length > 0\" direction=\"vertical\">\n            <novo-list-item\n                *ngFor=\"let match of matches\"\n                (click)=\"selectMatch($event)\"\n                [class.active]=\"match === activeMatch\"\n                (mouseenter)=\"selectActive(match)\"\n                [class.disabled]=\"preselected(match)\">\n                <item-content>\n                    <span [innerHtml]=\"highlight(match.label, term)\"></span>\n                </item-content>\n            </novo-list-item>\n            <novo-loading *ngIf=\"isLoading && matches.length > 0\" theme=\"line\"></novo-loading>\n        </novo-list>\n        <div class=\"picker-loader\" *ngIf=\"isLoading && matches.length === 0\">\n            <novo-loading theme=\"line\"></novo-loading>\n        </div>\n        <p class=\"picker-error\" *ngIf=\"hasError\">{{ labels.pickerError }}</p>\n        <p class=\"picker-null-results\" *ngIf=\"!isLoading && !matches.length && !hasError\">{{ labels.pickerEmpty }}</p>\n    "
                }] }
    ];
    /** @nocollapse */
    PickerResults.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NovoLabelService },
        { type: ChangeDetectorRef }
    ]; };
    return PickerResults;
}(BasePickerResults));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var QuickNoteResults = /** @class */ (function (_super) {
    __extends(QuickNoteResults, _super);
    function QuickNoteResults(element, labels, ref) {
        var _this = _super.call(this, element, labels, ref) || this;
        _this.labels = labels;
        // Mode that the quick note is in for tagging
        _this.taggingMode = '';
        return _this;
    }
    Object.defineProperty(QuickNoteResults.prototype, "term", {
        get: /**
         * @return {?}
         */
        function () {
            return this._term;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            this._term = value.searchTerm;
            this.taggingMode = value.taggingMode;
            this.hasError = false;
            this.isLoading = true;
            this.search(value, this.taggingMode).subscribe(function (results) {
                _this.matches = _this.isStatic ? _this.filterData(results) : results;
                _this.isLoading = false;
            }, function () {
                _this.hasError = true;
                _this.isLoading = false;
            });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} term
     * @param {?} taggingMode
     * @return {?}
     */
    QuickNoteResults.prototype.search = /**
     * @param {?} term
     * @param {?} taggingMode
     * @return {?}
     */
    function (term, taggingMode) {
        var _this = this;
        /** @type {?} */
        var searchCall = this.config.options[taggingMode];
        return from(new Promise(function (resolve, reject) {
            // Check if there is match data
            if (searchCall) {
                // Resolve the data
                if (Array.isArray(searchCall)) {
                    _this.isStatic = true;
                    // Arrays are returned immediately
                    resolve(_this.structureArray(searchCall));
                }
                else if ((searchCall.hasOwnProperty('reject') && searchCall.hasOwnProperty('resolve')) ||
                    Object.getPrototypeOf(searchCall).hasOwnProperty('then')) {
                    _this.isStatic = false;
                    // Promises (ES6 or Deferred) are resolved whenever they resolve
                    searchCall.then(_this.structureArray.bind(_this)).then(resolve, reject);
                }
                else if (typeof searchCall === 'function') {
                    _this.isStatic = false;
                    // Promises (ES6 or Deferred) are resolved whenever they resolve
                    searchCall(term)
                        .then(_this.structureArray.bind(_this))
                        .then(resolve, reject);
                }
                else {
                    // All other kinds of data are rejected
                    reject('The data provided is not an array or a promise');
                    throw new Error('The data provided is not an array or a promise');
                }
            }
            else {
                // No data gets rejected
                reject('error');
            }
        }));
    };
    /**
     * @name structureArray
     * @param collection - the data once getData resolves it
     *
     * @description This function structures an array of nodes into an array of objects with a
     * 'name' field by default.
     */
    /**
     * \@name structureArray
     * \@description This function structures an array of nodes into an array of objects with a
     * 'name' field by default.
     * @param {?} collection - the data once getData resolves it
     *
     * @return {?}
     */
    QuickNoteResults.prototype.structureArray = /**
     * \@name structureArray
     * \@description This function structures an array of nodes into an array of objects with a
     * 'name' field by default.
     * @param {?} collection - the data once getData resolves it
     *
     * @return {?}
     */
    function (collection) {
        var _this = this;
        if (collection && (typeof collection[0] === 'string' || typeof collection[0] === 'number')) {
            return collection.map(function (item) {
                return {
                    value: item,
                    label: item,
                };
            });
        }
        return collection.map(function (data) {
            /** @type {?} */
            var value = _this.config.field ? data[_this.config.field[_this.taggingMode]] : data.value || data;
            /** @type {?} */
            var label = _this.config.format ? Helpers.interpolate(_this.config.format[_this.taggingMode], data) : data.label || String(value);
            return { value: value, label: label, data: data };
        });
    };
    /**
     * @name selectMatch
     * @param event
     *
     * @description
     */
    /**
     * \@name selectMatch
     * \@description
     * @param {?} event
     *
     * @return {?}
     */
    QuickNoteResults.prototype.selectMatch = /**
     * \@name selectMatch
     * \@description
     * @param {?} event
     *
     * @return {?}
     */
    function (event) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        /** @type {?} */
        var selected = this.activeMatch;
        if (selected) {
            this.parent.onSelected(this.taggingMode, selected);
            this.parent.hideResults();
        }
        return false;
    };
    QuickNoteResults.decorators = [
        { type: Component, args: [{
                    selector: 'quick-note-results',
                    host: {
                        class: 'active',
                    },
                    template: "\n        <novo-loading theme=\"line\" *ngIf=\"isLoading && !matches.length\"></novo-loading>\n        <novo-list *ngIf=\"matches.length > 0\">\n            <novo-list-item\n                *ngFor=\"let match of matches\"\n                (click)=\"selectMatch($event)\"\n                [class.active]=\"match===activeMatch\"\n                (mouseenter)=\"selectActive(match)\">\n                <item-content>\n                    <p [innerHtml]=\"highlight(match.label, term)\"></p>\n                </item-content>\n            </novo-list-item>\n        </novo-list>\n        <p class=\"picker-error\" *ngIf=\"hasError\">{{ labels.quickNoteError }}</p>\n        <p class=\"picker-null\" *ngIf=\"!isLoading && !matches.length && !hasError\">{{ labels.quickNoteEmpty }}</p>\n    "
                }] }
    ];
    /** @nocollapse */
    QuickNoteResults.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NovoLabelService },
        { type: ChangeDetectorRef }
    ]; };
    return QuickNoteResults;
}(PickerResults));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Value accessor for the component (supports ngModel)
/** @type {?} */
var QUICK_NOTE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return QuickNoteElement; }),
    multi: true,
};
var QuickNoteElement = /** @class */ (function (_super) {
    __extends(QuickNoteElement, _super);
    function QuickNoteElement(zone, element, componentUtils) {
        var _this = _super.call(this, element) || this;
        _this.zone = zone;
        _this.componentUtils = componentUtils;
        _this.startupFocus = false;
        // Emitter for selects
        _this.focus = new EventEmitter();
        _this.blur = new EventEmitter();
        _this.change = new EventEmitter();
        _this.placeholderVisible = false;
        _this._placeholderElement = null;
        // in pixels - configured by stylesheet
        _this.onModelChange = function () { };
        _this.onModelTouched = function () { };
        // Bind to the active change event from the OutsideClick
        _this.onActiveChange.subscribe(function (active) {
            if (!active) {
                setTimeout(function () {
                    _this.hideResults();
                });
            }
        });
        return _this;
    }
    /**
     * @return {?}
     */
    QuickNoteElement.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // Make sure we have a proper config
        if (!this.config) {
            throw new Error('No config set for QuickNote!');
        }
        // Make sure that we have triggers
        if (!this.config.triggers) {
            throw new Error('QuickNote config must supply triggers!');
        }
        // Make sure that we have options
        if (!this.config.options) {
            throw new Error('QuickNote config must supply options!');
        }
        // Allow for callers to use a custom results template class in the config
        this.resultsComponent = this.config.resultsTemplate || QuickNoteResults;
    };
    /**
     * @return {?}
     */
    QuickNoteElement.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // Tear down the CKEditor instance
        if (this.ckeInstance) {
            this.ckeInstance.focusManager.blur(true); // Remove focus from editor
            setTimeout(function () {
                _this.ckeInstance.removeAllListeners();
                CKEDITOR.instances[_this.ckeInstance.name].destroy();
                _this.ckeInstance.destroy();
                _this.ckeInstance = null;
            });
        }
    };
    /**
     * Connect to key/mouse events from CKEditor after the editor has been initialized
     */
    /**
     * Connect to key/mouse events from CKEditor after the editor has been initialized
     * @return {?}
     */
    QuickNoteElement.prototype.ngAfterViewInit = /**
     * Connect to key/mouse events from CKEditor after the editor has been initialized
     * @return {?}
     */
    function () {
        var _this = this;
        if (!CKEDITOR) {
            console.error('Make sure to include CKEditor sources in your dependencies!');
            return;
        }
        // Replace the textarea with an instance of CKEditor
        this.ckeInstance = CKEDITOR.replace(this.host.nativeElement, this.getCKEditorConfig());
        // Set initial value of the note in the editor
        this.writeValue(this.model);
        // Connect to the key event in CKEditor for showing results dropdown
        this.ckeInstance.on('key', function (event) {
            if (!_this.onKey(event.data.domEvent.$)) {
                event.cancel();
            }
        });
        // Connect to the change event in CKEditor for debouncing user modifications
        this.ckeInstance.on('change', function () {
            // Debounce update
            if (_this.debounceTimeout) {
                clearTimeout(_this.debounceTimeout);
            }
            _this.debounceTimeout = setTimeout(function () {
                // Run within the context of this angular element since we don't need to cancel event
                _this.zone.run(function () {
                    _this.onValueChange();
                });
                _this.debounceTimeout = null;
            }, 250);
        });
        // Propagate blur events from CKEditor to the Element's listeners
        this.ckeInstance.on('blur', function (event) {
            _this.showPlaceholder();
            _this.blur.emit(event);
        });
        // Propagate blur events from CKEditor to the Element's listeners
        this.ckeInstance.on('focus', function (event) {
            _this.hidePlaceholder();
            _this.focus.emit(event);
        });
        // Show placeholder if the note is empty, after the editor is instantiated
        this.ckeInstance.on('instanceReady', function (event) {
            _this.showPlaceholder();
            // Set editor to readOnly
            if (_this.config.readOnly) {
                _this.ckeInstance.setReadOnly(_this.config.readOnly);
            }
        });
    };
    // Set touched on blur
    // Set touched on blur
    /**
     * @param {?=} event
     * @return {?}
     */
    QuickNoteElement.prototype.onTouched = 
    // Set touched on blur
    /**
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        this.onModelTouched();
    };
    /**
     * Handles setting the model and the view from the outside caller or the user's typing
     *
     * @param model A model that has a note (html content) and references (array of objects)
     */
    /**
     * Handles setting the model and the view from the outside caller or the user's typing
     *
     * @param {?} model A model that has a note (html content) and references (array of objects)
     * @return {?}
     */
    QuickNoteElement.prototype.writeValue = /**
     * Handles setting the model and the view from the outside caller or the user's typing
     *
     * @param {?} model A model that has a note (html content) and references (array of objects)
     * @return {?}
     */
    function (model) {
        // Set value of the model
        if (model && (model.references || model.note)) {
            this.model = {
                note: model.note || '',
                references: model.references || {},
            };
        }
        else {
            this.model = {
                note: model,
                references: {},
            };
        }
        // Set the note html value in the editor
        if (this.ckeInstance) {
            this.ckeInstance.setData(this.model.note);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    QuickNoteElement.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    QuickNoteElement.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelTouched = fn;
    };
    /**
     * If a renderer is not provided, the QuickNote will default to using this one, an anchor tag with no href
     */
    /**
     * If a renderer is not provided, the QuickNote will default to using this one, an anchor tag with no href
     * @private
     * @param {?} symbol
     * @param {?} item
     * @return {?}
     */
    QuickNoteElement.defaultRenderer = /**
     * If a renderer is not provided, the QuickNote will default to using this one, an anchor tag with no href
     * @private
     * @param {?} symbol
     * @param {?} item
     * @return {?}
     */
    function (symbol, item) {
        return "<a>" + symbol + item.label + "</a>";
    };
    /**
     * Returns the renderer for a given tagging mode if it exists in the config, otherwise the default.
     */
    /**
     * Returns the renderer for a given tagging mode if it exists in the config, otherwise the default.
     * @private
     * @param {?} taggingMode
     * @return {?}
     */
    QuickNoteElement.prototype.getRenderer = /**
     * Returns the renderer for a given tagging mode if it exists in the config, otherwise the default.
     * @private
     * @param {?} taggingMode
     * @return {?}
     */
    function (taggingMode) {
        return this.config.renderer ? this.config.renderer[taggingMode] : QuickNoteElement.defaultRenderer;
    };
    /**
     * Called every time a keystroke is made in the editor. Listens for particular keys (e.g. UP arrow, ESC, etc.)
     * to handle certain behaviors of the picker.
     *
     * Runs within the context of the CKEditor, so actions that affect the view have to be run back inside of the
     * Angular zone of this class.
     *
     * @param event The key press event
     * @return true to allow the event to occur, false to cancel the event
     */
    /**
     * Called every time a keystroke is made in the editor. Listens for particular keys (e.g. UP arrow, ESC, etc.)
     * to handle certain behaviors of the picker.
     *
     * Runs within the context of the CKEditor, so actions that affect the view have to be run back inside of the
     * Angular zone of this class.
     *
     * @private
     * @param {?} event The key press event
     * @return {?} true to allow the event to occur, false to cancel the event
     */
    QuickNoteElement.prototype.onKey = /**
     * Called every time a keystroke is made in the editor. Listens for particular keys (e.g. UP arrow, ESC, etc.)
     * to handle certain behaviors of the picker.
     *
     * Runs within the context of the CKEditor, so actions that affect the view have to be run back inside of the
     * Angular zone of this class.
     *
     * @private
     * @param {?} event The key press event
     * @return {?} true to allow the event to occur, false to cancel the event
     */
    function (event) {
        var _this = this;
        if (event.key) {
            if (this.quickNoteResults) {
                // Hide results on escape key
                if (event.keyCode === KeyCodes.ESC) {
                    this.zone.run(function () {
                        _this.hideResults();
                    });
                    return false;
                }
                // Navigation inside the results
                if (event.keyCode === KeyCodes.UP) {
                    this.zone.run(function () {
                        _this.quickNoteResults.instance.prevActiveMatch();
                    });
                    return false;
                }
                if (event.keyCode === KeyCodes.DOWN) {
                    this.zone.run(function () {
                        _this.quickNoteResults.instance.nextActiveMatch();
                    });
                    return false;
                }
                if (event.keyCode === KeyCodes.ENTER) {
                    this.zone.run(function () {
                        _this.quickNoteResults.instance.selectActiveMatch();
                    });
                    return false;
                }
            }
            else {
                // Loop through all triggers and turn on tagging mode if the user just pressed a trigger character
                /** @type {?} */
                var triggers_1 = this.config.triggers || {};
                Object.keys(triggers_1).forEach(function (key) {
                    /** @type {?} */
                    var trigger$$1 = triggers_1[key] || {};
                    if (event.key === trigger$$1) {
                        _this.isTagging = true;
                        _this.taggingMode = key;
                    }
                });
            }
        }
        return true;
    };
    /**
     * Debounced method that is run in the proper Angular context when the user has modified the CKEditor.
     * After the value has been updated in CKEditor, this will propagate that change to the model and listeners.
     */
    /**
     * Debounced method that is run in the proper Angular context when the user has modified the CKEditor.
     * After the value has been updated in CKEditor, this will propagate that change to the model and listeners.
     * @private
     * @return {?}
     */
    QuickNoteElement.prototype.onValueChange = /**
     * Debounced method that is run in the proper Angular context when the user has modified the CKEditor.
     * After the value has been updated in CKEditor, this will propagate that change to the model and listeners.
     * @private
     * @return {?}
     */
    function () {
        // Get the html text in CKEditor
        /** @type {?} */
        var value = this.ckeInstance.getData();
        // Remove empty 'ZERO WIDTH SPACE' characters that can get added erroneously by the editor
        /** @type {?} */
        var regex = new RegExp(String.fromCharCode(8203), 'g');
        value = value.replace(regex, '');
        // Make sure that any references in the model are still valid
        this.validateReferences();
        // Possibly show results if the user has entered a search term
        this.showResults();
        // Propagate change to ngModel for form validation, and send null if the note is empty
        /** @type {?} */
        var newModel = null;
        if (value) {
            newModel = {
                note: value,
                references: this.model.references,
            };
        }
        // Inform listeners to the ngModel change event that something has changed
        this.onModelChange(newModel);
        // Inform listeners of the `@Output() change` event that the model has been updated
        this.change.emit(newModel);
        // Inform listeners to the ngModel touched event that something has changed
        this.onTouched();
    };
    /**
     * Creates an instance of the results (called popup) and adds all the bindings to that instance.
     */
    /**
     * Creates an instance of the results (called popup) and adds all the bindings to that instance.
     * @private
     * @return {?}
     */
    QuickNoteElement.prototype.showResults = /**
     * Creates an instance of the results (called popup) and adds all the bindings to that instance.
     * @private
     * @return {?}
     */
    function () {
        if (this.isTagging) {
            /** @type {?} */
            var searchTerm = this.getSearchTerm();
            if (searchTerm.length) {
                // Update Matches
                if (this.quickNoteResults) {
                    // Update existing list
                    this.quickNoteResults.instance.term = {
                        searchTerm: searchTerm,
                        taggingMode: this.taggingMode,
                    };
                }
                else {
                    // Create the results DOM element
                    this.quickNoteResults = this.componentUtils.appendNextToLocation(this.resultsComponent, this.results);
                    this.quickNoteResults.instance.parent = this;
                    this.quickNoteResults.instance.config = this.config;
                    this.quickNoteResults.instance.term = {
                        searchTerm: searchTerm,
                        taggingMode: this.taggingMode,
                    };
                    this.positionResultsDropdown();
                }
            }
            else if (this.quickNoteResults) {
                this.quickNoteResults.destroy();
                this.quickNoteResults = null;
            }
            // Tell the OutsideClick base class to start listening for an outside clicks
            this.toggleActive(null, true);
        }
    };
    /**
     * Deletes the picker results from the DOM.
     */
    /**
     * Deletes the picker results from the DOM.
     * @private
     * @return {?}
     */
    QuickNoteElement.prototype.hideResults = /**
     * Deletes the picker results from the DOM.
     * @private
     * @return {?}
     */
    function () {
        this.isTagging = false;
        if (this.quickNoteResults) {
            this.quickNoteResults.destroy();
            this.quickNoteResults = null;
        }
    };
    /**
     * Handles the selection from the QuickNoteResults Component. Called by the QuickNoteResults component on it's
     * parent (this element).
     *
     * @param taggingMode - type of tags we are looking for
     * @param selected - selected object from the picker that has a label and value
     */
    /**
     * Handles the selection from the QuickNoteResults Component. Called by the QuickNoteResults component on it's
     * parent (this element).
     *
     * @private
     * @param {?} taggingMode - type of tags we are looking for
     * @param {?} selected - selected object from the picker that has a label and value
     * @return {?}
     */
    QuickNoteElement.prototype.onSelected = /**
     * Handles the selection from the QuickNoteResults Component. Called by the QuickNoteResults component on it's
     * parent (this element).
     *
     * @private
     * @param {?} taggingMode - type of tags we are looking for
     * @param {?} selected - selected object from the picker that has a label and value
     * @return {?}
     */
    function (taggingMode, selected) {
        // Turn off tagging
        this.isTagging = false;
        // Replace searchTerm with link
        /** @type {?} */
        var symbol = this.config.triggers[taggingMode];
        /** @type {?} */
        var renderer = this.getRenderer(taggingMode);
        /** @type {?} */
        var renderedText = renderer(symbol, selected);
        this.replaceWordAtCursor(renderedText);
        // Add the new reference, if it doesn't already exist
        this.model.references = this.model.references || {};
        this.model.references[taggingMode] = this.model.references[taggingMode] || [];
        /** @type {?} */
        var matchingItems = this.model.references[taggingMode].filter(function (item) { return JSON.stringify(item) === JSON.stringify(selected); });
        if (matchingItems.length === 0) {
            this.model.references[taggingMode].push(selected);
        }
        // Update the quick note with the changes due to the user's selection of an item in the dropdown
        this.onValueChange();
    };
    /**
     * Convenience method that gets the current word that the cursor is on, minus the tag.
     * Also, trims any whitespace before/after the term to aid in searching.
     */
    /**
     * Convenience method that gets the current word that the cursor is on, minus the tag.
     * Also, trims any whitespace before/after the term to aid in searching.
     * @private
     * @return {?}
     */
    QuickNoteElement.prototype.getSearchTerm = /**
     * Convenience method that gets the current word that the cursor is on, minus the tag.
     * Also, trims any whitespace before/after the term to aid in searching.
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var word = this.getWordAtCursor().trim();
        if (this.isTagging) {
            /** @type {?} */
            var symbol = this.config.triggers[this.taggingMode];
            if (!word.includes(symbol)) {
                this.hideResults();
                return '';
            }
            word = word.slice(word.indexOf(symbol) + symbol.length);
        }
        return word;
    };
    /**
     * Gets the current word that the cursor is on CKEditor. Current word starts at the beginning of the line or a
     * tag character if we are in tagging mode. Current word ends at the end of the line or an empty space.
     *
     * @returns plain text string (removes all html formatting)
     */
    /**
     * Gets the current word that the cursor is on CKEditor. Current word starts at the beginning of the line or a
     * tag character if we are in tagging mode. Current word ends at the end of the line or an empty space.
     *
     * @private
     * @return {?} plain text string (removes all html formatting)
     */
    QuickNoteElement.prototype.getWordAtCursor = /**
     * Gets the current word that the cursor is on CKEditor. Current word starts at the beginning of the line or a
     * tag character if we are in tagging mode. Current word ends at the end of the line or an empty space.
     *
     * @private
     * @return {?} plain text string (removes all html formatting)
     */
    function () {
        /** @type {?} */
        var range = this.ckeInstance.getSelection().getRanges()[0];
        /** @type {?} */
        var start = range.startContainer;
        if (start.type === CKEDITOR.NODE_TEXT && range.startOffset) {
            /** @type {?} */
            var text = start.getText();
            /** @type {?} */
            var symbol = this.config.triggers[this.taggingMode];
            /** @type {?} */
            var wordStart = text.lastIndexOf(symbol, range.startOffset - 1);
            if (wordStart > 0) {
                /** @type {?} */
                var beforeSymbol = text.charAt(wordStart - 1);
                // We don't want to trigger the lookup call unless the symbol was preceded by whitespace
                if (beforeSymbol !== '\u200B' && /\S/.test(beforeSymbol)) {
                    return '';
                }
            }
            else if (start.hasPrevious() && /\S$/.test(start.getPrevious().getText())) {
                // When wordStart is <= 0, we need to check the previous node's text to see if it ended with whitespace or not
                return '';
            }
            /** @type {?} */
            var wordEnd = text.indexOf(' ', range.startOffset + 1);
            if (wordStart === -1) {
                wordStart = 0;
            }
            if (wordEnd === -1) {
                wordEnd = text.length;
            }
            return text.substring(wordStart, wordEnd);
        }
        // Selection starts at the 0 index of the text node or there's no previous text node in contents
        return '';
    };
    /**
     * Replaces the word that the user is on with the given html.
     *
     * CKEditor gives us access to the current line of html in the editor, so we replace the content of
     * the line, replacing only the current word.
     */
    /**
     * Replaces the word that the user is on with the given html.
     *
     * CKEditor gives us access to the current line of html in the editor, so we replace the content of
     * the line, replacing only the current word.
     * @private
     * @param {?} newWord
     * @return {?}
     */
    QuickNoteElement.prototype.replaceWordAtCursor = /**
     * Replaces the word that the user is on with the given html.
     *
     * CKEditor gives us access to the current line of html in the editor, so we replace the content of
     * the line, replacing only the current word.
     * @private
     * @param {?} newWord
     * @return {?}
     */
    function (newWord) {
        /** @type {?} */
        var originalWord = this.getWordAtCursor().trim();
        /** @type {?} */
        var range = this.ckeInstance.getSelection().getRanges()[0];
        /** @type {?} */
        var start = range.startContainer;
        /** @type {?} */
        var parentNode = start.getParent();
        if (start.type === CKEDITOR.NODE_TEXT && parentNode) {
            /** @type {?} */
            var line = parentNode.getHtml();
            /** @type {?} */
            var index = line.lastIndexOf(originalWord);
            if (index >= 0) {
                // Add a space after the replaced word so that multiple references can be added back to back
                /** @type {?} */
                var newLine = line.substring(0, index) + newWord + ' ' + line.substring(index + originalWord.length);
                parentNode.setHtml(newLine);
                // Place selection at the end of the line
                range.moveToPosition(parentNode, CKEDITOR.POSITION_BEFORE_END);
                this.ckeInstance.getSelection().selectRanges([range]);
            }
        }
    };
    /**
     * Returns current references, minus any from the model that have been removed from the editor.
     */
    /**
     * Returns current references, minus any from the model that have been removed from the editor.
     * @private
     * @return {?}
     */
    QuickNoteElement.prototype.validateReferences = /**
     * Returns current references, minus any from the model that have been removed from the editor.
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var html = this.ckeInstance.document.getBody().getHtml();
        // CKEditor stopped supporting the config.forceSimpleAmpersand setting, so we have to convert '&amp;' to '&'
        // when we pull html from the editor - see: https://dev.ckeditor.com/ticket/13723
        /** @type {?} */
        var ampRegex = new RegExp('&amp;', 'g');
        html = html.replace(ampRegex, '&');
        Object.keys(this.model.references).forEach(function (taggingMode) {
            /** @type {?} */
            var array = _this.model.references[taggingMode] || [];
            /** @type {?} */
            var symbol = _this.config.triggers[taggingMode];
            /** @type {?} */
            var renderer = _this.getRenderer(taggingMode);
            _this.model.references[taggingMode] = array.filter(function (item) {
                /** @type {?} */
                var renderedText = renderer(symbol, item);
                return html.includes(renderedText);
            });
            // If no references, then delete the key
            if (_this.model.references[taggingMode].length === 0) {
                delete _this.model.references[taggingMode];
            }
        });
    };
    /**
     * Configures the CKEditor for QuickNote functionality.
     *
     * Sets the height of the CKEditor dynamically to the height of the wrapper upon initialization.
     * Removes the toolbar on the bottom and configures a slimmed down version of the toolbar.
     * Removes plugins and turns off setting to allow browser based spell checking.
     */
    /**
     * Configures the CKEditor for QuickNote functionality.
     *
     * Sets the height of the CKEditor dynamically to the height of the wrapper upon initialization.
     * Removes the toolbar on the bottom and configures a slimmed down version of the toolbar.
     * Removes plugins and turns off setting to allow browser based spell checking.
     * @private
     * @return {?}
     */
    QuickNoteElement.prototype.getCKEditorConfig = /**
     * Configures the CKEditor for QuickNote functionality.
     *
     * Sets the height of the CKEditor dynamically to the height of the wrapper upon initialization.
     * Removes the toolbar on the bottom and configures a slimmed down version of the toolbar.
     * Removes plugins and turns off setting to allow browser based spell checking.
     * @private
     * @return {?}
     */
    function () {
        // Use the height of the wrapper element to set the initial height of the editor, then
        // set it to 100% to allow the editor to resize using the grippy.
        /** @type {?} */
        var editorHeight = this.wrapper.nativeElement.clientHeight - QuickNoteElement.TOOLBAR_HEIGHT;
        this.wrapper.nativeElement.style.setProperty('height', '100%');
        return {
            enterMode: CKEDITOR.ENTER_BR,
            shiftEnterMode: CKEDITOR.ENTER_P,
            disableNativeSpellChecker: false,
            height: editorHeight,
            startupFocus: this.startupFocus,
            removePlugins: 'liststyle,tabletools,contextmenu',
            // allows browser based spell checking
            toolbar: [
                {
                    name: 'basicstyles',
                    items: [
                        'Styles',
                        'FontSize',
                        'Bold',
                        'Italic',
                        'Underline',
                        'TextColor',
                        '-',
                        'NumberedList',
                        'BulletedList',
                        'Outdent',
                        'Indent',
                        'Link',
                    ],
                },
            ],
        };
    };
    /**
     * Returns the current screen position of the cursor in CKEditor, accounting for any scrolling in the editor.
     */
    /**
     * Returns the current screen position of the cursor in CKEditor, accounting for any scrolling in the editor.
     * @private
     * @return {?}
     */
    QuickNoteElement.prototype.getCursorPosition = /**
     * Returns the current screen position of the cursor in CKEditor, accounting for any scrolling in the editor.
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var range = this.ckeInstance.getSelection().getRanges()[0];
        /** @type {?} */
        var parentElement = range.startContainer.$.parentElement;
        /** @type {?} */
        var editorElement = this.ckeInstance.editable().$;
        // Since the editor is a text node in the DOM that does not know about it's position, a temporary element has to
        // be inserted in order to locate the cursor position.
        /** @type {?} */
        var cursorElement = document.createElement('img');
        cursorElement.setAttribute('src', 'null');
        cursorElement.setAttribute('width', '0');
        cursorElement.setAttribute('height', '0');
        parentElement.appendChild(cursorElement);
        /** @type {?} */
        var cursorPosition = {
            top: cursorElement.offsetTop - editorElement.scrollTop,
            left: cursorElement.offsetLeft - editorElement.scrollLeft,
        };
        cursorElement.remove();
        return cursorPosition;
    };
    /**
     * Positions the results dropdown based on the location of the cursor in the text field
     */
    /**
     * Positions the results dropdown based on the location of the cursor in the text field
     * @private
     * @return {?}
     */
    QuickNoteElement.prototype.positionResultsDropdown = /**
     * Positions the results dropdown based on the location of the cursor in the text field
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var MIN_MARGIN_TOP = QuickNoteElement.TOOLBAR_HEIGHT * 2;
        /** @type {?} */
        var MAX_MARGIN_TOP = this.getContentHeight() + QuickNoteElement.TOOLBAR_HEIGHT;
        /** @type {?} */
        var cursorPosition = this.getCursorPosition();
        /** @type {?} */
        var marginTop = cursorPosition.top + QuickNoteElement.TOOLBAR_HEIGHT;
        // Check that the margin is within the visible bounds
        marginTop = Math.max(marginTop, MIN_MARGIN_TOP);
        marginTop = Math.min(marginTop, MAX_MARGIN_TOP);
        // Set the margin-top of the dropdown
        this.quickNoteResults.instance.element.nativeElement.style.setProperty('margin-top', marginTop + 'px');
    };
    /**
     * Returns the height in pixels of the content area - the text that the user has entered.
     */
    /**
     * Returns the height in pixels of the content area - the text that the user has entered.
     * @private
     * @return {?}
     */
    QuickNoteElement.prototype.getContentHeight = /**
     * Returns the height in pixels of the content area - the text that the user has entered.
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var contentHeight = 0;
        if (this.ckeInstance.ui &&
            this.ckeInstance.ui.contentsElement &&
            this.ckeInstance.ui.contentsElement.$ &&
            this.ckeInstance.ui.contentsElement.$.style) {
            /** @type {?} */
            var cssText = this.ckeInstance.ui.contentsElement.$.style.cssText;
            if (cssText.indexOf('height: ') !== -1) {
                /** @type {?} */
                var height = cssText.split('height: ')[1];
                height = height.split('px')[0];
                contentHeight = parseInt(height);
            }
        }
        return contentHeight;
    };
    /**
     * Show the placeholder text if the editor is empty
     */
    /**
     * Show the placeholder text if the editor is empty
     * @private
     * @return {?}
     */
    QuickNoteElement.prototype.showPlaceholder = /**
     * Show the placeholder text if the editor is empty
     * @private
     * @return {?}
     */
    function () {
        if (!this.ckeInstance.getData() && !this.startupFocus) {
            this.ckeInstance
                .editable()
                .getParent()
                .$.appendChild(this.placeholderElement);
            this.placeholderVisible = true;
        }
    };
    /**
     * Hide the placeholder text by removing the placeholder element from the DOM
     */
    /**
     * Hide the placeholder text by removing the placeholder element from the DOM
     * @private
     * @return {?}
     */
    QuickNoteElement.prototype.hidePlaceholder = /**
     * Hide the placeholder text by removing the placeholder element from the DOM
     * @private
     * @return {?}
     */
    function () {
        if (this.placeholderVisible) {
            this.ckeInstance
                .editable()
                .getParent()
                .$.removeChild(this.placeholderElement);
            this.placeholderVisible = false;
        }
    };
    Object.defineProperty(QuickNoteElement.prototype, "placeholderElement", {
        /**
         * Get or create the single placeholder object that is constructed only when needed.
         */
        get: /**
         * Get or create the single placeholder object that is constructed only when needed.
         * @private
         * @return {?}
         */
        function () {
            if (!this._placeholderElement) {
                this._placeholderElement = document.createElement('div');
                this._placeholderElement.className = 'placeholder';
                this._placeholderElement.style.cssText =
                    'margin: 20px; color: #AAAAAA; font-family: sans-serif; font-size: 13px; line-height: 20px; position: absolute; top: 0';
                this._placeholderElement.textContent = this.placeholder;
            }
            return this._placeholderElement;
        },
        enumerable: true,
        configurable: true
    });
    QuickNoteElement.TOOLBAR_HEIGHT = 40; // in pixels - configured by stylesheet
    QuickNoteElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-quick-note',
                    providers: [QUICK_NOTE_VALUE_ACCESSOR],
                    template: "\n        <div class=\"quick-note-wrapper\" #wrapper>\n            <textarea #host></textarea>\n            <span #results></span>\n        </div>\n    "
                }] }
    ];
    /** @nocollapse */
    QuickNoteElement.ctorParameters = function () { return [
        { type: NgZone },
        { type: ElementRef },
        { type: ComponentUtils }
    ]; };
    QuickNoteElement.propDecorators = {
        wrapper: [{ type: ViewChild, args: ['wrapper',] }],
        host: [{ type: ViewChild, args: ['host',] }],
        results: [{ type: ViewChild, args: ['results', { read: ViewContainerRef },] }],
        config: [{ type: Input }],
        startupFocus: [{ type: Input }],
        placeholder: [{ type: Input }],
        focus: [{ type: Output }],
        blur: [{ type: Output }],
        change: [{ type: Output }]
    };
    return QuickNoteElement;
}(OutsideClick));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoQuickNoteModule = /** @class */ (function () {
    function NovoQuickNoteModule() {
    }
    NovoQuickNoteModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, FormsModule, NovoLoadingModule, NovoListModule],
                    declarations: [QuickNoteElement, QuickNoteResults],
                    exports: [QuickNoteElement, QuickNoteResults],
                    entryComponents: [QuickNoteResults],
                },] }
    ];
    return NovoQuickNoteModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Value accessor for the component (supports ngModel)
/** @type {?} */
var RADIO_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NovoRadioElement; }),
    multi: true,
};
var NovoRadioGroup = /** @class */ (function () {
    function NovoRadioGroup() {
    }
    NovoRadioGroup.decorators = [
        { type: Component, args: [{
                    selector: 'novo-radio-group',
                    template: '<ng-content></ng-content>'
                }] }
    ];
    return NovoRadioGroup;
}());
var NovoRadioElement = /** @class */ (function () {
    function NovoRadioElement(ref) {
        this.ref = ref;
        this.button = false;
        this.theme = 'secondary';
        this.disabled = false;
        this.change = new EventEmitter();
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
    }
    /**
     * @param {?} event
     * @return {?}
     */
    NovoRadioElement.prototype.select = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        Helpers.swallowEvent(event);
        // Only change the checked state if this is a new radio, they are not toggle buttons
        if (!this.checked) {
            this.checked = !this.checked;
            this.change.emit(this.value);
            this.onModelChange(this.value);
            this.ref.markForCheck();
        }
    };
    /**
     * @param {?} model
     * @return {?}
     */
    NovoRadioElement.prototype.writeValue = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        this.model = model;
        this.ref.markForCheck();
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoRadioElement.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoRadioElement.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelTouched = fn;
    };
    /**
     * @param {?} disabled
     * @return {?}
     */
    NovoRadioElement.prototype.setDisabledState = /**
     * @param {?} disabled
     * @return {?}
     */
    function (disabled) {
        this.disabled = disabled;
    };
    NovoRadioElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-radio',
                    providers: [RADIO_VALUE_ACCESSOR],
                    template: "\n        <input [name]=\"name\" type=\"radio\" [checked]=\"checked\" [attr.id]=\"name\" (change)=\"select($event)\" [disabled]=\"disabled\">\n        <label [attr.for]=\"name\" (click)=\"select($event)\" [class.disabled]=\"disabled\">\n            <button *ngIf=\"button\" [ngClass]=\"{'unchecked': !checked, 'checked': checked, 'has-icon': !!icon}\" [theme]=\"theme\" [icon]=\"icon\">{{ label }}</button>\n            <div *ngIf=\"!button\">\n                <i [ngClass]=\"{'bhi-radio-empty': !checked, 'bhi-radio-filled': checked}\"></i>\n                {{ label }}\n                <ng-content></ng-content>\n            </div>\n        </label>\n    ",
                    host: {
                        '[class.vertical]': 'vertical',
                    }
                }] }
    ];
    /** @nocollapse */
    NovoRadioElement.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    NovoRadioElement.propDecorators = {
        name: [{ type: Input }],
        value: [{ type: Input }],
        checked: [{ type: Input }],
        vertical: [{ type: Input }],
        label: [{ type: Input }],
        button: [{ type: Input }],
        theme: [{ type: Input }],
        icon: [{ type: Input }],
        disabled: [{ type: Input }],
        change: [{ type: Output }]
    };
    return NovoRadioElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoRadioModule = /** @class */ (function () {
    function NovoRadioModule() {
    }
    NovoRadioModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, NovoButtonModule],
                    declarations: [NovoRadioElement, NovoRadioGroup],
                    exports: [NovoRadioElement, NovoRadioGroup],
                },] }
    ];
    return NovoRadioModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoOverlayTemplateComponent = /** @class */ (function () {
    function NovoOverlayTemplateComponent(overlay, viewContainerRef, zone, changeDetectorRef, document) {
        this.overlay = overlay;
        this.viewContainerRef = viewContainerRef;
        this.zone = zone;
        this.changeDetectorRef = changeDetectorRef;
        this.document = document;
        this.id = "novo-overlay-" + Date.now();
        this.position = 'default';
        this.scrollStrategy = 'reposition';
        this.closeOnSelect = true;
        this.select = new EventEmitter();
        this.closing = new EventEmitter();
    }
    /**
     * @return {?}
     */
    NovoOverlayTemplateComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroyOverlay();
    };
    Object.defineProperty(NovoOverlayTemplateComponent.prototype, "panelOpen", {
        get: /**
         * @return {?}
         */
        function () {
            return this.overlayRef && this.overlayRef.hasAttached();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoOverlayTemplateComponent.prototype, "parent", {
        get: /**
         * @return {?}
         */
        function () {
            return this._parent;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._parent = value;
            this.checkSizes();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoOverlayTemplateComponent.prototype.openPanel = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.overlayRef) {
            this.createOverlay(this.template);
        }
        else {
            this.checkSizes();
        }
        if (this.overlayRef && !this.overlayRef.hasAttached()) {
            this.overlayRef.attach(this.portal);
            this.closingActionsSubscription = this.subscribeToClosingActions();
        }
        this.changeDetectorRef.markForCheck();
        setTimeout(function () {
            if (_this.overlayRef) {
                _this.overlayRef.updatePosition();
            }
        });
    };
    /**
     * @return {?}
     */
    NovoOverlayTemplateComponent.prototype.closePanel = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.zone.run(function () {
            if (_this.overlayRef && _this.overlayRef.hasAttached()) {
                _this.overlayRef.detach();
                _this.closingActionsSubscription.unsubscribe();
            }
            _this.closing.emit(true);
            if (_this.panelOpen) {
                _this.changeDetectorRef.markForCheck();
            }
        });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoOverlayTemplateComponent.prototype.onClosingAction = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.closePanel();
    };
    Object.defineProperty(NovoOverlayTemplateComponent.prototype, "panelClosingActions", {
        /**
         * A stream of actions that should close the autocomplete panel, including
         * when an option is selected, on blur, and when TAB is pressed.
         */
        get: /**
         * A stream of actions that should close the autocomplete panel, including
         * when an option is selected, on blur, and when TAB is pressed.
         * @return {?}
         */
        function () {
            return merge(
            // this.overlayTemplate._keyManager.tabOut,
            this.outsideClickStream);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoOverlayTemplateComponent.prototype, "outsideClickStream", {
        /** Stream of clicks outside of the autocomplete panel. */
        get: /**
         * Stream of clicks outside of the autocomplete panel.
         * @protected
         * @return {?}
         */
        function () {
            var _this = this;
            if (!this.document) {
                return of();
            }
            return merge(fromEvent(this.document, 'mousedown'), fromEvent(this.document, 'touchend')).pipe(filter(function (event) {
                /** @type {?} */
                var clickTarget = (/** @type {?} */ (event.target));
                /** @type {?} */
                var clicked = _this.panelOpen &&
                    clickTarget !== _this.getConnectedElement().nativeElement &&
                    !_this.getConnectedElement().nativeElement.contains(clickTarget) &&
                    (!!_this.overlayRef && !_this.overlayRef.overlayElement.contains(clickTarget));
                if (_this.panelOpen && !!_this.overlayRef && _this.overlayRef.overlayElement.contains(clickTarget) && _this.closeOnSelect) {
                    _this.select.emit(event);
                }
                return clicked;
            }));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * This method listens to a stream of panel closing actions and resets the
     * stream every time the option list changes.
     */
    /**
     * This method listens to a stream of panel closing actions and resets the
     * stream every time the option list changes.
     * @protected
     * @return {?}
     */
    NovoOverlayTemplateComponent.prototype.subscribeToClosingActions = /**
     * This method listens to a stream of panel closing actions and resets the
     * stream every time the option list changes.
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var firstStable = this.zone.onStable.asObservable().pipe(first());
        // const valueChanges = Observable.from(this.value);
        // When the zone is stable initially, and when the option list changes...
        return (merge(firstStable)
            .pipe(
        // create a new stream of panelClosingActions, replacing any previous streams
        // that were created, and flatten it so our stream only emits closing events...
        switchMap(function () {
            return _this.panelClosingActions;
        }), 
        // when the first closing event occurs...
        first())
            // set the value, close the panel, and complete.
            .subscribe(function (event) { return _this.onClosingAction(event); }));
    };
    /**
     * @protected
     * @param {?} template
     * @return {?}
     */
    NovoOverlayTemplateComponent.prototype.createOverlay = /**
     * @protected
     * @param {?} template
     * @return {?}
     */
    function (template) {
        var _this = this;
        this.portal = new TemplatePortal(template, this.viewContainerRef);
        this.overlayRef = this.overlay.create(this.getOverlayConfig());
        this.overlayRef.backdropClick().subscribe(function () { return _this.closePanel(); });
    };
    /**
     * @protected
     * @return {?}
     */
    NovoOverlayTemplateComponent.prototype.destroyOverlay = /**
     * @protected
     * @return {?}
     */
    function () {
        if (this.overlayRef) {
            this.closePanel();
            this.overlayRef.dispose();
            this.overlayRef = undefined;
        }
    };
    /**
     * @protected
     * @return {?}
     */
    NovoOverlayTemplateComponent.prototype.getOverlayConfig = /**
     * @protected
     * @return {?}
     */
    function () {
        /** @type {?} */
        var config = new OverlayConfig();
        if (!this.width) {
            config.width = this.getHostWidth();
        }
        else {
            config.width = this.width;
        }
        if (this.height) {
            config.height = this.height;
        }
        config.positionStrategy = this.getPosition();
        config.hasBackdrop = false;
        config.direction = 'ltr';
        config.scrollStrategy = this.getScrollStrategy();
        return config;
    };
    /**
     * Supports the following position strategies:
     * 'default', 'right', 'bottom', 'center', 'bottom-left', 'bottom-right', 'top-left', 'top-right'
     */
    /**
     * Supports the following position strategies:
     * 'default', 'right', 'bottom', 'center', 'bottom-left', 'bottom-right', 'top-left', 'top-right'
     * @protected
     * @return {?}
     */
    NovoOverlayTemplateComponent.prototype.getPosition = /**
     * Supports the following position strategies:
     * 'default', 'right', 'bottom', 'center', 'bottom-left', 'bottom-right', 'top-left', 'top-right'
     * @protected
     * @return {?}
     */
    function () {
        if (this.position === 'center') {
            return this.overlay
                .position()
                .connectedTo(this.getConnectedElement(), { originX: 'start', originY: 'center' }, { overlayX: 'start', overlayY: 'center' })
                .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'top' })
                .withFallbackPosition({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'bottom' });
        }
        var _a = __read(this.position.includes('right') ? ['end', 'start'] : ['start', 'end'], 2), originX = _a[0], fallbackX = _a[1];
        var _b = __read(this.position.includes('top') ? ['top', 'bottom'] : ['bottom', 'top'], 2), originY = _b[0], overlayY = _b[1];
        /** @type {?} */
        var strategy = this.overlay
            .position()
            .connectedTo(this.getConnectedElement(), { originX: originX, originY: originY }, { overlayX: originX, overlayY: overlayY })
            .withDirection('ltr');
        if (this.position === 'bottom') {
            strategy = strategy.withFallbackPosition({ originX: fallbackX, originY: 'bottom' }, { overlayX: fallbackX, overlayY: 'top' });
        }
        else if (this.position === 'right' || this.position === 'default' || this.position.includes('above-below')) {
            strategy = strategy
                .withFallbackPosition({ originX: originX, originY: 'top' }, { overlayX: originX, overlayY: 'bottom' })
                .withFallbackPosition({ originX: fallbackX, originY: 'bottom' }, { overlayX: fallbackX, overlayY: 'top' })
                .withFallbackPosition({ originX: fallbackX, originY: 'top' }, { overlayX: fallbackX, overlayY: 'bottom' });
            if (!this.position.includes('above-below')) {
                strategy = strategy
                    .withFallbackPosition({ originX: originX, originY: 'center' }, { overlayX: originX, overlayY: 'center' })
                    .withFallbackPosition({ originX: fallbackX, originY: 'center' }, { overlayX: fallbackX, overlayY: 'center' });
            }
        }
        return strategy;
    };
    /**
     * @protected
     * @return {?}
     */
    NovoOverlayTemplateComponent.prototype.getScrollStrategy = /**
     * @protected
     * @return {?}
     */
    function () {
        switch (this.scrollStrategy) {
            case 'block':
                return this.overlay.scrollStrategies.block();
            case 'reposition':
                return this.overlay.scrollStrategies.reposition();
            default:
                return this.overlay.scrollStrategies.close();
        }
    };
    /**
     * @protected
     * @return {?}
     */
    NovoOverlayTemplateComponent.prototype.checkSizes = /**
     * @protected
     * @return {?}
     */
    function () {
        if (this.overlayRef) {
            if (!this.width) {
                this.overlayRef.getConfig().width = this.getHostWidth();
            }
            if (this.height) {
                this.overlayRef.getConfig().height = this.height;
            }
            this.overlayRef.updateSize(this.overlayRef.getConfig());
            this.overlayRef.updatePosition();
            this.changeDetectorRef.markForCheck();
        }
    };
    /**
     * @protected
     * @return {?}
     */
    NovoOverlayTemplateComponent.prototype.getConnectedElement = /**
     * @protected
     * @return {?}
     */
    function () {
        return this.parent;
    };
    /**
     * @protected
     * @return {?}
     */
    NovoOverlayTemplateComponent.prototype.getHostWidth = /**
     * @protected
     * @return {?}
     */
    function () {
        return this.getConnectedElement().nativeElement.getBoundingClientRect().width;
    };
    NovoOverlayTemplateComponent.decorators = [
        { type: Component, args: [{
                    selector: 'novo-overlay-template',
                    template: "\n    <ng-template>\n      <div class=\"novo-overlay-panel\" role=\"listbox\" [id]=\"id\" #panel>\n        <ng-content></ng-content>\n      </div>\n    </ng-template>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    NovoOverlayTemplateComponent.ctorParameters = function () { return [
        { type: Overlay },
        { type: ViewContainerRef },
        { type: NgZone },
        { type: ChangeDetectorRef },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }
    ]; };
    NovoOverlayTemplateComponent.propDecorators = {
        template: [{ type: ViewChild, args: [TemplateRef,] }],
        panel: [{ type: ViewChild, args: ['panel',] }],
        position: [{ type: Input }],
        scrollStrategy: [{ type: Input }],
        width: [{ type: Input }],
        height: [{ type: Input }],
        closeOnSelect: [{ type: Input }],
        select: [{ type: Output }],
        closing: [{ type: Output }],
        parent: [{ type: Input }]
    };
    return NovoOverlayTemplateComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var notifications = {};
/**
 * @param {?} message
 * @return {?}
 */
function notify(message) {
    if (!isDevMode() || message in notifications) {
        return;
    }
    notifications[message] = true;
    console.warn(message); // tslint:disable-line
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoDropdownElement = /** @class */ (function () {
    function NovoDropdownElement(element, ref) {
        this.element = element;
        this.ref = ref;
        this.parentScrollAction = 'close';
        this.side = 'default';
        this.scrollStrategy = 'reposition';
        this.width = -1; // Defaults to dynamic width (no hardcoded width value and no host width lookup)
        // Defaults to dynamic width (no hardcoded width value and no host width lookup)
        this.appendToBody = false; // Deprecated
        // Deprecated
        this.toggled = new EventEmitter();
        this.activeIndex = -1;
        this.filterTerm = '';
        this.clickHandler = this.togglePanel.bind(this);
        this.closeHandler = this.closePanel.bind(this);
    }
    /**
     * @return {?}
     */
    NovoDropdownElement.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.appendToBody) {
            notify("'appendToBody' has been deprecated. Please remove this attribute.");
        }
        // Add a click handler to the button to toggle the menu
        /** @type {?} */
        var button = this.element.nativeElement.querySelector('button');
        button.addEventListener('click', this.clickHandler);
        if (this.parentScrollSelector) {
            this.parentScrollElement = Helpers.findAncestor(this.element.nativeElement, this.parentScrollSelector);
        }
    };
    /**
     * @return {?}
     */
    NovoDropdownElement.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        // Remove listener
        /** @type {?} */
        var button = this.element.nativeElement.querySelector('button');
        if (button) {
            button.removeEventListener('click', this.clickHandler);
        }
        if (this.parentScrollElement && this.parentScrollAction === 'close') {
            this.parentScrollElement.removeEventListener('scroll', this.closeHandler);
        }
    };
    Object.defineProperty(NovoDropdownElement.prototype, "items", {
        set: /**
         * @param {?} items
         * @return {?}
         */
        function (items) {
            this._items = items;
            // Get the innerText of all the items to allow for searching
            this._textItems = items.map(function (item) {
                return item.element.nativeElement.innerText;
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoDropdownElement.prototype, "panelOpen", {
        /** BEGIN: Convenient Panel Methods. */
        get: /**
         * BEGIN: Convenient Panel Methods.
         * @return {?}
         */
        function () {
            return this.overlay && this.overlay.panelOpen;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoDropdownElement.prototype.openPanel = /**
     * @return {?}
     */
    function () {
        this.overlay.openPanel();
        if (this.parentScrollElement && this.parentScrollAction === 'close') {
            this.parentScrollElement.addEventListener('scroll', this.closeHandler);
        }
        this.toggled.emit(true);
    };
    /**
     * @return {?}
     */
    NovoDropdownElement.prototype.closePanel = /**
     * @return {?}
     */
    function () {
        this.overlay.closePanel();
        if (this.parentScrollElement && this.parentScrollAction === 'close') {
            this.parentScrollElement.removeEventListener('scroll', this.closeHandler);
        }
        // Clear active index
        if (this.activeIndex !== -1) {
            this._items.toArray()[this.activeIndex].active = false;
        }
        this.activeIndex = -1;
        this.ref.markForCheck();
        this.toggled.emit(false);
    };
    /**
     * @return {?}
     */
    NovoDropdownElement.prototype.togglePanel = /**
     * @return {?}
     */
    function () {
        this.panelOpen ? this.closePanel() : this.openPanel();
    };
    /** END: Convenient Panel Methods. */
    /**
     * END: Convenient Panel Methods.
     * @param {?} event
     * @return {?}
     */
    NovoDropdownElement.prototype.onKeyDown = /**
     * END: Convenient Panel Methods.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        if (this.panelOpen && event.keyCode === KeyCodes.ESC) {
            Helpers.swallowEvent(event);
            // active & esc hit -- close
            this.closePanel();
        }
        else if (event.keyCode === KeyCodes.ENTER) {
            Helpers.swallowEvent(event);
            // enter -- perform the "click"
            this._items.toArray()[this.activeIndex].onClick(event);
        }
        else if (event.keyCode === KeyCodes.DOWN) {
            Helpers.swallowEvent(event);
            // down - navigate through the list ignoring disabled ones
            if (this.activeIndex !== -1) {
                this._items.toArray()[this.activeIndex].active = false;
            }
            this.activeIndex++;
            if (this.activeIndex === this._items.length) {
                this.activeIndex = 0;
            }
            while (this._items.toArray()[this.activeIndex].disabled) {
                this.activeIndex++;
                if (this.activeIndex === this._items.length) {
                    this.activeIndex = 0;
                }
            }
            this._items.toArray()[this.activeIndex].active = true;
            this.scrollToActive();
        }
        else if (event.keyCode === KeyCodes.UP) {
            Helpers.swallowEvent(event);
            // up -- navigate through the list ignoring disabled ones
            if (this.activeIndex !== -1) {
                this._items.toArray()[this.activeIndex].active = false;
            }
            this.activeIndex--;
            if (this.activeIndex < 0) {
                this.activeIndex = this._items.length - 1;
            }
            while (this._items.toArray()[this.activeIndex].disabled) {
                this.activeIndex--;
                if (this.activeIndex < 0) {
                    this.activeIndex = this._items.length - 1;
                }
            }
            this._items.toArray()[this.activeIndex].active = true;
            this.scrollToActive();
        }
        else if ((event.keyCode >= 65 && event.keyCode <= 90) ||
            (event.keyCode >= 96 && event.keyCode <= 105) ||
            (event.keyCode >= 48 && event.keyCode <= 57) ||
            event.keyCode === KeyCodes.SPACE) {
            Helpers.swallowEvent(event);
            // A-Z, 0-9, space -- filter the list and scroll to active filter
            // filter has hard reset after 2s
            clearTimeout(this.filterTermTimeout);
            this.filterTermTimeout = setTimeout(function () {
                _this.filterTerm = '';
            }, 2000);
            /** @type {?} */
            var char = String.fromCharCode(event.keyCode);
            this.filterTerm = this.filterTerm.concat(char);
            /** @type {?} */
            var index = this._textItems.findIndex(function (value) {
                return new RegExp("^" + _this.filterTerm.toLowerCase()).test(value.trim().toLowerCase());
            });
            if (index !== -1) {
                if (this.activeIndex !== -1) {
                    this._items.toArray()[this.activeIndex].active = false;
                }
                this.activeIndex = index;
                this._items.toArray()[this.activeIndex].active = true;
                this.scrollToActive();
            }
        }
        else if ([KeyCodes.BACKSPACE, KeyCodes.DELETE].includes(event.keyCode)) {
            Helpers.swallowEvent(event);
            // backspace, delete -- remove partial filters
            clearTimeout(this.filterTermTimeout);
            this.filterTermTimeout = setTimeout(function () {
                _this.filterTerm = '';
            }, 2000);
            this.filterTerm = this.filterTerm.slice(0, -1);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoDropdownElement.prototype.onOverlayKeyDown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.keyCode === KeyCodes.ESC || event.keyCode === KeyCodes.ENTER) {
            Helpers.swallowEvent(event);
            this.closePanel();
        }
    };
    /**
     * @private
     * @return {?}
     */
    NovoDropdownElement.prototype.scrollToActive = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var container = this.overlay.overlayRef.overlayElement.querySelector('.dropdown-container');
        /** @type {?} */
        var item = this._items.toArray()[this.activeIndex];
        if (container && item) {
            container.scrollTop = item.element.nativeElement.offsetTop;
        }
    };
    NovoDropdownElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-dropdown',
                    template: "\n    <ng-content select=\"button\" #trigger></ng-content>\n    <novo-overlay-template [parent]=\"element\" [width]=\"width\" [position]=\"side\" [scrollStrategy]=\"scrollStrategy\">\n      <div class=\"dropdown-container {{ containerClass }}\" [style.height.px]=\"height\" [class.has-height]=\"!!height\" (keydown)=\"onOverlayKeyDown($event)\">\n        <ng-content></ng-content>\n      </div>\n    </novo-overlay-template>\n  "
                }] }
    ];
    /** @nocollapse */
    NovoDropdownElement.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    NovoDropdownElement.propDecorators = {
        parentScrollSelector: [{ type: Input }],
        parentScrollAction: [{ type: Input }],
        containerClass: [{ type: Input }],
        side: [{ type: Input }],
        scrollStrategy: [{ type: Input }],
        height: [{ type: Input }],
        width: [{ type: Input }],
        appendToBody: [{ type: Input }],
        toggled: [{ type: Output }],
        overlay: [{ type: ViewChild, args: [NovoOverlayTemplateComponent,] }],
        button: [{ type: ViewChild, args: ['trigger',] }],
        onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
    };
    return NovoDropdownElement;
}());
var NovoItemElement = /** @class */ (function () {
    function NovoItemElement(dropdown, element) {
        this.dropdown = dropdown;
        this.element = element;
        this.keepOpen = false;
        this.action = new EventEmitter();
        this.active = false;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    NovoItemElement.prototype.onClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // Poor man's disable
        if (!this.disabled) {
            // Close if keepOpen is false
            if (!this.keepOpen) {
                this.dropdown.closePanel();
            }
            // Emit the action
            this.action.emit({ originalEvent: event });
        }
    };
    NovoItemElement.decorators = [
        { type: Component, args: [{
                    selector: 'item',
                    template: '<ng-content></ng-content>',
                    host: {
                        '[class.disabled]': 'disabled',
                        '[class.active]': 'active',
                    }
                }] }
    ];
    /** @nocollapse */
    NovoItemElement.ctorParameters = function () { return [
        { type: NovoDropdownElement },
        { type: ElementRef }
    ]; };
    NovoItemElement.propDecorators = {
        disabled: [{ type: Input }],
        keepOpen: [{ type: Input }],
        action: [{ type: Output }],
        onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
    return NovoItemElement;
}());
var NovoListElement$1 = /** @class */ (function () {
    function NovoListElement(dropdown) {
        this.dropdown = dropdown;
    }
    /**
     * @return {?}
     */
    NovoListElement.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.dropdown.items = this.items;
    };
    NovoListElement.decorators = [
        { type: Component, args: [{
                    selector: 'list',
                    template: '<ng-content></ng-content>'
                }] }
    ];
    /** @nocollapse */
    NovoListElement.ctorParameters = function () { return [
        { type: NovoDropdownElement }
    ]; };
    NovoListElement.propDecorators = {
        items: [{ type: ContentChildren, args: [NovoItemElement,] }]
    };
    return NovoListElement;
}());
var NovoItemHeaderElement$1 = /** @class */ (function () {
    function NovoItemHeaderElement() {
    }
    NovoItemHeaderElement.decorators = [
        { type: Component, args: [{
                    selector: 'dropdown-item-header',
                    template: '<ng-content></ng-content>'
                }] }
    ];
    return NovoItemHeaderElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoOverlayModule = /** @class */ (function () {
    function NovoOverlayModule() {
    }
    NovoOverlayModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, FormsModule, OverlayModule, ScrollDispatchModule],
                    declarations: [NovoOverlayTemplateComponent],
                    exports: [NovoOverlayTemplateComponent, ScrollDispatchModule],
                },] }
    ];
    return NovoOverlayModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoDropdownModule = /** @class */ (function () {
    function NovoDropdownModule() {
    }
    NovoDropdownModule.decorators = [
        { type: NgModule, args: [{
                    imports: [NovoOverlayModule],
                    declarations: [NovoDropdownElement, NovoItemElement, NovoListElement$1, NovoItemHeaderElement$1],
                    exports: [NovoDropdownElement, NovoItemElement, NovoListElement$1, NovoItemHeaderElement$1],
                },] }
    ];
    return NovoDropdownModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Value accessor for the component (supports ngModel)
/** @type {?} */
var SELECT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NovoSelectElement; }),
    multi: true,
};
var NovoSelectElement = /** @class */ (function () {
    function NovoSelectElement(element, labels, ref, focusMonitor, ngZone) {
        this.element = element;
        this.labels = labels;
        this.ref = ref;
        this.focusMonitor = focusMonitor;
        this.ngZone = ngZone;
        this.placeholder = 'Select...';
        this.onSelect = new EventEmitter();
        this.selectedIndex = -1;
        this.empty = true;
        this.header = {
            open: false,
            valid: true,
            value: '',
        };
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
        this.filterTerm = '';
        this.disabled = false;
    }
    /**
     * @return {?}
     */
    NovoSelectElement.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.focusMonitor.monitor(this.dropdown.nativeElement).subscribe(function (origin) {
            return _this.ngZone.run(function () {
                if (origin === 'keyboard' && !_this.disabled) {
                    _this.openPanel();
                }
            });
        });
        this.ngOnChanges();
    };
    /**
     * @param {?=} changes
     * @return {?}
     */
    NovoSelectElement.prototype.ngOnChanges = /**
     * @param {?=} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        this.readonly = this.readonly === true;
        if (this.options && this.options.length && typeof this.options[0] === 'string') {
            this.filteredOptions = this.options.map(function (item) {
                return { value: item, label: item };
            });
        }
        else {
            this.filteredOptions = (this.options || [])
                .filter(function (item) {
                return !item.readOnly;
            })
                .map(function (element) {
                return __assign({}, element, { active: false });
            });
        }
        if (!this.model && !this.createdItem) {
            this.clear();
        }
        else if (this.createdItem) {
            /** @type {?} */
            var item = this.options.find(function (i) { return i.label === _this.createdItem; });
            /** @type {?} */
            var index = this.options.indexOf(item);
            this.select(item, index);
        }
        else {
            this.writeValue(this.model);
        }
        if (this.panelOpen) {
            this.openPanel();
        }
    };
    /**
     * @return {?}
     */
    NovoSelectElement.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.focusMonitor.stopMonitoring(this.dropdown.nativeElement);
    };
    /** BEGIN: Convienient Panel Methods. */
    /**
     * BEGIN: Convienient Panel Methods.
     * @return {?}
     */
    NovoSelectElement.prototype.openPanel = /**
     * BEGIN: Convienient Panel Methods.
     * @return {?}
     */
    function () {
        this.overlay.openPanel();
    };
    /**
     * @return {?}
     */
    NovoSelectElement.prototype.closePanel = /**
     * @return {?}
     */
    function () {
        this.overlay.closePanel();
    };
    /**
     * @return {?}
     */
    NovoSelectElement.prototype.togglePanel = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.panelOpen) {
            this.closePanel();
        }
        else {
            setTimeout(function () {
                _this.dropdown.nativeElement.focus();
            });
            this.openPanel();
        }
    };
    Object.defineProperty(NovoSelectElement.prototype, "panelOpen", {
        get: /**
         * @return {?}
         */
        function () {
            return this.overlay && this.overlay.panelOpen;
        },
        enumerable: true,
        configurable: true
    });
    /** END: Convenient Panel Methods. */
    /**
     * This method closes the panel, and if a value is specified, also sets the associated
     * control to that value. It will also mark the control as dirty if this interaction
     * stemmed from the user.
     */
    /** END: Convenient Panel Methods. */
    /**
     * This method closes the panel, and if a value is specified, also sets the associated
     * control to that value. It will also mark the control as dirty if this interaction
     * stemmed from the user.
     * @param {?} event
     * @return {?}
     */
    NovoSelectElement.prototype.setValueAndClose = /** END: Convenient Panel Methods. */
    /**
     * This method closes the panel, and if a value is specified, also sets the associated
     * control to that value. It will also mark the control as dirty if this interaction
     * stemmed from the user.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.value && event.index >= 0) {
            this.select(event.value, event.index);
        }
        this.closePanel();
    };
    /**
     * @param {?} option
     * @param {?} i
     * @param {?=} fireEvents
     * @return {?}
     */
    NovoSelectElement.prototype.select = /**
     * @param {?} option
     * @param {?} i
     * @param {?=} fireEvents
     * @return {?}
     */
    function (option, i, fireEvents) {
        if (fireEvents === void 0) { fireEvents = true; }
        if (this.selected) {
            this.selected.active = false;
        }
        this.selectedIndex = i;
        this.selected = option;
        this.selected.active = true;
        this.empty = false;
        if (fireEvents) {
            this.onModelChange(this.selected.value);
            this.onSelect.emit({ selected: this.selected.value });
        }
    };
    /**
     * @return {?}
     */
    NovoSelectElement.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.selected = {
            label: this.placeholder,
            value: null,
            active: false,
        };
        this.header = {
            open: false,
            valid: true,
            value: '',
        };
        this.selectedIndex = -1;
        this.empty = true;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoSelectElement.prototype.onKeyDown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        // To prevent default window scrolling
        if ([KeyCodes.UP, KeyCodes.DOWN].includes(event.keyCode)) {
            event.preventDefault();
        }
        if ([KeyCodes.ESC, KeyCodes.TAB].includes(event.keyCode)) {
            this.closePanel();
        }
        else if (event.keyCode === KeyCodes.ENTER) {
            if (this.header.open && this.header.value) {
                this.saveHeader();
            }
            else {
                this.setValueAndClose({
                    value: this.filteredOptions[this.selectedIndex],
                    index: this.selectedIndex,
                });
            }
        }
        else if (event.keyCode === KeyCodes.UP) {
            if (!this.panelOpen) {
                this.openPanel();
            }
            if (this.selectedIndex > 0) {
                this.selectedIndex--;
                this.select(this.filteredOptions[this.selectedIndex], this.selectedIndex);
                this.scrollToSelected();
            }
        }
        else if (event.keyCode === KeyCodes.DOWN) {
            if (!this.panelOpen) {
                this.openPanel();
            }
            if (this.selectedIndex < this.filteredOptions.length - 1) {
                this.selectedIndex++;
                this.select(this.filteredOptions[this.selectedIndex], this.selectedIndex);
                this.scrollToSelected();
                if (this.header.open) {
                    this.toggleHeader(null, false);
                }
            }
        }
        else if (event.keyCode === KeyCodes.UP && this.selectedIndex === 0) {
            if (!this.panelOpen) {
                this.openPanel();
            }
            this.selectedIndex--;
            this.toggleHeader(null, true);
        }
        else if ((event.keyCode >= 65 && event.keyCode <= 90) || event.keyCode === KeyCodes.SPACE) {
            if (event.keyCode === KeyCodes.SPACE) {
                event.preventDefault();
            }
            if (!this.panelOpen) {
                this.openPanel();
            }
            clearTimeout(this.filterTermTimeout);
            this.filterTermTimeout = setTimeout(function () {
                _this.filterTerm = '';
            }, 2000);
            /** @type {?} */
            var char = String.fromCharCode(event.keyCode);
            this.filterTerm = this.filterTerm.concat(char);
            /** @type {?} */
            var item = this.filteredOptions.find(function (i) { return i.label.toUpperCase().indexOf(_this.filterTerm) === 0; });
            if (item) {
                this.select(item, this.filteredOptions.indexOf(item));
                this.scrollToSelected();
            }
        }
        else if ([KeyCodes.BACKSPACE, KeyCodes.DELETE].includes(event.keyCode)) {
            clearTimeout(this.filterTermTimeout);
            this.filterTermTimeout = setTimeout(function () {
                _this.filterTerm = '';
            }, 2000);
            this.filterTerm = this.filterTerm.slice(0, -1);
        }
    };
    /**
     * @return {?}
     */
    NovoSelectElement.prototype.scrollToSelected = /**
     * @return {?}
     */
    function () {
        this.scrollToIndex(this.selectedIndex);
    };
    /**
     * @param {?} index
     * @return {?}
     */
    NovoSelectElement.prototype.scrollToIndex = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        /** @type {?} */
        var element = this.overlay.overlayRef.overlayElement;
        /** @type {?} */
        var list = element.querySelector('.novo-select-list');
        /** @type {?} */
        var items = list.querySelectorAll('li');
        /** @type {?} */
        var item = items[this.headerConfig ? index + 1 : index];
        if (item) {
            list.scrollTop = item.offsetTop;
        }
    };
    /**
     * @param {?} event
     * @param {?=} forceValue
     * @return {?}
     */
    NovoSelectElement.prototype.toggleHeader = /**
     * @param {?} event
     * @param {?=} forceValue
     * @return {?}
     */
    function (event, forceValue) {
        if (forceValue === void 0) { forceValue = false; }
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        // Reverse the active property (if forceValue, use that)
        this.header = {
            open: forceValue !== undefined ? forceValue : !this.header.open,
            value: '',
            valid: true,
        };
    };
    /**
     * @param {?} match
     * @param {?} query
     * @return {?}
     */
    NovoSelectElement.prototype.highlight = /**
     * @param {?} match
     * @param {?} query
     * @return {?}
     */
    function (match, query$$1) {
        // Replaces the capture string with a the same string inside of a "strong" tag
        return query$$1 ? match.replace(new RegExp(this.escapeRegexp(query$$1), 'gi'), '<strong>$&</strong>') : match;
    };
    /**
     * @param {?} queryToEscape
     * @return {?}
     */
    NovoSelectElement.prototype.escapeRegexp = /**
     * @param {?} queryToEscape
     * @return {?}
     */
    function (queryToEscape) {
        // Ex: if the capture is "a" the result will be \a
        return queryToEscape.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
    };
    /**
     * @return {?}
     */
    NovoSelectElement.prototype.saveHeader = /**
     * @return {?}
     */
    function () {
        if (this.header.value) {
            this.headerConfig.onSave(this.header.value);
            this.createdItem = this.header.value;
            this.closePanel();
        }
        else {
            this.header.valid = false;
        }
    };
    /**
     * @param {?} model
     * @return {?}
     */
    NovoSelectElement.prototype.writeValue = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        this.model = model;
        if (this.options) {
            /** @type {?} */
            var item = this.filteredOptions.find(function (i) { return i.value === model || (model && i.value === model.id); });
            if (!item && !Helpers.isEmpty(model)) {
                item = {
                    label: model,
                    value: model,
                };
                if (!item.readOnly) {
                    this.options.unshift(item);
                }
            }
            if (item) {
                this.select(item, this.filteredOptions.indexOf(item), false);
                this.empty = false;
            }
            else {
                this.clear();
            }
        }
        this.ref.markForCheck();
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoSelectElement.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoSelectElement.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelTouched = fn;
    };
    /**
     * @param {?} disabled
     * @return {?}
     */
    NovoSelectElement.prototype.setDisabledState = /**
     * @param {?} disabled
     * @return {?}
     */
    function (disabled) {
        this.disabled = disabled;
    };
    NovoSelectElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-select',
                    providers: [SELECT_VALUE_ACCESSOR],
                    template: "\n    <div #dropdownElement (click)=\"togglePanel(); (false)\" tabIndex=\"{{ disabled ? -1 : 0 }}\" type=\"button\" [class.empty]=\"empty\">\n      {{ selected.label }}<i class=\"bhi-collapse\"></i>\n    </div>\n    <novo-overlay-template [parent]=\"element\" position=\"center\" (closing)=\"dropdown.nativeElement.focus()\">\n      <ul class=\"novo-select-list\" tabIndex=\"-1\" [class.header]=\"headerConfig\" [class.active]=\"panelOpen\">\n        <ng-content></ng-content>\n        <li *ngIf=\"headerConfig\" class=\"select-header\" [class.open]=\"header.open\">\n          <button *ngIf=\"!header.open\" (click)=\"toggleHeader($event); (false)\" tabIndex=\"-1\" type=\"button\" class=\"header\">\n            <i class=\"bhi-add-thin\"></i>&nbsp;{{ headerConfig.label }}\n          </button>\n          <div *ngIf=\"header.open\" [ngClass]=\"{ active: header.open }\">\n            <input\n              autofocus\n              type=\"text\"\n              [placeholder]=\"headerConfig.placeholder\"\n              [attr.id]=\"name\"\n              autocomplete=\"false\"\n              [(ngModel)]=\"header.value\"\n              [ngClass]=\"{ invalid: !header.valid }\"\n            />\n            <footer>\n              <button (click)=\"toggleHeader($event, false)\">{{ labels.cancel }}</button>\n              <button (click)=\"saveHeader()\" class=\"primary\">{{ labels.save }}</button>\n            </footer>\n          </div>\n        </li>\n        <li\n          *ngFor=\"let option of filteredOptions; let i = index\"\n          [ngClass]=\"{ active: option.active }\"\n          (click)=\"setValueAndClose({ value: option, index: i })\"\n          [attr.data-automation-value]=\"option.label\"\n        >\n          <span [innerHtml]=\"highlight(option.label, filterTerm)\"></span>\n          <i *ngIf=\"option.active\" class=\"bhi-check\"></i>\n        </li>\n      </ul>\n    </novo-overlay-template>\n  ",
                    host: {
                        '(keydown)': 'onKeyDown($event)',
                    }
                }] }
    ];
    /** @nocollapse */
    NovoSelectElement.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NovoLabelService },
        { type: ChangeDetectorRef },
        { type: FocusMonitor },
        { type: NgZone }
    ]; };
    NovoSelectElement.propDecorators = {
        name: [{ type: Input }],
        options: [{ type: Input }],
        placeholder: [{ type: Input }],
        readonly: [{ type: Input }],
        headerConfig: [{ type: Input }],
        onSelect: [{ type: Output }],
        overlay: [{ type: ViewChild, args: [NovoOverlayTemplateComponent,] }],
        dropdown: [{ type: ViewChild, args: ['dropdownElement',] }],
        onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
    };
    return NovoSelectElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoSelectModule = /** @class */ (function () {
    function NovoSelectModule() {
    }
    NovoSelectModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, FormsModule, A11yModule, NovoOverlayModule],
                    declarations: [NovoSelectElement],
                    exports: [NovoSelectElement],
                },] }
    ];
    return NovoSelectModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Value accessor for the component (supports ngModel)
/** @type {?} */
var SWITCH_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NovoSwitchElement; }),
    multi: true,
};
var NovoSwitchElement = /** @class */ (function () {
    function NovoSwitchElement(ref) {
        this.ref = ref;
        this.onChange = new EventEmitter();
        this._disabled = false;
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
    }
    Object.defineProperty(NovoSwitchElement.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = !value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    NovoSwitchElement.prototype.onKeydown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.keyCode === KeyCodes.SPACE) {
            event.preventDefault();
            this.toggle(event);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoSwitchElement.prototype.toggle = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        if (this.disabled) {
            return;
        }
        this.model = !this.model;
        this.onChange.next(this.model);
        this.onModelChange(this.model);
        this.ref.markForCheck();
    };
    /**
     * @param {?} model
     * @return {?}
     */
    NovoSwitchElement.prototype.writeValue = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        this.model = model;
        this.ref.markForCheck();
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoSwitchElement.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoSwitchElement.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelTouched = fn;
    };
    NovoSwitchElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-switch',
                    providers: [SWITCH_VALUE_ACCESSOR],
                    template: "\n        <div (click)=\"toggle($event)\">\n            <div class=\"novo-switch-container\">\n                <div class=\"novo-switch-bar\"></div>\n                <div class=\"novo-switch-thumb-container\">\n                    <div class=\"novo-switch-thumb\"></div>\n                </div>\n            </div>\n            <div class=\"novo-switch-label\"><ng-content></ng-content></div>\n        </div>\n    ",
                    host: {
                        role: 'checkbox',
                        '[attr.aria-checked]': 'model',
                        '[attr.aria-disabled]': 'disabled',
                        '(keydown)': 'onKeydown($event)',
                        '[class]': 'theme',
                    }
                }] }
    ];
    /** @nocollapse */
    NovoSwitchElement.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    NovoSwitchElement.propDecorators = {
        theme: [{ type: Input }],
        onChange: [{ type: Output }],
        disabled: [{ type: Input, args: ['disabled',] }]
    };
    return NovoSwitchElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoSwitchModule = /** @class */ (function () {
    function NovoSwitchModule() {
    }
    NovoSwitchModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, FormsModule],
                    declarations: [NovoSwitchElement],
                    exports: [NovoSwitchElement],
                },] }
    ];
    return NovoSwitchModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Value accessor for the component (supports ngModel)
/** @type {?} */
var PICKER_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NovoPickerElement; }),
    multi: true,
};
/**
 * \@name Picker
 *
 * \@description This class is the directive definition of the Picker. If you add and attribute of `picker` to an input,
 * it will create an instance of the picker which wraps the input in all of the picker HTML elements and functionality.
 * Picker should be added as a two-way bound ngModel instance `[(picker)]=""` in order to have the picker options
 * dynamically populate.
 */
var NovoPickerElement = /** @class */ (function () {
    function NovoPickerElement(element, componentUtils, ref) {
        this.element = element;
        this.componentUtils = componentUtils;
        this.ref = ref;
        this.closeOnSelect = true;
        this.selected = [];
        // Deprecated
        this.appendToBody = false;
        // Deprecated
        this.parentScrollAction = 'close';
        // Side the dropdown will open
        this.side = 'left';
        // Autoselects the first option in the results
        this.autoSelectFirstOption = true;
        this._disablePickerInput = false;
        // Emitter for selects
        this.changed = new EventEmitter();
        this.select = new EventEmitter();
        this.focus = new EventEmitter();
        this.blur = new EventEmitter();
        this.typing = new EventEmitter();
        this.term = '';
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
    }
    Object.defineProperty(NovoPickerElement.prototype, "disablePickerInput", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disablePickerInput;
        },
        // Disable from typing into the picker (result template does everything)
        set: 
        // Disable from typing into the picker (result template does everything)
        /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._disablePickerInput = coerceBooleanProperty(v);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoPickerElement.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.overrideElement) {
            this.element = this.overrideElement;
        }
        if (this.appendToBody) {
            notify("'appendToBody' has been deprecated. Please remove this attribute.");
        }
        // Custom results template
        this.resultsComponent = this.config.resultsTemplate || PickerResults;
        // Get all distinct key up events from the input and only fire if long enough and distinct
        // let input = this.element.nativeElement.querySelector('input');
        /** @type {?} */
        var pasteObserver = fromEvent(this.input.nativeElement, 'paste').pipe(debounceTime(250), distinctUntilChanged());
        pasteObserver.subscribe(function (event) { return _this.onDebouncedKeyup(event); }, function (err) { return _this.hideResults(err); });
        /** @type {?} */
        var keyboardObserver = fromEvent(this.input.nativeElement, 'keyup').pipe(debounceTime(250), distinctUntilChanged());
        keyboardObserver.subscribe(function (event) { return _this.onDebouncedKeyup(event); }, function (err) { return _this.hideResults(err); });
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    NovoPickerElement.prototype.onDebouncedKeyup = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if ([KeyCodes.ESC, KeyCodes.UP, KeyCodes.DOWN, KeyCodes.ENTER, KeyCodes.TAB].includes(event['keyCode'])) {
            return;
        }
        this.show(((/** @type {?} */ (event.target))).value);
    };
    /**
     * @return {?}
     */
    NovoPickerElement.prototype.openPanel = /**
     * @return {?}
     */
    function () {
        this.container.openPanel();
    };
    /**
     * @return {?}
     */
    NovoPickerElement.prototype.closePanel = /**
     * @return {?}
     */
    function () {
        this.container.closePanel();
    };
    Object.defineProperty(NovoPickerElement.prototype, "panelOpen", {
        get: /**
         * @return {?}
         */
        function () {
            return this.container && this.container.panelOpen;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?=} term
     * @return {?}
     */
    NovoPickerElement.prototype.show = /**
     * @private
     * @param {?=} term
     * @return {?}
     */
    function (term) {
        this.openPanel();
        // Show the results inside
        this.showResults(term);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoPickerElement.prototype.onKeyDown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.disablePickerInput) {
            Helpers.swallowEvent(event);
            return;
        }
        if (this.panelOpen && !this.disablePickerInput) {
            if (event.keyCode === KeyCodes.ESC || event.keyCode === KeyCodes.TAB) {
                this.hideResults();
                return;
            }
            if (event.keyCode === KeyCodes.UP) {
                this.popup.instance.prevActiveMatch();
                this.ref.markForCheck();
                return;
            }
            if (event.keyCode === KeyCodes.DOWN) {
                this.popup.instance.nextActiveMatch();
                this.ref.markForCheck();
                return;
            }
            if (event.keyCode === KeyCodes.ENTER) {
                this.popup.instance.selectActiveMatch();
                this.ref.markForCheck();
                return;
            }
            if ((event.keyCode === KeyCodes.BACKSPACE || event.keyCode === KeyCodes.DELETE) && !Helpers.isBlank(this._value)) {
                this.clearValue(false);
                this.closePanel();
            }
            if (event.keyCode === KeyCodes.DELETE && Helpers.isBlank(this._value)) {
                this.clearValue(true);
            }
        }
    };
    /**
     * @param {?} wipeTerm
     * @return {?}
     */
    NovoPickerElement.prototype.clearValue = /**
     * @param {?} wipeTerm
     * @return {?}
     */
    function (wipeTerm) {
        this._value = null;
        this.select.emit(this._value);
        this.changed.emit({ value: this._value, rawValue: { label: '', value: this._value } });
        this.onModelChange(this._value);
        if (wipeTerm) {
            this.term = null;
            this.hideResults();
        }
        this.ref.markForCheck();
    };
    /**
     * @name onFocus
     * @description When the input's focus event is called this method calls the debounced function that displays the
     * results.
     */
    /**
     * \@name onFocus
     * \@description When the input's focus event is called this method calls the debounced function that displays the
     * results.
     * @param {?} event
     * @return {?}
     */
    NovoPickerElement.prototype.onFocus = /**
     * \@name onFocus
     * \@description When the input's focus event is called this method calls the debounced function that displays the
     * results.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.panelOpen) {
            this.show();
        }
        this.focus.emit(event);
    };
    // Creates an instance of the results (called popup) and adds all the bindings to that instance.
    // Creates an instance of the results (called popup) and adds all the bindings to that instance.
    /**
     * @param {?=} term
     * @return {?}
     */
    NovoPickerElement.prototype.showResults = 
    // Creates an instance of the results (called popup) and adds all the bindings to that instance.
    /**
     * @param {?=} term
     * @return {?}
     */
    function (term) {
        // Update Matches
        if (this.popup) {
            // Update existing list or create the DOM element
            this.popup.instance.config = this.config;
            this.popup.instance.term = this.term;
            this.popup.instance.selected = this.selected;
            this.popup.instance.autoSelectFirstOption = this.autoSelectFirstOption;
            this.ref.markForCheck();
        }
        else {
            this.popup = this.componentUtils.appendNextToLocation(this.resultsComponent, this.results);
            this.popup.instance.parent = this;
            this.popup.instance.config = this.config;
            this.popup.instance.term = this.term;
            this.popup.instance.selected = this.selected;
            this.popup.instance.autoSelectFirstOption = this.autoSelectFirstOption;
            this.popup.instance.overlay = this.container.overlayRef;
            this.ref.markForCheck();
        }
    };
    // Tells the overlay component to hide the picker results from the DOM without deleting the dynamically allocated popup instance created in
    // showResults. The popup instance will remain in memory from the first time the results are shown until this component is destroyed.
    // Tells the overlay component to hide the picker results from the DOM without deleting the dynamically allocated popup instance created in
    // showResults. The popup instance will remain in memory from the first time the results are shown until this component is destroyed.
    /**
     * @param {?=} err
     * @return {?}
     */
    NovoPickerElement.prototype.hideResults = 
    // Tells the overlay component to hide the picker results from the DOM without deleting the dynamically allocated popup instance created in
    // showResults. The popup instance will remain in memory from the first time the results are shown until this component is destroyed.
    /**
     * @param {?=} err
     * @return {?}
     */
    function (err) {
        this.closePanel();
        this.ref.markForCheck();
    };
    // Cleans up listeners for the popup - will get executed no matter how the popup is closed.
    // Cleans up listeners for the popup - will get executed no matter how the popup is closed.
    /**
     * @return {?}
     */
    NovoPickerElement.prototype.onOverlayClosed = 
    // Cleans up listeners for the popup - will get executed no matter how the popup is closed.
    /**
     * @return {?}
     */
    function () {
        if (this.popup && this.popup.instance && this.popup.instance.cleanUp) {
            this.popup.instance.cleanUp();
        }
    };
    Object.defineProperty(NovoPickerElement.prototype, "value", {
        // get accessor
        get: 
        // get accessor
        /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        // set accessor including call the onchange callback
        set: 
        // set accessor including call the onchange callback
        /**
         * @param {?} selected
         * @return {?}
         */
        function (selected) {
            if (!selected) {
                this.term = '';
                this._value = null;
                this.onModelChange(this._value);
            }
            else if (selected.value !== this._value) {
                this.term = this.clearValueOnSelect ? '' : selected.label;
                this._value = selected.value;
                this.changed.emit({ value: selected.value, rawValue: { label: this.term, value: selected.value } });
                this.select.emit(selected);
                this.onModelChange(selected.value);
            }
            else {
                this.changed.emit({ value: selected.value, rawValue: { label: this.term, value: this._value } });
                this.select.emit(selected);
            }
            this.ref.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    // Makes sure to clear the model if the user clears the text box
    // Makes sure to clear the model if the user clears the text box
    /**
     * @param {?} event
     * @return {?}
     */
    NovoPickerElement.prototype.checkTerm = 
    // Makes sure to clear the model if the user clears the text box
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.typing.emit(event);
        if (!event || !event.length) {
            this._value = null;
            this.onModelChange(this._value);
        }
        this.ref.markForCheck();
    };
    // Set touched on blur
    // Set touched on blur
    /**
     * @param {?=} event
     * @return {?}
     */
    NovoPickerElement.prototype.onTouched = 
    // Set touched on blur
    /**
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        this.onModelTouched();
        this.blur.emit(event);
    };
    // From ControlValueAccessor interface
    // From ControlValueAccessor interface
    /**
     * @param {?} value
     * @return {?}
     */
    NovoPickerElement.prototype.writeValue = 
    // From ControlValueAccessor interface
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        if (this.clearValueOnSelect) {
            this.term = '';
        }
        else {
            if (typeof value === 'string' && !this.config.useGetLabels) {
                this.term = value;
            }
            else if (value && value.label) {
                this.term = value.label;
            }
            else if (value && value.firstName) {
                this.term = value.firstName + " " + value.lastName;
            }
            else if (value && value.name) {
                this.term = value.name;
            }
            else if (typeof this.config.getLabels === 'function') {
                this.config.getLabels(value).then(function (result) {
                    if (result) {
                        _this.term = result.length ? result[0].label || '' : result.label || '';
                    }
                    else {
                        _this.term = value;
                    }
                    _this.ref.markForCheck();
                });
            }
            else if (value && value.title) {
                this.term = value.title;
            }
            else {
                this.term = value || '';
            }
        }
        this._value = value;
        this.ref.markForCheck();
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoPickerElement.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoPickerElement.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelTouched = fn;
    };
    /**
     * @param {?} disabled
     * @return {?}
     */
    NovoPickerElement.prototype.setDisabledState = /**
     * @param {?} disabled
     * @return {?}
     */
    function (disabled) {
        this._disablePickerInput = disabled;
    };
    NovoPickerElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-picker',
                    providers: [PICKER_VALUE_ACCESSOR],
                    template: "\n    <i class=\"bhi-more\" *ngIf=\"config?.entityIcon && !_value\"></i>\n    <i class=\"bhi-{{ config?.entityIcon }} entity-icon {{ config?.entityIcon }}\" *ngIf=\"config?.entityIcon && _value\"></i>\n    <input\n      type=\"text\"\n      class=\"picker-input\"\n      [(ngModel)]=\"term\"\n      [class.entity-picker]=\"config?.entityIcon\"\n      [class.entity-selected]=\"config?.entityIcon && _value\"\n      (ngModelChange)=\"checkTerm($event)\"\n      [placeholder]=\"placeholder\"\n      (keydown)=\"onKeyDown($event)\"\n      (focus)=\"onFocus($event)\"\n      (click)=\"onFocus($event)\"\n      (blur)=\"onTouched($event)\"\n      autocomplete=\"off\"\n      #input\n      [disabled]=\"disablePickerInput\"\n    />\n    <i class=\"bhi-search\" *ngIf=\"(!_value || clearValueOnSelect) && !disablePickerInput\"></i>\n    <i\n      class=\"bhi-times\"\n      [class.entity-selected]=\"config?.entityIcon && _value\"\n      *ngIf=\"_value && !clearValueOnSelect && !disablePickerInput\"\n      (click)=\"clearValue(true)\"\n    ></i>\n    <novo-overlay-template class=\"picker-results-container\" [parent]=\"element\" position=\"above-below\" (closing)=\"onOverlayClosed()\">\n      <span #results></span>\n      <ng-content></ng-content>\n    </novo-overlay-template>\n  "
                }] }
    ];
    /** @nocollapse */
    NovoPickerElement.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ComponentUtils },
        { type: ChangeDetectorRef }
    ]; };
    NovoPickerElement.propDecorators = {
        results: [{ type: ViewChild, args: ['results', { read: ViewContainerRef },] }],
        config: [{ type: Input }],
        placeholder: [{ type: Input }],
        clearValueOnSelect: [{ type: Input }],
        closeOnSelect: [{ type: Input }],
        selected: [{ type: Input }],
        appendToBody: [{ type: Input }],
        parentScrollSelector: [{ type: Input }],
        parentScrollAction: [{ type: Input }],
        containerClass: [{ type: Input }],
        side: [{ type: Input }],
        autoSelectFirstOption: [{ type: Input }],
        overrideElement: [{ type: Input }],
        disablePickerInput: [{ type: Input }],
        changed: [{ type: Output }],
        select: [{ type: Output }],
        focus: [{ type: Output }],
        blur: [{ type: Output }],
        typing: [{ type: Output }],
        container: [{ type: ViewChild, args: [NovoOverlayTemplateComponent,] }],
        input: [{ type: ViewChild, args: ['input',] }]
    };
    return NovoPickerElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var EntityPickerResult = /** @class */ (function () {
    function EntityPickerResult(labels) {
        this.labels = labels;
    }
    /**
     * @name escapeRegexp
     * @param queryToEscape
     *
     * @description This function captures the whole query string and replace it with the string that will be used to
     * match.
     */
    /**
     * \@name escapeRegexp
     * \@description This function captures the whole query string and replace it with the string that will be used to
     * match.
     * @param {?} queryToEscape
     *
     * @return {?}
     */
    EntityPickerResult.prototype.escapeRegexp = /**
     * \@name escapeRegexp
     * \@description This function captures the whole query string and replace it with the string that will be used to
     * match.
     * @param {?} queryToEscape
     *
     * @return {?}
     */
    function (queryToEscape) {
        // Ex: if the capture is "a" the result will be \a
        return queryToEscape.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
    };
    /**
     * @name highlight
     * @param match
     * @param query
     *
     * @description This function should return a <strong>-tag wrapped HTML string.
     */
    /**
     * \@name highlight
     * \@description This function should return a <strong>-tag wrapped HTML string.
     * @param {?} match
     * @param {?} query
     *
     * @return {?}
     */
    EntityPickerResult.prototype.highlight = /**
     * \@name highlight
     * \@description This function should return a <strong>-tag wrapped HTML string.
     * @param {?} match
     * @param {?} query
     *
     * @return {?}
     */
    function (match, query$$1) {
        // Replaces the capture string with a the same string inside of a "strong" tag
        return query$$1 && match ? match.replace(new RegExp(this.escapeRegexp(query$$1.trim()), 'gi'), '<strong>$&</strong>') : match;
    };
    /**
     * @param {?=} result
     * @return {?}
     */
    EntityPickerResult.prototype.getIconForResult = /**
     * @param {?=} result
     * @return {?}
     */
    function (result) {
        if (result) {
            switch (result.searchEntity) {
                case 'ClientContact':
                    return 'person contact';
                case 'ClientCorporation':
                    return 'company';
                case 'Opportunity':
                    return 'opportunity';
                case 'Candidate':
                    return 'candidate';
                case 'Lead':
                    return 'lead';
                case 'JobOrder':
                    return 'job';
                case 'Placement':
                    return 'star placement';
                case 'CorporateUser':
                    return 'user';
                default:
                    return '';
            }
        }
        return '';
    };
    /**
     * @param {?=} date
     * @return {?}
     */
    EntityPickerResult.prototype.renderTimestamp = /**
     * @param {?=} date
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var timestamp = '';
        if (date) {
            timestamp = this.labels.formatDateWithFormat(date, { year: 'numeric', month: 'numeric', day: 'numeric' });
        }
        return timestamp;
    };
    /**
     * @param {?=} result
     * @return {?}
     */
    EntityPickerResult.prototype.getNameForResult = /**
     * @param {?=} result
     * @return {?}
     */
    function (result) {
        if (result) {
            switch (result.searchEntity) {
                case 'Lead':
                case 'CorporateUser':
                case 'ClientContact':
                case 'Candidate':
                case 'Person':
                    if ('firstName' in result) {
                        return (result.firstName + " " + result.lastName).trim();
                    }
                    return ("" + (result.name || '')).trim();
                case 'ClientCorporation':
                    return ("" + (result.name || '')).trim();
                case 'Opportunity':
                case 'JobOrder':
                    return (result.id + " | " + (result.title || '')).trim();
                case 'Placement':
                    /** @type {?} */
                    var label = "" + result.id;
                    if (result.candidate || result.jobOrder) {
                        if (result.candidate && result.jobOrder) {
                            label = (label + " | " + result.candidate.firstName + " " + result.candidate.lastName + " - " + result.jobOrder.title).trim();
                        }
                        else if (result.jobOrder) {
                            label = (label + " | " + result.jobOrder.title).trim();
                        }
                        else {
                            label = (label + " | " + result.candidate.firstName + " " + result.candidate.lastName).trim();
                        }
                    }
                    return label;
                default:
                    return ("" + (result.name || '')).trim();
            }
        }
        return '';
    };
    EntityPickerResult.decorators = [
        { type: Component, args: [{
                    selector: 'entity-picker-result',
                    template: "\n        <novo-list-item *ngIf=\"match.data\">\n            <item-header>\n                <item-avatar [icon]=\"getIconForResult(match.data)\"></item-avatar>\n                <item-title>\n                    <span [innerHtml]=\"highlight(getNameForResult(match.data), term)\"></span>\n                </item-title>\n            </item-header>\n            <item-content direction=\"horizontal\">\n                <!-- COMPANY 1 -->\n                <p class=\"company\" *ngIf=\"match.data.companyName || match.data?.clientCorporation?.name\">\n                    <i class=\"bhi-company\"></i>\n                    <span [innerHtml]=\"highlight(match.data.companyName || match.data?.clientCorporation?.name, term)\"></span>\n                </p>\n                <!-- CLIENT CONTACT -->\n                <p class=\"contact\" *ngIf=\"match.data?.clientContact?.firstName\">\n                    <i class=\"bhi-person contact person\"></i>\n                    <span [innerHtml]=\"highlight(match.data.clientContact.firstName + ' ' + match.data.clientContact.lastName, term)\"></span>\n                </p>\n                <!-- CANDIDATE -->\n                <p class=\"candidate\" *ngIf=\"match.data.candidate && match.data.searchEntity === 'Placement'\">\n                    <i class=\"bhi-candidate\"></i>\n                    <span [innerHtml]=\"highlight((match.data.candidate.firstName + ' ' + match.data.candidate.lastName), term)\"></span>\n                </p>\n                <!-- START & END DATE -->\n                <p class=\"start-date\" *ngIf=\"match.data.dateBegin && match.data.searchEntity === 'Placement'\">\n                    <i class=\"bhi-calendar\"></i>\n                    <span [innerHtml]=\"renderTimestamp(match.data.dateBegin) + ' - ' + renderTimestamp(match.data.dateEnd)\"></span>\n                </p>\n                <!-- EMAIL -->\n                <p class=\"email\" *ngIf=\"match.data.email\">\n                    <i class=\"bhi-email\"></i>\n                    <span [innerHtml]=\"highlight(match.data.email, term)\"></span>\n                </p>\n                <!-- PHONE -->\n                <p class=\"phone\" *ngIf=\"match.data.phone\">\n                    <i class=\"bhi-phone\"></i>\n                    <span [innerHtml]=\"highlight(match.data.phone, term)\"></span>\n                </p>\n                <!-- ADDRESS -->\n                <p class=\"location\" *ngIf=\"match.data.address && (match.data.address.city || match.data.address.state)\">\n                    <i class=\"bhi-location\"></i>\n                    <span *ngIf=\"match.data.address.city\" [innerHtml]=\"highlight(match.data.address.city, term)\"></span>\n                    <span *ngIf=\"match.data.address.city && match.data.address.state\">, </span>\n                    <span *ngIf=\"match.data.address.state\" [innerHtml]=\"highlight(match.data.address.state, term)\"></span>\n                </p>\n                <!-- STATUS -->\n                <p class=\"status\" *ngIf=\"match.data.status\">\n                    <i class=\"bhi-info\"></i>\n                    <span [innerHtml]=\"highlight(match.data.status, term)\"></span>\n                </p>\n                <!-- OWNER -->\n                <p class=\"owner\" *ngIf=\"match.data.owner && match.data.owner.name && match.data.searchEntity === 'Candidate'\">\n                    <i class=\"bhi-person\"></i>\n                    <span [innerHtml]=\"highlight(match.data.owner.name, term)\"></span>\n                </p>\n                <!-- PRIMARY DEPARTMENT -->\n                <p class=\"primary-department\" *ngIf=\"match.data.primaryDepartment && match.data.primaryDepartment.name && match.data.searchEntity === 'CorporateUser'\">\n                    <i class=\"bhi-department\"></i>\n                    <span [innerHtml]=\"highlight(match.data.primaryDepartment.name, term)\"></span>\n                </p>\n                <!-- OCCUPATION -->\n                <p class=\"occupation\" *ngIf=\"match.data.occupation && match.data.searchEntity === 'CorporateUser'\">\n                    <i class=\"bhi-occupation\"></i>\n                    <span [innerHtml]=\"highlight(match.data.occupation, term)\"></span>\n                </p>\n            </item-content>\n        </novo-list-item>\n    "
                }] }
    ];
    /** @nocollapse */
    EntityPickerResult.ctorParameters = function () { return [
        { type: NovoLabelService }
    ]; };
    EntityPickerResult.propDecorators = {
        match: [{ type: Input }],
        term: [{ type: Input }]
    };
    return EntityPickerResult;
}());
var EntityPickerResults = /** @class */ (function (_super) {
    __extends(EntityPickerResults, _super);
    function EntityPickerResults(element, labels, ref) {
        var _this = _super.call(this, element, ref) || this;
        _this.labels = labels;
        _this.select = new EventEmitter();
        return _this;
    }
    /**
     * @return {?}
     */
    EntityPickerResults.prototype.getListElement = /**
     * @return {?}
     */
    function () {
        return this.element.nativeElement.querySelector('novo-list');
    };
    /**
     * @param {?=} event
     * @param {?=} item
     * @return {?}
     */
    EntityPickerResults.prototype.selectMatch = /**
     * @param {?=} event
     * @param {?=} item
     * @return {?}
     */
    function (event, item) {
        this.select.next(item);
        return _super.prototype.selectMatch.call(this, event, item);
    };
    EntityPickerResults.decorators = [
        { type: Component, args: [{
                    selector: 'entity-picker-results',
                    template: "\n        <novo-list *ngIf=\"matches.length > 0\" direction=\"vertical\">\n            <entity-picker-result *ngFor=\"let match of matches\"\n                    [match]=\"match\"\n                    [term]=\"term\"\n                    (click)=\"selectMatch($event, match)\"\n                    [ngClass]=\"{active: isActive(match)}\"\n                    (mouseenter)=\"selectActive(match)\"\n                    [class.disabled]=\"preselected(match)\">\n            </entity-picker-result>\n            <novo-loading theme=\"line\" *ngIf=\"isLoading && matches.length > 0\"></novo-loading>\n        </novo-list>\n        <p class=\"picker-error\" *ngIf=\"hasError\">{{ labels.pickerError }}</p>\n        <p class=\"picker-null-results\" *ngIf=\"!isLoading && !matches.length && !hasError\">{{ labels.pickerEmpty }}</p>\n    "
                }] }
    ];
    /** @nocollapse */
    EntityPickerResults.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NovoLabelService },
        { type: ChangeDetectorRef }
    ]; };
    EntityPickerResults.propDecorators = {
        select: [{ type: Output }]
    };
    return EntityPickerResults;
}(BasePickerResults));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@name: ChecklistPickerResults
 *
 * \@description This is the actual list of matches that gets injected into the DOM.
 */
var ChecklistPickerResults = /** @class */ (function (_super) {
    __extends(ChecklistPickerResults, _super);
    function ChecklistPickerResults(element, labels, ref) {
        var _this = _super.call(this, element, ref) || this;
        _this.labels = labels;
        return _this;
    }
    /**
     * @return {?}
     */
    ChecklistPickerResults.prototype.search = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var options = this.config.options;
        // only set this the first time
        return from(new Promise(function (resolve, reject) {
            // Check if there is match data
            if (options) {
                // Resolve the data
                if (Array.isArray(options)) {
                    _this.isStatic = true;
                    // Arrays are returned immediately
                    resolve(options);
                }
                else {
                    // All other kinds of data are rejected
                    reject('The data provided is not an array or a promise');
                    throw new Error('The data provided is not an array or a promise');
                }
            }
            else {
                // No data gets rejected
                reject('error');
            }
        }));
    };
    /**
     * @name filterData=
     * @param matches - Collection of objects=
     *
     * @description This function loops through the picker options and creates a filtered list of objects that contain
     * the newSearch.
     */
    /**
     * \@name filterData=
     * \@description This function loops through the picker options and creates a filtered list of objects that contain
     * the newSearch.
     * @param {?} matches - Collection of objects=
     *
     * @return {?}
     */
    ChecklistPickerResults.prototype.filterData = /**
     * \@name filterData=
     * \@description This function loops through the picker options and creates a filtered list of objects that contain
     * the newSearch.
     * @param {?} matches - Collection of objects=
     *
     * @return {?}
     */
    function (matches) {
        var _this = this;
        if (this.term && matches) {
            this.filteredMatches = matches.map(function (section) {
                /** @type {?} */
                var items = section.originalData.filter(function (match) {
                    return ~String(match.label)
                        .toLowerCase()
                        .indexOf(_this.term.toLowerCase());
                });
                section.data = items;
                return section;
            }, this);
            return this.filteredMatches;
        }
        else if (this.term === '') {
            matches.forEach(function (section) {
                section.data = section.originalData;
            });
            return matches;
        }
        // Show no recent results template
        return matches;
    };
    /**
     * @name selectMatch
     * @param event
     * @param item
     *
     * @description
     */
    /**
     * \@name selectMatch
     * \@description
     * @param {?} event
     * @param {?} item
     *
     * @return {?}
     */
    ChecklistPickerResults.prototype.selectMatch = /**
     * \@name selectMatch
     * \@description
     * @param {?} event
     * @param {?} item
     *
     * @return {?}
     */
    function (event, item) {
        Helpers.swallowEvent(event);
        if (item.indeterminate) {
            item.indeterminate = false;
            item.checked = true;
        }
        else {
            item.checked = !item.checked;
        }
        /** @type {?} */
        var selected = this.activeMatch;
        if (selected) {
            this.parent.value = selected;
        }
        this.ref.markForCheck();
        return false;
    };
    ChecklistPickerResults.decorators = [
        { type: Component, args: [{
                    selector: 'checklist-picker-results',
                    host: {
                        class: 'active picker-results',
                    },
                    template: "\n        <novo-loading theme=\"line\" *ngIf=\"isLoading && !matches.length\"></novo-loading>\n        <ul *ngIf=\"matches.length > 0\">\n            <span *ngFor=\"let section of matches; let i = index\">\n                <li class=\"header caption\" *ngIf=\"section.data.length > 0\">{{ section.label || section.type }}</li>\n                <li\n                    *ngFor=\"let match of section.data; let i = index\" [ngClass]=\"{checked: match.checked}\"\n                    (click)=\"selectMatch($event, match)\"\n                    [class.active]=\"match === activeMatch\"\n                    (mouseenter)=\"selectActive(match)\">\n                    <label>\n                        <i [ngClass]=\"{'bhi-checkbox-empty': !match.checked, 'bhi-checkbox-filled': match.checked, 'bhi-checkbox-indeterminate': match.indeterminate }\"></i>\n                        {{match.label}}\n                    </label>\n                </li>\n            </span>\n        </ul>\n        <p class=\"picker-error\" *ngIf=\"hasError\">{{ labels.pickerError }}</p>\n        <p class=\"picker-null-results\" *ngIf=\"!isLoading && !matches.length && !hasError\">{{ labels.pickerEmpty }}</p>\n    "
                }] }
    ];
    /** @nocollapse */
    ChecklistPickerResults.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NovoLabelService },
        { type: ChangeDetectorRef }
    ]; };
    return ChecklistPickerResults;
}(BasePickerResults));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var GroupedMultiPickerResults = /** @class */ (function (_super) {
    __extends(GroupedMultiPickerResults, _super);
    function GroupedMultiPickerResults(element, renderer, labels, ref) {
        var _this = _super.call(this, element, ref) || this;
        _this.renderer = renderer;
        _this.labels = labels;
        _this.customFilterEnabled = false;
        _this.placeholder = '';
        _this.internalMap = new Map();
        return _this;
    }
    Object.defineProperty(GroupedMultiPickerResults.prototype, "term", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            // Display all only will work for static categories
            if (this.config.displayAll && this.config.getItemsForCategoryAsync) {
                throw new Error('[GroupedMultiPickerResults] - you can only have `displayAll` with a static `categoryMap`. Not available with `getItemsForCategoryAsync`');
            }
            // Custom filter
            if (this.config.customFilter) {
                this.customFilterEnabled = true;
                this.customFilterLabel = this.config.customFilter.label;
                this.customFilterValue = !!this.config.customFilter.defaultFilterValue;
                this.ref.markForCheck();
                if (!this.customFilterLabel || !this.config.customFilter.matchFunction) {
                    throw new Error('[GroupedMultiPickerResults] - custom filter/matchFunction set no label was provided!');
                }
            }
            else {
                this.customFilterEnabled = false;
            }
            // Configure ALL
            if (this.config.displayAll && !this.selectedCategory) {
                this.setAllCategory();
            }
            // Placeholder
            if (this.config.placeholder) {
                this.placeholder = this.config.placeholder;
            }
            // Focus
            setTimeout(function () {
                _this.inputElement.nativeElement.focus();
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GroupedMultiPickerResults.prototype, "categories", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.config.categories || this.config.categoryMap) {
                return (this.config.categories ||
                    Array.from(this.config.categoryMap.values()).filter(function (category) {
                        return category.value !== 'all';
                    }));
            }
            return [];
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    GroupedMultiPickerResults.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // Subscribe to keyboard events and debounce
        this.keyboardSubscription = fromEvent(this.inputElement.nativeElement, 'keyup')
            .pipe(debounceTime(350), distinctUntilChanged())
            .subscribe(function (event) {
            _this.searchTerm = event.target['value'];
            _this.matches = _this.filterData();
            _this.ref.markForCheck();
        });
    };
    /**
     * @return {?}
     */
    GroupedMultiPickerResults.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        // Cleanup
        this.keyboardSubscription.unsubscribe();
    };
    /**
     * @return {?}
     */
    GroupedMultiPickerResults.prototype.setAllCategory = /**
     * @return {?}
     */
    function () {
        // If we have display all, set the all categories up
        if (this.config.displayAll) {
            this.selectedCategory = { value: 'all', label: 'all' };
            /** @type {?} */
            var allItems_1 = [];
            Array.from(this.config.categoryMap.values())
                .filter(function (category) {
                return category.value !== 'all';
            })
                .forEach(function (v) { return allItems_1.push.apply(allItems_1, __spread(v.items)); });
            this.matches = this.filter(allItems_1);
            this.config.categoryMap.set('all', { value: 'all', label: 'All', items: allItems_1 });
            this.ref.markForCheck();
        }
    };
    /**
     * @param {?} category
     * @return {?}
     */
    GroupedMultiPickerResults.prototype.selectCategory = /**
     * @param {?} category
     * @return {?}
     */
    function (category) {
        // Scroll to top
        this.renderer.setProperty(this.listElement.element.nativeElement, 'scrollTop', 0);
        // Set focus
        this.inputElement.nativeElement.focus();
        // Find new items
        /** @type {?} */
        var key = category.value;
        this.selectedCategory = category;
        // Clear
        this.matches = [];
        this.ref.markForCheck();
        // New matches
        this.getNewMatches(category, key);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    GroupedMultiPickerResults.prototype.clearSearchTerm = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        Helpers.swallowEvent(event);
        this.searchTerm = '';
        this.selectCategory({ value: this.selectedCategory.value, label: this.selectedCategory.label });
        this.ref.markForCheck();
    };
    /**
     * @param {?=} event
     * @param {?=} item
     * @return {?}
     */
    GroupedMultiPickerResults.prototype.selectMatch = /**
     * @param {?=} event
     * @param {?=} item
     * @return {?}
     */
    function (event, item) {
        // Set focus
        this.inputElement.nativeElement.focus();
        return _super.prototype.selectMatch.call(this, event);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    GroupedMultiPickerResults.prototype.fireCustomFilter = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        this.customFilterValue = value;
        // Clear cache map
        this.internalMap.clear();
        // Only fire if we have a selected category
        if (this.selectCategory) {
            // Find new items
            /** @type {?} */
            var key = this.selectedCategory.value;
            // Get new matches
            this.getNewMatches(this.selectedCategory, key);
            this.ref.markForCheck();
        }
        // Focus
        setTimeout(function () {
            _this.inputElement.nativeElement.focus();
        });
    };
    /**
     * @return {?}
     */
    GroupedMultiPickerResults.prototype.filterData = /**
     * @return {?}
     */
    function () {
        if (this.selectedCategory) {
            if (this.config.categoryMap) {
                return this.filter(this.config.categoryMap.get(this.selectedCategory.value).items);
            }
            else {
                return this.filter(this.internalMap.get(this.selectedCategory.value).items);
            }
        }
        return [];
    };
    /**
     * @private
     * @param {?} category
     * @param {?} key
     * @return {?}
     */
    GroupedMultiPickerResults.prototype.getNewMatches = /**
     * @private
     * @param {?} category
     * @param {?} key
     * @return {?}
     */
    function (category, key) {
        var _this = this;
        // Get new matches
        if (this.config.categoryMap) {
            this.matches = this.filter(this.config.categoryMap.get(key).items);
            this.ref.markForCheck();
        }
        else {
            if (!this.config.getItemsForCategoryAsync) {
                throw new Error('The "config" for the Chips must include a function "getItemsForCategoryAsync(categoryKey: string)" to retrieve the items by category. Or if you have static data provide a "categoryMap"');
            }
            if (!this.internalMap.get(key)) {
                this.isLoading = true;
                this.config.getItemsForCategoryAsync(key, this.customFilterValue).then(function (items) {
                    _this.internalMap.set(key, { value: category.value, label: category.label, items: items });
                    _this.matches = _this.filter(items, true);
                    _this.isLoading = false;
                    _this.ref.markForCheck();
                    setTimeout(function () {
                        _this.inputElement.nativeElement.focus();
                    });
                });
            }
            else {
                this.matches = this.filter(this.internalMap.get(key).items);
                this.ref.markForCheck();
            }
        }
    };
    /**
     * @private
     * @param {?} array
     * @param {?=} ignoreCustomFilter
     * @return {?}
     */
    GroupedMultiPickerResults.prototype.filter = /**
     * @private
     * @param {?} array
     * @param {?=} ignoreCustomFilter
     * @return {?}
     */
    function (array, ignoreCustomFilter) {
        var _this = this;
        if (ignoreCustomFilter === void 0) { ignoreCustomFilter = false; }
        /** @type {?} */
        var matches = array;
        if (this.searchTerm && this.searchTerm.length !== 0 && this.selectedCategory) {
            matches = matches.filter(function (match) {
                /** @type {?} */
                var searchTerm = _this.searchTerm.toLowerCase();
                return match.label.toLowerCase().indexOf(searchTerm) > -1 || match.value.toLowerCase().indexOf(searchTerm) > -1;
            });
        }
        if (this.customFilterEnabled && this.config.customFilter.matchFunction && !ignoreCustomFilter) {
            matches = matches.filter(function (match) { return _this.config.customFilter.matchFunction(match, _this.customFilterValue); });
        }
        return matches;
    };
    GroupedMultiPickerResults.decorators = [
        { type: Component, args: [{
                    selector: 'grouped-multi-picker-results',
                    template: "\n        <div class=\"grouped-multi-picker-groups\">\n            <novo-list direction=\"vertical\">\n                <novo-list-item\n                    *ngIf=\"config.displayAll\"\n                    (click)=\"selectCategory({ value: 'all', label: 'all' })\"\n                    [class.active]=\"selectedCategory?.value === 'all'\"\n                    data-automation-id=\"display-all\"\n                    [class.disabled]=\"isLoading\">\n                    <item-content>\n                        <span data-automation-id=\"label\">{{ labels.all }}</span>\n                    </item-content>\n                    <item-end>\n                        <i class=\"bhi-next\"></i>\n                    </item-end>\n                </novo-list-item>\n                <novo-list-item\n                    *ngFor=\"let category of categories\"\n                    (click)=\"selectCategory(category)\"\n                    [class.active]=\"selectedCategory?.value === category.value\"\n                    [attr.data-automation-id]=\"category.label\"\n                    [class.disabled]=\"isLoading\">\n                    <item-content>\n                        <i *ngIf=\"category.iconClass\" [class]=\"category.iconClass\"></i>\n                        <span data-automation-id=\"label\">{{ category.label }}</span>\n                    </item-content>\n                    <item-end>\n                        <i class=\"bhi-next\"></i>\n                    </item-end>\n                </novo-list-item>\n            </novo-list>\n            <footer class=\"grouped-multi-picker-groups-footer\" *ngIf=\"customFilterEnabled\" data-automation-id=\"footer\" [class.disabled]=\"isLoading\">\n                <novo-switch [(ngModel)]=\"customFilterValue\" (onChange)=\"fireCustomFilter($event)\" data-automation-id=\"switch\"></novo-switch>\n                <label data-automation-id=\"label\">{{ customFilterLabel }}</label>\n            </footer>\n        </div>\n        <div class=\"grouped-multi-picker-matches\">\n            <div class=\"grouped-multi-picker-input-container\" [hidden]=\"!selectedCategory\" data-automation-id=\"input-container\">\n                <input autofocus #input [(ngModel)]=\"searchTerm\" [disabled]=\"isLoading\" data-automation-id=\"input\" [placeholder]=\"placeholder\"/>\n                <i class=\"bhi-search\" *ngIf=\"!searchTerm\" [class.disabled]=\"isLoading\" data-automation-id=\"seach-icon\"></i>\n                <i class=\"bhi-times\" *ngIf=\"searchTerm\" (click)=\"clearSearchTerm($event)\" [class.disabled]=\"isLoading\" data-automation-id=\"remove-icon\"></i>\n            </div>\n            <div class=\"grouped-multi-picker-list-container\">\n                <novo-list direction=\"vertical\" #list>\n                    <novo-list-item\n                        *ngFor=\"let match of matches\"\n                        (click)=\"selectMatch($event)\"\n                        [class.active]=\"match === activeMatch\"\n                        (mouseenter)=\"selectActive(match)\"\n                        [class.disabled]=\"preselected(match) || isLoading\"\n                        [attr.data-automation-id]=\"match.label\">\n                        <item-content>\n                            <span>{{ match.label }}</span>\n                        </item-content>\n                    </novo-list-item>\n                </novo-list>\n                <div class=\"grouped-multi-picker-no-results\" *ngIf=\"matches.length === 0 && !isLoading && selectedCategory\" data-automation-id=\"empty-message\">\n                    {{ labels.groupedMultiPickerEmpty }}\n                </div>\n                <div class=\"grouped-multi-picker-no-category\" *ngIf=\"matches.length === 0 && !isLoading && !selectedCategory\" data-automation-id=\"select-category-message\">\n                    {{ labels.groupedMultiPickerSelectCategory }}\n                </div>\n                <div class=\"grouped-multi-picker-loading\" *ngIf=\"isLoading\" data-automation-id=\"loading-message\">\n                    <novo-loading theme=\"line\"></novo-loading>\n                </div>\n            </div>\n        </div>\n    "
                }] }
    ];
    /** @nocollapse */
    GroupedMultiPickerResults.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: NovoLabelService },
        { type: ChangeDetectorRef }
    ]; };
    GroupedMultiPickerResults.propDecorators = {
        inputElement: [{ type: ViewChild, args: ['input',] }],
        listElement: [{ type: ViewChild, args: ['list',] }]
    };
    return GroupedMultiPickerResults;
}(BasePickerResults));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SkillsSpecialtyPickerResults = /** @class */ (function (_super) {
    __extends(SkillsSpecialtyPickerResults, _super);
    function SkillsSpecialtyPickerResults(element, labels, ref) {
        var _this = _super.call(this, element, ref) || this;
        _this.element = element;
        _this.labels = labels;
        _this.active = true;
        _this.limitedTo = false;
        _this.limit = 200;
        return _this;
    }
    /**
     * @return {?}
     */
    SkillsSpecialtyPickerResults.prototype.getListElement = /**
     * @return {?}
     */
    function () {
        return this.element.nativeElement.querySelector('novo-list');
    };
    /**
     * @name structureArray
     * @param collection - the data once getData resolves it
     *
     * @description This function structures an array of nodes into an array of objects with a
     * 'name' field by default.
     */
    /**
     * \@name structureArray
     * \@description This function structures an array of nodes into an array of objects with a
     * 'name' field by default.
     * @param {?} collection - the data once getData resolves it
     *
     * @return {?}
     */
    SkillsSpecialtyPickerResults.prototype.structureArray = /**
     * \@name structureArray
     * \@description This function structures an array of nodes into an array of objects with a
     * 'name' field by default.
     * @param {?} collection - the data once getData resolves it
     *
     * @return {?}
     */
    function (collection) {
        /** @type {?} */
        var data = collection;
        if (collection.hasOwnProperty('data')) {
            this.limitedTo = collection.limitedTo200;
            this.total = collection.total;
            data = collection.data;
        }
        else if (data.length > this.limit) {
            this.limitedTo = true;
            this.total = data.length;
            data = data.slice(0, this.limit);
        }
        return _super.prototype.structureArray.call(this, data);
    };
    SkillsSpecialtyPickerResults.decorators = [
        { type: Component, args: [{
                    selector: 'skill-specialty-picker-results',
                    template: "\n        <section class=\"picker-loading\" *ngIf=\"isLoading && !matches?.length\">\n            <novo-loading theme=\"line\"></novo-loading>\n        </section>\n        <novo-list *ngIf=\"matches.length > 0\" direction=\"vertical\">\n            <novo-list-item\n                *ngFor=\"let match of matches\"\n                (click)=\"selectMatch($event)\"\n                [class.active]=\"match === activeMatch\"\n                (mouseenter)=\"selectActive(match)\"\n                [class.disabled]=\"preselected(match)\">\n                <item-content>\n                    <h6><span [innerHtml]=\"highlight(match.label, term)\"></span></h6>\n                    <div class=\"category\">\n                        <i class=\"bhi-category-tags\"></i><span [innerHtml]=\"highlight(match.data.categories || match.data.parentCategory.name, term)\"></span>\n                    </div>\n                </item-content>\n            </novo-list-item>\n            <novo-list-item *ngIf=\"limitedTo\"><div>{{labels.showingXofXResults(limit, total)}}</div></novo-list-item>\n            <novo-loading theme=\"line\" *ngIf=\"isLoading && matches.length > 0\"></novo-loading>\n        </novo-list>\n        <p class=\"picker-error\" *ngIf=\"hasError\">{{ labels.pickerError }}</p>\n        <p class=\"picker-null\" *ngIf=\"!isLoading && !matches.length && !hasError\">{{ labels.pickerEmpty }}</p>\n    "
                }] }
    ];
    /** @nocollapse */
    SkillsSpecialtyPickerResults.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NovoLabelService },
        { type: ChangeDetectorRef }
    ]; };
    SkillsSpecialtyPickerResults.propDecorators = {
        active: [{ type: HostBinding, args: ['class.active',] }]
    };
    return SkillsSpecialtyPickerResults;
}(BasePickerResults));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DistributionListPickerResults = /** @class */ (function (_super) {
    __extends(DistributionListPickerResults, _super);
    function DistributionListPickerResults(element, sanitizer, labels, ref) {
        var _this = _super.call(this, element, ref) || this;
        _this.sanitizer = sanitizer;
        _this.labels = labels;
        _this.active = true;
        _this.sanitizer = sanitizer;
        return _this;
    }
    Object.defineProperty(DistributionListPickerResults.prototype, "isHidden", {
        get: /**
         * @return {?}
         */
        function () {
            return this.matches.length === 0;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DistributionListPickerResults.prototype.getListElement = /**
     * @return {?}
     */
    function () {
        return this.element.nativeElement.querySelector('novo-list');
    };
    /**
     * @param {?} html
     * @return {?}
     */
    DistributionListPickerResults.prototype.sanitizeHTML = /**
     * @param {?} html
     * @return {?}
     */
    function (html) {
        return this.sanitizer.bypassSecurityTrustHtml(html);
    };
    DistributionListPickerResults.decorators = [
        { type: Component, args: [{
                    selector: 'distribution-list-picker-results',
                    template: "\n        <section class=\"picker-loading\" *ngIf=\"isLoading && !matches?.length\">\n            <novo-loading theme=\"line\"></novo-loading>\n        </section>\n        <novo-list direction=\"vertical\" *ngIf=\"matches?.length > 0 && !hasError\">\n            <novo-list-item *ngFor=\"let match of matches\" (click)=\"selectMatch($event)\" [class.active]=\"match === activeMatch\" (mouseenter)=\"selectActive(match)\" [class.disabled]=\"preselected(match)\">\n                <item-header>\n                    <item-title>\n                        <span [innerHtml]=\"sanitizeHTML(match.label)\"></span>\n                    </item-title>\n                </item-header>\n                <item-content direction=\"horizontal\">\n                    <p>\n                        <span class='label'>{{ labels.distributionListOwner }}: </span><span>{{ match?.data?.owner?.name }}</span>\n                    </p>\n                    <p>\n                        <span class='label'>{{ labels.dateAdded }}: </span><span>{{ labels.formatDateWithFormat(match?.data?.dateAdded, { year: 'numeric', month: 'numeric', day: 'numeric' }) }}</span>\n                    </p>\n                </item-content>\n            </novo-list-item>\n            <novo-loading theme=\"line\" *ngIf=\"isLoading && matches?.length > 0\"></novo-loading>\n        </novo-list>\n    "
                }] }
    ];
    /** @nocollapse */
    DistributionListPickerResults.ctorParameters = function () { return [
        { type: ElementRef },
        { type: DomSanitizer },
        { type: NovoLabelService },
        { type: ChangeDetectorRef }
    ]; };
    DistributionListPickerResults.propDecorators = {
        active: [{ type: HostBinding, args: ['class.active',] }],
        isHidden: [{ type: HostBinding, args: ['hidden',] }]
    };
    return DistributionListPickerResults;
}(BasePickerResults));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoPickerModule = /** @class */ (function () {
    function NovoPickerModule() {
    }
    NovoPickerModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, FormsModule, NovoLoadingModule, NovoListModule, NovoOverlayModule, NovoSwitchModule],
                    declarations: [
                        NovoPickerElement,
                        PickerResults,
                        EntityPickerResult,
                        EntityPickerResults,
                        ChecklistPickerResults,
                        GroupedMultiPickerResults,
                        DistributionListPickerResults,
                        SkillsSpecialtyPickerResults,
                    ],
                    exports: [
                        NovoPickerElement,
                        PickerResults,
                        EntityPickerResult,
                        EntityPickerResults,
                        ChecklistPickerResults,
                        GroupedMultiPickerResults,
                        DistributionListPickerResults,
                        SkillsSpecialtyPickerResults,
                    ],
                    entryComponents: [
                        PickerResults,
                        EntityPickerResult,
                        EntityPickerResults,
                        ChecklistPickerResults,
                        GroupedMultiPickerResults,
                        DistributionListPickerResults,
                        SkillsSpecialtyPickerResults,
                    ],
                },] }
    ];
    return NovoPickerModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Value accessor for the component (supports ngModel)
/** @type {?} */
var SEARCH_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NovoSearchBoxElement; }),
    multi: true,
};
var NovoSearchBoxElement = /** @class */ (function () {
    function NovoSearchBoxElement(element, labels, _changeDetectorRef, _zone) {
        this.element = element;
        this.labels = labels;
        this._changeDetectorRef = _changeDetectorRef;
        this._zone = _zone;
        this.icon = 'search';
        this.placeholder = 'Search...';
        this.alwaysOpen = false;
        this.theme = 'positive';
        this.closeOnSelect = true;
        this.searchChanged = new EventEmitter();
        this.focused = false;
        /**
         * View -> model callback called when value changes
         */
        this._onChange = function () { };
        /**
         * View -> model callback called when autocomplete has been touched
         */
        this._onTouched = function () { };
    }
    /**
     * @name showFasterFind
     * @description This function shows the picker and adds the active class (for animation)
     */
    /**
     * \@name showFasterFind
     * \@description This function shows the picker and adds the active class (for animation)
     * @param {?=} event
     * @param {?=} forceClose
     * @return {?}
     */
    NovoSearchBoxElement.prototype.showSearch = /**
     * \@name showFasterFind
     * \@description This function shows the picker and adds the active class (for animation)
     * @param {?=} event
     * @param {?=} forceClose
     * @return {?}
     */
    function (event, forceClose) {
        var _this = this;
        if (forceClose === void 0) { forceClose = false; }
        if (!this.panelOpen) {
            // Reset search
            // Set focus on search
            setTimeout(function () {
                /** @type {?} */
                var element = _this.input.nativeElement;
                if (element) {
                    element.focus();
                }
            }, 10);
        }
    };
    /**
     * @return {?}
     */
    NovoSearchBoxElement.prototype.onFocus = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._zone.run(function () {
            _this.focused = true;
            _this.openPanel();
        });
    };
    /**
     * @return {?}
     */
    NovoSearchBoxElement.prototype.onBlur = /**
     * @return {?}
     */
    function () {
        this.focused = false;
    };
    /** BEGIN: Convenient Panel Methods. */
    /**
     * BEGIN: Convenient Panel Methods.
     * @return {?}
     */
    NovoSearchBoxElement.prototype.openPanel = /**
     * BEGIN: Convenient Panel Methods.
     * @return {?}
     */
    function () {
        this.overlay.openPanel();
    };
    /**
     * @return {?}
     */
    NovoSearchBoxElement.prototype.closePanel = /**
     * @return {?}
     */
    function () {
        this.overlay.closePanel();
    };
    Object.defineProperty(NovoSearchBoxElement.prototype, "panelOpen", {
        get: /**
         * @return {?}
         */
        function () {
            return this.overlay && this.overlay.panelOpen;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoSearchBoxElement.prototype, "active", {
        get: /**
         * @return {?}
         */
        function () {
            return this.panelOpen || this.alwaysOpen;
        },
        enumerable: true,
        configurable: true
    });
    /** END: Convenient Panel Methods. */
    /**
     * END: Convenient Panel Methods.
     * @param {?} event
     * @return {?}
     */
    NovoSearchBoxElement.prototype._handleKeydown = /**
     * END: Convenient Panel Methods.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if ((event.keyCode === ESCAPE || event.keyCode === ENTER || event.keyCode === TAB) && this.panelOpen) {
            this.closePanel();
            event.stopPropagation();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoSearchBoxElement.prototype._handleInput = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        if (document.activeElement === event.target) {
            this._onChange(((/** @type {?} */ (event.target))).value);
            if (this.debounceSearchChange) {
                clearTimeout(this.debounceSearchChange);
            }
            this.debounceSearchChange = setTimeout(function () {
                _this.searchChanged.emit(((/** @type {?} */ (event.target))).value);
            }, 400);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoSearchBoxElement.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this._setValue(value);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoSearchBoxElement.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoSearchBoxElement.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onTouched = fn;
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    NovoSearchBoxElement.prototype._setValue = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.value = value;
        /** @type {?} */
        var toDisplay = value;
        if (value && this.displayField) {
            toDisplay = value.hasOwnProperty(this.displayField) ? value[this.displayField] : value;
        }
        // Simply falling back to an empty string if the display value is falsy does not work properly.
        // The display value can also be the number zero and shouldn't fall back to an empty string.
        this.displayValue = toDisplay ? toDisplay : '';
        this.input.nativeElement.value = this.displayValue;
        this._changeDetectorRef.markForCheck();
    };
    /**
     * This method closes the panel, and if a value is specified, also sets the associated
     * control to that value. It will also mark the control as dirty if this interaction
     * stemmed from the user.
     */
    /**
     * This method closes the panel, and if a value is specified, also sets the associated
     * control to that value. It will also mark the control as dirty if this interaction
     * stemmed from the user.
     * @param {?} event
     * @return {?}
     */
    NovoSearchBoxElement.prototype.setValueAndClose = /**
     * This method closes the panel, and if a value is specified, also sets the associated
     * control to that value. It will also mark the control as dirty if this interaction
     * stemmed from the user.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event && event.value) {
            this._setValue(event.value);
            this._onChange(event.value);
        }
        this.closePanel();
    };
    /**
     * Clear any previous selected option and emit a selection change event for this option
     */
    /**
     * Clear any previous selected option and emit a selection change event for this option
     * @param {?} skip
     * @return {?}
     */
    NovoSearchBoxElement.prototype.clearValue = /**
     * Clear any previous selected option and emit a selection change event for this option
     * @param {?} skip
     * @return {?}
     */
    function (skip) {
        this.writeValue(null);
        this._onChange(null);
    };
    NovoSearchBoxElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-search',
                    providers: [SEARCH_VALUE_ACCESSOR],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: "\n        <!-- SEARCH ICON -->\n        <button theme=\"fab\" [color]=\"theme\" [icon]=\"icon\" (click)=\"showSearch()\" [tooltip]=\"hint\" tooltipPosition=\"bottom\" data-automation-id=\"novo-search-fab\"></button>\n        <!-- SEARCH INPUT -->\n        <input type=\"text\" [attr.name]=\"name\" [attr.value]=\"displayValue\" [attr.placeholder]=\"placeholder\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" (keydown)=\"_handleKeydown($event)\" (input)=\"_handleInput($event)\" #input data-automation-id=\"novo-search-input\"/>\n        <!-- SEARCH OVERLAY -->\n        <novo-overlay-template [parent]=\"element\" [closeOnSelect]=\"closeOnSelect\" position=\"above-below\" (select)=\"closePanel()\" (closing)=\"onBlur()\">\n            <ng-content></ng-content>\n        </novo-overlay-template>\n    "
                }] }
    ];
    /** @nocollapse */
    NovoSearchBoxElement.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NovoLabelService },
        { type: ChangeDetectorRef },
        { type: NgZone }
    ]; };
    NovoSearchBoxElement.propDecorators = {
        name: [{ type: Input }],
        icon: [{ type: Input }],
        placeholder: [{ type: Input }],
        alwaysOpen: [{ type: Input }],
        theme: [{ type: Input }],
        closeOnSelect: [{ type: Input }],
        displayField: [{ type: Input }],
        displayValue: [{ type: Input }],
        hint: [{ type: Input }],
        searchChanged: [{ type: Output }],
        focused: [{ type: HostBinding, args: ['class.focused',] }],
        overlay: [{ type: ViewChild, args: [NovoOverlayTemplateComponent,] }],
        input: [{ type: ViewChild, args: ['input',] }],
        active: [{ type: HostBinding, args: ['class.active',] }]
    };
    return NovoSearchBoxElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoSearchBoxModule = /** @class */ (function () {
    function NovoSearchBoxModule() {
    }
    NovoSearchBoxModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, NovoButtonModule, NovoPickerModule, NovoTooltipModule, NovoOverlayModule],
                    declarations: [NovoSearchBoxElement],
                    exports: [NovoSearchBoxElement],
                },] }
    ];
    return NovoSearchBoxModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var dragula = dragulaImported;
var NovoDragulaService = /** @class */ (function () {
    function NovoDragulaService() {
        this.cancel = new EventEmitter();
        this.cloned = new EventEmitter();
        this.drag = new EventEmitter();
        this.dragend = new EventEmitter();
        this.drop = new EventEmitter();
        this.out = new EventEmitter();
        this.over = new EventEmitter();
        this.remove = new EventEmitter();
        this.shadow = new EventEmitter();
        this.dropModel = new EventEmitter();
        this.removeModel = new EventEmitter();
        this.events = ['cancel', 'cloned', 'drag', 'dragend', 'drop', 'out', 'over', 'remove', 'shadow', 'dropModel', 'removeModel'];
        this.bags = [];
    }
    /**
     * @name add
     * @param name
     * @param drake
     */
    /**
     * \@name add
     * @param {?} name
     * @param {?} drake
     * @return {?}
     */
    NovoDragulaService.prototype.add = /**
     * \@name add
     * @param {?} name
     * @param {?} drake
     * @return {?}
     */
    function (name, drake) {
        /** @type {?} */
        var bag = this.find(name);
        if (bag) {
            throw new Error("Bag named: " + name + " already exists.");
        }
        bag = {
            name: name,
            drake: drake,
        };
        this.bags.push(bag);
        if (drake.models) {
            // models to sync with (must have same structure as containers)
            this.handleModels(name, drake);
        }
        if (!bag.initEvents) {
            this.setupEvents(bag);
        }
        return bag;
    };
    /**
     * @name find
     * @param name
     */
    /**
     * \@name find
     * @param {?} name
     * @return {?}
     */
    NovoDragulaService.prototype.find = /**
     * \@name find
     * @param {?} name
     * @return {?}
     */
    function (name) {
        for (var i = 0; i < this.bags.length; i++) {
            if (this.bags[i].name === name) {
                return this.bags[i];
            }
        }
        return null;
    };
    /**
     * @name destroy
     * @param name
     */
    /**
     * \@name destroy
     * @param {?} name
     * @return {?}
     */
    NovoDragulaService.prototype.destroy = /**
     * \@name destroy
     * @param {?} name
     * @return {?}
     */
    function (name) {
        /** @type {?} */
        var bag = this.find(name);
        /** @type {?} */
        var i = this.bags.indexOf(bag);
        this.bags.splice(i, 1);
        bag.drake.destroy();
    };
    /**
     * @name setOptions
     * @param name
     * @param options
     */
    /**
     * \@name setOptions
     * @param {?} name
     * @param {?} options
     * @return {?}
     */
    NovoDragulaService.prototype.setOptions = /**
     * \@name setOptions
     * @param {?} name
     * @param {?} options
     * @return {?}
     */
    function (name, options) {
        /** @type {?} */
        var bag = this.add(name, dragula(options));
        this.handleModels(name, bag.drake);
    };
    /**
     * @name handleModels
     * @param name
     * @param drake
     */
    /**
     * \@name handleModels
     * @param {?} name
     * @param {?} drake
     * @return {?}
     */
    NovoDragulaService.prototype.handleModels = /**
     * \@name handleModels
     * @param {?} name
     * @param {?} drake
     * @return {?}
     */
    function (name, drake) {
        var _this = this;
        /** @type {?} */
        var dragElm;
        /** @type {?} */
        var dragIndex;
        /** @type {?} */
        var dropIndex;
        /** @type {?} */
        var sourceModel;
        drake.on('remove', function (el, source) {
            if (!drake.models) {
                return;
            }
            sourceModel = drake.models[drake.containers.indexOf(source)];
            sourceModel.splice(dragIndex, 1);
            _this.removeModel.emit([name, el, source]);
        });
        drake.on('drag', function (el, source) {
            dragElm = el;
            dragIndex = _this.domIndexOf(el, source);
        });
        drake.on('drop', function (dropElm, target, source) {
            if (!drake.models) {
                return;
            }
            dropIndex = _this.domIndexOf(dropElm, target);
            sourceModel = drake.models[drake.containers.indexOf(source)];
            if (target === source) {
                sourceModel.splice(dropIndex, 0, sourceModel.splice(dragIndex, 1)[0]);
            }
            else {
                /** @type {?} */
                var notCopy = dragElm === dropElm;
                /** @type {?} */
                var targetModel = drake.models[drake.containers.indexOf(target)];
                /** @type {?} */
                var dropElmModel = notCopy ? sourceModel[dragIndex] : JSON.parse(JSON.stringify(sourceModel[dragIndex]));
                if (notCopy) {
                    sourceModel.splice(dragIndex, 1);
                }
                targetModel.splice(dropIndex, 0, dropElmModel);
                target.removeChild(dropElm); // element must be removed for ngFor to apply correctly
            }
            _this.dropModel.emit([name, dropElm, target, source]);
        });
    };
    /**
     * @name setupEvents
     * @param bag
     */
    /**
     * \@name setupEvents
     * @param {?} bag
     * @return {?}
     */
    NovoDragulaService.prototype.setupEvents = /**
     * \@name setupEvents
     * @param {?} bag
     * @return {?}
     */
    function (bag) {
        bag.initEvents = true;
        /** @type {?} */
        var that = this;
        /** @type {?} */
        var emitter = function (type) {
            /**
             * @return {?}
             */
            function replicate() {
                /** @type {?} */
                var args = Array.prototype.slice.call(arguments);
                that[type].emit([bag.name].concat(args));
            }
            bag.drake.on(type, replicate);
        };
        this.events.forEach(emitter);
    };
    /**
     * @name domIndexOf
     * @param child
     * @param parent
     */
    /**
     * \@name domIndexOf
     * @param {?} child
     * @param {?} parent
     * @return {?}
     */
    NovoDragulaService.prototype.domIndexOf = /**
     * \@name domIndexOf
     * @param {?} child
     * @param {?} parent
     * @return {?}
     */
    function (child, parent) {
        return Array.prototype.indexOf.call(parent.children, child);
    };
    NovoDragulaService.decorators = [
        { type: Injectable }
    ];
    return NovoDragulaService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var dragula$1 = dragulaImported;
var NovoDragulaElement = /** @class */ (function () {
    function NovoDragulaElement(element, dragulaService) {
        this.dragulaService = dragulaService;
        this.drake = null;
        this.container = element.nativeElement;
    }
    /**
     * @return {?}
     */
    NovoDragulaElement.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var bag = this.dragulaService.find(this.bag);
        if (bag) {
            this.drake = bag.drake;
            this.checkModel();
            this.drake.containers.push(this.container);
        }
        else {
            this.drake = dragula$1({
                containers: [this.container],
            });
            this.checkModel();
            this.dragulaService.add(this.bag, this.drake);
        }
    };
    /**
     * @return {?}
     */
    NovoDragulaElement.prototype.checkModel = /**
     * @return {?}
     */
    function () {
        if (this.dragulaModel) {
            if (this.drake.models) {
                this.drake.models.push(this.dragulaModel);
            }
            else {
                this.drake.models = [this.dragulaModel];
            }
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NovoDragulaElement.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes && changes.dragulaModel) {
            if (this.drake) {
                if (this.drake.models) {
                    /** @type {?} */
                    var modelIndex = this.drake.models.indexOf(changes.dragulaModel.previousValue);
                    this.drake.models.splice(modelIndex, 1, changes.dragulaModel.currentValue);
                }
                else {
                    this.drake.models = [changes.dragulaModel.currentValue];
                }
            }
        }
    };
    NovoDragulaElement.decorators = [
        { type: Directive, args: [{
                    selector: '[dragula]',
                },] }
    ];
    /** @nocollapse */
    NovoDragulaElement.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NovoDragulaService }
    ]; };
    NovoDragulaElement.propDecorators = {
        bag: [{ type: Input, args: ['dragula',] }],
        dragulaModel: [{ type: Input }]
    };
    return NovoDragulaElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoDragulaModule = /** @class */ (function () {
    function NovoDragulaModule() {
    }
    NovoDragulaModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [NovoDragulaElement],
                    exports: [NovoDragulaElement],
                },] }
    ];
    return NovoDragulaModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoSliderElement = /** @class */ (function () {
    function NovoSliderElement(element, labels) {
        this.element = element;
        this.labels = labels;
        this.currentSlide = 0;
        this.start = true;
        this.end = true;
        this.currSlides = ['active'];
        this.handleKeyDownFunc = this.handleKeyDown.bind(this);
    }
    /**
     * @return {?}
     */
    NovoSliderElement.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        for (var i = 0; i < this.slides; i++) {
            this.currSlides[i] = i > 0 ? 'inactive' : 'active';
        }
        // Catch Tab Events
        this.element.nativeElement.addEventListener('keydown', this.handleKeyDownFunc);
    };
    /**
     * @return {?}
     */
    NovoSliderElement.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.element.nativeElement.removeEventListener('keydown', this.handleKeyDownFunc);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoSliderElement.prototype.handleKeyDown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.keyCode === 9) {
            event.stopImmediatePropagation();
            event.preventDefault();
        }
    };
    /**
     * @param {?} direction
     * @return {?}
     */
    NovoSliderElement.prototype.changeSlide = /**
     * @param {?} direction
     * @return {?}
     */
    function (direction) {
        if (direction === 'next') {
            if (this.currentSlide === this.slides - 1) {
                return;
            }
            this.currentSlide++;
        }
        else {
            if (this.currentSlide === 0) {
                return;
            }
            this.currentSlide--;
        }
        for (var i = 0; i < this.slides; i++) {
            this.currSlides[i] = 'inactive';
        }
        this.currSlides[this.currentSlide] = 'active';
        this.start = this.currentSlide === 0;
        this.end = this.currentSlide === this.slides - 1;
        this.currentClass = "slide-" + this.currentSlide;
    };
    NovoSliderElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-slider',
                    template: "\n        <section class=\"slides\">\n            <ng-content select=\"div[slide]\"></ng-content>\n        </section>\n        <div class=\"controls\">\n            <button *ngIf=\"!start\" theme=\"icon\" icon=\"previous\" (click)=\"changeSlide('back')\"></button>\n            <div class=\"indicators\">\n                <div class=\"indicator-circle\" *ngFor=\"let indicator of currSlides; let i = index\" [ngClass]=\"indicator\"></div>\n            </div>\n            <button *ngIf=\"!end\" theme=\"primary\" icon=\"next\" (click)=\"changeSlide('next')\">{{ labels.next }}</button>\n            <ng-content select=\"button\" *ngIf=\"end\"></ng-content>\n        </div>\n    ",
                    host: {
                        '[class]': 'currentClass',
                    }
                }] }
    ];
    /** @nocollapse */
    NovoSliderElement.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NovoLabelService }
    ]; };
    NovoSliderElement.propDecorators = {
        slides: [{ type: Input }]
    };
    return NovoSliderElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoSliderModule = /** @class */ (function () {
    function NovoSliderModule() {
    }
    NovoSliderModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, NovoButtonModule],
                    declarations: [NovoSliderElement],
                    exports: [NovoSliderElement],
                },] }
    ];
    return NovoSliderModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Value accessor for the component (supports ngModel)
/** @type {?} */
var CHIPS_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NovoChipsElement; }),
    multi: true,
};
var NovoChipElement = /** @class */ (function () {
    function NovoChipElement() {
        this.disabled = false;
        this.select = new EventEmitter();
        this.remove = new EventEmitter();
        this.deselect = new EventEmitter();
    }
    Object.defineProperty(NovoChipElement.prototype, "type", {
        set: /**
         * @param {?} type
         * @return {?}
         */
        function (type) {
            this._type = type ? type.toLowerCase() : null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} e
     * @return {?}
     */
    NovoChipElement.prototype.onRemove = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (e) {
            e.stopPropagation();
            e.preventDefault();
        }
        this.remove.emit(e);
        return false;
    };
    /**
     * @param {?} e
     * @return {?}
     */
    NovoChipElement.prototype.onSelect = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (e) {
            e.stopPropagation();
            e.preventDefault();
        }
        this.select.emit(e);
        return false;
    };
    /**
     * @param {?} e
     * @return {?}
     */
    NovoChipElement.prototype.onDeselect = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (e) {
            e.stopPropagation();
            e.preventDefault();
        }
        this.deselect.emit(e);
        return false;
    };
    NovoChipElement.decorators = [
        { type: Component, args: [{
                    selector: 'chip,novo-chip',
                    template: "\n        <span (click)=\"onSelect($event)\" (mouseenter)=\"onSelect($event)\" (mouseleave)=\"onDeselect($event)\" [ngClass]=\"_type\">\n            <i *ngIf=\"_type\" class=\"bhi-circle\"></i>\n            <span><ng-content></ng-content></span>\n        </span>\n        <i class=\"bhi-close\" *ngIf=\"!disabled\" (click)=\"onRemove($event)\"></i>\n    "
                }] }
    ];
    NovoChipElement.propDecorators = {
        type: [{ type: Input }],
        disabled: [{ type: Input }],
        select: [{ type: Output }],
        remove: [{ type: Output }],
        deselect: [{ type: Output }]
    };
    return NovoChipElement;
}());
var NovoChipsElement = /** @class */ (function () {
    function NovoChipsElement(element, componentUtils, labels) {
        this.element = element;
        this.componentUtils = componentUtils;
        this.labels = labels;
        this.closeOnSelect = false;
        this.placeholder = '';
        this._disablePickerInput = false;
        this.changed = new EventEmitter();
        this.focus = new EventEmitter();
        this.blur = new EventEmitter();
        this.typing = new EventEmitter();
        this.items = [];
        this.selected = null;
        this.config = {};
        // private data model
        this._value = '';
        this._items = new ReplaySubject(1);
        // Placeholders for the callbacks
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
    }
    Object.defineProperty(NovoChipsElement.prototype, "disablePickerInput", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disablePickerInput;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._disablePickerInput = coerceBooleanProperty(v);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoChipsElement.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.setItems();
    };
    Object.defineProperty(NovoChipsElement.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        set: /**
         * @param {?} selected
         * @return {?}
         */
        function (selected) {
            this.itemToAdd = '';
            if (selected !== this._value) {
                this._value = selected;
                this.changed.emit({ value: selected, rawValue: this.items });
                this.onModelChange(selected);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoChipsElement.prototype.clearValue = /**
     * @return {?}
     */
    function () {
        this.items = [];
        this._items.next(this.items);
        this.value = null;
        this.changed.emit({ value: this.value, rawValue: this.items });
        this.onModelChange(this.value);
    };
    /**
     * @return {?}
     */
    NovoChipsElement.prototype.setItems = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var e_1, _a;
        this.items = [];
        if (this.model && Array.isArray(this.model)) {
            /** @type {?} */
            var noLabels = [];
            try {
                for (var _b = __values(this.model), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var value = _c.value;
                    /** @type {?} */
                    var label = void 0;
                    if (this.source && this.source.format && Helpers.validateInterpolationProps(this.source.format, value)) {
                        label = Helpers.interpolate(this.source.format, value);
                    }
                    if (this.source && label && label !== this.source.format) {
                        this.items.push({
                            value: value,
                            label: label,
                        });
                    }
                    else if (this.source.getLabels && typeof this.source.getLabels === 'function') {
                        noLabels.push(value);
                    }
                    else if (this.source.options && Array.isArray(this.source.options)) {
                        this.items.push(this.getLabelFromOptions(value));
                    }
                    else if (this.source.categoryMap && this.source.categoryMap.size) {
                        this.items.push(value);
                    }
                    else {
                        this.items.push({
                            value: value,
                            label: value,
                        });
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (noLabels.length > 0 && this.source && this.source.getLabels && typeof this.source.getLabels === 'function') {
                this.source.getLabels(noLabels).then(function (result) {
                    var e_2, _a;
                    try {
                        for (var result_1 = __values(result), result_1_1 = result_1.next(); !result_1_1.done; result_1_1 = result_1.next()) {
                            var value = result_1_1.value;
                            if (value.hasOwnProperty('label')) {
                                _this.items.push({
                                    value: value,
                                    label: value.label,
                                });
                            }
                            else if (_this.source.options && Array.isArray(_this.source.options)) {
                                _this.items.push(_this.getLabelFromOptions(value));
                            }
                            else {
                                _this.items.push(value);
                            }
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (result_1_1 && !result_1_1.done && (_a = result_1.return)) _a.call(result_1);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    _this._items.next(_this.items);
                });
            }
        }
        this.changed.emit({ value: this.model, rawValue: this.items });
        this._items.next(this.items);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoChipsElement.prototype.getLabelFromOptions = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var optLabel = this.source.options.find(function (val) { return val.value === value; });
        return {
            value: value,
            label: optLabel ? optLabel.label : value,
        };
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    NovoChipsElement.prototype.deselectAll = /**
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        this.selected = null;
        this.hidePreview();
    };
    /**
     * @param {?=} event
     * @param {?=} item
     * @return {?}
     */
    NovoChipsElement.prototype.select = /**
     * @param {?=} event
     * @param {?=} item
     * @return {?}
     */
    function (event, item) {
        this.blur.emit(event);
        this.deselectAll();
        this.selected = item;
        this.showPreview();
    };
    /**
     * @param {?=} event
     * @param {?=} item
     * @return {?}
     */
    NovoChipsElement.prototype.deselect = /**
     * @param {?=} event
     * @param {?=} item
     * @return {?}
     */
    function (event, item) {
        this.blur.emit(event);
        this.deselectAll();
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    NovoChipsElement.prototype.onTyping = /**
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        this.typing.emit(event);
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    NovoChipsElement.prototype.onFocus = /**
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        this.deselectAll();
        this.element.nativeElement.classList.add('selected');
        this.focus.emit(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoChipsElement.prototype.add = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event && !(event instanceof Event)) {
            this.items.push(event);
            this.value = this.source && this.source.valueFormatter ? this.source.valueFormatter(this.items) : this.items.map(function (i) { return i.value; });
            // Set focus on the picker
            /** @type {?} */
            var input = this.element.nativeElement.querySelector('novo-picker > input');
            if (input) {
                input.focus();
            }
        }
        this._items.next(this.items);
    };
    /**
     * @param {?} event
     * @param {?} item
     * @return {?}
     */
    NovoChipsElement.prototype.remove = /**
     * @param {?} event
     * @param {?} item
     * @return {?}
     */
    function (event, item) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        this.items.splice(this.items.indexOf(item), 1);
        this.deselectAll();
        this.value = this.source && this.source.valueFormatter ? this.source.valueFormatter(this.items) : this.items.map(function (i) { return i.value; });
        this.changed.emit({ value: this.value.length ? this.value : '', rawValue: this.items });
        this.onModelChange(this.value.length ? this.value : '');
        this._items.next(this.items);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoChipsElement.prototype.onKeyDown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.keyCode === KeyCodes.BACKSPACE) {
            if (event.target && event.target.value.length === 0 && this.items.length) {
                if (event) {
                    event.stopPropagation();
                    event.preventDefault();
                }
                if (this.selected) {
                    this.remove(event, this.selected);
                }
                else {
                    this.select(event, this.items[this.items.length - 1]);
                }
            }
        }
    };
    // Set touched on blur
    // Set touched on blur
    /**
     * @param {?} e
     * @return {?}
     */
    NovoChipsElement.prototype.onTouched = 
    // Set touched on blur
    /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.element.nativeElement.classList.remove('selected');
        this.onModelTouched();
        this.blur.emit(e);
    };
    /**
     * @param {?} model
     * @return {?}
     */
    NovoChipsElement.prototype.writeValue = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        this.model = model;
        this.setItems();
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoChipsElement.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoChipsElement.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelTouched = fn;
    };
    /**
     * @param {?} disabled
     * @return {?}
     */
    NovoChipsElement.prototype.setDisabledState = /**
     * @param {?} disabled
     * @return {?}
     */
    function (disabled) {
        this._disablePickerInput = disabled;
    };
    /**
     * @name showPreview
     *
     * @description This method creates an instance of the preview (called popup) and adds all the bindings to that
     * instance. Will reuse the popup or create a new one if it does not already exist. Will only work if there is
     * a previewTemplate given in the config.
     */
    /**
     * \@name showPreview
     *
     * \@description This method creates an instance of the preview (called popup) and adds all the bindings to that
     * instance. Will reuse the popup or create a new one if it does not already exist. Will only work if there is
     * a previewTemplate given in the config.
     * @return {?}
     */
    NovoChipsElement.prototype.showPreview = /**
     * \@name showPreview
     *
     * \@description This method creates an instance of the preview (called popup) and adds all the bindings to that
     * instance. Will reuse the popup or create a new one if it does not already exist. Will only work if there is
     * a previewTemplate given in the config.
     * @return {?}
     */
    function () {
        if (this.source.previewTemplate) {
            if (!this.popup) {
                this.popup = this.componentUtils.appendNextToLocation(this.source.previewTemplate, this.preview);
            }
            this.popup.instance.match = this.selected;
        }
    };
    /**
     * @name hidePreview
     *
     * @description - This method deletes the preview popup from the DOM.
     */
    /**
     * \@name hidePreview
     *
     * \@description - This method deletes the preview popup from the DOM.
     * @return {?}
     */
    NovoChipsElement.prototype.hidePreview = /**
     * \@name hidePreview
     *
     * \@description - This method deletes the preview popup from the DOM.
     * @return {?}
     */
    function () {
        if (this.popup) {
            this.popup.destroy();
            this.popup = null;
        }
    };
    NovoChipsElement.decorators = [
        { type: Component, args: [{
                    selector: 'chips,novo-chips',
                    providers: [CHIPS_VALUE_ACCESSOR],
                    template: "\n        <div class=\"novo-chip-container\">\n          <novo-chip\n              *ngFor=\"let item of _items | async\"\n              [type]=\"type || item?.value?.searchEntity\"\n              [class.selected]=\"item == selected\"\n              [disabled]=\"disablePickerInput\"\n              (remove)=\"remove($event, item)\"\n              (select)=\"select($event, item)\"\n              (deselect)=\"deselect($event, item)\">\n              {{ item.label }}\n          </novo-chip>\n        </div>\n        <div class=\"chip-input-container\" *ngIf=\"!maxlength || (maxlength && items.length < maxlength)\">\n            <novo-picker\n                clearValueOnSelect=\"true\"\n                [closeOnSelect]=\"closeOnSelect\"\n                [config]=\"source\"\n                [disablePickerInput]=\"disablePickerInput\"\n                [placeholder]=\"placeholder\"\n                [(ngModel)]=\"itemToAdd\"\n                (select)=\"add($event)\"\n                (keydown)=\"onKeyDown($event)\"\n                (focus)=\"onFocus($event)\"\n                (typing)=\"onTyping($event)\"\n                (blur)=\"onTouched($event)\"\n                [selected]=\"items\"\n                [overrideElement]=\"element\">\n            </novo-picker>\n        </div>\n        <div class=\"preview-container\">\n            <span #preview></span>\n        </div>\n        <i class=\"bhi-search\" [class.has-value]=\"items.length\" *ngIf=\"!disablePickerInput\"></i>\n        <label class=\"clear-all\" *ngIf=\"items.length && !disablePickerInput\" (click)=\"clearValue()\">{{ labels.clearAll }} <i class=\"bhi-times\"></i></label>\n   ",
                    host: {
                        '[class.with-value]': 'items.length > 0',
                        '[class.disabled]': 'disablePickerInput',
                    }
                }] }
    ];
    /** @nocollapse */
    NovoChipsElement.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ComponentUtils },
        { type: NovoLabelService }
    ]; };
    NovoChipsElement.propDecorators = {
        closeOnSelect: [{ type: Input }],
        placeholder: [{ type: Input }],
        source: [{ type: Input }],
        maxlength: [{ type: Input }],
        type: [{ type: Input }],
        disablePickerInput: [{ type: Input }],
        changed: [{ type: Output }],
        focus: [{ type: Output }],
        blur: [{ type: Output }],
        typing: [{ type: Output }],
        preview: [{ type: ViewChild, args: ['preview', { read: ViewContainerRef },] }],
        value: [{ type: Input }]
    };
    return NovoChipsElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Value accessor for the component (supports ngModel)
/** @type {?} */
var CHIPS_VALUE_ACCESSOR$1 = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NovoRowChipsElement; }),
    multi: true,
};
var NovoRowChipElement = /** @class */ (function (_super) {
    __extends(NovoRowChipElement, _super);
    function NovoRowChipElement() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    NovoRowChipElement.prototype.onSelect = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        return false;
    };
    NovoRowChipElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-row-chip',
                    template: "<div class=\"novo-row-chips-columns\"><ng-content></ng-content><i class=\"bhi-delete-o\" *ngIf=\"!disabled\" (click)=\"onRemove($event)\"></i></div>"
                }] }
    ];
    return NovoRowChipElement;
}(NovoChipElement));
var NovoRowChipsElement = /** @class */ (function (_super) {
    __extends(NovoRowChipsElement, _super);
    function NovoRowChipsElement(element, componentUtils, labels) {
        var _this = _super.call(this, element, componentUtils, labels) || this;
        _this.closeOnSelect = true;
        return _this;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    NovoRowChipsElement.prototype.onKeyDown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return;
    };
    NovoRowChipsElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-row-chips',
                    providers: [CHIPS_VALUE_ACCESSOR$1],
                    host: {
                        '[class.with-value]': 'items.length > 0',
                    },
                    template: "\n        <div class=\"novo-row-chips-columns\" *ngIf=\"items.length > 0\">\n          <div class=\"column-label\" *ngFor=\"let column of source.columns\">{{ column.label }}</div>\n        </div>\n        <div class=\"novo-row-chips-empty-message\" *ngIf=\"source.emptyReadOnlyMessage && disablePickerInput && items.length === 0\">{{source.emptyReadOnlyMessage}}</div>\n        <novo-row-chip\n          *ngFor=\"let item of _items | async\"\n          [type]=\"type || item?.value?.searchEntity\"\n          [class.selected]=\"item == selected\"\n          [disabled]=\"disablePickerInput\"\n          (remove)=\"remove($event, item)\"\n          (select)=\"select($event, item)\">\n          <div class=\"column-data\" *ngFor=\"let column of source.columns\"><span>{{ column.data(item) }}</span></div>\n        </novo-row-chip>\n        <novo-picker\n            clearValueOnSelect=\"true\"\n            [closeOnSelect]=\"closeOnSelect\"\n            [config]=\"source\"\n            [disablePickerInput]=\"disablePickerInput\"\n            [hidden]=\"disablePickerInput\"\n            [placeholder]=\"placeholder\"\n            [(ngModel)]=\"itemToAdd\"\n            (select)=\"add($event)\"\n            (keydown)=\"onKeyDown($event)\"\n            (focus)=\"onFocus($event)\"\n            (typing)=\"onTyping($event)\"\n            (blur)=\"onTouched($event)\"\n            [selected]=\"items\"\n            [overrideElement]=\"element\"\n            *ngIf=\"!maxlength || (maxlength && items.length < maxlength)\">\n        </novo-picker>\n        <div class=\"preview-container\">\n            <span #preview></span>\n        </div>\n   "
                }] }
    ];
    /** @nocollapse */
    NovoRowChipsElement.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ComponentUtils },
        { type: NovoLabelService }
    ]; };
    NovoRowChipsElement.propDecorators = {
        closeOnSelect: [{ type: Input }]
    };
    return NovoRowChipsElement;
}(NovoChipsElement));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoChipsModule = /** @class */ (function () {
    function NovoChipsModule() {
    }
    NovoChipsModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, FormsModule, NovoPickerModule],
                    declarations: [NovoChipElement, NovoChipsElement, NovoRowChipElement, NovoRowChipsElement],
                    exports: [NovoChipElement, NovoChipsElement, NovoRowChipElement, NovoRowChipsElement],
                },] }
    ];
    return NovoChipsModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Value accessor for the component (supports ngModel)
/** @type {?} */
var DATE_PICKER_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NovoDatePickerElement; }),
    multi: true,
};
var NovoDatePickerElement = /** @class */ (function () {
    function NovoDatePickerElement(labels, element) {
        this.labels = labels;
        this.element = element;
        this.weekStart = 0;
        // Select callback for output
        this.onSelect = new EventEmitter(false);
        // List of all the weekdays
        this.weekdays = [];
        // List of all months
        this.months = [];
        // List of all years (generated in ngOnInit)
        this.years = [];
        // Default view mode (select days)
        this.view = 'days';
        this.rangeSelectMode = 'startDate';
        this._onChange = function () { };
        this._onTouched = function () { };
    }
    /**
     * @return {?}
     */
    NovoDatePickerElement.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // Determine the year array
        /** @type {?} */
        var now = new Date();
        /** @type {?} */
        var start = this.minYear ? Number(this.minYear) : now.getFullYear() - 100;
        /** @type {?} */
        var end = this.maxYear ? Number(this.maxYear) : now.getFullYear() + 10;
        for (var i = start; i <= end; i++) {
            this.years.push(i);
        }
        // Set weekdays / months
        this.weekdays = this.setupWeekdays();
        this.months = this.labels.getMonths();
        // Set labels
        this.selectedLabel = this.labels.startDate;
        this.selected2Label = this.labels.endDate;
        this.updateView(this.model, false, true);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NovoDatePickerElement.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        /** @type {?} */
        var weekRangeSelectChange = changes['weekRangeSelect'];
        if (weekRangeSelectChange &&
            weekRangeSelectChange.currentValue !== weekRangeSelectChange.previousValue &&
            !weekRangeSelectChange.firstChange) {
            this.clearRange();
        }
        /** @type {?} */
        var weekStartChanges = changes['weekStart'];
        if (weekStartChanges && weekStartChanges.currentValue !== weekStartChanges.previousValue && !weekStartChanges.firstChange) {
            this.weekdays = this.setupWeekdays();
            this.updateView(this.model, false, false);
        }
    };
    /**
     * @return {?}
     */
    NovoDatePickerElement.prototype.setupWeekdays = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var weekdays = this.labels.getWeekdays();
        // Weekstart must be 0-6 (Sunday - Saturday)
        if (!Helpers.isBlank(this.weekStart) && this.weekStart > 0 && this.weekStart <= 6) {
            /** @type {?} */
            var newStart = weekdays.splice(this.weekStart);
            weekdays = __spread(newStart, weekdays);
        }
        return weekdays;
    };
    /**
     * @param {?} range
     * @param {?} day
     * @param {?} selected
     * @param {?} selected2
     * @param {?} hoverDay
     * @param {?} rangeSelectMode
     * @param {?} weekRangeSelect
     * @return {?}
     */
    NovoDatePickerElement.prototype.isSelectingRange = /**
     * @param {?} range
     * @param {?} day
     * @param {?} selected
     * @param {?} selected2
     * @param {?} hoverDay
     * @param {?} rangeSelectMode
     * @param {?} weekRangeSelect
     * @return {?}
     */
    function (range, day, selected, selected2, hoverDay, rangeSelectMode, weekRangeSelect) {
        if (range && !weekRangeSelect) {
            /** @type {?} */
            var isRangeModeEndDate = rangeSelectMode === 'endDate' && (selected && selected2 && isAfter(day, selected2) && isBefore(day, hoverDay));
            /** @type {?} */
            var isRangeModeStartDate = rangeSelectMode === 'startDate' && (selected && selected2 && isBefore(day, selected) && isAfter(day, hoverDay));
            /** @type {?} */
            var isNotSelected = !selected && selected2 && isBefore(day, selected2) && isAfter(day, hoverDay);
            /** @type {?} */
            var isNotSelected2 = selected && !selected2 && isAfter(day, selected) && isBefore(day, hoverDay);
            return isNotSelected2 || isNotSelected || isRangeModeStartDate || isRangeModeEndDate;
        }
        return false;
    };
    /**
     * @param {?} range
     * @param {?} day
     * @param {?} selected
     * @param {?} selected2
     * @return {?}
     */
    NovoDatePickerElement.prototype.isEndFill = /**
     * @param {?} range
     * @param {?} day
     * @param {?} selected
     * @param {?} selected2
     * @return {?}
     */
    function (range, day, selected, selected2) {
        if (range && selected2 && selected) {
            return !isSameDay(selected, selected2) && isSameDay(day, selected2) && isAfter(day, selected);
        }
        return false;
    };
    /**
     * @param {?} range
     * @param {?} day
     * @param {?} selected
     * @param {?} selected2
     * @return {?}
     */
    NovoDatePickerElement.prototype.isStartFill = /**
     * @param {?} range
     * @param {?} day
     * @param {?} selected
     * @param {?} selected2
     * @return {?}
     */
    function (range, day, selected, selected2) {
        if (range && selected2 && selected) {
            return !isSameDay(selected, selected2) && isSameDay(day, selected) && isBefore(day, selected2);
        }
        return false;
    };
    /**
     * @param {?} range
     * @param {?} day
     * @param {?} selected
     * @param {?} selected2
     * @return {?}
     */
    NovoDatePickerElement.prototype.isFiller = /**
     * @param {?} range
     * @param {?} day
     * @param {?} selected
     * @param {?} selected2
     * @return {?}
     */
    function (range, day, selected, selected2) {
        if (range && selected2 && selected) {
            return ((isAfter(day, selected) && isBefore(day, selected2)) ||
                isSameDay(day, selected) ||
                isSameDay(day, selected2));
        }
        return false;
    };
    /**
     * @param {?} range
     * @param {?} day
     * @param {?} selected
     * @param {?} selected2
     * @return {?}
     */
    NovoDatePickerElement.prototype.isSelected = /**
     * @param {?} range
     * @param {?} day
     * @param {?} selected
     * @param {?} selected2
     * @return {?}
     */
    function (range, day, selected, selected2) {
        if (range) {
            return (day &&
                ((selected &&
                    (day.getDate() === selected.getDate() &&
                        day.getMonth() === selected.getMonth() &&
                        day.getFullYear() === selected.getFullYear())) ||
                    (selected2 &&
                        (day.getDate() === selected2.getDate() &&
                            day.getMonth() === selected2.getMonth() &&
                            day.getFullYear() === selected2.getFullYear()))));
        }
        return day.getDate() === selected.getDate() && day.getMonth() === selected.getMonth() && day.getFullYear() === selected.getFullYear();
    };
    /**
     * @param {?} day
     * @param {?} start
     * @param {?} end
     * @return {?}
     */
    NovoDatePickerElement.prototype.isDisabled = /**
     * @param {?} day
     * @param {?} start
     * @param {?} end
     * @return {?}
     */
    function (day, start, end) {
        return isBefore(day, start) || isAfter(day, end);
    };
    /**
     * @param {?} date
     * @param {?} fireEvents
     * @param {?} markedSelected
     * @return {?}
     */
    NovoDatePickerElement.prototype.updateView = /**
     * @param {?} date
     * @param {?} fireEvents
     * @param {?} markedSelected
     * @return {?}
     */
    function (date, fireEvents, markedSelected) {
        if (date && date.startDate === null) {
            this.clearRange();
        }
        else {
            if (!date) {
                this.clearRange();
            }
            /** @type {?} */
            var value = date ? new Date(date) : new Date();
            value = this.removeTime(value);
            this.month = new Date(value);
            this.monthLabel = this.labels.formatDateWithFormat(this.month, { month: 'short' });
            /** @type {?} */
            var start = new Date(value.getTime());
            start.setDate(1);
            this.removeTime(start.setDate(1));
            this.buildMonth(start, this.month);
            if (markedSelected) {
                this.select(null, { date: value }, fireEvents);
            }
        }
    };
    /**
     * @return {?}
     */
    NovoDatePickerElement.prototype.setToday = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var tmp = new Date();
        this.updateView(tmp, true, true);
        // Go back to days
        this.open(null, 'days');
    };
    /**
     * @return {?}
     */
    NovoDatePickerElement.prototype.clearRange = /**
     * @return {?}
     */
    function () {
        this.selected = null;
        this.selectedLabel = this.labels.startDate;
        this.selected2 = null;
        this.selected2Label = this.labels.endDate;
    };
    /**
     * @param {?} month
     * @return {?}
     */
    NovoDatePickerElement.prototype.setMonth = /**
     * @param {?} month
     * @return {?}
     */
    function (month) {
        /** @type {?} */
        var date = this.month ? this.month : new Date();
        /** @type {?} */
        var tmp = setMonth(date, month);
        this.updateView(tmp, true, false);
        // Go back to days
        this.open(null, 'days');
    };
    /**
     * @param {?} year
     * @return {?}
     */
    NovoDatePickerElement.prototype.setYear = /**
     * @param {?} year
     * @return {?}
     */
    function (year) {
        /** @type {?} */
        var date = this.month ? this.month : new Date();
        /** @type {?} */
        var tmp = setYear(date, year);
        this.updateView(tmp, true, false);
        // Go back to days
        this.open(null, 'days');
    };
    /**
     * @param {?} event
     * @param {?} day
     * @param {?} fireEvents
     * @return {?}
     */
    NovoDatePickerElement.prototype.select = /**
     * @param {?} event
     * @param {?} day
     * @param {?} fireEvents
     * @return {?}
     */
    function (event, day, fireEvents) {
        Helpers.swallowEvent(event);
        if (this.range) {
            if (this.weekRangeSelect) {
                this.selected = startOfWeek(day.date, { weekStartsOn: this.weekStart });
                this.selected2 = endOfWeek(day.date, { weekStartsOn: this.weekStart });
                this.selectedLabel = this.labels.formatDateWithFormat(this.selected, {
                    month: 'short',
                    day: '2-digit',
                    year: 'numeric',
                });
                this.selected2Label = this.labels.formatDateWithFormat(this.selected2, {
                    month: 'short',
                    day: '2-digit',
                    year: 'numeric',
                });
                // Make sure to fire this, since we default to the current week selected!
                if (!fireEvents && this.weekRangeSelect) {
                    this.fireRangeSelect();
                }
            }
            else if (this.rangeSelectMode === 'startDate') {
                // SET START DATE
                this.selected = startOfDay(day.date);
                this.selectedLabel = this.labels.formatDateWithFormat(this.selected, {
                    month: 'short',
                    day: '2-digit',
                    year: 'numeric',
                });
                if (this.selected2 && isAfter(day.date, this.selected2)) {
                    // CLEAR END DATE
                    this.selected2 = null;
                    this.selected2Label = this.labels.endDate;
                }
                if (event) {
                    this.rangeSelectMode = 'endDate';
                }
            }
            else if (this.rangeSelectMode === 'endDate') {
                // SET END DATE
                this.selected2 = endOfDay(day.date);
                this.selected2Label = this.labels.formatDateWithFormat(this.selected2, {
                    month: 'short',
                    day: '2-digit',
                    year: 'numeric',
                });
                if (this.selected && isBefore(day.date, this.selected)) {
                    // CLEAR START DATE
                    this.selected = null;
                    this.selectedLabel = this.labels.startDate;
                }
                if (event) {
                    this.rangeSelectMode = 'startDate';
                }
            }
        }
        else {
            this.selected = day.date;
            this.selectedLabel = this.labels.formatDateWithFormat(this.selected, {
                month: 'short',
                day: '2-digit',
                year: 'numeric',
            });
            this.updateHeading();
        }
        if (fireEvents && this.selected) {
            // Emit our output
            if (this.range && this.selected && this.selected2) {
                this.fireRangeSelect();
                // Also, update the ngModel
                this._onChange({
                    startDate: this.selected,
                    endDate: this.selected2 ? this.selected2 : null,
                });
                this.model = {
                    startDate: this.selected,
                    endDate: this.selected2 ? this.selected2 : null,
                };
            }
            if (!this.range) {
                this.onSelect.next({
                    month: this.labels.formatDateWithFormat(this.selected, { month: 'long' }),
                    year: this.selected.getFullYear(),
                    day: this.labels.formatDateWithFormat(this.selected, { weekday: 'long' }),
                    date: this.selected,
                });
                // Also, update the ngModel
                this._onChange(this.selected);
                this.model = this.selected;
            }
        }
    };
    /**
     * @return {?}
     */
    NovoDatePickerElement.prototype.fireRangeSelect = /**
     * @return {?}
     */
    function () {
        // Make sure the start date is before the end date
        if (isBefore(this.selected, this.selected2)) {
            this.onSelect.next({
                startDate: {
                    month: this.labels.formatDateWithFormat(this.selected, { month: 'long' }),
                    year: this.selected.getFullYear(),
                    day: this.labels.formatDateWithFormat(this.selected, { weekday: 'long' }),
                    date: this.selected,
                },
                endDate: {
                    month: this.labels.formatDateWithFormat(this.selected2, { month: 'long' }),
                    year: this.selected2.getFullYear(),
                    day: this.labels.formatDateWithFormat(this.selected2, { weekday: 'long' }),
                    date: this.selected2,
                },
            });
        }
    };
    /**
     * @param {?} event
     * @param {?} type
     * @return {?}
     */
    NovoDatePickerElement.prototype.open = /**
     * @param {?} event
     * @param {?} type
     * @return {?}
     */
    function (event, type) {
        var _this = this;
        Helpers.swallowEvent(event);
        // If they click the toggle two time in a row, close it (go back to days)
        if (type === this.view) {
            this.view = 'days';
        }
        else {
            this.view = type;
        }
        // Make sure to scroll the selected one into view
        if (this.view === 'years' || this.view === 'months') {
            setTimeout(function () {
                /** @type {?} */
                var container = _this.element.nativeElement.querySelector(".calendar-content." + _this.view);
                /** @type {?} */
                var selectedItem = _this.element.nativeElement.querySelector(".calendar-content." + _this.view + " ." + (_this.view === 'years' ? 'year' : 'month') + ".selected");
                if (container && selectedItem) {
                    container.scrollTop = selectedItem.offsetTop - 100;
                }
            });
        }
        this.updateHeading();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoDatePickerElement.prototype.prevMonth = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        Helpers.swallowEvent(event);
        /** @type {?} */
        var tmp = subMonths(this.month, 1);
        this.updateView(tmp, false, false);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoDatePickerElement.prototype.nextMonth = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        Helpers.swallowEvent(event);
        /** @type {?} */
        var tmp = addMonths(this.month, 1);
        this.updateView(tmp, false, false);
    };
    /**
     * @return {?}
     */
    NovoDatePickerElement.prototype.updateHeading = /**
     * @return {?}
     */
    function () {
        if (!this.selected) {
            return;
        }
        this.heading = {
            month: this.labels.formatDateWithFormat(this.selected, { month: 'long' }),
            year: this.selected.getFullYear(),
            day: this.labels.formatDateWithFormat(this.selected, { weekday: 'long' }),
            date: this.selected.getDate(),
        };
    };
    /**
     * Remove the time aspect of the date
     * @param date
     * @returns with time stripped out
     */
    /**
     * Remove the time aspect of the date
     * @param {?} date
     * @return {?} with time stripped out
     */
    NovoDatePickerElement.prototype.removeTime = /**
     * Remove the time aspect of the date
     * @param {?} date
     * @return {?} with time stripped out
     */
    function (date) {
        /** @type {?} */
        var ret = new Date(date);
        ret.setHours(12);
        ret.setSeconds(0);
        ret.setMilliseconds(0);
        return ret;
    };
    /**
     * @param {?} start
     * @param {?} month
     * @return {?}
     */
    NovoDatePickerElement.prototype.buildMonth = /**
     * @param {?} start
     * @param {?} month
     * @return {?}
     */
    function (start, month) {
        // Reset the weeks
        this.weeks = [];
        // House keeping variables to know when we are done building the month
        /** @type {?} */
        var done = false;
        /** @type {?} */
        var date = startOfWeek(start, { weekStartsOn: this.weekStart });
        /** @type {?} */
        var monthIndex = date.getMonth();
        /** @type {?} */
        var count = 0;
        while (!done) {
            // Build the days for the weeks
            this.weeks.push({ days: this.buildWeek(new Date(date.getTime()), month) });
            // Increment variables for the next iteration
            date = addDays(date, 7);
            done = count++ > 2 && monthIndex !== date.getMonth();
            monthIndex = date.getMonth();
        }
    };
    /**
     * @param {?} date
     * @param {?} month
     * @return {?}
     */
    NovoDatePickerElement.prototype.buildWeek = /**
     * @param {?} date
     * @param {?} month
     * @return {?}
     */
    function (date, month) {
        // Build out of the days of the week
        /** @type {?} */
        var days = [];
        // Iterate over the days of the week
        for (var i = 0; i < 7; i++) {
            // Push a variable on the day array with lots of helpers to make the template easier
            days.push({
                name: this.weekdays[i],
                number: date.getDate(),
                isToday: isToday(date),
                date: date,
            });
            // Increment for the next iteration
            date = addDays(date, 1);
        }
        return days;
    };
    /**
     * @param {?} range
     * @return {?}
     */
    NovoDatePickerElement.prototype.toggleRangeSelect = /**
     * @param {?} range
     * @return {?}
     */
    function (range) {
        this.rangeSelectMode = range;
    };
    /**
     * @param {?} event
     * @param {?} day
     * @return {?}
     */
    NovoDatePickerElement.prototype.rangeHover = /**
     * @param {?} event
     * @param {?} day
     * @return {?}
     */
    function (event, day) {
        this.hoverDay = day.date;
    };
    // ValueAccessor Functions
    // ValueAccessor Functions
    /**
     * @param {?} model
     * @return {?}
     */
    NovoDatePickerElement.prototype.writeValue = 
    // ValueAccessor Functions
    /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        this.model = model;
        if (Helpers.isDate(model)) {
            this.updateView(model, false, true);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoDatePickerElement.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoDatePickerElement.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onTouched = fn;
    };
    NovoDatePickerElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-date-picker',
                    providers: [DATE_PICKER_VALUE_ACCESSOR],
                    animations: [
                        trigger('startDateTextState', [
                            state('startDate', style({
                                opacity: '1.0',
                            })),
                            state('endDate', style({
                                opacity: '0.6',
                            })),
                            transition('startDate <=> endDate', animate('200ms ease-in')),
                        ]),
                        trigger('endDateTextState', [
                            state('startDate', style({
                                opacity: '0.6',
                            })),
                            state('endDate', style({
                                opacity: '1.0',
                            })),
                            transition('startDate <=> endDate', animate('200ms ease-in')),
                        ]),
                        trigger('indicatorState', [
                            state('startDate', style({
                                transform: 'translateX(0%)',
                            })),
                            state('endDate', style({
                                transform: 'translateX(100%)',
                            })),
                            transition('startDate <=> endDate', animate('200ms ease-in')),
                        ]),
                    ],
                    template: "\n        <div class=\"calendar\">\n            <div class=\"calendar-top\" *ngIf=\"!inline && !range\">\n                <h4 class=\"day\" [attr.data-automation-id]=\"heading?.day\">{{heading?.day}}</h4>\n                <h2 class=\"month\" [attr.data-automation-id]=\"heading?.month\">{{heading?.month}}</h2>\n                <h1 class=\"date\" [attr.data-automation-id]=\"heading?.date\">{{heading?.date}}</h1>\n                <h3 class=\"year\" [attr.data-automation-id]=\"heading?.year\">{{heading?.year}}</h3>\n            </div>\n            <div class=\"date-range-tabs\" *ngIf=\"range\" [class.week-select-mode]=\"weekRangeSelect\">\n                <span class=\"range-tab\" (click)=\"toggleRangeSelect('startDate')\" [@startDateTextState]=\"rangeSelectMode\" data-automation-id=\"calendar-start-date\">{{selectedLabel}}</span>\n                <span class=\"range-tab\" (click)=\"toggleRangeSelect('endDate')\" [@endDateTextState]=\"rangeSelectMode\" data-automation-id=\"calendar-end-date\">{{selected2Label}}</span>\n                <i class=\"indicator\" [@indicatorState]=\"rangeSelectMode\"></i>\n            </div>\n            <div class=\"calendar-header\">\n                <span class=\"previous\" (click)=\"prevMonth($event)\" data-automation-id=\"calendar-previous\"></span>\n                <span class=\"heading\">\n                    <span class=\"month\" (click)=\"open($event, 'months')\" data-automation-id=\"header-month\">{{monthLabel}}</span>\n                    <span class=\"year\" (click)=\"open($event, 'years')\" data-automation-id=\"header-year\">{{month?.getFullYear()}}</span>\n                </span>\n                <span class=\"next\" (click)=\"nextMonth($event)\" data-automation-id=\"calendar-next\"></span>\n            </div>\n            <table class=\"calendar-content days\" cellspacing=\"0\" cellpadding=\"0\" [hidden]=\"!(view=='days')\">\n                <thead>\n                    <tr>\n                        <th *ngFor=\"let day of weekdays\" title=\"{{day}}\" class=\"weekday\" [attr.data-automation-id]=\"day.substr(0, 2)\">{{day.substr(0, 2)}}</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr *ngFor=\"let week of weeks\">\n                        <td *ngFor=\"let day of week.days\" [ngClass]=\"{\n                            today: day.isToday,\n                            'notinmonth': day.date.getMonth() !== this.month.getMonth(),\n                            selected: isSelected(range, day.date, selected, selected2),\n                            filler: isFiller(range, day.date, selected, selected2),\n                            startfill: isStartFill(range, day.date, selected, selected2),\n                            endfill: isEndFill(range, day.date, selected, selected2),\n                            'selecting-range': isSelectingRange(range, day.date, selected, selected2, hoverDay, rangeSelectMode, weekRangeSelect)\n                           }\" (mouseover)=\"rangeHover($event, day)\" [attr.data-automation-id]=\"day.number\">\n                            <button class=\"day\" [attr.data-automation-id]=\"day.number\" [disabled]=\"isDisabled(day.date, start, end)\" (click)=\"select($event, day, true)\">{{day.number}}</button>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n            <section class=\"calendar-content months\" [hidden]=\"view !== 'months'\">\n                <div *ngFor=\"let month of months;let i = index\" (click)=\"setMonth(i)\">\n                    <div class=\"month\" [ngClass]=\"{selected: i === selected?.getMonth()}\" [attr.data-automation-id]=\"month\">{{month}}</div>\n                </div>\n            </section>\n            <section class=\"calendar-content years\" [hidden]=\"view !== 'years'\">\n                <div *ngFor=\"let year of years\" (click)=\"setYear(year)\">\n                    <div class=\"year\" [ngClass]=\"{selected: year == selected?.getFullYear()}\" [attr.data-automation-id]=\"year\">{{year}}</div>\n                </div>\n            </section>\n            <div class=\"calendar-footer\">\n                <span (click)=\"setToday()\" class=\"today\" data-automation-id=\"calendar-today\">{{ labels.today }}</span>\n            </div>\n        </div>\n    "
                }] }
    ];
    /** @nocollapse */
    NovoDatePickerElement.ctorParameters = function () { return [
        { type: NovoLabelService },
        { type: ElementRef }
    ]; };
    NovoDatePickerElement.propDecorators = {
        minYear: [{ type: Input }],
        maxYear: [{ type: Input }],
        start: [{ type: Input }],
        end: [{ type: Input }],
        inline: [{ type: Input }],
        range: [{ type: Input }],
        weekRangeSelect: [{ type: Input }],
        weekStart: [{ type: Input }],
        onSelect: [{ type: Output }],
        template: [{ type: ViewChild, args: [TemplateRef,] }]
    };
    return NovoDatePickerElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DateFormatService = /** @class */ (function () {
    function DateFormatService(labels) {
        this.labels = labels;
    }
    /**
     * @param {?} militaryTime
     * @return {?}
     */
    DateFormatService.prototype.getTimeMask = /**
     * @param {?} militaryTime
     * @return {?}
     */
    function (militaryTime) {
        var e_1, _a;
        /** @type {?} */
        var mask = [/\d/, /\d/, /:/, /\d/, /\d/];
        /** @type {?} */
        var timeFormatArray = [];
        /** @type {?} */
        var timeFormat = this.labels.timeFormatPlaceholderAM.toLowerCase();
        if (militaryTime) {
            return mask;
        }
        else {
            timeFormatArray = timeFormat.split('hh:mm');
            if (timeFormatArray && timeFormatArray.length) {
                mask = [];
                try {
                    for (var timeFormatArray_1 = __values(timeFormatArray), timeFormatArray_1_1 = timeFormatArray_1.next(); !timeFormatArray_1_1.done; timeFormatArray_1_1 = timeFormatArray_1.next()) {
                        var timeFormatPart = timeFormatArray_1_1.value;
                        if (timeFormatPart === '') {
                            mask = mask.concat([/\d/, /\d|:/, /:|\d/, /\d|\w|\s/, /\d|\s|\w/]);
                        }
                        else if (timeFormatPart.length) {
                            for (var i = 0; i < timeFormatPart.length; i++) {
                                mask.push(/\s|\w|\d|\./);
                            }
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (timeFormatArray_1_1 && !timeFormatArray_1_1.done && (_a = timeFormatArray_1.return)) _a.call(timeFormatArray_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        }
        return mask;
    };
    /**
     * @return {?}
     */
    DateFormatService.prototype.getDateMask = /**
     * @return {?}
     */
    function () {
        return [/\d/, /\d|\/|\.|\-/, /\/|\.|\-|\d/, /\d|\/|\.|\-/, /\d|\/|\.|\-/, /\d|\/|\.|\-/, /\d|\/|\.|\-/, /\d|\/|\.|\-/, /\d/, /\d/];
    };
    /**
     * @param {?=} militaryTime
     * @return {?}
     */
    DateFormatService.prototype.getDateTimeMask = /**
     * @param {?=} militaryTime
     * @return {?}
     */
    function (militaryTime) {
        if (militaryTime === void 0) { militaryTime = false; }
        return __spread(this.getDateMask(), [/\,?/, /\s/], this.getTimeMask(militaryTime));
    };
    /**
     * @param {?} militaryTime
     * @return {?}
     */
    DateFormatService.prototype.getTimePlaceHolder = /**
     * @param {?} militaryTime
     * @return {?}
     */
    function (militaryTime) {
        if (militaryTime) {
            return this.labels.timeFormatPlaceholder24Hour;
        }
        return this.labels.timeFormatPlaceholderAM;
    };
    /**
     * @param {?} dateString
     * @return {?}
     */
    DateFormatService.prototype.parseDateString = /**
     * @param {?} dateString
     * @return {?}
     */
    function (dateString) {
        /** @type {?} */
        var dateFormat = this.labels.dateFormat;
        /** @type {?} */
        var dateFormatRegex = /(\w+)[\/|\.|\-](\w+)[\/|\.|\-](\w+)/gi;
        /** @type {?} */
        var dateValueRegex = /(\d+)[\/|\.|\-](\d+)[\/|\.|\-](\d+)/gi;
        /** @type {?} */
        var dateFormatTokens;
        /** @type {?} */
        var dateValueTokens;
        /** @type {?} */
        var year;
        /** @type {?} */
        var month;
        /** @type {?} */
        var day;
        /** @type {?} */
        var date = new Date();
        if (Helpers.isEmpty(dateFormat)) {
            // Default to MM/dd/yyyy
            dateFormat = 'mm/dd/yyyy';
        }
        else {
            dateFormat = dateFormat.toLowerCase();
        }
        dateFormatTokens = dateFormatRegex.exec(dateFormat);
        dateValueTokens = dateValueRegex.exec(dateString);
        if (dateFormatTokens && dateFormatTokens.length === 4 && dateValueTokens && dateValueTokens.length === 4) {
            for (var i = 1; i < 4; i++) {
                if (dateFormatTokens[i].includes('m')) {
                    month = parseInt(dateValueTokens[i]) - 1;
                }
                else if (dateFormatTokens[i].includes('d')) {
                    day = parseInt(dateValueTokens[i]);
                }
                else {
                    year = parseInt(dateValueTokens[i]);
                }
            }
            if (month >= 0 && month <= 11 && year > 1900 && day > 0 && day <= 31) {
                date = new Date(year, month, day);
            }
        }
        else if (dateFormatTokens && dateFormatTokens.length === 4 && dateString.length >= 1) {
            /** @type {?} */
            var twoTokens = /\d{1,4}(\/|\.|\-)(\d{1,2})/.exec(dateString);
            /** @type {?} */
            var oneToken = /^(\d{1,4})$/.exec(dateString);
            /** @type {?} */
            var delimiter = /\w+(\/|\.|\-)\w+[\/|\.|\-]\w+/gi.exec(dateFormat);
            /** @type {?} */
            var dateStringWithDelimiter = dateString[dateString.length - 1].match(/\/|\.|\-/);
            if (twoTokens && twoTokens.length === 3 && this.isValidDatePart(twoTokens[2], dateFormatTokens[2]) && !dateStringWithDelimiter) {
                dateString = "" + dateString + delimiter[1];
            }
            else if (oneToken && oneToken.length === 2 && this.isValidDatePart(oneToken[1], dateFormatTokens[1]) && !dateStringWithDelimiter) {
                dateString = "" + dateString + delimiter[1];
            }
        }
        return [date, dateString];
    };
    /**
     * @param {?} timeString
     * @param {?} militaryTime
     * @return {?}
     */
    DateFormatService.prototype.parseTimeString = /**
     * @param {?} timeString
     * @param {?} militaryTime
     * @return {?}
     */
    function (timeString, militaryTime) {
        var e_2, _a;
        /** @type {?} */
        var value = new Date();
        /** @type {?} */
        var timeStringParts;
        /** @type {?} */
        var amFormat = this.labels.timeFormatAM;
        /** @type {?} */
        var pmFormat = this.labels.timeFormatPM;
        if (!(timeString && timeString.includes(':'))) {
            return [value, timeString];
        }
        if (!militaryTime && amFormat && pmFormat) {
            /** @type {?} */
            var splits = [];
            /** @type {?} */
            var pm = false;
            amFormat = this.labels.timeFormatAM.toLowerCase();
            pmFormat = this.labels.timeFormatPM.toLowerCase();
            timeString = timeString.toLowerCase();
            if (timeString.includes(amFormat)) {
                splits = timeString.split(amFormat);
            }
            else if (timeString.includes(pmFormat)) {
                splits = timeString.split(pmFormat);
                pm = true;
            }
            if (splits && splits.length) {
                try {
                    for (var splits_1 = __values(splits), splits_1_1 = splits_1.next(); !splits_1_1.done; splits_1_1 = splits_1.next()) {
                        var item = splits_1_1.value;
                        if (item && item.trim().includes(':')) {
                            timeStringParts = item.trim().split(':');
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (splits_1_1 && !splits_1_1.done && (_a = splits_1.return)) _a.call(splits_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
            if (timeStringParts && timeStringParts.length && timeStringParts.length === 2) {
                /** @type {?} */
                var hours = parseInt(timeStringParts[0]);
                if (hours === 12 && pm) {
                    hours = 12;
                }
                else if (pm) {
                    hours = hours + 12;
                }
                else if (hours === 12) {
                    hours = 0;
                }
                value.setHours(hours);
                value.setMinutes(parseInt(timeStringParts[1]));
                value.setSeconds(0);
            }
        }
        else {
            timeStringParts = /(\d{1,2}):(\d{2})/.exec(timeString);
            if (timeStringParts && timeStringParts.length && timeStringParts.length === 3) {
                value.setHours(parseInt(timeStringParts[1]));
                value.setMinutes(parseInt(timeStringParts[2]));
                value.setSeconds(0);
            }
        }
        return [value, timeString];
    };
    /**
     * @param {?} dateTimeString
     * @param {?} militaryTime
     * @param {?} type
     * @return {?}
     */
    DateFormatService.prototype.parseString = /**
     * @param {?} dateTimeString
     * @param {?} militaryTime
     * @param {?} type
     * @return {?}
     */
    function (dateTimeString, militaryTime, type) {
        switch (type) {
            case 'datetime':
                /** @type {?} */
                var str = dateTimeString.replace(/-/g, '/');
                /** @type {?} */
                var parts = str.split(' ');
                var _a = __read(this.parseDateString(parts[0]), 2), dt = _a[0], dts = _a[1];
                if (parts.length > 1) {
                    var _b = __read(this.parseTimeString(parts[1], militaryTime), 2), tm = _b[0], tms = _b[1];
                    return [new Date(dt.setHours(tm.getHours(), tm.getMinutes())), dts + " " + tms];
                }
                return [dt, dts];
            case 'date':
                return this.parseDateString(dateTimeString);
            case 'time':
                return this.parseTimeString(dateTimeString, militaryTime);
            default:
                return;
        }
    };
    /**
     * @param {?} value
     * @param {?} format
     * @return {?}
     */
    DateFormatService.prototype.isValidDatePart = /**
     * @param {?} value
     * @param {?} format
     * @return {?}
     */
    function (value, format$$1) {
        /** @type {?} */
        var datePart = parseInt(value);
        if (format$$1.includes('m') && (datePart >= 2 || value.length === 2)) {
            return true;
        }
        else if (format$$1.includes('d') && (datePart >= 4 || value.length === 2)) {
            return true;
        }
        else if (format$$1.includes('y') && datePart >= 1000) {
            return true;
        }
        return false;
    };
    DateFormatService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DateFormatService.ctorParameters = function () { return [
        { type: NovoLabelService }
    ]; };
    return DateFormatService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Value accessor for the component (supports ngModel)
/** @type {?} */
var DATE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NovoDatePickerInputElement; }),
    multi: true,
};
var NovoDatePickerInputElement = /** @class */ (function () {
    function NovoDatePickerInputElement(element, labels, _changeDetectorRef, dateFormatService) {
        this.element = element;
        this.labels = labels;
        this._changeDetectorRef = _changeDetectorRef;
        this.dateFormatService = dateFormatService;
        this.formattedValue = '';
        /**
         * View -> model callback called when value changes
         */
        this._onChange = function () { };
        /**
         * View -> model callback called when autocomplete has been touched
         */
        this._onTouched = function () { };
        this.textMaskEnabled = true;
        this.allowInvalidDate = false;
        this.disabled = false;
        this.blurEvent = new EventEmitter();
        this.focusEvent = new EventEmitter();
        this.placeholder = this.labels.dateFormatPlaceholder;
    }
    /**
     * @return {?}
     */
    NovoDatePickerInputElement.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.userDefinedFormat = this.format ? !this.format.match(/^(DD\/MM\/YYYY|MM\/DD\/YYYY)$/g) : false;
        if (!this.userDefinedFormat && this.textMaskEnabled && !this.allowInvalidDate) {
            this.maskOptions = this.maskOptions || {
                mask: [/\d/, /\d/, '/', /\d/, /\d/, '/', /\d/, /\d/, /\d/, /\d/],
                pipe: createAutoCorrectedDatePipe(this.format || this.labels.dateFormat.toLowerCase()),
                keepCharPositions: false,
                guide: true,
            };
        }
        else {
            this.maskOptions = { mask: false };
        }
    };
    /** BEGIN: Convenient Panel Methods. */
    /**
     * BEGIN: Convenient Panel Methods.
     * @return {?}
     */
    NovoDatePickerInputElement.prototype.openPanel = /**
     * BEGIN: Convenient Panel Methods.
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this.overlay.openPanel();
        }
    };
    /**
     * @return {?}
     */
    NovoDatePickerInputElement.prototype.closePanel = /**
     * @return {?}
     */
    function () {
        this.overlay.closePanel();
    };
    Object.defineProperty(NovoDatePickerInputElement.prototype, "panelOpen", {
        get: /**
         * @return {?}
         */
        function () {
            return this.overlay && this.overlay.panelOpen;
        },
        enumerable: true,
        configurable: true
    });
    /** END: Convenient Panel Methods. */
    /**
     * END: Convenient Panel Methods.
     * @param {?} event
     * @return {?}
     */
    NovoDatePickerInputElement.prototype._handleKeydown = /**
     * END: Convenient Panel Methods.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if ((event.keyCode === ESCAPE || event.keyCode === ENTER || event.keyCode === TAB) && this.panelOpen) {
            this._handleEvent(event, true);
            this.closePanel();
            event.stopPropagation();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoDatePickerInputElement.prototype._handleInput = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (document.activeElement === event.target) {
            this._handleEvent(event, false);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoDatePickerInputElement.prototype._handleBlur = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.blurEvent.emit(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoDatePickerInputElement.prototype._handleFocus = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.openPanel();
        this.focusEvent.emit(event);
    };
    /**
     * @param {?} event
     * @param {?} blur
     * @return {?}
     */
    NovoDatePickerInputElement.prototype._handleEvent = /**
     * @param {?} event
     * @param {?} blur
     * @return {?}
     */
    function (event, blur) {
        /** @type {?} */
        var value = ((/** @type {?} */ (event.target))).value;
        this.formatDate(value, blur);
        this.openPanel();
    };
    /**
     * @protected
     * @param {?} value
     * @param {?} blur
     * @return {?}
     */
    NovoDatePickerInputElement.prototype.formatDate = /**
     * @protected
     * @param {?} value
     * @param {?} blur
     * @return {?}
     */
    function (value, blur) {
        try {
            var _a = __read(this.dateFormatService.parseString(value, false, 'date'), 2), dateTimeValue = _a[0], formatted = _a[1];
            if (!isNaN(dateTimeValue.getUTCDate())) {
                /** @type {?} */
                var dt = new Date(dateTimeValue);
                this.dispatchOnChange(dt, blur);
            }
            else {
                this.dispatchOnChange(null, blur);
            }
        }
        catch (err) { }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoDatePickerInputElement.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        Promise.resolve(null).then(function () { return _this._setTriggerValue(value); });
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoDatePickerInputElement.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoDatePickerInputElement.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onTouched = fn;
    };
    /**
     * @param {?} disabled
     * @return {?}
     */
    NovoDatePickerInputElement.prototype.setDisabledState = /**
     * @param {?} disabled
     * @return {?}
     */
    function (disabled) {
        this.disabled = disabled;
    };
    /**
     * @param {?=} newValue
     * @param {?=} blur
     * @param {?=} skip
     * @return {?}
     */
    NovoDatePickerInputElement.prototype.dispatchOnChange = /**
     * @param {?=} newValue
     * @param {?=} blur
     * @param {?=} skip
     * @return {?}
     */
    function (newValue, blur, skip) {
        if (blur === void 0) { blur = false; }
        if (skip === void 0) { skip = false; }
        if (newValue !== this.value) {
            this._onChange(newValue);
            if (blur) {
                !skip && this.writeValue(newValue);
            }
            else {
                !skip && this._setCalendarValue(newValue);
            }
        }
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    NovoDatePickerInputElement.prototype._setTriggerValue = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this._setCalendarValue(value);
        this._setFormValue(value);
        this._changeDetectorRef.markForCheck();
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    NovoDatePickerInputElement.prototype._setCalendarValue = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value instanceof Date && this.value instanceof Date) {
            value = new Date(value.setHours(this.value.getHours(), this.value.getMinutes()));
        }
        this.value = value;
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    NovoDatePickerInputElement.prototype._setFormValue = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.value) {
            /** @type {?} */
            var test = this.formatDateValue(this.value);
            this.formattedValue = test;
        }
    };
    /**
     * This method closes the panel, and if a value is specified, also sets the associated
     * control to that value. It will also mark the control as dirty if this interaction
     * stemmed from the user.
     */
    /**
     * This method closes the panel, and if a value is specified, also sets the associated
     * control to that value. It will also mark the control as dirty if this interaction
     * stemmed from the user.
     * @param {?} event
     * @return {?}
     */
    NovoDatePickerInputElement.prototype.setValueAndClose = /**
     * This method closes the panel, and if a value is specified, also sets the associated
     * control to that value. It will also mark the control as dirty if this interaction
     * stemmed from the user.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event && event.date) {
            this.dispatchOnChange(event.date, true);
        }
        this.closePanel();
    };
    /**
     * Clear any previous selected option and emit a selection change event for this option
     */
    /**
     * Clear any previous selected option and emit a selection change event for this option
     * @return {?}
     */
    NovoDatePickerInputElement.prototype.clearValue = /**
     * Clear any previous selected option and emit a selection change event for this option
     * @return {?}
     */
    function () {
        this.formattedValue = '';
        this.dispatchOnChange(null);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoDatePickerInputElement.prototype.formatDateValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var originalValue = value;
        try {
            if (!value) {
                return '';
            }
            if (this.userDefinedFormat && isValid(value)) {
                return format(value, this.format);
            }
            if (!(value instanceof Date)) {
                value = new Date(value);
            }
            if (!(isNaN(value.valueOf()) && this.allowInvalidDate)) {
                return this.labels.formatDateWithFormat(value, {
                    month: '2-digit',
                    day: '2-digit',
                    year: 'numeric',
                });
            }
            else {
                return originalValue;
            }
        }
        catch (err) {
            return '';
        }
    };
    Object.defineProperty(NovoDatePickerInputElement.prototype, "hasValue", {
        get: /**
         * @return {?}
         */
        function () {
            return !Helpers.isEmpty(this.value);
        },
        enumerable: true,
        configurable: true
    });
    NovoDatePickerInputElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-date-picker-input',
                    providers: [DATE_VALUE_ACCESSOR],
                    template: "\n        <input type=\"text\" [name]=\"name\" [(ngModel)]=\"formattedValue\" [textMask]=\"maskOptions\" [placeholder]=\"placeholder\" (focus)=\"_handleFocus($event)\" (keydown)=\"_handleKeydown($event)\" (input)=\"_handleInput($event)\" (blur)=\"_handleBlur($event)\" #input data-automation-id=\"date-input\" [disabled]=\"disabled\"/>\n        <i *ngIf=\"!hasValue\" (click)=\"openPanel()\" class=\"bhi-calendar\"></i>\n        <i *ngIf=\"hasValue\" (click)=\"clearValue()\" class=\"bhi-times\"></i>\n        <novo-overlay-template [parent]=\"element\" position=\"above-below\">\n            <novo-date-picker [start]=\"start\" [end]=\"end\" inline=\"true\" (onSelect)=\"setValueAndClose($event)\" [ngModel]=\"value\"></novo-date-picker>\n        </novo-overlay-template>\n  "
                }] }
    ];
    /** @nocollapse */
    NovoDatePickerInputElement.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NovoLabelService },
        { type: ChangeDetectorRef },
        { type: DateFormatService }
    ]; };
    NovoDatePickerInputElement.propDecorators = {
        name: [{ type: Input }],
        start: [{ type: Input }],
        end: [{ type: Input }],
        placeholder: [{ type: Input }],
        maskOptions: [{ type: Input }],
        format: [{ type: Input }],
        textMaskEnabled: [{ type: Input }],
        allowInvalidDate: [{ type: Input }],
        disabled: [{ type: HostBinding, args: ['class.disabled',] }, { type: Input }],
        blurEvent: [{ type: Output }],
        focusEvent: [{ type: Output }],
        overlay: [{ type: ViewChild, args: [NovoOverlayTemplateComponent,] }]
    };
    return NovoDatePickerInputElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoDatePickerModule = /** @class */ (function () {
    function NovoDatePickerModule() {
    }
    NovoDatePickerModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, FormsModule, NovoOverlayModule, TextMaskModule],
                    declarations: [NovoDatePickerElement, NovoDatePickerInputElement],
                    exports: [NovoDatePickerElement, NovoDatePickerInputElement],
                },] }
    ];
    return NovoDatePickerModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Value accessor for the component (supports ngModel)
/** @type {?} */
var TIME_PICKER_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NovoTimePickerElement; }),
    multi: true,
};
var NovoTimePickerElement = /** @class */ (function () {
    function NovoTimePickerElement() {
        this.military = false;
        this.analog = false;
        this.inline = false;
        this.onSelect = new EventEmitter();
        this.hours = 12;
        this.minutes = 0;
        this.value = null;
        this.increments = [];
        this.MERIDIANS = ['am', 'pm'];
        this.MINUTES = ['05', '10', '15', '20', '25', '30', '35', '40', '45', '50', '55', '00'];
        this.HOURS = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'];
        this._onChange = function () { };
        this._onTouched = function () { };
    }
    /**
     * @param {?} arr
     * @return {?}
     */
    NovoTimePickerElement.prototype.flatten = /**
     * @param {?} arr
     * @return {?}
     */
    function (arr) {
        var _a;
        return (_a = Array.prototype).concat.apply(_a, __spread(arr));
    };
    /**
     * @return {?}
     */
    NovoTimePickerElement.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.military) {
            this.HOURS = __spread(['0'], this.HOURS, ['13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23']);
            this.increments = this.flatten(__spread(this.HOURS.map(function (hour) { return [hour + ":00", hour + ":15", hour + ":30", hour + ":45"]; })));
        }
        else {
            /** @type {?} */
            var hours = ['12', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11'];
            this.increments = this.flatten(__spread(hours.map(function (hour) { return [hour + ":00 AM", hour + ":15 AM", hour + ":30 AM", hour + ":45 AM"]; }), hours.map(function (hour) { return [hour + ":00 PM", hour + ":15 PM", hour + ":30 PM", hour + ":45 PM"]; })));
        }
        this.ngOnChanges();
    };
    /**
     * @param {?=} changes
     * @return {?}
     */
    NovoTimePickerElement.prototype.ngOnChanges = /**
     * @param {?=} changes
     * @return {?}
     */
    function (changes) {
        if (this.model) {
            this.init(this.model, false);
        }
        else {
            this.selected = null;
            this.init(new Date(), false);
        }
    };
    /**
     * @param {?} value
     * @param {?} dispatch
     * @return {?}
     */
    NovoTimePickerElement.prototype.init = /**
     * @param {?} value
     * @param {?} dispatch
     * @return {?}
     */
    function (value, dispatch) {
        /** @type {?} */
        var _value = new Date(value);
        /** @type {?} */
        var hours = _value.getHours();
        /** @type {?} */
        var minutes = _value.getMinutes();
        if (!this.military) {
            this.meridian = hours >= 12 ? 'pm' : 'am';
            hours = hours % 12;
            hours = hours || 12;
        }
        minutes = minutes < 10 ? "0" + minutes : minutes;
        this.setHours(null, hours, dispatch);
        this.setMinutes(null, minutes, dispatch);
        this.checkBetween(minutes);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoTimePickerElement.prototype.checkBetween = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.inBetween = this.MINUTES.indexOf(String(value)) < 0;
    };
    /**
     * @param {?} event
     * @param {?} value
     * @return {?}
     */
    NovoTimePickerElement.prototype.setValue = /**
     * @param {?} event
     * @param {?} value
     * @return {?}
     */
    function (event, value) {
        Helpers.swallowEvent(event);
        this.selected = value;
        var _a = __read(value.split(' '), 2), time = _a[0], meridian = _a[1];
        var _b = __read(time.split(':'), 2), hours = _b[0], minutes = _b[1];
        this.hours = hours;
        this.minutes = minutes;
        this.meridian = meridian;
        this.dispatchChange();
    };
    /**
     * @param {?} event
     * @param {?} hours
     * @param {?} dispatch
     * @return {?}
     */
    NovoTimePickerElement.prototype.setHours = /**
     * @param {?} event
     * @param {?} hours
     * @param {?} dispatch
     * @return {?}
     */
    function (event, hours, dispatch) {
        Helpers.swallowEvent(event);
        this.hours = hours;
        this.hoursClass = "hour-" + hours;
        this.activeHour = hours;
        if (dispatch) {
            this.dispatchChange();
        }
    };
    /**
     * @param {?} event
     * @param {?} minutes
     * @param {?} dispatch
     * @return {?}
     */
    NovoTimePickerElement.prototype.setMinutes = /**
     * @param {?} event
     * @param {?} minutes
     * @param {?} dispatch
     * @return {?}
     */
    function (event, minutes, dispatch) {
        Helpers.swallowEvent(event);
        this.minutes = minutes;
        this.minutesClass = "min-" + minutes;
        this.activeMinute = minutes;
        this.checkBetween(minutes);
        if (dispatch) {
            this.dispatchChange();
        }
    };
    /**
     * @param {?} event
     * @param {?} period
     * @param {?} dispatch
     * @return {?}
     */
    NovoTimePickerElement.prototype.setPeriod = /**
     * @param {?} event
     * @param {?} period
     * @param {?} dispatch
     * @return {?}
     */
    function (event, period, dispatch) {
        Helpers.swallowEvent(event);
        this.meridian = period;
        if (dispatch) {
            this.dispatchChange();
        }
    };
    /**
     * @return {?}
     */
    NovoTimePickerElement.prototype.dispatchChange = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var hours = Number(this.hours);
        if (!this.military) {
            hours = this.meridian.toLowerCase() === 'pm' ? hours + 12 : hours;
            // Special case for 12
            if (this.meridian.toLowerCase() === 'pm' && hours === 24) {
                hours = 12;
            }
            else if (this.meridian.toLowerCase() === 'am' && hours === 12) {
                hours = 0;
            }
        }
        /** @type {?} */
        var value = new Date();
        value.setHours(hours);
        value.setMinutes(this.minutes);
        value.setSeconds(0);
        this.value = this.hours + ":" + this.minutes + " " + this.meridian;
        this.onSelect.next({
            hours: hours,
            minutes: this.minutes,
            meridian: this.meridian,
            date: value,
            text: this.value,
        });
        this._onChange(value);
    };
    // ValueAccessor Functions
    // ValueAccessor Functions
    /**
     * @param {?} model
     * @return {?}
     */
    NovoTimePickerElement.prototype.writeValue = 
    // ValueAccessor Functions
    /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        this.model = model;
        if (Helpers.isDate(model)) {
            this.init(model, false);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoTimePickerElement.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoTimePickerElement.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onTouched = fn;
    };
    NovoTimePickerElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-time-picker',
                    providers: [TIME_PICKER_VALUE_ACCESSOR],
                    template: "\n        <div class=\"digital\" [class.inline]=\"inline\" [class.military]=\"military\">\n            <div class=\"digital--inner\">\n                <span class=\"digital--clock\" *ngIf=\"!inline\">\n                    <span class=\"hours\" data-automation-id=\"novo-time-picker-hours\">{{hours}}</span>:<span class=\"minutes\" data-automation-id=\"novo-time-picker-minutes\">{{minutes}}</span>\n                </span>\n                <div class=\"control-block\" *ngIf=\"!military\">\n                    <span *ngFor=\"let period of MERIDIANS\" class=\"digital--period\" [class.active]=\"meridian==period\" (click)=\"setPeriod($event, period, true)\" [attr.data-automation-id]=\"period\">{{period}}</span>\n                </div>\n            </div>\n        </div>\n        <div class=\"increments\" *ngIf=\"!analog\">\n            <novo-list direction=\"vertical\" data-automation-id=\"novo-time-picker-increments\">\n                <novo-list-item *ngFor=\"let increment of increments\" (click)=\"setValue($event, increment)\" [class.active]=\"increment==selected\" [attr.data-automation-id]=\"increment\">\n                    <item-content>{{increment}}</item-content>\n                    <i *ngIf=\"increment==selected\" class=\"bhi-check\"></i>\n                </novo-list-item>\n            </novo-list>\n        </div>\n        <div class=\"analog\" *ngIf=\"analog\">\n            <div class=\"analog--inner\">\n                <div class=\"analog--face\">\n                    <span class=\"analog--center\"></span>\n                    <span class=\"analog--hand--hours\" [ngClass]=\"hoursClass\">\n                        <span class=\"analog--ball\"></span>\n                    </span>\n                    <span class=\"analog--hand--minutes\" [ngClass]=\"minutesClass\">\n                        <span class=\"analog--ball\" [ngClass]=\"{between: inBetween}\"></span>\n                    </span>\n                </div>\n                <div class=\"analog--hours\">\n                    <span *ngFor=\"let hour of HOURS\" class=\"analog--hour\" [ngClass]=\"{active: activeHour == hour}\" (click)=\"setHours($event, hour, true)\" [attr.data-automation-id]=\"hour\">{{hour}}</span>\n                </div>\n                <div class=\"analog--minutes\">\n                    <span *ngFor=\"let minute of MINUTES\" class=\"analog--minute\" [ngClass]=\"{active: activeMinute == minute}\" (click)=\"setMinutes($event, minute, true)\" [attr.data-automation-id]=\"minute\">{{minute}}</span>\n                </div>\n            </div>\n        </div>\n    ",
                    host: {
                        '[class.military]': 'military',
                    }
                }] }
    ];
    NovoTimePickerElement.propDecorators = {
        military: [{ type: Input }],
        analog: [{ type: Input }],
        inline: [{ type: Input }],
        onSelect: [{ type: Output }]
    };
    return NovoTimePickerElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Value accessor for the component (supports ngModel)
/** @type {?} */
var DATE_VALUE_ACCESSOR$1 = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NovoTimePickerInputElement; }),
    multi: true,
};
var NovoTimePickerInputElement = /** @class */ (function () {
    function NovoTimePickerInputElement(element, labels, dateFormatService, _changeDetectorRef) {
        this.element = element;
        this.labels = labels;
        this.dateFormatService = dateFormatService;
        this._changeDetectorRef = _changeDetectorRef;
        this.formattedValue = '';
        /**
         * View -> model callback called when value changes
         */
        this._onChange = function () { };
        /**
         * View -> model callback called when autocomplete has been touched
         */
        this._onTouched = function () { };
        this.military = false;
        this.disabled = false;
        this.blurEvent = new EventEmitter();
        this.focusEvent = new EventEmitter();
    }
    /**
     * @return {?}
     */
    NovoTimePickerInputElement.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.placeholder = this.military ? this.labels.timeFormatPlaceholder24Hour : this.labels.timeFormatPlaceholderAM;
        this.maskOptions = {
            mask: this.military ? [/\d/, /\d/, ':', /\d/, /\d/] : [/\d/, /\d/, ':', /\d/, /\d/, ' ', /[aApP]/, /[mM]/],
            pipe: this.military ? createAutoCorrectedDatePipe('HH:MM') : createAutoCorrectedDatePipe('mm:MM'),
            keepCharPositions: false,
            guide: true,
        };
    };
    /** BEGIN: Convenient Panel Methods. */
    /**
     * BEGIN: Convenient Panel Methods.
     * @return {?}
     */
    NovoTimePickerInputElement.prototype.openPanel = /**
     * BEGIN: Convenient Panel Methods.
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.overlay.panelOpen) {
            this.overlay.openPanel();
            /** @type {?} */
            var hour_1 = new Date().getHours();
            Promise.resolve(null).then(function () { return _this.scrollToIndex(hour_1 * 4); });
        }
    };
    /**
     * @return {?}
     */
    NovoTimePickerInputElement.prototype.closePanel = /**
     * @return {?}
     */
    function () {
        this.overlay.closePanel();
    };
    Object.defineProperty(NovoTimePickerInputElement.prototype, "panelOpen", {
        get: /**
         * @return {?}
         */
        function () {
            return this.overlay && this.overlay.panelOpen;
        },
        enumerable: true,
        configurable: true
    });
    /** END: Convenient Panel Methods. */
    /**
     * END: Convenient Panel Methods.
     * @param {?} event
     * @return {?}
     */
    NovoTimePickerInputElement.prototype._handleKeydown = /**
     * END: Convenient Panel Methods.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if ((event.keyCode === ESCAPE || event.keyCode === ENTER || event.keyCode === TAB) && this.panelOpen) {
            this.closePanel();
            event.stopPropagation();
            event.stopImmediatePropagation();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoTimePickerInputElement.prototype._handleInput = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (document.activeElement === event.target) {
            // this._onChange((event.target as HTMLInputElement).value);
            /** @type {?} */
            var text = ((/** @type {?} */ (event.target))).value;
            if (this.military ? text.replace(/_/g, '').length === 5 : text.replace(/_/g, '').length === 8) {
                var _a = __read(this.dateFormatService.parseString(text, this.military, 'time'), 2), dateTimeValue = _a[0], formatted = _a[1];
                this.dispatchOnChange(dateTimeValue);
            }
            else {
                this.dispatchOnChange(null);
            }
            this.openPanel();
            /** @type {?} */
            var num = Number(text.split(':')[0]);
            this.scrollToIndex(num * 4);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoTimePickerInputElement.prototype._handleBlur = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.blurEvent.emit(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoTimePickerInputElement.prototype._handleFocus = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.openPanel();
        this.focusEvent.emit(event);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoTimePickerInputElement.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        Promise.resolve(null).then(function () { return _this._setTriggerValue(value); });
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoTimePickerInputElement.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoTimePickerInputElement.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onTouched = fn;
    };
    /**
     * @param {?} disabled
     * @return {?}
     */
    NovoTimePickerInputElement.prototype.setDisabledState = /**
     * @param {?} disabled
     * @return {?}
     */
    function (disabled) {
        this.disabled = disabled;
    };
    /**
     * @param {?=} newValue
     * @param {?=} skip
     * @return {?}
     */
    NovoTimePickerInputElement.prototype.dispatchOnChange = /**
     * @param {?=} newValue
     * @param {?=} skip
     * @return {?}
     */
    function (newValue, skip) {
        if (skip === void 0) { skip = false; }
        if (newValue !== this.value) {
            this._onChange(newValue);
            !skip && this.writeValue(newValue);
        }
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    NovoTimePickerInputElement.prototype._setTriggerValue = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value instanceof Date && this.value instanceof Date) {
            value = new Date(value.setFullYear(this.value.getFullYear(), this.value.getMonth(), this.value.getDate()));
        }
        this.value = value;
        if (this.value) {
            this.formattedValue = this.formatDateValue(this.value);
        }
        this._changeDetectorRef.markForCheck();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoTimePickerInputElement.prototype.setValue = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event && event.date) {
            this.dispatchOnChange(event.date);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoTimePickerInputElement.prototype.setValueAndClose = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.setValue(event);
        this.closePanel();
    };
    /**
     * Clear any previous selected option and emit a selection change event for this option
     */
    /**
     * Clear any previous selected option and emit a selection change event for this option
     * @return {?}
     */
    NovoTimePickerInputElement.prototype.clearValue = /**
     * Clear any previous selected option and emit a selection change event for this option
     * @return {?}
     */
    function () {
        this.formattedValue = '';
        this.dispatchOnChange(null);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoTimePickerInputElement.prototype.formatDateValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (!value) {
            return '';
        }
        /** @type {?} */
        var format$$1 = this.labels.formatDateWithFormat(value, {
            hour: '2-digit',
            minute: '2-digit',
            hour12: !this.military,
        });
        if (format$$1.split(':')[0].length === 1) {
            return "0" + format$$1;
        }
        return format$$1;
    };
    Object.defineProperty(NovoTimePickerInputElement.prototype, "hasValue", {
        get: /**
         * @return {?}
         */
        function () {
            return !Helpers.isEmpty(this.value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} index
     * @return {?}
     */
    NovoTimePickerInputElement.prototype.scrollToIndex = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        /** @type {?} */
        var element = this.overlay.overlayRef.overlayElement;
        /** @type {?} */
        var list = element.querySelector('.increments');
        /** @type {?} */
        var items = list.querySelectorAll('novo-list-item');
        /** @type {?} */
        var item = items[index];
        if (item) {
            list.scrollTop = ((/** @type {?} */ (item))).offsetTop;
        }
    };
    NovoTimePickerInputElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-time-picker-input',
                    providers: [DATE_VALUE_ACCESSOR$1],
                    template: "\n    <input type=\"text\" [name]=\"name\" [(ngModel)]=\"formattedValue\" [textMask]=\"maskOptions\" [placeholder]=\"placeholder\" (focus)=\"_handleFocus($event)\"\n           (keydown)=\"_handleKeydown($event)\" (input)=\"_handleInput($event)\" (blur)=\"_handleBlur($event)\" #input data-automation-id=\"time-input\" [disabled]=\"disabled\"/>\n    <i *ngIf=\"!hasValue\" (click)=\"openPanel()\" class=\"bhi-clock\"></i>\n    <i *ngIf=\"hasValue\" (click)=\"clearValue()\" class=\"bhi-times\"></i>\n\n    <novo-overlay-template [parent]=\"element\" position=\"above-below\">\n      <novo-time-picker inline=\"true\" (onSelect)=\"setValue($event)\" [ngModel]=\"value\" [military]=\"military\"></novo-time-picker>\n    </novo-overlay-template>\n  "
                }] }
    ];
    /** @nocollapse */
    NovoTimePickerInputElement.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NovoLabelService },
        { type: DateFormatService },
        { type: ChangeDetectorRef }
    ]; };
    NovoTimePickerInputElement.propDecorators = {
        name: [{ type: Input }],
        placeholder: [{ type: Input }],
        military: [{ type: Input }],
        maskOptions: [{ type: Input }],
        disabled: [{ type: HostBinding, args: ['class.disabled',] }, { type: Input }],
        blurEvent: [{ type: Output }],
        focusEvent: [{ type: Output }],
        overlay: [{ type: ViewChild, args: [NovoOverlayTemplateComponent,] }]
    };
    return NovoTimePickerInputElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoTimePickerModule = /** @class */ (function () {
    function NovoTimePickerModule() {
    }
    NovoTimePickerModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, FormsModule, TextMaskModule, NovoOverlayModule, NovoListModule],
                    declarations: [NovoTimePickerElement, NovoTimePickerInputElement],
                    exports: [NovoTimePickerElement, NovoTimePickerInputElement],
                },] }
    ];
    return NovoTimePickerModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Value accessor for the component (supports ngModel)
/** @type {?} */
var DATE_TIME_PICKER_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NovoDateTimePickerElement; }),
    multi: true,
};
var NovoDateTimePickerElement = /** @class */ (function () {
    function NovoDateTimePickerElement(labels, element) {
        this.labels = labels;
        this.element = element;
        // Select callback for output
        this.onSelect = new EventEmitter(false);
        this.componentTabState = 'date';
        this.datePickerValue = new Date();
        this.timePickerValue = new Date();
        this._onChange = function () { };
        this._onTouched = function () { };
    }
    /**
     * @param {?} tab
     * @return {?}
     */
    NovoDateTimePickerElement.prototype.toggleView = /**
     * @param {?} tab
     * @return {?}
     */
    function (tab) {
        this.componentTabState = tab;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoDateTimePickerElement.prototype.setDateLabels = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.selectedLabel = this.labels.formatDateWithFormat(value, {
            month: 'short',
            day: '2-digit',
            year: 'numeric',
        });
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoDateTimePickerElement.prototype.setTimeLabels = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var hours = value.getHours();
        /** @type {?} */
        var minutes = value.getMinutes();
        this.meridian = value.toLocaleTimeString().slice(-2);
        if (!this.military) {
            hours = this.meridian === 'PM' && hours > 12 ? hours - 12 : hours;
            // Special case for 12
            if (this.meridian === 'PM' && hours === 24) {
                hours = 12;
            }
            else if (this.meridian === 'AM' && hours === 0) {
                hours = 12;
            }
        }
        this.hours = hours.toString().length === 1 ? "0" + hours.toString() : hours.toString();
        this.minutes = minutes.toString().length === 1 ? "0" + minutes.toString() : minutes.toString();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoDateTimePickerElement.prototype.onDateSelected = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.datePickerValue = event.date;
        this.model = this.createFullDateValue(this.datePickerValue, this.timePickerValue);
        this.setDateLabels(this.model);
        this.onSelect.emit({ date: this.model });
        this._onChange(this.model);
        this.toggleView('time');
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoDateTimePickerElement.prototype.onTimeSelected = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.timePickerValue = event.date;
        this.model = this.createFullDateValue(this.model, this.timePickerValue);
        this.setTimeLabels(this.model);
        this.onSelect.emit({ date: this.model });
        this._onChange(this.model);
    };
    /**
     * @param {?} datePickerValue
     * @param {?} timePickerValue
     * @return {?}
     */
    NovoDateTimePickerElement.prototype.createFullDateValue = /**
     * @param {?} datePickerValue
     * @param {?} timePickerValue
     * @return {?}
     */
    function (datePickerValue, timePickerValue) {
        return setMilliseconds(setSeconds(setMinutes(setHours(datePickerValue, getHours(timePickerValue)), getMinutes(timePickerValue)), getSeconds(timePickerValue)), getMilliseconds(timePickerValue));
    };
    // ValueAccessor Functions
    // ValueAccessor Functions
    /**
     * @param {?} model
     * @return {?}
     */
    NovoDateTimePickerElement.prototype.writeValue = 
    // ValueAccessor Functions
    /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        this.model = model;
        if (Helpers.isEmpty(model)) {
            this.model = new Date();
        }
        else if (!isNaN(model)) {
            this.model = new Date(model);
        }
        this.datePickerValue = this.model;
        this.timePickerValue = this.model;
        if (Helpers.isDate(this.model)) {
            this.setDateLabels(this.model);
            this.setTimeLabels(this.model);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoDateTimePickerElement.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoDateTimePickerElement.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onTouched = fn;
    };
    NovoDateTimePickerElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-date-time-picker',
                    providers: [DATE_TIME_PICKER_VALUE_ACCESSOR],
                    animations: [
                        trigger('dateTextState', [
                            state('date', style({
                                opacity: '1.0',
                            })),
                            state('time', style({
                                opacity: '0.6',
                            })),
                            transition('date <=> time', animate('200ms ease-in')),
                        ]),
                        trigger('timeTextState', [
                            state('date', style({
                                opacity: '0.6',
                            })),
                            state('time', style({
                                opacity: '1.0',
                            })),
                            transition('date <=> time', animate('200ms ease-in')),
                        ]),
                        trigger('indicatorState', [
                            state('date', style({
                                transform: 'translateX(0%)',
                            })),
                            state('time', style({
                                transform: 'translateX(100%)',
                            })),
                            transition('date <=> time', animate('200ms ease-in')),
                        ]),
                        trigger('containerState', [
                            state('date', style({
                                transform: 'translateX(0%)',
                            })),
                            state('time', style({
                                transform: 'translateX(-100%)',
                            })),
                            transition('date <=> time', animate('200ms ease-in')),
                        ]),
                    ],
                    template: "\n        <div class=\"date-time-container\">\n            <div class=\"date-time-tabs\">\n                <span class=\"date-tab\" (click)=\"toggleView('date')\" [@dateTextState]=\"componentTabState\" data-automation-id=\"novo-date-time-date-tab\">{{selectedLabel}}</span>\n                <span class=\"time-tab\" (click)=\"toggleView('time')\" [@timeTextState]=\"componentTabState\" data-automation-id=\"novo-date-time-time-tab\">\n                    <span class=\"hours\" data-automation-id=\"novo-time-picker-hours\">{{hours}}</span>:<span\n                    class=\"minutes\" data-automation-id=\"novo-time-picker-minutes\">{{minutes}}</span>\n                    <span *ngIf=\"!military\" class=\"meridian\">{{meridian}}</span>\n                </span>\n                <i class=\"date-time-indicator\" [@indicatorState]=\"componentTabState\"></i>\n            </div>\n            <div class=\"view-container\" [@containerState]=\"componentTabState\">\n                <div class=\"calendar\">\n                    <novo-date-picker (onSelect)=\"onDateSelected($event)\" [(ngModel)]=\"model\" inline=\"true\" [minYear]=\"minYear\" [maxYear]=\"maxYear\" [start]=\"start\" [end]=\"end\"></novo-date-picker>\n                </div>\n                <div class=\"time-picker\">\n                    <novo-time-picker (onSelect)=\"onTimeSelected($event)\" [(ngModel)]=\"model\" [military]=\"military\" inline=\"true\"></novo-time-picker>\n                </div>\n            </div>\n        </div>\n    "
                }] }
    ];
    /** @nocollapse */
    NovoDateTimePickerElement.ctorParameters = function () { return [
        { type: NovoLabelService },
        { type: ElementRef }
    ]; };
    NovoDateTimePickerElement.propDecorators = {
        minYear: [{ type: Input }],
        maxYear: [{ type: Input }],
        start: [{ type: Input }],
        end: [{ type: Input }],
        military: [{ type: Input }],
        onSelect: [{ type: Output }]
    };
    return NovoDateTimePickerElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Value accessor for the component (supports ngModel)
/** @type {?} */
var DATE_VALUE_ACCESSOR$2 = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NovoDateTimePickerInputElement; }),
    multi: true,
};
var NovoDateTimePickerInputElement = /** @class */ (function () {
    function NovoDateTimePickerInputElement(element, labels, _changeDetectorRef) {
        this.element = element;
        this.labels = labels;
        this._changeDetectorRef = _changeDetectorRef;
        /**
         * View -> model callback called when value changes
         */
        this._onChange = function () { };
        /**
         * View -> model callback called when autocomplete has been touched
         */
        this._onTouched = function () { };
        this.military = false;
        this.disabled = false;
        this.blurEvent = new EventEmitter();
        this.focusEvent = new EventEmitter();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    NovoDateTimePickerInputElement.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        this.datePart = isDate(value) ? parse(value) : value;
        this.timePart = isDate(value) ? parse(value) : value;
        Promise.resolve(null).then(function () { return _this._setTriggerValue(value); });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoDateTimePickerInputElement.prototype.updateDate = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.datePart = event;
        this.checkParts();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoDateTimePickerInputElement.prototype.updateTime = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.timePart = event;
        this.checkParts();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoDateTimePickerInputElement.prototype.handleBlur = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.blurEvent.emit(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoDateTimePickerInputElement.prototype.handleFocus = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.focusEvent.emit(event);
    };
    /**
     * @return {?}
     */
    NovoDateTimePickerInputElement.prototype.checkParts = /**
     * @return {?}
     */
    function () {
        try {
            if (this.datePart instanceof Date && this.timePart instanceof Date) {
                /** @type {?} */
                var newDt = new Date(this.datePart.getFullYear(), this.datePart.getMonth(), this.datePart.getDate(), this.timePart.getHours(), this.timePart.getMinutes());
                this.dispatchOnChange(newDt);
            }
            else {
                this.dispatchOnChange(null);
            }
        }
        catch (err) {
            // Date not valid
            this.dispatchOnChange(null);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoDateTimePickerInputElement.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoDateTimePickerInputElement.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onTouched = fn;
    };
    /**
     * @param {?} disabled
     * @return {?}
     */
    NovoDateTimePickerInputElement.prototype.setDisabledState = /**
     * @param {?} disabled
     * @return {?}
     */
    function (disabled) {
        this.disabled = disabled;
    };
    /**
     * @param {?=} newValue
     * @return {?}
     */
    NovoDateTimePickerInputElement.prototype.dispatchOnChange = /**
     * @param {?=} newValue
     * @return {?}
     */
    function (newValue) {
        if (newValue !== this.value) {
            this._onChange(newValue);
            this._setTriggerValue(newValue);
        }
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    NovoDateTimePickerInputElement.prototype._setTriggerValue = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.value = value;
        this._changeDetectorRef.markForCheck();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoDateTimePickerInputElement.prototype.setValue = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event && event.date) {
            this.dispatchOnChange(event.date);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoDateTimePickerInputElement.prototype.setValueAndClose = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.setValue(event);
    };
    /**
     * Clear any previous selected option and emit a selection change event for this option
     */
    /**
     * Clear any previous selected option and emit a selection change event for this option
     * @return {?}
     */
    NovoDateTimePickerInputElement.prototype.clearValue = /**
     * Clear any previous selected option and emit a selection change event for this option
     * @return {?}
     */
    function () {
        this.dispatchOnChange(null);
    };
    Object.defineProperty(NovoDateTimePickerInputElement.prototype, "hasValue", {
        get: /**
         * @return {?}
         */
        function () {
            return !Helpers.isEmpty(this.value);
        },
        enumerable: true,
        configurable: true
    });
    NovoDateTimePickerInputElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-date-time-picker-input',
                    providers: [DATE_VALUE_ACCESSOR$2],
                    template: "\n        <novo-date-picker-input [ngModel]=\"datePart\" (ngModelChange)=\"updateDate($event)\" [start]=\"start\" [end]=\"end\" [maskOptions]=\"maskOptions\" (blurEvent)=\"handleBlur($event)\" (focusEvent)=\"handleFocus($event)\" [disabled]=\"disabled\"></novo-date-picker-input>\n        <novo-time-picker-input [ngModel]=\"timePart\" (ngModelChange)=\"updateTime($event)\" [military]=\"military\" (blurEvent)=\"handleBlur($event)\" (focusEvent)=\"handleFocus($event)\" [disabled]=\"disabled\"></novo-time-picker-input>\n  "
                }] }
    ];
    /** @nocollapse */
    NovoDateTimePickerInputElement.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NovoLabelService },
        { type: ChangeDetectorRef }
    ]; };
    NovoDateTimePickerInputElement.propDecorators = {
        name: [{ type: Input }],
        start: [{ type: Input }],
        end: [{ type: Input }],
        placeholder: [{ type: Input }],
        maskOptions: [{ type: Input }],
        military: [{ type: Input }],
        disabled: [{ type: Input }],
        format: [{ type: Input }],
        blurEvent: [{ type: Output }],
        focusEvent: [{ type: Output }]
    };
    return NovoDateTimePickerInputElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoDateTimePickerModule = /** @class */ (function () {
    function NovoDateTimePickerModule() {
    }
    NovoDateTimePickerModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, FormsModule, NovoDatePickerModule, NovoTimePickerModule, TextMaskModule, NovoOverlayModule],
                    declarations: [NovoDateTimePickerElement, NovoDateTimePickerInputElement],
                    exports: [NovoDateTimePickerElement, NovoDateTimePickerInputElement],
                },] }
    ];
    return NovoDateTimePickerModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Value accessor for the component (supports ngModel)
/** @type {?} */
var CKEDITOR_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NovoCKEditorElement; }),
    multi: true,
};
/**
 * CKEditor component
 * Usage :
 *  <novo-editor [(ngModel)]="data" [config]="{...}" debounce="500"></novo-editor>
 */
var NovoCKEditorElement = /** @class */ (function () {
    function NovoCKEditorElement(zone) {
        this.zone = zone;
        this.startupFocus = false;
        this.fileBrowserImageUploadUrl = '';
        this.disabled = false;
        this.change = new EventEmitter();
        this.ready = new EventEmitter();
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this.paste = new EventEmitter();
        this.loaded = new EventEmitter();
        this._value = '';
    }
    Object.defineProperty(NovoCKEditorElement.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            if (v !== this._value) {
                this._value = v;
                this.onChange(v);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoCKEditorElement.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.instance) {
            this.instance.focusManager.blur(true); // Remove focus from editor
            setTimeout(function () {
                _this.instance.removeAllListeners();
                CKEDITOR.instances[_this.instance.name].destroy();
                _this.instance.destroy();
                _this.instance = null;
            });
        }
    };
    /**
     * @return {?}
     */
    NovoCKEditorElement.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var config = this.config || this.getBaseConfig();
        if (this.startupFocus) {
            config.startupFocus = true;
        }
        if (this.disabled) {
            config.readOnly = true;
        }
        this.ckeditorInit(config);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoCKEditorElement.prototype.updateValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        this.zone.run(function () {
            _this.value = value;
            _this.onChange(value);
            _this.onTouched();
            _this.change.emit(value);
        });
    };
    /**
     * @param {?} config
     * @return {?}
     */
    NovoCKEditorElement.prototype.ckeditorInit = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        var _this = this;
        if (!CKEDITOR) {
            console.error('Make sure to include CKEditor sources in your dependencies!');
            return;
        }
        // CKEditor replace textarea
        this.instance = CKEDITOR.replace(this.host.nativeElement, config);
        // Set initial value
        this.instance.setData(this.value);
        // listen for instanceReady event
        this.instance.on('instanceReady', function (evt) {
            // send the evt to the EventEmitter
            _this.ready.emit(evt);
        });
        // CKEditor change event
        this.instance.on('change', function () {
            _this.onTouched();
            /** @type {?} */
            var value = _this.instance.getData();
            // Debounce update
            if (_this.debounce) {
                if (_this.debounceTimeout) {
                    clearTimeout(_this.debounceTimeout);
                }
                _this.debounceTimeout = setTimeout(function () {
                    _this.updateValue(value);
                    _this.debounceTimeout = null;
                }, parseInt(_this.debounce));
            }
            else {
                _this.updateValue(value);
            }
        });
        this.instance.on('blur', function (event) {
            _this.blur.emit(event);
        });
        this.instance.on('focus', function (event) {
            _this.focus.emit(event);
        });
        this.instance.on('paste', function (event) {
            _this.paste.emit(event);
        });
        this.instance.on('loaded', function (event) {
            _this.loaded.emit(event);
        });
    };
    /**
     * @return {?}
     */
    NovoCKEditorElement.prototype.getBaseConfig = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var baseConfig = {
            enterMode: CKEDITOR.ENTER_BR,
            shiftEnterMode: CKEDITOR.ENTER_P,
            disableNativeSpellChecker: false,
            removePlugins: 'liststyle,tabletools,contextmenu',
            // allows browser based spell checking
            extraAllowedContent: '*(*){*};table tbody tr td th[*];',
            // allows class names (*) and inline styles {*} for all and attributes [*] on tables
            font_names: 'Arial/Arial, Helvetica, sans-serif;' +
                'Calibri/Calibri, Verdana, Geneva, sans-serif;' +
                'Comic Sans MS/Comic Sans MS, cursive;' +
                'Courier New/Courier New, Courier, monospace;' +
                'Georgia/Georgia, serif;' +
                'Lucida Sans Unicode/Lucida Sans Unicode, Lucida Grande, sans-serif;' +
                'Tahoma/Tahoma, Geneva, sans-serif;' +
                'Times New Roman/Times New Roman, Times, serif;' +
                'Trebuchet MS/Trebuchet MS, Helvetica, sans-serif;' +
                'Verdana/Verdana, Geneva, sans-serif',
        };
        /** @type {?} */
        var minimalConfig = {
            toolbar: [
                {
                    name: 'basicstyles',
                    items: [
                        'Styles',
                        'FontSize',
                        'Bold',
                        'Italic',
                        'Underline',
                        'TextColor',
                        '-',
                        'NumberedList',
                        'BulletedList',
                        'Outdent',
                        'Indent',
                        'Link',
                    ],
                },
            ],
        };
        /** @type {?} */
        var extendedConfig = {
            toolbar: [
                { name: 'clipboard', items: ['Paste', 'PasteText', 'PasteFromWord', 'Undo', 'Redo'] },
                {
                    name: 'paragraph',
                    items: [
                        'NumberedList',
                        'BulletedList',
                        'Outdent',
                        'Indent',
                        'Blockquote',
                        'JustifyLeft',
                        'JustifyCenter',
                        'JustifyRight',
                        'JustifyBlock',
                        'BidiLtr',
                        'BidiRtl',
                    ],
                },
                { name: 'links', items: ['Link'] },
                { name: 'insert', items: ['Image', 'Table', 'HorizontalRule'] },
                { name: 'tools', items: ['Maximize', 'Source'] },
                '/',
                { name: 'basicstyles', items: ['Bold', 'Italic', 'Underline', 'Strike', 'Subscript', 'Superscript'] },
                { name: 'styles', items: ['Styles', 'Format', 'Font', 'FontSize'] },
                { name: 'colors', items: ['TextColor', 'BGColor'] },
            ],
            filebrowserImageUploadUrl: this.fileBrowserImageUploadUrl,
        };
        return Object.assign(baseConfig, this.minimal ? minimalConfig : extendedConfig);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoCKEditorElement.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this._value = value;
        if (this.instance) {
            this.instance.setData(value);
        }
    };
    /**
     * @param {?=} value
     * @return {?}
     */
    NovoCKEditorElement.prototype.onChange = /**
     * @param {?=} value
     * @return {?}
     */
    function (value) { };
    /**
     * @param {?=} event
     * @return {?}
     */
    NovoCKEditorElement.prototype.onTouched = /**
     * @param {?=} event
     * @return {?}
     */
    function (event) { };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoCKEditorElement.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoCKEditorElement.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * @param {?} disabled
     * @return {?}
     */
    NovoCKEditorElement.prototype.setDisabledState = /**
     * @param {?} disabled
     * @return {?}
     */
    function (disabled) {
        this.disabled = disabled;
        if (this.instance) {
            CKEDITOR.instances[this.instance.name].setReadOnly(disabled);
        }
    };
    /**
     * @param {?} text
     * @return {?}
     */
    NovoCKEditorElement.prototype.insertText = /**
     * @param {?} text
     * @return {?}
     */
    function (text) {
        /** @type {?} */
        var trimmedText = text.trim();
        this.instance.insertText(trimmedText);
    };
    NovoCKEditorElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-editor',
                    providers: [CKEDITOR_CONTROL_VALUE_ACCESSOR],
                    template: '<textarea [name]="name" [id]="name" #host></textarea>'
                }] }
    ];
    /** @nocollapse */
    NovoCKEditorElement.ctorParameters = function () { return [
        { type: NgZone }
    ]; };
    NovoCKEditorElement.propDecorators = {
        config: [{ type: Input }],
        debounce: [{ type: Input }],
        name: [{ type: Input }],
        minimal: [{ type: Input }],
        startupFocus: [{ type: Input }],
        fileBrowserImageUploadUrl: [{ type: Input }],
        disabled: [{ type: Input }],
        change: [{ type: Output }],
        ready: [{ type: Output }],
        blur: [{ type: Output }],
        focus: [{ type: Output }],
        paste: [{ type: Output }],
        loaded: [{ type: Output }],
        host: [{ type: ViewChild, args: ['host',] }],
        value: [{ type: Input }]
    };
    return NovoCKEditorElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoNovoCKEditorModule = /** @class */ (function () {
    function NovoNovoCKEditorModule() {
    }
    NovoNovoCKEditorModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, FormsModule],
                    declarations: [NovoCKEditorElement],
                    exports: [NovoCKEditorElement],
                },] }
    ];
    return NovoNovoCKEditorModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoTipWellElement = /** @class */ (function () {
    function NovoTipWellElement(labels) {
        this.labels = labels;
        this.button = true;
        this.sanitize = true;
        this.confirmed = new EventEmitter();
        this.isActive = true;
        this.isActive = true;
        // Check if localStorage is enabled
        this.isLocalStorageEnabled = (function () {
            /** @type {?} */
            var isEnabled = false;
            if (typeof localStorage === 'object') {
                try {
                    localStorage.setItem('lsTest', '1');
                    localStorage.removeItem('lsTest');
                    isEnabled = true;
                }
                catch (e) {
                    console.warn('This web browser does not support storing settings locally. In Safari, the most common cause of this is using "Private Browsing Mode". Some settings may not save or some features may not work properly for you.');
                }
            }
            return isEnabled;
        })();
    }
    /**
     * @return {?}
     */
    NovoTipWellElement.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.tip = this.tip || '';
        this.buttonText = this.buttonText || this.labels.okGotIt;
        this.button = typeof this.button === 'string' ? this.button === 'true' : this.button;
        this.icon = this.icon || null;
        // Set a (semi) unique name for the tip-well
        this.name = this.name || Math.round(Math.random() * 100);
        this.localStorageKey = "novo-tw_" + this.name;
        // Check localStorage for state
        if (this.isLocalStorageEnabled) {
            /** @type {?} */
            var storedValue = JSON.parse(localStorage.getItem(this.localStorageKey));
            this.isActive = storedValue !== false;
        }
    };
    /**
     * @name hideTip
     */
    /**
     * \@name hideTip
     * @return {?}
     */
    NovoTipWellElement.prototype.hideTip = /**
     * \@name hideTip
     * @return {?}
     */
    function () {
        if (this.isLocalStorageEnabled) {
            localStorage.setItem(this.localStorageKey, JSON.stringify(false));
        }
        this.isActive = false;
        this.confirmed.emit();
    };
    NovoTipWellElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-tip-well',
                    template: "\n        <div *ngIf=\"isActive\">\n            <div>\n                <i class=\"bhi-{{ icon }}\" *ngIf=\"icon\" [attr.data-automation-id]=\"'novo-tip-well-icon-' + name\"></i>\n                <p *ngIf=\"sanitize\" [attr.data-automation-id]=\"'novo-tip-well-tip-' + name\">{{ tip }}</p>\n                <p *ngIf=\"!sanitize\" [attr.data-automation-id]=\"'novo-tip-well-tip-' + name\" [innerHTML]=\"tip\"></p>\n            </div>\n            <button theme=\"dialogue\" (click)=\"hideTip()\" *ngIf=\"button\" [attr.data-automation-id]=\"'novo-tip-well-button-' + name\">{{ buttonText }}</button>\n        </div>\n    ",
                    host: {
                        '[class.active]': 'isActive',
                    }
                }] }
    ];
    /** @nocollapse */
    NovoTipWellElement.ctorParameters = function () { return [
        { type: NovoLabelService }
    ]; };
    NovoTipWellElement.propDecorators = {
        name: [{ type: Input }],
        tip: [{ type: Input }],
        buttonText: [{ type: Input }],
        button: [{ type: Input }],
        icon: [{ type: Input }],
        sanitize: [{ type: Input }],
        confirmed: [{ type: Output }]
    };
    return NovoTipWellElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoTipWellModule = /** @class */ (function () {
    function NovoTipWellModule() {
    }
    NovoTipWellModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, NovoButtonModule],
                    declarations: [NovoTipWellElement],
                    exports: [NovoTipWellElement],
                },] }
    ];
    return NovoTipWellModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoTemplateService = /** @class */ (function () {
    function NovoTemplateService() {
        this.templates = {
            default: {},
            custom: {},
        };
    }
    /**
     * @return {?}
     */
    NovoTemplateService.prototype.getAll = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var templates = {};
        /** @type {?} */
        var customTemplateTypes = Object.keys(this.templates.custom);
        /** @type {?} */
        var defaultTemplateTypes = Object.keys(this.templates.default);
        defaultTemplateTypes.forEach(function (type) {
            templates[type] = _this.templates.default[type];
        });
        customTemplateTypes.forEach(function (type) {
            templates[type] = _this.templates.custom[type];
        });
        return templates;
    };
    /**
     * @param {?} key
     * @param {?} template
     * @return {?}
     */
    NovoTemplateService.prototype.addDefault = /**
     * @param {?} key
     * @param {?} template
     * @return {?}
     */
    function (key, template) {
        this.templates.default[key] = template;
    };
    /**
     * @param {?} key
     * @param {?} template
     * @return {?}
     */
    NovoTemplateService.prototype.addCustom = /**
     * @param {?} key
     * @param {?} template
     * @return {?}
     */
    function (key, template) {
        this.templates.custom[key] = template;
    };
    NovoTemplateService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    NovoTemplateService.ctorParameters = function () { return []; };
    return NovoTemplateService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoTemplate = /** @class */ (function () {
    function NovoTemplate(template) {
        this.template = template;
    }
    /**
     * @return {?}
     */
    NovoTemplate.prototype.getType = /**
     * @return {?}
     */
    function () {
        return this.name;
    };
    NovoTemplate.decorators = [
        { type: Directive, args: [{
                    selector: '[novoTemplate]',
                },] }
    ];
    /** @nocollapse */
    NovoTemplate.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    NovoTemplate.propDecorators = {
        type: [{ type: Input }],
        name: [{ type: Input, args: ['novoTemplate',] }]
    };
    return NovoTemplate;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoFieldsetHeaderElement = /** @class */ (function () {
    function NovoFieldsetHeaderElement() {
    }
    NovoFieldsetHeaderElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-fieldset-header',
                    template: "\n        <h6><i [class]=\"icon || 'bhi-section'\"></i>{{title}}</h6>\n    "
                }] }
    ];
    NovoFieldsetHeaderElement.propDecorators = {
        title: [{ type: Input }],
        icon: [{ type: Input }]
    };
    return NovoFieldsetHeaderElement;
}());
var NovoFieldsetElement = /** @class */ (function () {
    function NovoFieldsetElement() {
        this.controls = [];
    }
    NovoFieldsetElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-fieldset',
                    template: "\n        <div class=\"novo-fieldset-container\">\n            <novo-fieldset-header [icon]=\"icon\" [title]=\"title\" *ngIf=\"title\"></novo-fieldset-header>\n            <ng-container *ngFor=\"let control of controls;let controlIndex = index;\">\n                <div class=\"novo-form-row\" [class.disabled]=\"control.disabled\" *ngIf=\"control.__type !== 'GroupedControl'\">\n                    <novo-control [autoFocus]=\"autoFocus && index === 0 && controlIndex === 0\" [control]=\"control\" [form]=\"form\"></novo-control>\n                </div>\n                <div *ngIf=\"control.__type === 'GroupedControl'\">TODO - GroupedControl</div>\n            </ng-container>\n        </div>\n    "
                }] }
    ];
    NovoFieldsetElement.propDecorators = {
        controls: [{ type: Input }],
        form: [{ type: Input }],
        title: [{ type: Input }],
        icon: [{ type: Input }],
        index: [{ type: Input }],
        autoFocus: [{ type: Input }]
    };
    return NovoFieldsetElement;
}());
var NovoDynamicFormElement = /** @class */ (function () {
    function NovoDynamicFormElement(element, templates) {
        this.element = element;
        this.templates = templates;
        this.controls = [];
        this.fieldsets = [];
        this.hideNonRequiredFields = true;
        this.autoFocusFirstField = false;
        this.allFieldsRequired = false;
        this.allFieldsNotRequired = false;
        this.showingAllFields = false;
        this.showingRequiredFields = true;
        this.numControls = 0;
    }
    /**
     * @return {?}
     */
    NovoDynamicFormElement.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.ngOnChanges();
    };
    /**
     * @param {?=} changes
     * @return {?}
     */
    NovoDynamicFormElement.prototype.ngOnChanges = /**
     * @param {?=} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        this.form.layout = this.layout;
        if (!(this.fieldsets && this.fieldsets.length) && this.controls && this.controls.length) {
            this.fieldsets = [
                {
                    controls: this.controls,
                },
            ];
            this.numControls = this.controls.length;
        }
        else if (this.fieldsets) {
            this.fieldsets.forEach(function (fieldset) {
                _this.numControls = _this.numControls + fieldset.controls.length;
            });
        }
        /** @type {?} */
        var requiredFields = [];
        /** @type {?} */
        var nonRequiredFields = [];
        this.fieldsets.forEach(function (fieldset) {
            fieldset.controls.forEach(function (control) {
                if (control.required) {
                    requiredFields.push(control);
                }
                else {
                    nonRequiredFields.push(control);
                }
            });
        });
        this.allFieldsRequired = requiredFields.length === this.numControls;
        this.allFieldsNotRequired = nonRequiredFields.length === this.numControls;
        if (this.allFieldsNotRequired && this.hideNonRequiredFields) {
            this.fieldsets.forEach(function (fieldset) {
                fieldset.controls.forEach(function (control) {
                    _this.form.controls[control.key].hidden = false;
                });
            });
        }
        this.form.fieldsets = __spread(this.fieldsets);
    };
    /**
     * @return {?}
     */
    NovoDynamicFormElement.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.customTemplates && this.customTemplates.length) {
            this.customTemplates.forEach(function (template) {
                _this.templates.addCustom(template.name, template.template);
            });
        }
    };
    /**
     * @return {?}
     */
    NovoDynamicFormElement.prototype.showAllFields = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.form.fieldsets.forEach(function (fieldset) {
            fieldset.controls.forEach(function (control) {
                _this.form.controls[control.key].hidden = false;
            });
        });
        this.showingAllFields = true;
        this.showingRequiredFields = false;
    };
    /**
     * @param {?} hideRequiredWithValue
     * @return {?}
     */
    NovoDynamicFormElement.prototype.showOnlyRequired = /**
     * @param {?} hideRequiredWithValue
     * @return {?}
     */
    function (hideRequiredWithValue) {
        var _this = this;
        this.form.fieldsets.forEach(function (fieldset) {
            fieldset.controls.forEach(function (control) {
                // Hide any non-required fields
                if (!control.required) {
                    _this.form.controls[control.key].hidden = true;
                }
                // Hide required fields that have been successfully filled out
                if (hideRequiredWithValue &&
                    !Helpers.isBlank(_this.form.value[control.key]) &&
                    (!control.isEmpty || (control.isEmpty && control.isEmpty(_this.form.controls[control.key])))) {
                    _this.form.controls[control.key].hidden = true;
                }
                // Don't hide fields with errors
                if (_this.form.controls[control.key].errors) {
                    _this.form.controls[control.key].hidden = false;
                }
            });
        });
        this.showingAllFields = false;
        this.showingRequiredFields = true;
        this.forceValidation();
    };
    Object.defineProperty(NovoDynamicFormElement.prototype, "values", {
        get: /**
         * @return {?}
         */
        function () {
            return this.form ? this.form.value : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoDynamicFormElement.prototype, "isValid", {
        get: /**
         * @return {?}
         */
        function () {
            return this.form ? this.form.valid : false;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoDynamicFormElement.prototype.updatedValues = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var ret = null;
        this.form.fieldsets.forEach(function (fieldset) {
            fieldset.controls.forEach(function (control) {
                if (_this.form.controls[control.key].dirty || control.dirty) {
                    if (!ret) {
                        ret = {};
                    }
                    ret[control.key] = _this.form.value[control.key];
                }
            });
        });
        return ret;
    };
    /**
     * @return {?}
     */
    NovoDynamicFormElement.prototype.forceValidation = /**
     * @return {?}
     */
    function () {
        var _this = this;
        Object.keys(this.form.controls).forEach(function (key) {
            /** @type {?} */
            var control = _this.form.controls[key];
            if (control.required && Helpers.isBlank(_this.form.value[control.key])) {
                control.markAsDirty();
                control.markAsTouched();
            }
        });
    };
    NovoDynamicFormElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-dynamic-form',
                    template: "\n        <novo-control-templates></novo-control-templates>\n        <div class=\"novo-form-container\">\n            <header>\n                <ng-content select=\"form-title\"></ng-content>\n                <ng-content select=\"form-subtitle\"></ng-content>\n            </header>\n            <form class=\"novo-form\" [formGroup]=\"form\">\n                <ng-container *ngFor=\"let fieldset of form.fieldsets;let i = index\">\n                    <novo-fieldset *ngIf=\"fieldset.controls.length\" [index]=\"i\" [autoFocus]=\"autoFocusFirstField\" [icon]=\"fieldset.icon\" [controls]=\"fieldset.controls\" [title]=\"fieldset.title\" [form]=\"form\"></novo-fieldset>\n                </ng-container>\n            </form>\n        </div>\n    ",
                    providers: [NovoTemplateService]
                }] }
    ];
    /** @nocollapse */
    NovoDynamicFormElement.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NovoTemplateService }
    ]; };
    NovoDynamicFormElement.propDecorators = {
        controls: [{ type: Input }],
        fieldsets: [{ type: Input }],
        form: [{ type: Input }],
        layout: [{ type: Input }],
        hideNonRequiredFields: [{ type: Input }],
        autoFocusFirstField: [{ type: Input }],
        customTemplates: [{ type: ContentChildren, args: [NovoTemplate,] }]
    };
    return NovoDynamicFormElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoFormElement = /** @class */ (function () {
    function NovoFormElement(templates) {
        this.templates = templates;
        this.hideHeader = false;
        this.showingAllFields = false;
        this.showingRequiredFields = true;
    }
    Object.defineProperty(NovoFormElement.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this.form.getRawValue();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoFormElement.prototype, "isValid", {
        get: /**
         * @return {?}
         */
        function () {
            return this.form.valid;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoFormElement.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.form.layout = this.layout;
    };
    /**
     * @return {?}
     */
    NovoFormElement.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.customTemplates && this.customTemplates.length) {
            this.customTemplates.forEach(function (template) {
                _this.templates.addCustom(template.name, template.template);
            });
        }
    };
    /**
     * @return {?}
     */
    NovoFormElement.prototype.showAllFields = /**
     * @return {?}
     */
    function () {
        var _this = this;
        Object.keys(this.form.controls).forEach(function (key) {
            _this.form.controls[key].hidden = false;
        });
        this.showingAllFields = true;
        this.showingRequiredFields = false;
    };
    /**
     * @param {?} hideRequiredWithValue
     * @return {?}
     */
    NovoFormElement.prototype.showOnlyRequired = /**
     * @param {?} hideRequiredWithValue
     * @return {?}
     */
    function (hideRequiredWithValue) {
        var _this = this;
        Object.keys(this.form.controls).forEach(function (key) {
            // Hide any non-required fields
            if (!_this.form.controls[key].required) {
                _this.form.controls[key].hidden = true;
            }
            // Hide required fields that have been successfully filled out
            if (hideRequiredWithValue && !Helpers.isBlank(_this.form.value[key])) {
                _this.form.controls[key].hidden = true;
            }
            // Don't hide fields with errors
            if (_this.form.controls[key].errors) {
                _this.form.controls[key].hidden = false;
            }
        });
        this.showingAllFields = false;
        this.showingRequiredFields = true;
        this.forceValidation();
    };
    /**
     * @return {?}
     */
    NovoFormElement.prototype.forceValidation = /**
     * @return {?}
     */
    function () {
        var _this = this;
        Object.keys(this.form.controls).forEach(function (key) {
            /** @type {?} */
            var control = _this.form.controls[key];
            if (control.required && Helpers.isBlank(_this.form.value[control.key])) {
                control.markAsDirty();
                control.markAsTouched();
            }
        });
    };
    NovoFormElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-form',
                    template: "\n        <novo-control-templates></novo-control-templates>\n        <div class=\"novo-form-container\">\n            <header *ngIf=\"!hideHeader\">\n                <ng-content select=\"form-title\"></ng-content>\n                <ng-content select=\"form-subtitle\"></ng-content>\n            </header>\n            <form class=\"novo-form\" [formGroup]=\"form\">\n                <ng-content></ng-content>\n            </form>\n        </div>\n    ",
                    providers: [NovoTemplateService]
                }] }
    ];
    /** @nocollapse */
    NovoFormElement.ctorParameters = function () { return [
        { type: NovoTemplateService }
    ]; };
    NovoFormElement.propDecorators = {
        form: [{ type: Input }],
        layout: [{ type: Input }],
        hideHeader: [{ type: Input }],
        customTemplates: [{ type: ContentChildren, args: [NovoTemplate,] }]
    };
    return NovoFormElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoFormControl = /** @class */ (function (_super) {
    __extends(NovoFormControl, _super);
    function NovoFormControl(value, control) {
        var _this = _super.call(this, value, control.validators, control.asyncValidators) || this;
        _this.displayValueChanges = new EventEmitter();
        _this.valueHistory = [];
        _this.validators = control.validators;
        _this.initialValue = value;
        _this.valueHistory.push(value);
        _this.key = control.key;
        _this.label = control.label;
        _this.readOnly = control.readOnly;
        _this.hidden = control.hidden;
        _this.encrypted = control.encrypted;
        _this.config = control.config;
        _this.type = control.type;
        _this.subType = control.subType;
        _this.required = control.required;
        _this.hasRequiredValidator = _this.required;
        _this.tooltip = control.tooltip;
        _this.tooltipPosition = control.tooltipPosition;
        _this.tooltipSize = control.tooltipSize;
        _this.tooltipPreline = control.tooltipPreline;
        _this.removeTooltipArrow = control.removeTooltipArrow;
        _this.tooltipAutoPosition = control.tooltipAutoPosition;
        _this.label = control.label;
        _this.name = control.name;
        _this.required = control.required;
        _this.sortOrder = control.sortOrder;
        _this.controlType = control.controlType;
        _this.placeholder = control.placeholder;
        _this.multiple = control.multiple;
        _this.headerConfig = control.headerConfig;
        _this.optionsType = control.optionsType;
        _this.readOnly = control.readOnly;
        _this.layoutOptions = control.layoutOptions;
        _this.military = control.military;
        _this.dateFormat = control.dateFormat;
        _this.currencyFormat = control.currencyFormat;
        _this.startDate = control.startDate;
        _this.endDate = control.endDate;
        _this.textMaskEnabled = control.textMaskEnabled;
        _this.textMaskEnabled = control.textMaskEnabled;
        _this.maskOptions = control.maskOptions;
        _this.allowInvalidDate = control.allowInvalidDate;
        _this.maxlength = control.maxlength;
        _this.minlength = control.minlength;
        _this.closeOnSelect = control.closeOnSelect;
        _this.interactions = control.interactions;
        _this.checkboxLabel = control.checkboxLabel;
        _this.restrictFieldInteractions = control.restrictFieldInteractions;
        _this.appendToBody = control.appendToBody;
        if (_this.appendToBody) {
            notify("'appendToBody' has been deprecated. Please remove this attribute.");
        }
        _this.parentScrollSelector = control.parentScrollSelector;
        _this.description = control.description;
        _this.options = control.options;
        _this.tipWell = control.tipWell;
        _this.customControlConfig = control.customControlConfig;
        _this.warning = control.warning;
        // Reactive Form, need to enable/disable, can't bind to [disabled]
        if (_this.readOnly) {
            _this.disable();
        }
        else {
            _this.enable();
        }
        return _this;
    }
    /**
     * @name hide
     * @param clearValue - flag to reset the control's value
     */
    /**
     * \@name hide
     * @param {?=} clearValue - flag to reset the control's value
     * @return {?}
     */
    NovoFormControl.prototype.hide = /**
     * \@name hide
     * @param {?=} clearValue - flag to reset the control's value
     * @return {?}
     */
    function (clearValue) {
        if (clearValue === void 0) { clearValue = true; }
        this.hidden = true;
        if (clearValue) {
            this.setValue(null);
        }
    };
    /**
     * @name show
     */
    /**
     * \@name show
     * @return {?}
     */
    NovoFormControl.prototype.show = /**
     * \@name show
     * @return {?}
     */
    function () {
        this.hidden = false;
    };
    /**
     * @name setRequired
     * @param isRequired
     */
    /**
     * \@name setRequired
     * @param {?} isRequired
     * @return {?}
     */
    NovoFormControl.prototype.setRequired = /**
     * \@name setRequired
     * @param {?} isRequired
     * @return {?}
     */
    function (isRequired) {
        this.required = isRequired;
        // Update validators to have the required
        if (this.required && !this.hasRequiredValidator) {
            /** @type {?} */
            var validators = __spread(this.validators);
            validators.push(Validators.required);
            // TODO: duplicated below
            this.setValidators(validators);
            this.updateValueAndValidity({ emitEvent: false });
            this.hasRequiredValidator = this.required;
        }
        else if (!this.required && this.hasRequiredValidator) {
            /** @type {?} */
            var validators = __spread(this.validators);
            validators = validators.filter(function (val) { return val !== Validators.required; });
            // TODO: duplicated above
            this.setValidators(validators);
            this.updateValueAndValidity({ emitEvent: false });
            this.hasRequiredValidator = this.required;
        }
    };
    /**
     * @name setValue
     *
     * @param value
     * @param onlySelf
     * @param emitEvent
     * @param emitModelToViewChange
     * @param emitViewToModelChange
     *
     */
    /**
     * \@name setValue
     *
     * @param {?} value
     * @param {?=} __1
     * @return {?}
     */
    NovoFormControl.prototype.setValue = /**
     * \@name setValue
     *
     * @param {?} value
     * @param {?=} __1
     * @return {?}
     */
    function (value, _a) {
        var _this = this;
        var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent, emitModelToViewChange = _b.emitModelToViewChange, emitViewToModelChange = _b.emitViewToModelChange;
        this.markAsDirty();
        this.markAsTouched();
        this.displayValueChanges.emit(value);
        _super.prototype.setValue.call(this, value, { onlySelf: onlySelf, emitEvent: emitEvent, emitModelToViewChange: emitModelToViewChange, emitViewToModelChange: emitViewToModelChange });
        // History
        clearTimeout(this.historyTimeout);
        this.historyTimeout = setTimeout(function () {
            _this.valueHistory.push(value);
        }, 300);
    };
    /**
     * @name setReadOnly
     * @param isReadOnly
     */
    /**
     * \@name setReadOnly
     * @param {?} isReadOnly
     * @return {?}
     */
    NovoFormControl.prototype.setReadOnly = /**
     * \@name setReadOnly
     * @param {?} isReadOnly
     * @return {?}
     */
    function (isReadOnly) {
        this.readOnly = isReadOnly;
        if (this.readOnly) {
            this.disable();
        }
        else {
            this.enable();
        }
    };
    /**
     * Disables the control. This means the control will be exempt from validation checks and
     * excluded from the aggregate value of any parent. Its status is `DISABLED`.
     *
     * If the control has children, all children will be disabled to maintain the model.
     */
    /**
     * Disables the control. This means the control will be exempt from validation checks and
     * excluded from the aggregate value of any parent. Its status is `DISABLED`.
     *
     * If the control has children, all children will be disabled to maintain the model.
     * @param {?=} opts
     * @return {?}
     */
    NovoFormControl.prototype.disable = /**
     * Disables the control. This means the control will be exempt from validation checks and
     * excluded from the aggregate value of any parent. Its status is `DISABLED`.
     *
     * If the control has children, all children will be disabled to maintain the model.
     * @param {?=} opts
     * @return {?}
     */
    function (opts) {
        if (opts === void 0) { opts = { emitEvent: false }; }
        if (typeof opts.emitEvent === 'undefined') {
            opts.emitEvent = false;
        }
        _super.prototype.disable.call(this, opts);
    };
    /**
     * @param {?=} opts
     * @return {?}
     */
    NovoFormControl.prototype.enable = /**
     * @param {?=} opts
     * @return {?}
     */
    function (opts) {
        if (opts === void 0) { opts = { emitEvent: false }; }
        if (typeof opts.emitEvent === 'undefined') {
            opts.emitEvent = false;
        }
        _super.prototype.enable.call(this, opts);
    };
    /**
     * @name markAsInvalid
     * @param message
     */
    /**
     * \@name markAsInvalid
     * @param {?} message
     * @return {?}
     */
    NovoFormControl.prototype.markAsInvalid = /**
     * \@name markAsInvalid
     * @param {?} message
     * @return {?}
     */
    function (message) {
        this.markAsDirty();
        this.markAsTouched();
        this.setErrors(Object.assign({}, this.errors, { custom: message }));
    };
    return NovoFormControl;
}(FormControl));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ControlConfig = /** @class */ (function () {
    function ControlConfig() {
    }
    return ControlConfig;
}());
var BaseControl = /** @class */ (function (_super) {
    __extends(BaseControl, _super);
    function BaseControl(type, config) {
        if (type === void 0) { type = 'BaseControl'; }
        if (config === void 0) { config = {}; }
        var _this = _super.call(this) || this;
        _this.__type = 'BaseControl';
        _this.__type = type;
        _this.__config = config;
        _this.validators = config.validators || [];
        _this.asyncValidators = config.asyncValidators || [];
        _this.value = config.value;
        _this.key = config.key || '';
        _this.label = config.label || '';
        _this.checkboxLabel = config.checkboxLabel;
        _this.name = config.name || '';
        _this.required = !!config.required;
        _this.hidden = !!config.hidden;
        _this.encrypted = !!config.encrypted;
        _this.sortOrder = config.sortOrder === undefined ? 1 : config.sortOrder;
        _this.controlType = config.controlType || '';
        _this.metaType = config.metaType;
        _this.placeholder = config.placeholder || '';
        _this.config = config.config || null;
        _this.dirty = !!config.value;
        _this.multiple = !!config.multiple;
        _this.headerConfig = config.headerConfig || null;
        _this.currencyFormat = config.currencyFormat || null;
        _this.associatedEntity = config.associatedEntity || null;
        _this.optionsType = config.optionsType || null;
        _this.options = config.options || [];
        _this.forceClear = new EventEmitter();
        _this.readOnly = !!config.readOnly || !!config.disabled;
        _this.disabled = !!config.disabled;
        _this.layoutOptions = config.layoutOptions || {};
        _this.military = !!config.military;
        _this.dateFormat = config.dateFormat;
        _this.textMaskEnabled = config.textMaskEnabled;
        _this.maskOptions = config.maskOptions;
        _this.allowInvalidDate = config.allowInvalidDate;
        _this.startDate = config.startDate;
        _this.endDate = config.endDate;
        _this.restrictFieldInteractions = !!config.restrictFieldInteractions;
        if (!Helpers.isEmpty(config.warning)) {
            _this.warning = config.warning;
        }
        if (_this.required) {
            _this.validators.push(Validators.required);
        }
        if (!Helpers.isBlank(config.maxlength)) {
            _this.maxlength = config.maxlength;
            _this.validators.push(Validators.maxLength(_this.maxlength));
        }
        if (!Helpers.isBlank(config.minlength)) {
            _this.minlength = config.minlength;
            _this.validators.push(Validators.minLength(_this.minlength));
        }
        _this.closeOnSelect = !!config.closeOnSelect;
        _this.interactions = config.interactions;
        _this.dataSpecialization = config.dataSpecialization;
        _this.dataType = config.dataType;
        _this.appendToBody = !!config.appendToBody;
        if (_this.appendToBody) {
            notify("'appendToBody' has been deprecated. Please remove this attribute.");
        }
        _this.parentScrollSelector = config.parentScrollSelector;
        _this.description = config.description;
        if (config.tooltip) {
            _this.tooltip = config.tooltip;
            _this.tooltipPosition = config.tooltipPosition;
            _this.tooltipSize = config.tooltipSize;
            _this.tooltipPreline = config.tooltipPreline;
            _this.removeTooltipArrow = config.removeTooltipArrow;
            _this.tooltipAutoPosition = config.tooltipAutoPosition;
        }
        _this.template = config.template;
        _this.customControlConfig = config.customControlConfig;
        _this.tipWell = config.tipWell;
        _this.width = config.width;
        _this.startupFocus = !!config.startupFocus;
        if (config.fileBrowserImageUploadUrl) {
            _this.fileBrowserImageUploadUrl = config.fileBrowserImageUploadUrl;
        }
        if (config.isEmpty) {
            _this.isEmpty = config.isEmpty;
        }
        return _this;
    }
    return BaseControl;
}(ControlConfig));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var MAX_INTEGER = 2147483647;
/** @type {?} */
var MIN_YEAR = 1753;
var FormValidators = /** @class */ (function () {
    function FormValidators() {
    }
    /**
     * @private
     * @param {?} subfield
     * @param {?} control
     * @return {?}
     */
    FormValidators.prototype.showStateRequiredFlag = /**
     * @private
     * @param {?} subfield
     * @param {?} control
     * @return {?}
     */
    function (subfield, control) {
        return (subfield === 'state' &&
            !Helpers.isEmpty(control.config.state) &&
            control.config.state.required &&
            Helpers.isBlank(control.value.state) &&
            control.config.state.updated &&
            !Helpers.isBlank(control.value.countryName) &&
            control.config.state.pickerConfig &&
            control.config.state.pickerConfig.defaultOptions &&
            control.config.state.pickerConfig.defaultOptions.length > 0);
    };
    // Makes sure the control value does not exceed the max integer value
    // Makes sure the control value does not exceed the max integer value
    /**
     * @param {?} control
     * @return {?}
     */
    FormValidators.maxInteger = 
    // Makes sure the control value does not exceed the max integer value
    /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        return control.value < MAX_INTEGER ? null : { integerTooLarge: true };
    };
    // Makes sure the control value is above the minimum year
    // Makes sure the control value is above the minimum year
    /**
     * @param {?} control
     * @return {?}
     */
    FormValidators.minYear = 
    // Makes sure the control value is above the minimum year
    /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        if (!control.value) {
            return null;
        }
        return control.value >= MIN_YEAR ? null : { minYear: true };
    };
    // Makes sure the control value does not exceed the max number value
    // Makes sure the control value does not exceed the max number value
    /**
     * @param {?} control
     * @return {?}
     */
    FormValidators.maxDouble = 
    // Makes sure the control value does not exceed the max number value
    /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        return control.value < Number.MAX_SAFE_INTEGER ? null : { doubleTooLarge: true };
    };
    // Make sure the control value is an email
    // Make sure the control value is an email
    /**
     * @param {?} control
     * @return {?}
     */
    FormValidators.isEmail = 
    // Make sure the control value is an email
    /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;
        return !control.value || EMAIL_REGEXP.test(control.value) ? null : { invalidEmail: true };
    };
    // Makes sure the control value is a valid address
    // Makes sure the control value is a valid address
    /**
     * @param {?} control
     * @return {?}
     */
    FormValidators.isValidAddress = 
    // Makes sure the control value is a valid address
    /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var fieldList = ['address1', 'address2', 'city', 'state', 'zip', 'countryID'];
        /** @type {?} */
        var invalidAddressFields = [];
        /** @type {?} */
        var maxlengthFields = [];
        /** @type {?} */
        var returnVal = null;
        /** @type {?} */
        var maxlengthError = false;
        /** @type {?} */
        var showCountryRequiredFlag = function (subfield, ctrl) {
            return (subfield === 'countryID' &&
                !Helpers.isEmpty(ctrl.config.countryID) &&
                ctrl.config.countryID.required &&
                Helpers.isBlank(ctrl.value.countryName) &&
                ctrl.config.countryID.updated);
        };
        /** @type {?} */
        var showStateRequiredFlag = function (subfield, ctrl) {
            return (subfield === 'state' &&
                !Helpers.isEmpty(ctrl.config.state) &&
                ctrl.config.state.required &&
                Helpers.isBlank(ctrl.value.state) &&
                ctrl.config.state.updated &&
                !Helpers.isBlank(ctrl.value.countryName) &&
                ctrl.config.state.pickerConfig &&
                ctrl.config.state.pickerConfig.defaultOptions &&
                ctrl.config.state.pickerConfig.defaultOptions.length > 0);
        };
        if (control.value && control.config) {
            /** @type {?} */
            var valid_1 = true;
            /** @type {?} */
            var formValidity_1 = true;
            fieldList.forEach(function (subfield) {
                if (!Helpers.isEmpty(control.config[subfield])) {
                    if ((['countryID', 'state'].indexOf(subfield) === -1 &&
                        control.config[subfield].required &&
                        !Helpers.isBlank(control.value[subfield]) &&
                        Helpers.isEmpty(control.value[subfield])) ||
                        showCountryRequiredFlag(subfield, control) ||
                        showStateRequiredFlag(subfield, control)) {
                        valid_1 = false;
                        invalidAddressFields.push(control.config[subfield].label);
                    }
                    if (((subfield !== 'countryID' && control.config[subfield].required && Helpers.isEmpty(control.value[subfield])) ||
                        (subfield === 'countryID' &&
                            !Helpers.isEmpty(control.config.countryID) &&
                            control.config.countryID.required &&
                            Helpers.isEmpty(control.value.countryName))) &&
                        !(subfield === 'state' &&
                            !Helpers.isBlank(control.value.countryName) &&
                            control.config.state.pickerConfig &&
                            control.config.state.pickerConfig.defaultOptions &&
                            control.config.state.pickerConfig.defaultOptions.length === 0)) {
                        formValidity_1 = false;
                    }
                    if (!Helpers.isEmpty(control.config[subfield].maxlength) &&
                        !Helpers.isEmpty(control.value[subfield]) &&
                        control.value[subfield].length > control.config[subfield].maxlength) {
                        maxlengthError = true;
                        maxlengthFields.push(subfield);
                        formValidity_1 = false;
                    }
                }
            });
            if (!valid_1 || !formValidity_1 || maxlengthError) {
                returnVal = {};
            }
            if (!valid_1) {
                returnVal.invalidAddress = true;
                returnVal.invalidAddressFields = invalidAddressFields;
            }
            if (!formValidity_1) {
                returnVal.invalidAddressForForm = true;
            }
            if (maxlengthError) {
                returnVal.maxlength = true;
                returnVal.maxlengthFields = maxlengthFields;
            }
            return returnVal;
        }
        return null;
    };
    return FormValidators;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AddressControl = /** @class */ (function (_super) {
    __extends(AddressControl, _super);
    function AddressControl(config) {
        var _this = _super.call(this, 'AddressControl', config) || this;
        _this.controlType = 'address';
        _this.validators.push(FormValidators.isValidAddress);
        return _this;
    }
    return AddressControl;
}(BaseControl));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CheckListControl = /** @class */ (function (_super) {
    __extends(CheckListControl, _super);
    function CheckListControl(config) {
        var _this = _super.call(this, 'CheckListControl', config) || this;
        _this.controlType = 'checklist';
        _this.options = config.options || [];
        return _this;
    }
    return CheckListControl;
}(BaseControl));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CheckboxControl = /** @class */ (function (_super) {
    __extends(CheckboxControl, _super);
    function CheckboxControl(config) {
        var _this = _super.call(this, 'CheckboxControl', config) || this;
        _this.controlType = 'checkbox';
        return _this;
    }
    return CheckboxControl;
}(BaseControl));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DateControl = /** @class */ (function (_super) {
    __extends(DateControl, _super);
    function DateControl(config) {
        var _this = _super.call(this, 'DateControl', config) || this;
        _this.controlType = 'date';
        return _this;
    }
    return DateControl;
}(BaseControl));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DateTimeControl = /** @class */ (function (_super) {
    __extends(DateTimeControl, _super);
    function DateTimeControl(config) {
        var _this = _super.call(this, 'DateTimeControl', config) || this;
        _this.controlType = 'date-time';
        return _this;
    }
    return DateTimeControl;
}(BaseControl));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var EditorControl = /** @class */ (function (_super) {
    __extends(EditorControl, _super);
    function EditorControl(config) {
        var _this = _super.call(this, 'EditorControl', config) || this;
        _this.controlType = 'editor';
        _this.minimal = false;
        return _this;
    }
    return EditorControl;
}(BaseControl));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AceEditorControl = /** @class */ (function (_super) {
    __extends(AceEditorControl, _super);
    function AceEditorControl(config) {
        var _this = _super.call(this, 'AceEditorControl', config) || this;
        _this.controlType = 'ace-editor';
        return _this;
    }
    return AceEditorControl;
}(BaseControl));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FileControl = /** @class */ (function (_super) {
    __extends(FileControl, _super);
    function FileControl(config) {
        var _this = _super.call(this, 'FileControl', config) || this;
        _this.controlType = 'file';
        // TODO - translate
        _this.placeholder = config.placeholder;
        _this.multiple = config.multiple;
        return _this;
    }
    return FileControl;
}(BaseControl));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NativeSelectControl = /** @class */ (function (_super) {
    __extends(NativeSelectControl, _super);
    function NativeSelectControl(config) {
        var _this = _super.call(this, 'NativeSelectControl', config) || this;
        _this.controlType = 'native-select';
        _this.options = [];
        _this.options = config.options || [];
        return _this;
    }
    return NativeSelectControl;
}(BaseControl));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PickerControl = /** @class */ (function (_super) {
    __extends(PickerControl, _super);
    function PickerControl(config) {
        var _this = _super.call(this, 'PickerControl', config) || this;
        _this.controlType = 'picker';
        _this.options = [];
        _this.options = config.options || [];
        return _this;
    }
    return PickerControl;
}(BaseControl));
var TablePickerControl = /** @class */ (function (_super) {
    __extends(TablePickerControl, _super);
    function TablePickerControl(config) {
        var _this = _super.call(this, Object.assign(config, { parentScrollSelector: '.table-container' })) || this;
        _this.__type = 'TablePickerControl';
        return _this;
    }
    return TablePickerControl;
}(PickerControl));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var QuickNoteControl = /** @class */ (function (_super) {
    __extends(QuickNoteControl, _super);
    function QuickNoteControl(config) {
        var _this = _super.call(this, 'QuickNoteControl', config) || this;
        _this.controlType = 'quick-note';
        _this.options = [];
        _this.options = config.options || [];
        return _this;
    }
    return QuickNoteControl;
}(BaseControl));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var RadioControl = /** @class */ (function (_super) {
    __extends(RadioControl, _super);
    function RadioControl(config) {
        var _this = _super.call(this, 'RadioControl', config) || this;
        _this.controlType = 'radio';
        _this.options = [];
        _this.options = config.options || [];
        return _this;
    }
    return RadioControl;
}(BaseControl));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ReadOnlyControl = /** @class */ (function (_super) {
    __extends(ReadOnlyControl, _super);
    function ReadOnlyControl(config) {
        var _this = _super.call(this, 'ReadOnlyControl', config) || this;
        _this.controlType = 'read-only';
        config.readOnly = true;
        return _this;
    }
    return ReadOnlyControl;
}(BaseControl));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SelectControl = /** @class */ (function (_super) {
    __extends(SelectControl, _super);
    function SelectControl(config) {
        var _this = _super.call(this, 'SelectControl', config) || this;
        _this.controlType = 'select';
        _this.options = [];
        _this.options = config.options || [];
        _this.placeholder = config.placeholder || '';
        return _this;
    }
    return SelectControl;
}(BaseControl));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TextAreaControl = /** @class */ (function (_super) {
    __extends(TextAreaControl, _super);
    function TextAreaControl(config) {
        var _this = _super.call(this, 'TextAreaControl', config) || this;
        _this.controlType = 'text-area';
        return _this;
    }
    return TextAreaControl;
}(BaseControl));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TextBoxControl = /** @class */ (function (_super) {
    __extends(TextBoxControl, _super);
    function TextBoxControl(config) {
        var _this = _super.call(this, 'TextBoxControl', config) || this;
        _this.controlType = 'textbox';
        _this.type = _this.getTextboxType(config.type) || '';
        _this.subType = config.type || '';
        _this.setValidators(_this.subType);
        return _this;
    }
    /**
     * @param {?} type
     * @return {?}
     */
    TextBoxControl.prototype.setValidators = /**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        switch (type) {
            case 'email':
                this.validators.push(FormValidators.isEmail);
                break;
            case 'number':
            case 'currency':
                this.validators.push(FormValidators.maxInteger);
                break;
            case 'float':
            case 'percentage':
                this.validators.push(FormValidators.maxDouble);
                break;
            case 'year':
                this.validators.push(FormValidators.minYear);
                break;
            default:
                break;
        }
    };
    /**
     * @param {?} type
     * @return {?}
     */
    TextBoxControl.prototype.getTextboxType = /**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        switch (type) {
            case 'percentage':
            case 'currency':
            case 'float':
            case 'year':
                return 'number';
            default:
                return type;
        }
    };
    return TextBoxControl;
}(BaseControl));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TilesControl = /** @class */ (function (_super) {
    __extends(TilesControl, _super);
    function TilesControl(config) {
        var _this = _super.call(this, 'TilesControl', config) || this;
        _this.controlType = 'tiles';
        _this.options = [];
        _this.options = config.options || [];
        return _this;
    }
    return TilesControl;
}(BaseControl));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TimeControl = /** @class */ (function (_super) {
    __extends(TimeControl, _super);
    function TimeControl(config) {
        var _this = _super.call(this, 'TimeControl', config) || this;
        _this.controlType = 'time';
        return _this;
    }
    return TimeControl;
}(BaseControl));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var GroupedControl = /** @class */ (function () {
    function GroupedControl(config) {
        var _this = this;
        this.__type = 'GroupedControl';
        Object.keys(config).forEach(function (key) { return (_this[key] = config[key]); });
    }
    return GroupedControl;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ControlFactory = /** @class */ (function () {
    function ControlFactory() {
    }
    /**
     * @param {?} type
     * @param {?} config
     * @return {?}
     */
    ControlFactory.create = /**
     * @param {?} type
     * @param {?} config
     * @return {?}
     */
    function (type, config) {
        switch (type) {
            case 'AddressControl':
                return new AddressControl(config);
            case 'CheckboxControl':
                return new CheckboxControl(config);
            case 'CheckListControl':
                return new CheckListControl(config);
            case 'CheckListControl':
                return new CheckListControl(config);
            case 'DateTimeControl':
                return new DateTimeControl(config);
            case 'EditorControl':
                return new EditorControl(config);
            case 'FileControl':
                return new FileControl(config);
            case 'NativeSelectControl':
                return new NativeSelectControl(config);
            case 'PickerControl':
                return new PickerControl(config);
            case 'TablePickerControl':
                return new TablePickerControl(config);
            case 'QuickNoteControl':
                return new QuickNoteControl(config);
            case 'RadioControl':
                return new RadioControl(config);
            case 'ReadOnlyControl':
                return new ReadOnlyControl(config);
            case 'TextAreaControl':
                return new TextAreaControl(config);
            case 'TextBoxControl':
                return new TextBoxControl(config);
            case 'SelectControl':
                return new SelectControl(config);
            case 'TilesControl':
                return new TilesControl(config);
            case 'TimeControl':
                return new TimeControl(config);
            default:
                console.warn('[ControlFactory] - unable to find control for type. Make sure to set "editorType" and "editorConfig" on your column', type);
                return null;
        }
    };
    return ControlFactory;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CustomControl = /** @class */ (function (_super) {
    __extends(CustomControl, _super);
    function CustomControl(config) {
        var _this = _super.call(this, config.template, config) || this;
        _this.controlType = 'custom';
        _this.controlType = config.template;
        return _this;
    }
    return CustomControl;
}(BaseControl));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoFormGroup = /** @class */ (function (_super) {
    __extends(NovoFormGroup, _super);
    function NovoFormGroup() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.fieldInteractionEvents = new EventEmitter();
        return _this;
    }
    Object.defineProperty(NovoFormGroup.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this.getRawValue();
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._value = v;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoFormGroup.prototype.enableAllControls = /**
     * @return {?}
     */
    function () {
        for (var key in this.controls) {
            if (((/** @type {?} */ (this.controls[key]))).readOnly) {
                ((/** @type {?} */ (this.controls[key]))).readOnly = false;
                this.controls[key].enable();
            }
        }
    };
    /**
     * @return {?}
     */
    NovoFormGroup.prototype.disableAllControls = /**
     * @return {?}
     */
    function () {
        for (var key in this.controls) {
            if (!((/** @type {?} */ (this.controls[key]))).readOnly) {
                ((/** @type {?} */ (this.controls[key]))).readOnly = true;
                this.controls[key].disable();
            }
        }
    };
    return NovoFormGroup;
}(FormGroup));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// App
var OptionsService = /** @class */ (function () {
    function OptionsService() {
    }
    /**
     * @param {?} http
     * @param {?} field
     * @param {?} config
     * @return {?}
     */
    OptionsService.prototype.getOptionsConfig = /**
     * @param {?} http
     * @param {?} field
     * @param {?} config
     * @return {?}
     */
    function (http, field, config) {
        return {
            field: 'value',
            format: '$label',
            options: function (query$$1) {
                return new Promise(function (resolve, reject) {
                    if (query$$1 && query$$1.length) {
                        http.get(field.optionsUrl + "?filter=" + (query$$1 || '')).subscribe(resolve, reject);
                    }
                    else {
                        resolve([]);
                    }
                });
            },
        };
    };
    OptionsService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    OptionsService.ctorParameters = function () { return []; };
    return OptionsService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FormUtils = /** @class */ (function () {
    function FormUtils(labels, optionsService) {
        this.labels = labels;
        this.optionsService = optionsService;
        this.ASSOCIATED_ENTITY_LIST = [
            'Candidate',
            'ClientContact',
            'ClientCorporation',
            'Lead',
            'Opportunity',
            'JobOrder',
            'CorporateUser',
            'Person',
            'Placement',
        ];
        this.ENTITY_PICKER_LIST = [
            'Candidate',
            'CandidateText',
            'Client',
            'ClientText',
            'ClientContact',
            'ClientContactText',
            'ClientCorporation',
            'ClientCorporationText',
            'Lead',
            'LeadText',
            'Opportunity',
            'OpportunityText',
            'JobOrder',
            'JobOrderText',
            'CorporateUser',
            'CorporateUserText',
            'Person',
            'PersonText',
            'Placement',
        ];
    }
    /**
     * @param {?} controls
     * @return {?}
     */
    FormUtils.prototype.toFormGroup = /**
     * @param {?} controls
     * @return {?}
     */
    function (controls) {
        /** @type {?} */
        var group$$1 = {};
        controls.forEach(function (control) {
            /** @type {?} */
            var value = Helpers.isBlank(control.value) ? '' : control.value;
            group$$1[control.key] = new NovoFormControl(value, control);
        });
        return new NovoFormGroup(group$$1);
    };
    /**
     * @return {?}
     */
    FormUtils.prototype.emptyFormGroup = /**
     * @return {?}
     */
    function () {
        return new NovoFormGroup({});
    };
    /**
     * @param {?} formGroup
     * @param {?} controls
     * @return {?}
     */
    FormUtils.prototype.addControls = /**
     * @param {?} formGroup
     * @param {?} controls
     * @return {?}
     */
    function (formGroup, controls) {
        controls.forEach(function (control) {
            /** @type {?} */
            var value = Helpers.isBlank(control.value) ? '' : control.value;
            /** @type {?} */
            var formControl = new NovoFormControl(value, control);
            formGroup.addControl(control.key, formControl);
        });
    };
    /**
     * @param {?} formGroup
     * @param {?} controls
     * @return {?}
     */
    FormUtils.prototype.removeControls = /**
     * @param {?} formGroup
     * @param {?} controls
     * @return {?}
     */
    function (formGroup, controls) {
        controls.forEach(function (control) {
            formGroup.removeControl(control.key);
        });
    };
    /**
     * @name toFormGroupFromFieldset
     * @param fieldsets
     */
    /**
     * \@name toFormGroupFromFieldset
     * @param {?} fieldsets
     * @return {?}
     */
    FormUtils.prototype.toFormGroupFromFieldset = /**
     * \@name toFormGroupFromFieldset
     * @param {?} fieldsets
     * @return {?}
     */
    function (fieldsets) {
        /** @type {?} */
        var controls = [];
        fieldsets.forEach(function (fieldset) {
            controls.push.apply(controls, __spread(fieldset.controls));
        });
        return this.toFormGroup(controls);
    };
    /**
     * @name hasAssociatedEntity
     * @param field
     */
    /**
     * \@name hasAssociatedEntity
     * @param {?} field
     * @return {?}
     */
    FormUtils.prototype.hasAssociatedEntity = /**
     * \@name hasAssociatedEntity
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return !!(field.associatedEntity && ~this.ASSOCIATED_ENTITY_LIST.indexOf(field.associatedEntity.entity));
    };
    /**
     * @name determineInputType
     * @param field
     */
    /**
     * \@name determineInputType
     * @param {?} field
     * @return {?}
     */
    FormUtils.prototype.determineInputType = /**
     * \@name determineInputType
     * @param {?} field
     * @return {?}
     */
    function (field) {
        /** @type {?} */
        var type;
        /** @type {?} */
        var dataSpecializationTypeMap = {
            DATETIME: 'datetime',
            TIME: 'time',
            MONEY: 'currency',
            PERCENTAGE: 'percentage',
            HTML: 'editor',
            'HTML-MINIMAL': 'editor-minimal',
            YEAR: 'year',
            WORKFLOW_OPTIONS: 'select',
        };
        /** @type {?} */
        var dataTypeToTypeMap = {
            Timestamp: 'date',
            Date: 'date',
            Boolean: 'tiles',
        };
        /** @type {?} */
        var inputTypeToTypeMap = {
            CHECKBOX: 'radio',
            RADIO: 'radio',
            SELECT: 'select',
            TILES: 'tiles',
        };
        /** @type {?} */
        var inputTypeMultiToTypeMap = {
            CHECKBOX: 'checklist',
            RADIO: 'checklist',
            SELECT: 'chips',
        };
        /** @type {?} */
        var typeToTypeMap = {
            file: 'file',
            COMPOSITE: 'address',
        };
        /** @type {?} */
        var numberDataTypeToTypeMap = {
            Double: 'float',
            BigDecimal: 'float',
            Integer: 'number',
        };
        if (field.type === 'TO_MANY') {
            if (this.hasAssociatedEntity(field)) {
                if (field.multiValue === false) {
                    type = 'entitypicker';
                }
                else {
                    type = 'entitychips';
                }
            }
            else {
                if (field.multiValue === false) {
                    type = 'picker';
                }
                else {
                    type = 'chips';
                }
            }
        }
        else if (field.type === 'TO_ONE') {
            if (field.dataSpecialization === 'WORKFLOW_OPTIONS') {
                type = dataSpecializationTypeMap[field.dataSpecialization];
            }
            else if (this.hasAssociatedEntity(field)) {
                type = 'entitypicker'; // TODO!
            }
            else {
                type = 'picker';
            }
        }
        else if (field.optionsUrl && field.inputType === 'SELECT') {
            if (field.optionsType && ~this.ENTITY_PICKER_LIST.indexOf(field.optionsType)) {
                type = 'entitypicker'; // TODO!
            }
            else {
                type = 'picker';
            }
        }
        else if (Object.keys(dataSpecializationTypeMap).indexOf(field.dataSpecialization) > -1) {
            type = dataSpecializationTypeMap[field.dataSpecialization];
        }
        else if (Object.keys(dataTypeToTypeMap).indexOf(field.dataType) > -1) {
            type = dataTypeToTypeMap[field.dataType];
        }
        else if (field.inputType === 'TEXTAREA') {
            type = 'textarea';
        }
        else if (field.options && Object.keys(inputTypeToTypeMap).indexOf(field.inputType) > -1 && !field.multiValue) {
            type = inputTypeToTypeMap[field.inputType];
        }
        else if (field.options && Object.keys(inputTypeMultiToTypeMap).indexOf(field.inputType) > -1 && field.multiValue) {
            type = inputTypeMultiToTypeMap[field.inputType];
        }
        else if (Object.keys(typeToTypeMap).indexOf(field.type) > -1) {
            type = typeToTypeMap[field.type];
        }
        else if (Object.keys(numberDataTypeToTypeMap).indexOf(field.dataType) > -1) {
            type = numberDataTypeToTypeMap[field.dataType];
        } /* else {
                throw new Error('FormUtils: This field type is unsupported.');
            }*/
        return type;
    };
    /**
     * @param {?} key
     * @return {?}
     */
    FormUtils.prototype.isFieldEncrypted = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return key.indexOf('customEncrypted') > -1;
    };
    /**
     * @param {?} field
     * @param {?} http
     * @param {?} config
     * @param {?=} overrides
     * @param {?=} forTable
     * @param {?=} fieldData
     * @return {?}
     */
    FormUtils.prototype.getControlForField = /**
     * @param {?} field
     * @param {?} http
     * @param {?} config
     * @param {?=} overrides
     * @param {?=} forTable
     * @param {?=} fieldData
     * @return {?}
     */
    function (field, http, config, overrides, forTable, fieldData) {
        if (forTable === void 0) { forTable = false; }
        var e_1, _a;
        // TODO: if field.type overrides `determineInputType` we should use it in that method or use this method
        // TODO: (cont.) as the setter of the field argument
        /** @type {?} */
        var type = this.determineInputType(field) || field.type;
        /** @type {?} */
        var control;
        /** @type {?} */
        var controlConfig = {
            metaType: field.type,
            type: type,
            key: field.name,
            label: field.label,
            placeholder: field.hint || '',
            required: field.required,
            hidden: !field.required,
            encrypted: this.isFieldEncrypted(field.name ? field.name.toString() : ''),
            value: field.value || field.defaultValue,
            sortOrder: field.sortOrder,
            associatedEntity: field.associatedEntity,
            optionsType: field.optionsType,
            multiple: field.multiValue,
            readOnly: !!field.disabled || !!field.readOnly,
            maxlength: field.maxLength,
            interactions: field.interactions,
            dataSpecialization: field.dataSpecialization,
            dataType: field.dataType,
            description: field.description || '',
            tooltip: field.tooltip,
            tooltipPosition: field.tooltipPosition,
            customControl: field.customControl,
            template: field.template,
            customControlConfig: field.customControlConfig,
            restrictFieldInteractions: field.restrictFieldInteractions,
            validators: field.validators,
            warning: field.warning,
            config: field.config || {},
            closeOnSelect: field.closeOnSelect,
        };
        // TODO: getControlOptions should always return the correct format
        /** @type {?} */
        var optionsConfig = this.getControlOptions(field, http, config, fieldData);
        if (Array.isArray(optionsConfig) && !(type === 'chips' || type === 'picker')) {
            controlConfig.options = optionsConfig;
        }
        else if (Array.isArray(optionsConfig) && (type === 'chips' || type === 'picker')) {
            controlConfig.config = {
                options: optionsConfig,
            };
        }
        else if (optionsConfig) {
            controlConfig.config = optionsConfig;
        }
        if (type === 'year') {
            controlConfig.maxlength = 4;
        }
        // TODO: Overrides should be an iterable of all properties (potentially a private method)
        /** @type {?} */
        var overrideResultsTemplate;
        if (overrides && overrides[field.name]) {
            if (overrides[field.name].resultsTemplate) {
                overrideResultsTemplate = overrides[field.name].resultsTemplate;
                controlConfig.config.resultsTemplate = overrideResultsTemplate;
                delete overrides[field.name].resultsTemplate;
            }
            if (overrides[field.name].overridePreviewTemplate) {
                overrideResultsTemplate = overrides[field.name].overridePreviewTemplate;
                controlConfig.config.overridePreviewTemplate = overrideResultsTemplate;
                delete overrides[field.name].overridePreviewTemplate;
            }
            if (overrides[field.name].pickerCallback) {
                controlConfig.config.callback = overrides[field.name].pickerCallback;
            }
            if (overrides[field.name].type) {
                type = overrides[field.name].type;
            }
            if (overrides[field.name].columns) {
                controlConfig.config.columns = overrides[field.name].columns;
                controlConfig.closeOnSelect = true;
                delete controlConfig.label;
            }
            if (overrides[field.name].warning) {
                controlConfig.warning = overrides[field.name].warning;
            }
            Object.assign(controlConfig, overrides[field.name]);
        }
        switch (type) {
            case 'entitychips':
                // TODO: This doesn't belong in this codebase
                controlConfig.multiple = true;
                controlConfig.config.resultsTemplate = overrideResultsTemplate || EntityPickerResults;
                controlConfig.config.previewTemplate = EntityPickerResult;
                // TODO: When appendToBody picker works better in table/form
                control = new PickerControl(controlConfig);
                break;
            case 'chips':
                controlConfig.multiple = true;
                // TODO: When appendToBody picker works better in table/form
                control = new PickerControl(controlConfig);
                break;
            case 'entitypicker':
                // TODO: This doesn't belong in this codebase
                controlConfig.config.resultsTemplate = overrideResultsTemplate || EntityPickerResults;
                // TODO: When appendToBody picker works better in table/form
                control = new PickerControl(controlConfig);
                break;
            case 'picker':
                // TODO: When appendToBody picker works better in table/form
                control = new PickerControl(controlConfig);
                break;
            case 'datetime':
                controlConfig.military = config ? !!config.military : false;
                control = new DateTimeControl(controlConfig);
                break;
            case 'date':
                controlConfig.dateFormat = field.dateFormat;
                controlConfig.textMaskEnabled = field.textMaskEnabled;
                controlConfig.allowInvalidDate = field.allowInvalidDate;
                controlConfig.military = config ? !!config.military : false;
                control = new DateControl(controlConfig);
                break;
            case 'time':
                controlConfig.military = config ? !!config.military : false;
                control = new TimeControl(controlConfig);
                break;
            case 'currency':
            case 'money':
            case 'email':
            case 'percentage':
            case 'float':
            case 'number':
            case 'year':
                // TODO: Only types from `determineInputType` should be used in this class
                if (type === 'money') {
                    type = 'currency';
                }
                controlConfig.type = type;
                control = new TextBoxControl(controlConfig);
                break;
            case 'text':
                control = new TextBoxControl(controlConfig);
                break;
            case 'textarea':
                control = new TextAreaControl(controlConfig);
                break;
            case 'editor':
                control = new EditorControl(controlConfig);
                break;
            case 'editor-minimal':
                control = new EditorControl(controlConfig);
                control.minimal = true;
                break;
            case 'tiles':
                control = new TilesControl(controlConfig);
                break;
            case 'checkbox':
                controlConfig.checkboxLabel = field.checkboxLabel;
                control = new CheckboxControl(controlConfig);
                break;
            case 'checklist':
                control = new CheckListControl(controlConfig);
                break;
            case 'radio':
                control = new RadioControl(controlConfig);
                break;
            case 'select':
                control = new SelectControl(controlConfig);
                break;
            case 'address':
                controlConfig.required = field.required || false;
                if (Helpers.isBlank(controlConfig.config)) {
                    controlConfig.config = {};
                }
                controlConfig.config.required = field.required;
                controlConfig.config.readOnly = controlConfig.readOnly;
                if (field.fields && field.fields.length) {
                    try {
                        for (var _b = __values(field.fields), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var subfield = _c.value;
                            controlConfig.config[subfield.name] = {
                                required: !!subfield.required,
                                hidden: !!subfield.readOnly,
                            };
                            if (!Helpers.isEmpty(subfield.label)) {
                                controlConfig.config[subfield.name].label = subfield.label;
                            }
                            if (!Helpers.isEmpty(subfield.maxLength)) {
                                controlConfig.config[subfield.name].maxlength = subfield.maxLength;
                            }
                            controlConfig.required = controlConfig.required || subfield.required;
                            if (subfield.defaultValue) {
                                if (Helpers.isBlank(controlConfig.value)) {
                                    controlConfig.value = {};
                                }
                                controlConfig.value[subfield.name] = subfield.defaultValue;
                            }
                            else if (subfield.name === 'countryID') {
                                if (Helpers.isBlank(controlConfig.value)) {
                                    controlConfig.value = {};
                                }
                                controlConfig.value[subfield.name] = 1;
                            }
                            if (subfield.name === 'state' || subfield.name === 'countryID') {
                                if (subfield.name === 'countryID') {
                                    subfield.optionsType = 'Country';
                                }
                                if (!subfield.optionsUrl) {
                                    subfield.optionsUrl = "options/" + subfield.optionsType;
                                }
                                controlConfig.config[subfield.name].pickerConfig = this.getControlOptions(subfield, http, config, fieldData);
                            }
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
                controlConfig.isEmpty = this.isAddressEmpty;
                control = new AddressControl(controlConfig);
                break;
            case 'file':
                control = new FileControl(controlConfig);
                break;
            case 'custom':
                control = new CustomControl(controlConfig);
                break;
            default:
                control = new TextBoxControl(controlConfig);
                break;
        }
        return control;
    };
    /**
     * @param {?} meta
     * @param {?} currencyFormat
     * @param {?} http
     * @param {?} config
     * @param {?=} overrides
     * @param {?=} forTable
     * @return {?}
     */
    FormUtils.prototype.toControls = /**
     * @param {?} meta
     * @param {?} currencyFormat
     * @param {?} http
     * @param {?} config
     * @param {?=} overrides
     * @param {?=} forTable
     * @return {?}
     */
    function (meta, currencyFormat, http, config, overrides, forTable) {
        var _this = this;
        if (forTable === void 0) { forTable = false; }
        /** @type {?} */
        var controls = [];
        if (meta && meta.fields) {
            /** @type {?} */
            var fields = meta.fields;
            fields.forEach(function (field) {
                if (field.name !== 'id' &&
                    (field.dataSpecialization !== 'SYSTEM' || ['address', 'billingAddress', 'secondaryAddress'].indexOf(field.name) !== -1) &&
                    !field.readOnly) {
                    /** @type {?} */
                    var control = _this.getControlForField(field, http, config, overrides, forTable);
                    // Set currency format
                    if (control.subType === 'currency') {
                        control.currencyFormat = currencyFormat;
                    }
                    // Add to controls
                    controls.push(control);
                }
            });
        }
        return controls;
    };
    /**
     * @param {?} meta
     * @param {?} currencyFormat
     * @param {?} http
     * @param {?} config
     * @param {?=} overrides
     * @return {?}
     */
    FormUtils.prototype.toTableControls = /**
     * @param {?} meta
     * @param {?} currencyFormat
     * @param {?} http
     * @param {?} config
     * @param {?=} overrides
     * @return {?}
     */
    function (meta, currencyFormat, http, config, overrides) {
        /** @type {?} */
        var controls = this.toControls(meta, currencyFormat, http, config, overrides, true);
        /** @type {?} */
        var ret = {};
        controls.forEach(function (control) {
            ret[control.key] = {
                editorType: control.__type,
                editorConfig: control.__config,
            };
        });
        return ret;
    };
    /**
     * @param {?} meta
     * @param {?} currencyFormat
     * @param {?} http
     * @param {?} config
     * @param {?=} overrides
     * @param {?=} data
     * @return {?}
     */
    FormUtils.prototype.toFieldSets = /**
     * @param {?} meta
     * @param {?} currencyFormat
     * @param {?} http
     * @param {?} config
     * @param {?=} overrides
     * @param {?=} data
     * @return {?}
     */
    function (meta, currencyFormat, http, config, overrides, data) {
        var _this = this;
        /** @type {?} */
        var fieldsets = [];
        /** @type {?} */
        var ranges = [];
        if (meta && meta.fields) {
            /** @type {?} */
            var fields = meta.fields
                .map(function (field) {
                if (!field.hasOwnProperty('sortOrder')) {
                    field.sortOrder = Number.MAX_SAFE_INTEGER - 1;
                }
                return field;
            })
                .sort(Helpers.sortByField(['sortOrder', 'name']));
            if (meta.sectionHeaders && meta.sectionHeaders.length) {
                meta.sectionHeaders.sort(Helpers.sortByField(['sortOrder', 'name']));
                meta.sectionHeaders.forEach(function (item, i) {
                    if (item.enabled) {
                        if (item.sortOrder > 0 && fieldsets.length === 0) {
                            fieldsets.push({
                                controls: [],
                            });
                            ranges.push({
                                min: 0,
                                max: item.sortOrder - 1,
                                fieldsetIdx: 0,
                            });
                        }
                        fieldsets.push({
                            title: item.label,
                            icon: item.icon || 'bhi-section',
                            controls: [],
                        });
                        ranges.push({
                            min: item.sortOrder,
                            max: Number.MAX_SAFE_INTEGER,
                            fieldsetIdx: fieldsets.length - 1,
                        });
                        if (i > 0 && fieldsets.length > 1) {
                            ranges[fieldsets.length - 2].max = item.sortOrder - 1;
                        }
                    }
                });
                if (!ranges.length) {
                    fieldsets.push({
                        controls: [],
                    });
                    ranges.push({
                        min: 0,
                        max: Number.MAX_SAFE_INTEGER,
                        fieldsetIdx: 0,
                    });
                }
            }
            else {
                fieldsets.push({
                    controls: [],
                });
                ranges.push({
                    min: 0,
                    max: Number.MAX_SAFE_INTEGER,
                    fieldsetIdx: 0,
                });
            }
            fields.forEach(function (field) {
                if (field.name !== 'id' &&
                    (field.dataSpecialization !== 'SYSTEM' || ['address', 'billingAddress', 'secondaryAddress'].indexOf(field.name) !== -1) &&
                    !field.readOnly) {
                    /** @type {?} */
                    var fieldData = data && data[field.name] ? data[field.name] : null;
                    /** @type {?} */
                    var control = _this.getControlForField(field, http, config, overrides, undefined, fieldData);
                    // Set currency format
                    if (control.subType === 'currency') {
                        control.currencyFormat = currencyFormat;
                    }
                    /** @type {?} */
                    var location_1 = ranges.find(function (item) {
                        return (item.min <= field.sortOrder && field.sortOrder <= item.max) || (item.min <= field.sortOrder && item.min === item.max);
                    });
                    if (location_1) {
                        // Add to controls
                        fieldsets[location_1.fieldsetIdx].controls.push(control);
                    }
                }
            });
        }
        if (fieldsets.length > 0) {
            return fieldsets;
        }
        else {
            return [
                {
                    controls: this.toControls(meta, currencyFormat, http, config),
                },
            ];
        }
    };
    /**
     * @param {?} field
     * @param {?} http
     * @param {?} config
     * @param {?=} fieldData
     * @return {?}
     */
    FormUtils.prototype.getControlOptions = /**
     * @param {?} field
     * @param {?} http
     * @param {?} config
     * @param {?=} fieldData
     * @return {?}
     */
    function (field, http, config, fieldData) {
        // TODO: The token property of config is the only property used; just pass in `token: string`
        if (field.dataType === 'Boolean' && !field.options) {
            // TODO: dataType should only be determined by `determineInputType` which doesn't ever return 'Boolean' it
            // TODO: (cont.) returns `tiles`
            return [{ value: false, label: this.labels.no }, { value: true, label: this.labels.yes }];
        }
        else if (field.workflowOptions && fieldData) {
            return this.getWorkflowOptions(field.workflowOptions, fieldData);
        }
        else if (field.optionsUrl) {
            return this.optionsService.getOptionsConfig(http, field, config);
        }
        else if (Array.isArray(field.options) && field.type === 'chips') {
            /** @type {?} */
            var options = field.options;
            return {
                field: 'value',
                format: '$label',
                options: options,
            };
        }
        else if (field.options) {
            return field.options;
        }
        return null;
    };
    /**
     * @private
     * @param {?} workflowOptions
     * @param {?} fieldData
     * @return {?}
     */
    FormUtils.prototype.getWorkflowOptions = /**
     * @private
     * @param {?} workflowOptions
     * @param {?} fieldData
     * @return {?}
     */
    function (workflowOptions, fieldData) {
        /** @type {?} */
        var currentValue;
        if (fieldData.id) {
            currentValue = { value: fieldData.id, label: fieldData.label ? fieldData.label : fieldData.id };
        }
        /** @type {?} */
        var currentWorkflowOption = fieldData.id ? fieldData.id : 'initial';
        /** @type {?} */
        var updateWorkflowOptions = workflowOptions[currentWorkflowOption] || [];
        if (currentValue && !updateWorkflowOptions.find(function (option) { return option.value === currentValue.value; })) {
            updateWorkflowOptions.unshift(currentValue);
        }
        return updateWorkflowOptions;
    };
    /**
     * @param {?} controls
     * @param {?} values
     * @param {?=} keepClean
     * @param {?=} keyOverride
     * @return {?}
     */
    FormUtils.prototype.setInitialValues = /**
     * @param {?} controls
     * @param {?} values
     * @param {?=} keepClean
     * @param {?=} keyOverride
     * @return {?}
     */
    function (controls, values, keepClean, keyOverride) {
        for (var i = 0; i < controls.length; i++) {
            /** @type {?} */
            var control = controls[i];
            /** @type {?} */
            var key = keyOverride ? control.key.replace(keyOverride, '') : control.key;
            /** @type {?} */
            var value = values[key];
            if (Helpers.isBlank(value)) {
                continue;
            }
            if (Array.isArray(value) && value.length === 0) {
                continue;
            }
            if (Array.isArray(value) && value.length > 0) {
                value = value.filter(function (val) { return !(Object.keys(val).length === 0 && val.constructor === Object); });
                if (value.length === 0) {
                    continue;
                }
            }
            if (value.data && value.data.length === 0) {
                continue;
            }
            if (Object.keys(value).length === 0 && value.constructor === Object) {
                continue;
            }
            control.value = value;
            // TODO: keepClean is not required, but is always used. It should default (to true?)
            control.dirty = !keepClean;
        }
    };
    /**
     * @param {?} fieldsets
     * @param {?} values
     * @param {?=} keepClean
     * @return {?}
     */
    FormUtils.prototype.setInitialValuesFieldsets = /**
     * @param {?} fieldsets
     * @param {?} values
     * @param {?=} keepClean
     * @return {?}
     */
    function (fieldsets, values, keepClean) {
        var _this = this;
        fieldsets.forEach(function (fieldset) {
            _this.setInitialValues(fieldset.controls, values, keepClean);
        });
    };
    /**
     * @param {?} controls
     * @return {?}
     */
    FormUtils.prototype.forceShowAllControls = /**
     * @param {?} controls
     * @return {?}
     */
    function (controls) {
        controls.forEach(function (control) {
            control.hidden = false;
        });
    };
    /**
     * @param {?} fieldsets
     * @return {?}
     */
    FormUtils.prototype.forceShowAllControlsInFieldsets = /**
     * @param {?} fieldsets
     * @return {?}
     */
    function (fieldsets) {
        fieldsets.forEach(function (fieldset) {
            fieldset.controls.forEach(function (control) {
                control.hidden = false;
            });
        });
    };
    /**
     * @param {?} form
     * @return {?}
     */
    FormUtils.prototype.forceValidation = /**
     * @param {?} form
     * @return {?}
     */
    function (form) {
        Object.keys(form.controls).forEach(function (key) {
            /** @type {?} */
            var control = form.controls[key];
            if (control.required && Helpers.isBlank(form.value[control.key])) {
                control.markAsDirty();
                control.markAsTouched();
            }
        });
    };
    /**
     * @param {?} control
     * @return {?}
     */
    FormUtils.prototype.isAddressEmpty = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var fieldList = ['address1', 'address2', 'city', 'state', 'zip', 'countryID'];
        /** @type {?} */
        var valid = true;
        if (control.value && control.config) {
            fieldList.forEach(function (subfield) {
                if (((subfield !== 'countryID' &&
                    !Helpers.isEmpty(control.config[subfield]) &&
                    control.config[subfield].required &&
                    (Helpers.isBlank(control.value[subfield]) || Helpers.isEmpty(control.value[subfield]))) ||
                    (subfield === 'countryID' &&
                        !Helpers.isEmpty(control.config.countryID) &&
                        control.config.countryID.required &&
                        Helpers.isEmpty(control.value.countryName))) &&
                    !(subfield === 'state' &&
                        !Helpers.isBlank(control.value.countryName) &&
                        control.config.state.pickerConfig &&
                        control.config.state.pickerConfig.defaultOptions &&
                        control.config.state.pickerConfig.defaultOptions.length === 0)) {
                    valid = false;
                }
            });
        }
        return valid;
    };
    FormUtils.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FormUtils.ctorParameters = function () { return [
        { type: NovoLabelService },
        { type: OptionsService }
    ]; };
    return FormUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoToastService = /** @class */ (function () {
    function NovoToastService(componentUtils) {
        this.componentUtils = componentUtils;
        this.references = [];
        this.themes = ['default', 'success', 'info', 'warning', 'danger'];
        this.icons = {
            default: 'bell',
            success: 'check',
            info: 'info',
            warning: 'warning',
            danger: 'remove',
        };
        this.defaults = {
            hideDelay: 3500,
            position: 'growlTopRight',
            theme: 'default',
        };
    }
    Object.defineProperty(NovoToastService.prototype, "parentViewContainer", {
        set: /**
         * @param {?} view
         * @return {?}
         */
        function (view) {
            this._parentViewContainer = view;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} options
     * @param {?=} toastElement
     * @return {?}
     */
    NovoToastService.prototype.alert = /**
     * @param {?} options
     * @param {?=} toastElement
     * @return {?}
     */
    function (options, toastElement) {
        var _this = this;
        if (toastElement === void 0) { toastElement = NovoToastElement; }
        return new Promise(function (resolve) {
            if (!_this._parentViewContainer) {
                console.error('No parent view container specified for the ToastService. Set it inside your main application. \nthis.toastService.parentViewContainer = view (ViewContainerRef)');
                return;
            }
            /** @type {?} */
            var toast = _this.componentUtils.appendNextToLocation(toastElement, _this._parentViewContainer);
            _this.references.push(toast);
            _this.handleAlert(toast.instance, options);
            resolve(toast);
        });
    };
    /**
     * @param {?} toast
     * @return {?}
     */
    NovoToastService.prototype.isVisible = /**
     * @param {?} toast
     * @return {?}
     */
    function (toast) {
        return toast.show;
    };
    /**
     * @param {?} toast
     * @return {?}
     */
    NovoToastService.prototype.hide = /**
     * @param {?} toast
     * @return {?}
     */
    function (toast) {
        var _this = this;
        toast.animate = false;
        setTimeout(function () {
            toast.show = false;
            /** @type {?} */
            var REF = _this.references.filter(function (x) { return x.instance === toast; })[0];
            if (REF) {
                _this.references.splice(_this.references.indexOf(REF), 1);
                REF.destroy();
            }
        }, 300);
    };
    /**
     * @param {?} toast
     * @param {?} options
     * @return {?}
     */
    NovoToastService.prototype.handleAlert = /**
     * @param {?} toast
     * @param {?} options
     * @return {?}
     */
    function (toast, options) {
        var _this = this;
        this.setToastOnSession(toast, options);
        setTimeout(function () {
            _this.show(toast);
        }, 20);
        if (!toast.isCloseable) {
            this.toastTimer(toast);
        }
    };
    /**
     * @param {?} toast
     * @param {?} opts
     * @return {?}
     */
    NovoToastService.prototype.setToastOnSession = /**
     * @param {?} toast
     * @param {?} opts
     * @return {?}
     */
    function (toast, opts) {
        /** @type {?} */
        var OPTIONS = typeof opts === 'object' ? opts : {};
        toast.parent = this;
        toast.title = OPTIONS.title || '';
        toast.message = OPTIONS.message || '';
        toast.hideDelay = OPTIONS.hideDelay || this.defaults.hideDelay;
        toast.link = OPTIONS.link || '';
        toast.isCloseable = OPTIONS.isCloseable || false;
        /** @type {?} */
        var CUSTOM_CLASS = OPTIONS.customClass || '';
        /** @type {?} */
        var ALERT_STYLE = OPTIONS.theme || this.defaults.theme;
        /** @type {?} */
        var ALERT_POSITION = OPTIONS.position || this.defaults.position;
        /** @type {?} */
        var ALERT_ICON = OPTIONS.icon || this.icons.default;
        toast.iconClass = "bhi-" + ALERT_ICON;
        toast.launched = true;
        toast.alertTheme = ALERT_STYLE + " " + ALERT_POSITION + " " + CUSTOM_CLASS + " toast-container launched";
    };
    /**
     * @param {?} toast
     * @return {?}
     */
    NovoToastService.prototype.show = /**
     * @param {?} toast
     * @return {?}
     */
    function (toast) {
        toast.show = true;
        setTimeout(addClass, 25);
        /**
         * Adds animate class to be called after a timeout
         *
         * @return {?}
         */
        function addClass() {
            toast.animate = true;
        }
    };
    /**
     * @param {?} toast
     * @return {?}
     */
    NovoToastService.prototype.toastTimer = /**
     * @param {?} toast
     * @return {?}
     */
    function (toast) {
        var _this = this;
        if (toast.hideDelay < 0) {
            return;
        }
        setTimeout(function () {
            _this.hide(toast);
        }, toast.hideDelay);
    };
    NovoToastService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    NovoToastService.ctorParameters = function () { return [
        { type: ComponentUtils }
    ]; };
    return NovoToastService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoModalService = /** @class */ (function () {
    function NovoModalService(componentUtils) {
        this.componentUtils = componentUtils;
        this._parentViewContainer = null;
    }
    Object.defineProperty(NovoModalService.prototype, "parentViewContainer", {
        set: /**
         * @param {?} view
         * @return {?}
         */
        function (view) {
            this._parentViewContainer = view;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} component
     * @param {?=} scope
     * @return {?}
     */
    NovoModalService.prototype.open = /**
     * @param {?} component
     * @param {?=} scope
     * @return {?}
     */
    function (component, scope) {
        if (scope === void 0) { scope = {}; }
        if (!this._parentViewContainer) {
            console.error('No parent view container specified for the ModalService. Set it inside your main application. \nthis.modalService.parentViewContainer = view (ViewContainerRef)');
            return null;
        }
        /** @type {?} */
        var modal = new NovoModalRef();
        modal.component = component;
        modal.open();
        /** @type {?} */
        var bindings = ReflectiveInjector.resolve([{ provide: NovoModalRef, useValue: modal }, { provide: NovoModalParams, useValue: scope }]);
        modal.containerRef = this.componentUtils.appendNextToLocation(NovoModalContainerElement, this._parentViewContainer, bindings);
        return modal;
    };
    NovoModalService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    NovoModalService.ctorParameters = function () { return [
        { type: ComponentUtils }
    ]; };
    return NovoModalService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ControlConfirmModal = /** @class */ (function () {
    function ControlConfirmModal(modalRef, params, labels) {
        this.modalRef = modalRef;
        this.params = params;
        this.labels = labels;
    }
    /**
     * @param {?} result
     * @return {?}
     */
    ControlConfirmModal.prototype.close = /**
     * @param {?} result
     * @return {?}
     */
    function (result) {
        this.modalRef.close(result);
    };
    ControlConfirmModal.decorators = [
        { type: Component, args: [{
                    selector: 'control-confirm-modal',
                    template: "\n        <novo-notification type=\"warning\" [attr.data-automation-id]=\"'field-interaction-modal-' + params['key']\">\n            <h1>{{ labels.confirmChangesModalMessage }}</h1>\n            <h2 *ngIf=\"!params['message']\"><label>{{ params['label'] }}:</label> {{ params['oldValue'] }} <i class=\"bhi-arrow-right\"></i> {{ params['newValue'] }}</h2>\n            <h2 *ngIf=\"params['message']\">{{ params['message'] }}</h2>\n            <button theme=\"standard\" (click)=\"close(false)\" [attr.data-automation-id]=\"'field-interaction-modal-cancel' + params['key']\">{{ labels.cancel }}</button>\n            <button theme=\"primary\" icon=\"check\" (click)=\"close(true)\" autofocus [attr.data-automation-id]=\"'field-interaction-modal-save-' + params['key']\">{{ labels.save }}</button>\n        </novo-notification>\n    "
                }] }
    ];
    /** @nocollapse */
    ControlConfirmModal.ctorParameters = function () { return [
        { type: NovoModalRef },
        { type: NovoModalParams },
        { type: NovoLabelService }
    ]; };
    return ControlConfirmModal;
}());
var ControlPromptModal = /** @class */ (function () {
    function ControlPromptModal(modalRef, params, labels) {
        this.modalRef = modalRef;
        this.params = params;
        this.labels = labels;
    }
    /**
     * @param {?} result
     * @return {?}
     */
    ControlPromptModal.prototype.close = /**
     * @param {?} result
     * @return {?}
     */
    function (result) {
        this.modalRef.close(result);
    };
    ControlPromptModal.decorators = [
        { type: Component, args: [{
                    selector: 'control-prompt-modal',
                    template: "\n        <novo-notification type=\"warning\" [attr.data-automation-id]=\"'field-interaction-modal-' + params['key']\">\n            <h1>{{ labels.promptModalMessage }}</h1>\n            <p *ngFor=\"let change of params['changes']\">{{ change }}</p>\n            <button theme=\"standard\" (click)=\"close(false)\" [attr.data-automation-id]=\"'field-interaction-modal-cancel' + params['key']\">{{ labels.cancel }}</button>\n            <button theme=\"primary\" icon=\"check\" (click)=\"close(true)\" autofocus [attr.data-automation-id]=\"'field-interaction-modal-yes-' + params['key']\">{{ labels.yes }}</button>\n        </novo-notification>\n    "
                }] }
    ];
    /** @nocollapse */
    ControlPromptModal.ctorParameters = function () { return [
        { type: NovoModalRef },
        { type: NovoModalParams },
        { type: NovoLabelService }
    ]; };
    return ControlPromptModal;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CustomHttp = /** @class */ (function () {
    function CustomHttp(http) {
        this.http = http;
        this.mapFn = function (x) { return x; };
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} url
     * @param {?=} options
     * @return {THIS}
     */
    CustomHttp.prototype.get = /**
     * @template THIS
     * @this {THIS}
     * @param {?} url
     * @param {?=} options
     * @return {THIS}
     */
    function (url, options) {
        (/** @type {?} */ (this)).url = url;
        (/** @type {?} */ (this)).options = options;
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} mapFn
     * @return {THIS}
     */
    CustomHttp.prototype.map = /**
     * @template THIS
     * @this {THIS}
     * @param {?} mapFn
     * @return {THIS}
     */
    function (mapFn) {
        (/** @type {?} */ (this)).mapFn = mapFn;
        return (/** @type {?} */ (this));
    };
    /**
     * @param {?} resolve
     * @param {?=} reject
     * @return {?}
     */
    CustomHttp.prototype.subscribe = /**
     * @param {?} resolve
     * @param {?=} reject
     * @return {?}
     */
    function (resolve, reject) {
        return this.http
            .get(this.url, this.options)
            .pipe(map(this.mapFn))
            .subscribe(resolve, reject);
    };
    return CustomHttp;
}());
var FieldInteractionApi = /** @class */ (function () {
    function FieldInteractionApi(toaster, modalService, formUtils, http, labels) {
        this.toaster = toaster;
        this.modalService = modalService;
        this.formUtils = formUtils;
        this.http = http;
        this.labels = labels;
    }
    Object.defineProperty(FieldInteractionApi.prototype, "form", {
        get: /**
         * @return {?}
         */
        function () {
            return this._form;
        },
        set: /**
         * @param {?} form
         * @return {?}
         */
        function (form) {
            this._form = form;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldInteractionApi.prototype, "associations", {
        get: /**
         * @return {?}
         */
        function () {
            return this.form.hasOwnProperty('associations') ? this.form.associations : {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldInteractionApi.prototype, "currentEntity", {
        get: /**
         * @return {?}
         */
        function () {
            return this.form.hasOwnProperty('currentEntity') ? this.form.currentEntity : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldInteractionApi.prototype, "currentEntityId", {
        get: /**
         * @return {?}
         */
        function () {
            return this.form.hasOwnProperty('currentEntityId') ? this.form.currentEntityId : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldInteractionApi.prototype, "isEdit", {
        get: /**
         * @return {?}
         */
        function () {
            return this.form.hasOwnProperty('edit') ? this.form.edit : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldInteractionApi.prototype, "isAdd", {
        get: /**
         * @return {?}
         */
        function () {
            return this.form.hasOwnProperty('edit') ? !this.form.edit : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldInteractionApi.prototype, "globals", {
        get: /**
         * @return {?}
         */
        function () {
            return this._globals;
        },
        set: /**
         * @param {?} globals
         * @return {?}
         */
        function (globals) {
            this._globals = globals;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldInteractionApi.prototype, "currentKey", {
        get: /**
         * @return {?}
         */
        function () {
            return this._currentKey;
        },
        set: /**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            this._currentKey = key;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldInteractionApi.prototype, "appBridge", {
        get: /**
         * @return {?}
         */
        function () {
            return this._appBridge;
        },
        set: /**
         * @param {?} appBridge
         * @return {?}
         */
        function (appBridge) {
            this._appBridge = appBridge;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FieldInteractionApi.prototype.isActiveControlValid = /**
     * @return {?}
     */
    function () {
        return !!this.getValue(this.currentKey);
    };
    /**
     * @return {?}
     */
    FieldInteractionApi.prototype.getActiveControl = /**
     * @return {?}
     */
    function () {
        return this.getControl(this.currentKey);
    };
    /**
     * @return {?}
     */
    FieldInteractionApi.prototype.getActiveKey = /**
     * @return {?}
     */
    function () {
        return this.currentKey;
    };
    /**
     * @return {?}
     */
    FieldInteractionApi.prototype.getActiveValue = /**
     * @return {?}
     */
    function () {
        return this.getValue(this.currentKey);
    };
    /**
     * @return {?}
     */
    FieldInteractionApi.prototype.getActiveInitialValue = /**
     * @return {?}
     */
    function () {
        return this.getInitialValue(this.currentKey);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    FieldInteractionApi.prototype.getControl = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (!key) {
            console.error('[FieldInteractionAPI] - invalid or missing "key"'); // tslint:disable-line
            return null;
        }
        /** @type {?} */
        var control = this.form.controls[key];
        if (!control) {
            console.error('[FieldInteractionAPI] - could not find a control in the form by the key --', key); // tslint:disable-line
            return null;
        }
        return (/** @type {?} */ (control));
    };
    /**
     * @param {?} key
     * @return {?}
     */
    FieldInteractionApi.prototype.getValue = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        /** @type {?} */
        var control = this.getControl(key);
        if (control) {
            return control.value;
        }
        return null;
    };
    /**
     * @param {?} key
     * @return {?}
     */
    FieldInteractionApi.prototype.getRawValue = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        /** @type {?} */
        var control = this.getControl(key);
        if (control) {
            return control.rawValue;
        }
        return null;
    };
    /**
     * @param {?} key
     * @return {?}
     */
    FieldInteractionApi.prototype.getInitialValue = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        /** @type {?} */
        var control = this.getControl(key);
        if (control) {
            return control.initialValue;
        }
        return null;
    };
    /**
     * @param {?} key
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */
    FieldInteractionApi.prototype.setValue = /**
     * @param {?} key
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */
    function (key, value, options) {
        /** @type {?} */
        var control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.setValue(value, options);
            this.triggerEvent({ controlKey: key, prop: 'value', value: value });
        }
    };
    /**
     * @param {?} key
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */
    FieldInteractionApi.prototype.patchValue = /**
     * @param {?} key
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */
    function (key, value, options) {
        /** @type {?} */
        var control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.setValue(value, options);
            this.triggerEvent({ controlKey: key, prop: 'value', value: value });
        }
    };
    /**
     * @param {?} key
     * @param {?} isReadOnly
     * @return {?}
     */
    FieldInteractionApi.prototype.setReadOnly = /**
     * @param {?} key
     * @param {?} isReadOnly
     * @return {?}
     */
    function (key, isReadOnly) {
        /** @type {?} */
        var control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.setReadOnly(isReadOnly);
            this.triggerEvent({ controlKey: key, prop: 'readOnly', value: isReadOnly });
        }
    };
    /**
     * @param {?} key
     * @param {?} required
     * @return {?}
     */
    FieldInteractionApi.prototype.setRequired = /**
     * @param {?} key
     * @param {?} required
     * @return {?}
     */
    function (key, required) {
        /** @type {?} */
        var control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.setRequired(required);
            this.triggerEvent({ controlKey: key, prop: 'required', value: required });
        }
    };
    /**
     * @param {?} key
     * @param {?=} clearValue
     * @return {?}
     */
    FieldInteractionApi.prototype.hide = /**
     * @param {?} key
     * @param {?=} clearValue
     * @return {?}
     */
    function (key, clearValue) {
        if (clearValue === void 0) { clearValue = true; }
        /** @type {?} */
        var control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.hide(clearValue);
            this.disable(key, { emitEvent: false });
            this.triggerEvent({ controlKey: key, prop: 'hidden', value: true });
        }
    };
    /**
     * @param {?} key
     * @return {?}
     */
    FieldInteractionApi.prototype.show = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        /** @type {?} */
        var control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.show();
            this.enable(key, { emitEvent: false });
            this.triggerEvent({ controlKey: key, prop: 'hidden', value: false });
        }
    };
    /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    FieldInteractionApi.prototype.disable = /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    function (key, options) {
        /** @type {?} */
        var control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.disable(options);
            this.triggerEvent({ controlKey: key, prop: 'readOnly', value: true });
        }
    };
    /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    FieldInteractionApi.prototype.enable = /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    function (key, options) {
        /** @type {?} */
        var control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.enable(options);
            this.triggerEvent({ controlKey: key, prop: 'readOnly', value: false });
        }
    };
    /**
     * @param {?} key
     * @param {?=} validationMessage
     * @return {?}
     */
    FieldInteractionApi.prototype.markAsInvalid = /**
     * @param {?} key
     * @param {?=} validationMessage
     * @return {?}
     */
    function (key, validationMessage) {
        /** @type {?} */
        var control = this.getControl(key);
        if (control) {
            if (control && !control.restrictFieldInteractions) {
                control.markAsInvalid(validationMessage);
            }
        }
    };
    /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    FieldInteractionApi.prototype.markAsDirty = /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    function (key, options) {
        /** @type {?} */
        var control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.markAsDirty(options);
        }
    };
    /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    FieldInteractionApi.prototype.markAsPending = /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    function (key, options) {
        /** @type {?} */
        var control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.markAsPending(options);
        }
    };
    /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    FieldInteractionApi.prototype.markAsPristine = /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    function (key, options) {
        /** @type {?} */
        var control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.markAsPristine(options);
        }
    };
    /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    FieldInteractionApi.prototype.markAsTouched = /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    function (key, options) {
        /** @type {?} */
        var control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.markAsTouched(options);
        }
    };
    /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    FieldInteractionApi.prototype.markAsUntouched = /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    function (key, options) {
        /** @type {?} */
        var control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.markAsUntouched(options);
        }
    };
    /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    FieldInteractionApi.prototype.updateValueAndValidity = /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    function (key, options) {
        /** @type {?} */
        var control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.updateValueAndValidity(options);
        }
    };
    /**
     * @param {?} toastConfig
     * @return {?}
     */
    FieldInteractionApi.prototype.displayToast = /**
     * @param {?} toastConfig
     * @return {?}
     */
    function (toastConfig) {
        if (this.toaster) {
            this.toaster.alert(toastConfig);
        }
    };
    /**
     * @param {?} key
     * @param {?} tip
     * @param {?=} icon
     * @param {?=} allowDismiss
     * @return {?}
     */
    FieldInteractionApi.prototype.displayTip = /**
     * @param {?} key
     * @param {?} tip
     * @param {?=} icon
     * @param {?=} allowDismiss
     * @return {?}
     */
    function (key, tip, icon, allowDismiss) {
        /** @type {?} */
        var control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.tipWell = {
                tip: tip,
                icon: icon,
                button: allowDismiss,
            };
            this.triggerEvent({ controlKey: key, prop: 'tipWell', value: tip });
        }
    };
    /**
     * @param {?} key
     * @param {?} tooltip
     * @return {?}
     */
    FieldInteractionApi.prototype.setTooltip = /**
     * @param {?} key
     * @param {?} tooltip
     * @return {?}
     */
    function (key, tooltip) {
        /** @type {?} */
        var control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.tooltip = tooltip;
            if (tooltip.length >= 40 && tooltip.length <= 400) {
                control.tooltipSize = 'large';
                control.tooltipPreline = true;
            }
            else if (tooltip.length > 400) {
                control.tooltipSize = 'extra-large';
            }
            this.triggerEvent({ controlKey: key, prop: 'tooltip', value: tooltip });
        }
    };
    /**
     * @param {?} key
     * @param {?=} message
     * @return {?}
     */
    FieldInteractionApi.prototype.confirmChanges = /**
     * @param {?} key
     * @param {?=} message
     * @return {?}
     */
    function (key, message) {
        var _this = this;
        /** @type {?} */
        var history = this.getProperty(key, 'valueHistory');
        /** @type {?} */
        var oldValue = history[history.length - 2];
        /** @type {?} */
        var newValue = this.getValue(key);
        /** @type {?} */
        var label = this.getProperty(key, 'label');
        ((/** @type {?} */ (document.activeElement))).blur();
        return this.modalService.open(ControlConfirmModal, { oldValue: oldValue, newValue: newValue, label: label, message: message, key: key }).onClosed.then(function (result) {
            if (!result) {
                _this.setValue(key, oldValue, { emitEvent: false });
            }
        });
    };
    /**
     * @param {?} key
     * @param {?} changes
     * @return {?}
     */
    FieldInteractionApi.prototype.promptUser = /**
     * @param {?} key
     * @param {?} changes
     * @return {?}
     */
    function (key, changes) {
        ((/** @type {?} */ (document.activeElement))).blur();
        return this.modalService.open(ControlPromptModal, { changes: changes, key: key }).onClosed;
    };
    /**
     * @param {?} key
     * @param {?} prop
     * @param {?} value
     * @return {?}
     */
    FieldInteractionApi.prototype.setProperty = /**
     * @param {?} key
     * @param {?} prop
     * @param {?} value
     * @return {?}
     */
    function (key, prop, value) {
        /** @type {?} */
        var control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control[prop] = value;
            this.triggerEvent({ controlKey: key, prop: prop, value: value });
        }
    };
    /**
     * @param {?} key
     * @param {?} prop
     * @return {?}
     */
    FieldInteractionApi.prototype.getProperty = /**
     * @param {?} key
     * @param {?} prop
     * @return {?}
     */
    function (key, prop) {
        /** @type {?} */
        var control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            return control[prop];
        }
        return null;
    };
    /**
     * @param {?} key
     * @return {?}
     */
    FieldInteractionApi.prototype.isValueEmpty = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        /** @type {?} */
        var value = this.getValue(key);
        return Helpers.isEmpty(value);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    FieldInteractionApi.prototype.isValueBlank = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        /** @type {?} */
        var value = this.getValue(key);
        return Helpers.isBlank(value);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    FieldInteractionApi.prototype.hasField = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return !!this.form.controls[key];
    };
    /**
     * @param {?} key
     * @param {?} newOption
     * @return {?}
     */
    FieldInteractionApi.prototype.addStaticOption = /**
     * @param {?} key
     * @param {?} newOption
     * @return {?}
     */
    function (key, newOption) {
        /** @type {?} */
        var control = this.getControl(key);
        /** @type {?} */
        var optionToAdd = newOption;
        /** @type {?} */
        var isUnique = true;
        if (control && !control.restrictFieldInteractions) {
            /** @type {?} */
            var currentOptions = this.getProperty(key, 'options');
            if (!currentOptions || !currentOptions.length) {
                /** @type {?} */
                var config = this.getProperty(key, 'config');
                if (config) {
                    currentOptions = config.options;
                    if (currentOptions && Array.isArray(currentOptions)) {
                        if (currentOptions[0].value && !optionToAdd.value) {
                            optionToAdd = { value: newOption, label: newOption };
                        }
                        config.options = __spread(currentOptions, [optionToAdd]);
                        this.setProperty(key, 'config', config);
                    }
                }
            }
            else {
                if (currentOptions[0].value && !optionToAdd.value) {
                    optionToAdd = { value: newOption, label: newOption };
                }
                // Ensure duplicate values are not added
                currentOptions.forEach(function (option) {
                    if ((option.value && option.value === optionToAdd.value) || option === optionToAdd) {
                        isUnique = false;
                    }
                });
                if (isUnique) {
                    this.setProperty(key, 'options', __spread(currentOptions, [optionToAdd]));
                }
            }
            if (isUnique) {
                this.triggerEvent({ controlKey: key, prop: 'options', value: __spread(currentOptions, [optionToAdd]) });
            }
        }
    };
    /**
     * @param {?} key
     * @param {?} optionToRemove
     * @return {?}
     */
    FieldInteractionApi.prototype.removeStaticOption = /**
     * @param {?} key
     * @param {?} optionToRemove
     * @return {?}
     */
    function (key, optionToRemove) {
        /** @type {?} */
        var control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            /** @type {?} */
            var currentOptions = this.getProperty(key, 'options');
            if (!currentOptions || !currentOptions.length) {
                /** @type {?} */
                var config = this.getProperty(key, 'config');
                if (config) {
                    currentOptions = config.options;
                    if (currentOptions && Array.isArray(currentOptions)) {
                        /** @type {?} */
                        var index_1 = -1;
                        currentOptions.forEach(function (opt, i) {
                            if (opt.value || opt.label) {
                                if (opt.value === optionToRemove || opt.label === optionToRemove) {
                                    index_1 = i;
                                }
                            }
                            else {
                                if (opt === optionToRemove) {
                                    index_1 = i;
                                }
                            }
                        });
                        if (index_1 !== -1) {
                            currentOptions.splice(index_1, 1);
                        }
                        config.options = __spread(currentOptions);
                        this.setProperty(key, 'config', config);
                    }
                }
            }
            else {
                /** @type {?} */
                var index_2 = -1;
                currentOptions.forEach(function (opt, i) {
                    if (opt.value || opt.label) {
                        if (opt.value === optionToRemove || opt.label === optionToRemove) {
                            index_2 = i;
                        }
                    }
                    else {
                        if (opt === optionToRemove) {
                            index_2 = i;
                        }
                    }
                });
                if (index_2 !== -1) {
                    currentOptions.splice(index_2, 1);
                }
                this.setProperty(key, 'options', __spread(currentOptions));
            }
            this.triggerEvent({ controlKey: key, prop: 'options', value: control.options });
        }
    };
    /**
     * @param {?} key
     * @param {?} config
     * @param {?=} mapper
     * @return {?}
     */
    FieldInteractionApi.prototype.modifyPickerConfig = /**
     * @param {?} key
     * @param {?} config
     * @param {?=} mapper
     * @return {?}
     */
    function (key, config, mapper) {
        var _this = this;
        /** @type {?} */
        var control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            /** @type {?} */
            var newConfig = {
                resultsTemplate: control.config.resultsTemplate,
            };
            if (config.optionsUrl || config.optionsUrlBuilder || config.optionsPromise) {
                newConfig = Object.assign(newConfig, {
                    options: function (query$$1) {
                        if (config.optionsPromise) {
                            return config.optionsPromise(query$$1, new CustomHttp(_this.http));
                        }
                        return new Promise(function (resolve, reject) {
                            /** @type {?} */
                            var url = config.optionsUrlBuilder ? config.optionsUrlBuilder(query$$1) : config.optionsUrl + "?filter=" + (query$$1 || '');
                            if (query$$1 && query$$1.length) {
                                _this.http
                                    .get(url)
                                    .pipe(map(function (results) {
                                    if (mapper) {
                                        return results.map(mapper);
                                    }
                                    return results;
                                }))
                                    .subscribe(resolve, reject);
                            }
                            else {
                                resolve([]);
                            }
                        });
                    },
                });
                if (config.hasOwnProperty('format')) {
                    newConfig.format = config.format;
                }
            }
            else if (config.options) {
                newConfig.options = __spread(config.options);
            }
            this.setProperty(key, 'config', newConfig);
            this.triggerEvent({ controlKey: key, prop: 'pickerConfig', value: config });
        }
    };
    /**
     * @param {?} key
     * @param {?} loading
     * @return {?}
     */
    FieldInteractionApi.prototype.setLoading = /**
     * @param {?} key
     * @param {?} loading
     * @return {?}
     */
    function (key, loading) {
        var _this = this;
        /** @type {?} */
        var control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            if (loading) {
                this.form.controls[key].fieldInteractionloading = true;
                control.setErrors({ loading: true });
                // History
                clearTimeout(this.asyncBlockTimeout);
                this.asyncBlockTimeout = setTimeout(function () {
                    _this.setLoading(key, false);
                    _this.displayTip(key, _this.labels.asyncFailure, 'info', false);
                    _this.setProperty(key, '_displayedAsyncFailure', true);
                }, 10000);
            }
            else {
                this.form.controls[key].fieldInteractionloading = false;
                clearTimeout(this.asyncBlockTimeout);
                control.setErrors({ loading: null });
                control.updateValueAndValidity({ emitEvent: false });
                if (this.getProperty(key, '_displayedAsyncFailure')) {
                    this.setProperty(key, 'tipWell', null);
                }
            }
            this.triggerEvent({ controlKey: key, prop: 'loading', value: loading });
        }
    };
    /**
     * @param {?} key
     * @param {?} metaForNewField
     * @param {?=} position
     * @param {?=} initialValue
     * @return {?}
     */
    FieldInteractionApi.prototype.addControl = /**
     * @param {?} key
     * @param {?} metaForNewField
     * @param {?=} position
     * @param {?=} initialValue
     * @return {?}
     */
    function (key, metaForNewField, position, initialValue) {
        if (position === void 0) { position = FieldInteractionApi.FIELD_POSITIONS.ABOVE_FIELD; }
        if (!metaForNewField.key && !metaForNewField.name) {
            console.error('[FieldInteractionAPI] - missing "key" in meta for new field'); // tslint:disable-line
            return null;
        }
        if (!metaForNewField.key) {
            // If key is not explicitly declared, use name as key
            metaForNewField.key = metaForNewField.name;
        }
        if (this.form.controls[metaForNewField.key]) {
            // Field is already on the form
            return null;
        }
        /** @type {?} */
        var control = this.form.controls[key];
        /** @type {?} */
        var fieldsetIndex;
        /** @type {?} */
        var controlIndex;
        if (control) {
            fieldsetIndex = -1;
            controlIndex = -1;
            this.form.fieldsets.forEach(function (fieldset, fi) {
                fieldset.controls.forEach(function (fieldsetControl, ci) {
                    if (fieldsetControl.key === key) {
                        fieldsetIndex = fi;
                        controlIndex = ci;
                    }
                });
            });
            // Change the position of the newly added field
            switch (position) {
                case FieldInteractionApi.FIELD_POSITIONS.ABOVE_FIELD:
                    // Adding field above active field
                    // index can stay the same
                    break;
                case FieldInteractionApi.FIELD_POSITIONS.BELOW_FIELD:
                    // Adding field below active field
                    controlIndex += 1;
                    break;
                case FieldInteractionApi.FIELD_POSITIONS.TOP_OF_FORM:
                    // Adding field to the top of the form
                    controlIndex = 0;
                    fieldsetIndex = 0;
                    break;
                case FieldInteractionApi.FIELD_POSITIONS.BOTTOM_OF_FORM:
                    // Adding field to the bottom of the form
                    fieldsetIndex = this.form.fieldsets.length - 1;
                    controlIndex = this.form.fieldsets[fieldsetIndex].controls.length;
                    break;
                default:
                    break;
            }
            if (fieldsetIndex !== -1 && controlIndex !== -1) {
                /** @type {?} */
                var novoControl = this.formUtils.getControlForField(metaForNewField, this.http, {});
                novoControl.hidden = false;
                /** @type {?} */
                var formControl = new NovoFormControl(initialValue, novoControl);
                this.form.addControl(novoControl.key, formControl);
                this.form.fieldsets[fieldsetIndex].controls.splice(controlIndex, 0, novoControl);
                this.triggerEvent({ controlKey: key, prop: 'addControl', value: formControl });
            }
        }
    };
    /**
     * @param {?} key
     * @return {?}
     */
    FieldInteractionApi.prototype.removeControl = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (!this.form.controls[key]) {
            // Field is not on the form
            return null;
        }
        /** @type {?} */
        var control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            /** @type {?} */
            var fieldsetIndex_1 = -1;
            /** @type {?} */
            var controlIndex_1 = -1;
            this.form.fieldsets.forEach(function (fieldset, fi) {
                fieldset.controls.forEach(function (fieldsetControl, ci) {
                    if (fieldsetControl.key === key) {
                        fieldsetIndex_1 = fi;
                        controlIndex_1 = ci;
                    }
                });
            });
            if (fieldsetIndex_1 !== -1 && controlIndex_1 !== -1) {
                this.form.removeControl(key);
                this.form.fieldsets[fieldsetIndex_1].controls.splice(controlIndex_1, 1);
                this.triggerEvent({ controlKey: key, prop: 'removeControl', value: key });
            }
        }
    };
    /**
     * @param {?} func
     * @param {?=} wait
     * @return {?}
     */
    FieldInteractionApi.prototype.debounce = /**
     * @param {?} func
     * @param {?=} wait
     * @return {?}
     */
    function (func, wait) {
        if (wait === void 0) { wait = 50; }
        /** @type {?} */
        var h;
        clearTimeout(h);
        h = setTimeout(function () { return func(); }, wait);
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    FieldInteractionApi.prototype.triggerEvent = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.form && this.form.fieldInteractionEvents) {
            this.form.fieldInteractionEvents.emit(event);
        }
    };
    FieldInteractionApi.FIELD_POSITIONS = {
        ABOVE_FIELD: 'ABOVE_FIELD',
        BELOW_FIELD: 'BELOW_FIELD',
        TOP_OF_FORM: 'TOP_OF_FORM',
        BOTTOM_OF_FORM: 'BOTTOM_OF_FORM',
    };
    FieldInteractionApi.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FieldInteractionApi.ctorParameters = function () { return [
        { type: NovoToastService },
        { type: NovoModalService },
        { type: FormUtils },
        { type: HttpClient },
        { type: NovoLabelService }
    ]; };
    return FieldInteractionApi;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoAutoSize = /** @class */ (function () {
    function NovoAutoSize(element) {
        this.element = element;
    }
    /**
     * @param {?} textArea
     * @return {?}
     */
    NovoAutoSize.prototype.onInput = /**
     * @param {?} textArea
     * @return {?}
     */
    function (textArea) {
        this.adjust();
    };
    /**
     * @return {?}
     */
    NovoAutoSize.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            _this.adjust();
        });
    };
    /**
     * @return {?}
     */
    NovoAutoSize.prototype.adjust = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var nativeElement = this.element.nativeElement;
        nativeElement.style.height = nativeElement.style.minHeight;
        nativeElement.style.height = nativeElement.scrollHeight + "px";
    };
    NovoAutoSize.decorators = [
        { type: Directive, args: [{
                    selector: 'textarea[autosize]',
                },] }
    ];
    /** @nocollapse */
    NovoAutoSize.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    NovoAutoSize.propDecorators = {
        onInput: [{ type: HostListener, args: ['input', ['$event.target'],] }]
    };
    return NovoAutoSize;
}());
// undo all template context references!
var NovoControlElement = /** @class */ (function (_super) {
    __extends(NovoControlElement, _super);
    function NovoControlElement(element, labels, dateFormatService, fieldInteractionApi, templateService, changeDetectorRef, locale) {
        if (locale === void 0) { locale = 'en-US'; }
        var _this = _super.call(this, element) || this;
        _this.labels = labels;
        _this.dateFormatService = dateFormatService;
        _this.fieldInteractionApi = fieldInteractionApi;
        _this.templateService = templateService;
        _this.changeDetectorRef = changeDetectorRef;
        _this.locale = locale;
        _this.condensed = false;
        _this.autoFocus = false;
        _this.change = new EventEmitter();
        _this.edit = new EventEmitter();
        _this.save = new EventEmitter();
        _this.delete = new EventEmitter();
        _this.upload = new EventEmitter();
        _this.formattedValue = '';
        _this.maxLengthMet = false;
        _this.itemCount = 0;
        _this._blurEmitter = new EventEmitter();
        _this._focusEmitter = new EventEmitter();
        _this._focused = false;
        _this._enteredText = '';
        _this._showCount = false;
        _this.maxLengthMetErrorfields = [];
        _this.templates = {};
        _this.loading = false;
        return _this;
    }
    Object.defineProperty(NovoControlElement.prototype, "onBlur", {
        get: /**
         * @return {?}
         */
        function () {
            return this._blurEmitter.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "onFocus", {
        get: /**
         * @return {?}
         */
        function () {
            return this._focusEmitter.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "maxlengthMetField", {
        get: /**
         * @return {?}
         */
        function () {
            var _this = this;
            if (this.maxLengthMetErrorfields && this.maxLengthMetErrorfields.length) {
                return this.maxLengthMetErrorfields.find(function (field) { return field === _this.focusedField; }) || '';
            }
            else {
                return '';
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "maxlengthErrorField", {
        get: /**
         * @return {?}
         */
        function () {
            var _this = this;
            if (this.errors && this.errors.maxlengthFields && this.errors.maxlengthFields.length) {
                return this.errors.maxlengthFields.find(function (field) { return field === _this.focusedField; }) || '';
            }
            else {
                return '';
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "showFieldMessage", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.errors && !this.maxLengthMet && Helpers.isBlank(this.control.description);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "showMaxLengthMetMessage", {
        get: /**
         * @return {?}
         */
        function () {
            return ((this.isDirty && this.maxLengthMet && this.focused && (!this.errors || (this.errors && !this.errors.maxlength))) ||
                (this.isDirty &&
                    this.maxlengthMetField &&
                    this.focused &&
                    (!this.errors || (this.errors && !this.errors.maxlengthFields.includes(this.maxlengthMetField)))));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "showErrorState", {
        get: /**
         * @return {?}
         */
        function () {
            return ((this.isDirty && this.errors) ||
                (this.focused && this.errors && this.errors.maxlength && this.errors.maxlengthFields) ||
                (this.focused && this.errors && this.errors.maxlength && this.errors.maxlengthFields && this.maxlengthErrorField));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "showCount", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var charCount = (this.form.controls[this.control.key].maxlength &&
                this.focused &&
                (this.form.controls[this.control.key].controlType === 'text-area' ||
                    this.form.controls[this.control.key].controlType === 'textbox')) ||
                (this.form.controls[this.control.key].maxlength && this.form.controls[this.control.key].controlType === 'picker');
            return this._showCount || charCount;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._showCount = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "showMessages", {
        get: /**
         * @return {?}
         */
        function () {
            return (this.showCount ||
                !Helpers.isEmpty(this.form.controls[this.control.key].warning) ||
                !Helpers.isEmpty(this.form.controls[this.control.key].description));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "decimalSeparator", {
        get: /**
         * @return {?}
         */
        function () {
            return new Intl.NumberFormat(this.locale).format(1.2)[1];
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoControlElement.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var DO_NOT_FOCUS_ME = ['picker', 'time', 'date', 'date-time'];
        if (this.autoFocus && !DO_NOT_FOCUS_ME.includes(this.control.controlType)) {
            setTimeout(function () {
                /** @type {?} */
                var input = _this.element.nativeElement.querySelector('input');
                if (input) {
                    input.focus();
                }
            });
        }
    };
    /**
     * @return {?}
     */
    NovoControlElement.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var e_1, _a;
        // Subscribe to control interactions
        if (this.control.interactions && !this.form.controls[this.control.key].restrictFieldInteractions) {
            var _loop_1 = function (interaction) {
                switch (interaction.event) {
                    case 'blur':
                        this_1.valueChangeSubscription = this_1.onBlur.pipe(debounceTime(300)).subscribe(function () {
                            if (!_this.form.controls[_this.control.key].restrictFieldInteractions) {
                                _this.executeInteraction(interaction);
                            }
                        });
                        break;
                    case 'focus':
                        this_1.valueChangeSubscription = this_1.onFocus.pipe(debounceTime(300)).subscribe(function () {
                            if (!_this.form.controls[_this.control.key].restrictFieldInteractions) {
                                _this.executeInteraction(interaction);
                            }
                        });
                        break;
                    case 'change':
                        this_1.valueChangeSubscription = this_1.form.controls[this_1.control.key].valueChanges.pipe(debounceTime(300)).subscribe(function () {
                            if (!_this.form.controls[_this.control.key].restrictFieldInteractions) {
                                _this.executeInteraction(interaction);
                            }
                        });
                        break;
                    case 'init':
                        interaction.invokeOnInit = true;
                        break;
                    default:
                        break;
                }
                if (interaction.invokeOnInit) {
                    if (!this_1.form.controls[this_1.control.key].restrictFieldInteractions) {
                        this_1.executeInteraction(interaction);
                    }
                }
            };
            var this_1 = this;
            try {
                for (var _b = __values(this.control.interactions), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var interaction = _c.value;
                    _loop_1(interaction);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        setTimeout(function () {
            _this.templates = _this.templateService.getAll();
            _this.loading = false;
            _this.changeDetectorRef.markForCheck();
        });
    };
    /**
     * @return {?}
     */
    NovoControlElement.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.loading = true;
        // Make sure to initially format the time controls
        if (this.control && this.form.controls[this.control.key].value) {
            if (this.form.controls[this.control.key].controlType === 'textbox' ||
                this.form.controls[this.control.key].controlType === 'text-area') {
                this.itemCount = this.form.controls[this.control.key].value.length;
            }
        }
        if (this.control) {
            // Listen to clear events
            this.forceClearSubscription = this.control.forceClear.subscribe(function () {
                _this.clearValue();
            });
            // For Asynchronous validations
            this.statusChangeSubscription = this.form.controls[this.control.key].statusChanges.subscribe(function (validity) {
                _this.form.controls[_this.control.key] = _this.templateContext.$implicit;
                if (validity !== 'PENDING' && _this.form.updateValueAndValidity) {
                    _this.form.updateValueAndValidity();
                }
            });
        }
        this.templateContext = {
            $implicit: this.form.controls[this.control.key],
            methods: {
                restrictKeys: this.restrictKeys.bind(this),
                emitChange: this.emitChange.bind(this),
                handleFocus: this.handleFocus.bind(this),
                handlePercentChange: this.handlePercentChange.bind(this),
                handleBlur: this.handleBlur.bind(this),
                handleTextAreaInput: this.handleTextAreaInput.bind(this),
                handleEdit: this.handleEdit.bind(this),
                handleSave: this.handleSave.bind(this),
                handleDelete: this.handleDelete.bind(this),
                handleUpload: this.handleUpload.bind(this),
                modelChange: this.modelChange.bind(this),
                modelChangeWithRaw: this.modelChangeWithRaw.bind(this),
                handleAddressChange: this.handleAddressChange.bind(this),
                handleTyping: this.handleTyping.bind(this),
                updateValidity: this.updateValidity.bind(this),
                toggleActive: this.toggleActive.bind(this),
                validateIntegerInput: this.validateIntegerInput.bind(this),
                validateNumberOnBlur: this.validateNumberOnBlur.bind(this),
            },
            form: this.form,
        };
        this.templateContext.$implicit.tooltipPosition = this.tooltipPosition;
        this.templateContext.$implicit.tooltip = this.tooltip;
        this.templateContext.$implicit.tooltipSize = this.tooltipSize;
        this.templateContext.$implicit.tooltipPreline = this.tooltipPreline;
        this.templateContext.$implicit.removeTooltipArrow = this.removeTooltipArrow;
        this.templateContext.$implicit.startupFocus = this.form.controls[this.control.key].startupFocus;
        this.templateContext.$implicit.fileBrowserImageUploadUrl = this.form.controls[this.control.key].fileBrowserImageUploadUrl;
        this.templateContext.$implicit.minimal = this.form.controls[this.control.key].minimal;
        this.templateContext.$implicit.currencyFormat = this.form.controls[this.control.key].currencyFormat;
        this.templateContext.$implicit.percentValue = this.form.controls[this.control.key].percentValue;
        this.templateContext.$implicit.config = this.form.controls[this.control.key].config;
        if (this.form.controls[this.control.key] && this.form.controls[this.control.key].subType === 'percentage') {
            if (!Helpers.isEmpty(this.form.controls[this.control.key].value)) {
                this.templateContext.$implicit.percentValue = Number((this.form.controls[this.control.key].value * 100).toFixed(6).replace(/\.?0*$/, ''));
            }
            this.percentChangeSubscription = this.form.controls[this.control.key].displayValueChanges.subscribe(function (value) {
                if (!Helpers.isEmpty(value)) {
                    _this.templateContext.$implicit.percentValue = Number((value * 100).toFixed(6).replace(/\.?0*$/, ''));
                }
            });
        }
    };
    /**
     * @return {?}
     */
    NovoControlElement.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        // Unsubscribe from control interactions
        if (this.valueChangeSubscription) {
            this.valueChangeSubscription.unsubscribe();
        }
        // if (this.dateChangeSubscription) {
        //     this.dateChangeSubscription.unsubscribe();
        // }
        if (this.forceClearSubscription) {
            // Un-listen for clear events
            this.forceClearSubscription.unsubscribe();
        }
        if (this.percentChangeSubscription) {
            // Un-listen for clear events
            this.percentChangeSubscription.unsubscribe();
        }
        if (this.dateChangeSubscription) {
            this.dateChangeSubscription.unsubscribe();
        }
        if (this.statusChangeSubscription) {
            this.statusChangeSubscription.unsubscribe();
        }
        _super.prototype.ngOnDestroy.call(this);
    };
    Object.defineProperty(NovoControlElement.prototype, "errors", {
        get: /**
         * @return {?}
         */
        function () {
            return this.form.controls[this.control.key].errors;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "isValid", {
        get: /**
         * @return {?}
         */
        function () {
            return this.form.controls[this.control.key].valid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "isDirty", {
        get: /**
         * @return {?}
         */
        function () {
            return this.form.controls[this.control.key].dirty || this.control.dirty;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "hasValue", {
        get: /**
         * @return {?}
         */
        function () {
            return !Helpers.isEmpty(this.form.value[this.control.key]);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "focused", {
        get: /**
         * @return {?}
         */
        function () {
            return this._focused;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "tooltip", {
        get: /**
         * @return {?}
         */
        function () {
            return this.form.controls[this.control.key].tooltip;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "tooltipPosition", {
        get: /**
         * @return {?}
         */
        function () {
            if (Helpers.isBlank(this.form.controls[this.control.key].tooltipPosition)) {
                return 'right';
            }
            return this.form.controls[this.control.key].tooltipPosition;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "tooltipSize", {
        get: /**
         * @return {?}
         */
        function () {
            if (Helpers.isBlank(this.form.controls[this.control.key].tooltipSize)) {
                return '';
            }
            return this.form.controls[this.control.key].tooltipSize;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "tooltipPreline", {
        get: /**
         * @return {?}
         */
        function () {
            if (Helpers.isBlank(this.form.controls[this.control.key].tooltipPreline)) {
                return false;
            }
            return this.form.controls[this.control.key].tooltipPreline;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "removeTooltipArrow", {
        get: /**
         * @return {?}
         */
        function () {
            if (Helpers.isBlank(this.form.controls[this.control.key].removeTooltipArrow)) {
                return false;
            }
            return this.form.controls[this.control.key].removeTooltipArrow;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "alwaysActive", {
        get: /**
         * @return {?}
         */
        function () {
            // Controls that have the label active if there is any user entered text in the field
            if (this.form.controls[this.control.key].controlType === 'picker' && this._enteredText.length) {
                return true;
            }
            // Controls that always have the label active
            return ([
                'tiles',
                'checklist',
                'checkbox',
                'date',
                'time',
                'date-time',
                'address',
                'file',
                'editor',
                'ace-editor',
                'radio',
                'text-area',
                'quick-note',
            ].indexOf(this.form.controls[this.control.key].controlType) !== -1);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "requiresExtraSpacing", {
        get: /**
         * @return {?}
         */
        function () {
            // Chips
            if (this.form.controls[this.control.key].controlType === 'picker' && this.form.controls[this.control.key].multiple && this.hasValue) {
                return true;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} interaction
     * @return {?}
     */
    NovoControlElement.prototype.executeInteraction = /**
     * @param {?} interaction
     * @return {?}
     */
    function (interaction) {
        var _this = this;
        if (interaction.script && Helpers.isFunction(interaction.script)) {
            setTimeout(function () {
                _this.fieldInteractionApi.form = _this.form;
                _this.fieldInteractionApi.currentKey = _this.control.key;
                try {
                    interaction.script(_this.fieldInteractionApi, _this.control.key);
                }
                catch (err) {
                    console.info('Field Interaction Error!', _this.control.key); // tslint:disable-line
                    console.error(err); // tslint:disable-line
                }
            });
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoControlElement.prototype.handleTyping = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this._focused = event && event.length;
        this._enteredText = event;
    };
    /**
     * @param {?} event
     * @param {?=} field
     * @return {?}
     */
    NovoControlElement.prototype.handleFocus = /**
     * @param {?} event
     * @param {?=} field
     * @return {?}
     */
    function (event, field) {
        this._focused = true;
        this.focusedField = field;
        if (!Helpers.isBlank(this.characterCountField) && this.characterCountField === field) {
            this.showCount = true;
        }
        else if (this.form.controls[this.control.key].controlType === 'address' &&
            field &&
            !Helpers.isEmpty(this.form.value[this.control.key]) &&
            !Helpers.isBlank(this.form.value[this.control.key][field])) {
            this.handleAddressChange({ value: this.form.value[this.control.key][field], field: field });
        }
        this._focusEmitter.emit(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoControlElement.prototype.handleBlur = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this._focused = false;
        this.focusedField = '';
        this.showCount = false;
        this._blurEmitter.emit(event);
    };
    /**
     * @return {?}
     */
    NovoControlElement.prototype.clearValue = /**
     * @return {?}
     */
    function () {
        this.form.controls[this.control.key].setValue(null);
        this.formattedValue = null;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoControlElement.prototype.handleTextAreaInput = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.emitChange(event);
        this.restrictKeys(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoControlElement.prototype.checkMaxLength = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.control && this.form.controls[this.control.key].maxlength) {
            this.itemCount = event.target.value.length;
            this.maxLengthMet = event.target.value.length >= this.form.controls[this.control.key].maxlength;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoControlElement.prototype.modelChangeWithRaw = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (Helpers.isEmpty(event.value)) {
            this._focused = false;
            this._enteredText = '';
        }
        if (this.form.controls[this.control.key].controlType === 'picker' && this.form.controls[this.control.key].maxlength) {
            this.itemCount = event.value ? event.value.length : 0;
            this.maxLengthMet = this.itemCount >= this.form.controls[this.control.key].maxlength ? true : false;
        }
        this.form.controls[this.control.key].rawValue = event.rawValue;
        this.change.emit(event.value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoControlElement.prototype.modelChange = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (Helpers.isEmpty(value)) {
            this._focused = false;
            this._enteredText = '';
        }
        this.change.emit(value);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoControlElement.prototype.validateNumberOnBlur = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this._focused = false;
        this.focusedField = '';
        this.showCount = false;
        if (this.form.controls[this.control.key].subType === 'number') {
            this.validateIntegerInput();
        }
        this._blurEmitter.emit(event);
    };
    /**
     * @return {?}
     */
    NovoControlElement.prototype.validateIntegerInput = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var NUMBERS_ONLY = /^[\d\-]\d*$/;
        if (this.form.controls[this.control.key].value && !NUMBERS_ONLY.test(this.form.controls[this.control.key].value)) {
            this.form.controls[this.control.key].markAsInvalid(this.labels.invalidIntegerInput + " " + this.form.controls[this.control.key].label.toUpperCase());
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoControlElement.prototype.restrictKeys = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var NUMBERS_ONLY = /[0-9\-]/;
        /** @type {?} */
        var NUMBERS_WITH_DECIMAL_DOT = /[0-9\.\-]/;
        /** @type {?} */
        var NUMBERS_WITH_DECIMAL_DOT_AND_COMMA = /[0-9\.\,\-]/;
        /** @type {?} */
        var UTILITY_KEYS = ['Backspace', 'Delete', 'ArrowLeft', 'ArrowRight', 'Tab'];
        /** @type {?} */
        var key = event.key;
        // Numbers or numbers and decimal characters only
        if (this.form.controls[this.control.key].subType === 'number' && !(NUMBERS_ONLY.test(key) || UTILITY_KEYS.includes(key))) {
            event.preventDefault();
        }
        else if (['currency', 'float', 'percentage'].includes(this.form.controls[this.control.key].subType) &&
            !((this.decimalSeparator === '.' && NUMBERS_WITH_DECIMAL_DOT.test(key)) ||
                (this.decimalSeparator === ',' && NUMBERS_WITH_DECIMAL_DOT_AND_COMMA.test(key)) ||
                UTILITY_KEYS.includes(key))) {
            event.preventDefault();
        }
        // Max Length
        if (this.form.controls[this.control.key].maxlength && event.target.value.length >= this.form.controls[this.control.key].maxlength) {
            event.preventDefault();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoControlElement.prototype.handlePercentChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var value = event.target['value'];
        /** @type {?} */
        var percent = Helpers.isEmpty(value) ? null : Number((value / 100).toFixed(6).replace(/\.?0*$/, ''));
        if (!Helpers.isEmpty(percent)) {
            this.change.emit(percent);
            this.form.controls[this.control.key].setValue(percent);
        }
        else {
            this.change.emit(null);
            this.form.controls[this.control.key].setValue(null);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoControlElement.prototype.handleTabForPickers = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.active && event && event.keyCode) {
            if (event.keyCode === KeyCodes.ESC || event.keyCode === KeyCodes.TAB) {
                this.toggleActive(event, false);
            }
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoControlElement.prototype.emitChange = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.change.emit(value);
        this.checkMaxLength(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoControlElement.prototype.handleEdit = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.edit.emit(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoControlElement.prototype.handleSave = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.save.emit(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoControlElement.prototype.handleDelete = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.delete.emit(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoControlElement.prototype.handleUpload = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.upload.emit(value);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    NovoControlElement.prototype.handleAddressChange = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data &&
            !Helpers.isBlank(data.value) &&
            data.field &&
            this.control.config[data.field] &&
            !Helpers.isEmpty(this.control.config[data.field].maxlength)) {
            this.itemCount = data.value.length;
            this.characterCountField = data.field;
            this.maxLength = this.control.config[data.field].maxlength;
            this.showCount = true;
            if (this.maxLength === this.itemCount) {
                this.maxLengthMetErrorfields.push(data.field);
            }
            else {
                this.maxLengthMetErrorfields = this.maxLengthMetErrorfields.filter(function (field) { return field !== data.field; });
            }
        }
    };
    /**
     * @param {?} shouldEventBeEmitted
     * @return {?}
     */
    NovoControlElement.prototype.updateValidity = /**
     * @param {?} shouldEventBeEmitted
     * @return {?}
     */
    function (shouldEventBeEmitted) {
        /** @type {?} */
        var emitEvent = shouldEventBeEmitted ? true : false;
        this.form.controls[this.control.key].updateValueAndValidity({ emitEvent: emitEvent });
    };
    NovoControlElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-control',
                    template: "\n        <div class=\"novo-control-container\" [hidden]=\"form.controls[control.key].hidden || form.controls[control.key].type === 'hidden' || form.controls[control.key].controlType === 'hidden'\">\n            <!--Encrypted Field-->\n            <span [tooltip]=\"labels.encryptedFieldTooltip\" [tooltipPosition]=\"'right'\"><i [hidden]=\"!form.controls[control.key].encrypted\"\n            class=\"bhi-lock\"></i></span>\n            <!--Label (for horizontal)-->\n            <label [attr.for]=\"control.key\" *ngIf=\"form.layout !== 'vertical' && form.controls[control.key].label && !condensed\" [ngClass]=\"{'encrypted': form.controls[control.key].encrypted }\">\n                {{ form.controls[control.key].label }}\n            </label>\n            <div class=\"novo-control-outer-container\">\n                <!--Label (for vertical)-->\n                <label\n                    *ngIf=\"form.layout === 'vertical' && form.controls[control.key].label && !condensed\"\n                    class=\"novo-control-label\"\n                    [attr.for]=\"control.key\"\n                    [class.novo-control-empty]=\"!hasValue\"\n                    [class.novo-control-focused]=\"focused\"\n                    [class.novo-control-filled]=\"hasValue\"\n                    [class.novo-control-always-active]=\"alwaysActive || form.controls[control.key].placeholder\"\n                    [class.novo-control-extra-spacing]=\"requiresExtraSpacing\">\n                    {{ form.controls[control.key].label }}\n                </label>\n                <div class=\"novo-control-inner-container\" [class.required]=\"form.controls[control.key].required && !form.controls[control.key].readOnly\">\n                    <div class=\"novo-control-inner-input-container\" [class.novo-control-filled]=\"hasValue\" [class.novo-control-empty]=\"!hasValue\">\n                      <!--Required Indicator-->\n                        <i [hidden]=\"!form.controls[control.key].required || form.controls[control.key].readOnly\"\n                            class=\"required-indicator {{ form.controls[control.key].controlType }}\"\n                            [ngClass]=\"{'bhi-circle': !isValid, 'bhi-check': isValid}\" *ngIf=\"!condensed || form.controls[control.key].required\">\n                        </i>\n                        <!--Form Controls-->\n                        <div class=\"novo-control-input {{ form.controls[control.key].controlType }}\" [attr.data-automation-id]=\"control.key\" [class.control-disabled]=\"form.controls[control.key].disabled\">\n                            <!--TODO prefix/suffix on the control-->\n                            <ng-container *ngIf=\"templates\">\n                              <ng-container *ngTemplateOutlet=\"templates[form.controls[control.key].controlType]; context: templateContext\"></ng-container>\n                            </ng-container>\n                            <ng-container *ngIf=\"!templates || loading\">\n                                <div class=\"novo-control-input-container novo-control-input-with-label\">\n                                  <input type=\"text\"/>\n                                </div>\n                            </ng-container>\n                        </div>\n                    </div>\n                    <!--Error Message-->\n                    <div class=\"field-message {{ form.controls[control.key].controlType }}\" *ngIf=\"!condensed\" [class.has-tip]=\"form.controls[control.key].tipWell\" [ngClass]=\"showErrorState || showMaxLengthMetMessage ? 'error-shown' : 'error-hidden'\">\n                        <div class=\"messages\" [ngClass]=\"showMessages ? 'count-shown messages-shown' : 'count-hidden messages-hidden'\">\n                            <span class=\"error-text\" *ngIf=\"showFieldMessage\"></span>\n                            <span class=\"error-text\" *ngIf=\"isDirty && errors?.required && form.controls[control.key].controlType !== 'address'\">{{ form.controls[control.key].label | uppercase }} {{ labels.isRequired }}</span>\n                            <span class=\"error-text\" *ngIf=\"isDirty && errors?.minlength\">{{ form.controls[control.key].label | uppercase }} {{ labels.minLength }} {{ form.controls[control.key].minlength }}</span>\n                            <span class=\"error-text\" *ngIf=\"isDirty && maxLengthMet && focused && !errors?.maxlength && form.controls[control.key].controlType !== 'picker'\">{{ labels.maxlengthMet(form.controls[control.key].maxlength) }}</span>\n                            <span class=\"error-text\" *ngIf=\"errors?.maxlength && focused && !errors?.maxlengthFields\">{{ labels.invalidMaxlength(form.controls[control.key].maxlength) }}</span>\n                            <span class=\"error-text\" *ngIf=\"maxLengthMet && form.controls[control.key].controlType === 'picker'\">{{ labels.maxRecordsReached }}</span>\n                            <span class=\"error-text\" *ngIf=\"isDirty && errors?.invalidEmail\">{{ form.controls[control.key].label | uppercase }} {{ labels.invalidEmail }}</span>\n                            <span class=\"error-text\" *ngIf=\"isDirty && (errors?.integerTooLarge || errors?.doubleTooLarge)\">{{ form.controls[control.key].label | uppercase }} {{ labels.isTooLarge }}</span>\n                            <span *ngIf=\"isDirty && errors?.minYear\">{{ form.controls[control.key].label | uppercase }} {{ labels.notValidYear }}</span>\n                            <span class=\"error-text\" *ngIf=\"isDirty && (errors?.custom)\">{{ errors.custom }}</span>\n                            <span class=\"error-text\" *ngIf=\"errors?.maxlength && errors?.maxlengthFields && maxlengthErrorField && focused\">\n                                {{ labels.invalidMaxlengthWithField(control.config[maxlengthErrorField]?.label, control.config[maxlengthErrorField]?.maxlength) }}\n                            </span>\n                            <span class=\"error-text\" *ngIf=\"isDirty && maxlengthMetField && focused && !errors?.maxlengthFields?.includes(maxlengthMetField)\">\n                              {{ labels.maxlengthMetWithField(control.config[maxlengthMetField]?.label, control.config[maxlengthMetField]?.maxlength) }}\n                            </span>\n                            <span *ngIf=\"isDirty && errors?.invalidAddress\">\n                                <span class=\"error-text\" *ngFor=\"let invalidAddressField of errors?.invalidAddressFields\">{{ invalidAddressField | uppercase }} {{ labels.isRequired }} </span>\n                            </span>\n                            <!--Field Hint-->\n                            <span class=\"description\" *ngIf=\"form.controls[control.key].description\">\n                                {{ form.controls[control.key].description }}\n                            </span>\n                            <span class=\"warning-text\" *ngIf=\"form.controls[control.key].warning\">{{ form.controls[control.key].warning }}</span>\n\n                        </div>\n                        <span class=\"character-count\" [class.error]=\"((errors?.maxlength && !errors?.maxlengthFields) || (errors?.maxlength && errors?.maxlengthFields && errors.maxlengthFields.includes(focusedField)))\" *ngIf=\"showCount && form.controls[control.key].controlType !== 'picker'\">{{ itemCount }}/{{ maxLength || form.controls[control.key].maxlength }}</span>\n                        <span class=\"record-count\" [class.zero-count]=\"itemCount === 0\" [class.row-picker]=\"form.controls[this.control.key].config.columns\" *ngIf=\"showCount && form.controls[control.key].controlType === 'picker'\">{{ itemCount }}/{{ maxLength || form.controls[control.key].maxlength }}</span>\n                    </div>\n                    <!--Tip Wel-->\n                    <novo-tip-well *ngIf=\"form.controls[control.key].tipWell\" [name]=\"control.key\" [tip]=\"form.controls[control.key]?.tipWell?.tip\" [icon]=\"form.controls[control.key]?.tipWell?.icon\" [button]=\"form.controls[control.key]?.tipWell?.button\"></novo-tip-well>\n                </div>\n                <i *ngIf=\"form.controls[control.key].fieldInteractionloading\" class=\"loading\">\n                    <svg version=\"1.1\"\n                     xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:a=\"http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/\"\n                     x=\"0px\" y=\"0px\" width=\"18.2px\" height=\"18.5px\" viewBox=\"0 0 18.2 18.5\" style=\"enable-background:new 0 0 18.2 18.5;\"\n                     xml:space=\"preserve\">\n                    <style type=\"text/css\">\n                        .spinner { fill:#FFFFFF; }\n                    </style>\n                        <path class=\"spinner\" d=\"M9.2,18.5C4.1,18.5,0,14.4,0,9.2S4.1,0,9.2,0c0.9,0,1.9,0.1,2.7,0.4c0.8,0.2,1.2,1.1,1,1.9\n                            c-0.2,0.8-1.1,1.2-1.9,1C10.5,3.1,9.9,3,9.2,3C5.8,3,3,5.8,3,9.2s2.8,6.2,6.2,6.2c2.8,0,5.3-1.9,6-4.7c0.2-0.8,1-1.3,1.8-1.1\n                            c0.8,0.2,1.3,1,1.1,1.8C17.1,15.7,13.4,18.5,9.2,18.5z\"/>\n                    </svg>\n                </i>\n            </div>\n        </div>\n    ",
                    host: {
                        '[class]': 'form.controls[control.key].controlType',
                        '[attr.data-control-type]': 'form.controls[control.key].controlType',
                        '[class.disabled]': 'form.controls[control.key].readOnly',
                        '[class.hidden]': 'form.controls[control.key].hidden',
                        '[attr.data-control-key]': 'control.key',
                    }
                }] }
    ];
    /** @nocollapse */
    NovoControlElement.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NovoLabelService },
        { type: DateFormatService },
        { type: FieldInteractionApi },
        { type: NovoTemplateService },
        { type: ChangeDetectorRef },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
    ]; };
    NovoControlElement.propDecorators = {
        control: [{ type: Input }],
        form: [{ type: Input }],
        condensed: [{ type: Input }],
        autoFocus: [{ type: Input }],
        change: [{ type: Output }],
        edit: [{ type: Output }],
        save: [{ type: Output }],
        delete: [{ type: Output }],
        upload: [{ type: Output }],
        onBlur: [{ type: Output, args: ['blur',] }],
        onFocus: [{ type: Output, args: ['focus',] }]
    };
    return NovoControlElement;
}(OutsideClick));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/* tslint:disable:quotemark */
/**
 * AUTOGENERATED FILE - DO NOT EDIT
 * Generated by: https://bhsource.bullhorn.com/DEV_WORKSPACE/country-state-parser
 * Last generated on: Tue Feb 26 2019 15:45:12 GMT-0600 (Central Standard Time)
 */
/** @type {?} */
var COUNTRIES = [
    {
        code: 'US',
        id: 1,
        name: 'United States',
        states: [
            {
                code: 'AL',
                name: 'Alabama',
            },
            {
                code: 'AK',
                name: 'Alaska',
            },
            {
                code: 'AZ',
                name: 'Arizona',
            },
            {
                code: 'AR',
                name: 'Arkansas',
            },
            {
                code: 'CA',
                name: 'California',
            },
            {
                code: 'CO',
                name: 'Colorado',
            },
            {
                code: 'CT',
                name: 'Connecticut',
            },
            {
                code: 'DE',
                name: 'Delaware',
            },
            {
                code: 'DC',
                name: 'District Of Columbia',
            },
            {
                code: 'FL',
                name: 'Florida',
            },
            {
                code: 'GA',
                name: 'Georgia',
            },
            {
                code: 'GU',
                name: 'Guam',
            },
            {
                code: 'HI',
                name: 'Hawaii',
            },
            {
                code: 'ID',
                name: 'Idaho',
            },
            {
                code: 'IL',
                name: 'Illinois',
            },
            {
                code: 'IN',
                name: 'Indiana',
            },
            {
                code: 'IA',
                name: 'Iowa',
            },
            {
                code: 'KS',
                name: 'Kansas',
            },
            {
                code: 'KY',
                name: 'Kentucky',
            },
            {
                code: 'LA',
                name: 'Louisiana',
            },
            {
                code: 'ME',
                name: 'Maine',
            },
            {
                code: 'MH',
                name: 'Marshall Islands',
            },
            {
                code: 'MD',
                name: 'Maryland',
            },
            {
                code: 'MA',
                name: 'Massachusetts',
            },
            {
                code: 'MI',
                name: 'Michigan',
            },
            {
                code: 'MN',
                name: 'Minnesota',
            },
            {
                code: 'MS',
                name: 'Mississippi',
            },
            {
                code: 'MO',
                name: 'Missouri',
            },
            {
                code: 'MT',
                name: 'Montana',
            },
            {
                code: 'NE',
                name: 'Nebraska',
            },
            {
                code: 'NV',
                name: 'Nevada',
            },
            {
                code: 'NH',
                name: 'New Hampshire',
            },
            {
                code: 'NJ',
                name: 'New Jersey',
            },
            {
                code: 'NM',
                name: 'New Mexico',
            },
            {
                code: 'NY',
                name: 'New York',
            },
            {
                code: 'NC',
                name: 'North Carolina',
            },
            {
                code: 'ND',
                name: 'North Dakota',
            },
            {
                code: 'MP',
                name: 'Northern Mariana Islands',
            },
            {
                code: 'OH',
                name: 'Ohio',
            },
            {
                code: 'OK',
                name: 'Oklahoma',
            },
            {
                code: 'OR',
                name: 'Oregon',
            },
            {
                code: 'PW',
                name: 'Palau',
            },
            {
                code: 'PA',
                name: 'Pennsylvania',
            },
            {
                code: 'PR',
                name: 'Puerto Rico',
            },
            {
                code: 'RI',
                name: 'Rhode Island',
            },
            {
                code: 'SC',
                name: 'South Carolina',
            },
            {
                code: 'SD',
                name: 'South Dakota',
            },
            {
                code: 'TN',
                name: 'Tennessee',
            },
            {
                code: 'TX',
                name: 'Texas',
            },
            {
                code: 'UT',
                name: 'Utah',
            },
            {
                code: 'VT',
                name: 'Vermont',
            },
            {
                code: 'VI',
                name: 'Virgin Islands',
            },
            {
                code: 'VA',
                name: 'Virginia',
            },
            {
                code: 'WA',
                name: 'Washington',
            },
            {
                code: 'WV',
                name: 'West Virginia',
            },
            {
                code: 'WI',
                name: 'Wisconsin',
            },
            {
                code: 'WY',
                name: 'Wyoming',
            },
        ],
    },
    {
        code: 'UK',
        id: 2359,
        name: 'United Kingdom',
        states: [
            {
                code: 'ABD',
                name: 'Aberdeenshire',
            },
            {
                code: 'ALD',
                name: 'Alderney',
            },
            {
                code: 'ANS',
                name: 'Angus',
            },
            {
                code: 'ANN',
                name: 'Antrim and Newtownabbey',
            },
            {
                code: 'AGB',
                name: 'Argyllshire',
            },
            {
                code: 'ABC',
                name: 'Armagh',
            },
            {
                code: 'EAY',
                name: 'Ayrshire',
            },
            {
                code: 'BLA',
                name: 'Ballymena',
            },
            {
                code: 'BAY',
                name: 'Ballymoney',
            },
            {
                code: 'BNB',
                name: 'Banbridge',
            },
            {
                code: 'BAN',
                name: 'Banffshire',
            },
            {
                code: 'BDF',
                name: 'Bedfordshire',
            },
            {
                code: 'BFS',
                name: 'Belfast',
            },
            {
                code: 'BRK',
                name: 'Berkshire',
            },
            {
                code: 'BGW',
                name: 'Blaenau Gwent',
            },
            {
                code: 'SCB',
                name: 'Borders',
            },
            {
                code: 'BGE',
                name: 'Bridgend',
            },
            {
                code: 'BST',
                name: 'Bristol',
            },
            {
                code: 'BKM',
                name: 'Buckinghamshire',
            },
            {
                code: 'CAY',
                name: 'Caerphilly',
            },
            {
                code: 'CAI',
                name: 'Caithness',
            },
            {
                code: 'CAM',
                name: 'Cambridgeshire',
            },
            {
                code: 'CRF',
                name: 'Cardiff',
            },
            {
                code: 'CMN',
                name: 'Carmarthenshire',
            },
            {
                code: 'CKF',
                name: 'Carrickfergus',
            },
            {
                code: 'CAS',
                name: 'Castlereagh',
            },
            {
                code: 'CGN',
                name: 'Ceredigion',
            },
            {
                code: 'CHE',
                name: 'Cheshire',
            },
            {
                code: 'CLK',
                name: 'Clackmannanshire',
            },
            {
                code: 'CLR',
                name: 'Coleraine',
            },
            {
                code: 'CWY',
                name: 'Conwy',
            },
            {
                code: 'CKT',
                name: 'Cookstown',
            },
            {
                code: 'CON',
                name: 'Cornwall',
            },
            {
                code: 'DUR',
                name: 'County Durham',
            },
            {
                code: 'DRS',
                name: 'County Londonderry',
            },
            {
                code: 'CRA',
                name: 'Craigavon',
            },
            {
                code: 'CMA',
                name: 'Cumbria',
            },
            {
                code: 'DEN',
                name: 'Denbighshire',
            },
            {
                code: 'DBY',
                name: 'Derbyshire',
            },
            {
                code: 'DEV',
                name: 'Devon',
            },
            {
                code: 'DOR',
                name: 'Dorset',
            },
            {
                code: 'EDU',
                name: 'Dumbartonshire',
            },
            {
                code: 'DGY',
                name: 'Dumfries and Galloway',
            },
            {
                code: 'DGN',
                name: 'Dungannon and South Tyrone',
            },
            {
                code: 'ELN',
                name: 'East Lothian',
            },
            {
                code: 'ESX',
                name: 'East Sussex',
            },
            {
                code: 'ERY',
                name: 'East Yorkshire',
            },
            {
                code: 'ESS',
                name: 'Essex',
            },
            {
                code: 'FMO',
                name: 'Fermanagh and Omagh',
            },
            {
                code: 'FIF',
                name: 'Fife',
            },
            {
                code: 'FLN',
                name: 'Flintshire',
            },
            {
                code: 'GLG',
                name: 'Glasgow',
            },
            {
                code: 'GLS',
                name: 'Gloucestershire',
            },
            {
                code: 'LND',
                name: 'Greater London',
            },
            {
                code: 'MAN',
                name: 'Greater Manchester',
            },
            {
                code: 'GSY',
                name: 'Guernsey',
            },
            {
                code: 'GWN',
                name: 'Gwynedd',
            },
            {
                code: 'HAM',
                name: 'Hampshire',
            },
            {
                code: 'HEF',
                name: 'Herefordshire',
            },
            {
                code: 'HRM',
                name: 'Herm',
            },
            {
                code: 'HRT',
                name: 'Hertfordshire',
            },
            {
                code: 'HLD',
                name: 'Highland',
            },
            {
                code: 'INV',
                name: 'Inverness-shire',
            },
            {
                code: 'AGY',
                name: 'Isle of Anglesey',
            },
            {
                code: 'IOM',
                name: 'Isle of Man',
            },
            {
                code: 'IOW',
                name: 'Isle of Wight',
            },
            {
                code: 'JSY',
                name: 'Jersey',
            },
            {
                code: 'KEN',
                name: 'Kent',
            },
            {
                code: 'KCD',
                name: 'Kincardineshire',
            },
            {
                code: 'KKD',
                name: 'Kirkcudbrightshire',
            },
            {
                code: 'LAN',
                name: 'Lancashire',
            },
            {
                code: 'LRN',
                name: 'Larne',
            },
            {
                code: 'LEC',
                name: 'Leicestershire',
            },
            {
                code: 'LMV',
                name: 'Limavady',
            },
            {
                code: 'LIN',
                name: 'Lincolnshire',
            },
            {
                code: 'LBC',
                name: 'Lisburn and Castlereagh',
            },
            {
                code: 'MFT',
                name: 'Magherafelt',
            },
            {
                code: 'MER',
                name: 'Merseyside',
            },
            {
                code: 'MTY',
                name: 'Merthyr Tydfil',
            },
            {
                code: 'MLN',
                name: 'Midlothian',
            },
            {
                code: 'MON',
                name: 'Monmouthshire',
            },
            {
                code: 'MRY',
                name: 'Morayshire',
            },
            {
                code: 'MYL',
                name: 'Moyle',
            },
            {
                code: 'NAI',
                name: 'Nairn',
            },
            {
                code: 'NTL',
                name: 'Neath Port Talbot',
            },
            {
                code: 'NWP',
                name: 'Newport',
            },
            {
                code: 'NMD',
                name: 'Newry, Mourne and Down',
            },
            {
                code: 'NFK',
                name: 'Norfolk',
            },
            {
                code: 'AND',
                name: 'North Down and Ards',
            },
            {
                code: 'NLK',
                name: 'North Lanarkshire',
            },
            {
                code: 'NYK',
                name: 'North Yorkshire',
            },
            {
                code: 'NTH',
                name: 'Northamptonshire',
            },
            {
                code: 'NBL',
                name: 'Northumberland',
            },
            {
                code: 'NTT',
                name: 'Nottinghamshire',
            },
            {
                code: 'OMA',
                name: 'Omagh',
            },
            {
                code: 'ORK',
                name: 'Orkney Islands',
            },
            {
                code: 'OXF',
                name: 'Oxfordshire',
            },
            {
                code: 'PEM',
                name: 'Pembrokeshire',
            },
            {
                code: 'PKN',
                name: 'Perth and Kinross',
            },
            {
                code: 'PER',
                name: 'Perthshire and Kinross',
            },
            {
                code: 'POW',
                name: 'Powys',
            },
            {
                code: 'RCC',
                name: 'Redcar and Cleveland',
            },
            {
                code: 'RFW',
                name: 'Renfrewshire',
            },
            {
                code: 'RCT',
                name: 'Rhondda Cynon Taff',
            },
            {
                code: 'RUT',
                name: 'Rutland',
            },
            {
                code: 'SRK',
                name: 'Sark',
            },
            {
                code: 'ZET',
                name: 'Shetland Islands',
            },
            {
                code: 'SHR',
                name: 'Shropshire',
            },
            {
                code: 'SOM',
                name: 'Somerset',
            },
            {
                code: 'SLK',
                name: 'South Lanarkshire',
            },
            {
                code: 'SYK',
                name: 'South Yorkshire',
            },
            {
                code: 'STS',
                name: 'Staffordshire',
            },
            {
                code: 'STG',
                name: 'Stirlingshire',
            },
            {
                code: 'STR',
                name: 'Strabane',
            },
            {
                code: 'SFK',
                name: 'Suffolk',
            },
            {
                code: 'SRY',
                name: 'Surrey',
            },
            {
                code: 'SSX',
                name: 'Sussex',
            },
            {
                code: 'SUT',
                name: 'Sutherland',
            },
            {
                code: 'SWA',
                name: 'Swansea',
            },
            {
                code: 'TOF',
                name: 'Torfaen',
            },
            {
                code: 'TWR',
                name: 'Tyne and Wear',
            },
            {
                code: 'VGL',
                name: 'Vale of Glamorgan',
            },
            {
                code: 'WAR',
                name: 'Warwickshire',
            },
            {
                code: 'WLN',
                name: 'West Lothian',
            },
            {
                code: 'WMD',
                name: 'West Midlands',
            },
            {
                code: 'WSX',
                name: 'West Sussex',
            },
            {
                code: 'WRY',
                name: 'West Yorkshire',
            },
            {
                code: 'ELS',
                name: 'Western Isles',
            },
            {
                code: 'WIL',
                name: 'Wiltshire',
            },
            {
                code: 'WOR',
                name: 'Worcestershire',
            },
            {
                code: 'WRX',
                name: 'Wrexham',
            },
        ],
    },
    {
        code: 'AF',
        id: 2185,
        name: 'Afghanistan',
        states: [
            {
                code: 'AF01',
                name: 'Badakhshan',
            },
            {
                code: 'AF02',
                name: 'Badghis',
            },
            {
                code: 'AF03',
                name: 'Baghlan',
            },
            {
                code: 'AF30',
                name: 'Balkh',
            },
            {
                code: 'AF05',
                name: 'Bamian',
            },
            {
                code: 'AF41',
                name: 'Daikondi',
            },
            {
                code: 'AF06',
                name: 'Farah',
            },
            {
                code: 'AF07',
                name: 'Faryab',
            },
            {
                code: 'AF08',
                name: 'Ghazni',
            },
            {
                code: 'AF09',
                name: 'Ghowr',
            },
            {
                code: 'AF10',
                name: 'Helmand',
            },
            {
                code: 'AF11',
                name: 'Herat',
            },
            {
                code: 'AF31',
                name: 'Jowzjan',
            },
            {
                code: 'AF13',
                name: 'Kabul',
            },
            {
                code: 'AF23',
                name: 'Kandahar',
            },
            {
                code: 'AF14',
                name: 'Kapisa',
            },
            {
                code: 'AF37',
                name: 'Khowst',
            },
            {
                code: 'AF34',
                name: 'Konar',
            },
            {
                code: 'AF24',
                name: 'Kondoz',
            },
            {
                code: 'AF35',
                name: 'Laghman',
            },
            {
                code: 'AF17',
                name: 'Lowgar',
            },
            {
                code: 'AF18',
                name: 'Nangarhar',
            },
            {
                code: 'AF19',
                name: 'Nimruz',
            },
            {
                code: 'AF38',
                name: 'Nurestan',
            },
            {
                code: 'AF39',
                name: 'Oruzgan',
            },
            {
                code: 'AF36',
                name: 'Paktia',
            },
            {
                code: 'AF29',
                name: 'Paktika',
            },
            {
                code: 'AF42',
                name: 'Panjshir',
            },
            {
                code: 'AF40',
                name: 'Parvan',
            },
            {
                code: 'AF32',
                name: 'Samangan',
            },
            {
                code: 'AF33',
                name: 'Sar-e Pol',
            },
            {
                code: 'AF26',
                name: 'Takhar',
            },
            {
                code: 'AF27',
                name: 'Vardak',
            },
            {
                code: 'AF28',
                name: 'Zabol',
            },
        ],
    },
    {
        code: 'AX',
        id: 2407,
        name: 'Åland Islands',
        states: [],
    },
    {
        code: 'AL',
        id: 2186,
        name: 'Albania',
        states: [],
    },
    {
        code: 'DZ',
        id: 2187,
        name: 'Algeria',
        states: [
            {
                code: 'DZ.AR',
                name: 'Adrar',
            },
            {
                code: 'DZ.AD',
                name: 'Aïn Defla',
            },
            {
                code: 'DZ.AT',
                name: 'Aïn Témouchent',
            },
            {
                code: 'DZ.AL',
                name: 'Algiers',
            },
            {
                code: 'DZ.AN',
                name: 'Annaba',
            },
            {
                code: 'DZ.BT',
                name: 'Batna',
            },
            {
                code: 'DZ.BC',
                name: 'Béchar',
            },
            {
                code: 'DZ.BJ',
                name: 'Béjaïa',
            },
            {
                code: 'DZ.BS',
                name: 'Biskra',
            },
            {
                code: 'DZ.BL',
                name: 'Blida',
            },
            {
                code: 'DZ.BB',
                name: 'Bordj Bou Arréridj',
            },
            {
                code: 'DZ.BU',
                name: 'Bouira',
            },
            {
                code: 'DZ.BM',
                name: 'Boumerdès',
            },
            {
                code: 'DZ.CH',
                name: 'Chlef',
            },
            {
                code: 'DZ.CO',
                name: 'Constantine',
            },
            {
                code: 'DZ.DJ',
                name: 'Djelfa',
            },
            {
                code: 'DZ.EB',
                name: 'El Bayadh',
            },
            {
                code: 'DZ.EO',
                name: 'El Oued',
            },
            {
                code: 'DZ.ET',
                name: 'El Tarf',
            },
            {
                code: 'DZ.GR',
                name: 'Ghardaïa',
            },
            {
                code: 'DZ.GL',
                name: 'Guelma',
            },
            {
                code: 'DZ.IL',
                name: 'Illizi',
            },
            {
                code: 'DZ.JJ',
                name: 'Jijel',
            },
            {
                code: 'DZ.KH',
                name: 'Khenchela',
            },
            {
                code: 'DZ.LG',
                name: 'Laghouat',
            },
            {
                code: 'DZ.MC',
                name: 'Mascara',
            },
            {
                code: 'DZ.MD',
                name: 'Médéa',
            },
            {
                code: 'DZ.ML',
                name: 'Mila',
            },
            {
                code: 'DZ.MG',
                name: 'Mostaganem',
            },
            {
                code: 'DZ.MS',
                name: 'Msila',
            },
            {
                code: 'DZ.NA',
                name: 'Naama',
            },
            {
                code: 'DZ.OR',
                name: 'Oran',
            },
            {
                code: 'DZ.OG',
                name: 'Ouargla',
            },
            {
                code: 'DZ.OB',
                name: 'Oum el Bouaghi',
            },
            {
                code: 'DZ.RE',
                name: 'Relizane',
            },
            {
                code: 'DZ.SD',
                name: 'Saïda',
            },
            {
                code: 'DZ.SF',
                name: 'Sétif',
            },
            {
                code: 'DZ.SB',
                name: 'Sidi Bel Abbès',
            },
            {
                code: 'DZ.SK',
                name: 'Skikda',
            },
            {
                code: 'DZ.SA',
                name: 'Souk Ahras',
            },
            {
                code: 'DZ.TM',
                name: 'Tamanrasset',
            },
            {
                code: 'DZ.TB',
                name: 'Tébessa',
            },
            {
                code: 'DZ.TR',
                name: 'Tiaret',
            },
            {
                code: 'DZ.TN',
                name: 'Tindouf',
            },
            {
                code: 'DZ.TP',
                name: 'Tipaza',
            },
            {
                code: 'DZ.TS',
                name: 'Tissemsilt',
            },
            {
                code: 'DZ.TO',
                name: 'Tizi Ouzou',
            },
            {
                code: 'DZ.TL',
                name: 'Tlemcen',
            },
        ],
    },
    {
        code: 'AS',
        id: 2408,
        name: 'American Samoa',
        states: [],
    },
    {
        code: 'AD',
        id: 2188,
        name: 'Andorra',
        states: [],
    },
    {
        code: 'AO',
        id: 2189,
        name: 'Angola',
        states: [
            {
                code: 'AO19',
                name: 'Bengo',
            },
            {
                code: 'AO01',
                name: 'Benguela',
            },
            {
                code: 'AO02',
                name: 'Bié',
            },
            {
                code: 'AO03',
                name: 'Cabinda',
            },
            {
                code: 'AO04',
                name: 'Cuando Cubango',
            },
            {
                code: 'AO05',
                name: 'Cuanza Norte',
            },
            {
                code: 'AO06',
                name: 'Cuanza Sul',
            },
            {
                code: 'AO07',
                name: 'Cunene',
            },
            {
                code: 'AO08',
                name: 'Huambo',
            },
            {
                code: 'AO09',
                name: 'Huíla',
            },
            {
                code: 'AO20',
                name: 'Luanda',
            },
            {
                code: 'AO17',
                name: 'Lunda Norte',
            },
            {
                code: 'AO18',
                name: 'Lunda Sul',
            },
            {
                code: 'AO12',
                name: 'Malanje',
            },
            {
                code: 'AO14',
                name: 'Moxico',
            },
            {
                code: 'AO13',
                name: 'Namibe',
            },
            {
                code: 'AO15',
                name: 'Uíge',
            },
            {
                code: 'AO16',
                name: 'Zaire',
            },
        ],
    },
    {
        code: 'AI',
        id: 2409,
        name: 'Anguilla',
        states: [],
    },
    {
        code: 'AQ',
        id: 2190,
        name: 'Antarctica',
        states: [],
    },
    {
        code: 'AG',
        id: 2191,
        name: 'Antigua and Barbuda',
        states: [],
    },
    {
        code: 'AR',
        id: 2192,
        name: 'Argentina',
        states: [
            {
                code: 'AR01',
                name: 'Buenos Aires',
            },
            {
                code: 'AR02',
                name: 'Catamarca',
            },
            {
                code: 'AR03',
                name: 'Chaco',
            },
            {
                code: 'AR04',
                name: 'Chubut',
            },
            {
                code: 'AR07',
                name: 'Ciudad de Buenos Aires',
            },
            {
                code: 'AR05',
                name: 'Córdoba',
            },
            {
                code: 'AR06',
                name: 'Corrientes',
            },
            {
                code: 'AR08',
                name: 'Entre Ríos',
            },
            {
                code: 'AR09',
                name: 'Formosa',
            },
            {
                code: 'AR10',
                name: 'Jujuy',
            },
            {
                code: 'AR11',
                name: 'La Pampa',
            },
            {
                code: 'AR12',
                name: 'La Rioja',
            },
            {
                code: 'AR13',
                name: 'Mendoza',
            },
            {
                code: 'AR14',
                name: 'Misiones',
            },
            {
                code: 'AR15',
                name: 'Neuquén',
            },
            {
                code: 'AR16',
                name: 'Río Negro',
            },
            {
                code: 'AR17',
                name: 'Salta',
            },
            {
                code: 'AR18',
                name: 'San Juan',
            },
            {
                code: 'AR19',
                name: 'San Luis',
            },
            {
                code: 'AR20',
                name: 'Santa Cruz',
            },
            {
                code: 'AR21',
                name: 'Santa Fe',
            },
            {
                code: 'AR22',
                name: 'Santiago del Estero',
            },
            {
                code: 'AR23',
                name: 'Tierra del Fuego',
            },
            {
                code: 'AR24',
                name: 'Tucumán',
            },
        ],
    },
    {
        code: 'AM',
        id: 2193,
        name: 'Armenia',
        states: [],
    },
    {
        code: 'AB',
        id: 2373,
        name: 'Aruba',
        states: [
            {
                code: 'AW.AA',
                name: 'Aruba',
            },
        ],
    },
    {
        code: 'AU',
        id: 2194,
        name: 'Australia',
        states: [
            {
                code: 'ACT',
                name: 'Australian Capital Territory',
            },
            {
                code: 'NSW',
                name: 'New South Wales',
            },
            {
                code: 'NT',
                name: 'Northern Territory',
            },
            {
                code: 'QLD',
                name: 'Queensland',
            },
            {
                code: 'SA',
                name: 'South Australia',
            },
            {
                code: 'TAS',
                name: 'Tasmania',
            },
            {
                code: 'VIC',
                name: 'Victoria',
            },
            {
                code: 'WA',
                name: 'Western Australia',
            },
        ],
    },
    {
        code: 'AT',
        id: 2195,
        name: 'Austria',
        states: [
            {
                code: 'AU01',
                name: 'Burgenland',
            },
            {
                code: 'AU02',
                name: 'Carinthia',
            },
            {
                code: 'AU03',
                name: 'Lower Austria',
            },
            {
                code: 'AU05',
                name: 'Salzburg',
            },
            {
                code: 'AU06',
                name: 'Styria',
            },
            {
                code: 'AU07',
                name: 'Tyrol',
            },
            {
                code: 'AU04',
                name: 'Upper Austria',
            },
            {
                code: 'AU09',
                name: 'Vienna',
            },
            {
                code: 'AU08',
                name: 'Vorarlberg',
            },
        ],
    },
    {
        code: 'AZ',
        id: 2196,
        name: 'Azerbaijan',
        states: [
            {
                code: 'AZ-ABS',
                name: 'Absheron',
            },
            {
                code: 'AZ-AGM',
                name: 'Aghdam',
            },
            {
                code: 'AZ-AGS',
                name: 'Aghdash',
            },
            {
                code: 'AZ-AGC',
                name: 'Aghjabedi',
            },
            {
                code: 'AZ-AGA',
                name: 'Aghstafa',
            },
            {
                code: 'AZ-AGU',
                name: 'Aghsu',
            },
            {
                code: 'AZ-AB',
                name: 'Ali-Bairamly',
            },
            {
                code: 'AZ-AST',
                name: 'Astara',
            },
            {
                code: 'AZ-BAB',
                name: 'Babek',
            },
            {
                code: 'AZ-BA',
                name: 'Baku',
            },
            {
                code: 'AZ-BAL',
                name: 'Balaken',
            },
            {
                code: 'AZ-BAR',
                name: 'Barda',
            },
            {
                code: 'AZ-BEY',
                name: 'Beilagan',
            },
            {
                code: 'AZ-BIL',
                name: 'Bilasuvar',
            },
            {
                code: 'AZ-DAS',
                name: 'Dashkesan',
            },
            {
                code: 'AZ-DAV',
                name: 'Devechi',
            },
            {
                code: 'AZ-FUZ',
                name: 'Fizuli',
            },
            {
                code: 'AZ-QAB',
                name: 'Gabala',
            },
            {
                code: 'AZ-GAD',
                name: 'Gadabey',
            },
            {
                code: 'AZ-QAX',
                name: 'Gakh',
            },
            {
                code: 'AZ-GA',
                name: 'Ganja',
            },
            {
                code: 'AZ-QAZ',
                name: 'Gazakh',
            },
            {
                code: 'AZ-GOR',
                name: 'Geranboy',
            },
            {
                code: 'AZ-QOB',
                name: 'Gobustan',
            },
            {
                code: 'AZ-GOY',
                name: 'Goychay',
            },
            {
                code: 'AZ-QBA',
                name: 'Guba',
            },
            {
                code: 'AZ-QBI',
                name: 'Gubadly',
            },
            {
                code: 'AZ-QUS',
                name: 'Gusar',
            },
            {
                code: 'AZ-HAC',
                name: 'Hacuqabul',
            },
            {
                code: 'AZ-IMI',
                name: 'Imishli',
            },
            {
                code: 'AZ-ISM',
                name: 'Ismailly',
            },
            {
                code: 'AZ-CAL',
                name: 'Jalilabad',
            },
            {
                code: 'AZ-CAB',
                name: 'Jebrail',
            },
            {
                code: 'AZ-CUL',
                name: 'Julfa',
            },
            {
                code: 'AZ-KAL',
                name: 'Kelbajar',
            },
            {
                code: 'AZ-XAC',
                name: 'Khachmaz',
            },
            {
                code: 'AZ-XA',
                name: 'Khankendy',
            },
            {
                code: 'AZ-XAN',
                name: 'Khanlar',
            },
            {
                code: 'AZ-XCI',
                name: 'Khojaly',
            },
            {
                code: 'AZ-XVD',
                name: 'Khojavend',
            },
            {
                code: 'AZ-XIZ',
                name: 'Khyzy',
            },
            {
                code: 'AZ-KUR',
                name: 'Kyurdamir',
            },
            {
                code: 'AZ-LAC',
                name: 'Lachin',
            },
            {
                code: 'AZ-LAN',
                name: 'Lenkaran',
            },
            {
                code: 'AZ-LA',
                name: 'Lenkaran',
            },
            {
                code: 'AZ-LER',
                name: 'Lerik',
            },
            {
                code: 'AZ-MAS',
                name: 'Masally',
            },
            {
                code: 'AZ-MI',
                name: 'Mingechevir',
            },
            {
                code: 'AZ-NA',
                name: 'Naftalan',
            },
            {
                code: 'AZ-NX',
                name: 'Nakhchivan',
            },
            {
                code: 'AZ-NEF',
                name: 'Neftchala',
            },
            {
                code: 'AZ-OGU',
                name: 'Oghuz',
            },
            {
                code: 'AZ-ORD',
                name: 'Ordubad',
            },
            {
                code: 'AZ-SAT',
                name: 'Saatly',
            },
            {
                code: 'AZ-SAB',
                name: 'Sabirabad',
            },
            {
                code: 'AZ-SAL',
                name: 'Salyan',
            },
            {
                code: 'AZ-SMX',
                name: 'Samuh',
            },
            {
                code: 'AZ-SAD',
                name: 'Sedarak',
            },
            {
                code: 'AZ-SAH',
                name: 'Shahbuz',
            },
            {
                code: 'AZ-SMI',
                name: 'Shamakhy',
            },
            {
                code: 'AZ-SKR',
                name: 'Shamkir',
            },
            {
                code: 'AZ-SAK',
                name: 'Sheki',
            },
            {
                code: 'AZ-SA',
                name: 'Sheki',
            },
            {
                code: 'AZ-SAR',
                name: 'Sherur',
            },
            {
                code: 'AZ-SS',
                name: 'Shusha',
            },
            {
                code: 'AZ-SUS',
                name: 'Shusha',
            },
            {
                code: 'AZ-SIY',
                name: 'Siazan',
            },
            {
                code: 'AZ-SM',
                name: 'Sumgayit',
            },
            {
                code: 'AZ-TAR',
                name: 'Terter',
            },
            {
                code: 'AZ-TOV',
                name: 'Tovuz',
            },
            {
                code: 'AZ-UCA',
                name: 'Ujar',
            },
            {
                code: 'AZ-YAR',
                name: 'Yardymly',
            },
            {
                code: 'AZ-YE',
                name: 'Yevlakh',
            },
            {
                code: 'AZ-YEV',
                name: 'Yevlakh',
            },
            {
                code: 'AZ-ZAQ',
                name: 'Zagatala',
            },
            {
                code: 'AZ-ZAN',
                name: 'Zangilan',
            },
            {
                code: 'AZ-ZAR',
                name: 'Zerdab',
            },
        ],
    },
    {
        code: 'BS',
        id: 2197,
        name: 'Bahamas',
        states: [
            {
                code: 'BF24',
                name: 'Acklins',
            },
            {
                code: 'BF32',
                name: 'Berry Islands',
            },
            {
                code: 'BF05',
                name: 'Bimini',
            },
            {
                code: 'BF36',
                name: 'Black Point',
            },
            {
                code: 'BF06',
                name: 'Cat Island',
            },
            {
                code: 'BF37',
                name: 'Central Abaco',
            },
            {
                code: 'BF38',
                name: 'Central Andros',
            },
            {
                code: 'BF39',
                name: 'Central Eleuthera',
            },
            {
                code: 'BF25',
                name: 'City of Freeport',
            },
            {
                code: 'BF40',
                name: 'Crooked Island',
            },
            {
                code: 'BF41',
                name: 'East Grand Bahama',
            },
            {
                code: 'BF10',
                name: 'Exuma',
            },
            {
                code: 'BF42',
                name: 'Grand Cay',
            },
            {
                code: 'BS.GT\t',
                name: 'Green Turtle Cay',
            },
            {
                code: 'BF22',
                name: 'Harbour Island',
            },
            {
                code: 'BF43',
                name: 'Hope Town',
            },
            {
                code: 'BF13',
                name: 'Inagua',
            },
            {
                code: 'BF15',
                name: 'Long Island',
            },
            {
                code: 'BF44',
                name: 'Mangrove Cay',
            },
            {
                code: 'BF16',
                name: 'Mayaguana',
            },
            {
                code: 'BF45',
                name: "Moore's Island",
            },
            {
                code: 'BS.NW',
                name: 'New Providence',
            },
            {
                code: 'BF46',
                name: 'North Abaco',
            },
            {
                code: 'BF47',
                name: 'North Andros',
            },
            {
                code: 'BF48',
                name: 'North Eleuthera',
            },
            {
                code: 'BF18',
                name: 'Ragged Island',
            },
            {
                code: 'BF49',
                name: 'Rum Cay',
            },
            {
                code: 'BF35',
                name: 'San Salvador',
            },
            {
                code: 'BF50',
                name: 'South Abaco',
            },
            {
                code: 'BF51',
                name: 'South Andros',
            },
            {
                code: 'BF52',
                name: 'South Eleuthera',
            },
            {
                code: 'BF53',
                name: 'Spanish Wells',
            },
            {
                code: 'BF54',
                name: 'West Grand Bahama',
            },
        ],
    },
    {
        code: 'BH',
        id: 2198,
        name: 'Bahrain',
        states: [
            {
                code: 'BA16',
                name: 'Capital',
            },
            {
                code: 'BA19',
                name: 'Central',
            },
            {
                code: 'BA15',
                name: 'Muharraq',
            },
            {
                code: 'BA18',
                name: 'Northern',
            },
            {
                code: 'BA17',
                name: 'Southern',
            },
        ],
    },
    {
        code: 'BD',
        id: 2199,
        name: 'Bangladesh',
        states: [
            {
                code: 'BG85',
                name: 'Barisal',
            },
            {
                code: 'BG84',
                name: 'Chittagong',
            },
            {
                code: 'BG81',
                name: 'Dhaka',
            },
            {
                code: 'BG82',
                name: 'Khulna',
            },
            {
                code: 'BG81',
                name: 'Mymensingh',
            },
            {
                code: 'BG83',
                name: 'Rajshahi',
            },
            {
                code: 'BG87',
                name: 'Rangpur',
            },
            {
                code: 'BG86',
                name: 'Sylhet',
            },
        ],
    },
    {
        code: 'BB',
        id: 2200,
        name: 'Barbados',
        states: [
            {
                code: 'BB01',
                name: 'Christ Church',
            },
            {
                code: 'BB02',
                name: 'Saint Andrew',
            },
            {
                code: 'BB03',
                name: 'Saint George',
            },
            {
                code: 'BB04',
                name: 'Saint James',
            },
            {
                code: 'BB05',
                name: 'Saint John',
            },
            {
                code: 'BB06',
                name: 'Saint Joseph',
            },
            {
                code: 'BB07',
                name: 'Saint Lucy',
            },
            {
                code: 'BB08',
                name: 'Saint Michael',
            },
            {
                code: 'BB09',
                name: 'Saint Peter',
            },
            {
                code: 'BB10',
                name: 'Saint Philip',
            },
            {
                code: 'BB11',
                name: 'Saint Thomas',
            },
        ],
    },
    {
        code: 'BY',
        id: 2201,
        name: 'Belarus',
        states: [
            {
                code: 'BO01',
                name: 'Brest',
            },
            {
                code: 'BO02',
                name: 'Gomel',
            },
            {
                code: 'BO03',
                name: 'Grodno',
            },
            {
                code: 'BO05',
                name: 'Minsk',
            },
            {
                code: 'BO04',
                name: 'Minsk City',
            },
            {
                code: 'BO06',
                name: 'Mogilev',
            },
            {
                code: 'BO07',
                name: 'Vitebsk',
            },
        ],
    },
    {
        code: 'BE',
        id: 2202,
        name: 'Belgium',
        states: [
            {
                code: 'BE01',
                name: 'Antwerpen Province',
            },
            {
                code: 'BE11',
                name: 'Brussels-Capital Region',
            },
            {
                code: 'BE12',
                name: 'Flemish Brabant Province',
            },
            {
                code: 'BE03',
                name: 'Hainaut Province',
            },
            {
                code: 'BE04',
                name: 'Liege Province',
            },
            {
                code: 'BE05',
                name: 'Limburg Province',
            },
            {
                code: 'BE06',
                name: 'Luxembourg Province',
            },
            {
                code: 'BE07',
                name: 'Namur Province',
            },
            {
                code: 'BE08',
                name: 'Oost-Vlaanderen Province',
            },
            {
                code: 'BE10',
                name: 'Walloon Brabant Province',
            },
            {
                code: 'BE09',
                name: 'West-Vlaanderen Province',
            },
        ],
    },
    {
        code: 'BZ',
        id: 2203,
        name: 'Belize',
        states: [],
    },
    {
        code: 'BJ',
        id: 2204,
        name: 'Benin',
        states: [
            {
                code: 'BN07',
                name: 'Alibori',
            },
            {
                code: 'BN08',
                name: 'Atacora',
            },
            {
                code: 'BN09',
                name: 'Atlantique',
            },
            {
                code: 'BN10',
                name: 'Borgou',
            },
            {
                code: 'BN11',
                name: 'Collines',
            },
            {
                code: 'BN12',
                name: 'Couffo',
            },
            {
                code: 'BN13',
                name: 'Donga',
            },
            {
                code: 'BN14',
                name: 'Littoral',
            },
            {
                code: 'BN15',
                name: 'Mono',
            },
            {
                code: 'BN16',
                name: 'Ouémé',
            },
            {
                code: 'BN17',
                name: 'Plateau',
            },
            {
                code: 'BN18',
                name: 'Zou',
            },
        ],
    },
    {
        code: 'BU',
        id: 2372,
        name: 'Bermuda',
        states: [
            {
                code: 'BM.BD',
                name: 'Bermuda',
            },
            {
                code: 'BD01',
                name: 'Devonshire',
            },
            {
                code: 'BD03',
                name: 'Hamilton municipality',
            },
            {
                code: 'BD02',
                name: 'Hamilton',
            },
            {
                code: 'BD04',
                name: 'Paget',
            },
            {
                code: 'BD05',
                name: 'Pembroke',
            },
            {
                code: 'BD06',
                name: 'Saint George municipality',
            },
            {
                code: 'BD07',
                name: "Saint George's",
            },
            {
                code: 'BD08',
                name: 'Sandys',
            },
            {
                code: 'BD09',
                name: 'Smiths',
            },
            {
                code: 'BD10',
                name: 'Southampton',
            },
            {
                code: 'BD11',
                name: 'Warwick',
            },
        ],
    },
    {
        code: 'BT',
        id: 2205,
        name: 'Bhutan',
        states: [],
    },
    {
        code: 'BO',
        id: 2206,
        name: 'Bolivia; Plurinational State',
        states: [
            {
                code: 'BL01',
                name: 'Chuquisaca',
            },
            {
                code: 'BL02',
                name: 'Cochabamba',
            },
            {
                code: 'BL03',
                name: 'El Beni',
            },
            {
                code: 'BL04',
                name: 'La Paz',
            },
            {
                code: 'BL05',
                name: 'Oruro',
            },
            {
                code: 'BL06',
                name: 'Pando',
            },
            {
                code: 'BL07',
                name: 'Potosí',
            },
            {
                code: 'BL08',
                name: 'Santa Cruz',
            },
            {
                code: 'BL09',
                name: 'Tarija',
            },
        ],
    },
    {
        code: 'BQ',
        id: 2449,
        name: 'Bonaire',
        states: [
            {
                code: 'BQ.BO',
                name: 'Bonaire',
            },
            {
                code: 'BQ.SB',
                name: 'Saba',
            },
            {
                code: 'BQ.SE',
                name: 'Sint Eustatius',
            },
        ],
    },
    {
        code: 'BA',
        id: 2207,
        name: 'Bosnia and Herzegovina',
        states: [
            {
                code: 'BA-05',
                name: 'Bosansko-podrinjski kanton',
            },
            {
                code: 'BA-BRC',
                name: 'Brcko distrikt',
            },
            {
                code: 'BA-BIH',
                name: 'Federacija Bosna i Hercegovina',
            },
            {
                code: 'BA-07',
                name: 'Hercegovacko-neretvanski kanton',
            },
            {
                code: 'BA-09',
                name: 'Kanton Sarajevo',
            },
            {
                code: 'BA-10',
                name: 'Livanjski kanton',
            },
            {
                code: 'BA-02',
                name: 'Posavski kanton',
            },
            {
                code: 'BA-SRP',
                name: 'Republika Srpska',
            },
            {
                code: 'BA-06',
                name: 'Srednjobosanski kanton',
            },
            {
                code: 'BA-03',
                name: 'Tuzlanski kanton',
            },
            {
                code: 'BA-01',
                name: 'Unsko-sanski kanton',
            },
            {
                code: 'BA-08',
                name: 'Zapadnohercegovacki kanton',
            },
            {
                code: 'BA-04',
                name: 'Zenicko-dobojski kanton',
            },
        ],
    },
    {
        code: 'BW',
        id: 2208,
        name: 'Botswana',
        states: [
            {
                code: 'BC01',
                name: 'Central',
            },
            {
                code: 'BC12',
                name: 'Chobe',
            },
            {
                code: 'BC13',
                name: 'Francistown',
            },
            {
                code: 'BC14',
                name: 'Gaborone',
            },
            {
                code: 'BC03',
                name: 'Ghanzi',
            },
            {
                code: 'BC15',
                name: 'Jwaneng',
            },
            {
                code: 'BC04',
                name: 'Kgalagadi',
            },
            {
                code: 'BC05',
                name: 'Kgatleng',
            },
            {
                code: 'BC06',
                name: 'Kweneng',
            },
            {
                code: 'BC16',
                name: 'Lobatse',
            },
            {
                code: 'BC08',
                name: 'North-East',
            },
            {
                code: 'BC11',
                name: 'North-West',
            },
            {
                code: 'BC17',
                name: 'Selibe Phikwe',
            },
            {
                code: 'BC09',
                name: 'South East',
            },
            {
                code: 'BC10',
                name: 'Southern',
            },
            {
                code: 'BC18',
                name: 'Sowa Town',
            },
        ],
    },
    {
        code: 'BV',
        id: 2410,
        name: 'Bouvet Island',
        states: [],
    },
    {
        code: 'BR',
        id: 2209,
        name: 'Brazil',
        states: [
            {
                code: 'AC',
                name: 'Acre',
            },
            {
                code: 'AL',
                name: 'Alagoas',
            },
            {
                code: 'AP',
                name: 'Amapá',
            },
            {
                code: 'AM',
                name: 'Amazonas',
            },
            {
                code: 'BA',
                name: 'Bahia',
            },
            {
                code: 'CE',
                name: 'Ceará',
            },
            {
                code: 'DF',
                name: 'Distrito Federal',
            },
            {
                code: 'ES',
                name: 'Espírito Santo',
            },
            {
                code: 'GO',
                name: 'Goiás',
            },
            {
                code: 'MA',
                name: 'Maranhão',
            },
            {
                code: 'MT',
                name: 'Mato Grosso',
            },
            {
                code: 'MS',
                name: 'Mato Grosso do Sul',
            },
            {
                code: 'MG',
                name: 'Minas Gerais',
            },
            {
                code: 'PA',
                name: 'Pará',
            },
            {
                code: 'PR',
                name: 'Paraná',
            },
            {
                code: 'PB',
                name: 'Paraíba',
            },
            {
                code: 'PE',
                name: 'Pernambuco',
            },
            {
                code: 'PI',
                name: 'Piauí',
            },
            {
                code: 'RN',
                name: 'Rio Grande do Norte',
            },
            {
                code: 'RS',
                name: 'Rio Grande do Sul',
            },
            {
                code: 'RJ',
                name: 'Rio de Janeiro',
            },
            {
                code: 'RO',
                name: 'Rondônia',
            },
            {
                code: 'RR',
                name: 'Roraima',
            },
            {
                code: 'SC',
                name: 'Santa Catarina',
            },
            {
                code: 'SP',
                name: 'São Paulo',
            },
            {
                code: 'SE',
                name: 'Sergipe',
            },
            {
                code: 'TO',
                name: 'Tocantins',
            },
        ],
    },
    {
        code: 'IO',
        id: 2411,
        name: 'British Indian Ocean Territory',
        states: [],
    },
    {
        code: 'BN',
        id: 2210,
        name: 'Brunei Darussalam',
        states: [
            {
                code: 'BX01',
                name: 'Amo',
            },
            {
                code: 'BX02',
                name: 'Bandar Seri Begawan',
            },
            {
                code: 'BX03',
                name: 'Bangar',
            },
            {
                code: 'BX04',
                name: 'Batu Apoi',
            },
            {
                code: 'BX05',
                name: 'Berakas',
            },
            {
                code: 'BX06',
                name: 'Bokok',
            },
            {
                code: 'BX07',
                name: 'Bukit Sawat',
            },
            {
                code: 'BX08',
                name: 'Burong Pinggai Ayer',
            },
            {
                code: 'BX09',
                name: 'Gadong',
            },
            {
                code: 'BX10',
                name: 'Keriam',
            },
            {
                code: 'BX11',
                name: 'Kianggeh',
            },
            {
                code: 'BX12',
                name: 'Kilanas',
            },
            {
                code: 'BX13',
                name: 'Kiudang',
            },
            {
                code: 'BX14',
                name: 'Kota Batu',
            },
            {
                code: 'BX15',
                name: 'Kuala Balai',
            },
            {
                code: 'BX16',
                name: 'Kuala Belait',
            },
            {
                code: 'BX17',
                name: 'Labi',
            },
            {
                code: 'BX18',
                name: 'Labu',
            },
            {
                code: 'BX19',
                name: 'Lamunin',
            },
            {
                code: 'BX20',
                name: 'Liang',
            },
            {
                code: 'BX21',
                name: 'Lumapas',
            },
            {
                code: 'BX22',
                name: 'Melilas',
            },
            {
                code: 'BX23',
                name: 'Mentiri',
            },
            {
                code: 'BX24',
                name: 'Pekan Tutong',
            },
            {
                code: 'BX25',
                name: 'Pengkalan Batu',
            },
            {
                code: 'BX26',
                name: 'Peramu',
            },
            {
                code: 'BX27',
                name: 'Rambai',
            },
            {
                code: 'BX28',
                name: 'Saba',
            },
            {
                code: 'BX29',
                name: 'Sengkurong',
            },
            {
                code: 'BX30',
                name: 'Serasa',
            },
            {
                code: 'BX31',
                name: 'Seria',
            },
            {
                code: 'BX32',
                name: 'Sukang',
            },
            {
                code: 'BX33',
                name: 'Sungai Kebun',
            },
            {
                code: 'BX34',
                name: 'Sungai Kedayan',
            },
            {
                code: 'BX35',
                name: 'Tamoi',
            },
            {
                code: 'BX36',
                name: 'Tanjong Maya',
            },
            {
                code: 'BX37',
                name: 'Telisai',
            },
            {
                code: 'BX38',
                name: 'Ukong',
            },
        ],
    },
    {
        code: 'BG',
        id: 2211,
        name: 'Bulgaria',
        states: [
            {
                code: 'BU38',
                name: 'Blagoevgrad',
            },
            {
                code: 'BU39',
                name: 'Burgas',
            },
            {
                code: 'BU40',
                name: 'Dobrich',
            },
            {
                code: 'BU41',
                name: 'Gabrovo',
            },
            {
                code: 'BU42',
                name: 'Grad Sofiya',
            },
            {
                code: 'BU43',
                name: 'Khaskovo',
            },
            {
                code: 'BU44',
                name: 'Kurdzhali',
            },
            {
                code: 'BU45',
                name: 'Kyustendil',
            },
            {
                code: 'BU46',
                name: 'Lovech',
            },
            {
                code: 'BU47',
                name: 'Montana',
            },
            {
                code: 'BU48',
                name: 'Pazardzhik',
            },
            {
                code: 'BU49',
                name: 'Pernik',
            },
            {
                code: 'BU50',
                name: 'Pleven',
            },
            {
                code: 'BU51',
                name: 'Plovdiv',
            },
            {
                code: 'BU52',
                name: 'Razgrad',
            },
            {
                code: 'BU53',
                name: 'Ruse',
            },
            {
                code: 'BU54',
                name: 'Shumen',
            },
            {
                code: 'BU55',
                name: 'Silistra',
            },
            {
                code: 'BU56',
                name: 'Sliven',
            },
            {
                code: 'BU57',
                name: 'Smolyan',
            },
            {
                code: 'BU58',
                name: 'Sofiya',
            },
            {
                code: 'BU59',
                name: 'Stara Zagora',
            },
            {
                code: 'BU60',
                name: 'Turgovishte',
            },
            {
                code: 'BU61',
                name: 'Varna',
            },
            {
                code: 'BU62',
                name: 'Veliko Turnovo',
            },
            {
                code: 'BU63',
                name: 'Vidin',
            },
            {
                code: 'BU64',
                name: 'Vratsa',
            },
            {
                code: 'BU65',
                name: 'Yambol',
            },
        ],
    },
    {
        code: 'BF',
        id: 2212,
        name: 'Burkina Faso',
        states: [
            {
                code: 'UV79',
                name: 'Boucle du Mouhoun',
            },
            {
                code: 'UV80',
                name: 'Cascades',
            },
            {
                code: 'UV82',
                name: 'Centre Est',
            },
            {
                code: 'UV83',
                name: 'Centre Nord',
            },
            {
                code: 'UV84',
                name: 'Centre Ouest',
            },
            {
                code: 'UV81',
                name: 'Centre',
            },
            {
                code: 'UV85',
                name: 'Centre Sud',
            },
            {
                code: 'UV86',
                name: 'Est',
            },
            {
                code: 'UV87',
                name: 'Hauts Bassins',
            },
            {
                code: 'UV88',
                name: 'Nord',
            },
            {
                code: 'UV89',
                name: 'Plateau Central',
            },
            {
                code: 'UV90',
                name: 'Sahel',
            },
            {
                code: 'UV91',
                name: 'Sud-Ouest',
            },
        ],
    },
    {
        code: 'BM',
        id: 2385,
        name: 'Burma',
        states: [
            {
                code: 'BM03',
                name: 'Ayeyarwady',
            },
            {
                code: 'BM16',
                name: 'Bago',
            },
            {
                code: 'BM02',
                name: 'Chin',
            },
            {
                code: 'BM04',
                name: 'Kachin',
            },
            {
                code: 'BM06',
                name: 'Kayah',
            },
            {
                code: 'BM05',
                name: 'Kayin',
            },
            {
                code: 'BM15',
                name: 'Magway',
            },
            {
                code: 'BM08',
                name: 'Mandalay',
            },
            {
                code: 'BM13',
                name: 'Mon',
            },
            {
                code: 'BM18',
                name: 'Naypyidaw',
            },
            {
                code: 'BM01',
                name: 'Rakhine',
            },
            {
                code: 'BM10',
                name: 'Sagaing',
            },
            {
                code: 'BM11',
                name: 'Shan',
            },
            {
                code: 'BM12',
                name: 'Tanintharyi',
            },
            {
                code: 'BM17',
                name: 'Yangon',
            },
        ],
    },
    {
        code: 'BI',
        id: 2213,
        name: 'Burundi',
        states: [],
    },
    {
        code: 'KH',
        id: 2214,
        name: 'Cambodia',
        states: [
            {
                code: 'CB25',
                name: 'Bântéay Méanchey',
            },
            {
                code: 'CB29',
                name: 'Batdâmbâng',
            },
            {
                code: 'CB02',
                name: 'Kâmpóng Cham',
            },
            {
                code: 'CB03',
                name: 'Kâmpóng Chhnang',
            },
            {
                code: 'CB04',
                name: 'Kâmpóng Spœ',
            },
            {
                code: 'CB05',
                name: 'Kâmpóng Thum',
            },
            {
                code: 'CB21',
                name: 'Kâmpôt',
            },
            {
                code: 'CB07',
                name: 'Kândal',
            },
            {
                code: 'CB08',
                name: 'Kaôh Kong',
            },
            {
                code: 'CB09',
                name: 'Krâchéh',
            },
            {
                code: 'CB26',
                name: 'Krong Keb',
            },
            {
                code: 'CB30',
                name: 'Krong Pailin',
            },
            {
                code: 'CB28',
                name: 'Krong Preah Sihanouk',
            },
            {
                code: 'CB10',
                name: 'Môndól Kiri',
            },
            {
                code: 'CB27',
                name: 'Otdâr Méanchey',
            },
            {
                code: 'CB22',
                name: 'Phnom Penh',
            },
            {
                code: 'CB12',
                name: 'Pouthisat',
            },
            {
                code: 'CB13',
                name: 'Preah Vihéar',
            },
            {
                code: 'CB14',
                name: 'Prey Vêng',
            },
            {
                code: 'CB23',
                name: 'Rôtânôkiri',
            },
            {
                code: 'CB24',
                name: 'Siemréab',
            },
            {
                code: 'CB17',
                name: 'Stœ?ng Trêng',
            },
            {
                code: 'CB18',
                name: 'Svay Rieng',
            },
            {
                code: 'CB19',
                name: 'Takêv',
            },
            {
                code: 'CB31',
                name: 'Tbong Khmum',
            },
        ],
    },
    {
        code: 'CM',
        id: 2215,
        name: 'Cameroon',
        states: [
            {
                code: 'CM10',
                name: 'Adamaoua',
            },
            {
                code: 'CM11',
                name: 'Centre',
            },
            {
                code: 'CM04',
                name: 'Est',
            },
            {
                code: 'CM12',
                name: 'Extrême-Nord',
            },
            {
                code: 'CM05',
                name: 'Littoral',
            },
            {
                code: 'CM07',
                name: 'Nord-Ouest',
            },
            {
                code: 'CM13',
                name: 'Nord',
            },
            {
                code: 'CM08',
                name: 'Ouest',
            },
            {
                code: 'CM09',
                name: 'Sud-Ouest',
            },
            {
                code: 'CM14',
                name: 'Sud',
            },
        ],
    },
    {
        code: 'CA',
        id: 2216,
        name: 'Canada',
        states: [
            {
                code: 'AB',
                name: 'Alberta',
            },
            {
                code: 'BC',
                name: 'British Columbia',
            },
            {
                code: 'MB',
                name: 'Manitoba',
            },
            {
                code: 'NB',
                name: 'New Brunswick',
            },
            {
                code: 'NL',
                name: 'Newfoundland and Labrador',
            },
            {
                code: 'NT',
                name: 'Northwest Territories',
            },
            {
                code: 'NS',
                name: 'Nova Scotia',
            },
            {
                code: 'NU',
                name: 'Nunavut',
            },
            {
                code: 'ON',
                name: 'Ontario',
            },
            {
                code: 'PE',
                name: 'Prince Edward Island',
            },
            {
                code: 'QC',
                name: 'Quebec',
            },
            {
                code: 'SK',
                name: 'Saskatchewan',
            },
            {
                code: 'YT',
                name: 'Yukon',
            },
        ],
    },
    {
        code: 'CV',
        id: 2217,
        name: 'Cape Verde',
        states: [],
    },
    {
        code: 'KY',
        id: 2379,
        name: 'Cayman Islands',
        states: [
            {
                code: 'KY.BT',
                name: 'Bodden Town',
            },
            {
                code: 'KY.CJ',
                name: 'Cayman Islands',
            },
            {
                code: 'KY.EE',
                name: 'East End',
            },
            {
                code: 'KY.GT',
                name: 'George Town',
            },
            {
                code: 'KY.NS',
                name: 'North Side',
            },
            {
                code: 'KY.SI',
                name: 'Sister Islands',
            },
            {
                code: 'KY.WB',
                name: 'West Bay',
            },
        ],
    },
    {
        code: 'CF',
        id: 2218,
        name: 'Central African Republic',
        states: [
            {
                code: 'CT01',
                name: 'Bamingui-Bangoran',
            },
            {
                code: 'CT18',
                name: 'Bangui',
            },
            {
                code: 'CT02',
                name: 'Basse-Kotto',
            },
            {
                code: 'CT05',
                name: 'Haut-Mbomou',
            },
            {
                code: 'CT03',
                name: 'Haute-Kotto',
            },
            {
                code: 'CT06',
                name: 'Kémo',
            },
            {
                code: 'CT07',
                name: 'Lobaye',
            },
            {
                code: 'CT04',
                name: 'Mambéré-Kadéï',
            },
            {
                code: 'CT08',
                name: 'Mbomou',
            },
            {
                code: 'CT15',
                name: 'Nana-Grébizi',
            },
            {
                code: 'CT09',
                name: 'Nana-Mambéré',
            },
            {
                code: 'CT17',
                name: "Ombella-M'Poko",
            },
            {
                code: 'CT11',
                name: 'Ouaka',
            },
            {
                code: 'CT12',
                name: 'Ouham',
            },
            {
                code: 'CT13',
                name: 'Ouham-Pendé',
            },
            {
                code: 'CT16',
                name: 'Sangha-Mbaéré',
            },
            {
                code: 'CT14',
                name: 'Vakaga',
            },
        ],
    },
    {
        code: 'TD',
        id: 2219,
        name: 'Chad',
        states: [
            {
                code: 'CD22',
                name: 'Barh el Ghazel',
            },
            {
                code: 'CD01',
                name: 'Batha',
            },
            {
                code: 'CD23',
                name: 'Borkou',
            },
            {
                code: 'CD15',
                name: 'Chari-Baguirmi',
            },
            {
                code: 'CD27',
                name: 'Ennedi Est',
            },
            {
                code: 'CD28',
                name: 'Ennedi Ouest',
            },
            {
                code: 'CD05',
                name: 'Guéra',
            },
            {
                code: 'CD18',
                name: 'Hadjer-Lamis',
            },
            {
                code: 'CD06',
                name: 'Kanem',
            },
            {
                code: 'CD07',
                name: 'Lac',
            },
            {
                code: 'CD08',
                name: 'Logone Occidental',
            },
            {
                code: 'CD09',
                name: 'Logone Oriental',
            },
            {
                code: 'CD19',
                name: 'Mandoul',
            },
            {
                code: 'CD16',
                name: 'Mayo-Kebbi Est',
            },
            {
                code: 'CD20',
                name: 'Mayo-Kebbi Ouest',
            },
            {
                code: 'CD17',
                name: 'Moyen-Chari',
            },
            {
                code: 'CD12',
                name: 'Ouaddaï',
            },
            {
                code: 'CD13',
                name: 'Salamat',
            },
            {
                code: 'CD25',
                name: 'Sila',
            },
            {
                code: 'CD14',
                name: 'Tandjilé',
            },
            {
                code: 'CD26',
                name: 'Tibesti',
            },
            {
                code: 'CD21',
                name: "Ville de N'Djamena",
            },
            {
                code: 'CD02',
                name: 'Wadi Fira',
            },
        ],
    },
    {
        code: 'CH99',
        id: 2386,
        name: 'Channel Islands',
        states: [],
    },
    {
        code: 'CL',
        id: 2220,
        name: 'Chile',
        states: [
            {
                code: 'CL.AI',
                name: 'Aisén del General Carlos Ibáñez del Campo',
            },
            {
                code: 'CL.AN',
                name: 'Antofagasta',
            },
            {
                code: 'CL.AR',
                name: 'Araucanía',
            },
            {
                code: 'CL.AP',
                name: 'Arica and Parinacota',
            },
            {
                code: 'CL.AT',
                name: 'Atacama',
            },
            {
                code: 'CL.BI',
                name: 'Bío-Bío',
            },
            {
                code: 'CL.CO',
                name: 'Coquimbo',
            },
            {
                code: 'CL.LI',
                name: "Libertador General Bernardo O'Higgins",
            },
            {
                code: 'CL.LG',
                name: 'Los Lagos',
            },
            {
                code: 'CL.LR',
                name: 'Los Ríos',
            },
            {
                code: 'CL.MA',
                name: 'Magallanes y Antártica Chilena',
            },
            {
                code: 'CL.ML',
                name: 'Maule',
            },
            {
                code: 'CL.RM',
                name: 'Región Metropolitana de Santiago',
            },
            {
                code: 'CL.TP',
                name: 'Tarapacá',
            },
            {
                code: 'CL.VS',
                name: 'Valparaíso',
            },
        ],
    },
    {
        code: 'CN',
        id: 2221,
        name: 'China',
        states: [
            {
                code: 'CH01',
                name: 'Anhui',
            },
            {
                code: 'CH22',
                name: 'Beijing',
            },
            {
                code: 'CH33',
                name: 'Chongqing',
            },
            {
                code: 'CH07',
                name: 'Fujian',
            },
            {
                code: 'CH15',
                name: 'Gansu',
            },
            {
                code: 'CH17',
                name: 'Guangdon',
            },
            {
                code: 'CH30',
                name: 'Guangdong',
            },
            {
                code: 'CH16',
                name: 'Guangxi',
            },
            {
                code: 'CH18',
                name: 'Guizhou',
            },
            {
                code: 'CH31',
                name: 'Hainan',
            },
            {
                code: 'CH10',
                name: 'Hebei',
            },
            {
                code: 'CH08',
                name: 'Heilongjiang',
            },
            {
                code: 'CH09',
                name: 'Henan',
            },
            {
                code: 'CH34',
                name: 'Hong Kong',
            },
            {
                code: 'CH12',
                name: 'Hubei',
            },
            {
                code: 'CH11',
                name: 'Hunan',
            },
            {
                code: 'CH04',
                name: 'Jiangsu',
            },
            {
                code: 'CH03',
                name: 'Jiangxi',
            },
            {
                code: 'CH05',
                name: 'Jilin',
            },
            {
                code: 'CH19',
                name: 'Liaoning',
            },
            {
                code: 'CH20',
                name: 'Nei Mongol',
            },
            {
                code: 'CH21',
                name: 'Ningxia',
            },
            {
                code: 'CH06',
                name: 'Qinghai',
            },
            {
                code: 'CH26',
                name: 'Shaanxi',
            },
            {
                code: 'CH25',
                name: 'Shandong',
            },
            {
                code: 'CH23',
                name: 'Shanghai',
            },
            {
                code: 'CH24',
                name: 'Shanxi',
            },
            {
                code: 'CH32',
                name: 'Sichuan',
            },
            {
                code: 'CH27',
                name: 'Sichuan',
            },
            {
                code: 'CH28',
                name: 'Tianjin',
            },
            {
                code: 'CH13',
                name: 'Xinjiang',
            },
            {
                code: 'CH14',
                name: 'Xizang',
            },
            {
                code: 'CH29',
                name: 'Yunnan',
            },
            {
                code: 'CH02',
                name: 'Zhejiang',
            },
        ],
    },
    {
        code: 'CX',
        id: 2412,
        name: 'Christmas Island',
        states: [],
    },
    {
        code: 'CC',
        id: 2413,
        name: 'Cocos (Keeling) Islands',
        states: [],
    },
    {
        code: 'CO',
        id: 2222,
        name: 'Colombia',
        states: [
            {
                code: 'CO01',
                name: 'Amazonas',
            },
            {
                code: 'CO02',
                name: 'Antioquia',
            },
            {
                code: 'CO03',
                name: 'Arauca',
            },
            {
                code: 'CO04',
                name: 'Atlántico',
            },
            {
                code: 'CO35',
                name: 'Bolívar',
            },
            {
                code: 'CO36',
                name: 'Boyacá',
            },
            {
                code: 'CO37',
                name: 'Caldas',
            },
            {
                code: 'CO08',
                name: 'Caquetá',
            },
            {
                code: 'CO32',
                name: 'Casanare',
            },
            {
                code: 'CO09',
                name: 'Cauca',
            },
            {
                code: 'CO10',
                name: 'Cesar',
            },
            {
                code: 'CO11',
                name: 'Chocó',
            },
            {
                code: 'CO12',
                name: 'Córdoba',
            },
            {
                code: 'CO33',
                name: 'Cundinamarca',
            },
            {
                code: 'CO34',
                name: 'Distrito Capital',
            },
            {
                code: 'CO15',
                name: 'Guainía',
            },
            {
                code: 'CO14',
                name: 'Guaviare',
            },
            {
                code: 'CO16',
                name: 'Huila',
            },
            {
                code: 'CO17',
                name: 'La Guajira',
            },
            {
                code: 'CO38',
                name: 'Magdalena',
            },
            {
                code: 'CO19',
                name: 'Meta',
            },
            {
                code: 'CO20',
                name: 'Nariño',
            },
            {
                code: 'CO21',
                name: 'Norte de Santander',
            },
            {
                code: 'CO22',
                name: 'Putumayo',
            },
            {
                code: 'CO23',
                name: 'Quindío',
            },
            {
                code: 'CO24',
                name: 'Risaralda',
            },
            {
                code: 'CO25',
                name: 'San Andrés y Providencia',
            },
            {
                code: 'CO26',
                name: 'Santander',
            },
            {
                code: 'CO27',
                name: 'Sucre',
            },
            {
                code: 'CO28',
                name: 'Tolima',
            },
            {
                code: 'CO29',
                name: 'Valle del Cauca',
            },
            {
                code: 'CO30',
                name: 'Vaupés',
            },
            {
                code: 'CO31',
                name: 'Vichada',
            },
        ],
    },
    {
        code: 'KM',
        id: 2223,
        name: 'Comoros',
        states: [],
    },
    {
        code: 'ZR',
        id: 2368,
        name: 'Congo; Democratic Republic of',
        states: [
            {
                code: 'CD.BU',
                name: 'Bas-Uélé',
            },
            {
                code: 'CD.HK',
                name: 'Haut-Katanga',
            },
            {
                code: 'CD.HL',
                name: 'Haut-Lomami',
            },
            {
                code: 'CD.HU',
                name: 'Haut-Uélé',
            },
            {
                code: 'CD.IT',
                name: 'Ituri',
            },
            {
                code: 'CD.KS',
                name: 'Kasaï',
            },
            {
                code: 'CD.LL',
                name: 'Kasaï-Central',
            },
            {
                code: 'CD.KO',
                name: 'Kasaï Oriental',
            },
            {
                code: 'CD.KN',
                name: 'Kinshasa',
            },
            {
                code: 'CD.BC',
                name: 'Kongo Central',
            },
            {
                code: 'CD.KG',
                name: 'Kwango',
            },
            {
                code: 'CD.KU',
                name: 'Kwilu',
            },
            {
                code: 'CD.LM',
                name: 'Lomami',
            },
            {
                code: 'CD.LB',
                name: 'Lualaba',
            },
            {
                code: 'CD.MA',
                name: 'Mai-Ndombe',
            },
            {
                code: 'CD.MN',
                name: 'Maniema',
            },
            {
                code: 'CD.MO',
                name: 'Mongala',
            },
            {
                code: 'CD.NK',
                name: 'Nord-Kivu',
            },
            {
                code: 'CD.NU',
                name: 'Nord-Ubangi',
            },
            {
                code: 'CD.SN',
                name: 'Sankuru',
            },
            {
                code: 'CD.SK',
                name: 'Sud-Kivu',
            },
            {
                code: 'CD.SU',
                name: 'Sud-Ubangi',
            },
            {
                code: 'CD.TG',
                name: 'Tanganyika',
            },
            {
                code: 'CD.TO',
                name: 'Tshopo',
            },
            {
                code: 'CD.TP',
                name: 'Tshuapa',
            },
            {
                code: 'CD.ET',
                name: 'Équateur',
            },
        ],
    },
    {
        code: 'CG',
        id: 2383,
        name: 'Congo; Republic of',
        states: [],
    },
    {
        code: 'CK',
        id: 2414,
        name: 'Cook Islands',
        states: [],
    },
    {
        code: 'CR',
        id: 2226,
        name: 'Costa Rica',
        states: [
            {
                code: 'CS01',
                name: 'Alajuela',
            },
            {
                code: 'CS02',
                name: 'Cartago',
            },
            {
                code: 'CS03',
                name: 'Guanacaste',
            },
            {
                code: 'CS04',
                name: 'Heredia',
            },
            {
                code: 'CS06',
                name: 'Limón',
            },
            {
                code: 'CS07',
                name: 'Puntarenas',
            },
            {
                code: 'CS08',
                name: 'San José',
            },
        ],
    },
    {
        code: 'CI',
        id: 2227,
        name: "Cote D'Ivoire",
        states: [
            {
                code: 'IV93',
                name: 'Abidjan',
            },
            {
                code: 'IV76',
                name: 'Bas-Sassandra',
            },
            {
                code: 'IV94',
                name: 'Comoé',
            },
            {
                code: 'IV77',
                name: 'Denguélé',
            },
            {
                code: 'IV95',
                name: 'Gôh-Djiboua',
            },
            {
                code: 'IV81',
                name: 'Lacs',
            },
            {
                code: 'IV82',
                name: 'Lagunes',
            },
            {
                code: 'IV78',
                name: 'Montagnes',
            },
            {
                code: 'IV96',
                name: 'Sassandra-Marahoué',
            },
            {
                code: 'IV87',
                name: 'Savanes',
            },
            {
                code: 'IV90',
                name: 'Vallée du Bandama',
            },
            {
                code: 'IV97',
                name: 'Woroba',
            },
            {
                code: 'IV98',
                name: 'Yamoussoukro',
            },
            {
                code: 'IV92',
                name: 'Zanzan',
            },
        ],
    },
    {
        code: 'HR',
        id: 2228,
        name: 'Croatia',
        states: [
            {
                code: 'HR07',
                name: 'Bjelovarsko-bilogorska',
            },
            {
                code: 'HR12',
                name: 'Brodsko-posavska',
            },
            {
                code: 'HR19',
                name: 'Dubrovacko-neretvanska',
            },
            {
                code: 'HR21',
                name: 'Grad Zagreb',
            },
            {
                code: 'HR-18',
                name: 'Istarska',
            },
            {
                code: 'HR04',
                name: 'Karlovacka',
            },
            {
                code: 'HR06',
                name: 'Koprivnicko-križevacka',
            },
            {
                code: 'HR02',
                name: 'Krapinsko-zagorska',
            },
            {
                code: 'HR09',
                name: 'Licko-senjska',
            },
            {
                code: 'HR20',
                name: 'Medimurska',
            },
            {
                code: 'HR14',
                name: 'Osjecko-baranjska',
            },
            {
                code: 'HR11',
                name: 'Požeško-slavonska',
            },
            {
                code: 'HR08',
                name: 'Primorsko-goranska',
            },
            {
                code: 'HR15',
                name: 'Šibensko-kninska',
            },
            {
                code: 'HR03',
                name: 'Sisacko-moslavacka',
            },
            {
                code: 'HR17',
                name: 'Splitsko-dalmatinska',
            },
            {
                code: 'HR05',
                name: 'Varaždinska',
            },
            {
                code: 'HR10',
                name: 'Viroviticko-podravska',
            },
            {
                code: 'HR16',
                name: 'Vukovarsko-srijemska',
            },
            {
                code: 'HR13',
                name: 'Zadarska',
            },
            {
                code: 'HR01',
                name: 'Zagrebacka',
            },
        ],
    },
    {
        code: 'CU',
        id: 2229,
        name: 'Cuba',
        states: [
            {
                code: 'CU17',
                name: 'Artemisa',
            },
            {
                code: 'CU05',
                name: 'Camagüey',
            },
            {
                code: 'CU07',
                name: 'Ciego de Ávila',
            },
            {
                code: 'CU08',
                name: 'Cienfuegos',
            },
            {
                code: 'CU09',
                name: 'Granma',
            },
            {
                code: 'CU10',
                name: 'Guantánamo',
            },
            {
                code: 'CU12',
                name: 'Holguín',
            },
            {
                code: 'CU04',
                name: 'Isla de la Juventud',
            },
            {
                code: 'CU02',
                name: 'La Habana',
            },
            {
                code: 'CU13',
                name: 'Las Tunas',
            },
            {
                code: 'CU03',
                name: 'Matanzas',
            },
            {
                code: 'CU18',
                name: 'Mayabeque',
            },
            {
                code: 'CU01',
                name: 'Pinar del Río',
            },
            {
                code: 'CU14',
                name: 'Sancti Spíritus',
            },
            {
                code: 'CU15',
                name: 'Santiago de Cuba',
            },
            {
                code: 'CU16',
                name: 'Villa Clara',
            },
        ],
    },
    {
        code: 'C999',
        id: 2387,
        name: 'Curacao',
        states: [
            {
                code: 'CW.CU',
                name: 'Curacao',
            },
        ],
    },
    {
        code: 'CY',
        id: 2230,
        name: 'Cyprus',
        states: [
            {
                code: 'CY01',
                name: 'Famagusta',
            },
            {
                code: 'CY02',
                name: 'Kyrenia',
            },
            {
                code: 'CY03',
                name: 'Larnaca',
            },
            {
                code: 'CY05',
                name: 'Limassol',
            },
            {
                code: 'CY04',
                name: 'Nicosia',
            },
            {
                code: 'CY06',
                name: 'Paphos',
            },
        ],
    },
    {
        code: 'CZ',
        id: 2231,
        name: 'Czech Republic',
        states: [
            {
                code: 'JC',
                name: 'Jihoceský kraj',
            },
            {
                code: 'JM',
                name: 'Jihomoravský kraj',
            },
            {
                code: 'KA',
                name: 'Karlovarský kraj',
            },
            {
                code: 'KR',
                name: 'Královéhradecký kraj',
            },
            {
                code: 'LI',
                name: 'Liberecký kraj',
            },
            {
                code: 'MO',
                name: 'Moravskoslezský kraj',
            },
            {
                code: 'OL',
                name: 'Olomoucký kraj',
            },
            {
                code: 'PA',
                name: 'Pardubický kraj',
            },
            {
                code: 'PL',
                name: 'Plzenský kraj',
            },
            {
                code: 'PR',
                name: 'Praha, hlavní mesto',
            },
            {
                code: 'ST',
                name: 'Stredoceský kraj',
            },
            {
                code: 'VY',
                name: 'Vysocina',
            },
            {
                code: 'ZL',
                name: 'Zlínský kraj',
            },
            {
                code: 'US',
                name: 'Ústecký kraj',
            },
        ],
    },
    {
        code: 'DK',
        id: 2232,
        name: 'Denmark',
        states: [
            {
                code: 'DA01',
                name: 'Arhus County',
            },
            {
                code: 'DA02',
                name: 'Bornholm Regional Municipality',
            },
            {
                code: 'DA17',
                name: 'Capital Region',
            },
            {
                code: 'DA18',
                name: 'Central Jutland Region',
            },
            {
                code: 'DA16',
                name: 'Frederiksberg municipal',
            },
            {
                code: 'DA03',
                name: 'Frederiksborg County',
            },
            {
                code: 'DA04',
                name: 'Fyn County',
            },
            {
                code: 'DA06',
                name: 'Kobenhavn County',
            },
            {
                code: 'DA05',
                name: 'Kobenhavn municipal',
            },
            {
                code: 'DA07',
                name: 'Nordjylland County',
            },
            {
                code: 'DA19',
                name: 'North Jutland Region',
            },
            {
                code: 'DA08',
                name: 'Ribe County',
            },
            {
                code: 'DA09',
                name: 'Ringkobing County',
            },
            {
                code: 'DA10',
                name: 'Roskilde County',
            },
            {
                code: 'DA11',
                name: 'Sonderjylland County',
            },
            {
                code: 'DA21',
                name: 'South Denmark Region',
            },
            {
                code: 'DA12',
                name: 'Storstrom County',
            },
            {
                code: 'DA13',
                name: 'Vejle County',
            },
            {
                code: 'DA14',
                name: 'Vestsjaelland County',
            },
            {
                code: 'DA15',
                name: 'Viborg County',
            },
            {
                code: 'DA20',
                name: 'Zealand Region',
            },
        ],
    },
    {
        code: 'DJ',
        id: 2233,
        name: 'Djibouti',
        states: [],
    },
    {
        code: 'DM',
        id: 2234,
        name: 'Dominica',
        states: [],
    },
    {
        code: 'DO',
        id: 2235,
        name: 'Dominican Republic',
        states: [
            {
                code: 'DR01',
                name: 'Azua',
            },
            {
                code: 'DR02',
                name: 'Bahoruco',
            },
            {
                code: 'DR03',
                name: 'Barahona',
            },
            {
                code: 'DR04',
                name: 'Dajabón',
            },
            {
                code: 'DR34',
                name: 'Distrito Nacional',
            },
            {
                code: 'DR06',
                name: 'Duarte',
            },
            {
                code: 'DR28',
                name: 'El Seibo',
            },
            {
                code: 'DR11',
                name: 'Elías Piña',
            },
            {
                code: 'DR08',
                name: 'Espaillat',
            },
            {
                code: 'DR29',
                name: 'Hato Mayor',
            },
            {
                code: 'DR19',
                name: 'Hermanas Mirabal',
            },
            {
                code: 'DR09',
                name: 'Independencia',
            },
            {
                code: 'DR10',
                name: 'La Altagracia',
            },
            {
                code: 'DR12',
                name: 'La Romana',
            },
            {
                code: 'DR30',
                name: 'La Vega',
            },
            {
                code: 'DR14',
                name: 'María Trinidad Sánchez',
            },
            {
                code: 'DR31',
                name: 'Monseñor Nouel',
            },
            {
                code: 'DR15',
                name: 'Monte Cristi',
            },
            {
                code: 'DR32',
                name: 'Monte Plata',
            },
            {
                code: 'DR16',
                name: 'Pedernales',
            },
            {
                code: 'DR35',
                name: 'Peravia',
            },
            {
                code: 'DR18',
                name: 'Puerto Plata',
            },
            {
                code: 'DR20',
                name: 'Samaná',
            },
            {
                code: 'DR33',
                name: 'San Cristóbal',
            },
            {
                code: 'DR36',
                name: 'San José de Ocoa',
            },
            {
                code: 'DR23',
                name: 'San Juan',
            },
            {
                code: 'DR24',
                name: 'San Pedro de Macorís',
            },
            {
                code: 'DR21',
                name: 'Sánchez Ramírez',
            },
            {
                code: 'DR25',
                name: 'Santiago',
            },
            {
                code: 'DR26',
                name: 'Santiago Rodríguez',
            },
            {
                code: 'DR37',
                name: 'Santo Domingo',
            },
            {
                code: 'DR27',
                name: 'Valverde',
            },
        ],
    },
    {
        code: 'EC',
        id: 2236,
        name: 'Ecuador',
        states: [
            {
                code: 'EC02',
                name: 'Azuay',
            },
            {
                code: 'EC02',
                name: 'Azuay',
            },
            {
                code: 'EC03',
                name: 'Bolívar',
            },
            {
                code: 'EC04',
                name: 'Cañar',
            },
            {
                code: 'EC05',
                name: 'Carchi',
            },
            {
                code: 'EC06',
                name: 'Chimborazo',
            },
            {
                code: 'EC07',
                name: 'Cotopaxi',
            },
            {
                code: 'EC08',
                name: 'El Oro',
            },
            {
                code: 'EC09',
                name: 'Esmeraldas',
            },
            {
                code: 'EC01',
                name: 'Galápagos',
            },
            {
                code: 'EC10',
                name: 'Guayas',
            },
            {
                code: 'EC11',
                name: 'Imbabura',
            },
            {
                code: 'EC12',
                name: 'Loja',
            },
            {
                code: 'EC13',
                name: 'Los Ríos',
            },
            {
                code: 'EC14',
                name: 'Manabí',
            },
            {
                code: 'EC15',
                name: 'Morona-Santiago',
            },
            {
                code: 'EC23',
                name: 'Napo',
            },
            {
                code: 'EC24',
                name: 'Orellana',
            },
            {
                code: 'EC17',
                name: 'Pastaza',
            },
            {
                code: 'EC18',
                name: 'Pichincha',
            },
            {
                code: 'EC25',
                name: 'Santa Elena',
            },
            {
                code: 'EC26',
                name: 'Santo Domingo de los Tsáchilas',
            },
            {
                code: 'EC22',
                name: 'Sucumbíos',
            },
            {
                code: 'EC19',
                name: 'Tungurahua',
            },
            {
                code: 'EC20',
                name: 'Zamora-Chinchipe',
            },
        ],
    },
    {
        code: 'EG',
        id: 2237,
        name: 'Egypt',
        states: [
            {
                code: 'EG01',
                name: 'Ad Daqahliyah',
            },
            {
                code: 'EG02',
                name: 'Al Bahr al Ahmar',
            },
            {
                code: 'EG03',
                name: 'Al Buhayrah',
            },
            {
                code: 'EG04',
                name: 'Al Fayyum',
            },
            {
                code: 'EG05',
                name: 'Al Gharbiyah',
            },
            {
                code: 'EG06',
                name: 'Al Iskandariyah',
            },
            {
                code: 'EG07',
                name: 'Al Isma`iliyah',
            },
            {
                code: 'EG08',
                name: 'Al Jizah',
            },
            {
                code: 'EG09',
                name: 'Al Minufiyah',
            },
            {
                code: 'EG10',
                name: 'Al Minya',
            },
            {
                code: 'EG11',
                name: 'Al Qahirah',
            },
            {
                code: 'EG12',
                name: 'Al Qalyubiyah',
            },
            {
                code: 'EG28',
                name: 'Al Uqsur',
            },
            {
                code: 'EG13',
                name: 'Al Wadi al Jadid',
            },
            {
                code: 'EG15',
                name: 'As Suways',
            },
            {
                code: 'EG14',
                name: 'Ash Sharqiyah',
            },
            {
                code: 'EG16',
                name: 'Aswan',
            },
            {
                code: 'EG17',
                name: 'Asyut',
            },
            {
                code: 'EG18',
                name: 'Bani Suwayf',
            },
            {
                code: 'EG19',
                name: 'Bur Sa`id',
            },
            {
                code: 'EG20',
                name: 'Dumyat',
            },
            {
                code: 'EG26',
                name: 'Janub Sina',
            },
            {
                code: 'EG21',
                name: 'Kafr ash Shaykh',
            },
            {
                code: 'EG22',
                name: 'Matruh',
            },
            {
                code: 'EG23',
                name: 'Qina',
            },
            {
                code: 'EG27',
                name: 'Shamal Sina',
            },
            {
                code: 'EG24',
                name: 'Suhaj',
            },
        ],
    },
    {
        code: 'SV',
        id: 2238,
        name: 'El Salvador',
        states: [
            {
                code: 'ES01',
                name: 'Ahuachapán',
            },
            {
                code: 'ES02',
                name: 'Cabañas',
            },
            {
                code: 'ES03',
                name: 'Chalatenango',
            },
            {
                code: 'ES04',
                name: 'Cuscatlán',
            },
            {
                code: 'ES05',
                name: 'La Libertad',
            },
            {
                code: 'ES06',
                name: 'La Paz',
            },
            {
                code: 'ES07',
                name: 'La Unión',
            },
            {
                code: 'ES08',
                name: 'Morazán',
            },
            {
                code: 'ES09',
                name: 'San Miguel',
            },
            {
                code: 'ES10',
                name: 'San Salvador',
            },
            {
                code: 'ES12',
                name: 'San Vicente',
            },
            {
                code: 'ES11',
                name: 'Santa Ana',
            },
            {
                code: 'ES13',
                name: 'Sonsonate',
            },
            {
                code: 'ES14',
                name: 'Usulután',
            },
        ],
    },
    {
        code: 'GQ',
        id: 2239,
        name: 'Equatorial Guinea',
        states: [],
    },
    {
        code: 'ER',
        id: 2240,
        name: 'Eritrea',
        states: [],
    },
    {
        code: 'EE',
        id: 2241,
        name: 'Estonia',
        states: [
            {
                code: 'EN01',
                name: 'Harju',
            },
            {
                code: 'EN02',
                name: 'Hiiu',
            },
            {
                code: 'EN03',
                name: 'Ida-Viru',
            },
            {
                code: 'EN04',
                name: 'Järva',
            },
            {
                code: 'EN05',
                name: 'Jõgeva',
            },
            {
                code: 'EN07',
                name: 'Lääne',
            },
            {
                code: 'EN08',
                name: 'Lääne-Viru',
            },
            {
                code: 'EN11',
                name: 'Pärnu',
            },
            {
                code: 'EN12',
                name: 'Põlva',
            },
            {
                code: 'EN13',
                name: 'Rapla',
            },
            {
                code: 'EN14',
                name: 'Saare',
            },
            {
                code: 'EN18',
                name: 'Tartu',
            },
            {
                code: 'EN19',
                name: 'Valga',
            },
            {
                code: 'EN20',
                name: 'Viljandi',
            },
            {
                code: 'EN21',
                name: 'Võru',
            },
        ],
    },
    {
        code: 'ET',
        id: 2242,
        name: 'Ethiopia',
        states: [
            {
                code: 'ET44',
                name: 'Addis Ababa',
            },
            {
                code: 'ET45',
                name: 'Afar',
            },
            {
                code: 'ET46',
                name: 'Amhara',
            },
            {
                code: 'ET47',
                name: 'Benshangul-Gumaz',
            },
            {
                code: 'ET48',
                name: 'Dire Dawa',
            },
            {
                code: 'ET49',
                name: 'Gambela Peoples',
            },
            {
                code: 'ET50',
                name: 'Harari People',
            },
            {
                code: 'ET51',
                name: 'Oromia',
            },
            {
                code: 'ET52',
                name: 'Somali',
            },
            {
                code: 'ET54',
                name: 'Southern Nations, Nationalities and Peoples',
            },
            {
                code: 'ET53',
                name: 'Tigray',
            },
        ],
    },
    {
        code: 'FK',
        id: 2415,
        name: 'Falkland Islands (Malvinas)',
        states: [],
    },
    {
        code: 'FI99',
        id: 2388,
        name: 'Faroe Islands',
        states: [],
    },
    {
        code: 'FJ',
        id: 2243,
        name: 'Fiji',
        states: [],
    },
    {
        code: 'FI',
        id: 2244,
        name: 'Finland',
        states: [
            {
                code: 'FI-AL',
                name: 'Ahvenanmaan lääni',
            },
            {
                code: 'AX',
                name: 'Ahvenanmaa',
            },
            {
                code: 'FI.SK',
                name: 'Etelä-Karjala',
            },
            {
                code: 'FI.SO',
                name: 'Etelä-Pohjanmaa',
            },
            {
                code: 'FI.SS',
                name: 'Etelä-Savo',
            },
            {
                code: 'FI-ES',
                name: 'Etelä-Suomen lääni',
            },
            {
                code: 'FI-IS',
                name: 'Itä-Suomen lääni',
            },
            {
                code: 'FI.KA',
                name: 'Kainuu',
            },
            {
                code: 'FI.KH',
                name: 'Kanta-Häme',
            },
            {
                code: 'FI.CO',
                name: 'Keski-Pohjanmaa',
            },
            {
                code: 'FI.CF',
                name: 'Keski-Suomi',
            },
            {
                code: 'FI.KY',
                name: 'Kymenlaakso',
            },
            {
                code: 'FI-LS',
                name: 'Länsi-Suomen lääni',
            },
            {
                code: 'FI-LL',
                name: 'Lapin lääni',
            },
            {
                code: 'FI.LA',
                name: 'Lappi',
            },
            {
                code: 'FI-OL',
                name: 'Oulun lääni',
            },
            {
                code: 'FI.PH',
                name: 'Päijät-Häme',
            },
            {
                code: 'FI.TR',
                name: 'Pirkanmaa',
            },
            {
                code: 'FI.OS',
                name: 'Pohjanmaa',
            },
            {
                code: 'FI.NK',
                name: 'Pohjois-Karjala',
            },
            {
                code: 'FI.NO',
                name: 'Pohjois-Pohjanmaa',
            },
            {
                code: 'FI.NS',
                name: 'Pohjois-Savo',
            },
            {
                code: 'FI.SA',
                name: 'Satakunta',
            },
            {
                code: 'FI.US',
                name: 'Uusimaa',
            },
            {
                code: 'FI.SF',
                name: 'Varsinais-Suomi',
            },
        ],
    },
    {
        code: 'FR',
        id: 2245,
        name: 'France',
        states: [
            {
                code: 'FRC2',
                name: 'Ain',
            },
            {
                code: 'FRC3',
                name: 'Aisne',
            },
            {
                code: 'FRC4',
                name: 'Allier',
            },
            {
                code: 'FRC6',
                name: 'Alpes-Maritimes',
            },
            {
                code: 'FRC5',
                name: 'Alpes-de-Haute-Provence',
            },
            {
                code: 'FRC1',
                name: 'Alsace',
            },
            {
                code: 'FR97',
                name: 'Aquitaine',
            },
            {
                code: 'FRC7',
                name: 'Ardèche',
            },
            {
                code: 'FRC8',
                name: 'Ardennes',
            },
            {
                code: 'FRC9',
                name: 'Ariège',
            },
            {
                code: 'FRD1',
                name: 'Aube',
            },
            {
                code: 'FRD2',
                name: 'Aude',
            },
            {
                code: 'FR.AR',
                name: 'Auvergne-Rhône-Alpes',
            },
            {
                code: 'FR98',
                name: 'Auvergne',
            },
            {
                code: 'FRD3',
                name: 'Aveyron',
            },
            {
                code: 'FRD4',
                name: 'Bas-Rhin',
            },
            {
                code: 'FR99',
                name: 'Basse-Normandie',
            },
            {
                code: 'FRD5',
                name: 'Bouches-du-Rhône',
            },
            {
                code: 'FR.BF',
                name: 'Bourgogne-Franche-Comté',
            },
            {
                code: 'FRA1',
                name: 'Bourgogne',
            },
            {
                code: 'FRA2',
                name: 'Bretagne',
            },
            {
                code: 'FRD8',
                name: 'Calvados',
            },
            {
                code: 'FRD9',
                name: 'Cantal',
            },
            {
                code: 'FRA3',
                name: 'Centre',
            },
            {
                code: 'FR.CN',
                name: 'Centre-Val de Loire',
            },
            {
                code: 'FRA4',
                name: 'Champagne-Ardenne',
            },
            {
                code: 'FRE1',
                name: 'Charente-Maritime',
            },
            {
                code: 'FRE2',
                name: 'Charente',
            },
            {
                code: 'FRE3',
                name: 'Cher',
            },
            {
                code: 'FRE4',
                name: 'Corrèze',
            },
            {
                code: 'FRE5',
                name: 'Corse-du-Sud',
            },
            {
                code: 'FR.CE',
                name: 'Corse',
            },
            {
                code: 'FRD6',
                name: "Côte-d'Or",
            },
            {
                code: 'FRD7',
                name: "Côtes-d'Armor",
            },
            {
                code: 'FRE6',
                name: 'Creuse',
            },
            {
                code: 'FRE7',
                name: 'Deux-Sèvres',
            },
            {
                code: 'FRE8',
                name: 'Dordogne',
            },
            {
                code: 'FRE9',
                name: 'Doubs',
            },
            {
                code: 'FRF1',
                name: 'Drôme',
            },
            {
                code: 'FRF2',
                name: 'Essonne',
            },
            {
                code: 'FRF3',
                name: 'Eure-et-Loir',
            },
            {
                code: 'FRF4',
                name: 'Eure',
            },
            {
                code: 'FRF5',
                name: 'Finistère',
            },
            {
                code: 'FRA6',
                name: 'Franche-Comte',
            },
            {
                code: 'FRF6',
                name: 'Gard',
            },
            {
                code: 'FRF7',
                name: 'Gers',
            },
            {
                code: 'FRF8',
                name: 'Gironde',
            },
            {
                code: 'FR.AO',
                name: 'Grand Est',
            },
            {
                code: 'FRG1',
                name: 'Haut-Rhin',
            },
            {
                code: 'FRG2',
                name: 'Haute-Corse',
            },
            {
                code: 'FRG3',
                name: 'Haute-Garonne',
            },
            {
                code: 'FRG4',
                name: 'Haute-Loire',
            },
            {
                code: 'FRG5',
                name: 'Haute-Marne',
            },
            {
                code: 'FRA7',
                name: 'Haute-Normandie',
            },
            {
                code: 'FRG6',
                name: 'Haute-Saône',
            },
            {
                code: 'FRG7',
                name: 'Haute-Savoie',
            },
            {
                code: 'FRG8',
                name: 'Haute-Vienne',
            },
            {
                code: 'FRG9',
                name: 'Hautes-Alpes',
            },
            {
                code: 'FRH1',
                name: 'Hautes-Pyrénées',
            },
            {
                code: 'FR.NC',
                name: 'Hauts-de-France',
            },
            {
                code: 'FRH2',
                name: 'Hauts-de-Seine',
            },
            {
                code: 'FRF9',
                name: 'Hérault',
            },
            {
                code: 'FRA8',
                name: 'Ile-de-France',
            },
            {
                code: 'FRH3',
                name: 'Ille-et-Vilaine',
            },
            {
                code: 'FRH5',
                name: 'Indre',
            },
            {
                code: 'FRH4',
                name: 'Indre-et-Loire',
            },
            {
                code: 'FRH6',
                name: 'Isère',
            },
            {
                code: 'FRH7',
                name: 'Jura',
            },
            {
                code: 'FRH8',
                name: 'Landes',
            },
            {
                code: 'FRA9',
                name: 'Languedoc-Roussillon',
            },
            {
                code: 'FRB1',
                name: 'Limousin',
            },
            {
                code: 'FRI3',
                name: 'Loir-et-Cher',
            },
            {
                code: 'FRI2',
                name: 'Loiret',
            },
            {
                code: 'FRI1',
                name: 'Loire',
            },
            {
                code: 'FRH9',
                name: 'Loire-Atlantique',
            },
            {
                code: 'FRB2',
                name: 'Lorraine',
            },
            {
                code: 'FRI4',
                name: 'Lot-et-Garonne',
            },
            {
                code: 'FRI5',
                name: 'Lot',
            },
            {
                code: 'FRI6',
                name: 'Lozère',
            },
            {
                code: 'FRI7',
                name: 'Maine-et-Loire',
            },
            {
                code: 'FRI8',
                name: 'Manche',
            },
            {
                code: 'FRI9',
                name: 'Marne',
            },
            {
                code: 'FRJ1',
                name: 'Mayenne',
            },
            {
                code: 'FRJ2',
                name: 'Meurthe-et-Moselle',
            },
            {
                code: 'FRJ3',
                name: 'Meuse',
            },
            {
                code: 'FRB3',
                name: 'Midi-Pyrenees',
            },
            {
                code: 'FRJ4',
                name: 'Morbihan',
            },
            {
                code: 'FRJ5',
                name: 'Moselle',
            },
            {
                code: 'FRJ6',
                name: 'Nièvre',
            },
            {
                code: 'FRJ7',
                name: 'Nord France',
            },
            {
                code: 'FR67',
                name: 'Nord',
            },
            {
                code: 'FR.ND',
                name: 'Normandie',
            },
            {
                code: 'FR.AC',
                name: 'Nouvelle-Aquitaine',
            },
            {
                code: 'FR.LP',
                name: 'Occitanie',
            },
            {
                code: 'FRJ8',
                name: 'Oise',
            },
            {
                code: 'FRJ9',
                name: 'Orne',
            },
            {
                code: 'FRK1',
                name: 'Paris',
            },
            {
                code: 'FRB4',
                name: 'Pas-de-Calais',
            },
            {
                code: 'FRB5',
                name: 'Pays de la Loire',
            },
            {
                code: 'FRB6',
                name: 'Picardie',
            },
            {
                code: 'FRB7',
                name: 'Poitou-Charentes',
            },
            {
                code: 'FRB8',
                name: "Provence-Alpes-Cote d'Azur",
            },
            {
                code: 'FRK2',
                name: 'Puy-de-Dôme',
            },
            {
                code: 'FRK3',
                name: 'Pyrénées-Atlantiques',
            },
            {
                code: 'FRK4',
                name: 'Pyrénées-Orientales',
            },
            {
                code: 'FRB9',
                name: 'Rhône',
            },
            {
                code: 'FRK5',
                name: 'Saône-et-Loire',
            },
            {
                code: 'FRK6',
                name: 'Sarthe',
            },
            {
                code: 'FRK7',
                name: 'Savoie',
            },
            {
                code: 'FRK9',
                name: 'Seine-Maritime',
            },
            {
                code: 'FRL1',
                name: 'Seine-Saint-Denis',
            },
            {
                code: 'FRK8',
                name: 'Seine-et-Marne',
            },
            {
                code: 'FRL2',
                name: 'Somme',
            },
            {
                code: 'FRL3',
                name: 'Tarn-et-Garonne',
            },
            {
                code: 'FRL4',
                name: 'Tarn',
            },
            {
                code: 'FRL5',
                name: 'Territoire de Belfor',
            },
            {
                code: 'FR14',
                name: 'Territoire de Belfort',
            },
            {
                code: 'FRL6',
                name: "Val-d'Oise",
            },
            {
                code: 'FRL7',
                name: 'Val-de-Marne',
            },
            {
                code: 'FRL8',
                name: 'Var',
            },
            {
                code: 'FRL9',
                name: 'Vaucluse',
            },
            {
                code: 'FRM1',
                name: 'Vendée',
            },
            {
                code: 'FRM2',
                name: 'Vienne',
            },
            {
                code: 'FR94',
                name: 'Ville de Paris',
            },
            {
                code: 'FRM3',
                name: 'Vosges',
            },
            {
                code: 'FRM4',
                name: 'Yonne',
            },
            {
                code: 'FRM5',
                name: 'Yvelines',
            },
            {
                code: 'FR.IF',
                name: 'Île-de-France',
            },
        ],
    },
    {
        code: 'GF',
        id: 2416,
        name: 'French Guiana',
        states: [],
    },
    {
        code: 'PF',
        id: 2417,
        name: 'French Polynesia',
        states: [],
    },
    {
        code: 'TF',
        id: 2418,
        name: 'French Southern Territories',
        states: [],
    },
    {
        code: 'GA',
        id: 2246,
        name: 'Gabon',
        states: [
            {
                code: 'GB01',
                name: 'Estuaire',
            },
            {
                code: 'GB02',
                name: 'Haut-Ogooué',
            },
            {
                code: 'GB03',
                name: 'Moyen-Ogooué',
            },
            {
                code: 'GB04',
                name: 'Ngounié',
            },
            {
                code: 'GB05',
                name: 'Nyanga',
            },
            {
                code: 'GB06',
                name: 'Ogooué-Ivindo',
            },
            {
                code: 'GB07',
                name: 'Ogooué-Lolo',
            },
            {
                code: 'GB08',
                name: 'Ogooué-Maritime',
            },
            {
                code: 'GB09',
                name: 'Woleu-Ntem',
            },
        ],
    },
    {
        code: 'GM',
        id: 2389,
        name: 'Gambia',
        states: [
            {
                code: 'GA01',
                name: 'Banjul',
            },
            {
                code: 'GA03',
                name: 'Central River',
            },
            {
                code: 'GA02',
                name: 'Lower River',
            },
            {
                code: 'GA07',
                name: 'North Bank',
            },
            {
                code: 'GA04',
                name: 'Upper River',
            },
            {
                code: 'GA05',
                name: 'West Coast',
            },
        ],
    },
    {
        code: 'GE',
        id: 2248,
        name: 'Georgia',
        states: [
            {
                code: 'GG02',
                name: 'Abkhazia',
            },
            {
                code: 'GG04',
                name: 'Ajaria',
            },
            {
                code: 'GG65',
                name: 'Guria',
            },
            {
                code: 'GG66',
                name: 'Imereti',
            },
            {
                code: 'GG67',
                name: 'Kakheti',
            },
            {
                code: 'GG68',
                name: 'Kvemo Kartli',
            },
            {
                code: 'GG69',
                name: 'Mtskheta-Mtianeti',
            },
            {
                code: 'GG70',
                name: 'Racha-Lochkhumi-Kvemo Svaneti',
            },
            {
                code: 'GG71',
                name: 'Samegrelo-Zemo Svaneti',
            },
            {
                code: 'GG72',
                name: 'Samtskhe-Javakheti',
            },
            {
                code: 'GG73',
                name: 'Shida Kartli',
            },
            {
                code: 'GG51',
                name: 'Tbilisi',
            },
        ],
    },
    {
        code: 'DE',
        id: 2249,
        name: 'Germany',
        states: [
            {
                code: 'BW',
                name: 'Baden-Württemberg',
            },
            {
                code: 'BY',
                name: 'Bayern',
            },
            {
                code: 'BE',
                name: 'Berlin',
            },
            {
                code: 'BB',
                name: 'Brandenburg',
            },
            {
                code: 'HB',
                name: 'Bremen',
            },
            {
                code: 'HH',
                name: 'Hamburg',
            },
            {
                code: 'HE',
                name: 'Hessen',
            },
            {
                code: 'MV',
                name: 'Mecklenburg-Vorpommern',
            },
            {
                code: 'NI',
                name: 'Niedersachsen',
            },
            {
                code: 'NW',
                name: 'Nordrhein-Westfalen',
            },
            {
                code: 'RP',
                name: 'Rheinland-Pfalz',
            },
            {
                code: 'SL',
                name: 'Saarland',
            },
            {
                code: 'SN',
                name: 'Sachsen',
            },
            {
                code: 'ST',
                name: 'Sachsen-Anhalt',
            },
            {
                code: 'SH',
                name: 'Schleswig-Holstein',
            },
            {
                code: 'TH',
                name: 'Thüringen',
            },
        ],
    },
    {
        code: 'GH',
        id: 2250,
        name: 'Ghana',
        states: [
            {
                code: 'GH02',
                name: 'Ashanti',
            },
            {
                code: 'GH03',
                name: 'Brong-Ahafo',
            },
            {
                code: 'GH04',
                name: 'Central',
            },
            {
                code: 'GH05',
                name: 'Eastern',
            },
            {
                code: 'GH01',
                name: 'Greater Accra',
            },
            {
                code: 'GH06',
                name: 'Northern',
            },
            {
                code: 'GH10',
                name: 'Upper East',
            },
            {
                code: 'GH11',
                name: 'Upper West',
            },
            {
                code: 'GH08',
                name: 'Volta',
            },
            {
                code: 'GH09',
                name: 'Western',
            },
        ],
    },
    {
        code: 'G999',
        id: 2390,
        name: 'Gibraltar',
        states: [
            {
                code: 'GI.GI',
                name: 'Gibraltar',
            },
        ],
    },
    {
        code: 'GR',
        id: 2251,
        name: 'Greece',
        states: [
            {
                code: '13',
                name: 'Achaïa',
            },
            {
                code: '69',
                name: 'Agio Oros',
            },
            {
                code: '01',
                name: 'Aitolia kai Akarnania',
            },
            {
                code: '11',
                name: 'Argolida',
            },
            {
                code: '12',
                name: 'Arkadia',
            },
            {
                code: '31',
                name: 'Arta',
            },
            {
                code: 'A1',
                name: 'Attiki',
            },
            {
                code: '64',
                name: 'Chalkidiki',
            },
            {
                code: '94',
                name: 'Chania',
            },
            {
                code: '85',
                name: 'Chios',
            },
            {
                code: '81',
                name: 'Dodekanisos',
            },
            {
                code: '52',
                name: 'Drama',
            },
            {
                code: '71',
                name: 'Evros',
            },
            {
                code: '05',
                name: 'Evrytania',
            },
            {
                code: '04',
                name: 'Evvoia',
            },
            {
                code: '63',
                name: 'Florina',
            },
            {
                code: '07',
                name: 'Fokida',
            },
            {
                code: '06',
                name: 'Fthiotida',
            },
            {
                code: '51',
                name: 'Grevena',
            },
            {
                code: '14',
                name: 'Ileia',
            },
            {
                code: '53',
                name: 'Imathia',
            },
            {
                code: '33',
                name: 'Ioannina',
            },
            {
                code: '91',
                name: 'Irakleio',
            },
            {
                code: '41',
                name: 'Karditsa',
            },
            {
                code: '56',
                name: 'Kastoria',
            },
            {
                code: '55',
                name: 'Kavala',
            },
            {
                code: '23',
                name: 'Kefallonia',
            },
            {
                code: '22',
                name: 'Kerkyra',
            },
            {
                code: '57',
                name: 'Kilkis',
            },
            {
                code: '15',
                name: 'Korinthia',
            },
            {
                code: '58',
                name: 'Kozani',
            },
            {
                code: '82',
                name: 'Kyklades',
            },
            {
                code: '16',
                name: 'Lakonia',
            },
            {
                code: '42',
                name: 'Larisa',
            },
            {
                code: '92',
                name: 'Lasithi',
            },
            {
                code: '24',
                name: 'Lefkada',
            },
            {
                code: '83',
                name: 'Lesvos',
            },
            {
                code: '43',
                name: 'Magnisia',
            },
            {
                code: '17',
                name: 'Messinia',
            },
            {
                code: '59',
                name: 'Pella',
            },
            {
                code: '61',
                name: 'Pieria',
            },
            {
                code: '34',
                name: 'Preveza',
            },
            {
                code: '93',
                name: 'Rethymno',
            },
            {
                code: '73',
                name: 'Rodopi',
            },
            {
                code: '84',
                name: 'Samos',
            },
            {
                code: '62',
                name: 'Serres',
            },
            {
                code: '32',
                name: 'Thesprotia',
            },
            {
                code: '54',
                name: 'Thessaloniki',
            },
            {
                code: '44',
                name: 'Trikala',
            },
            {
                code: '03',
                name: 'Voiotia',
            },
            {
                code: '72',
                name: 'Xanthi',
            },
            {
                code: '21',
                name: 'Zakynthos',
            },
        ],
    },
    {
        code: 'GL',
        id: 2252,
        name: 'Greenland',
        states: [],
    },
    {
        code: 'GD',
        id: 2253,
        name: 'Grenada',
        states: [],
    },
    {
        code: 'GP',
        id: 2419,
        name: 'Guadeloupe',
        states: [],
    },
    {
        code: 'GU',
        id: 2376,
        name: 'Guam',
        states: [],
    },
    {
        code: 'GT',
        id: 2371,
        name: 'Guatemala',
        states: [
            {
                code: 'GT01',
                name: 'Alta Verapaz',
            },
            {
                code: 'GT02',
                name: 'Baja Verapaz',
            },
            {
                code: 'GT03',
                name: 'Chimaltenango',
            },
            {
                code: 'GT04',
                name: 'Chiquimula',
            },
            {
                code: 'GT05',
                name: 'El Progreso',
            },
            {
                code: 'GT06',
                name: 'Escuintla',
            },
            {
                code: 'GT07',
                name: 'Guatemala',
            },
            {
                code: 'GT08',
                name: 'Huehuetenango',
            },
            {
                code: 'GT09',
                name: 'Izabal',
            },
            {
                code: 'GT10',
                name: 'Jalapa',
            },
            {
                code: 'GT11',
                name: 'Jutiapa',
            },
            {
                code: 'GT12',
                name: 'Petén',
            },
            {
                code: 'GT13',
                name: 'Quetzaltenango',
            },
            {
                code: 'GT14',
                name: 'Quiché',
            },
            {
                code: 'GT15',
                name: 'Retalhuleu',
            },
            {
                code: 'GT16',
                name: 'Sacatepéquez',
            },
            {
                code: 'GT17',
                name: 'San Marcos',
            },
            {
                code: 'GT18',
                name: 'Santa Rosa',
            },
            {
                code: 'GT19',
                name: 'Sololá',
            },
            {
                code: 'GT20',
                name: 'Suchitepéquez',
            },
            {
                code: 'GT21',
                name: 'Totonicapán',
            },
            {
                code: 'GT22',
                name: 'Zacapa',
            },
        ],
    },
    {
        code: 'GG',
        id: 2420,
        name: 'Guernsey',
        states: [],
    },
    {
        code: 'GN',
        id: 2255,
        name: 'Guinea',
        states: [
            {
                code: 'GV01',
                name: 'Beyla',
            },
            {
                code: 'GV02',
                name: 'Boffa',
            },
            {
                code: 'GV03',
                name: 'Boké',
            },
            {
                code: 'GV04',
                name: 'Conakry',
            },
            {
                code: 'GV30',
                name: 'Coyah',
            },
            {
                code: 'GV05',
                name: 'Dabola',
            },
            {
                code: 'GV06',
                name: 'Dalaba',
            },
            {
                code: 'GV07',
                name: 'Dinguiraye',
            },
            {
                code: 'GV31',
                name: 'Dubréka',
            },
            {
                code: 'GV09',
                name: 'Faranah',
            },
            {
                code: 'GV10',
                name: 'Forécariah',
            },
            {
                code: 'GV11',
                name: 'Fria',
            },
            {
                code: 'GV12',
                name: 'Gaoual',
            },
            {
                code: 'GV13',
                name: 'Guéckédou',
            },
            {
                code: 'GV32',
                name: 'Kankan',
            },
            {
                code: 'GV15',
                name: 'Kérouané',
            },
            {
                code: 'GV16',
                name: 'Kindia',
            },
            {
                code: 'GV17',
                name: 'Kissidougou',
            },
            {
                code: 'GV33',
                name: 'Koubia',
            },
            {
                code: 'GV18',
                name: 'Koundara',
            },
            {
                code: 'GV19',
                name: 'Kouroussa',
            },
            {
                code: 'GV34',
                name: 'Labé',
            },
            {
                code: 'GV35',
                name: 'Lélouma',
            },
            {
                code: 'GV36',
                name: 'Lola',
            },
            {
                code: 'GV21',
                name: 'Macenta',
            },
            {
                code: 'GV22',
                name: 'Mali',
            },
            {
                code: 'GV23',
                name: 'Mamou',
            },
            {
                code: 'GV37',
                name: 'Mandiana',
            },
            {
                code: 'GV38',
                name: 'Nzérékoré',
            },
            {
                code: 'GV25',
                name: 'Pita',
            },
            {
                code: 'GV39',
                name: 'Siguiri',
            },
            {
                code: 'GV27',
                name: 'Télimélé',
            },
            {
                code: 'GV28',
                name: 'Tougué',
            },
            {
                code: 'GV29',
                name: 'Yomou',
            },
        ],
    },
    {
        code: 'GW',
        id: 2256,
        name: 'Guinea-Bissau',
        states: [
            {
                code: 'PU01',
                name: 'Bafatá',
            },
            {
                code: 'PU12',
                name: 'Biombo',
            },
            {
                code: 'PU11',
                name: 'Bissau',
            },
            {
                code: 'PU05',
                name: 'Bolama',
            },
            {
                code: 'PU06',
                name: 'Cacheu',
            },
            {
                code: 'PU10',
                name: 'Gabú',
            },
            {
                code: 'PU04',
                name: 'Oio',
            },
            {
                code: 'PU02',
                name: 'Quinara',
            },
            {
                code: 'PU07',
                name: 'Tombali',
            },
        ],
    },
    {
        code: 'GY',
        id: 2257,
        name: 'Guyana',
        states: [
            {
                code: 'GY10',
                name: 'Barima-Waini',
            },
            {
                code: 'GY11',
                name: 'Cuyuni-Mazaruni',
            },
            {
                code: 'GY12',
                name: 'Demerara-Mahaica',
            },
            {
                code: 'GY13',
                name: 'East Berbice-Corentyne',
            },
            {
                code: 'GY14',
                name: 'Essequibo Islands-West Demerara',
            },
            {
                code: 'GY15',
                name: 'Mahaica-Berbice',
            },
            {
                code: 'GY16',
                name: 'Pomeroon-Supenaam',
            },
            {
                code: 'GY17',
                name: 'Potaro-Siparuni',
            },
            {
                code: 'GY18',
                name: 'Upper Demerara-Berbice',
            },
            {
                code: 'GY19',
                name: 'Upper Takutu-Upper Essequibo',
            },
        ],
    },
    {
        code: 'HT',
        id: 2258,
        name: 'Haiti',
        states: [
            {
                code: 'HA07',
                name: 'Centre',
            },
            {
                code: 'HA14',
                name: "Grand' Anse",
            },
            {
                code: 'HA06',
                name: "L'Artibonite",
            },
            {
                code: 'HA15',
                name: 'Nippes',
            },
            {
                code: 'HA10',
                name: 'Nord-Est',
            },
            {
                code: 'HA03',
                name: 'Nord-Ouest',
            },
            {
                code: 'HA09',
                name: 'Nord',
            },
            {
                code: 'HA11',
                name: 'Ouest',
            },
            {
                code: 'HA13',
                name: 'Sud-Est',
            },
            {
                code: 'HA12',
                name: 'Sud',
            },
        ],
    },
    {
        code: 'HM',
        id: 2421,
        name: 'Heard and McDonald Islands',
        states: [],
    },
    {
        code: 'VA',
        id: 2362,
        name: 'Holy See (Vatican City State)',
        states: [],
    },
    {
        code: 'HN',
        id: 2259,
        name: 'Honduras',
        states: [
            {
                code: 'HO01',
                name: 'Atlántida',
            },
            {
                code: 'HO02',
                name: 'Choluteca',
            },
            {
                code: 'HO03',
                name: 'Colón',
            },
            {
                code: 'HO04',
                name: 'Comayagua',
            },
            {
                code: 'HO05',
                name: 'Copán',
            },
            {
                code: 'HO06',
                name: 'Cortés',
            },
            {
                code: 'HO07',
                name: 'El Paraíso',
            },
            {
                code: 'HO08',
                name: 'Francisco Morazán',
            },
            {
                code: 'HO09',
                name: 'Gracias a Dios',
            },
            {
                code: 'HO10',
                name: 'Intibucá',
            },
            {
                code: 'HO11',
                name: 'Islas de la Bahía',
            },
            {
                code: 'HO12',
                name: 'La Paz',
            },
            {
                code: 'HO13',
                name: 'Lempira',
            },
            {
                code: 'HO14',
                name: 'Ocotepeque',
            },
            {
                code: 'HO15',
                name: 'Olancho',
            },
            {
                code: 'HO16',
                name: 'Santa Bárbara',
            },
            {
                code: 'HO17',
                name: 'Valle',
            },
            {
                code: 'HO18',
                name: 'Yoro',
            },
        ],
    },
    {
        code: 'HK',
        id: 2377,
        name: 'Hong Kong',
        states: [
            {
                code: 'HK001',
                name: 'Hong Kong Island',
            },
            {
                code: 'HK002',
                name: 'Kowloon',
            },
            {
                code: 'HK003',
                name: 'New Territories',
            },
        ],
    },
    {
        code: 'HU',
        id: 2260,
        name: 'Hungary',
        states: [
            {
                code: 'BK',
                name: 'Bács-Kiskun',
            },
            {
                code: 'BA',
                name: 'Baranya',
            },
            {
                code: 'BE',
                name: 'Békés',
            },
            {
                code: 'BC',
                name: 'Békéscsaba',
            },
            {
                code: 'BZ',
                name: 'Borsod-Abaúj-Zemplén',
            },
            {
                code: 'BU',
                name: 'Budapest',
            },
            {
                code: 'CS',
                name: 'Csongrád',
            },
            {
                code: 'DE',
                name: 'Debrecen',
            },
            {
                code: 'DU',
                name: 'Dunaújváros',
            },
            {
                code: 'EG',
                name: 'Eger',
            },
            {
                code: 'ER',
                name: 'Erd',
            },
            {
                code: 'FE',
                name: 'Fejér',
            },
            {
                code: 'GY',
                name: 'Gyor',
            },
            {
                code: 'GS',
                name: 'Gyor-Moson-Sopron',
            },
            {
                code: 'HB',
                name: 'Hajdú-Bihar',
            },
            {
                code: 'HE',
                name: 'Heves',
            },
            {
                code: 'HV',
                name: 'Hódmezovásárhely',
            },
            {
                code: 'JN',
                name: 'Jász-Nagykun-Szolnok',
            },
            {
                code: 'KV',
                name: 'Kaposvár',
            },
            {
                code: 'KM',
                name: 'Kecskemét',
            },
            {
                code: 'KE',
                name: 'Komárom-Esztergom',
            },
            {
                code: 'MI',
                name: 'Miskolc',
            },
            {
                code: 'NK',
                name: 'Nagykanizsa',
            },
            {
                code: 'NO',
                name: 'Nógrád',
            },
            {
                code: 'NY',
                name: 'Nyíregyháza',
            },
            {
                code: 'PS',
                name: 'Pécs',
            },
            {
                code: 'PE',
                name: 'Pest',
            },
            {
                code: 'ST',
                name: 'Salgótarján',
            },
            {
                code: 'SO',
                name: 'Somogy',
            },
            {
                code: 'SN',
                name: 'Sopron',
            },
            {
                code: 'SZ',
                name: 'Szabolcs-Szatmár-Bereg',
            },
            {
                code: 'SD',
                name: 'Szeged',
            },
            {
                code: 'SF',
                name: 'Székesfehérvár',
            },
            {
                code: 'SS',
                name: 'Szekszárd',
            },
            {
                code: 'SK',
                name: 'Szolnok',
            },
            {
                code: 'SH',
                name: 'Szombathely',
            },
            {
                code: 'TB',
                name: 'Tatabánya',
            },
            {
                code: 'TO',
                name: 'Tolna',
            },
            {
                code: 'VA',
                name: 'Vas',
            },
            {
                code: 'VE',
                name: 'Veszprém',
            },
            {
                code: 'VM',
                name: 'Veszprém City',
            },
            {
                code: 'ZA',
                name: 'Zala',
            },
            {
                code: 'ZE',
                name: 'Zalaegerszeg',
            },
        ],
    },
    {
        code: 'IS',
        id: 2261,
        name: 'Iceland',
        states: [
            {
                code: '7',
                name: 'Austurland',
            },
            {
                code: '1',
                name: 'Höfuðborgarsvæði utan Reykjavíkur',
            },
            {
                code: '6',
                name: 'Norðurland eystra',
            },
            {
                code: '5',
                name: 'Norðurland vestra',
            },
            {
                code: '0',
                name: 'Reykjavík',
            },
            {
                code: '8',
                name: 'Suðurland',
            },
            {
                code: '2',
                name: 'Suðurnes',
            },
            {
                code: '4',
                name: 'Vestfirðir',
            },
            {
                code: '3',
                name: 'Vesturland',
            },
        ],
    },
    {
        code: 'IN',
        id: 2262,
        name: 'India',
        states: [
            {
                code: 'AN',
                name: 'Andaman and Nicobar Islands',
            },
            {
                code: 'AP',
                name: 'Andhra Pradesh',
            },
            {
                code: 'AR',
                name: 'Arunachal Pradesh',
            },
            {
                code: 'AS',
                name: 'Assam',
            },
            {
                code: 'BR',
                name: 'Bihar',
            },
            {
                code: 'CH',
                name: 'Chandigarh',
            },
            {
                code: 'CT',
                name: 'Chhattisgarh',
            },
            {
                code: 'DN',
                name: 'Dadra and Nagar Haveli',
            },
            {
                code: 'DD',
                name: 'Daman and Diu',
            },
            {
                code: 'DL',
                name: 'Delhi',
            },
            {
                code: 'GA',
                name: 'Goa',
            },
            {
                code: 'GJ',
                name: 'Gujarat',
            },
            {
                code: 'HR',
                name: 'Haryana',
            },
            {
                code: 'HP',
                name: 'Himachal Pradesh',
            },
            {
                code: 'JK',
                name: 'Jammu and Kashmir',
            },
            {
                code: 'JH',
                name: 'Jharkhand',
            },
            {
                code: 'KA',
                name: 'Karnataka',
            },
            {
                code: 'KL',
                name: 'Kerala',
            },
            {
                code: 'LD',
                name: 'Lakshadweep',
            },
            {
                code: 'MP',
                name: 'Madhya Pradesh',
            },
            {
                code: 'MH',
                name: 'Maharashtra',
            },
            {
                code: 'MN',
                name: 'Manipur',
            },
            {
                code: 'ML',
                name: 'Meghalaya',
            },
            {
                code: 'MZ',
                name: 'Mizoram',
            },
            {
                code: 'NL',
                name: 'Nagaland',
            },
            {
                code: 'OR',
                name: 'Orissa',
            },
            {
                code: 'PY',
                name: 'Pondicherry',
            },
            {
                code: 'PB',
                name: 'Punjab',
            },
            {
                code: 'RJ',
                name: 'Rajasthan',
            },
            {
                code: 'SK',
                name: 'Sikkim',
            },
            {
                code: 'TN',
                name: 'Tamil Nadu',
            },
            {
                code: 'TG',
                name: 'Telangana',
            },
            {
                code: 'TR',
                name: 'Tripura',
            },
            {
                code: 'UP',
                name: 'Uttar Pradesh',
            },
            {
                code: 'UL',
                name: 'Uttaranchal',
            },
            {
                code: 'WB',
                name: 'West Bengal',
            },
        ],
    },
    {
        code: 'ID',
        id: 2263,
        name: 'Indonesia',
        states: [
            {
                code: 'AC',
                name: 'Aceh',
            },
            {
                code: 'BA',
                name: 'Bali',
            },
            {
                code: 'BB',
                name: 'Bangka Belitung',
            },
            {
                code: 'BT',
                name: 'Banten',
            },
            {
                code: 'BE',
                name: 'Bengkulu',
            },
            {
                code: 'GO',
                name: 'Gorontalo',
            },
            {
                code: 'JK',
                name: 'Jakarta Raya',
            },
            {
                code: 'JA',
                name: 'Jambi',
            },
            {
                code: 'JB',
                name: 'Jawa Barat',
            },
            {
                code: 'JT',
                name: 'Jawa Tengah',
            },
            {
                code: 'JI',
                name: 'Jawa Timur',
            },
            {
                code: 'KB',
                name: 'Kalimantan Barat',
            },
            {
                code: 'KS',
                name: 'Kalimantan Selatan',
            },
            {
                code: 'KT',
                name: 'Kalimantan Tengah',
            },
            {
                code: 'KI',
                name: 'Kalimantan Timur',
            },
            {
                code: 'KR',
                name: 'Kepulauan Riau',
            },
            {
                code: 'LA',
                name: 'Lampung',
            },
            {
                code: 'MA',
                name: 'Maluku',
            },
            {
                code: 'MU',
                name: 'Maluku Utara',
            },
            {
                code: 'NB',
                name: 'Nusa Tenggara Barat',
            },
            {
                code: 'NT',
                name: 'Nusa Tenggara Timur',
            },
            {
                code: 'PA',
                name: 'Papua',
            },
            {
                code: 'PB',
                name: 'Papua Barat',
            },
            {
                code: 'RI',
                name: 'Riau',
            },
            {
                code: 'SR',
                name: 'Sulawesi Barat',
            },
            {
                code: 'SN',
                name: 'Sulawesi Selatan',
            },
            {
                code: 'ST',
                name: 'Sulawesi Tengah',
            },
            {
                code: 'SG',
                name: 'Sulawesi Tenggara',
            },
            {
                code: 'SA',
                name: 'Sulawesi Utara',
            },
            {
                code: 'SB',
                name: 'Sumatera Barat',
            },
            {
                code: 'SS',
                name: 'Sumatera Selatan',
            },
            {
                code: 'SU',
                name: 'Sumatera Utara',
            },
            {
                code: 'YO',
                name: 'Yogyakarta',
            },
        ],
    },
    {
        code: 'IR',
        id: 2264,
        name: 'Iran; Islamic Republic of',
        states: [
            {
                code: 'IR44',
                name: 'Alborz',
            },
            {
                code: 'IR32',
                name: 'Ardebil',
            },
            {
                code: 'IR22',
                name: 'Bushehr',
            },
            {
                code: 'IR03',
                name: 'Chahar Mahall and Bakhtiari',
            },
            {
                code: 'IR33',
                name: 'East Azarbaijan',
            },
            {
                code: 'IR28',
                name: 'Esfahan',
            },
            {
                code: 'IR07',
                name: 'Fars',
            },
            {
                code: 'IR08',
                name: 'Gilan',
            },
            {
                code: 'IR37',
                name: 'Golestan',
            },
            {
                code: 'IR09',
                name: 'Hamadan',
            },
            {
                code: 'IR11',
                name: 'Hormozgan',
            },
            {
                code: 'IR42',
                name: 'IRazavi Khorasan',
            },
            {
                code: 'IR10',
                name: 'Ilam',
            },
            {
                code: 'IR29',
                name: 'Kerman',
            },
            {
                code: 'IR13',
                name: 'Kermanshah',
            },
            {
                code: 'IR15',
                name: 'Khuzestan',
            },
            {
                code: 'IR05',
                name: 'Kohgiluyeh and Buyer Ahmad',
            },
            {
                code: 'IR16',
                name: 'Kordestan',
            },
            {
                code: 'IR23',
                name: 'Lorestan',
            },
            {
                code: 'IR34',
                name: 'Markazi',
            },
            {
                code: 'IR35',
                name: 'Mazandaran',
            },
            {
                code: 'IR43',
                name: 'North Khorasan',
            },
            {
                code: 'IR38',
                name: 'Qazvin',
            },
            {
                code: 'IR39',
                name: 'Qom',
            },
            {
                code: 'IR25',
                name: 'Semnan',
            },
            {
                code: 'IR04',
                name: 'Sistan and Baluchestan',
            },
            {
                code: 'IR41',
                name: 'South Khorasan',
            },
            {
                code: 'IR26',
                name: 'Tehran',
            },
            {
                code: 'IR01',
                name: 'West Azarbaijan',
            },
            {
                code: 'IR40',
                name: 'Yazd',
            },
            {
                code: 'IR36',
                name: 'Zanjan',
            },
        ],
    },
    {
        code: 'IQ',
        id: 2265,
        name: 'Iraq',
        states: [
            {
                code: 'IZ01',
                name: 'Al-Anbar',
            },
            {
                code: 'IZ02',
                name: 'Al-Basrah',
            },
            {
                code: 'IZ03',
                name: 'Al-Muthanna',
            },
            {
                code: 'IZ04',
                name: 'Al-Qadisiyah',
            },
            {
                code: 'IZ17',
                name: 'An-Najaf',
            },
            {
                code: 'IZ11',
                name: 'Arbil',
            },
            {
                code: 'IZ05',
                name: 'As-Sulaymaniyah',
            },
            {
                code: 'IZ13',
                name: "At-Ta'mim",
            },
            {
                code: 'IZ06',
                name: 'Babil',
            },
            {
                code: 'IZ07',
                name: 'Baghdad',
            },
            {
                code: 'IZ08',
                name: 'Dahuk',
            },
            {
                code: 'IZ09',
                name: 'Dhi Qar',
            },
            {
                code: 'IZ10',
                name: 'Diyala',
            },
            {
                code: 'IZ12',
                name: 'Karbala',
            },
            {
                code: 'IZ14',
                name: 'Maysan',
            },
            {
                code: 'IZ15',
                name: 'Ninawa',
            },
            {
                code: 'IZ18',
                name: 'Salah ad-Din',
            },
            {
                code: 'IZ16',
                name: 'Wasit',
            },
        ],
    },
    {
        code: 'IE',
        id: 2266,
        name: 'Ireland',
        states: [
            {
                code: 'CW',
                name: 'Carlow',
            },
            {
                code: 'CN',
                name: 'Cavan',
            },
            {
                code: 'CE',
                name: 'Clare',
            },
            {
                code: 'C',
                name: 'Connacht',
            },
            {
                code: 'CO',
                name: 'Cork',
            },
            {
                code: 'DL',
                name: 'Donegal',
            },
            {
                code: 'D',
                name: 'Dublin',
            },
            {
                code: 'G',
                name: 'Galway',
            },
            {
                code: 'KY',
                name: 'Kerry',
            },
            {
                code: 'KE',
                name: 'Kildare',
            },
            {
                code: 'KK',
                name: 'Kilkenny',
            },
            {
                code: 'LS',
                name: 'Laois',
            },
            {
                code: 'L',
                name: 'Leinster',
            },
            {
                code: 'LM',
                name: 'Leitrim',
            },
            {
                code: 'LK',
                name: 'Limerick',
            },
            {
                code: 'LD',
                name: 'Longford',
            },
            {
                code: 'LH',
                name: 'Louth',
            },
            {
                code: 'MO',
                name: 'Mayo',
            },
            {
                code: 'MH',
                name: 'Meath',
            },
            {
                code: 'MN',
                name: 'Monaghan',
            },
            {
                code: 'M',
                name: 'Munster',
            },
            {
                code: 'OY',
                name: 'Offaly',
            },
            {
                code: 'RN',
                name: 'Roscommon',
            },
            {
                code: 'SO',
                name: 'Sligo',
            },
            {
                code: 'TA',
                name: 'Tipperary',
            },
            {
                code: 'U',
                name: 'Ulster',
            },
            {
                code: 'WD',
                name: 'Waterford',
            },
            {
                code: 'WH',
                name: 'Westmeath',
            },
            {
                code: 'WX',
                name: 'Wexford',
            },
            {
                code: 'WW',
                name: 'Wicklow',
            },
        ],
    },
    {
        code: 'IM',
        id: 2445,
        name: 'Isle of Man',
        states: [],
    },
    {
        code: 'IL',
        id: 2267,
        name: 'Israel',
        states: [
            {
                code: 'IS01',
                name: 'HaDarom',
            },
            {
                code: 'IS02',
                name: 'HaMerkaz',
            },
            {
                code: 'IS03',
                name: 'HaZafon',
            },
            {
                code: 'IS04',
                name: 'Haifa',
            },
            {
                code: 'IS06',
                name: 'Jerusalem',
            },
            {
                code: 'IS05',
                name: 'Tel Aviv',
            },
        ],
    },
    {
        code: 'IT',
        id: 2268,
        name: 'Italy',
        states: [
            {
                code: '65',
                name: 'Abruzzo',
            },
            {
                code: 'AG',
                name: 'Agrigento',
            },
            {
                code: 'AL',
                name: 'Alessandria',
            },
            {
                code: 'AN',
                name: 'Ancona',
            },
            {
                code: 'AO',
                name: 'Aosta',
            },
            {
                code: 'AR',
                name: 'Arezzo',
            },
            {
                code: 'AP',
                name: 'Ascoli Piceno',
            },
            {
                code: 'AT',
                name: 'Asti',
            },
            {
                code: 'AV',
                name: 'Avellino',
            },
            {
                code: 'BA',
                name: 'Bari',
            },
            {
                code: 'BT',
                name: 'Barletta-Andria-Trani',
            },
            {
                code: '77',
                name: 'Basilicata',
            },
            {
                code: 'BL',
                name: 'Belluno',
            },
            {
                code: 'BN',
                name: 'Benevento',
            },
            {
                code: 'BG',
                name: 'Bergamo',
            },
            {
                code: 'BI',
                name: 'Biella',
            },
            {
                code: 'BO',
                name: 'Bologna',
            },
            {
                code: 'BZ',
                name: 'Bolzano',
            },
            {
                code: 'BS',
                name: 'Brescia',
            },
            {
                code: 'BR',
                name: 'Brindisi',
            },
            {
                code: 'CA',
                name: 'Cagliari',
            },
            {
                code: '78',
                name: 'Calabria',
            },
            {
                code: 'CL',
                name: 'Caltanissetta',
            },
            {
                code: '72',
                name: 'Campania',
            },
            {
                code: 'CB',
                name: 'Campobasso',
            },
            {
                code: 'CI',
                name: 'Carbonia-Iglesias',
            },
            {
                code: 'CE',
                name: 'Caserta',
            },
            {
                code: 'CT',
                name: 'Catania',
            },
            {
                code: 'CZ',
                name: 'Catanzaro',
            },
            {
                code: 'CH',
                name: 'Chieti',
            },
            {
                code: 'CO',
                name: 'Como',
            },
            {
                code: 'CS',
                name: 'Cosenza',
            },
            {
                code: 'CR',
                name: 'Cremona',
            },
            {
                code: 'KR',
                name: 'Crotone',
            },
            {
                code: 'CN',
                name: 'Cuneo',
            },
            {
                code: '45',
                name: 'Emilia-Romagna',
            },
            {
                code: 'EN',
                name: 'Enna',
            },
            {
                code: 'FM',
                name: 'Fermo',
            },
            {
                code: 'FE',
                name: 'Ferrara',
            },
            {
                code: 'FI',
                name: 'Firenze',
            },
            {
                code: 'FG',
                name: 'Foggia',
            },
            {
                code: 'FC',
                name: 'Forli-Cesena',
            },
            {
                code: '36',
                name: 'Friuli-Venezia Giulia',
            },
            {
                code: 'FR',
                name: 'Frosinone',
            },
            {
                code: 'GE',
                name: 'Genova',
            },
            {
                code: 'GO',
                name: 'Gorizia',
            },
            {
                code: 'GR',
                name: 'Grosseto',
            },
            {
                code: 'IM',
                name: 'Imperia',
            },
            {
                code: 'IS',
                name: 'Isernia',
            },
            {
                code: 'AQ',
                name: "L'Aquila",
            },
            {
                code: 'SP',
                name: 'La Spezia',
            },
            {
                code: 'LT',
                name: 'Latina',
            },
            {
                code: '62',
                name: 'Lazio',
            },
            {
                code: 'LE',
                name: 'Lecce',
            },
            {
                code: 'LC',
                name: 'Lecco',
            },
            {
                code: '42',
                name: 'Liguria',
            },
            {
                code: 'LI',
                name: 'Livorno',
            },
            {
                code: 'LO',
                name: 'Lodi',
            },
            {
                code: '25',
                name: 'Lombardia',
            },
            {
                code: 'LU',
                name: 'Lucca',
            },
            {
                code: 'MC',
                name: 'Macerata',
            },
            {
                code: 'MN',
                name: 'Mantova',
            },
            {
                code: '57',
                name: 'Marche',
            },
            {
                code: 'MS',
                name: 'Massa-Carrara',
            },
            {
                code: 'MT',
                name: 'Matera',
            },
            {
                code: 'VS',
                name: 'Medio Campidano',
            },
            {
                code: 'ME',
                name: 'Messina',
            },
            {
                code: 'MI',
                name: 'Milano',
            },
            {
                code: 'MO',
                name: 'Modena',
            },
            {
                code: '67',
                name: 'Molise',
            },
            {
                code: 'MB',
                name: 'Monza e Brianza',
            },
            {
                code: 'NA',
                name: 'Napoli',
            },
            {
                code: 'NO',
                name: 'Novara',
            },
            {
                code: 'NU',
                name: 'Nuoro',
            },
            {
                code: 'OG',
                name: 'Ogliastra',
            },
            {
                code: 'OT',
                name: 'Olbia-Tempio',
            },
            {
                code: 'OR',
                name: 'Oristano',
            },
            {
                code: 'PD',
                name: 'Padova',
            },
            {
                code: 'PA',
                name: 'Palermo',
            },
            {
                code: 'PR',
                name: 'Parma',
            },
            {
                code: 'PV',
                name: 'Pavia',
            },
            {
                code: 'PG',
                name: 'Perugia',
            },
            {
                code: 'PU',
                name: 'Pesaro e Urbino',
            },
            {
                code: 'PE',
                name: 'Pescara',
            },
            {
                code: 'PC',
                name: 'Piacenza',
            },
            {
                code: '21',
                name: 'Piemonte',
            },
            {
                code: 'PI',
                name: 'Pisa',
            },
            {
                code: 'PT',
                name: 'Pistoia',
            },
            {
                code: 'PN',
                name: 'Pordenone',
            },
            {
                code: 'PZ',
                name: 'Potenza',
            },
            {
                code: 'PO',
                name: 'Prato',
            },
            {
                code: '75',
                name: 'Puglia',
            },
            {
                code: 'RG',
                name: 'Ragusa',
            },
            {
                code: 'RA',
                name: 'Ravenna',
            },
            {
                code: 'RC',
                name: 'Reggio Calabria',
            },
            {
                code: 'RE',
                name: 'Reggio Emilia',
            },
            {
                code: 'RI',
                name: 'Rieti',
            },
            {
                code: 'RN',
                name: 'Rimini',
            },
            {
                code: 'RM',
                name: 'Roma',
            },
            {
                code: 'RO',
                name: 'Rovigo',
            },
            {
                code: 'SA',
                name: 'Salerno',
            },
            {
                code: '88',
                name: 'Sardegna',
            },
            {
                code: 'SS',
                name: 'Sassari',
            },
            {
                code: 'SV',
                name: 'Savona',
            },
            {
                code: '82',
                name: 'Sicilia',
            },
            {
                code: 'SI',
                name: 'Siena',
            },
            {
                code: 'SR',
                name: 'Siracusa',
            },
            {
                code: 'SO',
                name: 'Sondrio',
            },
            {
                code: 'TA',
                name: 'Taranto',
            },
            {
                code: 'TE',
                name: 'Teramo',
            },
            {
                code: 'TR',
                name: 'Terni',
            },
            {
                code: 'TO',
                name: 'Torino',
            },
            {
                code: '52',
                name: 'Toscana',
            },
            {
                code: 'TP',
                name: 'Trapani',
            },
            {
                code: '32',
                name: 'Trentino-Alto Adige',
            },
            {
                code: 'TN',
                name: 'Trento',
            },
            {
                code: 'TV',
                name: 'Treviso',
            },
            {
                code: 'TS',
                name: 'Trieste',
            },
            {
                code: 'UD',
                name: 'Udine',
            },
            {
                code: '55',
                name: 'Umbria',
            },
            {
                code: '23',
                name: "Valle d'Aosta",
            },
            {
                code: 'VA',
                name: 'Varese',
            },
            {
                code: '34',
                name: 'Veneto',
            },
            {
                code: 'VE',
                name: 'Venezia',
            },
            {
                code: 'VB',
                name: 'Verbano-Cusio-Ossola',
            },
            {
                code: 'VC',
                name: 'Vercelli',
            },
            {
                code: 'VR',
                name: 'Verona',
            },
            {
                code: 'VV',
                name: 'Vibo Valentia',
            },
            {
                code: 'VI',
                name: 'Vicenza',
            },
            {
                code: 'VT',
                name: 'Viterbo',
            },
        ],
    },
    {
        code: 'JM',
        id: 2269,
        name: 'Jamaica',
        states: [
            {
                code: 'JM01',
                name: 'Clarendon',
            },
            {
                code: 'JM02',
                name: 'Hanover',
            },
            {
                code: 'JM17',
                name: 'Kingston',
            },
            {
                code: 'JM04',
                name: 'Manchester',
            },
            {
                code: 'JM07',
                name: 'Portland',
            },
            {
                code: 'JM08',
                name: 'Saint Andrew',
            },
            {
                code: 'JM09',
                name: 'Saint Ann',
            },
            {
                code: 'JM10',
                name: 'Saint Catherine',
            },
            {
                code: 'JM11',
                name: 'Saint Elizabeth',
            },
            {
                code: 'JM12',
                name: 'Saint James',
            },
            {
                code: 'JM13',
                name: 'Saint Mary',
            },
            {
                code: 'JM14',
                name: 'Saint Thomas',
            },
            {
                code: 'JM15',
                name: 'Trelawny',
            },
            {
                code: 'JM16',
                name: 'Westmoreland',
            },
        ],
    },
    {
        code: 'JP',
        id: 2270,
        name: 'Japan',
        states: [
            {
                code: 'JP23',
                name: 'Aichi',
            },
            {
                code: 'JP05',
                name: 'Akita',
            },
            {
                code: 'JP02',
                name: 'Aomori',
            },
            {
                code: 'JP12',
                name: 'Chiba',
            },
            {
                code: 'JP38',
                name: 'Ehime',
            },
            {
                code: 'JP18',
                name: 'Fukui',
            },
            {
                code: 'JP40',
                name: 'Fukuoka',
            },
            {
                code: 'JP07',
                name: 'Fukushima',
            },
            {
                code: 'JP21',
                name: 'Gifu',
            },
            {
                code: 'JP10',
                name: 'Gunma',
            },
            {
                code: 'JP34',
                name: 'Hiroshima',
            },
            {
                code: 'JP01',
                name: 'Hokkaido',
            },
            {
                code: 'JP28',
                name: 'Hyogo',
            },
            {
                code: 'JP08',
                name: 'Ibaraki',
            },
            {
                code: 'JP17',
                name: 'Ishikawa',
            },
            {
                code: 'JP03',
                name: 'Iwate',
            },
            {
                code: 'JP37',
                name: 'Kagawa',
            },
            {
                code: 'JP46',
                name: 'Kagoshima',
            },
            {
                code: 'JP14',
                name: 'Kanagawa',
            },
            {
                code: 'JP39',
                name: 'Kochi',
            },
            {
                code: 'JP43',
                name: 'Kumamoto',
            },
            {
                code: 'JP26',
                name: 'Kyoto',
            },
            {
                code: 'JP24',
                name: 'Mie',
            },
            {
                code: 'JP04',
                name: 'Miyagi',
            },
            {
                code: 'JP45',
                name: 'Miyazaki',
            },
            {
                code: 'JP20',
                name: 'Nagano',
            },
            {
                code: 'JP42',
                name: 'Nagasaki',
            },
            {
                code: 'JP29',
                name: 'Nara',
            },
            {
                code: 'JP15',
                name: 'Niigata',
            },
            {
                code: 'JP44',
                name: 'Oita',
            },
            {
                code: 'JP33',
                name: 'Okayama',
            },
            {
                code: 'JP47',
                name: 'Okinawa',
            },
            {
                code: 'JP27',
                name: 'Osaka',
            },
            {
                code: 'JP41',
                name: 'Saga',
            },
            {
                code: 'JP11',
                name: 'Saitama',
            },
            {
                code: 'JP25',
                name: 'Shiga',
            },
            {
                code: 'JP32',
                name: 'Shimane',
            },
            {
                code: 'JP22',
                name: 'Shizuoka',
            },
            {
                code: 'JP09',
                name: 'Tochigi',
            },
            {
                code: 'JP36',
                name: 'Tokushima',
            },
            {
                code: 'JP13',
                name: 'Tokyo',
            },
            {
                code: 'JP31',
                name: 'Tottori',
            },
            {
                code: 'JP16',
                name: 'Toyama',
            },
            {
                code: 'JP30',
                name: 'Wakayama',
            },
            {
                code: 'JP06',
                name: 'Yamagata',
            },
            {
                code: 'JP35',
                name: 'Yamaguchi',
            },
            {
                code: 'JP19',
                name: 'Yamanashi',
            },
        ],
    },
    {
        code: 'JE',
        id: 2422,
        name: 'Jersey',
        states: [],
    },
    {
        code: 'JO',
        id: 2271,
        name: 'Jordan',
        states: [
            {
                code: 'JO01',
                name: 'Ajlun',
            },
            {
                code: 'JO02',
                name: 'Amman',
            },
            {
                code: 'JO03',
                name: 'Aqaba',
            },
            {
                code: 'JO04',
                name: 'Balqa',
            },
            {
                code: 'JO05',
                name: 'Irbid',
            },
            {
                code: 'JO06',
                name: 'JarasJ',
            },
            {
                code: 'JO07',
                name: 'Karak',
            },
            {
                code: 'JO08',
                name: "Ma'an",
            },
            {
                code: 'JO09',
                name: 'Madaba',
            },
            {
                code: 'JO10',
                name: 'Mafraq',
            },
            {
                code: 'JO11',
                name: 'Tafilah',
            },
            {
                code: 'JO12',
                name: 'Zarqa',
            },
        ],
    },
    {
        code: 'KZ',
        id: 2272,
        name: 'Kazakhstan',
        states: [
            {
                code: 'KZ01',
                name: 'Almaty',
            },
            {
                code: 'KZ02',
                name: 'Almaty (City)',
            },
            {
                code: 'KZ03',
                name: 'Aqmola',
            },
            {
                code: 'KZ04',
                name: 'Aqtöbe',
            },
            {
                code: 'KZ05',
                name: 'Astana',
            },
            {
                code: 'KZ06',
                name: 'Atyrau',
            },
            {
                code: 'KZ08',
                name: 'Bayqonyr',
            },
            {
                code: 'KZ15',
                name: 'East Kazakhstan',
            },
            {
                code: 'KZ09',
                name: 'Mangghystau',
            },
            {
                code: 'KZ16',
                name: 'North Kazakhstan',
            },
            {
                code: 'KZ11',
                name: 'Pavlodar',
            },
            {
                code: 'KZ12',
                name: 'Qaraghandy',
            },
            {
                code: 'KZ13',
                name: 'Qostanay',
            },
            {
                code: 'KZ14',
                name: 'Qyzylorda',
            },
            {
                code: 'KZ10',
                name: 'South Kazakhstan',
            },
            {
                code: 'KZ07',
                name: 'West Kazakhstan',
            },
            {
                code: 'KZ17',
                name: 'Zhambyl',
            },
        ],
    },
    {
        code: 'KE',
        id: 2273,
        name: 'Kenya',
        states: [
            {
                code: 'KE10',
                name: 'Baringo',
            },
            {
                code: 'KE11',
                name: 'Bomet',
            },
            {
                code: 'KE12',
                name: 'Bungoma',
            },
            {
                code: 'KE13',
                name: 'Busia',
            },
            {
                code: 'KE14',
                name: 'Elgeyo Marakwet',
            },
            {
                code: 'KE15',
                name: 'Embu',
            },
            {
                code: 'KE16',
                name: 'Garissa',
            },
            {
                code: 'KE17',
                name: 'Homa Bay',
            },
            {
                code: 'KE18',
                name: 'Isiolo',
            },
            {
                code: 'KE19',
                name: 'Kajiado',
            },
            {
                code: 'KE20',
                name: 'Kakamega',
            },
            {
                code: 'KE21',
                name: 'Kericho',
            },
            {
                code: 'KE22',
                name: 'Kiambu',
            },
            {
                code: 'KE23',
                name: 'Kilifi',
            },
            {
                code: 'KE24',
                name: 'Kirinyaga',
            },
            {
                code: 'KE25',
                name: 'Kisii',
            },
            {
                code: 'KE26',
                name: 'Kisumu',
            },
            {
                code: 'KE27',
                name: 'Kitui',
            },
            {
                code: 'KE28',
                name: 'Kwale',
            },
            {
                code: 'KE29',
                name: 'Laikipia',
            },
            {
                code: 'KE30',
                name: 'Lamu',
            },
            {
                code: 'KE31',
                name: 'Machakos',
            },
            {
                code: 'KE32',
                name: 'Makueni',
            },
            {
                code: 'KE33',
                name: 'Mandera',
            },
            {
                code: 'KE34',
                name: 'Marsabit',
            },
            {
                code: 'KE35',
                name: 'Meru',
            },
            {
                code: 'KE36',
                name: 'Migori',
            },
            {
                code: 'KE37',
                name: 'Mombasa',
            },
            {
                code: 'KE38',
                name: 'Murang',
            },
            {
                code: 'KE05',
                name: 'Nairobi',
            },
            {
                code: 'KE39',
                name: 'Nakuru',
            },
            {
                code: 'KE40',
                name: 'Nandi',
            },
            {
                code: 'KE41',
                name: 'Narok',
            },
            {
                code: 'KE42',
                name: 'Nyamira',
            },
            {
                code: 'KE43',
                name: 'Nyandarua',
            },
            {
                code: 'KE44',
                name: 'Nyeri',
            },
            {
                code: 'KE45',
                name: 'Samburu',
            },
            {
                code: 'KE46',
                name: 'Siaya',
            },
            {
                code: 'KE47',
                name: 'Taita Taveta',
            },
            {
                code: 'KE48',
                name: 'Tana River',
            },
            {
                code: 'KE49',
                name: 'Tharaka Nithi',
            },
            {
                code: 'KE50',
                name: 'Trans Nzoia',
            },
            {
                code: 'KE51',
                name: 'Turkana',
            },
            {
                code: 'KE52',
                name: 'Uasin Gishu',
            },
            {
                code: 'KE53',
                name: 'Vihiga',
            },
            {
                code: 'KE54',
                name: 'Wajir',
            },
            {
                code: 'KE55',
                name: 'West Pokot',
            },
        ],
    },
    {
        code: 'KI',
        id: 2391,
        name: 'Kiribati',
        states: [],
    },
    {
        code: 'KP',
        id: 2274,
        name: "Korea; Democratic People's Republic Of (North)",
        states: [
            {
                code: 'KN01',
                name: 'Chagang-do',
            },
            {
                code: 'KN17',
                name: 'Hamgyong-bukto',
            },
            {
                code: 'KN03',
                name: 'Hamgyong-namdo',
            },
            {
                code: 'KN07',
                name: 'Hwanghae-bukto',
            },
            {
                code: 'KN06',
                name: 'Hwanghae-namdo',
            },
            {
                code: 'KN09',
                name: 'Kangwon-do',
            },
            {
                code: 'KN18',
                name: 'Najin Sonbong-si',
            },
            {
                code: 'KN11',
                name: "P'yongan-bukto",
            },
            {
                code: 'KN15',
                name: "P'yongan-namdo",
            },
            {
                code: 'KN12',
                name: "P'yongyang-si",
            },
            {
                code: 'KN13',
                name: 'Yanggang-do',
            },
        ],
    },
    {
        code: 'KR',
        id: 2275,
        name: 'Korea; Republic Of (South)',
        states: [
            {
                code: 'KS10',
                name: 'Busan',
            },
            {
                code: 'KS05',
                name: 'Chungcheongbuk-do',
            },
            {
                code: 'KS17',
                name: 'Chungcheongnam-do',
            },
            {
                code: 'KS15',
                name: 'Daegu',
            },
            {
                code: 'KS19',
                name: 'Daejeon',
            },
            {
                code: 'KS06',
                name: 'Gangwon-do',
            },
            {
                code: 'KS18',
                name: 'Gwangju',
            },
            {
                code: 'KS13',
                name: 'Gyeonggi-do',
            },
            {
                code: 'KS14',
                name: 'Gyeongsangbuk-do',
            },
            {
                code: 'KS20',
                name: 'Gyeongsangnam-do',
            },
            {
                code: 'KS12',
                name: 'Incheon',
            },
            {
                code: 'KS01',
                name: 'Jeju-do',
            },
            {
                code: 'KS03',
                name: 'Jeollabuk-do',
            },
            {
                code: 'KS16',
                name: 'Jeollanam-do',
            },
            {
                code: 'KS22',
                name: 'Sejong',
            },
            {
                code: 'KS11',
                name: 'Seoul',
            },
            {
                code: 'KS21',
                name: 'Ulsan',
            },
        ],
    },
    {
        code: 'KV',
        id: 2392,
        name: 'Kosovo',
        states: [],
    },
    {
        code: 'KW',
        id: 2276,
        name: 'Kuwait',
        states: [
            {
                code: 'KU04',
                name: 'Al Ahmadi',
            },
            {
                code: 'KU07',
                name: 'Al Farwaniyah',
            },
            {
                code: 'KU05',
                name: 'Al Jahrah',
            },
            {
                code: 'KU02',
                name: 'Al Kuwayt',
            },
            {
                code: 'KU08',
                name: 'Hawalli',
            },
            {
                code: 'KU09',
                name: 'Mubarak Al-Kabir',
            },
        ],
    },
    {
        code: 'KG',
        id: 2277,
        name: 'Kyrgyzstan',
        states: [
            {
                code: 'KG09',
                name: 'Batken',
            },
            {
                code: 'KG01',
                name: 'Bishkek',
            },
            {
                code: 'KG02',
                name: 'Chüy',
            },
            {
                code: 'KG03',
                name: 'Jalal-Abad',
            },
            {
                code: 'KG04',
                name: 'Naryn',
            },
            {
                code: 'KG10',
                name: 'Osh [City]',
            },
            {
                code: 'KG08',
                name: 'Osh',
            },
            {
                code: 'KG06',
                name: 'Talas',
            },
            {
                code: 'KG07',
                name: 'Ysyk-Köl',
            },
        ],
    },
    {
        code: 'LA',
        id: 2278,
        name: "Lao People's Democratic Republic",
        states: [
            {
                code: 'LA01',
                name: 'Attapu',
            },
            {
                code: 'LA22',
                name: 'Bokeo',
            },
            {
                code: 'LA23',
                name: 'Bolikhamxai',
            },
            {
                code: 'LA02',
                name: 'Champasak',
            },
            {
                code: 'LA03',
                name: 'Houaphan',
            },
            {
                code: 'LA15',
                name: 'Khammouan',
            },
            {
                code: 'LA16',
                name: 'Louang Namtha',
            },
            {
                code: 'LA17',
                name: 'Louangphrabang',
            },
            {
                code: 'LA07',
                name: 'Oudômxai',
            },
            {
                code: 'LA18',
                name: 'Phôngsali',
            },
            {
                code: 'LA19',
                name: 'Saravan',
            },
            {
                code: 'LA20',
                name: 'Savannakhét',
            },
            {
                code: 'LA27',
                name: 'Vientiane',
            },
            {
                code: 'LA24',
                name: 'Vientiane [prefecture]',
            },
            {
                code: 'LA13',
                name: 'Xaignabouri',
            },
            {
                code: 'LA28',
                name: 'Xaisômboun',
            },
            {
                code: 'LA26',
                name: 'Xékong',
            },
            {
                code: 'LA14',
                name: 'Xiangkhoang',
            },
        ],
    },
    {
        code: 'LV',
        id: 2279,
        name: 'Latvia',
        states: [
            {
                code: 'LG34',
                name: 'Adaži',
            },
            {
                code: 'LG35',
                name: 'Aglona',
            },
            {
                code: 'LG36',
                name: 'Aizkraukle',
            },
            {
                code: 'LG37',
                name: 'Aizpute',
            },
            {
                code: 'LG38',
                name: 'Akniste',
            },
            {
                code: 'LG39',
                name: 'Aloja',
            },
            {
                code: 'LG40',
                name: 'Alsunga',
            },
            {
                code: 'LG41',
                name: 'Aluksne',
            },
            {
                code: 'LG42',
                name: 'Amata',
            },
            {
                code: 'LG43',
                name: 'Ape',
            },
            {
                code: 'LG44',
                name: 'Auce',
            },
            {
                code: 'LG45',
                name: 'Babite',
            },
            {
                code: 'LG46',
                name: 'Baldone',
            },
            {
                code: 'LG47',
                name: 'Baltinava',
            },
            {
                code: 'LG48',
                name: 'Balvi',
            },
            {
                code: 'LG49',
                name: 'Bauska',
            },
            {
                code: 'LG50',
                name: 'Beverina',
            },
            {
                code: 'LG51',
                name: 'Broceni',
            },
            {
                code: 'LG52',
                name: 'Burtnieki',
            },
            {
                code: 'LG53',
                name: 'Carnikava',
            },
            {
                code: 'LG54',
                name: 'Cesis',
            },
            {
                code: 'LG55',
                name: 'Cesvaine',
            },
            {
                code: 'LG56',
                name: 'Cibla',
            },
            {
                code: 'LG57',
                name: 'Dagda',
            },
            {
                code: 'LG06',
                name: 'Daugavpils',
            },
            {
                code: 'LG58',
                name: 'Daugavpils',
            },
            {
                code: 'LG59',
                name: 'Dobele',
            },
            {
                code: 'LG60',
                name: 'Dundaga',
            },
            {
                code: 'LG61',
                name: 'Durbe',
            },
            {
                code: 'LG62',
                name: 'Engure',
            },
            {
                code: 'LG63',
                name: 'Ergli',
            },
            {
                code: 'LG64',
                name: 'Garkalne',
            },
            {
                code: 'LG65',
                name: 'Grobina',
            },
            {
                code: 'LG66',
                name: 'Gulbene',
            },
            {
                code: 'LG67',
                name: 'Iecava',
            },
            {
                code: 'LG68',
                name: 'Ikškile',
            },
            {
                code: 'LG69',
                name: 'Ilukste',
            },
            {
                code: 'LG70',
                name: 'Incukalns',
            },
            {
                code: 'LG71',
                name: 'Jaunjelgava',
            },
            {
                code: 'LG72',
                name: 'Jaunpiebalga',
            },
            {
                code: 'LG73',
                name: 'Jaunpils',
            },
            {
                code: 'LG75',
                name: 'Jekabpils',
            },
            {
                code: 'LG74',
                name: 'Jekabpils',
            },
            {
                code: 'LG76',
                name: 'Jelgava',
            },
            {
                code: 'LG11',
                name: 'Jelgava',
            },
            {
                code: 'LG13',
                name: 'Jurmala',
            },
            {
                code: 'LG77',
                name: 'Kandava',
            },
            {
                code: 'LG78',
                name: 'Karsava',
            },
            {
                code: 'LG79',
                name: 'Kegums',
            },
            {
                code: 'LG80',
                name: 'Kekava',
            },
            {
                code: 'LG81',
                name: 'Kocenu',
            },
            {
                code: 'LG82',
                name: 'Koknese',
            },
            {
                code: 'LG83',
                name: 'Kraslava',
            },
            {
                code: 'LG84',
                name: 'Krimulda',
            },
            {
                code: 'LG85',
                name: 'Krustpils',
            },
            {
                code: 'LG86',
                name: 'Kuldiga',
            },
            {
                code: 'LG87',
                name: 'Lielvarde',
            },
            {
                code: 'LG16',
                name: 'Liepaja',
            },
            {
                code: 'LG88',
                name: 'Ligatne',
            },
            {
                code: 'LG89',
                name: 'Limbaži',
            },
            {
                code: 'LG90',
                name: 'Livani',
            },
            {
                code: 'LG91',
                name: 'Lubana',
            },
            {
                code: 'LG92',
                name: 'Ludza',
            },
            {
                code: 'LG93',
                name: 'Madona',
            },
            {
                code: 'LG94',
                name: 'Malpils',
            },
            {
                code: 'LG95',
                name: 'Marupe',
            },
            {
                code: 'LG96',
                name: 'Mazsalaca',
            },
            {
                code: 'LGF1',
                name: 'Mersraga',
            },
            {
                code: 'LG97',
                name: 'Naukšeni',
            },
            {
                code: 'LG98',
                name: 'Nereta',
            },
            {
                code: 'LG99',
                name: 'Nica',
            },
            {
                code: 'LGA1',
                name: 'Ogre',
            },
            {
                code: 'LGA2',
                name: 'Olaine',
            },
            {
                code: 'LGA3',
                name: 'Ozolnieki',
            },
            {
                code: 'LGA4',
                name: 'Pargauja',
            },
            {
                code: 'LGA5',
                name: 'Pavilosta',
            },
            {
                code: 'LGA6',
                name: 'Plavinas',
            },
            {
                code: 'LGA7',
                name: 'Preili',
            },
            {
                code: 'LGA8',
                name: 'Priekule',
            },
            {
                code: 'LGA9',
                name: 'Priekuli',
            },
            {
                code: 'LGB1',
                name: 'Rauna',
            },
            {
                code: 'LGB2',
                name: 'Rezekne',
            },
            {
                code: 'LG23',
                name: 'Rezekne',
            },
            {
                code: 'LGB3',
                name: 'Riebini',
            },
            {
                code: 'LG25',
                name: 'Riga',
            },
            {
                code: 'LGB4',
                name: 'Roja',
            },
            {
                code: 'LGB5',
                name: 'Ropaži',
            },
            {
                code: 'LGB6',
                name: 'Rucava',
            },
            {
                code: 'LGB7',
                name: 'Rugaji',
            },
            {
                code: 'LGB8',
                name: 'Rujiena',
            },
            {
                code: 'LGB9',
                name: 'Rundale',
            },
            {
                code: 'LGC1',
                name: 'Salacgriva',
            },
            {
                code: 'LGC2',
                name: 'Sala',
            },
            {
                code: 'LGC3',
                name: 'Salaspils',
            },
            {
                code: 'LGC4',
                name: 'Saldus',
            },
            {
                code: 'LGC5',
                name: 'Saulkrasti',
            },
            {
                code: 'LGC6',
                name: 'Seja',
            },
            {
                code: 'LGC7',
                name: 'Sigulda',
            },
            {
                code: 'LGC8',
                name: 'Skriveri',
            },
            {
                code: 'LGC9',
                name: 'Skrunda',
            },
            {
                code: 'LGD1',
                name: 'Smiltene',
            },
            {
                code: 'LGD2',
                name: 'Stopini',
            },
            {
                code: 'LGD3',
                name: 'Strenci',
            },
            {
                code: 'LGD4',
                name: 'Talsi',
            },
            {
                code: 'LGD5',
                name: 'Tervete',
            },
            {
                code: 'LGD6',
                name: 'Tukums',
            },
            {
                code: 'LGD7',
                name: 'Vainode',
            },
            {
                code: 'LGD8',
                name: 'Valka',
            },
            {
                code: 'LGD9',
                name: 'Valmiera',
            },
            {
                code: 'LGE1',
                name: 'Varaklani',
            },
            {
                code: 'LGE2',
                name: 'Varkava',
            },
            {
                code: 'LGE3',
                name: 'Vecpiebalga',
            },
            {
                code: 'LGE4',
                name: 'Vecumnieki',
            },
            {
                code: 'LGE5',
                name: 'Ventspils',
            },
            {
                code: 'LG32',
                name: 'Ventspils',
            },
            {
                code: 'LGE6',
                name: 'Viesite',
            },
            {
                code: 'LGE7',
                name: 'Vilaka',
            },
            {
                code: 'LGE8',
                name: 'Vilani',
            },
            {
                code: 'LGE9',
                name: 'Zilupe',
            },
        ],
    },
    {
        code: 'LB',
        id: 2280,
        name: 'Lebanon',
        states: [
            {
                code: 'LE10',
                name: 'Aakkar',
            },
            {
                code: 'LE07',
                name: 'An Nabatiyah',
            },
            {
                code: 'LE11',
                name: 'Baalbek-Hermel',
            },
            {
                code: 'LE04',
                name: 'Beirut',
            },
            {
                code: 'LE08',
                name: 'Beqaa',
            },
            {
                code: 'LE05',
                name: 'Mount Lebanon',
            },
            {
                code: 'LE09',
                name: 'North Lebanon',
            },
            {
                code: 'LE06',
                name: 'South Lebanon',
            },
        ],
    },
    {
        code: 'LS',
        id: 2281,
        name: 'Lesotho',
        states: [
            {
                code: 'LT10',
                name: 'Berea',
            },
            {
                code: 'LT11',
                name: 'Butha-Buthe',
            },
            {
                code: 'LT12',
                name: 'Leribe',
            },
            {
                code: 'LT14',
                name: 'Mafeteng',
            },
            {
                code: 'LT13',
                name: 'Mafeteng',
            },
            {
                code: 'LT15',
                name: "Mohale's Hoek",
            },
            {
                code: 'LT16',
                name: 'Mokhotlong',
            },
            {
                code: 'LT17',
                name: "Qacha's Nek",
            },
            {
                code: 'LT18',
                name: 'Quthing',
            },
            {
                code: 'LT19',
                name: 'Thaba-Tseka',
            },
        ],
    },
    {
        code: 'LR',
        id: 2282,
        name: 'Liberia',
        states: [
            {
                code: 'LI15',
                name: 'Bomi',
            },
            {
                code: 'LI01',
                name: 'Bong',
            },
            {
                code: 'LI21\t',
                name: 'Gbarpolu',
            },
            {
                code: 'LI11',
                name: 'Grand Bassa',
            },
            {
                code: 'LI12',
                name: 'Grand Cape Mount',
            },
            {
                code: 'LI19',
                name: 'Grand Gedeh',
            },
            {
                code: 'LI16',
                name: 'Grand Kru',
            },
            {
                code: 'LI20',
                name: 'Lofa',
            },
            {
                code: 'LI17',
                name: 'Margibi',
            },
            {
                code: 'LI13',
                name: 'Maryland',
            },
            {
                code: 'LI14',
                name: 'Montserrado',
            },
            {
                code: 'LI09',
                name: 'Nimba',
            },
            {
                code: 'LI22',
                name: 'River Gee',
            },
            {
                code: 'LI18',
                name: 'Rivercess',
            },
            {
                code: 'LI10',
                name: 'Sinoe',
            },
        ],
    },
    {
        code: 'LY',
        id: 2380,
        name: 'Libyan Arab Jamahiriya',
        states: [],
    },
    {
        code: 'LI',
        id: 2284,
        name: 'Liechtenstein',
        states: [],
    },
    {
        code: 'LT',
        id: 2285,
        name: 'Lithuania',
        states: [
            {
                code: 'LH56',
                name: 'Alytus',
            },
            {
                code: 'LH57',
                name: 'Kaunas',
            },
            {
                code: 'LH58',
                name: 'Klaipeda',
            },
            {
                code: 'LH59',
                name: 'Marijampole',
            },
            {
                code: 'LH60',
                name: 'Panevežys',
            },
            {
                code: 'LH61',
                name: 'Siauliai',
            },
            {
                code: 'LH62',
                name: 'Taurage',
            },
            {
                code: 'LH63',
                name: 'Telšiai',
            },
            {
                code: 'LH64',
                name: 'Utena',
            },
            {
                code: 'LH65',
                name: 'Vilnius',
            },
        ],
    },
    {
        code: 'LU',
        id: 2286,
        name: 'Luxembourg',
        states: [
            {
                code: 'LU01',
                name: 'Diekirch',
            },
            {
                code: 'LU02',
                name: 'Grevenmacher',
            },
            {
                code: 'LU03',
                name: 'Luxembourg',
            },
        ],
    },
    {
        code: 'MO',
        id: 2287,
        name: 'Macau',
        states: [],
    },
    {
        code: 'MK',
        id: 2288,
        name: 'Macedonia',
        states: [],
    },
    {
        code: 'YU',
        id: 2367,
        name: 'Macedonia; the Former Yugoslav Republic',
        states: [],
    },
    {
        code: 'MG',
        id: 2289,
        name: 'Madagascar',
        states: [
            {
                code: 'MA05',
                name: 'Antananarivo',
            },
            {
                code: 'MA01',
                name: 'Antsiranana',
            },
            {
                code: 'MA02',
                name: 'Fianarantsoa',
            },
            {
                code: 'MA03',
                name: 'Mahajanga',
            },
            {
                code: 'MA04',
                name: 'Toamasina',
            },
            {
                code: 'MA06',
                name: 'Toliara',
            },
        ],
    },
    {
        code: 'MW',
        id: 2290,
        name: 'Malawi',
        states: [
            {
                code: 'MI26',
                name: 'Balaka',
            },
            {
                code: 'MI24',
                name: 'Blantyre',
            },
            {
                code: 'MI02',
                name: 'Chikwawa',
            },
            {
                code: 'MI03',
                name: 'Chiradzulu',
            },
            {
                code: 'MI04',
                name: 'Chitipa',
            },
            {
                code: 'MI06',
                name: 'Dedza',
            },
            {
                code: 'MI07',
                name: 'Dowa',
            },
            {
                code: 'MI08',
                name: 'Karonga',
            },
            {
                code: 'MI09',
                name: 'Kasungu',
            },
            {
                code: 'MI27',
                name: 'Likoma',
            },
            {
                code: 'MI11',
                name: 'Lilongwe',
            },
            {
                code: 'MI28',
                name: 'Machinga',
            },
            {
                code: 'MI12',
                name: 'Mangochi',
            },
            {
                code: 'MI13',
                name: 'Mchinji',
            },
            {
                code: 'MI29',
                name: 'Mulanje',
            },
            {
                code: 'MI25',
                name: 'Mwanza',
            },
            {
                code: 'MI15',
                name: 'Mzimba',
            },
            {
                code: 'MI31',
                name: 'Neno',
            },
            {
                code: 'MI17',
                name: 'Nkhata Bay',
            },
            {
                code: 'MI18',
                name: 'Nkhotakota',
            },
            {
                code: 'MI19',
                name: 'Nsanje',
            },
            {
                code: 'MI16',
                name: 'Ntcheu',
            },
            {
                code: 'MI20',
                name: 'Ntchisi',
            },
            {
                code: 'MI30',
                name: 'Phalombe',
            },
            {
                code: 'MI21',
                name: 'Rumphi',
            },
            {
                code: 'MI22',
                name: 'Salima',
            },
            {
                code: 'MI05',
                name: 'Thyolo',
            },
            {
                code: 'MI23',
                name: 'Zomba',
            },
        ],
    },
    {
        code: 'MY',
        id: 2291,
        name: 'Malaysia',
        states: [
            {
                code: 'MY01',
                name: 'Johor',
            },
            {
                code: 'MY02',
                name: 'Kedah',
            },
            {
                code: 'MY03',
                name: 'Kelantan',
            },
            {
                code: 'MY04',
                name: 'Melaka',
            },
            {
                code: 'MY05',
                name: 'Negeri Sembilan',
            },
            {
                code: 'MY06',
                name: 'Pahang',
            },
            {
                code: 'MY08',
                name: 'Perak',
            },
            {
                code: 'MY09',
                name: 'Perlis',
            },
            {
                code: 'MY07',
                name: 'Pulau Pinang',
            },
            {
                code: 'MY12',
                name: 'Sabah',
            },
            {
                code: 'MY13',
                name: 'Sarawak',
            },
            {
                code: 'MY10',
                name: 'Selangor',
            },
            {
                code: 'MY11',
                name: 'Terengganu',
            },
            {
                code: 'MY14',
                name: 'W.P. Kuala Lumpur',
            },
            {
                code: 'MY15',
                name: 'W.P. Labuan',
            },
            {
                code: 'MY16',
                name: 'W.P. Putrajaya',
            },
        ],
    },
    {
        code: 'MV',
        id: 2384,
        name: 'Maldives; Republic of',
        states: [],
    },
    {
        code: 'ML',
        id: 2292,
        name: 'Mali',
        states: [
            {
                code: 'ML01',
                name: 'Bamako',
            },
            {
                code: 'ML09',
                name: 'Gao',
            },
            {
                code: 'ML03',
                name: 'Kayes',
            },
            {
                code: 'ML10',
                name: 'Kidal',
            },
            {
                code: 'ML07',
                name: 'Koulikoro',
            },
            {
                code: 'ML.ME',
                name: 'Ménaka',
            },
            {
                code: 'ML04',
                name: 'Mopti',
            },
            {
                code: 'ML05',
                name: 'Ségou',
            },
            {
                code: 'ML06',
                name: 'Sikasso',
            },
            {
                code: 'ML.TD',
                name: 'Taoudénit',
            },
            {
                code: 'ML08',
                name: 'Timbuktu',
            },
        ],
    },
    {
        code: 'MT',
        id: 2293,
        name: 'Malta',
        states: [
            {
                code: 'MT.CE',
                name: 'Central',
            },
            {
                code: 'MT.GO',
                name: 'Gozo',
            },
            {
                code: 'MT.NO',
                name: 'Northern',
            },
            {
                code: 'MT.SE',
                name: 'South Eastern',
            },
            {
                code: 'MT.SO',
                name: 'Southern',
            },
        ],
    },
    {
        code: 'RM',
        id: 2394,
        name: 'Marshall Islands',
        states: [],
    },
    {
        code: 'MQ',
        id: 2423,
        name: 'Martinique',
        states: [],
    },
    {
        code: 'MR',
        id: 2294,
        name: 'Mauritania',
        states: [
            {
                code: 'MR07',
                name: 'Adrar',
            },
            {
                code: 'MR03',
                name: 'Assaba',
            },
            {
                code: 'MR05',
                name: 'Brakna',
            },
            {
                code: 'MR08',
                name: 'Dakhlet Nouadhibou',
            },
            {
                code: 'MR04',
                name: 'Gorgol',
            },
            {
                code: 'MR10',
                name: 'Guidimaka',
            },
            {
                code: 'MR01',
                name: 'Hodh ech Chargui',
            },
            {
                code: 'MR02',
                name: 'Hodh el Gharbi',
            },
            {
                code: 'MR12',
                name: 'Inchiri',
            },
            {
                code: 'MR.NN',
                name: 'Nouakchott Nord',
            },
            {
                code: 'MR13',
                name: 'Nouakchott Ouest',
            },
            {
                code: 'MR.NS',
                name: 'Nouakchott Sud',
            },
            {
                code: 'MR09',
                name: 'Tagant',
            },
            {
                code: 'MR11',
                name: 'Tiris Zemmour',
            },
            {
                code: 'MR06',
                name: 'Trarza',
            },
        ],
    },
    {
        code: 'MU',
        id: 2295,
        name: 'Mauritius',
        states: [
            {
                code: 'MP21',
                name: 'Agalega Islands',
            },
            {
                code: 'MP12',
                name: 'Black River',
            },
            {
                code: 'MP22',
                name: 'Cargados Carajos',
            },
            {
                code: 'MP13',
                name: 'Flacq',
            },
            {
                code: 'MP14',
                name: 'Grand Port',
            },
            {
                code: 'MP15',
                name: 'Moka',
            },
            {
                code: 'MP16',
                name: 'Pamplemousses',
            },
            {
                code: 'MP17',
                name: 'Plaines Wilhems',
            },
            {
                code: 'MP18',
                name: 'Port Louis',
            },
            {
                code: 'MP19',
                name: 'Rivière du Rempart',
            },
            {
                code: 'MP23',
                name: 'Rodrigues',
            },
            {
                code: 'MP20',
                name: 'Savanne',
            },
        ],
    },
    {
        code: 'M999',
        id: 2393,
        name: 'Mayotte',
        states: [],
    },
    {
        code: 'MX',
        id: 2296,
        name: 'Mexico',
        states: [
            {
                code: 'AGU',
                name: 'Aguascalientes',
            },
            {
                code: 'BCS',
                name: 'Baja California Sur',
            },
            {
                code: 'BCN',
                name: 'Baja California',
            },
            {
                code: 'CAM',
                name: 'Campeche',
            },
            {
                code: 'CHP',
                name: 'Chiapas',
            },
            {
                code: 'CHH',
                name: 'Chihuahua',
            },
            {
                code: 'COA',
                name: 'Coahuila',
            },
            {
                code: 'COL',
                name: 'Colima',
            },
            {
                code: 'DIF',
                name: 'Distrito Federal',
            },
            {
                code: 'DUR',
                name: 'Durango',
            },
            {
                code: 'GUA',
                name: 'Guanajuato',
            },
            {
                code: 'GRO',
                name: 'Guerrero',
            },
            {
                code: 'HID',
                name: 'Hidalgo',
            },
            {
                code: 'JAL',
                name: 'Jalisco',
            },
            {
                code: 'MEX',
                name: 'México',
            },
            {
                code: 'MIC',
                name: 'Michoacán',
            },
            {
                code: 'MOR',
                name: 'Morelos',
            },
            {
                code: 'NAY',
                name: 'Nayarit',
            },
            {
                code: 'NLE',
                name: 'Nuevo León',
            },
            {
                code: 'OAX',
                name: 'Oaxaca',
            },
            {
                code: 'PUE',
                name: 'Puebla',
            },
            {
                code: 'QUE',
                name: 'Querétaro',
            },
            {
                code: 'ROO',
                name: 'Quintana Roo',
            },
            {
                code: 'SLP',
                name: 'San Luis Potosí',
            },
            {
                code: 'SIN',
                name: 'Sinaloa',
            },
            {
                code: 'SON',
                name: 'Sonora',
            },
            {
                code: 'TAB',
                name: 'Tabasco',
            },
            {
                code: 'TAM',
                name: 'Tamaulipas',
            },
            {
                code: 'TLA',
                name: 'Tlaxcala',
            },
            {
                code: 'VER',
                name: 'Veracruz',
            },
            {
                code: 'YUC',
                name: 'Yucatán',
            },
            {
                code: 'ZAC',
                name: 'Zacatecas',
            },
        ],
    },
    {
        code: 'FM',
        id: 2297,
        name: 'Micronesia; Federated States of',
        states: [
            {
                code: 'FM03',
                name: 'Chuuk',
            },
            {
                code: 'FM01',
                name: 'Kosrae',
            },
            {
                code: 'FM02',
                name: 'Pohnpei',
            },
            {
                code: 'FM04',
                name: 'Yap',
            },
        ],
    },
    {
        code: 'MD',
        id: 2395,
        name: 'Moldova; Republic of',
        states: [],
    },
    {
        code: 'MC',
        id: 2299,
        name: 'Monaco',
        states: [],
    },
    {
        code: 'MN',
        id: 2300,
        name: 'Mongolia',
        states: [],
    },
    {
        code: 'MJ',
        id: 2396,
        name: 'Montenegro',
        states: [
            {
                code: 'ME-1',
                name: 'Andrijevica',
            },
            {
                code: 'ME-2',
                name: 'Bar',
            },
            {
                code: 'ME-3',
                name: 'Berane',
            },
            {
                code: 'ME-4',
                name: 'Bijelo Polje',
            },
            {
                code: 'ME-5',
                name: 'Budva',
            },
            {
                code: 'ME-6',
                name: 'Cetinje',
            },
            {
                code: 'ME-7',
                name: 'Danilovgrad',
            },
            {
                code: 'ME-8',
                name: 'Herceg Novi',
            },
            {
                code: 'ME-9',
                name: 'Kolašin',
            },
            {
                code: 'ME-10',
                name: 'Kotor',
            },
            {
                code: 'ME-11',
                name: 'Mojkovac',
            },
            {
                code: 'ME-12',
                name: 'Nikšic',
            },
            {
                code: 'ME-13',
                name: 'Plav',
            },
            {
                code: 'ME-14',
                name: 'Pljevlja',
            },
            {
                code: 'ME-15',
                name: 'Plužine',
            },
            {
                code: 'ME-16',
                name: 'Podgorica',
            },
            {
                code: 'ME-17',
                name: 'Rožaje',
            },
            {
                code: 'ME-18',
                name: 'Šavnik',
            },
            {
                code: 'ME-19',
                name: 'Tivat',
            },
            {
                code: 'ME-20',
                name: 'Ulcinj',
            },
            {
                code: 'ME-21',
                name: 'Žabljak',
            },
        ],
    },
    {
        code: 'MS',
        id: 2424,
        name: 'Montserrat',
        states: [],
    },
    {
        code: 'MA',
        id: 2301,
        name: 'Morocco',
        states: [
            {
                code: 'MA.BK',
                name: 'Béni Mellal-Khénifra',
            },
            {
                code: 'MA.CS',
                name: 'Casablanca-Settat',
            },
            {
                code: 'MA.OL',
                name: 'Dakhla-Oued Ed-Dahab',
            },
            {
                code: 'MA.DT',
                name: 'Drâa-Tafilalet',
            },
            {
                code: 'MA.FK',
                name: 'Fès-Meknès',
            },
            {
                code: 'MA.GN',
                name: 'Guelmim-Oued Noun',
            },
            {
                code: 'MA.OF',
                name: "L'oriental",
            },
            {
                code: 'MA.LS',
                name: 'Laâyoune-Sakia al Hamra',
            },
            {
                code: 'MA.MS',
                name: 'Marrakech-Safi',
            },
            {
                code: 'MA.RK',
                name: 'Rabat-Salé-Kénitra',
            },
            {
                code: 'MA.SS',
                name: 'Souss-Massa',
            },
            {
                code: 'MA.TC',
                name: 'Tanger-Tétouan-Al Hoceima',
            },
        ],
    },
    {
        code: 'MZ',
        id: 2302,
        name: 'Mozambique',
        states: [
            {
                code: 'MZ01',
                name: 'Cabo Delgado',
            },
            {
                code: 'MZ02',
                name: 'Gaza',
            },
            {
                code: 'MZ03',
                name: 'Inhambane',
            },
            {
                code: 'MZ10',
                name: 'Manica',
            },
            {
                code: 'MZ11',
                name: 'Maputo [city]',
            },
            {
                code: 'MZ04',
                name: 'Maputo',
            },
            {
                code: 'MZ06',
                name: 'Nampula',
            },
            {
                code: 'MZ07',
                name: 'Niassa',
            },
            {
                code: 'MZ05',
                name: 'Sofala',
            },
            {
                code: 'MZ08',
                name: 'Tete',
            },
            {
                code: 'MZ09',
                name: 'Zambézia',
            },
        ],
    },
    {
        code: 'MM',
        id: 2303,
        name: 'Myanmar',
        states: [
            {
                code: 'MM.AY',
                name: 'Ayeyarwady',
            },
            {
                code: 'MM.BA',
                name: 'Bago',
            },
            {
                code: 'MM.CH',
                name: 'Chin',
            },
            {
                code: 'MM.KC',
                name: 'Kachin',
            },
            {
                code: 'MM.KH',
                name: 'Kayah',
            },
            {
                code: 'MM.KN',
                name: 'Kayin',
            },
            {
                code: 'MM.MG',
                name: 'Magway',
            },
            {
                code: 'MM.ML',
                name: 'Mandalay',
            },
            {
                code: 'MM.MO',
                name: 'Mon',
            },
            {
                code: 'MM.NY',
                name: 'Naypyidaw',
            },
            {
                code: 'MM.RA',
                name: 'Rakhine',
            },
            {
                code: 'MM.SA',
                name: 'Sagaing',
            },
            {
                code: 'MM.SH',
                name: 'Shan',
            },
            {
                code: 'MM.TN',
                name: 'Tanintharyi',
            },
            {
                code: 'MM.YA',
                name: 'Yangon',
            },
        ],
    },
    {
        code: 'NA',
        id: 2304,
        name: 'Namibia',
        states: [
            {
                code: 'WA29',
                name: 'Erongo',
            },
            {
                code: 'WA30',
                name: 'Hardap',
            },
            {
                code: 'WA31',
                name: 'Karas',
            },
            {
                code: 'WA40',
                name: 'Kavango East',
            },
            {
                code: 'WA41',
                name: 'Kavango West',
            },
            {
                code: 'WA21',
                name: 'Khomas',
            },
            {
                code: 'WA32',
                name: 'Kunene',
            },
            {
                code: 'WA33',
                name: 'Ohangwena',
            },
            {
                code: 'WA35',
                name: 'Omaheke',
            },
            {
                code: 'WA36',
                name: 'Omusati',
            },
            {
                code: 'WA37',
                name: 'Oshana',
            },
            {
                code: 'WA38',
                name: 'Oshikoto',
            },
            {
                code: 'WA39',
                name: 'Otjozondjupa',
            },
            {
                code: 'WA28',
                name: 'Zambezi',
            },
        ],
    },
    {
        code: 'NR',
        id: 2397,
        name: 'Nauru',
        states: [],
    },
    {
        code: 'NP',
        id: 2305,
        name: 'Nepal',
        states: [
            {
                code: 'NP.FI',
                name: 'Five',
            },
            {
                code: 'NP.FO',
                name: 'Four',
            },
            {
                code: 'NP.ON',
                name: 'One',
            },
            {
                code: 'NP.SE',
                name: 'Seven',
            },
            {
                code: 'NP.SI',
                name: 'Six',
            },
            {
                code: 'NP.TH',
                name: 'Three',
            },
            {
                code: 'NP.TW',
                name: 'Two',
            },
        ],
    },
    {
        code: 'NL',
        id: 2306,
        name: 'Netherlands',
        states: [
            {
                code: 'DR',
                name: 'Drenthe',
            },
            {
                code: 'FL',
                name: 'Flevoland',
            },
            {
                code: 'FR',
                name: 'Friesland',
            },
            {
                code: 'GE',
                name: 'Gelderland',
            },
            {
                code: 'GR',
                name: 'Groningen',
            },
            {
                code: 'LI',
                name: 'Limburg',
            },
            {
                code: 'NB',
                name: 'Noord-Brabant',
            },
            {
                code: 'NH',
                name: 'Noord-Holland',
            },
            {
                code: 'OV',
                name: 'Overijssel',
            },
            {
                code: 'UT',
                name: 'Utrecht',
            },
            {
                code: 'ZE',
                name: 'Zeeland',
            },
            {
                code: 'ZH',
                name: 'Zuid-Holland',
            },
        ],
    },
    {
        code: 'AN',
        id: 2425,
        name: 'Netherlands Antilles',
        states: [],
    },
    {
        code: 'NC',
        id: 2426,
        name: 'New Caledonia',
        states: [],
    },
    {
        code: 'NZ',
        id: 2307,
        name: 'New Zealand',
        states: [
            {
                code: 'AUK',
                name: 'Auckland',
            },
            {
                code: 'BOP',
                name: 'Bay of Plenty',
            },
            {
                code: 'CAN',
                name: 'Canterbury',
            },
            {
                code: 'CIT',
                name: 'Chatham Islands Territory',
            },
            {
                code: 'GIS',
                name: 'Gisborne',
            },
            {
                code: 'HKB',
                name: "Hawke's Bay",
            },
            {
                code: 'MWT',
                name: 'Manawatu-Wanganui',
            },
            {
                code: 'MBH',
                name: 'Marlborough',
            },
            {
                code: 'NSN',
                name: 'Nelson',
            },
            {
                code: 'N',
                name: 'North Island',
            },
            {
                code: 'NTL',
                name: 'Northland',
            },
            {
                code: 'OTA',
                name: 'Otago',
            },
            {
                code: 'S',
                name: 'South Island',
            },
            {
                code: 'STL',
                name: 'Southland',
            },
            {
                code: 'TKI',
                name: 'Taranaki',
            },
            {
                code: 'TAS',
                name: 'Tasman District',
            },
            {
                code: 'WKO',
                name: 'Waikato',
            },
            {
                code: 'WGN',
                name: 'Wellington',
            },
            {
                code: 'WTC',
                name: 'West Coast',
            },
        ],
    },
    {
        code: 'NI',
        id: 2308,
        name: 'Nicaragua',
        states: [
            {
                code: 'NU01',
                name: 'Boaco',
            },
            {
                code: 'NU02',
                name: 'Carazo',
            },
            {
                code: 'NU03',
                name: 'Chinandega',
            },
            {
                code: 'NU04',
                name: 'Chontales',
            },
            {
                code: 'NU05',
                name: 'Estelí',
            },
            {
                code: 'NU06',
                name: 'Granada',
            },
            {
                code: 'NU07',
                name: 'Jinotega',
            },
            {
                code: 'NU08',
                name: 'León',
            },
            {
                code: 'NU09',
                name: 'Madriz',
            },
            {
                code: 'NU10',
                name: 'Managua',
            },
            {
                code: 'NU11',
                name: 'Masaya',
            },
            {
                code: 'NU12',
                name: 'Matagalpa',
            },
            {
                code: 'NU13',
                name: 'Nueva Segovia',
            },
            {
                code: 'NU17',
                name: 'Región Autónoma del Caribe Norte',
            },
            {
                code: 'NU18',
                name: 'Región Autónoma del Caribe Sur',
            },
            {
                code: 'NU14',
                name: 'Río San Juan',
            },
            {
                code: 'NU15',
                name: 'Rivas',
            },
        ],
    },
    {
        code: 'NE',
        id: 2309,
        name: 'Niger',
        states: [
            {
                code: 'NG01',
                name: 'Agadez',
            },
            {
                code: 'NG02',
                name: 'Diffa',
            },
            {
                code: 'NG03',
                name: 'Dosso',
            },
            {
                code: 'NG04',
                name: 'Maradi',
            },
            {
                code: 'NG08',
                name: 'Niamey',
            },
            {
                code: 'NG06',
                name: 'Tahoua',
            },
            {
                code: 'NG09',
                name: 'Tillabéri',
            },
            {
                code: 'NG07',
                name: 'Zinder',
            },
        ],
    },
    {
        code: 'NG',
        id: 2310,
        name: 'Nigeria',
        states: [
            {
                code: 'NI45',
                name: 'Abia',
            },
            {
                code: 'NI35',
                name: 'Adamawa',
            },
            {
                code: 'NI21',
                name: 'Akwa Ibom',
            },
            {
                code: 'NI25',
                name: 'Anambra',
            },
            {
                code: 'NI46',
                name: 'Bauchi',
            },
            {
                code: 'NI52',
                name: 'Bayelsa',
            },
            {
                code: 'NI26',
                name: 'Benue',
            },
            {
                code: 'NI27',
                name: 'Borno',
            },
            {
                code: 'NI22',
                name: 'Cross River',
            },
            {
                code: 'NI36',
                name: 'Delta',
            },
            {
                code: 'NI53',
                name: 'Ebonyi',
            },
            {
                code: 'NI37',
                name: 'Edo',
            },
            {
                code: 'NI54',
                name: 'Ekiti',
            },
            {
                code: 'NI47',
                name: 'Enugu',
            },
            {
                code: 'NI11',
                name: 'Federal Capital Territory',
            },
            {
                code: 'NI55',
                name: 'Gombe',
            },
            {
                code: 'NI28',
                name: 'Imo',
            },
            {
                code: 'NI39',
                name: 'Jigawa',
            },
            {
                code: 'NI23',
                name: 'Kaduna',
            },
            {
                code: 'NI29',
                name: 'Kano',
            },
            {
                code: 'NI24',
                name: 'Katsina',
            },
            {
                code: 'NI40',
                name: 'Kebbi',
            },
            {
                code: 'NI41',
                name: 'Kogi',
            },
            {
                code: 'NI30',
                name: 'Kwara',
            },
            {
                code: 'NI05',
                name: 'Lagos',
            },
            {
                code: 'NI56',
                name: 'Nassarawa',
            },
            {
                code: 'NI31',
                name: 'Niger',
            },
            {
                code: 'NI16',
                name: 'Ogun',
            },
            {
                code: 'NI48',
                name: 'Ondo',
            },
            {
                code: 'NI42',
                name: 'Osun',
            },
            {
                code: 'NI32',
                name: 'Oyo',
            },
            {
                code: 'NI49',
                name: 'Plateau',
            },
            {
                code: 'NI50',
                name: 'Rivers',
            },
            {
                code: 'NI51',
                name: 'Sokoto',
            },
            {
                code: 'NI43',
                name: 'Taraba',
            },
            {
                code: 'NI44',
                name: 'Yobe',
            },
            {
                code: 'NI57',
                name: 'Zamfara',
            },
        ],
    },
    {
        code: 'NU',
        id: 2427,
        name: 'Niue',
        states: [],
    },
    {
        code: 'NF',
        id: 2428,
        name: 'Norfolk Island',
        states: [],
    },
    {
        code: 'MP',
        id: 2429,
        name: 'Northern Mariana Islands',
        states: [],
    },
    {
        code: 'NO',
        id: 2311,
        name: 'Norway',
        states: [
            {
                code: 'NO02',
                name: 'Akershus',
            },
            {
                code: 'NO09',
                name: 'Aust-Agder',
            },
            {
                code: 'NO06',
                name: 'Buskerud',
            },
            {
                code: 'NO20',
                name: 'Finnmark',
            },
            {
                code: 'NO04',
                name: 'Hedmark',
            },
            {
                code: 'NO12',
                name: 'Hordaland',
            },
            {
                code: 'NO22',
                name: 'Jan Mayen (Arctic Region)',
            },
            {
                code: 'NO15',
                name: 'Møre og Romsdal',
            },
            {
                code: 'NO17',
                name: 'Nord-Trøndelag',
            },
            {
                code: 'NO18',
                name: 'Nordland',
            },
            {
                code: 'NO05',
                name: 'Oppland',
            },
            {
                code: 'NO03',
                name: 'Oslo',
            },
            {
                code: 'NO01',
                name: 'Østfold',
            },
            {
                code: 'NO11',
                name: 'Rogaland',
            },
            {
                code: 'NO14',
                name: 'Sogn og Fjordane',
            },
            {
                code: 'NO16',
                name: 'Sør-Trøndelag',
            },
            {
                code: 'NO21',
                name: 'Svalbard (Arctic Region)',
            },
            {
                code: 'NO08',
                name: 'Telemark',
            },
            {
                code: 'NO19',
                name: 'Troms',
            },
            {
                code: 'NO10',
                name: 'Vest-Agder',
            },
            {
                code: 'NO07',
                name: 'Vestfold',
            },
        ],
    },
    {
        code: 'OM',
        id: 2312,
        name: 'Oman',
        states: [
            {
                code: 'MU01',
                name: 'Ad Dakhliyah',
            },
            {
                code: 'MU09',
                name: 'Adh Dhahirah',
            },
            {
                code: 'MU11',
                name: 'Al Batinah North',
            },
            {
                code: 'MU02',
                name: 'Al Batinah South',
            },
            {
                code: 'MU10',
                name: 'Al Buraymi',
            },
            {
                code: 'MU03',
                name: 'Al Wusta',
            },
            {
                code: 'MU12',
                name: 'Ash Sharqiyah North',
            },
            {
                code: 'MU04',
                name: 'Ash Sharqiyah South',
            },
            {
                code: 'MU08',
                name: 'Dhofar',
            },
            {
                code: 'MU07',
                name: 'Musandam',
            },
            {
                code: 'MU06',
                name: 'Muscat',
            },
        ],
    },
    {
        code: 'PK',
        id: 2313,
        name: 'Pakistan',
        states: [
            {
                code: 'PK06',
                name: 'Azad Kashmir',
            },
            {
                code: 'PK02',
                name: 'Balochistan',
            },
            {
                code: 'PK01',
                name: 'Federally Administered Tribal Areas',
            },
            {
                code: 'PK07',
                name: 'Gilgit-Baltistan',
            },
            {
                code: 'PK08',
                name: 'Islamabad',
            },
            {
                code: 'PK03',
                name: 'Khyber-Pakhtunkhwa',
            },
            {
                code: 'PK04',
                name: 'Punjab',
            },
            {
                code: 'PK05',
                name: 'Sindh',
            },
        ],
    },
    {
        code: 'PW',
        id: 2314,
        name: 'Palau',
        states: [],
    },
    {
        code: 'PS',
        id: 2430,
        name: 'Palestinian Territory; Occupied',
        states: [],
    },
    {
        code: 'PA',
        id: 2315,
        name: 'Panama',
        states: [
            {
                code: 'PM01',
                name: 'Bocas del Toro',
            },
            {
                code: 'PM02\t',
                name: 'Chiriquí',
            },
            {
                code: 'PM03',
                name: 'Coclé',
            },
            {
                code: 'PM04',
                name: 'Coclé',
            },
            {
                code: 'PM05',
                name: 'Darién',
            },
            {
                code: 'PM11',
                name: 'Emberá',
            },
            {
                code: 'PM06',
                name: 'Herrera',
            },
            {
                code: 'PM09',
                name: 'Kuna Yala',
            },
            {
                code: 'PM07',
                name: 'Los Santos',
            },
            {
                code: 'PM12',
                name: 'Ngäbe Buglé',
            },
            {
                code: 'PM13',
                name: 'Panamá Oeste',
            },
            {
                code: 'PM08',
                name: 'Panamá',
            },
            {
                code: 'PM10',
                name: 'Veraguas',
            },
        ],
    },
    {
        code: 'PG',
        id: 2316,
        name: 'Papua New Guinea',
        states: [
            {
                code: 'PP07',
                name: 'Bougainville',
            },
            {
                code: 'PP01',
                name: 'Central',
            },
            {
                code: 'PP08',
                name: 'Chimbu',
            },
            {
                code: 'PP10',
                name: 'East New Britain',
            },
            {
                code: 'PP11',
                name: 'East Sepik',
            },
            {
                code: 'PP09',
                name: 'Eastern Highlands',
            },
            {
                code: 'PP19',
                name: 'Enga',
            },
            {
                code: 'PP02',
                name: 'Gulf',
            },
            {
                code: 'PP21',
                name: 'Hela',
            },
            {
                code: 'PP22',
                name: 'Jiwaka',
            },
            {
                code: 'PP12',
                name: 'Madang',
            },
            {
                code: 'PP13',
                name: 'Manus',
            },
            {
                code: 'PP03',
                name: 'Milne Bay',
            },
            {
                code: 'PP14',
                name: 'Morobe',
            },
            {
                code: 'PP20',
                name: 'National Capital District',
            },
            {
                code: 'PP15',
                name: 'New Ireland',
            },
            {
                code: 'PP04',
                name: 'Northern',
            },
            {
                code: 'PP18',
                name: 'Sandaun',
            },
            {
                code: 'PP05',
                name: 'Southern Highlands',
            },
            {
                code: 'PP17',
                name: 'West New Britain',
            },
            {
                code: 'PP06',
                name: 'Western',
            },
            {
                code: 'PP16',
                name: 'Western Highlands',
            },
        ],
    },
    {
        code: 'PY',
        id: 2317,
        name: 'Paraguay',
        states: [
            {
                code: 'PA23',
                name: 'Alto Paraguay',
            },
            {
                code: 'PA01',
                name: 'Alto Paraná',
            },
            {
                code: 'PA02',
                name: 'Amambay',
            },
            {
                code: 'PA22',
                name: 'Asunción',
            },
            {
                code: 'PA24',
                name: 'Boquerón',
            },
            {
                code: 'PA04',
                name: 'Caaguazú',
            },
            {
                code: 'PA05',
                name: 'Caazapá',
            },
            {
                code: 'PA19',
                name: 'Canindeyú',
            },
            {
                code: 'PA06',
                name: 'Central',
            },
            {
                code: 'PA07',
                name: 'Concepción',
            },
            {
                code: 'PA08',
                name: 'Cordillera',
            },
            {
                code: 'PA10',
                name: 'Guairá',
            },
            {
                code: 'PA11',
                name: 'Itapúa',
            },
            {
                code: 'PA12',
                name: 'Misiones',
            },
            {
                code: 'PA15',
                name: 'Paraguarí',
            },
            {
                code: 'PA16',
                name: 'Presidente Hayes',
            },
            {
                code: 'PA17',
                name: 'San Pedro',
            },
            {
                code: 'PA13',
                name: 'Ñeembucú',
            },
        ],
    },
    {
        code: 'PE',
        id: 2318,
        name: 'Peru',
        states: [
            {
                code: 'PE01',
                name: 'Amazonas',
            },
            {
                code: 'PE02',
                name: 'Ancash',
            },
            {
                code: 'PE03',
                name: 'Apurímac',
            },
            {
                code: 'PE04',
                name: 'Arequipa',
            },
            {
                code: 'PE05',
                name: 'Ayacucho',
            },
            {
                code: 'PE06',
                name: 'Cajamarca',
            },
            {
                code: 'PE07',
                name: 'Callao',
            },
            {
                code: 'PE08',
                name: 'Cusco',
            },
            {
                code: 'PE09',
                name: 'Huancavelica',
            },
            {
                code: 'PE10',
                name: 'Huánuco',
            },
            {
                code: 'PE11',
                name: 'Ica',
            },
            {
                code: 'PE12',
                name: 'Junín',
            },
            {
                code: 'PE13',
                name: 'La Libertad',
            },
            {
                code: 'PE14',
                name: 'Lambayeque',
            },
            {
                code: 'PE15',
                name: 'Lima',
            },
            {
                code: 'PE26',
                name: 'Lima [Province]',
            },
            {
                code: 'PE16',
                name: 'Loreto',
            },
            {
                code: 'PE17',
                name: 'Madre de Dios',
            },
            {
                code: 'PE18',
                name: 'Moquegua',
            },
            {
                code: 'PE19',
                name: 'Pasco',
            },
            {
                code: 'PE20',
                name: 'Piura',
            },
            {
                code: 'PE21',
                name: 'Puno',
            },
            {
                code: 'PE22',
                name: 'San Martín',
            },
            {
                code: 'PE23',
                name: 'Tacna',
            },
            {
                code: 'PE24',
                name: 'Tumbes',
            },
            {
                code: 'PE25',
                name: 'Ucayali',
            },
        ],
    },
    {
        code: 'PH',
        id: 2319,
        name: 'Philippines',
        states: [
            {
                code: 'RP01',
                name: 'Abra',
            },
            {
                code: 'RP02',
                name: 'Agusan del Norte',
            },
            {
                code: 'RP03',
                name: 'Agusan del Sur',
            },
            {
                code: 'RP04',
                name: 'Aklan',
            },
            {
                code: 'RP05',
                name: 'Albay',
            },
            {
                code: 'RP06',
                name: 'Antique',
            },
            {
                code: 'RPH6',
                name: 'Apayao',
            },
            {
                code: 'RPG8',
                name: 'Aurora',
            },
            {
                code: 'RP22',
                name: 'Basilan',
            },
            {
                code: 'RP07',
                name: 'Bataan',
            },
            {
                code: 'RP08',
                name: 'Batanes',
            },
            {
                code: 'RP09',
                name: 'Batangas',
            },
            {
                code: 'RP10',
                name: 'Benguet',
            },
            {
                code: 'RPH9',
                name: 'Biliran',
            },
            {
                code: 'RP11',
                name: 'Bohol',
            },
            {
                code: 'RP12',
                name: 'Bukidnon',
            },
            {
                code: 'RP13',
                name: 'Bulacan',
            },
            {
                code: 'RP14',
                name: 'Cagayan',
            },
            {
                code: 'RP15',
                name: 'Camarines Norte',
            },
            {
                code: 'RP16',
                name: 'Camarines Sur',
            },
            {
                code: 'RP17',
                name: 'Camiguin',
            },
            {
                code: 'RP18',
                name: 'Capiz',
            },
            {
                code: 'RP19',
                name: 'Catanduanes',
            },
            {
                code: 'RP20',
                name: 'Cavite',
            },
            {
                code: 'RP21',
                name: 'Cebu',
            },
            {
                code: 'RPI6',
                name: 'Compostela Valley',
            },
            {
                code: 'RP57',
                name: 'Cotabato',
            },
            {
                code: 'RP26',
                name: 'Davao Oriental',
            },
            {
                code: 'RPI7',
                name: 'Davao del Norte',
            },
            {
                code: 'RP25',
                name: 'Davao del Sur',
            },
            {
                code: 'RPI9',
                name: 'Dinagat Islands',
            },
            {
                code: 'RP23',
                name: 'Eastern Samar',
            },
            {
                code: 'RPJ3',
                name: 'Guimaras',
            },
            {
                code: 'RP27',
                name: 'Ifugao',
            },
            {
                code: 'RP28',
                name: 'Ilocos Norte',
            },
            {
                code: 'RP29',
                name: 'Ilocos Sur',
            },
            {
                code: 'RP30',
                name: 'Iloilo',
            },
            {
                code: 'RP31',
                name: 'Isabela',
            },
            {
                code: 'RPJ7',
                name: 'Kalinga',
            },
            {
                code: 'RP36',
                name: 'La Union',
            },
            {
                code: 'RP33',
                name: 'Laguna',
            },
            {
                code: 'RP34',
                name: 'Lanao del Norte',
            },
            {
                code: 'RP35',
                name: 'Lanao del Sur',
            },
            {
                code: 'RP37',
                name: 'Leyte',
            },
            {
                code: 'RP56',
                name: 'Maguindanao',
            },
            {
                code: 'RP38',
                name: 'Marinduque',
            },
            {
                code: 'RP39',
                name: 'Masbate',
            },
            {
                code: 'RPD9',
                name: 'Metropolitan Manila',
            },
            {
                code: 'RP42',
                name: 'Misamis Occidental',
            },
            {
                code: 'RP43',
                name: 'Misamis Oriental',
            },
            {
                code: 'RP44',
                name: 'Mountain',
            },
            {
                code: 'RPH3',
                name: 'Negros Occidental',
            },
            {
                code: 'RP46',
                name: 'Negros Oriental',
            },
            {
                code: 'RP67',
                name: 'Northern Samar',
            },
            {
                code: 'RP47',
                name: 'Nueva Ecija',
            },
            {
                code: 'RP48',
                name: 'Nueva Vizcaya',
            },
            {
                code: 'RP40',
                name: 'Occidental Mindoro',
            },
            {
                code: 'RP41',
                name: 'Oriental Mindoro',
            },
            {
                code: 'RP49',
                name: 'Palawan',
            },
            {
                code: 'RP50',
                name: 'Pampanga',
            },
            {
                code: 'RP51',
                name: 'Pangasinan',
            },
            {
                code: 'RPH2',
                name: 'Quezon',
            },
            {
                code: 'RP68',
                name: 'Quirino',
            },
            {
                code: 'RP53',
                name: 'Rizal',
            },
            {
                code: 'RP54',
                name: 'Romblon',
            },
            {
                code: 'RP55',
                name: 'Samar',
            },
            {
                code: 'PH72',
                name: 'Sarangani',
            },
            {
                code: 'RP69',
                name: 'Siquijor',
            },
            {
                code: 'RP58',
                name: 'Sorsogon',
            },
            {
                code: 'RP70',
                name: 'South Cotabato',
            },
            {
                code: 'RP59',
                name: 'Southern Leyte',
            },
            {
                code: 'RP71',
                name: 'Sultan Kudarat',
            },
            {
                code: 'RP60',
                name: 'Sulu',
            },
            {
                code: 'RP61',
                name: 'Surigao del Norte',
            },
            {
                code: 'RP62',
                name: 'Surigao del Sur',
            },
            {
                code: 'RPO3',
                name: 'Tarlac',
            },
            {
                code: 'RPO4',
                name: 'Tawi-Tawi',
            },
            {
                code: 'RPP1',
                name: 'Zambales',
            },
            {
                code: 'RPG7',
                name: 'Zamboanga del Norte',
            },
            {
                code: 'RP65',
                name: 'Zamboanga del Sur',
            },
            {
                code: 'RP66',
                name: 'Zamboanga-Sibugay',
            },
        ],
    },
    {
        code: 'PN',
        id: 2431,
        name: 'Pitcairn',
        states: [],
    },
    {
        code: 'PL',
        id: 2320,
        name: 'Poland',
        states: [
            {
                code: 'PL-DS',
                name: 'Dolnoslaskie',
            },
            {
                code: 'PL-KP',
                name: 'Kujawsko-pomorskie',
            },
            {
                code: 'PL-LD',
                name: 'Lódzkie',
            },
            {
                code: 'PL-LU',
                name: 'Lubelskie',
            },
            {
                code: 'PL-LB',
                name: 'Lubuskie',
            },
            {
                code: 'PL-MA',
                name: 'Malopolskie',
            },
            {
                code: 'PL-MZ',
                name: 'Mazowieckie',
            },
            {
                code: 'PL-OP',
                name: 'Opolskie',
            },
            {
                code: 'PL-PK',
                name: 'Podkarpackie',
            },
            {
                code: 'PL-PD',
                name: 'Podlaskie',
            },
            {
                code: 'PL-PM',
                name: 'Pomorskie',
            },
            {
                code: 'PL-SL',
                name: 'Slaskie',
            },
            {
                code: 'PL-SK',
                name: 'Swietokrzyskie',
            },
            {
                code: 'PL-WN',
                name: 'Warminsko-mazurskie',
            },
            {
                code: 'PL-WP',
                name: 'Wielkopolskie',
            },
        ],
    },
    {
        code: 'PT',
        id: 2321,
        name: 'Portugal',
        states: [
            {
                code: 'PO23',
                name: 'Acores Autonomous',
            },
            {
                code: 'PO02',
                name: 'Aveiro',
            },
            {
                code: 'PO03',
                name: 'Beja',
            },
            {
                code: 'PO04',
                name: 'Braga',
            },
            {
                code: 'PO05',
                name: 'Braganca',
            },
            {
                code: 'PO06',
                name: 'Castelo Branco',
            },
            {
                code: 'PO07',
                name: 'Coimbra',
            },
            {
                code: 'PO08',
                name: 'Evora',
            },
            {
                code: 'PO09',
                name: 'Faro',
            },
            {
                code: 'PO11',
                name: 'Guarda',
            },
            {
                code: 'PO13',
                name: 'Leiria',
            },
            {
                code: 'PO14',
                name: 'Lisboa',
            },
            {
                code: 'PO10',
                name: 'Madeira Autonomous',
            },
            {
                code: 'PO16',
                name: 'Portalegre',
            },
            {
                code: 'PO17',
                name: 'Porto',
            },
            {
                code: 'PO18',
                name: 'Santarem',
            },
            {
                code: 'PO19',
                name: 'Setubal',
            },
            {
                code: 'PO20',
                name: 'Viana do Castelo',
            },
            {
                code: 'PO21',
                name: 'Vila Real',
            },
            {
                code: 'PO22',
                name: 'Viseu',
            },
        ],
    },
    {
        code: 'PR',
        id: 2374,
        name: 'Puerto Rico',
        states: [
            {
                code: 'PR.AJ',
                name: 'Adjuntas',
            },
            {
                code: 'PR.AD',
                name: 'Aguada',
            },
            {
                code: 'PR.AL',
                name: 'Aguadilla',
            },
            {
                code: 'PR.AB',
                name: 'Aguas Buenas',
            },
            {
                code: 'PR.AI',
                name: 'Aibonito',
            },
            {
                code: 'PR.AN',
                name: 'Añasco',
            },
            {
                code: 'PR.AC',
                name: 'Arecibo',
            },
            {
                code: 'PR.AR',
                name: 'Arroyo',
            },
            {
                code: 'PR.BC',
                name: 'Barceloneta',
            },
            {
                code: 'PR.BQ',
                name: 'Barranquitas',
            },
            {
                code: 'PR.BY',
                name: 'Bayamón',
            },
            {
                code: 'PR.CR',
                name: 'Cabo Rojo',
            },
            {
                code: 'PR.CG',
                name: 'Caguas',
            },
            {
                code: 'PR.CA',
                name: 'Camuy',
            },
            {
                code: 'PR.CV',
                name: 'Canóvanas',
            },
            {
                code: 'PR.CN',
                name: 'Carolina',
            },
            {
                code: 'PR.CT',
                name: 'Cataño',
            },
            {
                code: 'PR.CY',
                name: 'Cayey',
            },
            {
                code: 'PR.CB',
                name: 'Ceiba',
            },
            {
                code: 'PR.CL',
                name: 'Ciales',
            },
            {
                code: 'PR.CD',
                name: 'Cidra',
            },
            {
                code: 'PR.CO',
                name: 'Coamo',
            },
            {
                code: 'PR.CM',
                name: 'Comerío',
            },
            {
                code: 'PR.CZ',
                name: 'Corozal',
            },
            {
                code: 'PR.CU',
                name: 'Culebra',
            },
            {
                code: 'PR.DO',
                name: 'Dorado',
            },
            {
                code: 'PR.FJ',
                name: 'Fajardo',
            },
            {
                code: 'PR.FL',
                name: 'Florida',
            },
            {
                code: 'PR.GC',
                name: 'Guánica',
            },
            {
                code: 'PR.GM',
                name: 'Guayama',
            },
            {
                code: 'PR.GL',
                name: 'Guayanilla',
            },
            {
                code: 'PR.GB',
                name: 'Guaynabo',
            },
            {
                code: 'PR.GR',
                name: 'Gurabo',
            },
            {
                code: 'PR.HA',
                name: 'Hatillo',
            },
            {
                code: 'PR.HO',
                name: 'Hormigueros',
            },
            {
                code: 'PR.HU',
                name: 'Humacao',
            },
            {
                code: 'PR.IS',
                name: 'Isabela',
            },
            {
                code: 'PR.JY',
                name: 'Jayuya',
            },
            {
                code: 'PR.JD',
                name: 'Juana Díaz',
            },
            {
                code: 'PR.JC',
                name: 'Juncos',
            },
            {
                code: 'PR.LJ',
                name: 'Lajas',
            },
            {
                code: 'PR.LR',
                name: 'Lares',
            },
            {
                code: 'PR.LM',
                name: 'Las Marías',
            },
            {
                code: 'PR.LP',
                name: 'Las Piedras',
            },
            {
                code: 'PR.LZ',
                name: 'Loíza',
            },
            {
                code: 'PR.LQ',
                name: 'Luquillo',
            },
            {
                code: 'PR.MT',
                name: 'Manatí',
            },
            {
                code: 'PR.MR',
                name: 'Maricao',
            },
            {
                code: 'PR.MB',
                name: 'Maunabo',
            },
            {
                code: 'PR.MG',
                name: 'Mayagüez',
            },
            {
                code: 'PR.MC',
                name: 'Moca',
            },
            {
                code: 'PR.MV',
                name: 'Morovis',
            },
            {
                code: 'PR.NG',
                name: 'Naguabo',
            },
            {
                code: 'PR.NR',
                name: 'Naranjito',
            },
            {
                code: 'PR.OR',
                name: 'Orocovis',
            },
            {
                code: 'PR.PT',
                name: 'Patillas',
            },
            {
                code: 'PR.PN\t',
                name: 'Peñuelas',
            },
            {
                code: 'PR.PO',
                name: 'Ponce',
            },
            {
                code: 'PR.QB',
                name: 'Quebradillas',
            },
            {
                code: 'PR.RC',
                name: 'Rincón',
            },
            {
                code: 'PR.RG',
                name: 'Río Grande',
            },
            {
                code: 'PR.SB',
                name: 'Sabana Grande',
            },
            {
                code: 'PR.SA',
                name: 'Salinas',
            },
            {
                code: 'PR.SG',
                name: 'San Germán',
            },
            {
                code: 'PR.SJ',
                name: 'San Juan',
            },
            {
                code: 'PR.SL',
                name: 'San Lorenzo',
            },
            {
                code: 'PR.SS',
                name: 'San Sebastián',
            },
            {
                code: 'PR.SI',
                name: 'Santa Isabel',
            },
            {
                code: 'PR.TA',
                name: 'Toa Alta',
            },
            {
                code: 'PR.TB',
                name: 'Toa Baja',
            },
            {
                code: 'PR.TJ',
                name: 'Trujillo Alto',
            },
            {
                code: 'PR.UT',
                name: 'Utuado',
            },
            {
                code: 'PR.VA',
                name: 'Vega Alta',
            },
            {
                code: 'PR.VB',
                name: 'Vega Baja',
            },
            {
                code: 'PR.VQ',
                name: 'Vieques',
            },
            {
                code: 'PR.VL',
                name: 'Villalba',
            },
            {
                code: 'PR.YB',
                name: 'Yabucoa',
            },
            {
                code: 'PR.YU',
                name: 'Yauco',
            },
        ],
    },
    {
        code: 'QA',
        id: 2322,
        name: 'Qatar',
        states: [
            {
                code: 'QA01',
                name: 'Ad Dawhah',
            },
            {
                code: 'QA13',
                name: 'Al Daayen',
            },
            {
                code: 'QA04',
                name: 'Al Khawr',
            },
            {
                code: 'QA10',
                name: 'Al Wakrah',
            },
            {
                code: 'QA14',
                name: 'Al-Shahaniya',
            },
            {
                code: 'QA06',
                name: 'Ar Rayyan',
            },
            {
                code: 'QA08',
                name: 'Madinat ach Shamal',
            },
            {
                code: 'QA09',
                name: 'Umm Salal',
            },
        ],
    },
    {
        code: 'R999',
        id: 2398,
        name: 'Reunion',
        states: [],
    },
    {
        code: 'RO',
        id: 2323,
        name: 'Romania',
        states: [
            {
                code: 'RO-AB',
                name: 'Alba',
            },
            {
                code: 'RO-AR',
                name: 'Arad',
            },
            {
                code: 'RO-AG',
                name: 'Arges',
            },
            {
                code: 'RO-BC',
                name: 'Bacau',
            },
            {
                code: 'RO-BH',
                name: 'Bihor',
            },
            {
                code: 'RO-BN',
                name: 'Bistrita-Nasaud',
            },
            {
                code: 'RO-BT',
                name: 'Botosani',
            },
            {
                code: 'RO-BR',
                name: 'Braila',
            },
            {
                code: 'RO-BV',
                name: 'Brasov',
            },
            {
                code: 'RO-B',
                name: 'Bucuresti',
            },
            {
                code: 'RO-BZ',
                name: 'Buzau',
            },
            {
                code: 'RO-CL',
                name: 'Calarasi',
            },
            {
                code: 'RO-CS',
                name: 'Caras-Severin',
            },
            {
                code: 'RO-CJ',
                name: 'Cluj',
            },
            {
                code: 'RO-CT',
                name: 'Constanta',
            },
            {
                code: 'RO-CV',
                name: 'Covasna',
            },
            {
                code: 'RO-DB',
                name: 'Dâmbovita',
            },
            {
                code: 'RO-DJ',
                name: 'Dolj',
            },
            {
                code: 'RO-GL',
                name: 'Galati',
            },
            {
                code: 'RO-GR',
                name: 'Giurgiu',
            },
            {
                code: 'RO-GJ',
                name: 'Gorj',
            },
            {
                code: 'RO-HR',
                name: 'Harghita',
            },
            {
                code: 'RO-HD',
                name: 'Hunedoara',
            },
            {
                code: 'RO-IL',
                name: 'Ialomita',
            },
            {
                code: 'RO-IS',
                name: 'Iasi',
            },
            {
                code: 'RO-IF',
                name: 'Ilfov',
            },
            {
                code: 'RO-MM',
                name: 'Maramures',
            },
            {
                code: 'RO-MH',
                name: 'Mehedinti',
            },
            {
                code: 'RO-MS',
                name: 'Mures',
            },
            {
                code: 'RO-NT',
                name: 'Neamt',
            },
            {
                code: 'RO-OT',
                name: 'Olt',
            },
            {
                code: 'RO-PH',
                name: 'Prahova',
            },
            {
                code: 'RO-SJ',
                name: 'Salaj',
            },
            {
                code: 'RO-SM',
                name: 'Satu Mare',
            },
            {
                code: 'RO-SB',
                name: 'Sibiu',
            },
            {
                code: 'RO-SV',
                name: 'Suceava',
            },
            {
                code: 'RO-TR',
                name: 'Teleorman',
            },
            {
                code: 'RO-TM',
                name: 'Timis',
            },
            {
                code: 'RO-TL',
                name: 'Tulcea',
            },
            {
                code: 'RO-VL',
                name: 'Vâlcea',
            },
            {
                code: 'RO-VS',
                name: 'Vaslui',
            },
            {
                code: 'RO-VN',
                name: 'Vrancea',
            },
        ],
    },
    {
        code: 'RU',
        id: 2324,
        name: 'Russian Federation',
        states: [
            {
                code: 'RS01',
                name: 'Adygeya Republic',
            },
            {
                code: 'RS02',
                name: 'Aginskiy Buryatskiy Avtonomnyy Okrug',
            },
            {
                code: 'RS03',
                name: 'Altay Republic',
            },
            {
                code: 'RS04',
                name: 'Altayskiy Kray',
            },
            {
                code: 'RS05',
                name: "Amurskaya Oblast'",
            },
            {
                code: 'RS06',
                name: "Arkhangel'skaya Oblast'",
            },
            {
                code: 'RS07',
                name: "Astrakhanskaya Oblast'",
            },
            {
                code: 'RS08',
                name: 'Bashkortostan Republic',
            },
            {
                code: 'RS09',
                name: "Belgorodskaya Oblast'",
            },
            {
                code: 'RS10',
                name: "Bryanskaya Oblast'",
            },
            {
                code: 'RS11',
                name: 'Buryatiya Republic',
            },
            {
                code: 'RSCI',
                name: 'Chechnya Republic',
            },
            {
                code: 'RS13',
                name: "Chelyabinskaya Oblast'",
            },
            {
                code: 'RS14',
                name: "Chitinskaya Oblast'",
            },
            {
                code: 'RS15',
                name: 'Chukotskiy Avtonomnyy Okrug',
            },
            {
                code: 'RS16',
                name: 'Chuvashiya Republic',
            },
            {
                code: 'RS17',
                name: 'Dagestan Republic',
            },
            {
                code: 'RS18',
                name: 'Evenkiyskiy Avtonomnyy Okrug',
            },
            {
                code: 'RS20',
                name: "Irkutskaya Oblast'",
            },
            {
                code: 'RS21',
                name: "Ivanovskaya Oblast'",
            },
            {
                code: 'RS22',
                name: 'Kabardino-Balkariya Republic',
            },
            {
                code: 'RS23',
                name: "Kaliningradskaya Oblast'",
            },
            {
                code: 'RS24',
                name: 'Kalmykiya Republic',
            },
            {
                code: 'RS25',
                name: "Kaluzhskaya Oblast'",
            },
            {
                code: 'RS26',
                name: "Kamchatskaya Oblast'",
            },
            {
                code: 'RS27',
                name: 'Karachayevo-Cherkesiya Republic',
            },
            {
                code: 'RS28',
                name: 'Kareliya Republic',
            },
            {
                code: 'RS29',
                name: "Kemerovskaya Oblast'",
            },
            {
                code: 'RS30',
                name: 'Khabarovskiy Kray',
            },
            {
                code: 'RS31',
                name: 'Khakasiya Republic',
            },
            {
                code: 'RS32',
                name: 'Khanty-Mansiyskiy Avtonomnyy Okrug',
            },
            {
                code: 'RS33',
                name: "Kirovskaya Oblast'",
            },
            {
                code: 'RS34',
                name: 'Komi Republic',
            },
            {
                code: 'RS36',
                name: 'Koryakskiy Avtonomnyy Okrug',
            },
            {
                code: 'RS37',
                name: "Kostromskaya Oblast'",
            },
            {
                code: 'RS38',
                name: 'Krasnodarskiy Kray',
            },
            {
                code: 'RS39',
                name: 'Krasnoyarskiy Kray',
            },
            {
                code: 'RS40',
                name: "Kurganskaya Oblast'",
            },
            {
                code: 'RS41',
                name: "Kurskaya Oblast'",
            },
            {
                code: 'RS42',
                name: "Leningradskaya Oblast'",
            },
            {
                code: 'RS43',
                name: "Lipetskaya Oblast'",
            },
            {
                code: 'RS44',
                name: "Magadanskaya Oblast'",
            },
            {
                code: 'RS45',
                name: 'Mariy-El Republic',
            },
            {
                code: 'RS46',
                name: 'Mordoviya Republic',
            },
            {
                code: 'RS47',
                name: "Moskovskaya Oblast'",
            },
            {
                code: 'RS48',
                name: 'Moskva Federal City',
            },
            {
                code: 'RS49',
                name: "Murmanskaya Oblast'",
            },
            {
                code: 'RS50',
                name: 'Nenetskiy Avtonomnyy Okrug',
            },
            {
                code: 'RS51',
                name: "Nizhegorodskaya Oblast'",
            },
            {
                code: 'RS52',
                name: "Novgorodskaya Oblast'",
            },
            {
                code: 'RS53',
                name: "Novosibirskaya Oblast'",
            },
            {
                code: 'RS54',
                name: "Omskaya Oblast'",
            },
            {
                code: 'RS55',
                name: "Orenburgskaya Oblast'",
            },
            {
                code: 'RS56',
                name: "Orlovskaya Oblast'",
            },
            {
                code: 'RS57',
                name: "Penzenskaya Oblast'",
            },
            {
                code: 'RS90',
                name: 'Permskiy Kray',
            },
            {
                code: 'RS59',
                name: 'Primorskiy Kray',
            },
            {
                code: 'RS60',
                name: "Pskovskaya Oblast'",
            },
            {
                code: 'RS61',
                name: "Rostovskaya Oblast'",
            },
            {
                code: 'RS62',
                name: "Ryazanskaya Oblast'",
            },
            {
                code: 'RS63',
                name: 'Sakha (Yakutiya) Republic',
            },
            {
                code: 'RS64',
                name: "Sakhalinskaya Oblast'",
            },
            {
                code: 'RS65',
                name: "Samarskaya Oblast'",
            },
            {
                code: 'RS66',
                name: 'Sankt-Peterburg Federal City',
            },
            {
                code: 'RS67',
                name: "Saratovskaya Oblast'",
            },
            {
                code: 'RS68',
                name: 'Severnaya Osetiya-Alaniya Respublika',
            },
            {
                code: 'RS69',
                name: "Smolenskaya Oblast'",
            },
            {
                code: 'RS70',
                name: "Stavropol'skiy Kray",
            },
            {
                code: 'RS71',
                name: "Sverdlovskaya Oblast'",
            },
            {
                code: 'RS72',
                name: "Tambovskaya Oblast'",
            },
            {
                code: 'RS73',
                name: 'Tatarstan Republic',
            },
            {
                code: 'RS74',
                name: 'Taymyrskiy (Dolgano-Nenetskiy) Avtonomnyy Okrug',
            },
            {
                code: 'RS75',
                name: "Tomskaya Oblast'",
            },
            {
                code: 'RS76',
                name: "Tul'skaya Oblast'",
            },
            {
                code: 'RS77',
                name: "Tverskaya Oblast'",
            },
            {
                code: 'RS78',
                name: "Tyumenskaya Oblast'",
            },
            {
                code: 'RS79',
                name: 'Tyva Republic',
            },
            {
                code: 'RS80',
                name: 'Udmurtiya Republic',
            },
            {
                code: 'RS81',
                name: "Ul'yanovskaya Oblast'",
            },
            {
                code: 'RS82',
                name: "Ust'-Ordynskiy Buryatskiy Avtonomnyy Okrug",
            },
            {
                code: 'RS83',
                name: "Vladimirskaya Oblast'",
            },
            {
                code: 'RS84',
                name: "Volgogradskaya Oblast'",
            },
            {
                code: 'RS85',
                name: "Vologodskaya Oblast'",
            },
            {
                code: 'RS86',
                name: "Voronezhskaya Oblast'",
            },
            {
                code: 'RS87',
                name: 'Yamalo-Nenetskiy Avtonomnyy Okrug',
            },
            {
                code: 'RS88',
                name: "Yaroslavskaya Oblast'",
            },
            {
                code: 'RS89',
                name: "Yevreyskaya Avtonomnaya Oblast'",
            },
        ],
    },
    {
        code: 'RW',
        id: 2325,
        name: 'Rwanda',
        states: [
            {
                code: 'RW11',
                name: 'Eastern',
            },
            {
                code: 'RW12',
                name: 'Kigali City',
            },
            {
                code: 'RW13',
                name: 'Northern',
            },
            {
                code: 'RW15',
                name: 'Southern',
            },
            {
                code: 'RW14',
                name: 'Western',
            },
        ],
    },
    {
        code: 'BL',
        id: 2432,
        name: 'Saint Barthélemy',
        states: [],
    },
    {
        code: 'SH',
        id: 2433,
        name: 'Saint Helena; Ascension and Tristan Da Cunha',
        states: [],
    },
    {
        code: 'KN',
        id: 2399,
        name: 'Saint Kitts and Nevis',
        states: [],
    },
    {
        code: 'LC',
        id: 2326,
        name: 'Saint Lucia',
        states: [],
    },
    {
        code: 'MF',
        id: 2434,
        name: 'Saint Martin',
        states: [
            {
                code: 'MF.SM',
                name: 'Saint Martin',
            },
        ],
    },
    {
        code: 'PM',
        id: 2435,
        name: 'Saint Pierre And Miquelon',
        states: [],
    },
    {
        code: 'VC',
        id: 2400,
        name: 'Saint Vincent and Grenadines',
        states: [],
    },
    {
        code: 'WS',
        id: 2401,
        name: 'Samoa',
        states: [
            {
                code: 'WS01',
                name: "A'ana",
            },
            {
                code: 'WS02',
                name: 'Aiga-i-le-Tai',
            },
            {
                code: 'WS03',
                name: 'Atua',
            },
            {
                code: 'WS04',
                name: "Fa'asaleleaga",
            },
            {
                code: 'WS05',
                name: "Gaga'emauga",
            },
            {
                code: 'WS07',
                name: 'Gagaifomauga',
            },
            {
                code: 'WS08',
                name: 'Palauli',
            },
            {
                code: 'WS09',
                name: "Satupa'itea",
            },
            {
                code: 'WS10',
                name: 'Tuamasaga',
            },
            {
                code: 'WS06',
                name: "Va'a-o-Fonoti",
            },
            {
                code: 'WS11',
                name: 'Vaisigano',
            },
        ],
    },
    {
        code: 'SM',
        id: 2327,
        name: 'San Marino',
        states: [],
    },
    {
        code: 'TP',
        id: 2403,
        name: 'Sao Tome and Principe',
        states: [],
    },
    {
        code: 'SA',
        id: 2328,
        name: 'Saudi Arabia',
        states: [
            {
                code: 'SA02',
                name: 'Al Bahah',
            },
            {
                code: 'SA15',
                name: 'Al Hudud ash Shamaliyah',
            },
            {
                code: 'SA20',
                name: 'Al Jawf',
            },
            {
                code: 'SA05',
                name: 'Al Madinah',
            },
            {
                code: 'SA08',
                name: 'Al Qasim',
            },
            {
                code: 'SA10',
                name: 'Ar Riyad',
            },
            {
                code: 'SA06',
                name: 'Ash Sharqiyah',
            },
            {
                code: 'SA11',
                name: 'Asir',
            },
            {
                code: 'SA13',
                name: "Ha'il",
            },
            {
                code: 'SA17',
                name: 'Jizan',
            },
            {
                code: 'SA14',
                name: 'Makkah',
            },
            {
                code: 'SA16',
                name: 'Najran',
            },
            {
                code: 'SA19',
                name: 'Tabuk',
            },
        ],
    },
    {
        code: 'SN',
        id: 2329,
        name: 'Senegal',
        states: [
            {
                code: 'SG01',
                name: 'Dakar',
            },
            {
                code: 'SG03',
                name: 'Diourbel',
            },
            {
                code: 'SG09',
                name: 'Fatick',
            },
            {
                code: 'SG16',
                name: 'Kaffrine',
            },
            {
                code: 'SG10',
                name: 'Kaolack',
            },
            {
                code: 'SG17',
                name: 'Kédougou',
            },
            {
                code: 'SG11',
                name: 'Kolda',
            },
            {
                code: 'SG13',
                name: 'Louga',
            },
            {
                code: 'SG15',
                name: 'Matam',
            },
            {
                code: 'SG14',
                name: 'Saint-Louis',
            },
            {
                code: 'SG18',
                name: 'Sédhiou',
            },
            {
                code: 'SG05',
                name: 'Tambacounda',
            },
            {
                code: 'SG07',
                name: 'Thiès',
            },
            {
                code: 'SG12',
                name: 'Ziguinchor',
            },
        ],
    },
    {
        code: 'RI',
        id: 2402,
        name: 'Serbia',
        states: [
            {
                code: 'RS-00',
                name: 'Belgrade',
            },
            {
                code: 'RS-14',
                name: 'Borski okrug',
            },
            {
                code: 'RS-11',
                name: 'Branicevski okrug',
            },
            {
                code: 'RS-23',
                name: 'Jablanicki okrug',
            },
            {
                code: 'RS-06',
                name: 'Južnobanatski okrug',
            },
            {
                code: 'RS-04',
                name: 'Južnobanatski okrug',
            },
            {
                code: 'RS-09',
                name: 'Kolubarski okrug',
            },
            {
                code: 'RS-25',
                name: 'Kosovski okrug',
            },
            {
                code: 'RS-28',
                name: 'Kosovsko-Mitrovacki okrug',
            },
            {
                code: 'RS-29',
                name: 'Kosovsko-Pomoravski okrug',
            },
            {
                code: 'RS-08',
                name: 'Macvanski okrug',
            },
            {
                code: 'RS-17',
                name: 'Moravicki okrug',
            },
            {
                code: 'RS-20',
                name: 'Nišavski okrug',
            },
            {
                code: 'RS-24',
                name: 'Pcinjski okrug',
            },
            {
                code: 'RS-26',
                name: 'Pecki okrug',
            },
            {
                code: 'RS-22',
                name: 'Pirotski okrug',
            },
            {
                code: 'RS-10',
                name: 'Podunavski okrug',
            },
            {
                code: 'RS-13',
                name: 'Pomoravski okrug',
            },
            {
                code: 'RS-27',
                name: 'Prizrenski okrug',
            },
            {
                code: 'RS-19',
                name: 'Rasinski okrug',
            },
            {
                code: 'RS-18',
                name: 'Raška okrug',
            },
            {
                code: 'RS-01',
                name: 'Severnobacki okrug',
            },
            {
                code: 'RS-03',
                name: 'Severnobanatski okrug',
            },
            {
                code: 'RS-02',
                name: 'Srednjebanatski okrug',
            },
            {
                code: 'RS-07',
                name: 'Sremski okrug',
            },
            {
                code: 'RS-12',
                name: 'Šumadijski okrug',
            },
            {
                code: 'RS-21',
                name: 'Toplièki okrug',
            },
            {
                code: 'RS-15',
                name: 'Zajeèarski okrug',
            },
            {
                code: 'RS-05',
                name: 'Zapadnobaèki okrug',
            },
            {
                code: 'RS-16',
                name: 'Zlatiborski okrug',
            },
        ],
    },
    {
        code: 'SC',
        id: 2331,
        name: 'Seychelles',
        states: [],
    },
    {
        code: 'SL',
        id: 2332,
        name: 'Sierra Leone',
        states: [
            {
                code: 'SL01',
                name: 'Eastern',
            },
            {
                code: 'SL02',
                name: 'Northern',
            },
            {
                code: 'SL03',
                name: 'Southern',
            },
            {
                code: 'SL04',
                name: 'Western',
            },
        ],
    },
    {
        code: 'SG',
        id: 2333,
        name: 'Singapore',
        states: [
            {
                code: 'SG01',
                name: 'Central Singapore',
            },
            {
                code: 'SG02',
                name: 'North East',
            },
            {
                code: 'SG03',
                name: 'North West',
            },
            {
                code: 'SG04',
                name: 'South East',
            },
            {
                code: 'SG05',
                name: 'South West',
            },
        ],
    },
    {
        code: 'SX',
        id: 2448,
        name: 'Sint Maarten',
        states: [
            {
                code: 'SX.SM',
                name: 'Sint Maarten',
            },
        ],
    },
    {
        code: 'SK',
        id: 2334,
        name: 'Slovakia',
        states: [
            {
                code: 'SK-BC',
                name: 'Banskobystrický kraj',
            },
            {
                code: 'SK-BL',
                name: 'Bratislavský kraj',
            },
            {
                code: 'SK-KI',
                name: 'Košický kraj',
            },
            {
                code: 'SK-NI',
                name: 'Nitriansky kraj',
            },
            {
                code: 'SK-PV',
                name: 'Prešovský kraj',
            },
            {
                code: 'SK-TC',
                name: 'Trenciansky kraj',
            },
            {
                code: 'SK-TA',
                name: 'Trnavský kraj',
            },
            {
                code: 'SK-ZI',
                name: 'Žilinský kraj',
            },
        ],
    },
    {
        code: 'SI',
        id: 2335,
        name: 'Slovenia',
        states: [
            {
                code: 'SI-001',
                name: 'Ajdovšcina',
            },
            {
                code: 'SI-195',
                name: 'Apace',
            },
            {
                code: 'SI-002',
                name: 'Beltinci',
            },
            {
                code: 'SI-148',
                name: 'Benedikt',
            },
            {
                code: 'SI-149',
                name: 'Bistrica ob Sotli',
            },
            {
                code: 'SI-003',
                name: 'Bled',
            },
            {
                code: 'SI-150',
                name: 'Bloke',
            },
            {
                code: 'SI-004',
                name: 'Bohinj',
            },
            {
                code: 'SI-005',
                name: 'Borovnica',
            },
            {
                code: 'SI-006',
                name: 'Bovec',
            },
            {
                code: 'SI-151',
                name: 'Braslovce',
            },
            {
                code: 'SI-007',
                name: 'Brda',
            },
            {
                code: 'SI-009',
                name: 'Brežice',
            },
            {
                code: 'SI-008',
                name: 'Brezovica',
            },
            {
                code: 'SI-152',
                name: 'Cankova',
            },
            {
                code: 'SI-011',
                name: 'Celje',
            },
            {
                code: 'SI-012',
                name: 'Cerklje na Gorenjskem',
            },
            {
                code: 'SI-013',
                name: 'Cerknica',
            },
            {
                code: 'SI-014',
                name: 'Cerkno',
            },
            {
                code: 'SI-153',
                name: 'Cerkvenjak',
            },
            {
                code: 'SI-197',
                name: 'Cirkulane',
            },
            {
                code: 'SI-015',
                name: 'Crenšovci',
            },
            {
                code: 'SI-016',
                name: 'Crna na Koroškem',
            },
            {
                code: 'SI-017',
                name: 'Crnomelj',
            },
            {
                code: 'SI-018',
                name: 'Destrnik',
            },
            {
                code: 'SI-019',
                name: 'Divaca',
            },
            {
                code: 'SI-154',
                name: 'Dobje',
            },
            {
                code: 'SI-020',
                name: 'Dobrepolje',
            },
            {
                code: 'SI-155',
                name: 'Dobrna',
            },
            {
                code: 'SI-021',
                name: 'Dobrova-Polhov Gradec',
            },
            {
                code: 'SI-156',
                name: 'Dobrovnik/Dobronak',
            },
            {
                code: 'SI-022',
                name: 'Dol pri Ljubljani',
            },
            {
                code: 'SI-157',
                name: 'Dolenjske Toplice',
            },
            {
                code: 'SI-023',
                name: 'Domžale',
            },
            {
                code: 'SI-024',
                name: 'Dornava',
            },
            {
                code: 'SI-025',
                name: 'Dravograd',
            },
            {
                code: 'SI-026',
                name: 'Duplek',
            },
            {
                code: 'SI-027',
                name: 'Gorenja vas-Poljane',
            },
            {
                code: 'SI-028',
                name: 'Gorišnica',
            },
            {
                code: 'SI-207',
                name: 'Gorje',
            },
            {
                code: 'SI-029',
                name: 'Gornja Radgona',
            },
            {
                code: 'SI-030',
                name: 'Gornji Grad',
            },
            {
                code: 'SI-031',
                name: 'Gornji Petrovci',
            },
            {
                code: 'SI-158',
                name: 'Grad',
            },
            {
                code: 'SI-032',
                name: 'Grosuplje',
            },
            {
                code: 'SI-159',
                name: 'Hajdina',
            },
            {
                code: 'SI-160',
                name: 'Hoce-Slivnica',
            },
            {
                code: 'SI-161',
                name: 'Hodoš/Hodos',
            },
            {
                code: 'SI-162',
                name: 'Horjul',
            },
            {
                code: 'SI-034',
                name: 'Hrastnik',
            },
            {
                code: 'SI-035',
                name: 'Hrpelje-Kozina',
            },
            {
                code: 'SI-036',
                name: 'Idrija',
            },
            {
                code: 'SI-037',
                name: 'Ig',
            },
            {
                code: 'SI-038',
                name: 'Ilirska Bistrica',
            },
            {
                code: 'SI-039',
                name: 'Ivancna Gorica',
            },
            {
                code: 'SI-040',
                name: 'Izola/Isola',
            },
            {
                code: 'SI-041',
                name: 'Jesenice',
            },
            {
                code: 'SI-163',
                name: 'Jezersko',
            },
            {
                code: 'SI-042',
                name: 'Juršinci',
            },
            {
                code: 'SI-043',
                name: 'Kamnik',
            },
            {
                code: 'SI-044',
                name: 'Kanal',
            },
            {
                code: 'SI-045',
                name: 'Kidricevo',
            },
            {
                code: 'SI-046',
                name: 'Kobarid',
            },
            {
                code: 'SI-047',
                name: 'Kobilje',
            },
            {
                code: 'SI-048',
                name: 'Kocevje',
            },
            {
                code: 'SI-049',
                name: 'Komen',
            },
            {
                code: 'SI-164',
                name: 'Komenda',
            },
            {
                code: 'SI-050',
                name: 'Koper/Capodistria',
            },
            {
                code: 'SI-196',
                name: 'Kosanjevica na Krki',
            },
            {
                code: 'SI-165',
                name: 'Kostel',
            },
            {
                code: 'SI-051',
                name: 'Kozje',
            },
            {
                code: 'SI-052',
                name: 'Kranj',
            },
            {
                code: 'SI-053',
                name: 'Kranjska Gora',
            },
            {
                code: 'SI-166',
                name: 'Križevci',
            },
            {
                code: 'SI-054',
                name: 'Krško',
            },
            {
                code: 'SI-055',
                name: 'Kungota',
            },
            {
                code: 'SI-056',
                name: 'Kuzma',
            },
            {
                code: 'SI-057',
                name: 'Laško',
            },
            {
                code: 'SI-058',
                name: 'Lenart',
            },
            {
                code: 'SI-059',
                name: 'Lendava/Lendva',
            },
            {
                code: 'SI-060',
                name: 'Litija',
            },
            {
                code: 'SI-061',
                name: 'Ljubljana',
            },
            {
                code: 'SI-062',
                name: 'Ljubno',
            },
            {
                code: 'SI-063',
                name: 'Ljutomer',
            },
            {
                code: 'SI-208',
                name: 'Log-Dragomer',
            },
            {
                code: 'SI-064',
                name: 'Logatec',
            },
            {
                code: 'SI-065',
                name: 'Loška dolina',
            },
            {
                code: 'SI-066',
                name: 'Loški Potok',
            },
            {
                code: 'SI-167',
                name: 'Lovrenc na Pohorju',
            },
            {
                code: 'SI-067',
                name: 'Luce',
            },
            {
                code: 'SI-068',
                name: 'Lukovica',
            },
            {
                code: 'SI-069',
                name: 'Majšperk',
            },
            {
                code: 'SI-198',
                name: 'Makole',
            },
            {
                code: 'SI-070',
                name: 'Maribor',
            },
            {
                code: 'SI-168',
                name: 'Markovci',
            },
            {
                code: 'SI-071',
                name: 'Medvode',
            },
            {
                code: 'SI-072',
                name: 'Mengeš',
            },
            {
                code: 'SI-073',
                name: 'Metlika',
            },
            {
                code: 'SI-074',
                name: 'Mežica',
            },
            {
                code: 'SI-169',
                name: 'Miklavž na Dravskem polju',
            },
            {
                code: 'SI-075',
                name: 'Miren-Kostanjevica',
            },
            {
                code: 'SI-170',
                name: 'Mirna Pec',
            },
            {
                code: 'SI-076',
                name: 'Mislinja',
            },
            {
                code: 'SI-199',
                name: 'Mokronog-Trebelno',
            },
            {
                code: 'SI-077',
                name: 'Moravce',
            },
            {
                code: 'SI-078',
                name: 'Moravske Toplice',
            },
            {
                code: 'SI-079',
                name: 'Mozirje',
            },
            {
                code: 'SI-080',
                name: 'Murska Sobota',
            },
            {
                code: 'SI-081',
                name: 'Muta',
            },
            {
                code: 'SI-082',
                name: 'Naklo',
            },
            {
                code: 'SI-083',
                name: 'Nazarje',
            },
            {
                code: 'SI-084',
                name: 'Nova Gorica',
            },
            {
                code: 'SI-085',
                name: 'Novo mesto',
            },
            {
                code: 'SI-086',
                name: 'Odranci',
            },
            {
                code: 'SI-171',
                name: 'Oplotnica',
            },
            {
                code: 'SI-087',
                name: 'Ormož',
            },
            {
                code: 'SI-088',
                name: 'Osilnica',
            },
            {
                code: 'SI-089',
                name: 'Pesnica',
            },
            {
                code: 'SI-090',
                name: 'Piran/Pirano',
            },
            {
                code: 'SI-091',
                name: 'Pivka',
            },
            {
                code: 'SI-092',
                name: 'Podcetrtek',
            },
            {
                code: 'SI-172',
                name: 'Podlehnik',
            },
            {
                code: 'SI-093',
                name: 'Podvelka',
            },
            {
                code: 'SI-200',
                name: 'Poljcane',
            },
            {
                code: 'SI-173',
                name: 'Polzela',
            },
            {
                code: 'SI-094',
                name: 'Postojna',
            },
            {
                code: 'SI-174',
                name: 'Prebold',
            },
            {
                code: 'SI-095',
                name: 'Preddvor',
            },
            {
                code: 'SI-175',
                name: 'Prevalje',
            },
            {
                code: 'SI-096',
                name: 'Ptuj',
            },
            {
                code: 'SI-097',
                name: 'Puconci',
            },
            {
                code: 'SI-098',
                name: 'Race-Fram',
            },
            {
                code: 'SI-099',
                name: 'Radece',
            },
            {
                code: 'SI-100',
                name: 'Radenci',
            },
            {
                code: 'SI-101',
                name: 'Radlje ob Dravi',
            },
            {
                code: 'SI-102',
                name: 'Radovljica',
            },
            {
                code: 'SI-103',
                name: 'Ravne na Koroškem',
            },
            {
                code: 'SI-176',
                name: 'Razkrižje',
            },
            {
                code: 'SI-209',
                name: 'Recica ob Savinji',
            },
            {
                code: 'SI-201',
                name: 'Rence-Vogrsko',
            },
            {
                code: 'SI-177',
                name: 'Ribnica na Pohorju',
            },
            {
                code: 'SI-104',
                name: 'Ribnica',
            },
            {
                code: 'SI-106',
                name: 'Rogaška Slatina',
            },
            {
                code: 'SI-105',
                name: 'Rogašovci',
            },
            {
                code: 'SI-107',
                name: 'Rogatec',
            },
            {
                code: 'SI-108',
                name: 'Ruše',
            },
            {
                code: 'SI-033',
                name: 'Šalovci',
            },
            {
                code: 'SI-178',
                name: 'Selnica ob Dravi',
            },
            {
                code: 'SI-109',
                name: 'Semic',
            },
            {
                code: 'SI-183',
                name: 'Šempeter-Vrtojba',
            },
            {
                code: 'SI-117',
                name: 'Šencur',
            },
            {
                code: 'SI-118',
                name: 'Šentilj',
            },
            {
                code: 'SI-119',
                name: 'Šentjernej',
            },
            {
                code: 'SI-120',
                name: 'Šentjur pri Celju',
            },
            {
                code: 'SI-211',
                name: 'Šentrupert',
            },
            {
                code: 'SI-110',
                name: 'Sevnica',
            },
            {
                code: 'SI-111',
                name: 'Sežana',
            },
            {
                code: 'SI-121',
                name: 'Škocjan',
            },
            {
                code: 'SI-122',
                name: 'Škofja Loka',
            },
            {
                code: 'SI-123',
                name: 'Škofljica',
            },
            {
                code: 'SI-112',
                name: 'Slovenj Gradec',
            },
            {
                code: 'SI-113',
                name: 'Slovenska Bistrica',
            },
            {
                code: 'SI-114',
                name: 'Slovenske Konjice',
            },
            {
                code: 'SI-124',
                name: 'Šmarje pri Jelšah',
            },
            {
                code: 'SI-206',
                name: 'Šmarješke Toplice',
            },
            {
                code: 'SI-125',
                name: 'Šmartno ob Paki',
            },
            {
                code: 'SI-194',
                name: 'Šmartno pri Litiji',
            },
            {
                code: 'SI-194',
                name: 'Šmartno pri Litiji',
            },
            {
                code: 'SI-179',
                name: 'Sodražica',
            },
            {
                code: 'SI-180',
                name: 'Solcava',
            },
            {
                code: 'SI-126',
                name: 'Šoštanj',
            },
            {
                code: 'SI-202',
                name: 'Središce ob Dravi',
            },
            {
                code: 'SI-115',
                name: 'Starše',
            },
            {
                code: 'SI-127',
                name: 'Štore',
            },
            {
                code: 'SI-203',
                name: 'Straža',
            },
            {
                code: 'SI-181',
                name: 'Sveta Ana',
            },
            {
                code: 'SI-204',
                name: 'Sveta Trojica v Slovenskih Goricah',
            },
            {
                code: 'SI-182',
                name: 'Sveti Andraž v Slovenskih goricah',
            },
            {
                code: 'SI-116',
                name: 'Sveti Jurij',
            },
            {
                code: 'SI-210',
                name: 'Sveti Jurij v Slovenskih Goricah',
            },
            {
                code: 'SI-205',
                name: 'Sveti Tomaž',
            },
            {
                code: 'SI-184',
                name: 'Tabor',
            },
            {
                code: 'SI-010',
                name: 'Tišina',
            },
            {
                code: 'SI-128',
                name: 'Tolmin',
            },
            {
                code: 'SI-129',
                name: 'Trbovlje',
            },
            {
                code: 'SI-130',
                name: 'Trebnje',
            },
            {
                code: 'SI-185',
                name: 'Trnovska vas',
            },
            {
                code: 'SI-131',
                name: 'Tržic',
            },
            {
                code: 'SI-186',
                name: 'Trzin',
            },
            {
                code: 'SI-132',
                name: 'Turnišce',
            },
            {
                code: 'SI-133',
                name: 'Velenje',
            },
            {
                code: 'SI-187',
                name: 'Velika Polana',
            },
            {
                code: 'SI-134',
                name: 'Velike Lašce',
            },
            {
                code: 'SI-188',
                name: 'Veržej',
            },
            {
                code: 'SI-135',
                name: 'Videm',
            },
            {
                code: 'SI-136',
                name: 'Vipava',
            },
            {
                code: 'SI-137',
                name: 'Vitanje',
            },
            {
                code: 'SI-138',
                name: 'Vodice',
            },
            {
                code: 'SI-139',
                name: 'Vojnik',
            },
            {
                code: 'SI-189',
                name: 'Vransko',
            },
            {
                code: 'SI-140',
                name: 'Vrhnika',
            },
            {
                code: 'SI-141',
                name: 'Vuzenica',
            },
            {
                code: 'SI-142',
                name: 'Zagorje ob Savi',
            },
            {
                code: 'SI-190',
                name: 'Žalec',
            },
            {
                code: 'SI-143',
                name: 'Zavrc',
            },
            {
                code: 'SI-146',
                name: 'Železniki',
            },
            {
                code: 'SI-191',
                name: 'Žetale',
            },
            {
                code: 'SI-147',
                name: 'Žiri',
            },
            {
                code: 'SI-192',
                name: 'Žirovnica',
            },
            {
                code: 'SI-144',
                name: 'Zrece',
            },
            {
                code: 'SI-193',
                name: 'Žužemberk',
            },
        ],
    },
    {
        code: 'SB',
        id: 2336,
        name: 'Solomon Islands',
        states: [],
    },
    {
        code: 'SO',
        id: 2337,
        name: 'Somalia',
        states: [
            {
                code: 'SO21',
                name: 'Awdal',
            },
            {
                code: 'SO01',
                name: 'Bakool',
            },
            {
                code: 'SO02',
                name: 'Banaadir',
            },
            {
                code: 'SO03',
                name: 'Bari',
            },
            {
                code: 'SO04',
                name: 'Bay',
            },
            {
                code: 'SO05',
                name: 'Galguduud',
            },
            {
                code: 'SO06',
                name: 'Gedo',
            },
            {
                code: 'SO07',
                name: 'Hiiraan',
            },
            {
                code: 'SO08',
                name: 'Jubbada Dhexe',
            },
            {
                code: 'SO09',
                name: 'Jubbada Hoose',
            },
            {
                code: 'SO10',
                name: 'Mudug',
            },
            {
                code: 'SO18',
                name: 'Nugaal',
            },
            {
                code: 'SO12',
                name: 'Sanaag',
            },
            {
                code: 'SO13',
                name: 'Shabeellaha Dhexe',
            },
            {
                code: 'SO14',
                name: 'Shabeellaha Hoose',
            },
            {
                code: 'SO22',
                name: 'Sool',
            },
            {
                code: 'SO19',
                name: 'Togdheer',
            },
            {
                code: 'SO20',
                name: 'Woqooyi Galbeed',
            },
        ],
    },
    {
        code: 'ZA',
        id: 2338,
        name: 'South Africa',
        states: [
            {
                code: 'SF01',
                name: 'Cape Province',
            },
            {
                code: 'SF05',
                name: 'Eastern Cape',
            },
            {
                code: 'SF03',
                name: 'Free State',
            },
            {
                code: 'SF06',
                name: 'Gauteng',
            },
            {
                code: 'SF02',
                name: 'KwaZulu-Natal',
            },
            {
                code: 'SF09',
                name: 'Limpopo',
            },
            {
                code: 'SF07',
                name: 'Mpumalanga',
            },
            {
                code: 'SF10',
                name: 'North-West',
            },
            {
                code: 'SF08',
                name: 'Northern Cape',
            },
            {
                code: 'SF04',
                name: 'Transvaal',
            },
            {
                code: 'SF11',
                name: 'Western Cape',
            },
        ],
    },
    {
        code: 'GS',
        id: 2436,
        name: 'South Georgia and the South Sandwich Islands',
        states: [],
    },
    {
        code: 'SS',
        id: 2447,
        name: 'South Sudan',
        states: [
            {
                code: 'OD01',
                name: 'Central Equatoria',
            },
            {
                code: 'OD02',
                name: 'East Equatoria',
            },
            {
                code: 'OD03',
                name: 'Jungoli',
            },
            {
                code: 'OD04',
                name: 'Lakes',
            },
            {
                code: 'OD05',
                name: 'North Bahr-al-Ghazal',
            },
            {
                code: 'OD06',
                name: 'Unity',
            },
            {
                code: 'OD07',
                name: 'Upper Nile',
            },
            {
                code: 'OD08',
                name: 'Warap',
            },
            {
                code: 'OD09',
                name: 'West Bahr-al-Ghazal',
            },
            {
                code: 'OD10',
                name: 'West Equatoria',
            },
        ],
    },
    {
        code: 'ES',
        id: 2339,
        name: 'Spain',
        states: [
            {
                code: 'SP23',
                name: 'A Coruña',
            },
            {
                code: 'SP01',
                name: 'Alava',
            },
            {
                code: 'SP02',
                name: 'Albacete',
            },
            {
                code: 'SP03',
                name: 'Alicante',
            },
            {
                code: 'SP04',
                name: 'Almeria',
            },
            {
                code: 'SP51',
                name: 'Andalucia',
            },
            {
                code: 'SP52',
                name: 'Aragon',
            },
            {
                code: 'SP34',
                name: 'Asturias',
            },
            {
                code: 'SP05',
                name: 'Avila',
            },
            {
                code: 'SP06',
                name: 'Badajoz',
            },
            {
                code: 'SP08',
                name: 'Barcelona',
            },
            {
                code: 'SP09',
                name: 'Burgos',
            },
            {
                code: 'SP10',
                name: 'Caceres',
            },
            {
                code: 'SP11',
                name: 'Cadiz',
            },
            {
                code: 'SP53',
                name: 'Canarias',
            },
            {
                code: 'SP39',
                name: 'Cantabria',
            },
            {
                code: 'SP12',
                name: 'Castellon',
            },
            {
                code: 'SP55',
                name: 'Castilla y Leon',
            },
            {
                code: 'SP54',
                name: 'Castilla-La Mancha',
            },
            {
                code: 'SP56',
                name: 'Cataluna',
            },
            {
                code: 'SP13',
                name: 'Ciudad Real',
            },
            {
                code: 'SP14',
                name: 'Cordoba',
            },
            {
                code: 'SP15',
                name: 'Cuenca',
            },
            {
                code: 'SP57',
                name: 'Extremadura',
            },
            {
                code: 'SP58',
                name: 'Galicia',
            },
            {
                code: 'SP16',
                name: 'Gerona',
            },
            {
                code: 'SP17',
                name: 'Granada',
            },
            {
                code: 'SP18',
                name: 'Guadalajara',
            },
            {
                code: 'SP19',
                name: 'Guipuzcoa',
            },
            {
                code: 'SP20',
                name: 'Huelva',
            },
            {
                code: 'SP21',
                name: 'Huesca',
            },
            {
                code: 'SP07',
                name: 'Islas Baleares',
            },
            {
                code: 'SP22',
                name: 'Jaen',
            },
            {
                code: 'SP23',
                name: 'La Coruna',
            },
            {
                code: 'SP27',
                name: 'La Rioja',
            },
            {
                code: 'SP24',
                name: 'Las Palmas',
            },
            {
                code: 'SP25',
                name: 'Leon',
            },
            {
                code: 'SP26',
                name: 'Lerida',
            },
            {
                code: 'SP28',
                name: 'Lugo',
            },
            {
                code: 'SP29',
                name: 'Madrid',
            },
            {
                code: 'SP30',
                name: 'Malaga',
            },
            {
                code: 'SP31',
                name: 'Murcia',
            },
            {
                code: 'SP32',
                name: 'Navarra',
            },
            {
                code: 'SP33',
                name: 'Orense',
            },
            {
                code: 'SP59',
                name: 'Pais Vasco',
            },
            {
                code: 'SP35',
                name: 'Palencia',
            },
            {
                code: 'SP36',
                name: 'Pontevedra',
            },
            {
                code: 'SP37',
                name: 'Salamanca',
            },
            {
                code: 'SP38',
                name: 'Santa Cruz de Tenerife',
            },
            {
                code: 'SP40',
                name: 'Segovia',
            },
            {
                code: 'SP41',
                name: 'Sevilla',
            },
            {
                code: 'SP42',
                name: 'Soria',
            },
            {
                code: 'SP43',
                name: 'Tarragona',
            },
            {
                code: 'SP44',
                name: 'Teruel',
            },
            {
                code: 'SP45',
                name: 'Toledo',
            },
            {
                code: 'SP46',
                name: 'Valencia',
            },
            {
                code: 'SP60',
                name: 'Valenciana',
            },
            {
                code: 'SP47',
                name: 'Valladolid',
            },
            {
                code: 'SP48',
                name: 'Vizcaya',
            },
            {
                code: 'SP49',
                name: 'Zamora',
            },
            {
                code: 'SP50',
                name: 'Zaragoza',
            },
        ],
    },
    {
        code: 'LK',
        id: 2340,
        name: 'Sri Lanka',
        states: [],
    },
    {
        code: 'SD',
        id: 2341,
        name: 'Sudan',
        states: [
            {
                code: 'SU42',
                name: 'Blue Nile',
            },
            {
                code: 'SU61',
                name: 'Central Darfur',
            },
            {
                code: 'SU60',
                name: 'East Darfur',
            },
            {
                code: 'SU39',
                name: 'Gedarif',
            },
            {
                code: 'SU38',
                name: 'Gezira',
            },
            {
                code: 'SU52',
                name: 'Kassala',
            },
            {
                code: 'SU29',
                name: 'Khartoum',
            },
            {
                code: 'SU55',
                name: 'North Darfur',
            },
            {
                code: 'SU56',
                name: 'North Kordofan',
            },
            {
                code: 'SU43',
                name: 'Northern',
            },
            {
                code: 'SU36',
                name: 'Red Sea',
            },
            {
                code: 'SU53',
                name: 'River Nile',
            },
            {
                code: 'SU58',
                name: 'Sennar',
            },
            {
                code: 'SU49',
                name: 'South Darfur',
            },
            {
                code: 'SU50',
                name: 'South Kordofan',
            },
            {
                code: 'SU47',
                name: 'West Darfur',
            },
            {
                code: 'SU62',
                name: 'West Kordofan',
            },
            {
                code: 'SU41',
                name: 'White Nile',
            },
        ],
    },
    {
        code: 'SR',
        id: 2342,
        name: 'Suriname',
        states: [
            {
                code: 'NS10',
                name: 'Brokopondo',
            },
            {
                code: 'NS11',
                name: 'Commewijne',
            },
            {
                code: 'NS12',
                name: 'Coronie',
            },
            {
                code: 'NS13',
                name: 'Marowijne',
            },
            {
                code: 'NS14',
                name: 'Nickerie',
            },
            {
                code: 'NS16',
                name: 'Paramaribo',
            },
            {
                code: 'NS15',
                name: 'Para',
            },
            {
                code: 'NS17',
                name: 'Saramacca',
            },
            {
                code: 'NS18',
                name: 'Sipaliwini',
            },
            {
                code: 'NS19',
                name: 'Wanica',
            },
        ],
    },
    {
        code: 'SJ',
        id: 2437,
        name: 'Svalbard And Jan Mayen',
        states: [],
    },
    {
        code: 'SZ',
        id: 2343,
        name: 'Swaziland',
        states: [
            {
                code: 'WZ01',
                name: 'Hhohho',
            },
            {
                code: 'WZ02',
                name: 'Lubombo',
            },
            {
                code: 'WZ03',
                name: 'Manzini',
            },
            {
                code: 'WZ04',
                name: 'Shiselweni',
            },
        ],
    },
    {
        code: 'SE',
        id: 2344,
        name: 'Sweden',
        states: [
            {
                code: 'SE-K',
                name: 'Blekinge län',
            },
            {
                code: 'SE-W',
                name: 'Dalarnas län',
            },
            {
                code: 'SE-X',
                name: 'Gävleborgs län',
            },
            {
                code: 'SE-I',
                name: 'Gotlands län',
            },
            {
                code: 'SE-N',
                name: 'Hallands län',
            },
            {
                code: 'SE-Z',
                name: 'Jämtlands län',
            },
            {
                code: 'SE-F',
                name: 'Jönköpings län',
            },
            {
                code: 'SE-H',
                name: 'Kalmar län',
            },
            {
                code: 'SE-G',
                name: 'Kronobergs län',
            },
            {
                code: 'SE-BD',
                name: 'Norrbottens län',
            },
            {
                code: 'SE-M',
                name: 'Skåne län',
            },
            {
                code: 'SE-D',
                name: 'Södermanlands län',
            },
            {
                code: 'SE-AB',
                name: 'Stockholms län',
            },
            {
                code: 'SE-C',
                name: 'Uppsala län',
            },
            {
                code: 'SE-S',
                name: 'Värmlands län',
            },
            {
                code: 'SE-AC',
                name: 'Västerbottens län',
            },
            {
                code: 'SE-Y',
                name: 'Västernorrlands län',
            },
            {
                code: 'SE-U',
                name: 'Västmanlands län',
            },
            {
                code: 'SE-O',
                name: 'Västra Götalands län',
            },
            {
                code: 'SE-T',
                name: 'Örebro län',
            },
            {
                code: 'SE-E',
                name: 'Östergötlands län',
            },
        ],
    },
    {
        code: 'CH',
        id: 2345,
        name: 'Switzerland',
        states: [
            {
                code: 'AG',
                name: 'Aargau',
            },
            {
                code: 'AR',
                name: 'Appenzell Ausserrhoden',
            },
            {
                code: 'AI',
                name: 'Appenzell Innerrhoden',
            },
            {
                code: 'BL',
                name: 'Basel-Landschaft',
            },
            {
                code: 'BS',
                name: 'Basel-Stadt',
            },
            {
                code: 'BE',
                name: 'Bern',
            },
            {
                code: 'FR',
                name: 'Fribourg',
            },
            {
                code: 'GE',
                name: 'Genève',
            },
            {
                code: 'GL',
                name: 'Glarus',
            },
            {
                code: 'GR',
                name: 'Graubünden',
            },
            {
                code: 'JU',
                name: 'Jura',
            },
            {
                code: 'LU',
                name: 'Luzern',
            },
            {
                code: 'NE',
                name: 'Neuchâtel',
            },
            {
                code: 'NW',
                name: 'Nidwalden',
            },
            {
                code: 'OW',
                name: 'Obwalden',
            },
            {
                code: 'SG',
                name: 'Sankt Gallen',
            },
            {
                code: 'SH',
                name: 'Schaffhausen',
            },
            {
                code: 'SZ',
                name: 'Schwyz',
            },
            {
                code: 'SO',
                name: 'Solothurn',
            },
            {
                code: 'TG',
                name: 'Thurgau',
            },
            {
                code: 'TI',
                name: 'Ticino',
            },
            {
                code: 'UR',
                name: 'Uri',
            },
            {
                code: 'VS',
                name: 'Valais',
            },
            {
                code: 'VD',
                name: 'Vaud',
            },
            {
                code: 'ZG',
                name: 'Zug',
            },
            {
                code: 'ZH',
                name: 'Zürich',
            },
        ],
    },
    {
        code: 'SY',
        id: 2381,
        name: 'Syrian Arab Republic',
        states: [
            {
                code: 'SY01',
                name: 'Al Hasakah',
            },
            {
                code: 'SY09',
                name: 'Aleppo',
            },
            {
                code: 'SY04',
                name: 'Ar Raqqah',
            },
            {
                code: 'SY05',
                name: "As Suwayda'",
            },
            {
                code: 'SY13',
                name: 'Damascus',
            },
            {
                code: 'SY06',
                name: 'Dar`a',
            },
            {
                code: 'SY07',
                name: 'Dayr az Zawr',
            },
            {
                code: 'SY10',
                name: 'Hama',
            },
            {
                code: 'SY11',
                name: 'Hims',
            },
            {
                code: 'SY12',
                name: 'Idlib',
            },
            {
                code: 'SY02',
                name: 'Latakia',
            },
            {
                code: 'SY03',
                name: 'Quneitra',
            },
            {
                code: 'SY08',
                name: 'Rif Dimashq',
            },
            {
                code: 'SY14',
                name: 'Tartus',
            },
        ],
    },
    {
        code: 'TW',
        id: 2375,
        name: 'Taiwan',
        states: [
            {
                code: 'TW02',
                name: 'Kaohsiung',
            },
            {
                code: 'TW03',
                name: 'Taipei',
            },
        ],
    },
    {
        code: 'TJ',
        id: 2348,
        name: 'Tajikistan',
        states: [
            {
                code: 'TI01',
                name: 'Badakhshoni Kuni',
            },
            {
                code: 'TI04',
                name: 'Dushanbe',
            },
            {
                code: 'TI02',
                name: 'Khatlon',
            },
            {
                code: 'TI05',
                name: 'Regions of Republican Subordination',
            },
            {
                code: 'TI03',
                name: 'Sogd',
            },
        ],
    },
    {
        code: 'TZ',
        id: 2349,
        name: 'Tanzania',
        states: [
            {
                code: 'TZ26',
                name: 'Arusha',
            },
            {
                code: 'TZ23',
                name: 'Dar es Salaam',
            },
            {
                code: 'TZ03',
                name: 'Dodoma',
            },
            {
                code: 'TZ28',
                name: 'Geita',
            },
            {
                code: 'TZ04',
                name: 'Iringa',
            },
            {
                code: 'TZ19',
                name: 'Kagera',
            },
            {
                code: 'TZ29',
                name: 'Katavi',
            },
            {
                code: 'TZ05',
                name: 'Kigoma',
            },
            {
                code: 'TZ06',
                name: 'Kilimanjaro',
            },
            {
                code: 'TZ07',
                name: 'Lindi',
            },
            {
                code: 'TZ27',
                name: 'Manyara',
            },
            {
                code: 'TZ08',
                name: 'Mara',
            },
            {
                code: 'TZ09',
                name: 'Mbeya',
            },
            {
                code: 'TZ10',
                name: 'Morogoro',
            },
            {
                code: 'TZ11',
                name: 'Mtwara',
            },
            {
                code: 'TZ12',
                name: 'Mwanza',
            },
            {
                code: 'TZ30',
                name: 'Njombe',
            },
            {
                code: 'TZ13',
                name: 'Pemba North',
            },
            {
                code: 'TZ20',
                name: 'Pemba South',
            },
            {
                code: 'TZ02',
                name: 'Pwani',
            },
            {
                code: 'TZ24',
                name: 'Rukwa',
            },
            {
                code: 'TZ14',
                name: 'Ruvuma',
            },
            {
                code: 'TZ15',
                name: 'Shinyanga',
            },
            {
                code: 'TZ31',
                name: 'Simiyu',
            },
            {
                code: 'TZ16',
                name: 'Singida',
            },
            {
                code: 'TZ17',
                name: 'Tabora',
            },
            {
                code: 'TZ18',
                name: 'Tanga',
            },
            {
                code: 'TZ22',
                name: 'Zanzibar North',
            },
            {
                code: 'TZ21',
                name: 'Zanzibar South and Central',
            },
            {
                code: 'TZ25',
                name: 'Zanzibar West',
            },
        ],
    },
    {
        code: 'TH',
        id: 2350,
        name: 'Thailand',
        states: [
            {
                code: 'TH77',
                name: 'Amnat Charoen',
            },
            {
                code: 'TH35',
                name: 'Ang Thong',
            },
            {
                code: 'TH40',
                name: 'Bangkok Metropolis',
            },
            {
                code: 'TH81',
                name: 'Bueng Kan',
            },
            {
                code: 'TH28',
                name: 'Buri Ram',
            },
            {
                code: 'TH44',
                name: 'Chachoengsao',
            },
            {
                code: 'TH32',
                name: 'Chai Nat',
            },
            {
                code: 'TH26',
                name: 'Chaiyaphum',
            },
            {
                code: 'TH48',
                name: 'Chanthaburi',
            },
            {
                code: 'TH02',
                name: 'Chiang Mai',
            },
            {
                code: 'TH03',
                name: 'Chiang Rai',
            },
            {
                code: 'TH46',
                name: 'Chon Buri',
            },
            {
                code: 'TH58',
                name: 'Chumphon',
            },
            {
                code: 'TH23',
                name: 'Kalasin',
            },
            {
                code: 'TH11',
                name: 'Kamphaeng Phet',
            },
            {
                code: 'TH50',
                name: 'Kanchanaburi',
            },
            {
                code: 'TH22',
                name: 'Khon Kaen',
            },
            {
                code: 'TH63',
                name: 'Krabi',
            },
            {
                code: 'TH06',
                name: 'Lampang',
            },
            {
                code: 'TH05',
                name: 'Lamphun',
            },
            {
                code: 'TH18',
                name: 'Loei',
            },
            {
                code: 'TH34',
                name: 'Lop Buri',
            },
            {
                code: 'TH01',
                name: 'Mae Hong Son',
            },
            {
                code: 'TH24',
                name: 'Maha Sarakham',
            },
            {
                code: 'TH78',
                name: 'Mukdahan',
            },
            {
                code: 'TH43',
                name: 'Nakhon Nayok',
            },
            {
                code: 'TH53',
                name: 'Nakhon Pathom',
            },
            {
                code: 'TH73',
                name: 'Nakhon Phanom',
            },
            {
                code: 'TH27',
                name: 'Nakhon Ratchasima',
            },
            {
                code: 'TH16',
                name: 'Nakhon Sawan',
            },
            {
                code: 'TH64',
                name: 'Nakhon Si Thammarat',
            },
            {
                code: 'TH04',
                name: 'Nan',
            },
            {
                code: 'TH31',
                name: 'Narathiwat',
            },
            {
                code: 'TH79',
                name: 'Nong Bua Lam Phu',
            },
            {
                code: 'TH17',
                name: 'Nong Khai',
            },
            {
                code: 'TH38',
                name: 'Nonthaburi',
            },
            {
                code: 'TH39',
                name: 'Pathum Thani',
            },
            {
                code: 'TH69',
                name: 'Pattani',
            },
            {
                code: 'TH61',
                name: 'Phangnga',
            },
            {
                code: 'TH66',
                name: 'Phatthalung',
            },
            {
                code: 'TH41',
                name: 'Phayao',
            },
            {
                code: 'TH14',
                name: 'Phetchabun',
            },
            {
                code: 'TH56',
                name: 'Phetchaburi',
            },
            {
                code: 'TH13',
                name: 'Phichit',
            },
            {
                code: 'TH12',
                name: 'Phitsanulok',
            },
            {
                code: 'TH36',
                name: 'Phra Nakhon Si Ayutthaya',
            },
            {
                code: 'TH07',
                name: 'Phrae',
            },
            {
                code: 'TH62',
                name: 'Phuket',
            },
            {
                code: 'TH74',
                name: 'Prachin Buri',
            },
            {
                code: 'TH57',
                name: 'Prachuap Khiri Khan',
            },
            {
                code: 'TH59',
                name: 'Ranong',
            },
            {
                code: 'TH52',
                name: 'Ratchaburi',
            },
            {
                code: 'TH47',
                name: 'Rayong',
            },
            {
                code: 'TH25',
                name: 'Roi Et',
            },
            {
                code: 'TH80',
                name: 'Sa Kaeo',
            },
            {
                code: 'TH20',
                name: 'Sakon Nakhon',
            },
            {
                code: 'TH42',
                name: 'Samut Prakan',
            },
            {
                code: 'TH55',
                name: 'Samut Sakhon',
            },
            {
                code: 'TH54',
                name: 'Samut Songkhram',
            },
            {
                code: 'TH37',
                name: 'Saraburi',
            },
            {
                code: 'TH67',
                name: 'Satun',
            },
            {
                code: 'TH30',
                name: 'Si Sa Ket',
            },
            {
                code: 'TH33',
                name: 'Sing Buri',
            },
            {
                code: 'TH68',
                name: 'Songkhla',
            },
            {
                code: 'TH09',
                name: 'Sukhothai',
            },
            {
                code: 'TH51',
                name: 'Suphan Buri',
            },
            {
                code: 'TH60',
                name: 'Surat Thani',
            },
            {
                code: 'TH29',
                name: 'Surin',
            },
            {
                code: 'TH08',
                name: 'Tak',
            },
            {
                code: 'TH65',
                name: 'Trang',
            },
            {
                code: 'TH49',
                name: 'Trat',
            },
            {
                code: 'TH75',
                name: 'Ubon Ratchathani',
            },
            {
                code: 'TH76',
                name: 'Udon Thani',
            },
            {
                code: 'TH15',
                name: 'Uthai Thani',
            },
            {
                code: 'TH10',
                name: 'Uttaradit',
            },
            {
                code: 'TH70',
                name: 'Yala',
            },
            {
                code: 'TH72',
                name: 'Yasothon',
            },
        ],
    },
    {
        code: 'TL',
        id: 2404,
        name: 'Timor-Leste',
        states: [],
    },
    {
        code: 'TG',
        id: 2351,
        name: 'Togo',
        states: [
            {
                code: 'TO22',
                name: 'Centrale',
            },
            {
                code: 'TO23',
                name: 'Kara',
            },
            {
                code: 'TO24',
                name: 'Maritime',
            },
            {
                code: 'TO25',
                name: 'Plateaux',
            },
            {
                code: 'TO26',
                name: 'Savanes',
            },
        ],
    },
    {
        code: 'TK',
        id: 2438,
        name: 'Tokelau',
        states: [],
    },
    {
        code: 'TO',
        id: 2405,
        name: 'Tonga',
        states: [],
    },
    {
        code: 'TT',
        id: 2352,
        name: 'Trinidad and Tobago',
        states: [
            {
                code: 'TD01',
                name: 'Arima',
            },
            {
                code: 'TD13',
                name: 'Chaguanas',
            },
            {
                code: 'TD14',
                name: 'Couva/Tabaquite/Talparo',
            },
            {
                code: 'TD15',
                name: 'Diego Martin',
            },
            {
                code: 'TD11',
                name: 'Eastern Tobago',
            },
            {
                code: 'TD16',
                name: 'Mayaro/Rio Claro',
            },
            {
                code: 'TD17',
                name: 'Penal/Debe',
            },
            {
                code: 'TD18',
                name: 'Point Fortin',
            },
            {
                code: 'TD05',
                name: 'Port of Spain',
            },
            {
                code: 'TD19',
                name: 'Princes Town',
            },
            {
                code: 'TD10',
                name: 'San Fernando',
            },
            {
                code: 'TD20',
                name: 'San Juan/Laventille',
            },
            {
                code: 'TD21',
                name: 'Sangre Grande',
            },
            {
                code: 'TD22',
                name: 'Siparia',
            },
            {
                code: 'TD23',
                name: 'Tunapuna/Piarco',
            },
            {
                code: 'TD11',
                name: 'Western Tobago',
            },
        ],
    },
    {
        code: 'TN',
        id: 2353,
        name: 'Tunisia',
        states: [
            {
                code: 'TS38',
                name: 'Ariana',
            },
            {
                code: 'TS17',
                name: 'Béja',
            },
            {
                code: 'TS27',
                name: 'Ben Arous',
            },
            {
                code: 'TS18',
                name: 'Bizerte',
            },
            {
                code: 'TS29',
                name: 'Gabès',
            },
            {
                code: 'TS30',
                name: 'Gafsa',
            },
            {
                code: 'TS06',
                name: 'Jendouba',
            },
            {
                code: 'TS03',
                name: 'Kairouan',
            },
            {
                code: 'TS02',
                name: 'Kassérine',
            },
            {
                code: 'TS31',
                name: 'Kebili',
            },
            {
                code: 'TS14',
                name: 'Le Kef',
            },
            {
                code: 'TS15',
                name: 'Mahdia',
            },
            {
                code: 'TS39',
                name: 'Manouba',
            },
            {
                code: 'TS28',
                name: 'Médenine',
            },
            {
                code: 'TS16',
                name: 'Monastir',
            },
            {
                code: 'TS19',
                name: 'Nabeul',
            },
            {
                code: 'TS32',
                name: 'Sfax',
            },
            {
                code: 'TS33',
                name: 'Sidi Bou Zid',
            },
            {
                code: 'TS22',
                name: 'Siliana',
            },
            {
                code: 'TS23',
                name: 'Sousse',
            },
            {
                code: 'TS34',
                name: 'Tataouine',
            },
            {
                code: 'TS35',
                name: 'Tozeur',
            },
            {
                code: 'TS36',
                name: 'Tunis',
            },
            {
                code: 'TS37',
                name: 'Zaghouan',
            },
        ],
    },
    {
        code: 'TR',
        id: 2354,
        name: 'Turkey',
        states: [
            {
                code: 'TU81',
                name: 'Adana',
            },
            {
                code: 'TU02',
                name: 'Adiyaman',
            },
            {
                code: 'TU03',
                name: 'Afyonkarahisar',
            },
            {
                code: 'TU04',
                name: 'Agri',
            },
            {
                code: 'TU75',
                name: 'Aksaray',
            },
            {
                code: 'TU05',
                name: 'Amasya',
            },
            {
                code: 'TU68',
                name: 'Ankara',
            },
            {
                code: 'TU07',
                name: 'Antalya',
            },
            {
                code: 'TU86',
                name: 'Ardahan',
            },
            {
                code: 'TU08',
                name: 'Artvin',
            },
            {
                code: 'TU09',
                name: 'Aydin',
            },
            {
                code: 'TU10',
                name: 'Balikesir',
            },
            {
                code: 'TU87',
                name: 'Bartin',
            },
            {
                code: 'TU76',
                name: 'Batman',
            },
            {
                code: 'TU77',
                name: 'Bayburt',
            },
            {
                code: 'TU11',
                name: 'Bilecik',
            },
            {
                code: 'TU12',
                name: 'Bingöl',
            },
            {
                code: 'TU13',
                name: 'Bitlis',
            },
            {
                code: 'TU14',
                name: 'Bolu',
            },
            {
                code: 'TU15',
                name: 'Burdur',
            },
            {
                code: 'TU16',
                name: 'Bursa',
            },
            {
                code: 'TU17',
                name: 'Çanakkale',
            },
            {
                code: 'TU82',
                name: 'Çankiri',
            },
            {
                code: 'TU19',
                name: 'Çorum',
            },
            {
                code: 'TU20',
                name: 'Denizli',
            },
            {
                code: 'TU21',
                name: 'Diyarbakir',
            },
            {
                code: 'TU93',
                name: 'Düzce',
            },
            {
                code: 'TU22',
                name: 'Edirne',
            },
            {
                code: 'TU23',
                name: 'Elazig',
            },
            {
                code: 'TU24',
                name: 'Erzincan',
            },
            {
                code: 'TU25',
                name: 'Erzurum',
            },
            {
                code: 'TU26',
                name: 'Eskisehir',
            },
            {
                code: 'TU83',
                name: 'Gaziantep',
            },
            {
                code: 'TU28',
                name: 'Giresun',
            },
            {
                code: 'TU69',
                name: 'Gümüshane',
            },
            {
                code: 'TU70',
                name: 'Hakkari',
            },
            {
                code: 'TU31',
                name: 'Hatay',
            },
            {
                code: 'TU88',
                name: 'Igdir',
            },
            {
                code: 'TU33',
                name: 'Isparta',
            },
            {
                code: 'TU34',
                name: 'Istanbul',
            },
            {
                code: 'TU35',
                name: 'Izmir',
            },
            {
                code: 'TU46',
                name: 'Kahramanmaras',
            },
            {
                code: 'TU89',
                name: 'Karabük',
            },
            {
                code: 'TU78',
                name: 'Karaman',
            },
            {
                code: 'TU84',
                name: 'Kars',
            },
            {
                code: 'TU37',
                name: 'Kastamonu',
            },
            {
                code: 'TU38',
                name: 'Kayseri',
            },
            {
                code: 'TU90',
                name: 'Kilis',
            },
            {
                code: 'TU79',
                name: 'Kirikkale',
            },
            {
                code: 'TU39',
                name: 'Kirklareli',
            },
            {
                code: 'TU40',
                name: 'Kirsehir',
            },
            {
                code: 'TU41',
                name: 'Kocaeli',
            },
            {
                code: 'TU71',
                name: 'Konya',
            },
            {
                code: 'TU43',
                name: 'Kütahya',
            },
            {
                code: 'TU44',
                name: 'Malatya',
            },
            {
                code: 'TU45',
                name: 'Manisa',
            },
            {
                code: 'TU72',
                name: 'Mardin',
            },
            {
                code: 'TU32',
                name: 'Mersin',
            },
            {
                code: 'TU48',
                name: 'Mugla',
            },
            {
                code: 'TU49',
                name: 'Mus',
            },
            {
                code: 'TU50',
                name: 'Nevsehir',
            },
            {
                code: 'TU73',
                name: 'Nigde',
            },
            {
                code: 'TU52',
                name: 'Ordu',
            },
            {
                code: 'TU91',
                name: 'Osmaniye',
            },
            {
                code: 'TU53',
                name: 'Rize',
            },
            {
                code: 'TU54',
                name: 'Sakarya',
            },
            {
                code: 'TU55',
                name: 'Samsun',
            },
            {
                code: 'TU63',
                name: 'Sanliurfa',
            },
            {
                code: 'TU74',
                name: 'Siirt',
            },
            {
                code: 'TU57',
                name: 'Sinop',
            },
            {
                code: 'TU80',
                name: 'Sirnak',
            },
            {
                code: 'TU58',
                name: 'Sivas',
            },
            {
                code: 'TU59',
                name: 'Tekirdag',
            },
            {
                code: 'TU60',
                name: 'Tokat',
            },
            {
                code: 'TU61',
                name: 'Trabzon',
            },
            {
                code: 'TU62',
                name: 'Tunceli',
            },
            {
                code: 'TU64',
                name: 'Usak',
            },
            {
                code: 'TU65',
                name: 'Van',
            },
            {
                code: 'TU92',
                name: 'Yalova',
            },
            {
                code: 'TU66',
                name: 'Yozgat',
            },
            {
                code: 'TU85',
                name: 'Zonguldak',
            },
        ],
    },
    {
        code: 'TM',
        id: 2355,
        name: 'Turkmenistan',
        states: [
            {
                code: 'TX01',
                name: 'Ahal',
            },
            {
                code: 'TM.AB',
                name: 'Ashgabat',
            },
            {
                code: 'TX02',
                name: 'Balkan',
            },
            {
                code: 'TX03',
                name: 'Dashoguz',
            },
            {
                code: 'TX04',
                name: 'Lebap',
            },
            {
                code: 'TX05',
                name: 'Mary',
            },
        ],
    },
    {
        code: 'TC',
        id: 2439,
        name: 'Turks and Caicos Islands',
        states: [],
    },
    {
        code: 'TV',
        id: 2440,
        name: 'Tuvalu',
        states: [],
    },
    {
        code: 'UG',
        id: 2356,
        name: 'Uganda',
        states: [
            {
                code: 'UG.AI',
                name: 'Abim',
            },
            {
                code: 'UG.AD',
                name: 'Adjumani',
            },
            {
                code: 'UG.AG',
                name: 'Agago',
            },
            {
                code: 'UG.AL',
                name: 'Alebtong',
            },
            {
                code: 'UG.AT',
                name: 'Amolatar',
            },
            {
                code: 'UG.AZ',
                name: 'Amudat',
            },
            {
                code: 'UG.AM',
                name: 'Amuria',
            },
            {
                code: 'UG.AY',
                name: 'Amuru',
            },
            {
                code: 'UG.AQ',
                name: 'Apac',
            },
            {
                code: 'UG.AX',
                name: 'Arua',
            },
            {
                code: 'UG.BD',
                name: 'Budaka',
            },
            {
                code: 'UG.BA',
                name: 'Bududa',
            },
            {
                code: 'UG.BI',
                name: 'Bugiri',
            },
            {
                code: 'UG.BH',
                name: 'Buhweju',
            },
            {
                code: 'UG.BZ',
                name: 'Buikwe',
            },
            {
                code: 'UG.BE',
                name: 'Bukedea',
            },
            {
                code: 'UG.BM',
                name: 'Bukomansimbi',
            },
            {
                code: 'UG.BW',
                name: 'Bukwo',
            },
            {
                code: 'UG.BB',
                name: 'Bulambuli',
            },
            {
                code: 'UG.BL',
                name: 'Buliisa',
            },
            {
                code: 'UG.BX',
                name: 'Bundibugyo',
            },
            {
                code: 'UG.BC',
                name: 'Bushenyi',
            },
            {
                code: 'UG.BU',
                name: 'Busia',
            },
            {
                code: 'UG.BJ',
                name: 'Butaleja',
            },
            {
                code: 'UG.BT',
                name: 'Butambala',
            },
            {
                code: 'UG.BV',
                name: 'Buvuma',
            },
            {
                code: 'UG.BY',
                name: 'Buyende',
            },
            {
                code: 'UG.DO',
                name: 'Dokolo',
            },
            {
                code: 'UG.GM',
                name: 'Gomba',
            },
            {
                code: 'UG.GL',
                name: 'Gulu',
            },
            {
                code: 'UG.HO',
                name: 'Hoima',
            },
            {
                code: 'UG.IB',
                name: 'Ibanda',
            },
            {
                code: 'UG.IC',
                name: 'Iganga',
            },
            {
                code: 'UG.NG',
                name: 'Isingiro',
            },
            {
                code: 'UG.JI',
                name: 'Jinja',
            },
            {
                code: 'UG.AB',
                name: 'Kaabong',
            },
            {
                code: 'UG.KA',
                name: 'Kabale',
            },
            {
                code: 'UG.BR',
                name: 'Kabarole',
            },
            {
                code: 'UG.KD',
                name: 'Kaberamaido',
            },
            {
                code: 'UG.KN',
                name: 'Kalangala',
            },
            {
                code: 'UG.RO',
                name: 'Kaliro',
            },
            {
                code: 'UG.QA',
                name: 'Kalungu',
            },
            {
                code: 'UG.KM',
                name: 'Kampala',
            },
            {
                code: 'UG.QU',
                name: 'Kamuli',
            },
            {
                code: 'UG.KE',
                name: 'Kamwenge',
            },
            {
                code: 'UG.UU',
                name: 'Kanungu',
            },
            {
                code: 'UG.QP',
                name: 'Kapchorwa',
            },
            {
                code: 'UG.KS',
                name: 'Kasese',
            },
            {
                code: 'UG.KK',
                name: 'Katakwi',
            },
            {
                code: 'UG.KY',
                name: 'Kayunga',
            },
            {
                code: 'UG.KI',
                name: 'Kibaale',
            },
            {
                code: 'UG.QO',
                name: 'Kiboga',
            },
            {
                code: 'UG.QB',
                name: 'Kibuku',
            },
            {
                code: 'UG.KH',
                name: 'Kiruhuura',
            },
            {
                code: 'UG.QD',
                name: 'Kiryandongo',
            },
            {
                code: 'UG.KR',
                name: 'Kisoro',
            },
            {
                code: 'UG.QT',
                name: 'Kitgum',
            },
            {
                code: 'UG.OK',
                name: 'Koboko',
            },
            {
                code: 'UG.QL',
                name: 'Kole',
            },
            {
                code: 'UG.KF',
                name: 'Kotido',
            },
            {
                code: 'UG.QM',
                name: 'Kumi',
            },
            {
                code: 'UG.QW',
                name: 'Kween',
            },
            {
                code: 'UG.QZ',
                name: 'Kyankwanzi',
            },
            {
                code: 'UG.QG',
                name: 'Kyegegwa',
            },
            {
                code: 'UG.QJ',
                name: 'Kyenjojo',
            },
            {
                code: 'UG.LM',
                name: 'Lamwo',
            },
            {
                code: 'UG.LL',
                name: 'Lira',
            },
            {
                code: 'UG.LK',
                name: 'Luuka',
            },
            {
                code: 'UG.LW',
                name: 'Luwero',
            },
            {
                code: 'UG.LE',
                name: 'Lwengo',
            },
            {
                code: 'UG.LY',
                name: 'Lyantonde',
            },
            {
                code: 'UG.MW',
                name: 'Manafwa',
            },
            {
                code: 'UG.MQ',
                name: 'Masaka',
            },
            {
                code: 'UG.MZ',
                name: 'Masindi',
            },
            {
                code: 'UG.MG',
                name: 'Mayuge',
            },
            {
                code: 'UG.ME',
                name: 'Mbale',
            },
            {
                code: 'UG.RR',
                name: 'Mbarara',
            },
            {
                code: 'UG.MM',
                name: 'Mitoma',
            },
            {
                code: 'UG.TY',
                name: 'Mityana',
            },
            {
                code: 'UG.MX',
                name: 'Moroto',
            },
            {
                code: 'UG.MY',
                name: 'Moyo',
            },
            {
                code: 'UG.MJ',
                name: 'Mpigi',
            },
            {
                code: 'UG.MD',
                name: 'Mubende',
            },
            {
                code: 'UG.MV',
                name: 'Mukono',
            },
            {
                code: 'UG.NI',
                name: 'Nakapiripirit',
            },
            {
                code: 'UG.NK',
                name: 'Nakaseke',
            },
            {
                code: 'UG.NA',
                name: 'Nakasongola',
            },
            {
                code: 'UG.NY',
                name: 'Namayingo',
            },
            {
                code: 'UG.BK',
                name: 'Namutumba',
            },
            {
                code: 'UG.NQ',
                name: 'Napak',
            },
            {
                code: 'UG.NB',
                name: 'Nebbi',
            },
            {
                code: 'UG.NR',
                name: 'Ngora',
            },
            {
                code: 'UG.NO',
                name: 'Ntoroko',
            },
            {
                code: 'UG.NT',
                name: 'Ntungamo',
            },
            {
                code: 'UG.NW',
                name: 'Nwoya',
            },
            {
                code: 'UG.MH',
                name: 'Nyadri',
            },
            {
                code: 'UG.OT',
                name: 'Otuke',
            },
            {
                code: 'UG.OY',
                name: 'Oyam',
            },
            {
                code: 'UG.PR',
                name: 'Pader',
            },
            {
                code: 'UG.PS',
                name: 'Pallisa',
            },
            {
                code: 'UG.RI',
                name: 'Rakai',
            },
            {
                code: 'UG.RZ',
                name: 'Rubirizi',
            },
            {
                code: 'UG.RK',
                name: 'Rukungiri',
            },
            {
                code: 'UG.SE',
                name: 'Sembabule',
            },
            {
                code: 'UG.SX',
                name: 'Serere',
            },
            {
                code: 'UG.SH',
                name: 'Sheema',
            },
            {
                code: 'UG.SK',
                name: 'Sironko',
            },
            {
                code: 'UG.ST',
                name: 'Soroti',
            },
            {
                code: 'UG.TR',
                name: 'Tororo',
            },
            {
                code: 'UG.WA',
                name: 'Wakiso',
            },
            {
                code: 'UG.YU',
                name: 'Yumbe',
            },
            {
                code: 'UG.ZO',
                name: 'Zombo',
            },
        ],
    },
    {
        code: 'UA',
        id: 2357,
        name: 'Ukraine',
        states: [
            {
                code: 'UP01',
                name: 'Cherkasy',
            },
            {
                code: 'UP02',
                name: 'Chernihiv',
            },
            {
                code: 'UP03',
                name: 'Chernivtsi',
            },
            {
                code: 'UP11',
                name: 'Crimea',
            },
            {
                code: 'UP04',
                name: "Dnipropetrovs'k",
            },
            {
                code: 'UP05',
                name: "Donets'k",
            },
            {
                code: 'UP06',
                name: "Ivano-Frankivs'k",
            },
            {
                code: 'UP07',
                name: 'Kharkiv',
            },
            {
                code: 'UP08',
                name: 'Kherson',
            },
            {
                code: 'UP09',
                name: "Khmel'nyts'kyy",
            },
            {
                code: 'UP13',
                name: 'Kiev',
            },
            {
                code: 'UP12',
                name: 'Kiev City',
            },
            {
                code: 'UP10',
                name: 'Kirovohrad',
            },
            {
                code: 'UP15',
                name: "L'viv",
            },
            {
                code: 'UP14',
                name: "Luhans'k",
            },
            {
                code: 'UP16',
                name: 'Mykolayiv',
            },
            {
                code: 'UP17',
                name: 'Odessa',
            },
            {
                code: 'UP18',
                name: 'Poltava',
            },
            {
                code: 'UP19',
                name: 'Rivne',
            },
            {
                code: 'UP20',
                name: "Sevastopol' City",
            },
            {
                code: 'UP21',
                name: 'Sumy',
            },
            {
                code: 'UP22',
                name: "Ternopil'",
            },
            {
                code: 'UP25',
                name: 'Transcarpathia',
            },
            {
                code: 'UP23',
                name: 'Vinnytsya',
            },
            {
                code: 'UP24',
                name: 'Volyn',
            },
            {
                code: 'UP26',
                name: 'Zaporizhzhya',
            },
            {
                code: 'UP27',
                name: 'Zhytomyr',
            },
        ],
    },
    {
        code: 'AE',
        id: 2358,
        name: 'United Arab Emirates',
        states: [
            {
                code: 'AE02',
                name: "'Ajman",
            },
            {
                code: 'AE01',
                name: 'Abu Dhabi',
            },
            {
                code: 'AE04',
                name: 'Al Fujayrah',
            },
            {
                code: 'AE03',
                name: 'Dubai',
            },
            {
                code: 'AE05',
                name: "Ra's al Khaymah",
            },
            {
                code: 'AE06',
                name: 'Sharjah',
            },
            {
                code: 'AE07',
                name: 'Umm al Qaywayn',
            },
        ],
    },
    {
        code: 'UM',
        id: 2441,
        name: 'United States Minor Outlying Islands',
        states: [],
    },
    {
        code: 'UY',
        id: 2360,
        name: 'Uruguay',
        states: [],
    },
    {
        code: 'UZ',
        id: 2361,
        name: 'Uzbekistan',
        states: [
            {
                code: 'UZ01',
                name: 'Andijon',
            },
            {
                code: 'UZ02',
                name: 'Buxoro',
            },
            {
                code: 'UZ03',
                name: 'Farg`ona',
            },
            {
                code: 'UZ15',
                name: 'Jizzax',
            },
            {
                code: 'UZ09',
                name: 'Karakalpakstan',
            },
            {
                code: 'UZ08',
                name: 'Kashkadarya',
            },
            {
                code: 'UZ06',
                name: 'Namangan',
            },
            {
                code: 'UZ07',
                name: 'Navoi',
            },
            {
                code: 'UZ10',
                name: 'Samarkand',
            },
            {
                code: 'UZ16',
                name: 'Sirdaryo',
            },
            {
                code: 'UZ12',
                name: 'Surxondaryo',
            },
            {
                code: 'UZ13',
                name: 'Tashkent City',
            },
            {
                code: 'UZ14',
                name: 'Tashkent',
            },
            {
                code: 'UZ05',
                name: 'Xorazm',
            },
        ],
    },
    {
        code: 'NH',
        id: 2406,
        name: 'Vanuatu',
        states: [],
    },
    {
        code: 'VE',
        id: 2363,
        name: 'Venezuela; Bolivarian Republic of',
        states: [
            {
                code: 'VE01',
                name: 'Amazonas',
            },
            {
                code: 'VE02',
                name: 'Anzoátegui',
            },
            {
                code: 'VE03',
                name: 'Apure',
            },
            {
                code: 'VE04',
                name: 'Aragua',
            },
            {
                code: 'VE05',
                name: 'Barinas',
            },
            {
                code: 'VE06',
                name: 'Bolívar',
            },
            {
                code: 'VE07',
                name: 'Carabobo',
            },
            {
                code: 'VE08',
                name: 'Cojedes',
            },
            {
                code: 'VE09',
                name: 'Delta Amacuro',
            },
            {
                code: 'VE24',
                name: 'Dependencias Federales',
            },
            {
                code: 'VE25',
                name: 'Distrito Capital',
            },
            {
                code: 'VE11',
                name: 'Falcón',
            },
            {
                code: 'VE12',
                name: 'Guárico',
            },
            {
                code: 'VE13',
                name: 'Lara',
            },
            {
                code: 'VE14',
                name: 'Mérida',
            },
            {
                code: 'VE15',
                name: 'Miranda',
            },
            {
                code: 'VE16',
                name: 'Monagas',
            },
            {
                code: 'VE17',
                name: 'Nueva Esparta',
            },
            {
                code: 'VE18',
                name: 'Portuguesa',
            },
            {
                code: 'VE19',
                name: 'Sucre',
            },
            {
                code: 'VE20',
                name: 'Táchira',
            },
            {
                code: 'VE21',
                name: 'Trujillo',
            },
            {
                code: 'VE26',
                name: 'Vargas',
            },
            {
                code: 'VE22',
                name: 'Yaracuy',
            },
            {
                code: 'VE23',
                name: 'Zulia',
            },
        ],
    },
    {
        code: 'VN',
        id: 2364,
        name: 'Vietnam',
        states: [
            {
                code: 'VM01',
                name: 'An Giang',
            },
            {
                code: 'VM45',
                name: 'Ba Ria-Vung Tau',
            },
            {
                code: 'VM72',
                name: 'Bac Can',
            },
            {
                code: 'VM71',
                name: 'Bac Giang',
            },
            {
                code: 'VM73',
                name: 'Bac Lieu',
            },
            {
                code: 'VM74',
                name: 'Bac Ninh',
            },
            {
                code: 'VM03',
                name: 'Ben Tre',
            },
            {
                code: 'VM46',
                name: 'Binh Dinh',
            },
            {
                code: 'VM75',
                name: 'Binh Duong',
            },
            {
                code: 'VM76',
                name: 'Binh Phuoc',
            },
            {
                code: 'VM47',
                name: 'Binh Thuan',
            },
            {
                code: 'VM77',
                name: 'Ca Mau',
            },
            {
                code: 'VM87',
                name: 'Can Tho',
            },
            {
                code: 'VM05',
                name: 'Cao Bang',
            },
            {
                code: 'VM78',
                name: 'Da Nang',
            },
            {
                code: 'VM88',
                name: 'Dac Lac',
            },
            {
                code: 'VM91',
                name: 'Dac Nong',
            },
            {
                code: 'VM92',
                name: 'Dien Bien',
            },
            {
                code: 'VM43',
                name: 'Dong Nai',
            },
            {
                code: 'VM09',
                name: 'Dong Thap',
            },
            {
                code: 'VM49',
                name: 'Gia Lai',
            },
            {
                code: 'VM50',
                name: 'Ha Giang',
            },
            {
                code: 'VM80',
                name: 'Ha Nam',
            },
            {
                code: 'VM52',
                name: 'Ha Tinh',
            },
            {
                code: 'VM79',
                name: 'Hai Duong',
            },
            {
                code: 'VM13',
                name: 'Haiphong',
            },
            {
                code: 'VM44',
                name: 'Hanoi',
            },
            {
                code: 'VM93',
                name: 'Hau Giang',
            },
            {
                code: 'VM20',
                name: 'Ho Chi Minh',
            },
            {
                code: 'VM53',
                name: 'Hoa Binh',
            },
            {
                code: 'VM81',
                name: 'Hung Yen',
            },
            {
                code: 'VM54',
                name: 'Khanh Hoa',
            },
            {
                code: 'VM21',
                name: 'Kien Giang',
            },
            {
                code: 'VM55',
                name: 'Kon Tum',
            },
            {
                code: 'VM89',
                name: 'Lai Chau',
            },
            {
                code: 'VM23',
                name: 'Lam Dong',
            },
            {
                code: 'VM39',
                name: 'Lang Son',
            },
            {
                code: 'VM90',
                name: 'Lao Cai',
            },
            {
                code: 'VM24',
                name: 'Long An',
            },
            {
                code: 'VM82',
                name: 'Nam Dinh',
            },
            {
                code: 'VM58',
                name: 'Nghe An',
            },
            {
                code: 'VM59',
                name: 'Ninh Binh',
            },
            {
                code: 'VM60',
                name: 'Ninh Thuan',
            },
            {
                code: 'VM83',
                name: 'Phu Tho',
            },
            {
                code: 'VM61',
                name: 'Phu Yen',
            },
            {
                code: 'VM62',
                name: 'Quang Binh',
            },
            {
                code: 'VM84',
                name: 'Quang Nam',
            },
            {
                code: 'VM63',
                name: 'Quang Ngai',
            },
            {
                code: 'VM30',
                name: 'Quang Ninh',
            },
            {
                code: 'VM64',
                name: 'Quang Tri',
            },
            {
                code: 'VM65',
                name: 'Soc Trang',
            },
            {
                code: 'VM32',
                name: 'Son La',
            },
            {
                code: 'VM33',
                name: 'Tay Ninh',
            },
            {
                code: 'VM35',
                name: 'Thai Binh',
            },
            {
                code: 'VM85',
                name: 'Thai Nguyen',
            },
            {
                code: 'VM34',
                name: 'Thanh Hoa',
            },
            {
                code: 'VM66',
                name: 'Thua Thien-Hue',
            },
            {
                code: 'VM37',
                name: 'Tien Giang',
            },
            {
                code: 'VM67',
                name: 'Tra Vinh',
            },
            {
                code: 'VM68',
                name: 'Tuyen Quang',
            },
            {
                code: 'VM69',
                name: 'Vinh Long',
            },
            {
                code: 'VM86',
                name: 'Vinh Phuc',
            },
            {
                code: 'VM70',
                name: 'Yen Bai',
            },
        ],
    },
    {
        code: 'VG',
        id: 2446,
        name: 'Virgin Islands; British',
        states: [
            {
                code: 'VG.VI',
                name: 'British Virgin Islands',
            },
        ],
    },
    {
        code: 'VI',
        id: 2442,
        name: 'Virgin Islands; U.S.',
        states: [
            {
                code: '010',
                name: 'Saint Croix',
            },
            {
                code: '020',
                name: 'Saint John',
            },
            {
                code: '030',
                name: 'Saint Thomas',
            },
        ],
    },
    {
        code: 'WF',
        id: 2443,
        name: 'Wallis and Futuna',
        states: [],
    },
    {
        code: 'EH',
        id: 2444,
        name: 'Western Sahara',
        states: [],
    },
    {
        code: 'YE',
        id: 2382,
        name: 'Yemen',
        states: [
            {
                code: 'YM01',
                name: 'Abyan',
            },
            {
                code: 'YM20',
                name: "Al Bayda'",
            },
            {
                code: 'YM18',
                name: "Al Dali'",
            },
            {
                code: 'YM08',
                name: 'Al Hudaydah',
            },
            {
                code: 'YM21',
                name: 'Al Jawf',
            },
            {
                code: 'YM03',
                name: 'Al Mahrah',
            },
            {
                code: 'YM10',
                name: 'Al Mahwit',
            },
            {
                code: 'YM19',
                name: 'Amran',
            },
            {
                code: 'YM11',
                name: 'Dhamar',
            },
            {
                code: 'YM04',
                name: 'Hadramawt',
            },
            {
                code: 'YM22',
                name: 'Hajjah',
            },
            {
                code: 'YM23',
                name: 'Ibb',
            },
            {
                code: 'YM24',
                name: 'Lahij',
            },
            {
                code: 'YM14',
                name: "Ma'rib",
            },
            {
                code: 'YM27',
                name: 'Raymah',
            },
            {
                code: 'YM15',
                name: 'Sa`dah',
            },
            {
                code: 'YM16',
                name: "San`a'",
            },
            {
                code: 'YM26',
                name: "San`a' [City]",
            },
            {
                code: 'YM05',
                name: 'Shabwah',
            },
            {
                code: 'YM28',
                name: 'Socotra',
            },
            {
                code: 'YM25',
                name: 'Ta`izz',
            },
            {
                code: 'YM02',
                name: '`Adan',
            },
        ],
    },
    {
        code: 'ZM',
        id: 2369,
        name: 'Zambia',
        states: [
            {
                code: 'ZA02',
                name: 'Central',
            },
            {
                code: 'ZA08',
                name: 'Copperbelt',
            },
            {
                code: 'ZA03',
                name: 'Eastern',
            },
            {
                code: 'ZA04',
                name: 'Luapula',
            },
            {
                code: 'ZA09',
                name: 'Lusaka',
            },
            {
                code: 'ZA10',
                name: 'Muchinga',
            },
            {
                code: 'ZA06',
                name: 'North-Western',
            },
            {
                code: 'ZA05',
                name: 'Northern',
            },
            {
                code: 'ZA07',
                name: 'Southern',
            },
            {
                code: 'ZA01',
                name: 'Western',
            },
        ],
    },
    {
        code: 'ZW',
        id: 2370,
        name: 'Zimbabwe',
        states: [
            {
                code: 'ZI09',
                name: 'Bulawayo',
            },
            {
                code: 'ZI10',
                name: 'Harare',
            },
            {
                code: 'ZI01',
                name: 'Manicaland',
            },
            {
                code: 'ZI03',
                name: 'Mashonaland Central',
            },
            {
                code: 'ZI04',
                name: 'Mashonaland East',
            },
            {
                code: 'ZI05',
                name: 'Mashonaland West',
            },
            {
                code: 'ZI08',
                name: 'Masvingo',
            },
            {
                code: 'ZI06',
                name: 'Matabeleland North',
            },
            {
                code: 'ZI07',
                name: 'Matabeleland South',
            },
            {
                code: 'ZI02',
                name: 'Midlands',
            },
        ],
    },
    {
        code: 'NONE',
        id: 2378,
        name: '- None Specified -',
        states: [],
    },
];
/**
 * Gets all countries
 * @return {?}
 */
function getCountries() {
    return COUNTRIES.map(function (country) { return country.name; });
}
/**
 * Gets a country by country ID
 * @param {?} id
 * @return {?}
 */
function findByCountryId(id) {
    return COUNTRIES.find(function (country) { return country.id === id; });
}
/**
 * Gets a country by country name
 * @param {?} name - Name of country to find
 * @return {?}
 */
function findByCountryName(name) {
    return COUNTRIES.find(function (country) { return country.name === name.trim(); });
}
/**
 * Gets a country by country code
 * @param {?} code - Code of country to find
 * @return {?}
 */
function findByCountryCode(code) {
    return COUNTRIES.find(function (country) { return country.code === code.trim(); });
}
/**
 * Gets states by country name
 * @param {?} name - Name of the country to search by
 * @return {?}
 */
function getStateObjects(name) {
    if (name) {
        /** @type {?} */
        var foundCountry = COUNTRIES.find(function (country) { return country.name === name.trim(); });
        return (foundCountry && foundCountry.states) || [];
    }
    return [];
}
/**
 * Gets state names by country name
 * @param {?} name - Name of the country to search by
 * @return {?}
 */
function getStates(name) {
    return getStateObjects(name).map(function (state$$1) { return state$$1.name; });
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Value accessor for the component (supports ngModel)
/** @type {?} */
var ADDRESS_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NovoAddressElement; }),
    multi: true,
};
var NovoAddressElement = /** @class */ (function () {
    function NovoAddressElement(labels) {
        this.labels = labels;
        this._readOnly = false;
        this.states = [];
        this.countries = getCountries();
        this.fieldList = ['address1', 'address2', 'city', 'state', 'zip', 'countryID'];
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
        this.focused = {};
        this.invalid = {};
        this.disabled = {};
        this.invalidMaxlength = {};
        this.valid = {};
        this.tooltip = {};
        this.initComplete = false;
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
        this.blur = new EventEmitter();
        this.validityChange = new EventEmitter();
    }
    Object.defineProperty(NovoAddressElement.prototype, "readOnly", {
        get: /**
         * @return {?}
         */
        function () {
            return this._readOnly;
        },
        set: /**
         * @param {?} readOnly
         * @return {?}
         */
        function (readOnly) {
            var _this = this;
            this._readOnly = readOnly;
            this.fieldList.forEach(function (field) {
                _this.disabled[field] = _this._readOnly;
            });
            if (this.model) {
                this.updateStates();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoAddressElement.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!this.config) {
            this.config = {};
        }
        if (this.model) {
            this.writeValue(this.model);
            this.updateControl();
        }
        else if (!this.model) {
            this.model = {};
        }
        this.initConfig();
        if (Helpers.isBlank(this.model.countryID)) {
            this.updateStates();
        }
    };
    /**
     * @return {?}
     */
    NovoAddressElement.prototype.initConfig = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.fieldList.forEach(function (field) {
            if (!_this.config.hasOwnProperty(field)) {
                _this.config[field] = {
                    hidden: true,
                };
            }
            if (!_this.config[field].hasOwnProperty('label')) {
                _this.config[field].label = _this.labels[field];
            }
            if (_this.config.required) {
                _this.config[field].required = true;
            }
            if (_this.config[field].readOnly || _this.config.readOnly) {
                _this.config[field].readOnly = true;
                _this.disabled[field] = true;
            }
            if (field === 'countryID') {
                if (!_this.config[field].pickerConfig) {
                    _this.config.countryID.pickerConfig = _this.getDefaultCountryConfig();
                }
                _this.config[field].pickerConfig.defaultOptions = _this.config.countryID.pickerConfig.options;
            }
            if (field === 'state') {
                if (!_this.config[field].pickerConfig) {
                    _this.config.state.pickerConfig = _this.getDefaultStateConfig();
                    _this.config[field].pickerConfig.defaultOptions = _this.config[field].pickerConfig.options;
                }
                _this.stateOptions = _this.config[field].pickerConfig.options;
                _this.config[field].pickerConfig.options = function (query$$1) {
                    if (query$$1 === void 0) { query$$1 = ''; }
                    return _this.stateOptions(query$$1, _this.model.countryID);
                };
                _this.config[field].pickerConfig.defaultOptions = _this.stateOptions;
            }
        });
    };
    /**
     * @param {?} field
     * @return {?}
     */
    NovoAddressElement.prototype.isValid = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        /** @type {?} */
        var valid = true;
        if (((this.config[field].required && (Helpers.isBlank(this.model[field]) || Helpers.isEmpty(this.model[field]))) ||
            !this.config[field].required) &&
            !(field === 'countryID' && this.config[field].required && !Helpers.isBlank(this.model.countryID)) &&
            !(field === 'state' &&
                this.config[field].required &&
                (!Helpers.isEmpty(this.model.state) ||
                    ((Helpers.isBlank(this.model.state) || Helpers.isEmpty(this.model.state)) &&
                        !Helpers.isBlank(this.model.countryName) &&
                        this.config.state.pickerConfig &&
                        this.config.state.pickerConfig.defaultOptions &&
                        this.config.state.pickerConfig.defaultOptions.length === 0)))) {
            valid = false;
        }
        else if (!Helpers.isEmpty(this.model[field]) &&
            !Helpers.isBlank(this.config[field].maxlength) &&
            this.config[field].maxlength < this.model[field].length) {
            valid = false;
        }
        this.valid[field] = valid;
    };
    /**
     * @param {?} field
     * @return {?}
     */
    NovoAddressElement.prototype.isInvalid = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        /** @type {?} */
        var invalid = false;
        /** @type {?} */
        var invalidMaxlength = false;
        if ((field !== 'countryID' &&
            field !== 'state' &&
            this.config[field].required &&
            Helpers.isEmpty(this.model[field]) &&
            !Helpers.isBlank(this.model[field])) ||
            (field === 'countryID' && this.config[field].required && Helpers.isBlank(this.model.countryName) && this.config[field].updated) ||
            (field === 'state' &&
                this.config[field].required &&
                (Helpers.isBlank(this.model.state) || Helpers.isEmpty(this.model.state)) &&
                !Helpers.isBlank(this.model.countryID) &&
                this.config[field].updated &&
                this.config.state.pickerConfig &&
                this.config.state.pickerConfig.defaultOptions &&
                this.config.state.pickerConfig.defaultOptions.length > 0)) {
            invalid = true;
        }
        else if (!Helpers.isEmpty(this.model[field]) &&
            !Helpers.isBlank(this.config[field].maxlength) &&
            this.config[field].maxlength < this.model[field].length) {
            invalid = true;
            invalidMaxlength = true;
        }
        this.invalid[field] = invalid;
        this.invalidMaxlength[field] = invalidMaxlength;
    };
    /**
     * @param {?} event
     * @param {?} field
     * @return {?}
     */
    NovoAddressElement.prototype.onInput = /**
     * @param {?} event
     * @param {?} field
     * @return {?}
     */
    function (event, field) {
        this.isInvalid(field);
        this.isValid(field);
        if (event) {
            this.change.emit({ value: this.model[field], field: field });
        }
    };
    /**
     * @param {?} event
     * @param {?} field
     * @return {?}
     */
    NovoAddressElement.prototype.isFocused = /**
     * @param {?} event
     * @param {?} field
     * @return {?}
     */
    function (event, field) {
        this.focused[field] = true;
        this.focus.emit({ event: event, field: field });
    };
    /**
     * @param {?} event
     * @param {?} field
     * @return {?}
     */
    NovoAddressElement.prototype.isBlurred = /**
     * @param {?} event
     * @param {?} field
     * @return {?}
     */
    function (event, field) {
        this.focused[field] = false;
        this.blur.emit({ event: event, field: field });
    };
    /**
     * @param {?} evt
     * @return {?}
     */
    NovoAddressElement.prototype.onCountryChange = /**
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        /** @type {?} */
        var country = evt && evt.rawValue ? evt.rawValue : null;
        /** @type {?} */
        var field;
        /** @type {?} */
        var statesUpdatable = false;
        this.config.countryID.updated = true;
        if (this.config.countryID.pickerConfig) {
            field = this.config.countryID.pickerConfig.field;
        }
        if (country && field && !Helpers.isBlank(country[field]) && this.model.countryID !== country[field]) {
            this.model.countryID = country[field];
            this.model.countryName = Helpers.interpolate(this.config.countryID.pickerConfig.format, country);
            this.disabled.state = false;
            this.tooltip.state = undefined;
            statesUpdatable = true;
        }
        else if (Helpers.isBlank(country) || Helpers.isBlank(country[field])) {
            this.model.countryID = undefined;
            this.model.countryName = undefined;
            this.disabled.state = true;
            this.tooltip.state = this.labels.selectCountryFirst;
            this.invalid.state = false;
            statesUpdatable = true;
        }
        // Update state
        if (statesUpdatable) {
            this.model.state = undefined;
            this.updateStates();
        }
        this.updateControl();
        this.onInput(null, 'countryID');
        this.onInput(null, 'state');
    };
    /**
     * @param {?} evt
     * @return {?}
     */
    NovoAddressElement.prototype.onStateChange = /**
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        /** @type {?} */
        var state$$1 = evt && evt.value ? evt.value : null;
        this.config.state.updated = true;
        this.model.state = state$$1;
        this.updateControl();
        this.onInput(null, 'state');
    };
    /**
     * @param {?} model
     * @return {?}
     */
    NovoAddressElement.prototype.setStateLabel = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        /** @type {?} */
        var state$$1 = model.state;
        if (!Helpers.isBlank(state$$1)) {
            if (this.config.state.required) {
                this.valid.state = true;
            }
            this.model.state = state$$1;
        }
        else {
            this.model.state = undefined;
            if (this.config.state.required) {
                this.valid.state = false;
            }
        }
    };
    /**
     * @return {?}
     */
    NovoAddressElement.prototype.updateStates = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.config.state.pickerConfig.options && !Helpers.isBlank(this.model.countryID)) {
            this.config.state.pickerConfig.options = function (query$$1) {
                if (query$$1 === void 0) { query$$1 = ''; }
                return _this.stateOptions(query$$1, _this.model.countryID);
            };
            this.stateOptions('', this.model.countryID).then(function (results) {
                _this.config.state.pickerConfig.defaultOptions = results;
                if (results.length) {
                    _this.tooltip.state = undefined;
                    _this.disabled.state = _this._readOnly;
                    _this.setStateLabel(_this.model);
                }
                else {
                    _this.disabled.state = true;
                    _this.tooltip.state = _this.labels.noStatesForCountry;
                    if (_this.config.state.required) {
                        _this.valid.state = true;
                    }
                }
                _this.validityChange.emit();
                _this.onInput(null, 'state');
            });
        }
        else {
            this.config.state.pickerConfig.defaultOptions = [];
            this.disabled.state = true;
            this.tooltip.state = this.labels.selectCountryFirst;
            if (this.config.state.required) {
                this.valid.state = false;
            }
        }
    };
    /**
     * @param {?=} filter
     * @param {?=} countryID
     * @return {?}
     */
    NovoAddressElement.prototype.getStateOptions = /**
     * @param {?=} filter
     * @param {?=} countryID
     * @return {?}
     */
    function (filter$$1, countryID) {
        if (filter$$1 === void 0) { filter$$1 = ''; }
        if (countryID) {
            /** @type {?} */
            var country = findByCountryId(countryID);
            /** @type {?} */
            var states = getStates(country.name);
            if (filter$$1) {
                return states.filter(function (name) { return new RegExp("" + filter$$1, 'gi').test(name); });
            }
            return states;
        }
        else {
            return [];
        }
    };
    /**
     * @return {?}
     */
    NovoAddressElement.prototype.updateControl = /**
     * @return {?}
     */
    function () {
        this.onModelChange(this.model);
        this.onInput(null, 'countryID');
        this.onInput(null, 'state');
    };
    /**
     * @param {?} model
     * @return {?}
     */
    NovoAddressElement.prototype.writeValue = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        var _this = this;
        /** @type {?} */
        var loadingCountries = false;
        if (model) {
            /** @type {?} */
            var countryName_1;
            if (model.countryName && model.countryID) {
                countryName_1 = model.countryName;
            }
            else if (model.countryID) {
                if (this.config.countryID.pickerConfig && this.config.countryID.pickerConfig.getLabels) {
                    if (Helpers.isFunction(this.config.countryID.pickerConfig.getLabels)) {
                        /** @type {?} */
                        var promise = this.config.countryID.pickerConfig.getLabels(model.countryID);
                        loadingCountries = true;
                        if (promise.then) {
                            promise.then(function (result) {
                                loadingCountries = false;
                                countryName_1 = Helpers.interpolateWithFallback(_this.config.countryID.pickerConfig.format, result);
                                _this.model = Object.assign(model, { countryName: countryName_1 });
                                _this.updateStates();
                            });
                        }
                    }
                }
            }
            if (countryName_1) {
                countryName_1 = countryName_1.trim();
                model.state = model.state || '';
                this.model = Object.assign(model, { countryName: countryName_1 });
            }
            else {
                this.model = model;
            }
            if (!loadingCountries && !Helpers.isBlank(this.model.countryID)) {
                this.updateStates();
            }
        }
        this.fieldList.forEach(function (field) {
            _this.onInput(null, field);
        });
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoAddressElement.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoAddressElement.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelTouched = fn;
    };
    /**
     * @private
     * @return {?}
     */
    NovoAddressElement.prototype.getDefaultStateConfig = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        return {
            field: 'value',
            format: '$label',
            options: function (query$$1, countryID) {
                if (query$$1 === void 0) { query$$1 = ''; }
                return Promise.resolve(_this.getStateOptions(query$$1, countryID));
            },
            getLabels: function (state$$1) {
                return Promise.resolve(state$$1);
            },
        };
    };
    /**
     * @private
     * @return {?}
     */
    NovoAddressElement.prototype.getDefaultCountryConfig = /**
     * @private
     * @return {?}
     */
    function () {
        return {
            field: 'value',
            format: '$label',
            options: function (query$$1) {
                if (query$$1 === void 0) { query$$1 = ''; }
                return new Promise(function (resolve) {
                    /** @type {?} */
                    var countries = getCountries();
                    if (query$$1) {
                        countries = countries.filter(function (country) { return new RegExp("" + query$$1, 'gi').test(country.name); });
                    }
                    return resolve(countries);
                });
            },
            getLabels: function (countryID) {
                return new Promise(function (resolve) {
                    /** @type {?} */
                    var country = findByCountryId(countryID);
                    if (country) {
                        resolve(country.name);
                    }
                    else {
                        resolve('');
                    }
                });
            },
        };
    };
    NovoAddressElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-address',
                    providers: [ADDRESS_VALUE_ACCESSOR],
                    template: "\n        <span *ngIf=\"!config?.address1?.hidden\" class=\"street-address\" [class.invalid]=\"invalid.address1\" [class.focus]=\"focused.address1\" [class.disabled]=\"disabled.address1\">\n            <i *ngIf=\"config.address1.required\"\n                class=\"required-indicator address1\"\n                [ngClass]=\"{'bhi-circle': !valid.address1, 'bhi-check': valid.address1}\">\n            </i>\n            <input [class.maxlength-error]=\"invalidMaxlength.address1\" type=\"text\" id=\"address1\" name=\"address1\" [placeholder]=\"config.address1.label\" [maxlength]=\"config?.address1?.maxlength\" autocomplete=\"shipping street-address address-line-1\" [(ngModel)]=\"model.address1\" (ngModelChange)=\"updateControl()\" (focus)=\"isFocused($event, 'address1')\" (blur)=\"isBlurred($event, 'address1')\" (input)=\"onInput($event, 'address1')\"/>\n        </span>\n        <span *ngIf=\"!config?.address2?.hidden\" class=\"apt suite\" [class.invalid]=\"invalid.address2\" [class.focus]=\"focused.address2\" [class.disabled]=\"disabled.address2\">\n            <i *ngIf=\"config.address2.required\"\n                class=\"required-indicator address2\"\n                [ngClass]=\"{'bhi-circle': !valid.address2, 'bhi-check': valid.address2}\">\n            </i>\n            <input [class.maxlength-error]=\"invalidMaxlength.address2\" type=\"text\" id=\"address2\" name=\"address2\" [placeholder]=\"config.address2.label\" [maxlength]=\"config?.address2?.maxlength\" autocomplete=\"shipping address-line-2\" [(ngModel)]=\"model.address2\" (ngModelChange)=\"updateControl()\" (focus)=\"isFocused($event, 'address2')\" (blur)=\"isBlurred($event, 'address2')\" (input)=\"onInput($event, 'address2')\"/>\n        </span>\n        <span *ngIf=\"!config?.city?.hidden\" class=\"city locality\" [class.invalid]=\"invalid.city\" [class.focus]=\"focused.city\" [class.disabled]=\"disabled.city\">\n            <i *ngIf=\"config.city.required\"\n                class=\"required-indicator\"\n                [ngClass]=\"{'bhi-circle': !valid.city, 'bhi-check': valid.city}\">\n            </i>\n            <input [class.maxlength-error]=\"invalidMaxlength.city\" type=\"text\" id=\"city\" name=\"city\" [placeholder]=\"config.city.label\" autocomplete=\"shipping city locality\" [maxlength]=\"config?.city?.maxlength\" [(ngModel)]=\"model.city\" (ngModelChange)=\"updateControl()\" (focus)=\"isFocused($event, 'city')\" (blur)=\"isBlurred($event, 'city')\" (input)=\"onInput($event, 'city')\"/>\n        </span>\n        <span *ngIf=\"!config?.state?.hidden\" class=\"state region\" [class.invalid]=\"invalid.state\" [class.focus]=\"focused.state\" [class.disabled]=\"disabled.state\"  [tooltip]=\"tooltip.state\">\n            <i *ngIf=\"config.state.required\"\n                class=\"required-indicator\"\n                [ngClass]=\"{'bhi-circle': !valid.state, 'bhi-check': valid.state}\">\n            </i>\n            <novo-picker [config]=\"config?.state?.pickerConfig\" [placeholder]=\"config?.state?.label\" (changed)=\"onStateChange($event)\" autocomplete=\"shipping region\" [(ngModel)]=\"model.state\" [disablePickerInput]=\"disabled.state\"></novo-picker>\n        </span>\n        <span *ngIf=\"!config?.zip?.hidden\" class=\"zip postal-code\" [class.invalid]=\"invalid.zip\" [class.focus]=\"focused.zip\" [class.disabled]=\"disabled.zip\">\n            <i *ngIf=\"config.zip.required\"\n                class=\"required-indicator\"\n                [ngClass]=\"{'bhi-circle': !valid.zip, 'bhi-check': valid.zip}\">\n            </i>\n            <input [class.maxlength-error]=\"invalidMaxlength.zip\" type=\"text\" id=\"zip\" name=\"zip\" [placeholder]=\"config.zip.label\" autocomplete=\"shipping postal-code\" [maxlength]=\"config?.zip?.maxlength\" [(ngModel)]=\"model.zip\" (ngModelChange)=\"updateControl()\" (focus)=\"isFocused($event, 'zip')\" (blur)=\"isBlurred($event, 'zip')\" (input)=\"onInput($event, 'zip')\" />\n        </span>\n        <span *ngIf=\"!config?.countryID?.hidden\" class=\"country-name\" [class.invalid]=\"invalid.countryID\" [class.focus]=\"focused.countryID\" [class.disabled]=\"disabled.countryID\">\n            <i *ngIf=\"config.countryID.required\"\n                class=\"required-indicator\"\n                [ngClass]=\"{'bhi-circle': !valid.countryID, 'bhi-check': valid.countryID}\">\n            </i>\n            <novo-picker [config]=\"config?.countryID?.pickerConfig\" [placeholder]=\"config.countryID.label\" (changed)=\"onCountryChange($event)\" autocomplete=\"shipping country\" [(ngModel)]=\"model.countryName\" [disablePickerInput]=\"disabled.countryID\"></novo-picker>\n        </span>\n    "
                }] }
    ];
    /** @nocollapse */
    NovoAddressElement.ctorParameters = function () { return [
        { type: NovoLabelService }
    ]; };
    NovoAddressElement.propDecorators = {
        config: [{ type: Input }],
        readOnly: [{ type: Input }],
        change: [{ type: Output }],
        focus: [{ type: Output }],
        blur: [{ type: Output }],
        validityChange: [{ type: Output }]
    };
    return NovoAddressElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Value accessor for the component (supports ngModel)
/** @type {?} */
var CHECKBOX_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NovoCheckboxElement; }),
    multi: true,
};
/** @type {?} */
var LAYOUT_DEFAULTS = { iconStyle: 'box' };
var NovoCheckboxElement = /** @class */ (function () {
    function NovoCheckboxElement(ref) {
        this.ref = ref;
        this.indeterminate = false;
        this.disabled = false;
        // TODO - avoid configs like this
        this.onSelect = new EventEmitter();
        this.boxIcon = true;
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
    }
    /**
     * @return {?}
     */
    NovoCheckboxElement.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.layoutOptions = Object.assign({}, LAYOUT_DEFAULTS, this.layoutOptions);
        this.boxIcon = this.layoutOptions.iconStyle === 'box';
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoCheckboxElement.prototype.select = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        Helpers.swallowEvent(event);
        if (!this.disabled) {
            this.model = !this.model;
            this.onModelChange(this.model);
            this.onSelect.emit({ originalEvent: event, value: this.model });
        }
    };
    /**
     * @param {?} model
     * @return {?}
     */
    NovoCheckboxElement.prototype.writeValue = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        this.model = model;
        this.ref.markForCheck();
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoCheckboxElement.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoCheckboxElement.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelTouched = fn;
    };
    /**
     * @param {?} disabled
     * @return {?}
     */
    NovoCheckboxElement.prototype.setDisabledState = /**
     * @param {?} disabled
     * @return {?}
     */
    function (disabled) {
        this.disabled = disabled;
    };
    NovoCheckboxElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-checkbox',
                    providers: [CHECKBOX_VALUE_ACCESSOR],
                    template: "\n    <div class=\"check-box-group\" [class.checked]=\"model\" [class.disabled]=\"disabled\">\n        <input [name]=\"name\" type=\"checkbox\" [(ngModel)]=\"model\" [attr.id]=\"name\" [disabled]=\"disabled\">\n        <label [attr.for]=\"name\" (click)=\"select($event)\" [class.disabled]=\"disabled\">\n          <i [class.bhi-checkbox-empty]=\"!model && !indeterminate && boxIcon\"\n              [class.bhi-checkbox-filled]=\"model && !indeterminate && boxIcon\"\n              [class.bhi-checkbox-indeterminate]=\"indeterminate && boxIcon\"\n              [class.bhi-circle-o]=\"!model && !indeterminate && !boxIcon\"\n              [class.bhi-check]=\"model && !indeterminate && !boxIcon\"\n              [class.bhi-circle]=\"indeterminate && !boxIcon\"></i>\n          <span *ngIf=\"label\">{{ label }}</span>\n        </label>\n    </div>\n  "
                }] }
    ];
    /** @nocollapse */
    NovoCheckboxElement.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    NovoCheckboxElement.propDecorators = {
        name: [{ type: Input }],
        label: [{ type: Input }],
        indeterminate: [{ type: Input }],
        disabled: [{ type: Input }],
        layoutOptions: [{ type: Input }],
        onSelect: [{ type: Output }]
    };
    return NovoCheckboxElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Value accessor for the component (supports ngModel)
/** @type {?} */
var CHECKLIST_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NovoCheckListElement; }),
    multi: true,
};
var NovoCheckListElement = /** @class */ (function () {
    function NovoCheckListElement() {
        this.onSelect = new EventEmitter();
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
    }
    /**
     * @return {?}
     */
    NovoCheckListElement.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.setModel();
        this.setupOptions();
    };
    /**
     * @param {?} event
     * @param {?} item
     * @return {?}
     */
    NovoCheckListElement.prototype.select = /**
     * @param {?} event
     * @param {?} item
     * @return {?}
     */
    function (event, item) {
        Helpers.swallowEvent(event);
        if (!this.disabled) {
            item.checked = !item.checked;
            this.model = this._options.filter(function (checkBox) { return checkBox.checked; }).map(function (x) { return x.value; });
            this.onModelChange(this.model.length > 0 ? this.model : '');
            this.onSelect.emit({ selected: this.model });
        }
    };
    /**
     * @return {?}
     */
    NovoCheckListElement.prototype.setupOptions = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.options = this.options || [];
        this._options = [];
        if (this.options.length && !this.options[0].value) {
            this.options.forEach(function (option) {
                /** @type {?} */
                var formattedOption = {
                    value: option,
                    label: option,
                    checked: _this.model && _this.model.length && _this.model.indexOf(option.value) !== -1,
                };
                _this._options.push(formattedOption);
            });
        }
        else {
            this.options.forEach(function (option) {
                /** @type {?} */
                var formattedOption = option;
                formattedOption.checked = _this.model && _this.model.length && _this.model.indexOf(option.value) !== -1;
                _this._options.push(formattedOption);
            });
        }
    };
    /**
     * @return {?}
     */
    NovoCheckListElement.prototype.setModel = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var checkedOptions = this.options.filter(function (checkBox) { return checkBox.checked; }).map(function (x) { return x.value; });
        this.writeValue(checkedOptions);
    };
    /**
     * @param {?} model
     * @return {?}
     */
    NovoCheckListElement.prototype.writeValue = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        this.model = model || [];
        if (model) {
            this.setupOptions();
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoCheckListElement.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoCheckListElement.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelTouched = fn;
    };
    /**
     * @param {?} disabled
     * @return {?}
     */
    NovoCheckListElement.prototype.setDisabledState = /**
     * @param {?} disabled
     * @return {?}
     */
    function (disabled) {
        this.disabled = disabled;
    };
    NovoCheckListElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-check-list',
                    providers: [CHECKLIST_VALUE_ACCESSOR],
                    template: "\n        <div class=\"check-box-group\" *ngFor=\"let option of _options; let i = index\" [ngClass]=\"{checked: option.checked}\" [class.disabled]=\"disabled\">\n            <input [name]=\"name\" type=\"checkbox\" [ngModel]=\"option.checked\" [attr.id]=\"name+i\" [value]=\"option.checked\" (change)=\"select($event, option)\" [disabled]=\"disabled\">\n            <label [attr.for]=\"name+i\" (click)=\"select($event, option)\">\n              <i [ngClass]=\"{'bhi-checkbox-empty': !option.checked, 'bhi-checkbox-filled': option.checked }\"></i>\n              <span>{{option.label}}</span>\n            </label>\n        </div>\n    "
                }] }
    ];
    NovoCheckListElement.propDecorators = {
        name: [{ type: Input }],
        options: [{ type: Input }],
        disabled: [{ type: Input }],
        onSelect: [{ type: Output }]
    };
    return NovoCheckListElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoFile = /** @class */ (function () {
    function NovoFile(file) {
        var _this = this;
        this.name = '';
        this.contentType = '';
        this.lastModified = 0;
        this.size = 0;
        this.loaded = false;
        this.reader = new FileReader();
        this.name = "" + encodeURIComponent(file.name || '');
        this.contentType = file.type;
        this.lastModified = file.lastModified;
        this.size = file.size;
        this.file = file;
        this.reader.onload = function (event) {
            _this.fileContents = event.target.result.split(',')[1];
            _this.dataURL = event.target.result;
            _this.loaded = true;
        };
    }
    /**
     * @return {?}
     */
    NovoFile.prototype.read = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return new Promise(function (resolve) {
            resolve(_this);
            // when the file is read it triggers the onload event above.
            _this.reader.readAsDataURL(_this.file);
        });
    };
    /**
     * @return {?}
     */
    NovoFile.prototype.toJSON = /**
     * @return {?}
     */
    function () {
        return {
            name: this.name,
            contentType: this.type,
            lastModified: this.lastModified,
            size: this.size,
            fileContents: this.fileContents,
        };
    };
    return NovoFile;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Value accessor for the component (supports ngModel)
/** @type {?} */
var FILE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NovoFileInputElement; }),
    multi: true,
};
/** @type {?} */
var LAYOUT_DEFAULTS$1 = { order: 'default', download: true, removable: true, labelStyle: 'default', draggable: false };
var NovoFileInputElement = /** @class */ (function () {
    function NovoFileInputElement(element, labels, dragula) {
        this.element = element;
        this.labels = labels;
        this.dragula = dragula;
        this.multiple = false;
        this.disabled = false;
        this.value = [];
        this.edit = new EventEmitter();
        this.save = new EventEmitter();
        this.delete = new EventEmitter();
        this.upload = new EventEmitter();
        this.elements = [];
        this.files = [];
        this.active = false;
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
        this.commands = {
            dragenter: this.dragEnterHandler.bind(this),
            dragleave: this.dragLeaveHandler.bind(this),
            dragover: this.dragOverHandler.bind(this),
            drop: this.dropHandler.bind(this),
        };
    }
    /**
     * @return {?}
     */
    NovoFileInputElement.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        ['dragenter', 'dragleave', 'dragover', 'drop'].forEach(function (type) {
            _this.element.nativeElement.addEventListener(type, _this.commands[type]);
        });
        this.updateLayout();
        this.initializeDragula();
        this.setInitialFileList();
    };
    /**
     * @return {?}
     */
    NovoFileInputElement.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        var _this = this;
        ['dragenter', 'dragleave', 'dragover', 'drop'].forEach(function (type) {
            _this.element.nativeElement.removeEventListener(type, _this.commands[type]);
        });
        /** @type {?} */
        var dragulaHasFileOutputBag = this.dragula.bags.length > 0 && this.dragula.bags.filter(function (x) { return x.name === _this.fileOutputBag; }).length > 0;
        if (dragulaHasFileOutputBag) {
            this.dragula.destroy(this.fileOutputBag);
        }
    };
    /**
     * @param {?=} changes
     * @return {?}
     */
    NovoFileInputElement.prototype.ngOnChanges = /**
     * @param {?=} changes
     * @return {?}
     */
    function (changes) {
        this.onModelChange(this.model);
    };
    /**
     * @return {?}
     */
    NovoFileInputElement.prototype.updateLayout = /**
     * @return {?}
     */
    function () {
        this.layoutOptions = Object.assign({}, LAYOUT_DEFAULTS$1, this.layoutOptions);
        this.insertTemplatesBasedOnLayout();
    };
    /**
     * @return {?}
     */
    NovoFileInputElement.prototype.insertTemplatesBasedOnLayout = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var order;
        switch (this.layoutOptions['order']) {
            case 'displayFilesBelow':
                order = ['fileInput', 'fileOutput'];
                break;
            default:
                order = ['fileOutput', 'fileInput'];
        }
        order.forEach(function (template) {
            _this.container.createEmbeddedView(_this[template], 0);
        });
        return order;
    };
    /**
     * @return {?}
     */
    NovoFileInputElement.prototype.initializeDragula = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.fileOutputBag = "file-output-" + this.dragula.bags.length;
        this.dragula.setOptions(this.fileOutputBag, {
            moves: function (el, container, handle) {
                return _this.layoutOptions.draggable;
            },
        });
    };
    /**
     * @return {?}
     */
    NovoFileInputElement.prototype.setInitialFileList = /**
     * @return {?}
     */
    function () {
        if (this.value) {
            this.files = this.value;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoFileInputElement.prototype.dragEnterHandler = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        event.dataTransfer.dropEffect = 'copy';
        this.target = event.target;
        this.active = true;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoFileInputElement.prototype.dragLeaveHandler = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        if (this.target === event.target) {
            this.active = false;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoFileInputElement.prototype.dragOverHandler = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        // no-op
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoFileInputElement.prototype.dropHandler = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        this.visible = false;
        if (event.dataTransfer.types[0] !== 'Files') {
            return;
        }
        /** @type {?} */
        var options = this.layoutOptions;
        /** @type {?} */
        var filelist = Array.from(event.dataTransfer.files);
        if (options.customActions) {
            this.upload.emit(this.multiple ? filelist : [filelist[0]]);
        }
        else {
            this.process(this.multiple ? filelist : [filelist[0]]);
        }
        this.active = false;
    };
    /**
     * @param {?} model
     * @return {?}
     */
    NovoFileInputElement.prototype.writeValue = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        this.model = model;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoFileInputElement.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoFileInputElement.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelTouched = fn;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoFileInputElement.prototype.check = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.process(Array.from(event.target.files));
    };
    /**
     * @param {?} filelist
     * @return {?}
     */
    NovoFileInputElement.prototype.process = /**
     * @param {?} filelist
     * @return {?}
     */
    function (filelist) {
        var _this = this;
        Promise.all(filelist.map(function (file) { return _this.readFile(file); })).then(function (files) {
            var _a;
            if (_this.multiple) {
                (_a = _this.files).push.apply(_a, __spread(files));
            }
            else {
                _this.files = files;
            }
            _this.model = _this.files;
            _this.onModelChange(_this.model);
        });
    };
    /**
     * @param {?} file
     * @return {?}
     */
    NovoFileInputElement.prototype.download = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        window.open(file.dataURL, '_blank');
    };
    /**
     * @param {?} file
     * @return {?}
     */
    NovoFileInputElement.prototype.remove = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        this.files.splice(this.files.findIndex(function (f) { return f.name === file.name && f.size === file.size; }), 1);
        this.model = this.files;
        this.onModelChange(this.model);
    };
    /**
     * @param {?} file
     * @return {?}
     */
    NovoFileInputElement.prototype.readFile = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        return new NovoFile(file).read();
    };
    /**
     * @param {?} file
     * @return {?}
     */
    NovoFileInputElement.prototype.customEdit = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        this.edit.emit(file);
    };
    /**
     * @param {?} file
     * @return {?}
     */
    NovoFileInputElement.prototype.customSave = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        this.save.emit(file);
    };
    /**
     * @param {?} file
     * @return {?}
     */
    NovoFileInputElement.prototype.customDelete = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        this.delete.emit(file);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoFileInputElement.prototype.customCheck = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.upload.emit(event);
    };
    /**
     * @param {?} disabled
     * @return {?}
     */
    NovoFileInputElement.prototype.setDisabledState = /**
     * @param {?} disabled
     * @return {?}
     */
    function (disabled) {
        this.disabled = disabled;
    };
    NovoFileInputElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-file-input',
                    providers: [FILE_VALUE_ACCESSOR],
                    template: "\n        <div #container></div>\n        <ng-template #fileInput>\n            <div class=\"file-input-group\" [class.disabled]=\"disabled\" [class.active]=\"active\">\n                <input *ngIf=\"!layoutOptions.customActions\" type=\"file\" [name]=\"name\" [attr.id]=\"name\" (change)=\"check($event)\" [attr.multiple]=\"multiple\" tabindex=\"-1\"/>\n                <input *ngIf=\"layoutOptions.customActions\" type=\"file\" [name]=\"name\" [attr.id]=\"name\" (change)=\"customCheck($event)\" [attr.multiple]=\"multiple\" tabindex=\"-1\"/>\n                <section [ngSwitch]=\"layoutOptions.labelStyle\">\n                    <label *ngSwitchCase=\"'no-box'\" [attr.for]=\"name\" class=\"no-box\">\n                        <div><i class=\"bhi-dropzone\"></i>{{ placeholder || labels.chooseAFile }} {{ labels.or }} <strong class=\"link\">{{ labels.clickToBrowse }}</strong></div>\n                    </label>\n                    <label *ngSwitchDefault [attr.for]=\"name\" class=\"boxed\">\n                        <span>{{ placeholder || labels.chooseAFile }}</span>\n                        <small>{{ labels.or }} <strong class=\"link\">{{ labels.clickToBrowse }}</strong></small>\n                    </label>\n                </section>\n            </div>\n        </ng-template>\n        <ng-template #fileOutput>\n            <div class=\"file-output-group\" [dragula]=\"fileOutputBag\" [dragulaModel]=\"files\">\n                <div class=\"file-item\" *ngFor=\"let file of files\" [class.disabled]=\"disabled\">\n                  <i *ngIf=\"layoutOptions.draggable\" class=\"bhi-move\"></i>\n                  <label *ngIf=\"file.link\"><span><a href=\"{{ file.link }}\" target=\"_blank\">{{ file.name | decodeURI }}</a></span><span  *ngIf=\"file.description\">||</span><span>{{ file.description }}</span></label>\n                  <label *ngIf=\"!file.link\">{{ file.name | decodeURI }}</label>\n                  <div class=\"actions\" [attr.data-automation-id]=\"'file-actions'\" *ngIf=\"file.loaded\">\n                    <div *ngIf=\"!layoutOptions.customActions\">\n                      <button *ngIf=\"layoutOptions.download\" type=\"button\" theme=\"icon\" icon=\"save\" (click)=\"download(file)\" [attr.data-automation-id]=\"'file-download'\" tabindex=\"-1\"></button>\n                      <button *ngIf=\"!disabled && layoutOptions.removable\" type=\"button\" theme=\"icon\" icon=\"close\" (click)=\"remove(file)\" [attr.data-automation-id]=\"'file-remove'\" tabindex=\"-1\"></button>\n                    </div>\n                    <div *ngIf=\"layoutOptions.customActions\">\n                      <button *ngIf=\"layoutOptions.edit && !disabled\" type=\"button\" theme=\"icon\" icon=\"edit\" (click)=\"customEdit(file)\" [attr.data-automation-id]=\"'file-edit'\" tabindex=\"-1\"></button>\n                      <button *ngIf=\"layoutOptions.download\" type=\"button\" theme=\"icon\" icon=\"save\" (click)=\"customSave(file)\" [attr.data-automation-id]=\"'file-download'\" tabindex=\"-1\"></button>\n                      <button *ngIf=\"!disabled\" type=\"button\" theme=\"icon\" icon=\"close\" (click)=\"customDelete(file)\" [attr.data-automation-id]=\"'file-remove'\" tabindex=\"-1\"></button>\n                    </div>\n                  </div>\n                    <novo-loading *ngIf=\"!file.loaded\"></novo-loading>\n                </div>\n            </div>\n        </ng-template>"
                }] }
    ];
    /** @nocollapse */
    NovoFileInputElement.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NovoLabelService },
        { type: NovoDragulaService }
    ]; };
    NovoFileInputElement.propDecorators = {
        fileInput: [{ type: ViewChild, args: ['fileInput',] }],
        fileOutput: [{ type: ViewChild, args: ['fileOutput',] }],
        container: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }],
        name: [{ type: Input }],
        multiple: [{ type: Input }],
        disabled: [{ type: Input }],
        placeholder: [{ type: Input }],
        layoutOptions: [{ type: Input }],
        value: [{ type: Input }],
        edit: [{ type: Output }],
        save: [{ type: Output }],
        delete: [{ type: Output }],
        upload: [{ type: Output }]
    };
    return NovoFileInputElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoFormExtrasModule = /** @class */ (function () {
    function NovoFormExtrasModule() {
    }
    NovoFormExtrasModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        NovoPipesModule,
                        NovoButtonModule,
                        NovoSelectModule,
                        NovoPickerModule,
                        NovoLoadingModule,
                        NovoDragulaModule,
                        NovoTooltipModule,
                    ],
                    declarations: [NovoAddressElement, NovoCheckboxElement, NovoCheckListElement, NovoFileInputElement],
                    exports: [NovoAddressElement, NovoCheckboxElement, NovoCheckListElement, NovoFileInputElement],
                },] }
    ];
    return NovoFormExtrasModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoControlGroup = /** @class */ (function () {
    function NovoControlGroup(formUtils, fb, ref, labels) {
        this.formUtils = formUtils;
        this.fb = fb;
        this.ref = ref;
        this.labels = labels;
        this._vertical = false;
        this._remove = false;
        this._edit = false;
        this._collapsible = false;
        this.onRemove = new EventEmitter();
        this.onEdit = new EventEmitter();
        this.onAdd = new EventEmitter();
        this.controlLabels = [];
        this.toggled = false;
        this.disabledArray = [];
        this.currentIndex = 0;
    }
    Object.defineProperty(NovoControlGroup.prototype, "vertical", {
        get: /**
         * @return {?}
         */
        function () {
            return this._vertical;
        },
        // Sets the display of the group to either be row (default) or vertical via flex-box
        set: 
        // Sets the display of the group to either be row (default) or vertical via flex-box
        /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._vertical = coerceBooleanProperty(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlGroup.prototype, "remove", {
        get: /**
         * @return {?}
         */
        function () {
            return this._remove;
        },
        // Hide/shows the remove button for removing a control
        set: 
        // Hide/shows the remove button for removing a control
        /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._remove = coerceBooleanProperty(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlGroup.prototype, "edit", {
        get: /**
         * @return {?}
         */
        function () {
            return this._edit;
        },
        // Hide/shows the edit button for editing a control
        set: 
        // Hide/shows the edit button for editing a control
        /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._edit = coerceBooleanProperty(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlGroup.prototype, "collapsible", {
        get: /**
         * @return {?}
         */
        function () {
            return this._collapsible;
        },
        // Allows the control to collapse or not
        set: 
        // Allows the control to collapse or not
        /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._collapsible = coerceBooleanProperty(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlGroup.prototype, "icon", {
        get: /**
         * @return {?}
         */
        function () {
            return this._icon;
        },
        // Icon of the control group (can have bhi prefix or not)
        set: 
        // Icon of the control group (can have bhi prefix or not)
        /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._icon = v && v.indexOf('bhi') !== -1 ? v : "bhi-" + v;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoControlGroup.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        if (!this.key) {
            throw new Error('novo-control-group must have the [key] attribute provided!');
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NovoControlGroup.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        /** @type {?} */
        var initialValueChange = changes['initialValue'];
        // If initial value changes, clear the controls
        if (initialValueChange && initialValueChange.currentValue !== initialValueChange.previousValue && !initialValueChange.firstChange) {
            this.clearControls();
        }
        // Check for array, add a control for each value
        if (this.initialValue && Array.isArray(this.initialValue)) {
            if (this.initialValue.length !== 0) {
                this.currentIndex = 0;
                this.initialValue.forEach(function (value) { return _this.addNewControl(value); });
            }
        }
        else if (this.initialValue) {
            // If value is an object, just add one control
            this.addNewControl(this.initialValue);
        }
        // If we are horizontal, grab the labels to help with layout
        if (!this.vertical) {
            this.controlLabels = (this.controls || []).map(function (control) {
                return {
                    value: control.label,
                    width: control.width,
                };
            });
            this.ref.markForCheck();
        }
    };
    /**
     * @param {?=} value
     * @return {?}
     */
    NovoControlGroup.prototype.addNewControl = /**
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var control = (/** @type {?} */ (this.form.controls[this.key]));
        /** @type {?} */
        var newCtrl = this.buildControl(value);
        if (control) {
            control.push(newCtrl);
        }
        else {
            this.form.addControl(this.key, this.fb.array([newCtrl]));
        }
        this.disabledArray.push({
            edit: this.checkCanEdit(this.currentIndex),
            remove: this.checkCanRemove(this.currentIndex),
        });
        if (!value) {
            this.onAdd.emit();
        }
        this.currentIndex++;
        this.ref.markForCheck();
    };
    /**
     * @param {?=} value
     * @return {?}
     */
    NovoControlGroup.prototype.buildControl = /**
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var newControls = this.getNewControls(this.controls);
        if (value) {
            this.formUtils.setInitialValues(newControls, value);
        }
        /** @type {?} */
        var ctrl = this.formUtils.toFormGroup(newControls);
        return ctrl;
    };
    /**
     * @param {?} index
     * @param {?=} emitEvent
     * @return {?}
     */
    NovoControlGroup.prototype.removeControl = /**
     * @param {?} index
     * @param {?=} emitEvent
     * @return {?}
     */
    function (index, emitEvent) {
        if (emitEvent === void 0) { emitEvent = true; }
        /** @type {?} */
        var control = (/** @type {?} */ (this.form.controls[this.key]));
        if (emitEvent) {
            this.onRemove.emit({ value: control.at(index).value, index: index });
        }
        control.removeAt(index);
        this.currentIndex--;
        this.ref.markForCheck();
    };
    /**
     * @param {?} index
     * @return {?}
     */
    NovoControlGroup.prototype.editControl = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        /** @type {?} */
        var control = (/** @type {?} */ (this.form.controls[this.key]));
        this.onEdit.emit({ value: control.at(index).value, index: index });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoControlGroup.prototype.toggle = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        Helpers.swallowEvent(event);
        if (this.collapsible) {
            this.toggled = !this.toggled;
            this.ref.markForCheck();
        }
    };
    /**
     * @private
     * @return {?}
     */
    NovoControlGroup.prototype.clearControls = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var control = (/** @type {?} */ (this.form.controls[this.key]));
        if (control) {
            for (var i = control.controls.length; i >= 0; i--) {
                this.removeControl(i, false);
            }
            this.currentIndex = 0;
        }
    };
    /**
     * @private
     * @param {?} index
     * @return {?}
     */
    NovoControlGroup.prototype.checkCanEdit = /**
     * @private
     * @param {?} index
     * @return {?}
     */
    function (index) {
        if (this.canEdit) {
            /** @type {?} */
            var control = (/** @type {?} */ (this.form.controls[this.key]));
            return this.canEdit(control.at(index).value, index);
        }
        return true;
    };
    /**
     * @private
     * @param {?} index
     * @return {?}
     */
    NovoControlGroup.prototype.checkCanRemove = /**
     * @private
     * @param {?} index
     * @return {?}
     */
    function (index) {
        if (this.canRemove) {
            /** @type {?} */
            var control = (/** @type {?} */ (this.form.controls[this.key]));
            return this.canRemove(control.at(index).value, index);
        }
        return true;
    };
    /**
     * @private
     * @param {?} controls
     * @return {?}
     */
    NovoControlGroup.prototype.getNewControls = /**
     * @private
     * @param {?} controls
     * @return {?}
     */
    function (controls) {
        /** @type {?} */
        var ret = [];
        (this.controls || []).forEach(function (control) {
            ret.push(new BaseControl(control.__type, control));
        });
        return ret;
    };
    NovoControlGroup.decorators = [
        { type: Component, args: [{
                    selector: 'novo-control-group',
                    template: "\n    <h6 class=\"novo-section-header\" *ngIf=\"label\">\n      <span (click)=\"toggle($event)\" [class.clickable]=\"collapsible\">\n        <i *ngIf=\"icon && !collapsible\" [ngClass]=\"icon\" [attr.data-automation-id]=\"'novo-control-group-icon-' + key\"></i>\n        <i\n          *ngIf=\"collapsible\"\n          class=\"bhi-next\"\n          [class.toggled]=\"toggled\"\n          [attr.data-automation-id]=\"'novo-control-group-collapse-' + key\"\n        ></i>\n        <span [attr.data-automation-id]=\"'novo-control-group-label-' + key\">{{ label }}</span>\n      </span>\n      <label\n        class=\"novo-control-group-description\"\n        *ngIf=\"description\"\n        [attr.data-automation-id]=\"'novo-control-group-description-' + key\"\n        >{{ description }}</label\n      >\n    </h6>\n    <div\n      class=\"novo-control-group-controls\"\n      [class.vertical]=\"vertical\"\n      [class.horizontal]=\"!vertical\"\n      [class.hidden]=\"collapsible && !toggled\"\n    >\n      <ng-template #defaultTemplate let-index=\"index\" let-form=\"form\" let-key=\"key\">\n        <div class=\"novo-control-group-control\">\n          <div\n            *ngFor=\"let c of controls\"\n            class=\"novo-control-container\"\n            [class.is-label]=\"c.controlType === 'read-only'\"\n            [style.max-width.px]=\"c.width\"\n          >\n            <novo-control\n              [form]=\"(form?.controls)[key]['controls'][index]\"\n              [control]=\"c\"\n              [condensed]=\"!vertical || c.controlType === 'read-only'\"\n            ></novo-control>\n          </div>\n          <div class=\"novo-control-container last\" *ngIf=\"edit && !vertical\">\n            <button\n              [disabled]=\"!disabledArray[index].edit\"\n              type=\"button\"\n              *ngIf=\"edit && !vertical\"\n              theme=\"icon\"\n              icon=\"edit\"\n              (click)=\"editControl(index)\"\n              [attr.data-automation-id]=\"'novo-control-group-edit-' + key\"\n              index=\"-1\"\n            ></button>\n          </div>\n          <div class=\"novo-control-container last\" *ngIf=\"remove && !vertical\">\n            <button\n              [disabled]=\"!disabledArray[index].remove\"\n              type=\"button\"\n              *ngIf=\"remove && !vertical\"\n              theme=\"icon\"\n              icon=\"delete-o\"\n              (click)=\"removeControl(index)\"\n              [attr.data-automation-id]=\"'novo-control-group-delete-' + key\"\n              index=\"-1\"\n            ></button>\n          </div>\n        </div>\n        <button\n          [disabled]=\"!disabledArray[index].edit\"\n          type=\"button\"\n          *ngIf=\"edit && vertical\"\n          theme=\"icon\"\n          icon=\"edit\"\n          (click)=\"editControl(index)\"\n          [attr.data-automation-id]=\"'novo-control-group-edit-' + key\"\n          index=\"-1\"\n        ></button>\n        <button\n          [disabled]=\"!disabledArray[index].remove\"\n          type=\"button\"\n          *ngIf=\"remove && vertical\"\n          theme=\"icon\"\n          icon=\"delete-o\"\n          (click)=\"removeControl(index)\"\n          [attr.data-automation-id]=\"'novo-control-group-delete-' + key\"\n          index=\"-1\"\n        ></button>\n      </ng-template>\n      <div class=\"novo-control-group-labels\" *ngIf=\"!vertical && (form?.controls)[key] && (form?.controls)[key]['controls'].length !== 0\">\n        <div class=\"novo-control-group-control-label\" *ngFor=\"let label of controlLabels\" [style.max-width.px]=\"label.width\">\n          <span [attr.data-automation-id]=\"'novo-control-group-label-' + label.value\">{{ label.value }}</span>\n        </div>\n        <div class=\"novo-control-group-control-label last\" *ngIf=\"edit\" [attr.data-automation-id]=\"'novo-control-group-edit-' + key\"></div>\n        <div\n          class=\"novo-control-group-control-label last\"\n          *ngIf=\"remove\"\n          [attr.data-automation-id]=\"'novo-control-group-delete-' + key\"\n        ></div>\n      </div>\n      <ng-container *ngIf=\"(form?.controls)[key]\">\n        <div class=\"novo-control-group-row\" *ngFor=\"let control of (form?.controls)[key]['controls']; let index = index\">\n          <ng-template\n            [ngTemplateOutlet]=\"rowTemplate || defaultTemplate\"\n            [ngTemplateOutletContext]=\"{ form: form, index: index, key: key, controls: controls }\"\n          >\n          </ng-template>\n        </div>\n      </ng-container>\n      <div\n        class=\"novo-control-group-empty\"\n        *ngIf=\"(form?.controls)[key] && (form?.controls)[key]['controls'].length === 0\"\n        [attr.data-automation-id]=\"'novo-control-group-empty-' + key\"\n      >\n        {{ emptyMessage }}\n      </div>\n      <p *ngIf=\"add\">\n        <button\n          type=\"button\"\n          theme=\"dialogue\"\n          icon=\"add-thin\"\n          (click)=\"addNewControl()\"\n          [attr.data-automation-id]=\"'novo-control-group-bottom-add-' + key\"\n          index=\"-1\"\n        >\n          {{ add?.label }}\n        </button>\n      </p>\n    </div>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    NovoControlGroup.ctorParameters = function () { return [
        { type: FormUtils },
        { type: FormBuilder },
        { type: ChangeDetectorRef },
        { type: NovoLabelService }
    ]; };
    NovoControlGroup.propDecorators = {
        vertical: [{ type: Input }],
        add: [{ type: Input }],
        remove: [{ type: Input }],
        edit: [{ type: Input }],
        collapsible: [{ type: Input }],
        form: [{ type: Input }],
        controls: [{ type: Input }],
        key: [{ type: Input }],
        label: [{ type: Input }],
        description: [{ type: Input }],
        emptyMessage: [{ type: Input }],
        icon: [{ type: Input }],
        initialValue: [{ type: Input }],
        canEdit: [{ type: Input }],
        canRemove: [{ type: Input }],
        rowTemplate: [{ type: Input }],
        onRemove: [{ type: Output }],
        onEdit: [{ type: Output }],
        onAdd: [{ type: Output }]
    };
    return NovoControlGroup;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoControlTemplates = /** @class */ (function () {
    function NovoControlTemplates(templates) {
        this.templates = templates;
    }
    /**
     * @return {?}
     */
    NovoControlTemplates.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.defaultTemplates && this.defaultTemplates.length) {
            this.defaultTemplates.forEach(function (template) {
                _this.templates.addDefault(template.name, template.template);
            });
        }
    };
    NovoControlTemplates.decorators = [
        { type: Component, args: [{
                    selector: 'novo-control-templates',
                    template: "\n        <!---Readonly--->\n        <ng-template novoTemplate=\"read-only\" let-form=\"form\" let-control>\n          <div>{{ form.value[control.key] }}</div>\n        </ng-template>\n        <!--Textbox--->\n        <ng-template novoTemplate=\"textbox\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n          <div [formGroup]=\"form\" class=\"novo-control-input-container novo-control-input-with-label\" [tooltip]=\"control?.tooltip\" [tooltipPosition]=\"control?.tooltipPosition\"  [tooltipSize]=\"control?.tooltipSize\" [tooltipPreline]=\"control?.tooltipPreline\" [removeTooltipArrow]=\"control?.removeTooltipArrow\" [tooltipAutoPosition]=\"control?.tooltipAutoPosition\">\n            <input *ngIf=\"control?.type !== 'number' && control?.textMaskEnabled\" [textMask]=\"control.maskOptions\" [formControlName]=\"control.key\" [id]=\"control.key\" [type]=\"control?.type\" [placeholder]=\"control?.placeholder\" (input)=\"methods.emitChange($event)\" (focus)=\"methods.handleFocus($event)\" (blur)=\"methods.handleBlur($event)\" autocomplete>\n            <input *ngIf=\"control?.type !== 'number' && !control?.textMaskEnabled\" [class.maxlength-error]=\"errors?.maxlength\" [formControlName]=\"control.key\" [id]=\"control.key\" [type]=\"control?.type\" [placeholder]=\"control?.placeholder\" (input)=\"methods.emitChange($event)\" [maxlength]=\"control?.maxlength\" (focus)=\"methods.handleFocus($event)\" (blur)=\"methods.handleBlur($event)\" autocomplete>\n            <input *ngIf=\"control?.type === 'number' && control?.subType !== 'percentage'\" [class.maxlength-error]=\"errors?.maxlength\" [formControlName]=\"control.key\" [id]=\"control.key\" [type]=\"control?.type\" [placeholder]=\"control?.placeholder\" (keydown)=\"methods.restrictKeys($event)\" (input)=\"methods.emitChange($event)\" [maxlength]=\"control?.maxlength\" (focus)=\"methods.handleFocus($event)\" (blur)=\"methods.handleBlur($event)\" step=\"any\" (mousewheel)=\"numberInput.blur()\" #numberInput>\n            <input *ngIf=\"control?.type === 'number' && control?.subType === 'percentage'\" [type]=\"control?.type\" [placeholder]=\"control?.placeholder\" (keydown)=\"methods.restrictKeys($event)\" [value]=\"control?.percentValue\" (input)=\"methods.handlePercentChange($event)\" (focus)=\"methods.handleFocus($event)\" (blur)=\"methods.handleBlur($event)\" step=\"any\" (mousewheel)=\"percentInput.blur()\" #percentInput>\n            <label class=\"input-label\" *ngIf=\"control?.subType === 'currency'\">{{ control.currencyFormat }}</label>\n            <label class=\"input-label\" *ngIf=\"control?.subType === 'percentage'\">%</label>\n          </div>\n        </ng-template>\n\n        <!--Textarea--->\n        <ng-template novoTemplate=\"text-area\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n          <div class=\"textarea-container\" [formGroup]=\"form\" [tooltip]=\"control?.tooltip\" [tooltipPosition]=\"control?.tooltipPosition\"  [tooltipSize]=\"control?.tooltipSize\" [tooltipPreline]=\"control?.tooltipPreline\" [removeTooltipArrow]=\"control?.removeTooltipArrow\" [tooltipAutoPosition]=\"control?.tooltipAutoPosition\">\n            <textarea [class.maxlength-error]=\"errors?.maxlength\" [name]=\"control.key\" [attr.id]=\"control.key\" [placeholder]=\"control.placeholder\" [formControlName]=\"control.key\" autosize (input)=\"methods.handleTextAreaInput($event)\" (focus)=\"methods.handleFocus($event)\" (blur)=\"methods.handleBlur($event)\" [maxlength]=\"control?.maxlength\"></textarea>\n          </div>\n        </ng-template>\n\n        <!--Editor-->\n        <ng-template novoTemplate=\"editor\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n          <div [formGroup]=\"form\">\n            <novo-editor [name]=\"control.key\" [formControlName]=\"control.key\" [startupFocus]=\"control.startupFocus\" [minimal]=\"control.minimal\" [fileBrowserImageUploadUrl]=\"control.fileBrowserImageUploadUrl\" (focus)=\"methods.handleFocus($event)\" (blur)=\"methods.handleBlur($event)\"></novo-editor>\n          </div>\n        </ng-template>\n\n        <!--AceEditor-->\n        <ng-template novoTemplate=\"ace-editor\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n          <div [formGroup]=\"form\">\n            <novo-ace-editor [name]=\"control.key\" [formControlName]=\"control.key\" (focus)=\"methods.handleFocus($event)\" (blur)=\"methods.handleBlur($event)\"></novo-ace-editor>\n          </div>\n        </ng-template>\n\n        <!--HTML5 Select-->\n        <ng-template novoTemplate=\"native-select\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n          <div [formGroup]=\"form\">\n            <select [id]=\"control.key\" [formControlName]=\"control.key\" [tooltip]=\"control.tooltip\" [tooltipPosition]=\"control.tooltipPosition\"  [tooltipSize]=\"control?.tooltipSize\" [tooltipPreline]=\"control?.tooltipPreline\" [removeTooltipArrow]=\"control?.removeTooltipArrow\" [tooltipAutoPosition]=\"control?.tooltipAutoPosition\">\n                <option *ngIf=\"control.placeholder\" value=\"\" disabled selected hidden>{{ control.placeholder }}</option>\n                <option *ngFor=\"let opt of control.options\" [value]=\"opt.key\">{{opt.value}}</option>\n            </select>\n          </div>\n        </ng-template>\n\n        <!--File-->\n        <ng-template novoTemplate=\"file\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n          <div [formGroup]=\"form\">\n            <novo-file-input [formControlName]=\"control.key\" [id]=\"control.key\" [name]=\"control.key\" [placeholder]=\"control.placeholder\" [value]=\"control.value\" [multiple]=\"control.multiple\" [layoutOptions]=\"control.layoutOptions\" [tooltip]=\"control.tooltip\" [tooltipPosition]=\"control.tooltipPosition\"  [tooltipSize]=\"control?.tooltipSize\" [tooltipPreline]=\"control?.tooltipPreline\" [removeTooltipArrow]=\"control?.removeTooltipArrow\" [tooltipAutoPosition]=\"control?.tooltipAutoPosition\" (edit)=\"methods.handleEdit($event)\" (save)=\"methods.handleSave($event)\" (delete)=\"methods.handleDelete($event)\" (upload)=\"methods.handleUpload($event)\"></novo-file-input>\n          </div>\n        </ng-template>\n\n        <!--Tiles-->\n        <ng-template novoTemplate=\"tiles\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n          <div [formGroup]=\"form\">\n            <novo-tiles [options]=\"control.options\" [formControlName]=\"control.key\" (onChange)=\"methods.modelChange($event)\" [tooltip]=\"control.tooltip\" [tooltipPosition]=\"control.tooltipPosition\"  [tooltipSize]=\"control?.tooltipSize\" [tooltipPreline]=\"control?.tooltipPreline\" [removeTooltipArrow]=\"control?.removeTooltipArrow\" [tooltipAutoPosition]=\"control?.tooltipAutoPosition\" [controlDisabled]=\"control.disabled\"></novo-tiles>\n          </div>\n        </ng-template>\n\n        <!--Picker-->\n        <ng-template novoTemplate=\"picker\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n          <div [formGroup]=\"form\" class=\"novo-control-input-container\">\n            <novo-picker [config]=\"control.config\" [formControlName]=\"control.key\" [placeholder]=\"control.placeholder\" [parentScrollSelector]=\"control.parentScrollSelector\" *ngIf=\"!control.multiple\" (select)=\"methods.modelChange($event);\" (changed)=\"methods.modelChangeWithRaw($event)\" (typing)=\"methods.handleTyping($event)\" (focus)=\"methods.handleFocus($event)\" (blur)=\"methods.handleBlur($event)\" [tooltip]=\"control.tooltip\" [tooltipPosition]=\"control.tooltipPosition\" [tooltipSize]=\"control?.tooltipSize\" [tooltipPreline]=\"control?.tooltipPreline\" [removeTooltipArrow]=\"control?.removeTooltipArrow\" [tooltipAutoPosition]=\"control?.tooltipAutoPosition\"></novo-picker>\n            <novo-chips [source]=\"control.config\" [type]=\"control.config.type\" [formControlName]=\"control.key\" [placeholder]=\"control.placeholder\" [maxlength]=\"control?.maxlength\" *ngIf=\"control.multiple && !control.config.columns\" [closeOnSelect]=\"control.closeOnSelect\" (changed)=\"methods.modelChangeWithRaw($event)\" (typing)=\"methods.handleTyping($event)\" (focus)=\"methods.handleFocus($event)\" (blur)=\"methods.handleBlur($event)\" [tooltip]=\"control.tooltip\" [tooltipPosition]=\"control.tooltipPosition\" [tooltipSize]=\"control?.tooltipSize\" [tooltipPreline]=\"control?.tooltipPreline\" [removeTooltipArrow]=\"control?.removeTooltipArrow\" [tooltipAutoPosition]=\"control?.tooltipAutoPosition\"></novo-chips>\n            <novo-row-chips [source]=\"control.config\" [type]=\"control.config.type\" [formControlName]=\"control.key\" [placeholder]=\"control.placeholder\" *ngIf=\"control.multiple && control.config.columns\" [closeOnSelect]=\"control.closeOnSelect\" (changed)=\"methods.modelChangeWithRaw($event)\" (typing)=\"methods.handleTyping($event)\" (focus)=\"methods.handleFocus($event)\" (blur)=\"methods.handleBlur($event)\" [tooltip]=\"control.tooltip\" [tooltipPosition]=\"control.tooltipPosition\" [tooltipSize]=\"control?.tooltipSize\" [tooltipPreline]=\"control?.tooltipPreline\" [removeTooltipArrow]=\"control?.removeTooltipArrow\" [tooltipAutoPosition]=\"control?.tooltipAutoPosition\"></novo-row-chips>\n          </div>\n        </ng-template>\n\n        <!--Novo Select-->\n        <ng-template novoTemplate=\"select\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n          <div [formGroup]=\"form\">\n            <novo-select [options]=\"control.options\" [headerConfig]=\"control.headerConfig\" [placeholder]=\"control.placeholder\" [formControlName]=\"control.key\" [tooltip]=\"control.tooltip\" [tooltipPosition]=\"control.tooltipPosition\" [tooltipSize]=\"control?.tooltipSize\" [tooltipPreline]=\"control?.tooltipPreline\" [removeTooltipArrow]=\"control?.removeTooltipArrow\" [tooltipAutoPosition]=\"control?.tooltipAutoPosition\" (onSelect)=\"methods.modelChange($event)\"></novo-select>\n          </div>\n        </ng-template>\n\n        <!--Radio-->\n        <ng-template novoTemplate=\"radio\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n          <div [formGroup]=\"form\" class=\"novo-control-input-container\">\n            <novo-radio [name]=\"control.key\" [formControlName]=\"control.key\" *ngFor=\"let option of control.options\" [value]=\"option.value\" [label]=\"option.label\" [checked]=\"option.value === form.value[control.key]\" [tooltip]=\"control.tooltip\" [tooltipPosition]=\"control.tooltipPosition\" [tooltipSize]=\"control?.tooltipSize\" [tooltipPreline]=\"control?.tooltipPreline\" [removeTooltipArrow]=\"control?.removeTooltipArrow\" [tooltipAutoPosition]=\"control?.tooltipAutoPosition\" [button]=\"!!option.icon\" [icon]=\"option.icon\" [attr.data-automation-id]=\"control.key + '-' + (option?.label || option?.value)\"></novo-radio>\n          </div>\n        </ng-template>\n\n        <!--Time-->\n        <ng-template novoTemplate=\"time\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n          <div [formGroup]=\"form\" class=\"novo-control-input-container\" [tooltip]=\"control?.tooltip\" [tooltipPosition]=\"control?.tooltipPosition\" [tooltipSize]=\"control?.tooltipSize\" [tooltipPreline]=\"control?.tooltipPreline\" [removeTooltipArrow]=\"control?.removeTooltipArrow\" [tooltipAutoPosition]=\"control?.tooltipAutoPosition\">\n            <novo-time-picker-input [attr.id]=\"control.key\" [name]=\"control.key\" [formControlName]=\"control.key\" [placeholder]=\"control.placeholder\" [military]=\"control.military\"></novo-time-picker-input>\n          </div>\n        </ng-template>\n\n        <!--Date-->\n        <ng-template novoTemplate=\"date\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n          <div [formGroup]=\"form\" class=\"novo-control-input-container\" [tooltip]=\"control.tooltip\" [tooltipPosition]=\"control.tooltipPosition\" [tooltipSize]=\"control?.tooltipSize\" [tooltipPreline]=\"control?.tooltipPreline\" [removeTooltipArrow]=\"control?.removeTooltipArrow\" [tooltipAutoPosition]=\"control?.tooltipAutoPosition\">\n            <novo-date-picker-input [attr.id]=\"control.key\" [name]=\"control.key\" [formControlName]=\"control.key\" [start]=\"control.startDate\" [end]=\"control.endDate\" [format]=\"control.dateFormat\" [allowInvalidDate]=\"control.allowInvalidDate\" [textMaskEnabled]=\"control.textMaskEnabled\" [placeholder]=\"control.placeholder\" (focusEvent)=\"methods.handleFocus($event)\" (blurEvent)=\"methods.handleBlur($event)\"></novo-date-picker-input>\n          </div>\n        </ng-template>\n\n\n        <!--Date and Time-->\n        <ng-template novoTemplate=\"date-time\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n          <div [formGroup]=\"form\" class=\"novo-control-input-container\" [tooltip]=\"control.tooltip\" [tooltipPosition]=\"control.tooltipPosition\" [tooltipSize]=\"control?.tooltipSize\" [tooltipPreline]=\"control?.tooltipPreline\" [removeTooltipArrow]=\"control?.removeTooltipArrow\" [tooltipAutoPosition]=\"control?.tooltipAutoPosition\">\n            <novo-date-time-picker-input [attr.id]=\"control.key\" [name]=\"control.key\" [formControlName]=\"control.key\" [start]=\"control.startDate\" [end]=\"control.endDate\" [placeholder]=\"control.placeholder\" [military]=\"control.military\" (focusEvent)=\"methods.handleFocus($event)\" (blurEvent)=\"methods.handleBlur($event)\"></novo-date-time-picker-input>\n          </div>\n        </ng-template>\n\n        <!--Address-->\n        <ng-template novoTemplate=\"address\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n          <div [formGroup]=\"form\">\n            <novo-address [formControlName]=\"control.key\" [config]=\"control?.config\" [readOnly]=\"control?.readOnly\" (change)=\"methods.handleAddressChange($event)\" (focus)=\"methods.handleFocus($event.event, $event.field)\" (blur)=\"methods.handleBlur($event.event, $event.field)\"  (validityChange)=\"methods.updateValidity()\"></novo-address>\n          </div>\n        </ng-template>\n\n        <!--Checkbox-->\n        <ng-template novoTemplate=\"checkbox\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n          <div [formGroup]=\"form\">\n            <novo-checkbox [formControlName]=\"control?.key\" [name]=\"control?.key\" [label]=\"control?.checkboxLabel\" [tooltip]=\"control?.tooltip\" [tooltipPosition]=\"control?.tooltipPosition\" [tooltipSize]=\"control?.tooltipSize\" [tooltipPreline]=\"control?.tooltipPreline\" [removeTooltipArrow]=\"control?.removeTooltipArrow\" [tooltipAutoPosition]=\"control?.tooltipAutoPosition\" [layoutOptions]=\"control?.layoutOptions\"></novo-checkbox>\n          </div>\n        </ng-template>\n\n        <!--Checklist-->\n        <ng-template novoTemplate=\"checklist\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n          <div [formGroup]=\"form\">\n            <novo-check-list [formControlName]=\"control.key\" [name]=\"control.key\" [options]=\"control?.options\" [tooltip]=\"control?.tooltip\" [tooltipPosition]=\"control?.tooltipPosition\" [tooltipSize]=\"control?.tooltipSize\" [tooltipPreline]=\"control?.tooltipPreline\" [removeTooltipArrow]=\"control?.removeTooltipArrow\" [tooltipAutoPosition]=\"control?.tooltipAutoPosition\" (onSelect)=\"methods.modelChange($event)\"></novo-check-list>\n          </div>\n        </ng-template>\n\n        <!--QuickNote-->\n        <ng-template novoTemplate=\"quick-note\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n          <div [formGroup]=\"form\">\n            <novo-quick-note [formControlName]=\"control.key\" [startupFocus]=\"control?.startupFocus\" [placeholder]=\"control?.placeholder\" [config]=\"control?.config\" (change)=\"methods.modelChange($event)\" [tooltip]=\"control?.tooltip\" [tooltipPosition]=\"control?.tooltipPosition\" [tooltipSize]=\"control?.tooltipSize\" [removeTooltipArrow]=\"control?.removeTooltipArrow\" [tooltipAutoPosition]=\"control?.tooltipAutoPosition\" [tooltipPreline]=\"control?.tooltipPreline\"></novo-quick-note>\n          </div>\n        </ng-template>\n    "
                }] }
    ];
    /** @nocollapse */
    NovoControlTemplates.ctorParameters = function () { return [
        { type: NovoTemplateService }
    ]; };
    NovoControlTemplates.propDecorators = {
        defaultTemplates: [{ type: ViewChildren, args: [NovoTemplate,] }]
    };
    return NovoControlTemplates;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoCommonModule = /** @class */ (function () {
    function NovoCommonModule() {
    }
    NovoCommonModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    exports: [NovoTemplate],
                    declarations: [NovoTemplate],
                },] }
    ];
    return NovoCommonModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoFormModule = /** @class */ (function () {
    function NovoFormModule() {
    }
    NovoFormModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        ReactiveFormsModule,
                        NovoRadioModule,
                        NovoTilesModule,
                        NovoSelectModule,
                        NovoPickerModule,
                        NovoChipsModule,
                        NovoDatePickerModule,
                        NovoTimePickerModule,
                        NovoNovoCKEditorModule,
                        NovoFormExtrasModule,
                        NovoQuickNoteModule,
                        NovoDateTimePickerModule,
                        NovoHeaderModule,
                        NovoTooltipModule,
                        NovoDragulaModule,
                        TextMaskModule,
                        NovoTipWellModule,
                        NovoModalModule,
                        NovoButtonModule,
                        NovoAceEditorModule,
                        NovoCommonModule,
                    ],
                    declarations: [
                        NovoAutoSize,
                        NovoControlElement,
                        NovoDynamicFormElement,
                        NovoFormElement,
                        NovoFieldsetElement,
                        NovoFieldsetHeaderElement,
                        ControlConfirmModal,
                        ControlPromptModal,
                        NovoControlGroup,
                        NovoControlTemplates,
                    ],
                    exports: [
                        NovoAutoSize,
                        NovoDynamicFormElement,
                        NovoControlElement,
                        NovoFormElement,
                        NovoFieldsetHeaderElement,
                        NovoControlGroup,
                        NovoControlTemplates,
                    ],
                    entryComponents: [ControlConfirmModal, ControlPromptModal],
                    providers: [NovoTemplateService],
                },] }
    ];
    return NovoFormModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var Pagination = /** @class */ (function () {
    function Pagination(labels) {
        this.labels = labels;
        this.itemsPerPage = 10;
        this.pageChange = new EventEmitter();
        this.itemsPerPageChange = new EventEmitter();
        this.onPageChange = new EventEmitter();
        this.maxPagesDisplayed = 5;
    }
    Object.defineProperty(Pagination.prototype, "disablePageSelection", {
        get: /**
         * @return {?}
         */
        function () {
            return this.pageSelectDisabled;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.pageSelectDisabled = coerceBooleanProperty(val);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    Pagination.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.label = this.label || this.labels.itemsPerPage;
        this.rowOptions = this.rowOptions || this.getDefaultRowOptions();
    };
    /**
     * @param {?=} changes
     * @return {?}
     */
    Pagination.prototype.ngOnChanges = /**
     * @param {?=} changes
     * @return {?}
     */
    function (changes) {
        this.page = this.page || 1;
        this.totalPages = this.calculateTotalPages();
        this.pages = this.getPages(this.page, this.totalPages);
    };
    /**
     * @return {?}
     */
    Pagination.prototype.getDefaultRowOptions = /**
     * @return {?}
     */
    function () {
        return [{ value: 10, label: '10' }, { value: 25, label: '25' }, { value: 50, label: '50' }, { value: 100, label: '100' }];
    };
    /**
     * @param {?} event
     * @return {?}
     */
    Pagination.prototype.onPageSizeChanged = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.page = 1;
        this.itemsPerPage = event.selected;
        this.totalPages = this.calculateTotalPages();
        this.pages = this.getPages(this.page, this.totalPages);
        this.pageChange.emit(this.page);
        this.itemsPerPageChange.emit(this.itemsPerPage);
        this.onPageChange.emit({
            page: this.page,
            itemsPerPage: this.itemsPerPage,
        });
    };
    /**
     * @param {?} page
     * @param {?=} event
     * @return {?}
     */
    Pagination.prototype.selectPage = /**
     * @param {?} page
     * @param {?=} event
     * @return {?}
     */
    function (page, event) {
        if (event) {
            event.preventDefault();
        }
        this.page = page;
        this.pages = this.getPages(this.page, this.totalPages);
        this.pageChange.emit(this.page);
        this.onPageChange.emit({
            page: this.page,
            itemsPerPage: this.itemsPerPage,
        });
    };
    /**
     * @return {?}
     */
    Pagination.prototype.noPrevious = /**
     * @return {?}
     */
    function () {
        return this.page === 1;
    };
    /**
     * @return {?}
     */
    Pagination.prototype.noNext = /**
     * @return {?}
     */
    function () {
        return this.page === this.totalPages;
    };
    // Create page object used in template
    // Create page object used in template
    /**
     * @param {?} number
     * @param {?} text
     * @param {?} isActive
     * @return {?}
     */
    Pagination.prototype.makePage = 
    // Create page object used in template
    /**
     * @param {?} number
     * @param {?} text
     * @param {?} isActive
     * @return {?}
     */
    function (number, text, isActive) {
        return {
            number: number,
            text: text,
            active: isActive,
        };
    };
    /**
     * @param {?} currentPage
     * @param {?} totalPages
     * @return {?}
     */
    Pagination.prototype.getPages = /**
     * @param {?} currentPage
     * @param {?} totalPages
     * @return {?}
     */
    function (currentPage, totalPages) {
        /** @type {?} */
        var pages = [];
        // Default page limits
        /** @type {?} */
        var startPage = 1;
        /** @type {?} */
        var endPage = totalPages;
        /** @type {?} */
        var isMaxSized = this.maxPagesDisplayed < totalPages;
        // recompute if maxPagesDisplayed
        if (isMaxSized) {
            // Current page is displayed in the middle of the visible ones
            startPage = Math.max(currentPage - Math.floor(this.maxPagesDisplayed / 2), 1);
            endPage = startPage + this.maxPagesDisplayed - 1;
            // Adjust if limit is exceeded
            if (endPage > totalPages) {
                endPage = totalPages;
                startPage = endPage - this.maxPagesDisplayed + 1;
            }
        }
        // Add page number links
        for (var number = startPage; number <= endPage; number++) {
            /** @type {?} */
            var page = this.makePage(number, number.toString(), number === currentPage);
            pages.push(page);
        }
        return pages;
    };
    /**
     * @return {?}
     */
    Pagination.prototype.calculateTotalPages = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var totalPages = this.itemsPerPage < 1 ? 1 : Math.ceil(this.totalItems / this.itemsPerPage);
        return Math.max(totalPages || 0, 1);
    };
    Pagination.decorators = [
        { type: Component, args: [{
                    selector: 'novo-pagination',
                    template: "\n        <h5 class=\"rows\">{{label}}</h5>\n        <novo-select [options]=\"rowOptions\" [placeholder]=\"labels.select\" [(ngModel)]=\"itemsPerPage\" (onSelect)=\"onPageSizeChanged($event)\" data-automation-id=\"pager-select\"></novo-select>\n        <span class=\"spacer\"></span>\n        <ul class=\"pager\" data-automation-id=\"pager\">\n            <li class=\"page\" (click)=\"selectPage(page-1)\" [ngClass]=\"{'disabled': noPrevious()}\"><i class=\"bhi-previous\" data-automation-id=\"pager-previous\"></i></li>\n            <li class=\"page\" [ngClass]=\"{active: p.number==page}\" [class.disabled]=\"disablePageSelection\" *ngFor=\"let p of pages\" (click)=\"selectPage(p.number)\">{{p.text}}</li>\n            <li class=\"page\" (click)=\"selectPage(page+1)\" [ngClass]=\"{'disabled': noNext()}\"><i class=\"bhi-next\" data-automation-id=\"pager-next\"></i></li>\n        </ul>\n  "
                }] }
    ];
    /** @nocollapse */
    Pagination.ctorParameters = function () { return [
        { type: NovoLabelService }
    ]; };
    Pagination.propDecorators = {
        page: [{ type: Input }],
        totalItems: [{ type: Input }],
        itemsPerPage: [{ type: Input }],
        rowOptions: [{ type: Input }],
        label: [{ type: Input }],
        disablePageSelection: [{ type: Input }],
        pageChange: [{ type: Output }],
        itemsPerPageChange: [{ type: Output }],
        onPageChange: [{ type: Output }]
    };
    return Pagination;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var BaseRenderer = /** @class */ (function () {
    function BaseRenderer() {
        this.data = {};
        this.value = '';
        this.meta = {};
    }
    return BaseRenderer;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var RowDetails = /** @class */ (function () {
    function RowDetails(element, componentUtils) {
        this.element = element;
        this.componentUtils = componentUtils;
        this.value = '';
    }
    /**
     * @return {?}
     */
    RowDetails.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.renderer) {
            if (this.renderer.prototype instanceof BaseRenderer) {
                /** @type {?} */
                var componentRef = this.componentUtils.appendNextToLocation(this.renderer, this.container);
                componentRef.instance.data = this.data;
            }
            else {
                this.value = this.renderer(this.data);
            }
        }
    };
    RowDetails.decorators = [
        { type: Component, args: [{
                    selector: 'novo-row-details',
                    template: "\n        <span #container></span>\n        <span>{{value}}</span>\n    "
                }] }
    ];
    /** @nocollapse */
    RowDetails.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ComponentUtils }
    ]; };
    RowDetails.propDecorators = {
        container: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }],
        data: [{ type: Input }],
        renderer: [{ type: Input }]
    };
    return RowDetails;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TableCell = /** @class */ (function () {
    function TableCell(element, componentUtils) {
        this.element = element;
        this.componentUtils = componentUtils;
        this.value = '';
        this.element = element;
        this.componentUtils = componentUtils;
    }
    /**
     * @return {?}
     */
    TableCell.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.column._type = this.column.type || 'text';
        if (this.column.renderer) {
            if (this.column.renderer.prototype instanceof BaseRenderer) {
                this.column._type = 'custom';
                /** @type {?} */
                var componentRef = this.componentUtils.appendNextToLocation(this.column.renderer, this.container);
                componentRef.instance.meta = this.column;
                componentRef.instance.data = this.row;
                componentRef.instance.value = this.form && this.hasEditor ? this.form.value[this.column.name] : this.row[this.column.name];
                // TODO - save ref to this and update in the valueChanges below!!
            }
            else {
                // TODO - wtf to do here?
                this.value = this.column.renderer(this.row);
            }
        }
        else {
            this.value = this.form && this.hasEditor ? this.form.value[this.column.name] : this.row[this.column.name];
        }
        if (this.form && this.hasEditor) {
            this.valueChangeSubscription = this.form.valueChanges
                .pipe(debounceTime(300), distinctUntilChanged())
                .subscribe(function (value) {
                _this.value = value[_this.column.name];
            });
        }
    };
    /**
     * @return {?}
     */
    TableCell.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.valueChangeSubscription) {
            this.valueChangeSubscription.unsubscribe();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    TableCell.prototype.onClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event) {
            event.preventDefault();
            event.stopPropagation();
        }
        if (this.column.onClick) {
            this.column.onClick(this.row);
        }
    };
    TableCell.decorators = [
        { type: Component, args: [{
                    selector: 'novo-table-cell',
                    template: "\n        <div [ngSwitch]=\"column._type\">\n            <span #container></span>\n            <date-cell *ngSwitchCase=\"'date'\" [value]=\"value\"></date-cell>\n            <a *ngSwitchCase=\"'link'\" (click)=\"onClick($event);\">{{ value }}</a>\n            <span *ngSwitchDefault>{{ value }}</span>\n        </div>\n    "
                }] }
    ];
    /** @nocollapse */
    TableCell.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ComponentUtils }
    ]; };
    TableCell.propDecorators = {
        container: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }],
        column: [{ type: Input }],
        row: [{ type: Input }],
        form: [{ type: Input }],
        hasEditor: [{ type: Input }]
    };
    return TableCell;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TableFilter = /** @class */ (function () {
    function TableFilter(element, renderer) {
        this.element = element;
        this.renderer = renderer;
        this.onFilterChange = new EventEmitter();
        this.element = element;
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    TableFilter.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.ngOnChanges();
    };
    /**
     * @param {?=} changes
     * @return {?}
     */
    TableFilter.prototype.ngOnChanges = /**
     * @param {?=} changes
     * @return {?}
     */
    function (changes) {
        /** @type {?} */
        var label = '';
        if (this.config.freetextFilter) {
            label = this.config.freetextFilter;
        }
        else if (this.config.filter) {
            label = this.config.filter;
        }
        this.renderer.setProperty(this.element, 'value', label);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    TableFilter.prototype.onChangeFilter = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        clearTimeout(this.filterThrottle);
        if (KeyCodes.ENTER === event.keyCode) {
            this.config.filter = ((/** @type {?} */ (event.target))).value;
            this.onFilterChange.emit({ filtering: this.config });
        }
        else {
            this.filterThrottle = setTimeout(function () {
                _this.config.filter = ((/** @type {?} */ (event.target))).value;
                _this.onFilterChange.emit({ filtering: _this.config });
            }, 300);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    TableFilter.prototype.onClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        Helpers.swallowEvent(event);
    };
    TableFilter.decorators = [
        { type: Directive, args: [{
                    selector: '[novoTableFilter]',
                },] }
    ];
    /** @nocollapse */
    TableFilter.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    TableFilter.propDecorators = {
        config: [{ type: Input, args: ['novoTableFilter',] }],
        onFilterChange: [{ type: Output }],
        onChangeFilter: [{ type: HostListener, args: ['keydown', ['$event'],] }],
        onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
    return TableFilter;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ThOrderable = /** @class */ (function () {
    function ThOrderable(element) {
        this.element = element;
        this.onOrderChange = new EventEmitter();
        this.element = element;
    }
    Object.defineProperty(ThOrderable.prototype, "index", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var index = null;
            if (this.element.nativeElement && this.element.nativeElement.parentNode) {
                /** @type {?} */
                var children = Array.prototype.slice.call(this.element.nativeElement.parentNode.children);
                index = children.indexOf(this.element.nativeElement);
            }
            return index;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ThOrderable.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.column.ordering) {
            this.element.nativeElement.setAttribute('draggable', true);
            this.table = this.findTable(this.element.nativeElement);
        }
    };
    /**
     * @name onDragStart
     * @param event
     */
    /**
     * \@name onDragStart
     * @param {?=} event
     * @return {?}
     */
    ThOrderable.prototype.onDragStart = /**
     * \@name onDragStart
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        if (this.column.ordering) {
            this.element.nativeElement.classList.add('dragging');
            event.dataTransfer.effectAllowed = 'move';
            event.dataTransfer.setData('text/plain', JSON.stringify(this.column));
            this.clone = this.table.cloneNode(true);
            this.clone.style.position = 'absolute';
            this.clone.style.left = '100%';
            this.clone.style.width = '150px';
            this.deleteColumns(this.clone);
            document.body.appendChild(this.clone);
            event.dataTransfer.setDragImage(this.clone, 75, 30);
        }
    };
    /**
     * @name deleteColumns
     * @param table
     */
    /**
     * \@name deleteColumns
     * @param {?} table
     * @return {?}
     */
    ThOrderable.prototype.deleteColumns = /**
     * \@name deleteColumns
     * @param {?} table
     * @return {?}
     */
    function (table) {
        // TODO: `table` should be immutable and this method should return the modified data to its caller
        if (table.rows.length > 0) {
            /** @type {?} */
            var allRows = table.rows;
            for (var i = 0; i < allRows.length; i++) {
                if (i > 10) {
                    table.deleteRow(-1);
                }
                else {
                    /** @type {?} */
                    var cellLength = allRows[i].cells.length;
                    for (var c = 0; c < cellLength; c++) {
                        if (c < this.index) {
                            allRows[i].deleteCell(0);
                        }
                        else if (c > this.index) {
                            allRows[i].deleteCell(-1);
                        }
                    }
                }
            }
        }
    };
    /**
     * @param {?} start
     * @return {?}
     */
    ThOrderable.prototype.findTable = /**
     * @param {?} start
     * @return {?}
     */
    function (start) {
        /** @type {?} */
        var htmlElementNode = start;
        while (htmlElementNode) {
            htmlElementNode = htmlElementNode.parentNode;
            if (htmlElementNode && htmlElementNode.tagName.toLowerCase() === 'table') {
                return htmlElementNode;
            }
        }
        return undefined;
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    ThOrderable.prototype.onDrag = /**
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        Helpers.swallowEvent(event);
        return false;
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    ThOrderable.prototype.onDragEnd = /**
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        Helpers.swallowEvent(event);
        this.element.nativeElement.classList.remove('over');
        this.element.nativeElement.classList.remove('dragging');
        document.body.removeChild(this.clone);
        return false;
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    ThOrderable.prototype.onDrop = /**
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        Helpers.swallowEvent(event);
        this.element.nativeElement.classList.remove('over');
        /** @type {?} */
        var data = JSON.parse(event.dataTransfer.getData('text/plain'));
        this.onOrderChange.emit({
            first: data,
            second: this.column,
        });
        return false;
    };
    /**
     * @name onDragOver
     * @param event
     */
    /**
     * \@name onDragOver
     * @param {?} event
     * @return {?}
     */
    ThOrderable.prototype.onDragOver = /**
     * \@name onDragOver
     * @param {?} event
     * @return {?}
     */
    function (event) {
        Helpers.swallowEvent(event);
        event.dataTransfer.dropEffect = 'move';
        return false;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ThOrderable.prototype.onDragEnter = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.element.nativeElement.classList.add('over');
        this.target = event.target;
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    ThOrderable.prototype.onDragLeave = /**
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        this.element.nativeElement.classList.remove('over');
    };
    ThOrderable.decorators = [
        { type: Directive, args: [{
                    selector: '[novoThOrderable]',
                    host: {
                        '(dragstart)': 'onDragStart($event)',
                        '(dragover)': 'onDragOver($event)',
                        '(dragenter)': 'onDragEnter($event)',
                        '(dragleave)': 'onDragLeave($event)',
                        '(dragend)': 'onDragEnd($event)',
                        '(drop)': 'onDrop($event)',
                    },
                },] }
    ];
    /** @nocollapse */
    ThOrderable.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    ThOrderable.propDecorators = {
        column: [{ type: Input, args: ['novoThOrderable',] }],
        onOrderChange: [{ type: Output }]
    };
    return ThOrderable;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ThSortable = /** @class */ (function () {
    function ThSortable() {
        this.onSortChange = new EventEmitter();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    ThSortable.prototype.onToggleSort = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event) {
            event.preventDefault();
        }
        if (this.config && this.column && this.config.sorting !== false && this.column.sorting !== false) {
            switch (this.column.sort) {
                case 'asc':
                    this.column.sort = 'desc';
                    break;
                default:
                    this.column.sort = 'asc';
                    break;
            }
            this.onSortChange.emit(this.column);
        }
    };
    ThSortable.decorators = [
        { type: Directive, args: [{
                    selector: '[novoThSortable]',
                    host: {
                        '(click)': 'onToggleSort($event)',
                    },
                },] }
    ];
    ThSortable.propDecorators = {
        config: [{ type: Input, args: ['novoThSortable',] }],
        column: [{ type: Input }],
        onSortChange: [{ type: Output }]
    };
    return ThSortable;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DateCell = /** @class */ (function (_super) {
    __extends(DateCell, _super);
    function DateCell() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DateCell.decorators = [
        { type: Component, args: [{
                    selector: 'date-cell',
                    template: "\n        <div class=\"date-cell\">\n            <label>{{ value | date }}</label>\n        </div>\n    "
                }] }
    ];
    DateCell.propDecorators = {
        value: [{ type: Input }]
    };
    return DateCell;
}(BaseRenderer));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PercentageCell = /** @class */ (function (_super) {
    __extends(PercentageCell, _super);
    function PercentageCell() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PercentageCell.decorators = [
        { type: Component, args: [{
                    selector: 'percentage-cell',
                    template: "\n        <div class=\"percentage\" *ngIf=\"value || value === 0\">{{ value | percent:'1.0-2' }}</div>\n    "
                }] }
    ];
    return PercentageCell;
}(BaseRenderer));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoDropdownCell = /** @class */ (function (_super) {
    __extends(NovoDropdownCell, _super);
    function NovoDropdownCell() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    NovoDropdownCell.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // Check for and fix bad config
        if (!this.meta.dropdownCellConfig) {
            throw new Error('Missing "dropdownCellConfig" on the column setup');
        }
    };
    /**
     * @param {?} config
     * @param {?} option
     * @param {?} value
     * @return {?}
     */
    NovoDropdownCell.prototype.onClick = /**
     * @param {?} config
     * @param {?} option
     * @param {?} value
     * @return {?}
     */
    function (config, option, value) {
        /** @type {?} */
        var callback = option.callback || config.callback;
        callback(this.data, value || option);
    };
    NovoDropdownCell.decorators = [
        { type: Component, args: [{
                    selector: 'novo-dropdown-cell',
                    template: "\n    <novo-dropdown parentScrollSelector=\".table-container\" containerClass=\"novo-table-dropdown-cell\">\n      <button type=\"button\" theme=\"secondary\" icon=\"collapse\" inverse>\n        <span data-automation-id=\"novo-dropdown-cell-value\">{{ value }}</span>\n      </button>\n      <list>\n        <ng-container *ngFor=\"let config of meta.dropdownCellConfig; let i = index\">\n          <dropdown-item-header *ngIf=\"config.category\">{{ config.category }}</dropdown-item-header>\n          <item *ngFor=\"let option of config.options\" (action)=\"onClick(config, option, option.value)\"\n                [class.active]=\"(option || option.value) === value\">\n            <span [attr.data-automation-id]=\"option.label || option\">{{ option.label || option }}</span>\n            <i *ngIf=\"(option || option.value) === value\" class=\"bhi-check\"></i>\n          </item>\n          <hr *ngIf=\"i < meta.dropdownCellConfig.length - 1\"/>\n        </ng-container>\n      </list>\n    </novo-dropdown>\n  "
                }] }
    ];
    NovoDropdownCell.propDecorators = {
        meta: [{ type: Input }],
        value: [{ type: Input }]
    };
    return NovoDropdownCell;
}(BaseRenderer));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoTableKeepFilterFocus = /** @class */ (function () {
    function NovoTableKeepFilterFocus(element) {
        this.element = element;
    }
    /**
     * @return {?}
     */
    NovoTableKeepFilterFocus.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.element.nativeElement.focus();
    };
    NovoTableKeepFilterFocus.decorators = [
        { type: Directive, args: [{
                    selector: '[keepFilterFocused]',
                },] }
    ];
    /** @nocollapse */
    NovoTableKeepFilterFocus.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return NovoTableKeepFilterFocus;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoTableActionsElement = /** @class */ (function () {
    function NovoTableActionsElement() {
    }
    NovoTableActionsElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-table-actions',
                    template: '<ng-content></ng-content>'
                }] }
    ];
    return NovoTableActionsElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoTableFooterElement = /** @class */ (function () {
    function NovoTableFooterElement() {
    }
    NovoTableFooterElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-table-footer',
                    template: '<ng-content></ng-content>'
                }] }
    ];
    return NovoTableFooterElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoTableHeaderElement = /** @class */ (function () {
    function NovoTableHeaderElement() {
    }
    NovoTableHeaderElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-table-header',
                    template: '<ng-content></ng-content>'
                }] }
    ];
    return NovoTableHeaderElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoTableExtrasModule = /** @class */ (function () {
    function NovoTableExtrasModule() {
    }
    NovoTableExtrasModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, FormsModule, NovoSelectModule, NovoDropdownModule, NovoButtonModule],
                    declarations: [
                        NovoTableHeaderElement,
                        NovoTableFooterElement,
                        NovoTableActionsElement,
                        NovoTableKeepFilterFocus,
                        Pagination,
                        RowDetails,
                        TableCell,
                        TableFilter,
                        ThOrderable,
                        ThSortable,
                        DateCell,
                        PercentageCell,
                        NovoDropdownCell,
                    ],
                    exports: [
                        NovoTableHeaderElement,
                        NovoTableFooterElement,
                        NovoTableActionsElement,
                        NovoTableKeepFilterFocus,
                        Pagination,
                        RowDetails,
                        TableCell,
                        TableFilter,
                        ThOrderable,
                        ThSortable,
                        DateCell,
                        PercentageCell,
                        NovoDropdownCell,
                    ],
                    entryComponents: [DateCell, PercentageCell, NovoDropdownCell],
                },] }
    ];
    return NovoTableExtrasModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CollectionEvent = /** @class */ (function () {
    function CollectionEvent(type, data) {
        if (type === void 0) { type = 'Collection.REFRESH'; }
        if (data === void 0) { data = []; }
        this.type = '';
        this.data = [];
        this.type = type;
        this.data = data;
    }
    CollectionEvent.REFRESH = 'Collection.REFRESH';
    CollectionEvent.ADD = 'Collection.ADD';
    CollectionEvent.REMOVE = 'Collection.REMOVE';
    CollectionEvent.REMOVE_ALL = 'Collection.REMOVE_ALL';
    CollectionEvent.REPLACE = 'Collection.REPLACE';
    CollectionEvent.INVALIDATE_ALL = 'Collection.INVALIDATE_ALL';
    CollectionEvent.SORT = 'Collection.SORT';
    CollectionEvent.FILTER = 'Collection.FILTER';
    CollectionEvent.CHANGE = 'Collection.CHANGE';
    CollectionEvent.CURRENTPAGE_CHANGE = 'Collection.CURRENTPAGE_CHANGE';
    CollectionEvent.PAGESIZE_CHANGE = 'Collection.PAGESIZE_CHANGE';
    CollectionEvent.NUMBEROFPAGES_CHANGE = 'Collection.NUMBEROFPAGES_CHANGE';
    return CollectionEvent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Base Class for all Collection based data providers
 *
 * \@example
 *  var dp:DataProvider = new DataProvider();
 *  dp.addItem({label:"Item 1"});
 *  dp.addItem({label:"Item 2"});
 *  dp.addItem({label:"Item 3"});
 *  dp.addItem({label:"Item 4"});
 *  var myList:List = new List();
 *  myList.dataProvider = dp;
 * @template T
 */
var  /**
 * Base Class for all Collection based data providers
 *
 * \@example
 *  var dp:DataProvider = new DataProvider();
 *  dp.addItem({label:"Item 1"});
 *  dp.addItem({label:"Item 2"});
 *  dp.addItem({label:"Item 3"});
 *  dp.addItem({label:"Item 4"});
 *  var myList:List = new List();
 *  myList.dataProvider = dp;
 * @template T
 */
ArrayCollection = /** @class */ (function () {
    function ArrayCollection(source) {
        if (source === void 0) { source = []; }
        this.dataChange = new EventEmitter();
        this.source = [];
        this.editData = [];
        this.isEditing = false;
        this.filterData = [];
        this._filter = {};
        this._sort = [];
        this.source = source;
        this.editData = this.copy(this.source);
        this.filterData = this.source.slice();
    }
    Object.defineProperty(ArrayCollection.prototype, "length", {
        get: /**
         * @return {?}
         */
        function () {
            return this.filterData.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ArrayCollection.prototype, "total", {
        get: /**
         * @return {?}
         */
        function () {
            return this.filterData.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ArrayCollection.prototype, "list", {
        get: /**
         * @return {?}
         */
        function () {
            return this.filterData;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ArrayCollection.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        return this.length <= 0 && !this.isLoading() && !this.hasErrors();
    };
    /**
     * @return {?}
     */
    ArrayCollection.prototype.hasErrors = /**
     * @return {?}
     */
    function () {
        return false;
    };
    /**
     * @return {?}
     */
    ArrayCollection.prototype.isLoading = /**
     * @return {?}
     */
    function () {
        return false;
    };
    /**
     * @return {?}
     */
    ArrayCollection.prototype.isFiltered = /**
     * @return {?}
     */
    function () {
        return Object.keys(this._filter).length > 0;
    };
    /**
     * Method to switch the isEditingflag for the data source
     */
    /**
     * Method to switch the isEditingflag for the data source
     * @return {?}
     */
    ArrayCollection.prototype.edit = /**
     * Method to switch the isEditingflag for the data source
     * @return {?}
     */
    function () {
        this.isEditing = true;
        this.editData = this.copy(this.source);
    };
    /**
     * Method to leave edit mode and reset source
     */
    /**
     * Method to leave edit mode and reset source
     * @return {?}
     */
    ArrayCollection.prototype.undo = /**
     * Method to leave edit mode and reset source
     * @return {?}
     */
    function () {
        this.isEditing = false;
        this.source = this.copy(this.editData);
        this.refresh();
    };
    /**
     * Method to leave edit mode and save editData
     */
    /**
     * Method to leave edit mode and save editData
     * @return {?}
     */
    ArrayCollection.prototype.commit = /**
     * Method to leave edit mode and save editData
     * @return {?}
     */
    function () {
        this.isEditing = false;
        this.source = this.filterData.slice();
        this.refresh();
    };
    /**
     * Appends an item to the end of the data provider.
     *
     * @param item
     *
     * @memberOf ArrayCollection
     */
    /**
     * Appends an item to the end of the data provider.
     *
     * \@memberOf ArrayCollection
     * @param {?} item
     *
     * @return {?}
     */
    ArrayCollection.prototype.addItem = /**
     * Appends an item to the end of the data provider.
     *
     * \@memberOf ArrayCollection
     * @param {?} item
     *
     * @return {?}
     */
    function (item) {
        this.isEditing ? this.editData.push(item) : this.source.push(item);
        this.onDataChange(new CollectionEvent(CollectionEvent.ADD, [item]));
        this.refresh();
    };
    /**
     * Adds a new item to the data provider at the specified index.
     *
     * @param item
     * @param index
     *
     * @memberOf ArrayCollection
     */
    /**
     * Adds a new item to the data provider at the specified index.
     *
     * \@memberOf ArrayCollection
     * @param {?} item
     * @param {?} index
     *
     * @return {?}
     */
    ArrayCollection.prototype.addItemAt = /**
     * Adds a new item to the data provider at the specified index.
     *
     * \@memberOf ArrayCollection
     * @param {?} item
     * @param {?} index
     *
     * @return {?}
     */
    function (item, index) {
        this.isEditing ? this.editData.splice(index, 0, item) : this.source.splice(index, 0, item);
        this.onDataChange(new CollectionEvent(CollectionEvent.ADD, [item]));
        this.refresh();
    };
    /**
     *  Appends multiple items to the end of the DataProvider and dispatches a CollectionEvent.ADD event.
     *
     * @param items
     *
     * @memberOf ArrayCollection
     */
    /**
     *  Appends multiple items to the end of the DataProvider and dispatches a CollectionEvent.ADD event.
     *
     * \@memberOf ArrayCollection
     * @param {?} items
     *
     * @return {?}
     */
    ArrayCollection.prototype.addItems = /**
     *  Appends multiple items to the end of the DataProvider and dispatches a CollectionEvent.ADD event.
     *
     * \@memberOf ArrayCollection
     * @param {?} items
     *
     * @return {?}
     */
    function (items) {
        var _a, _b;
        this.isEditing ? (_a = this.editData).push.apply(_a, __spread(items)) : (_b = this.source).push.apply(_b, __spread(items));
        this.onDataChange(new CollectionEvent(CollectionEvent.ADD, items));
        this.refresh();
    };
    /**
     * Adds several items to the data provider at the specified index and dispatches a CollectionEvent.ADD event.
     *
     * @param items
     * @param index
     *
     * @memberOf ArrayCollection
     */
    /**
     * Adds several items to the data provider at the specified index and dispatches a CollectionEvent.ADD event.
     *
     * \@memberOf ArrayCollection
     * @param {?} items
     * @param {?} index
     *
     * @return {?}
     */
    ArrayCollection.prototype.addItemsAt = /**
     * Adds several items to the data provider at the specified index and dispatches a CollectionEvent.ADD event.
     *
     * \@memberOf ArrayCollection
     * @param {?} items
     * @param {?} index
     *
     * @return {?}
     */
    function (items, index) {
        var _a, _b;
        this.isEditing ? (_a = this.editData).splice.apply(_a, __spread([index, 0], items)) : (_b = this.source).splice.apply(_b, __spread([index, 0], items));
    };
    /**
     * Creates a copy of the current ArrayCollection any.
     *
     * @memberOf ArrayCollection
     */
    /**
     * Creates a copy of the current ArrayCollection any.
     *
     * \@memberOf ArrayCollection
     * @return {?}
     */
    ArrayCollection.prototype.clone = /**
     * Creates a copy of the current ArrayCollection any.
     *
     * \@memberOf ArrayCollection
     * @return {?}
     */
    function () {
        return new ArrayCollection(this.isEditing ? this.copy(this.editData) : this.copy(this.source));
    };
    /**
     * Creates a copy of the current ArrayCollection any.
     *
     * @memberOf ArrayCollection
     */
    /**
     * Creates a copy of the current ArrayCollection any.
     *
     * \@memberOf ArrayCollection
     * @param {?} array
     * @return {?}
     */
    ArrayCollection.prototype.copy = /**
     * Creates a copy of the current ArrayCollection any.
     *
     * \@memberOf ArrayCollection
     * @param {?} array
     * @return {?}
     */
    function (array) {
        return Helpers.deepClone(array);
    };
    /**
     * Concatenates the specified items to the end of the current data provider.
     *
     * @param items
     *
     * @memberOf ArrayCollection
     */
    /**
     * Concatenates the specified items to the end of the current data provider.
     *
     * \@memberOf ArrayCollection
     * @param {?} items
     *
     * @return {?}
     */
    ArrayCollection.prototype.concat = /**
     * Concatenates the specified items to the end of the current data provider.
     *
     * \@memberOf ArrayCollection
     * @param {?} items
     *
     * @return {?}
     */
    function (items) {
        this.addItems(items);
    };
    /**
     * Returns the item at the specified index.
     *
     * @param index
     *
     * @memberOf ArrayCollection
     */
    /**
     * Returns the item at the specified index.
     *
     * \@memberOf ArrayCollection
     * @param {?} index
     *
     * @return {?}
     */
    ArrayCollection.prototype.getItemAt = /**
     * Returns the item at the specified index.
     *
     * \@memberOf ArrayCollection
     * @param {?} index
     *
     * @return {?}
     */
    function (index) {
        return this.isEditing ? this.editData[index] : this.source[index];
    };
    /**
     *  Returns the index of the specified item.
     *
     * @param item
     *
     * @memberOf ArrayCollection
     */
    /**
     *  Returns the index of the specified item.
     *
     * \@memberOf ArrayCollection
     * @param {?} item
     *
     * @return {?}
     */
    ArrayCollection.prototype.getItemIndex = /**
     *  Returns the index of the specified item.
     *
     * \@memberOf ArrayCollection
     * @param {?} item
     *
     * @return {?}
     */
    function (item) {
        return this.isEditing ? this.editData.indexOf(item) : this.source.indexOf(item);
    };
    /**
     * Invalidates all the data items that the DataProvider contains and dispatches a CollectionEvent.INVALIDATE_ALL event.
     *
     * @memberOf ArrayCollection
     */
    /**
     * Invalidates all the data items that the DataProvider contains and dispatches a CollectionEvent.INVALIDATE_ALL event.
     *
     * \@memberOf ArrayCollection
     * @return {?}
     */
    ArrayCollection.prototype.invalidate = /**
     * Invalidates all the data items that the DataProvider contains and dispatches a CollectionEvent.INVALIDATE_ALL event.
     *
     * \@memberOf ArrayCollection
     * @return {?}
     */
    function () {
        this.onDataChange(new CollectionEvent(CollectionEvent.INVALIDATE_ALL));
    };
    /**
     * Invalidates the specified item.
     *
     * @param item
     *
     * @memberOf ArrayCollection
     */
    // invalidateItem(item:any):void {}
    /**
     * Invalidates the item at the specified index.
     *
     * @param index
     *
     * @memberOf ArrayCollection
     */
    // invalidateItemAt(index:number):void {}
    /**
     * Appends the specified data into the data that the data provider contains and removes any duplicate items.
     *
     * @param newData
     *
     * @memberOf ArrayCollection
     */
    /**
       * Invalidates the specified item.
       *
       * @param item
       *
       * @memberOf ArrayCollection
       */
    // invalidateItem(item:any):void {}
    /**
       * Invalidates the item at the specified index.
       *
       * @param index
       *
       * @memberOf ArrayCollection
       */
    // invalidateItemAt(index:number):void {}
    /**
     * Appends the specified data into the data that the data provider contains and removes any duplicate items.
     *
     * \@memberOf ArrayCollection
     * @param {?} newData
     *
     * @return {?}
     */
    ArrayCollection.prototype.merge = /**
       * Invalidates the specified item.
       *
       * @param item
       *
       * @memberOf ArrayCollection
       */
    // invalidateItem(item:any):void {}
    /**
       * Invalidates the item at the specified index.
       *
       * @param index
       *
       * @memberOf ArrayCollection
       */
    // invalidateItemAt(index:number):void {}
    /**
     * Appends the specified data into the data that the data provider contains and removes any duplicate items.
     *
     * \@memberOf ArrayCollection
     * @param {?} newData
     *
     * @return {?}
     */
    function (newData) {
        var e_1, _a;
        try {
            for (var newData_1 = __values(newData), newData_1_1 = newData_1.next(); !newData_1_1.done; newData_1_1 = newData_1.next()) {
                var obj = newData_1_1.value;
                /** @type {?} */
                var existing = ~this.getItemIndex(obj);
                if (existing) {
                    this.replaceItem(obj, existing);
                }
                else {
                    this.addItem(obj);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (newData_1_1 && !newData_1_1.done && (_a = newData_1.return)) _a.call(newData_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * Removes all items from the data provider and dispatches a CollectionEvent.REMOVE_ALL event.
     *
     * @memberOf ArrayCollection
     */
    /**
     * Removes all items from the data provider and dispatches a CollectionEvent.REMOVE_ALL event.
     *
     * \@memberOf ArrayCollection
     * @return {?}
     */
    ArrayCollection.prototype.removeAll = /**
     * Removes all items from the data provider and dispatches a CollectionEvent.REMOVE_ALL event.
     *
     * \@memberOf ArrayCollection
     * @return {?}
     */
    function () {
        this.source = [];
        this.editData = [];
        this.filterData = [];
        this.onDataChange(new CollectionEvent(CollectionEvent.REMOVE_ALL, []));
        this.refresh();
    };
    /**
     * Removes the specified item from the data provider and dispatches a CollectionEvent.REMOVE event.
     *
     * @param item
     *
     * @memberOf ArrayCollection
     */
    /**
     * Removes the specified item from the data provider and dispatches a CollectionEvent.REMOVE event.
     *
     * \@memberOf ArrayCollection
     * @param {?} item
     *
     * @return {?}
     */
    ArrayCollection.prototype.removeItem = /**
     * Removes the specified item from the data provider and dispatches a CollectionEvent.REMOVE event.
     *
     * \@memberOf ArrayCollection
     * @param {?} item
     *
     * @return {?}
     */
    function (item) {
        /** @type {?} */
        var index = this.getItemIndex(item);
        return this.removeItemAt(index);
    };
    /**
     * Removes the item at the specified index and dispatches a CollectionEvent.REMOVE event.
     *
     * @param index
     *
     * @memberOf ArrayCollection
     */
    /**
     * Removes the item at the specified index and dispatches a CollectionEvent.REMOVE event.
     *
     * \@memberOf ArrayCollection
     * @param {?} index
     *
     * @return {?}
     */
    ArrayCollection.prototype.removeItemAt = /**
     * Removes the item at the specified index and dispatches a CollectionEvent.REMOVE event.
     *
     * \@memberOf ArrayCollection
     * @param {?} index
     *
     * @return {?}
     */
    function (index) {
        /** @type {?} */
        var success = !!this.source.splice(index, 1);
        this.refresh();
        return success;
    };
    /**
     * Replaces an existing item with a new item and dispatches a CollectionEvent.REPLACE event.
     *
     * @param newItem
     * @param oldItem
     *
     * @memberOf ArrayCollection
     */
    /**
     * Replaces an existing item with a new item and dispatches a CollectionEvent.REPLACE event.
     *
     * \@memberOf ArrayCollection
     * @param {?} newItem
     * @param {?} oldItem
     *
     * @return {?}
     */
    ArrayCollection.prototype.replaceItem = /**
     * Replaces an existing item with a new item and dispatches a CollectionEvent.REPLACE event.
     *
     * \@memberOf ArrayCollection
     * @param {?} newItem
     * @param {?} oldItem
     *
     * @return {?}
     */
    function (newItem, oldItem) {
        /** @type {?} */
        var index = this.getItemIndex(oldItem);
        if (index >= 0) {
            this.replaceItemAt(newItem, index);
        }
    };
    /**
     * Replaces the item at the specified index and dispatches a CollectionEvent.REPLACE event.
     *
     * @param newItem
     * @param index
     *
     * @memberOf ArrayCollection
     */
    /**
     * Replaces the item at the specified index and dispatches a CollectionEvent.REPLACE event.
     *
     * \@memberOf ArrayCollection
     * @param {?} newItem
     * @param {?} index
     *
     * @return {?}
     */
    ArrayCollection.prototype.replaceItemAt = /**
     * Replaces the item at the specified index and dispatches a CollectionEvent.REPLACE event.
     *
     * \@memberOf ArrayCollection
     * @param {?} newItem
     * @param {?} index
     *
     * @return {?}
     */
    function (newItem, index) {
        this.filterData.splice(index, 1, newItem);
    };
    Object.defineProperty(ArrayCollection.prototype, "sort", {
        /**
         * Sorts the items that the data provider contains and dispatches a CollectionEvent.SORT event.
         *
         * @param sortArgs
         * @returns null
         *
         * @memberOf ArrayCollection
         */
        get: /**
         * Sorts the items that the data provider contains and dispatches a CollectionEvent.SORT event.
         *
         * \@memberOf ArrayCollection
         * @return {?} null
         *
         */
        function () {
            return this._sort;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._sort = value;
            this.refresh();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sorts the items that the data provider contains by the specified field and dispatches a CollectionEvent.SORT event.
     *
     * @param fieldName
     * @param [options=null]
     * @returns null
     *
     * @memberOf ArrayCollection
     */
    /**
     * Sorts the items that the data provider contains by the specified field and dispatches a CollectionEvent.SORT event.
     *
     * \@memberOf ArrayCollection
     * @param {?} fieldName
     * @param {?=} reverse
     * @return {?} null
     *
     */
    ArrayCollection.prototype.sortOn = /**
     * Sorts the items that the data provider contains by the specified field and dispatches a CollectionEvent.SORT event.
     *
     * \@memberOf ArrayCollection
     * @param {?} fieldName
     * @param {?=} reverse
     * @return {?} null
     *
     */
    function (fieldName, reverse) {
        if (reverse === void 0) { reverse = false; }
        this.filterData = this.filterData.sort(Helpers.sortByField(fieldName, reverse));
        this.onDataChange(new CollectionEvent(CollectionEvent.SORT));
        return this.filterData;
    };
    Object.defineProperty(ArrayCollection.prototype, "filter", {
        get: /**
         * @return {?}
         */
        function () {
            return this._filter;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._filter = value;
            this.refresh();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} fieldName
     * @param {?=} value
     * @return {?}
     */
    ArrayCollection.prototype.filterOn = /**
     * @param {?} fieldName
     * @param {?=} value
     * @return {?}
     */
    function (fieldName, value) {
        if (value === void 0) { value = null; }
        this.filterData = this.filterData.filter(Helpers.filterByField(fieldName, value));
        return this.filterData;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ArrayCollection.prototype.onDataChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.dataChange.emit(event);
    };
    /**
     * @return {?}
     */
    ArrayCollection.prototype.refresh = /**
     * @return {?}
     */
    function () {
        var e_2, _a;
        this.filterData = this.isEditing ? this.editData.slice() : this.source.slice();
        try {
            for (var _b = __values(this._sort.reverse()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var item = _c.value;
                this.sortOn(item.field, item.reverse);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        for (var key in this._filter) {
            if (key) {
                this.filterOn(key, this._filter[key]);
            }
        }
        this.onDataChange(new CollectionEvent(CollectionEvent.CHANGE, this.filterData));
    };
    /**
     * Creates an Array any representation of the data that the data provider contains.
     *
     * @memberOf ArrayCollection
     */
    /**
     * Creates an Array any representation of the data that the data provider contains.
     *
     * \@memberOf ArrayCollection
     * @return {?}
     */
    ArrayCollection.prototype.toArray = /**
     * Creates an Array any representation of the data that the data provider contains.
     *
     * \@memberOf ArrayCollection
     * @return {?}
     */
    function () {
        return this.isEditing ? this.editData : this.source;
    };
    /**
     * @return {?}
     */
    ArrayCollection.prototype.toJSON = /**
     * @return {?}
     */
    function () {
        return this.isEditing ? this.editData : this.source;
    };
    return ArrayCollection;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 */
var  /**
 * @template T
 */
PagedArrayCollection = /** @class */ (function (_super) {
    __extends(PagedArrayCollection, _super);
    function PagedArrayCollection(source) {
        if (source === void 0) { source = []; }
        var _this = _super.call(this, source) || this;
        _this._page = 1;
        _this._numberOfPages = 1;
        _this._pageSize = 10;
        return _this;
    }
    Object.defineProperty(PagedArrayCollection.prototype, "numberOfPages", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var result = this.source.length / this.pageSize;
            result = Math.ceil(result);
            return result;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PagedArrayCollection.prototype, "page", {
        get: /**
         * @return {?}
         */
        function () {
            return this._page;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._page = value;
            this.refresh();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PagedArrayCollection.prototype, "pageSize", {
        get: /**
         * @return {?}
         */
        function () {
            return this._pageSize;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._pageSize = value;
            this.refresh();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PagedArrayCollection.prototype.next = /**
     * @return {?}
     */
    function () {
        if (this.page === this.numberOfPages) {
            return this.page;
        }
        this.page++;
        return this.page;
    };
    /**
     * @return {?}
     */
    PagedArrayCollection.prototype.prev = /**
     * @return {?}
     */
    function () {
        if (this._page === 1) {
            return this.page;
        }
        this.page--;
        return this.page;
    };
    /**
     * @return {?}
     */
    PagedArrayCollection.prototype.first = /**
     * @return {?}
     */
    function () {
        if (this.page === 1) {
            return this.page;
        }
        this.page = 1;
        return this.page;
    };
    /**
     * @return {?}
     */
    PagedArrayCollection.prototype.last = /**
     * @return {?}
     */
    function () {
        if (this.page === this.numberOfPages) {
            return this.page;
        }
        this.page = this.numberOfPages;
        return this.page;
    };
    /**
     * @return {?}
     */
    PagedArrayCollection.prototype.refresh = /**
     * @return {?}
     */
    function () {
        var e_1, _a;
        this.filterData = this.isEditing ? this.editData.slice() : this.source.slice();
        try {
            for (var _b = __values(this._sort.reverse()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var item = _c.value;
                this.sortOn(item.field, item.reverse);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        for (var key in this._filter) {
            if (key) {
                this.filterOn(key, this._filter[key]);
            }
        }
        if (this.page >= 0) {
            /** @type {?} */
            var start = (this.page - 1) * this.pageSize;
            /** @type {?} */
            var end = start + this.pageSize;
            /** @type {?} */
            var result = this.filterData.slice(start, end);
            this.onDataChange(new CollectionEvent(CollectionEvent.CHANGE, result));
        }
        else {
            this.onDataChange(new CollectionEvent(CollectionEvent.CHANGE, this.filterData));
        }
    };
    return PagedArrayCollection;
}(ArrayCollection));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
var NovoTableMode = {
    VIEW: 1,
    EDIT: 2,
};
NovoTableMode[NovoTableMode.VIEW] = 'VIEW';
NovoTableMode[NovoTableMode.EDIT] = 'EDIT';
var NovoTableElement = /** @class */ (function () {
    function NovoTableElement(labels, formUtils, builder) {
        this.labels = labels;
        this.formUtils = formUtils;
        this.builder = builder;
        this.config = {};
        this.skipSortAndFilterClear = false;
        this.mode = NovoTableMode.VIEW;
        this.editable = false;
        this.rowIdentifier = 'id';
        this.name = 'table';
        this.onRowClick = new EventEmitter();
        this.onRowSelect = new EventEmitter();
        this.onTableChange = new EventEmitter();
        this._rows = [];
        this.selected = [];
        this.activeId = 0;
        this.master = false;
        this.expandAll = false;
        this.indeterminate = false;
        this.lastPage = 0;
        this.selectedPageCount = 0;
        this.showSelectAllMessage = false;
        this.pagedData = [];
        // Map to keep track of what dropdowns are toggled
        // Used to properly *ngIf the <list> so that the keepFilterFocused Directive
        // will properly fire the ngAfterViewInit event
        this.toggledDropdownMap = {};
        this.NovoTableMode = NovoTableMode;
        this.tableForm = new FormGroup({});
        this.footers = [];
        this.grossFlagToAvoidTheTableFromBeingUglyWhenHidingTheToast = false;
        this.loading = false;
        notify('[Deprecated]: The table is deprecated. Please migrate to novo-data-tables!');
    }
    Object.defineProperty(NovoTableElement.prototype, "rows", {
        get: /**
         * @return {?}
         */
        function () {
            return this._rows;
        },
        set: /**
         * @param {?} rows
         * @return {?}
         */
        function (rows) {
            this.dataProvider = rows;
            if (rows && rows.length > 0) {
                this.setupColumnDefaults();
            }
            // this is a temporary/hacky fix until async dataloading is handled within the table
            if (!this.skipSortAndFilterClear) {
                this.clearAllSortAndFilters();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoTableElement.prototype, "dataProvider", {
        get: /**
         * @return {?}
         */
        function () {
            return this._dataProvider;
        },
        set: /**
         * @param {?} dp
         * @return {?}
         */
        function (dp) {
            var _this = this;
            this._dataProvider = Array.isArray(dp) ? new PagedArrayCollection(dp) : dp;
            this._dataProvider.dataChange.pipe(debounceTime(100)).subscribe(function (event) {
                switch (event.type) {
                    case CollectionEvent.CHANGE:
                        _this._rows = event.data;
                        // Setup form
                        _this.tableForm = _this.builder.group({
                            rows: _this.builder.array([]),
                        });
                        // Remove all selection on sort change if selection is on
                        if (_this.config.rowSelectionStyle === 'checkbox') {
                            _this.pagedData = event.data;
                            _this.pageSelected = _this.pagedData.filter(function (r) { return r._selected; });
                            _this.rowSelectHandler();
                        }
                        // Find that columns we might need to sum up via the footer
                        /** @type {?} */
                        var columnsToSum_1 = [];
                        /** @type {?} */
                        var columnSums_1 = {};
                        if (_this.config.footers) {
                            _this.config.footers.forEach(function (config) {
                                columnsToSum_1.push.apply(columnsToSum_1, __spread(config.columns));
                            });
                            // Only have unique columns, filter out duplicates
                            columnsToSum_1 = columnsToSum_1.filter(function (item, index, array) { return array.indexOf(item) === index; });
                        }
                        // Make a form for each row
                        /** @type {?} */
                        var tableFormRows_1 = (/** @type {?} */ (_this.tableForm.controls['rows']));
                        _this._rows.forEach(function (row, index) {
                            /** @type {?} */
                            var rowControls = [];
                            row.controls = {};
                            row._editing = {};
                            row._expanded = _this.config.expandAll;
                            row.rowId = _this._rows.length;
                            _this.columns.forEach(function (column) {
                                // Use the control passed or use a ReadOnlyControl so that the form has the values
                                /** @type {?} */
                                var control = column.editorConfig
                                    ? ControlFactory.create(column.editorType, column.editorConfig)
                                    : new ReadOnlyControl({ key: column.name });
                                row.controls[column.name] = control;
                                rowControls.push(control);
                            });
                            _this.formUtils.setInitialValues(rowControls, row, false);
                            tableFormRows_1.push(_this.formUtils.toFormGroup(rowControls));
                            // Setup the total footer if configured
                            // Array of keys to total
                            if (columnsToSum_1.length !== 0) {
                                columnsToSum_1.forEach(function (column) {
                                    if (Helpers.isBlank(columnSums_1[column])) {
                                        columnSums_1[column] = 0;
                                    }
                                    columnSums_1[column] += row[column];
                                });
                            }
                        });
                        if (_this.mode === NovoTableMode.EDIT) {
                            _this.setTableEdit();
                        }
                        // Setup the footers (if any)
                        if (_this.config.footers) {
                            _this.footers = [];
                            _this.config.footers.forEach(function (footerConfig, footerConfigIndex) {
                                /** @type {?} */
                                var footer = {};
                                footer[footerConfig.labelColumn] = footerConfig.label;
                                footerConfig.columns.forEach(function (column) {
                                    if (footerConfig.method === 'AVG' && _this._rows.length !== 0) {
                                        footer[column] = columnSums_1[column] / _this._rows.length;
                                    }
                                    else {
                                        footer[column] = columnSums_1[column];
                                    }
                                });
                                _this.footers.push(footer);
                            });
                        }
                        break;
                    default:
                        break;
                }
            });
            if (this.config.paging) {
                this._dataProvider.page = this.config.paging.current;
                this._dataProvider.pageSize = this.config.paging.itemsPerPage;
            }
            else {
                // Paging turned off, return basically all of the data
                this._dataProvider.page = 1;
                this._dataProvider.pageSize = 500;
            }
            if (dp && dp.length > 0) {
                this.setupColumnDefaults();
            }
            this._dataProvider.refresh();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoTableElement.prototype, "editing", {
        get: /**
         * @return {?}
         */
        function () {
            return this.mode === NovoTableMode.EDIT;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoTableElement.prototype, "formValue", {
        get: /**
         * @return {?}
         */
        function () {
            return this.tableForm.value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @param {?} column
     * @return {?}
     */
    NovoTableElement.prototype.onDropdownToggled = /**
     * @param {?} event
     * @param {?} column
     * @return {?}
     */
    function (event, column) {
        this.toggledDropdownMap[column] = event;
    };
    /**
     * @return {?}
     */
    NovoTableElement.prototype.focusInput = /**
     * @return {?}
     */
    function () {
        if (this.filterInputs && this.filterInputs.length) {
            this.filterInputs.forEach(function (filterInput) {
                if (filterInput.nativeElement) {
                    setTimeout(function () { return filterInput.nativeElement.focus(); }, 0);
                }
            });
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoTableElement.prototype.onPageChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // this.dataProvider.page = event.page;
        // this.dataProvider.pageSize = event.itemsPerPage;
    };
    /**
     * @param {?} option
     * @return {?}
     */
    NovoTableElement.prototype.getOptionDataAutomationId = /**
     * @param {?} option
     * @return {?}
     */
    function (option) {
        if (!Helpers.isBlank(option.value)) {
            return option.value;
        }
        return option;
    };
    /**
     * @name setupColumnDefaults
     */
    /**
     * \@name setupColumnDefaults
     * @return {?}
     */
    NovoTableElement.prototype.setupColumnDefaults = /**
     * \@name setupColumnDefaults
     * @return {?}
     */
    function () {
        var _this = this;
        // Check columns for cell option types
        this.columns.forEach(function (column) {
            if (column && column.type) {
                switch (column.type) {
                    case 'date':
                        // Set options based on dates if there are none
                        column.options = column.options || _this.getDefaultOptions(column);
                        break;
                    default:
                        break;
                }
            }
        });
    };
    /**
     * @name ngDoCheck
     */
    /**
     * \@name ngDoCheck
     * @return {?}
     */
    NovoTableElement.prototype.ngDoCheck = /**
     * \@name ngDoCheck
     * @return {?}
     */
    function () {
        if (this.config.paging && this.config.paging.current !== this.lastPage) {
            this.rowSelectHandler();
            this.showSelectAllMessage = false;
        }
        this.lastPage = this.config.paging ? this.config.paging.current : 1;
    };
    /**
     * @name getPageStart
     */
    /**
     * \@name getPageStart
     * @return {?}
     */
    NovoTableElement.prototype.getPageStart = /**
     * \@name getPageStart
     * @return {?}
     */
    function () {
        return this.config.paging ? (this.dataProvider.page - 1) * this.dataProvider.pageSize : 0;
    };
    /**
     * @name getPageEnd
     */
    /**
     * \@name getPageEnd
     * @return {?}
     */
    NovoTableElement.prototype.getPageEnd = /**
     * \@name getPageEnd
     * @return {?}
     */
    function () {
        return this.config.paging && this.dataProvider.pageSize > -1 ? this.getPageStart() + this.dataProvider.pageSize : this.rows.length;
    };
    /**
     * @param {?} i
     * @return {?}
     */
    NovoTableElement.prototype.getRowControlForm = /**
     * @param {?} i
     * @return {?}
     */
    function (i) {
        /** @type {?} */
        var tableFormRows = (/** @type {?} */ (this.tableForm.controls['rows']));
        return tableFormRows.controls[i];
    };
    /**
     * @name onFilterClick
     * @param column
     * @param filter
     */
    /**
     * \@name onFilterClick
     * @param {?} column
     * @param {?} filter
     * @return {?}
     */
    NovoTableElement.prototype.onFilterClick = /**
     * \@name onFilterClick
     * @param {?} column
     * @param {?} filter
     * @return {?}
     */
    function (column, filter$$1) {
        if (filter$$1.range && !column.calendarShow) {
            column.calenderShow = true;
            return;
        }
        if (Array.isArray(column.filter) && column.multiple) {
            if (~column.filter.indexOf(filter$$1)) {
                // Remove filter
                column.filter.splice(column.filter.indexOf(filter$$1), 1);
                if (filter$$1.range) {
                    column.calenderShow = false;
                }
                if (column.filter.length === 0) {
                    column.filter = null;
                }
            }
            else {
                // Add filter
                column.filter.push(filter$$1);
            }
        }
        else if (column.multiple) {
            column.filter = new Array();
            column.filter.push(Helpers.isBlank(filter$$1.value) ? filter$$1 : filter$$1.value);
        }
        else {
            column.filter = Helpers.isBlank(filter$$1.value) ? filter$$1 : filter$$1.value;
        }
        this.onFilterChange();
    };
    /**
     * @name onFilterClear
     * @param column
     */
    /**
     * \@name onFilterClear
     * @param {?} column
     * @return {?}
     */
    NovoTableElement.prototype.onFilterClear = /**
     * \@name onFilterClear
     * @param {?} column
     * @return {?}
     */
    function (column) {
        var _this = this;
        setTimeout(function () {
            column.filter = null;
            column.freetextFilter = null;
            _this.onFilterChange();
            if (column.originalOptions) {
                column.options = column.originalOptions;
            }
        });
    };
    /**
     * @return {?}
     */
    NovoTableElement.prototype.clearAllSortAndFilters = /**
     * @return {?}
     */
    function () {
        if (this.config.filtering) {
            this.columns.forEach(function (column) {
                column.filter = null;
                column.sort = null;
            });
        }
    };
    /**
     * @name onFilterChange
     *
     * @description This method updates the row data to reflect the active filters.
     */
    /**
     * \@name onFilterChange
     *
     * \@description This method updates the row data to reflect the active filters.
     * @param {?=} event
     * @return {?}
     */
    NovoTableElement.prototype.onFilterChange = /**
     * \@name onFilterChange
     *
     * \@description This method updates the row data to reflect the active filters.
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        var e_1, _a;
        if (this.config.filtering) {
            // Array of filters
            /** @type {?} */
            var filters = this.columns.filter(function (col) { return !Helpers.isEmpty(col.filter); });
            if (filters.length) {
                /** @type {?} */
                var query$$1 = {};
                var _loop_1 = function (column) {
                    if (Helpers.isFunction(column.match)) {
                        query$$1[column.name] = function (value, record) {
                            return column.match(record, column.filter);
                        };
                    }
                    else if (column.preFilter && Helpers.isFunction(column.preFilter)) {
                        query$$1 = Object.assign({}, query$$1, column.preFilter(this_1.escapeCharacters(column.filter)));
                    }
                    else if (Array.isArray(column.filter)) {
                        // The filters are an array (multi-select), check value
                        /** @type {?} */
                        var options = column.filter;
                        // We have an array of {value: '', labels: ''}
                        if (options[0].value || options[0].label) {
                            options = column.filter.map(function (opt) { return opt.value; });
                        }
                        query$$1[column.name] = { any: options };
                    }
                    else if (column.type && column.type === 'date') {
                        if (column.filter.startDate && column.filter.endDate) {
                            query$$1[column.name] = {
                                min: startOfDay(column.filter.startDate),
                                max: startOfDay(addDays(startOfDay(column.filter.endDate), 1)),
                            };
                        }
                        else {
                            query$$1[column.name] = {
                                min: column.filter.min ? addDays(startOfToday(), column.filter.min) : startOfToday(),
                                max: column.filter.max ? addDays(startOfTomorrow(), column.filter.max) : startOfTomorrow(),
                            };
                        }
                    }
                    else {
                        query$$1[column.name] = column.filter;
                    }
                };
                var this_1 = this;
                try {
                    for (var filters_1 = __values(filters), filters_1_1 = filters_1.next(); !filters_1_1.done; filters_1_1 = filters_1.next()) {
                        var column = filters_1_1.value;
                        _loop_1(column);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (filters_1_1 && !filters_1_1.done && (_a = filters_1.return)) _a.call(filters_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                if (Helpers.isFunction(this.config.filtering)) {
                    this.config.filtering(query$$1);
                }
                else {
                    this._dataProvider.filter = query$$1;
                }
            }
            else {
                this._dataProvider.filter = {};
            }
            // Trickle down to keep sort
            // this.onSortChange(this.currentSortColumn);
            this.fireTableChangeEvent();
            // If paging, reset page
            if (this.config.paging) {
                this.config.paging.current = 1;
            }
            // Remove all selection on sort change if selection is on
            if (this.config.rowSelectionStyle === 'checkbox') {
                this.selectAll(false);
            }
        }
    };
    /**
     * @param {?} filter
     * @return {?}
     */
    NovoTableElement.prototype.escapeCharacters = /**
     * @param {?} filter
     * @return {?}
     */
    function (filter$$1) {
        if (typeof filter$$1 === 'string') {
            return filter$$1.replace(/'/g, '\'\'');
        }
        return filter$$1;
    };
    /**
     * @param {?} column
     * @param {?} filter
     * @return {?}
     */
    NovoTableElement.prototype.isFilterActive = /**
     * @param {?} column
     * @param {?} filter
     * @return {?}
     */
    function (column, filter$$1) {
        // TODO: This needs to be refactored
        /** @type {?} */
        var isActive = false;
        if (column && !Helpers.isBlank(column.filter) && !Helpers.isBlank(filter$$1)) {
            if (Array.isArray(column.filter)) {
                if (typeof filter$$1 !== 'string') {
                    isActive = column.filter.some(function (item) {
                        return item.label === filter$$1.label;
                    });
                }
                else {
                    isActive = column.filter.includes(filter$$1);
                }
            }
            else {
                if (typeof column.filter === typeof filter$$1) {
                    isActive = column.filter === filter$$1;
                }
                else {
                    isActive = column.filter === filter$$1.value;
                }
            }
        }
        return isActive;
    };
    /**
     * @name onSortChange
     * @param newSortColumn
     */
    /**
     * \@name onSortChange
     * @param {?} column
     * @return {?}
     */
    NovoTableElement.prototype.onSortChange = /**
     * \@name onSortChange
     * @param {?} column
     * @return {?}
     */
    function (column) {
        var _this = this;
        var e_2, _a;
        this.currentSortColumn = column;
        /** @type {?} */
        var sortedColumns = this.columns.filter(function (thisColumn) {
            return thisColumn.sort && thisColumn !== _this.currentSortColumn;
        });
        try {
            for (var sortedColumns_1 = __values(sortedColumns), sortedColumns_1_1 = sortedColumns_1.next(); !sortedColumns_1_1.done; sortedColumns_1_1 = sortedColumns_1.next()) {
                var sortedColumn = sortedColumns_1_1.value;
                sortedColumn.sort = null;
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (sortedColumns_1_1 && !sortedColumns_1_1.done && (_a = sortedColumns_1.return)) _a.call(sortedColumns_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        if (column) {
            if (Helpers.isFunction(this.config.sorting)) {
                this.config.sorting();
            }
            else if (Helpers.isFunction(column.preSort)) {
                this._dataProvider.sort = [].concat(column.preSort(column));
            }
            else {
                this._dataProvider.sort = [{ field: column.compare || column.name, reverse: column.sort === 'desc' }];
            }
        }
        // Fire table change event
        // this.fireTableChangeEvent();
        // If paging, reset page
        if (this.config.paging) {
            this.config.paging.current = 1;
        }
        // Remove all selection on sort change if selection is on
        if (this.config.rowSelectionStyle === 'checkbox') {
            this.selectAll(false);
        }
    };
    /**
     * @name fireTableChangeEvent
     */
    /**
     * \@name fireTableChangeEvent
     * @return {?}
     */
    NovoTableElement.prototype.fireTableChangeEvent = /**
     * \@name fireTableChangeEvent
     * @return {?}
     */
    function () {
        // Construct a table change object
        /** @type {?} */
        var onTableChange = {};
        /** @type {?} */
        var filters = this.columns.filter(function (col) { return col.filter && col.filter.length; });
        onTableChange.filter = filters.length ? filters : false;
        onTableChange.sort = this.currentSortColumn ? this.currentSortColumn : false;
        onTableChange.rows = this.rows;
        // Emit event
        this.onTableChange.emit(onTableChange);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoTableElement.prototype.findColumnIndex = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        for (var i = 0; i < this.columns.length; i += 1) {
            if (this.columns[i].name === value) {
                return i;
            }
        }
        return null;
    };
    /**
     * @name onOrderChange
     * @param event
     */
    /**
     * \@name onOrderChange
     * @param {?} event
     * @return {?}
     */
    NovoTableElement.prototype.onOrderChange = /**
     * \@name onOrderChange
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var oldIndex = this.findColumnIndex(event.first.name);
        /** @type {?} */
        var newIndex = this.findColumnIndex(event.second.name);
        this.columns.splice(newIndex, 0, this.columns.splice(oldIndex, 1)[0]);
        this.onSortChange(this.currentSortColumn);
    };
    /**
     * @name selectPage
     */
    /**
     * \@name selectPage
     * @param {?} expanded
     * @return {?}
     */
    NovoTableElement.prototype.expandAllOnPage = /**
     * \@name selectPage
     * @param {?} expanded
     * @return {?}
     */
    function (expanded) {
        var e_3, _a;
        this.config.expandAll = !expanded;
        try {
            for (var _b = __values(this.dataProvider.list), _c = _b.next(); !_c.done; _c = _b.next()) {
                var row = _c.value;
                row._expanded = this.config.expandAll;
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
    };
    /**
     * @name selectPage
     */
    /**
     * \@name selectPage
     * @param {?=} data
     * @return {?}
     */
    NovoTableElement.prototype.selectPage = /**
     * \@name selectPage
     * @param {?=} data
     * @return {?}
     */
    function (data) {
        var e_4, _a;
        if (!this.master) {
            this.selectAll(false);
            // Only show the select all message when there is only one new page selected at a time
            this.selectedPageCount = this.selectedPageCount > 0 ? this.selectedPageCount - 1 : 0;
            this.showSelectAllMessage = false;
        }
        else {
            this.indeterminate = false;
            try {
                // this.pagedData = this.rows.slice(this.getPageStart(), this.getPageEnd());
                for (var _b = __values(this.pagedData), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var row = _c.value;
                    row._selected = this.master;
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_4) throw e_4.error; }
            }
            this.selected = this.dataProvider.list.filter(function (r) { return r._selected; });
            this.pageSelected = this.pagedData.filter(function (r) { return r._selected; });
            this.emitSelected(this.selected);
            // Only show the select all message when there is only one new page selected at a time
            this.selectedPageCount++;
            this.showSelectAllMessage = this.selectedPageCount === 1 && this.selected.length !== this.dataProvider.total;
        }
    };
    /**
     * @name selectAll
     */
    /**
     * \@name selectAll
     * @param {?} value
     * @return {?}
     */
    NovoTableElement.prototype.selectAll = /**
     * \@name selectAll
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var e_5, _a;
        this.master = value;
        this.indeterminate = false;
        try {
            for (var _b = __values(this.dataProvider.list), _c = _b.next(); !_c.done; _c = _b.next()) {
                var row = _c.value;
                row._selected = value;
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_5) throw e_5.error; }
        }
        this.selected = value ? this.dataProvider.list : [];
        this.showSelectAllMessage = false;
        this.selectedPageCount = this.selectedPageCount > 0 ? this.selectedPageCount - 1 : 0;
        this.rowSelectHandler();
    };
    /**
     * @name rowSelectHandler
     */
    /**
     * \@name rowSelectHandler
     * @param {?=} data
     * @return {?}
     */
    NovoTableElement.prototype.rowSelectHandler = /**
     * \@name rowSelectHandler
     * @param {?=} data
     * @return {?}
     */
    function (data) {
        // this.pagedData = this.rows.slice(this.getPageStart(), this.getPageEnd());
        this.pageSelected = this.pagedData.filter(function (r) { return r._selected; });
        this.selected = this.dataProvider.list.filter(function (r) { return r._selected; });
        if (this.pageSelected.length === 0) {
            this.master = false;
            this.indeterminate = false;
        }
        else if (this.pageSelected.length === this.pagedData.length) {
            this.master = true;
            this.indeterminate = false;
        }
        else {
            this.master = false;
            this.indeterminate = true;
            // Breaking the selected page count
            this.showSelectAllMessage = false;
            this.selectedPageCount = this.selectedPageCount > 0 ? this.selectedPageCount - 1 : 0;
        }
        this.emitSelected(this.selected);
    };
    /**
     * @name emitSelected
     * @param selected
     */
    /**
     * \@name emitSelected
     * @param {?} selected
     * @return {?}
     */
    NovoTableElement.prototype.emitSelected = /**
     * \@name emitSelected
     * @param {?} selected
     * @return {?}
     */
    function (selected) {
        this.onRowSelect.emit({ length: selected.length, selected: selected });
    };
    /**
     * @name rowClickHandler
     * @param row
     */
    /**
     * \@name rowClickHandler
     * @param {?} row
     * @return {?}
     */
    NovoTableElement.prototype.rowClickHandler = /**
     * \@name rowClickHandler
     * @param {?} row
     * @return {?}
     */
    function (row) {
        if (this.config.rowSelect) {
            this.activeId = row.id || 0;
            this.onRowClick.emit(row);
        }
    };
    /**
     * @param {?} column
     * @return {?}
     */
    NovoTableElement.prototype.getDefaultOptions = /**
     * @param {?} column
     * @return {?}
     */
    function (column) {
        // TODO - needs to come from label service - https://github.com/bullhorn/novo-elements/issues/116
        /** @type {?} */
        var opts = [
            { label: this.labels.past1Day, min: -1, max: 0 },
            { label: this.labels.past7Days, min: -7, max: 0 },
            { label: this.labels.past30Days, min: -30, max: 0 },
            { label: this.labels.past90Days, min: -90, max: 0 },
            { label: this.labels.past1Year, min: -366, max: 0 },
            { label: this.labels.next1Day, min: 0, max: 1 },
            { label: this.labels.next7Days, min: 0, max: 7 },
            { label: this.labels.next30Days, min: 0, max: 30 },
            { label: this.labels.next90Days, min: 0, max: 90 },
            { label: this.labels.next1Year, min: 0, max: 366 },
        ];
        if (column && column.range) {
            opts.push({
                label: this.labels.customDateRange,
                range: true,
            });
        }
        return opts;
    };
    /**
     * @param {?} column
     * @param {?} event
     * @return {?}
     */
    NovoTableElement.prototype.onCalenderSelect = /**
     * @param {?} column
     * @param {?} event
     * @return {?}
     */
    function (column, event) {
        var _this = this;
        setTimeout(function () {
            if (event.startDate && event.endDate) {
                _this.onFilterChange();
            }
        }, 10);
    };
    /**
     * @param {?} config
     * @return {?}
     */
    NovoTableElement.prototype.onFilterKeywords = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        if (config && config.filtering && config.filtering.freetextFilter) {
            /** @type {?} */
            var filterKeywords_1 = config.filtering.freetextFilter.toLowerCase();
            if (!config.filtering.originalOptions) {
                config.filtering.originalOptions = config.filtering.options;
            }
            /** @type {?} */
            var newOptions = config.filtering.originalOptions.filter(function (option) {
                /** @type {?} */
                var value = option && option.label ? option.label : option;
                value = value.toLowerCase() ? value.toLowerCase() : value;
                if (value === filterKeywords_1) {
                    return true;
                }
                else if (~value.indexOf(filterKeywords_1) || ~value.indexOf(filterKeywords_1)) {
                    return true;
                }
                return false;
            });
            config.filtering.options = newOptions;
            config.filtering.filter = config.filtering.freetextFilter;
        }
        else {
            config.filtering.options = config.filtering.originalOptions;
        }
        this.onFilterChange();
    };
    /**
     * @name setTableEdit
     * @description Sets the Table into EDIT mode, based on the row/column passed you can enter in a few states
     * (1) setTableEdit() - don't pass any to put the FULL table into edit mode
     * (2) setTableEdit(1) - pass only row to put that FULL row of the table into edit mode
     * (3) setTableEdit(1, 1) - pass row and column to put that column of the row of the table into edit mode
     * @param [rowNumber]
     * @param [columnNumber]
     * @memberOf NovoTableElement
     */
    /**
     * \@name setTableEdit
     * \@description Sets the Table into EDIT mode, based on the row/column passed you can enter in a few states
     * (1) setTableEdit() - don't pass any to put the FULL table into edit mode
     * (2) setTableEdit(1) - pass only row to put that FULL row of the table into edit mode
     * (3) setTableEdit(1, 1) - pass row and column to put that column of the row of the table into edit mode
     * \@memberOf NovoTableElement
     * @param {?=} rowNumber
     * @param {?=} columnNumber
     * @return {?}
     */
    NovoTableElement.prototype.setTableEdit = /**
     * \@name setTableEdit
     * \@description Sets the Table into EDIT mode, based on the row/column passed you can enter in a few states
     * (1) setTableEdit() - don't pass any to put the FULL table into edit mode
     * (2) setTableEdit(1) - pass only row to put that FULL row of the table into edit mode
     * (3) setTableEdit(1, 1) - pass row and column to put that column of the row of the table into edit mode
     * \@memberOf NovoTableElement
     * @param {?=} rowNumber
     * @param {?=} columnNumber
     * @return {?}
     */
    function (rowNumber, columnNumber) {
        var _this = this;
        this.mode = NovoTableMode.EDIT;
        this._dataProvider.edit();
        this._rows.forEach(function (row, rowIndex) {
            row._editing = row._editing || {};
            _this.columns.forEach(function (column, columnIndex) {
                if (column.viewOnly) {
                    row._editing[column.name] = false;
                }
                else if (Helpers.isEmpty(rowNumber) && Helpers.isEmpty(columnNumber)) {
                    row._editing[column.name] = true;
                }
                else if (!Helpers.isEmpty(rowNumber) && rowIndex === Number(rowNumber) && Helpers.isEmpty(columnNumber)) {
                    row._editing[column.name] = true;
                }
                else if (!Helpers.isEmpty(rowNumber) &&
                    !Helpers.isEmpty(columnNumber) &&
                    rowIndex === Number(rowNumber) &&
                    columnIndex === Number(columnNumber)) {
                    row._editing[column.name] = true;
                }
                else {
                    row._editing[column.name] = false;
                }
            });
        });
    };
    /**
     * @name leaveEditMode
     * @description Leaves edit mode for the Table and puts everything back to VIEW only
     * @memberOf NovoTableElement
     * @param cancel - whether or not to save data or undo
     */
    /**
     * \@name leaveEditMode
     * \@description Leaves edit mode for the Table and puts everything back to VIEW only
     * \@memberOf NovoTableElement
     * @private
     * @param {?} cancel - whether or not to save data or undo
     * @return {?}
     */
    NovoTableElement.prototype.leaveEditMode = /**
     * \@name leaveEditMode
     * \@description Leaves edit mode for the Table and puts everything back to VIEW only
     * \@memberOf NovoTableElement
     * @private
     * @param {?} cancel - whether or not to save data or undo
     * @return {?}
     */
    function (cancel) {
        var _this = this;
        this.mode = NovoTableMode.VIEW;
        this._rows.forEach(function (row) {
            row._editing = row._editing || {};
            _this.columns.forEach(function (column) {
                row._editing[column.name] = false;
            });
        });
        if (cancel) {
            this._dataProvider.undo();
        }
        else {
            this._dataProvider.commit();
        }
        this.hideToastMessage();
    };
    /**
     * @name addEditableRow
     * @description Adds a new row into the table to be edited, can be called from a local reference of the table in your template
     * @param defaultValue
     * @memberOf NovoTableElement
     */
    /**
     * \@name addEditableRow
     * \@description Adds a new row into the table to be edited, can be called from a local reference of the table in your template
     * \@memberOf NovoTableElement
     * @param {?=} defaultValue
     * @return {?}
     */
    NovoTableElement.prototype.addEditableRow = /**
     * \@name addEditableRow
     * \@description Adds a new row into the table to be edited, can be called from a local reference of the table in your template
     * \@memberOf NovoTableElement
     * @param {?=} defaultValue
     * @return {?}
     */
    function (defaultValue) {
        if (defaultValue === void 0) { defaultValue = {}; }
        /** @type {?} */
        var tableFormRows = (/** @type {?} */ (this.tableForm.controls['rows']));
        /** @type {?} */
        var row = {};
        /** @type {?} */
        var rowControls = [];
        row.controls = {};
        row._editing = {};
        row.rowId = this._rows.length + 1;
        this.columns.forEach(function (column) {
            // Use the control passed or use a ReadOnlyControl so that the form has the values
            /** @type {?} */
            var control = column.editorConfig
                ? ControlFactory.create(column.editorType, column.editorConfig)
                : new ReadOnlyControl({ key: column.name });
            control.value = null; // remove copied column value
            row.controls[column.name] = control;
            row._editing[column.name] = !column.viewOnly;
            rowControls.push(control);
        });
        this.formUtils.setInitialValues(rowControls, defaultValue, false);
        tableFormRows.push(this.formUtils.toFormGroup(rowControls));
        this._rows.push(row);
    };
    /**
     * @name validateAndGetUpdatedData
     * @description Validates the Form inside of the Table, if there are errors it will display/return the errors for each row.
     * If there are no errors, then it will return ONLY the changed data for each row, the data returned will be in the form:
     * { id: ID_OF_RECORD, key: value } -- data that was updated
     * { id: undefined, key: value } -- data that was added
     * @memberOf NovoTableElement
     */
    /**
     * \@name validateAndGetUpdatedData
     * \@description Validates the Form inside of the Table, if there are errors it will display/return the errors for each row.
     * If there are no errors, then it will return ONLY the changed data for each row, the data returned will be in the form:
     * { id: ID_OF_RECORD, key: value } -- data that was updated
     * { id: undefined, key: value } -- data that was added
     * \@memberOf NovoTableElement
     * @return {?}
     */
    NovoTableElement.prototype.validateAndGetUpdatedData = /**
     * \@name validateAndGetUpdatedData
     * \@description Validates the Form inside of the Table, if there are errors it will display/return the errors for each row.
     * If there are no errors, then it will return ONLY the changed data for each row, the data returned will be in the form:
     * { id: ID_OF_RECORD, key: value } -- data that was updated
     * { id: undefined, key: value } -- data that was added
     * \@memberOf NovoTableElement
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.tableForm && this.tableForm.controls && this.tableForm.controls['rows']) {
            /** @type {?} */
            var changedRows_1 = [];
            /** @type {?} */
            var errors_1 = [];
            // Go over the FormArray's controls
            ((/** @type {?} */ (this.tableForm.controls['rows']))).controls.forEach(function (formGroup, index) {
                /** @type {?} */
                var changedRow = null;
                /** @type {?} */
                var error = null;
                // Go over the form group controls
                Object.keys(formGroup.controls).forEach(function (key) {
                    /** @type {?} */
                    var control = formGroup.controls[key];
                    // Handle value changing
                    if (control && control.dirty && !control.errors) {
                        if (!changedRow) {
                            // Append the ID, so we have some key to save against
                            changedRow = {};
                            if (_this._rows[index].id) {
                                changedRow.id = _this._rows[index].id;
                            }
                        }
                        // If dirty, grab value off the form
                        changedRow[key] = _this.tableForm.value['rows'][index][key];
                        // Set value back to row (should be already done via the server call, but do it anyway)
                        _this._rows[index][key] = changedRow[key];
                    }
                    else if (control && control.errors) {
                        // Handle errors
                        if (!error) {
                            error = {};
                        }
                        error[key] = control.errors;
                        control.markAsDirty();
                        control.markAsTouched();
                    }
                });
                if (changedRow) {
                    changedRows_1.push(changedRow);
                }
                if (error) {
                    errors_1.push({ errors: error, row: _this._rows[index], index: index });
                }
            });
            // Return errors if any, otherwise return the changed rows
            if (errors_1.length === 0) {
                return { changed: changedRows_1 };
            }
            return { errors: errors_1 };
        }
    };
    /**
     * @name cancelEditing
     * @description Refresh the data provider and leave edit mode
     * @memberOf NovoTableElement
     */
    /**
     * \@name cancelEditing
     * \@description Refresh the data provider and leave edit mode
     * \@memberOf NovoTableElement
     * @return {?}
     */
    NovoTableElement.prototype.cancelEditing = /**
     * \@name cancelEditing
     * \@description Refresh the data provider and leave edit mode
     * \@memberOf NovoTableElement
     * @return {?}
     */
    function () {
        this.leaveEditMode(true);
    };
    /**
     * @name saveChanges
     * @description Refresh the data provider and leave edit mode
     * @memberOf NovoTableElement
     */
    /**
     * \@name saveChanges
     * \@description Refresh the data provider and leave edit mode
     * \@memberOf NovoTableElement
     * @return {?}
     */
    NovoTableElement.prototype.saveChanges = /**
     * \@name saveChanges
     * \@description Refresh the data provider and leave edit mode
     * \@memberOf NovoTableElement
     * @return {?}
     */
    function () {
        this.leaveEditMode(false);
    };
    /**
     * @name displayToastMessage
     * @description Displays a toast message inside of the table
     * @param toast
     * @param hideDelay
     * @memberOf NovoTableElement
     */
    /**
     * \@name displayToastMessage
     * \@description Displays a toast message inside of the table
     * \@memberOf NovoTableElement
     * @param {?} toast
     * @param {?=} hideDelay
     * @return {?}
     */
    NovoTableElement.prototype.displayToastMessage = /**
     * \@name displayToastMessage
     * \@description Displays a toast message inside of the table
     * \@memberOf NovoTableElement
     * @param {?} toast
     * @param {?=} hideDelay
     * @return {?}
     */
    function (toast, hideDelay) {
        var _this = this;
        this.loading = false;
        this.toast = toast;
        if (hideDelay) {
            setTimeout(function () { return _this.hideToastMessage(); }, hideDelay);
        }
    };
    /**
     * @name hideToastMessage
     * @description Force hide the toast message
     * @memberOf NovoTableElement
     */
    /**
     * \@name hideToastMessage
     * \@description Force hide the toast message
     * \@memberOf NovoTableElement
     * @return {?}
     */
    NovoTableElement.prototype.hideToastMessage = /**
     * \@name hideToastMessage
     * \@description Force hide the toast message
     * \@memberOf NovoTableElement
     * @return {?}
     */
    function () {
        var _this = this;
        this.toast = null;
        // Hack to make the table display properly after hiding the toast
        this.grossFlagToAvoidTheTableFromBeingUglyWhenHidingTheToast = true;
        setTimeout(function () {
            _this.grossFlagToAvoidTheTableFromBeingUglyWhenHidingTheToast = false;
        });
    };
    /**
     * @name toggleLoading
     * @description display the loading overlay on the table
     * @param show
     * @memberOf NovoTableElement
     */
    /**
     * \@name toggleLoading
     * \@description display the loading overlay on the table
     * \@memberOf NovoTableElement
     * @param {?} show
     * @return {?}
     */
    NovoTableElement.prototype.toggleLoading = /**
     * \@name toggleLoading
     * \@description display the loading overlay on the table
     * \@memberOf NovoTableElement
     * @param {?} show
     * @return {?}
     */
    function (show) {
        this.loading = show;
    };
    /**
     * @name isColumnHidden
     * @description hide a column in edit or view mode
     * @param  column
     * @memberOf NovoTableElement
     */
    /**
     * \@name isColumnHidden
     * \@description hide a column in edit or view mode
     * \@memberOf NovoTableElement
     * @param {?} column
     * @return {?}
     */
    NovoTableElement.prototype.isColumnHidden = /**
     * \@name isColumnHidden
     * \@description hide a column in edit or view mode
     * \@memberOf NovoTableElement
     * @param {?} column
     * @return {?}
     */
    function (column) {
        return this.editing ? !!column.hideColumnOnEdit : !!column.hideColumnOnView;
    };
    NovoTableElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-table',
                    host: {
                        '[attr.theme]': 'theme',
                        '[class.editing]': 'mode === NovoTableMode.EDIT',
                        '[class.novo-table-loading]': 'loading',
                    },
                    // directives: [],
                    template: "\n        <header *ngIf=\"columns.length\">\n            <ng-content select=\"novo-table-header\"></ng-content>\n            <div class=\"header-actions\">\n                <novo-pagination *ngIf=\"config.paging && !(dataProvider.isEmpty() && !dataProvider.isFiltered())\"\n                                 [rowOptions]=\"config.paging.rowOptions\"\n                                 [disablePageSelection]=\"config.paging.disablePageSelection\"\n                                 [(page)]=\"dataProvider.page\"\n                                 [(itemsPerPage)]=\"dataProvider.pageSize\"\n                                 [totalItems]=\"dataProvider.total\"\n                                 (onPageChange)=\"onPageChange($event)\">\n                </novo-pagination>\n                <ng-content select=\"novo-table-actions\"></ng-content>\n            </div>\n        </header>\n        <div class=\"novo-table-loading-overlay\" *ngIf=\"loading || dataProvider.isLoading()\">\n            <novo-loading></novo-loading>\n        </div>\n        <novo-toast *ngIf=\"toast\" [theme]=\"toast?.theme\" [icon]=\"toast?.icon\" [message]=\"toast?.message\"></novo-toast>\n        <div class=\"table-container\" *ngIf=\"!grossFlagToAvoidTheTableFromBeingUglyWhenHidingTheToast\">\n            <novo-form hideHeader=\"true\" [form]=\"tableForm\">\n                <table class=\"table table-striped dataTable\" [class.table-details]=\"config.hasDetails\" role=\"grid\">\n                <!-- skipSortAndFilterClear is a hack right now, will be removed once Canvas is refactored -->\n                <thead *ngIf=\"columns.length && (!dataProvider.isEmpty() || dataProvider.isFiltered() || skipSortAndFilterClear || editing)\">\n                    <tr role=\"row\">\n                        <!-- DETAILS -->\n                        <th class=\"row-actions\" *ngIf=\"config.hasDetails\">\n                            <button theme=\"icon\" icon=\"next\" (click)=\"expandAllOnPage(config.expandAll)\" *ngIf=\"!config.expandAll\" data-automation-id=\"expand-all\"></button>\n                            <button theme=\"icon\" icon=\"sort-desc\" (click)=\"expandAllOnPage(config.expandAll)\" *ngIf=\"config.expandAll\" data-automation-id=\"collapse-all\"></button>\n                        </th>\n                        <!-- CHECKBOX -->\n                        <th class=\"row-actions checkbox mass-action\" *ngIf=\"config.rowSelectionStyle === 'checkbox'\">\n                            <novo-checkbox [(ngModel)]=\"master\" [indeterminate]=\"pageSelected.length > 0 && pageSelected.length < pagedData.length\" (ngModelChange)=\"selectPage($event)\" data-automation-id=\"select-all-checkbox\" [tooltip]=\"master ? labels.deselectAll : labels.selectAllOnPage\" tooltipPosition=\"right\"></novo-checkbox>\n                        </th>\n                        <!-- TABLE HEADERS -->\n                        <th *ngFor=\"let column of columns\" [ngClass]=\"{ 'mass-action': config?.rowSelectionStyle === 'checkbox', 'actions': column?.actions?.items?.length > 0, 'preview': column?.name === 'preview' }\" [novoThOrderable]=\"column\" (onOrderChange)=\"onOrderChange($event)\" [hidden]=\"isColumnHidden(column)\">\n                            <div class=\"th-group\" [attr.data-automation-id]=\"column.id || column.name\" *ngIf=\"!column.hideHeader\">\n                                <!-- LABEL & SORT ARROWS -->\n                                <div class=\"th-title\" [ngClass]=\"(config.sorting !== false && column.sorting !== false) ? 'sortable' : ''\" [novoThSortable]=\"config\" [column]=\"column\" (onSortChange)=\"onSortChange($event)\">\n                                    <label>{{ column.title || column.label }}</label>\n                                    <div class=\"table-sort-icons\" tooltipPosition=\"bottom\" [tooltip]=\"labels.sort\" [ngClass]=\"column.sort || ''\" *ngIf=\"config.sorting !== false && column.sorting !== false\">\n                                        <i class=\"bhi-arrow-up\"></i>\n                                        <i class=\"bhi-arrow-down\"></i>\n                                    </div>\n                                </div>\n                                <!-- FILTER DROP-DOWN -->\n                                <novo-dropdown side=\"right\" *ngIf=\"config.filtering !== false && column.filtering !== false\" class=\"column-filters\" (toggled)=\"onDropdownToggled($event, column.name)\" parentScrollSelector=\".table-container\" containerClass=\"table-dropdown\">\n                                    <button type=\"button\" theme=\"icon\" icon=\"filter\" tooltipPosition=\"bottom\" [tooltip]=\"labels.filters\" [class.filtered]=\"column.filter || column.filter===false\" (click)=\"focusInput()\"></button>\n                                    <!-- FILTER OPTIONS LIST -->\n                                    <list *ngIf=\"(column?.options?.length || column?.originalOptions?.length) && column?.type !== 'date' && toggledDropdownMap[column.name]\">\n                                        <item class=\"filter-search\">\n                                            <div class=\"header\">\n                                                <span>{{ labels.filters }}</span>\n                                                <button theme=\"dialogue\" color=\"negative\" icon=\"times\" (click)=\"onFilterClear(column)\" *ngIf=\"column.filter || column.filter===false\">{{ labels.clear }}</button>\n                                            </div>\n                                            <input type=\"text\" *ngIf=\"!!column.allowCustomTextOption\" [attr.id]=\"column.name + '-input'\" [novoTableFilter]=\"column\" (onFilterChange)=\"onFilterKeywords($event)\" [(ngModel)]=\"column.freetextFilter\" keepFilterFocused #filterInput/>\n                                        </item>\n                                        <item [ngClass]=\"{ active: isFilterActive(column, option) }\" *ngFor=\"let option of column.options\" (click)=\"onFilterClick(column, option)\" [attr.data-automation-id]=\"getOptionDataAutomationId(option)\">\n                                            <span>{{ option?.label || option }}</span> <i class=\"bhi-check\" *ngIf=\"isFilterActive(column, option)\"></i>\n                                        </item>\n                                    </list>\n                                    <!-- FILTER SEARCH INPUT -->\n                                    <list *ngIf=\"!(column?.options?.length || column?.originalOptions?.length) && toggledDropdownMap[column.name]\">\n                                        <item class=\"filter-search\">\n                                            <div class=\"header\">\n                                                <span>{{ labels.filters }}</span>\n                                                <button theme=\"dialogue\" color=\"negative\" icon=\"times\" (click)=\"onFilterClear(column)\" *ngIf=\"column.filter\">{{ labels.clear }}</button>\n                                            </div>\n                                            <input type=\"text\" [attr.id]=\"column.name + '-input'\" [novoTableFilter]=\"column\" (onFilterChange)=\"onFilterChange($event)\" [(ngModel)]=\"column.filter\" keepFilterFocused #filterInput/>\n                                        </item>\n                                    </list>\n                                    <!-- FILTER DATE OPTIONS -->\n                                    <list *ngIf=\"column?.options?.length && column?.type === 'date' && toggledDropdownMap[column.name]\">\n                                        <item class=\"filter-search\" *ngIf=\"!column.calenderShow\">\n                                            <div class=\"header\">\n                                                <span>{{ labels.filters }}</span>\n                                                <button theme=\"dialogue\" color=\"negative\" icon=\"times\" (click)=\"onFilterClear(column)\" *ngIf=\"column.filter\">{{ labels.clear }}</button>\n                                            </div>\n                                        </item>\n                                        <item [ngClass]=\"{ active: isFilterActive(column, option) }\" *ngFor=\"let option of column.options\" (click)=\"onFilterClick(column, option)\" [keepOpen]=\"option.range\" [hidden]=\"column.calenderShow\" [attr.data-automation-id]=\"(option?.label || option)\">\n                                            {{ option?.label || option }} <i class=\"bhi-check\" *ngIf=\"isFilterActive(column, option)\"></i>\n                                        </item>\n                                        <div class=\"calendar-container\" [hidden]=\"!column.calenderShow\">\n                                            <div (click)=\"column.calenderShow=false\"><i class=\"bhi-previous\"></i>{{ labels.backToPresetFilters }}</div>\n                                            <novo-date-picker #rangePicker (onSelect)=\"onCalenderSelect(column, $event)\" [(ngModel)]=\"column.filter\" range=\"true\"></novo-date-picker>\n                                        </div>\n                                    </list>\n                                </novo-dropdown>\n                            </div>\n                        </th>\n                    </tr>\n                </thead>\n                <!-- TABLE DATA -->\n                <tbody *ngIf=\"!dataProvider.isEmpty() || editing\">\n                    <tr class=\"table-selection-row\" *ngIf=\"config.rowSelectionStyle === 'checkbox' && showSelectAllMessage && config.selectAllEnabled\" data-automation-id=\"table-selection-row\">\n                        <td colspan=\"100%\">\n                            {{labels.selectedRecords(selected.length)}} <a (click)=\"selectAll(true)\" data-automation-id=\"all-matching-records\">{{labels.totalRecords(dataProvider.total)}}</a>\n                        </td>\n                    </tr>\n                    <ng-template ngFor let-row=\"$implicit\" let-i=\"index\" [ngForOf]=\"rows\">\n                        <tr class=\"table-row\" [ngClass]=\"row.customClass || ''\" [id]=\"name + '-' + row[rowIdentifier]\" [attr.data-automation-id]=\"row.id\" (click)=\"rowClickHandler(row)\" [class.active]=\"row.id === activeId\">\n                            <td class=\"row-actions\" *ngIf=\"config.hasDetails\">\n                                <button theme=\"icon\" icon=\"next\" (click)=\"row._expanded=!row._expanded\" *ngIf=\"!row._expanded\"></button>\n                                <button theme=\"icon\" icon=\"sort-desc\" (click)=\"row._expanded=!row._expanded\" *ngIf=\"row._expanded\"></button>\n                            </td>\n                            <td class=\"row-actions checkbox\" *ngIf=\"config.rowSelectionStyle === 'checkbox'\">\n                                <novo-checkbox [(ngModel)]=\"row._selected\" (ngModelChange)=\"rowSelectHandler(row)\" data-automation-id=\"select-row-checkbox\"></novo-checkbox>\n                            </td>\n                            <td *ngFor=\"let column of columns\" [attr.data-automation-id]=\"column.id || column.name\" [class.novo-form-row]=\"editable\" [hidden]=\"isColumnHidden(column)\">\n                                <novo-table-cell *ngIf=\"row._editing && !row._editing[column.name]\" [hasEditor]=\"editable\" [column]=\"column\" [row]=\"row\" [form]=\"getRowControlForm(i)\"></novo-table-cell>\n                                <novo-control *ngIf=\"row._editing && row._editing[column.name]\" condensed=\"true\" [form]=\"getRowControlForm(i)\" [control]=\"row.controls[column.name]\"></novo-control>\n                            </td>\n                        </tr>\n                        <tr class=\"details-row\" *ngIf=\"config.hasDetails\" [hidden]=\"!row._expanded\" [attr.data-automation-id]=\"'details-row-'+row.id\">\n                            <td class=\"row-actions\"></td>\n                            <td [attr.colspan]=\"config.rowSelectionStyle === 'checkbox' ? (columns.length + 1) : columns.length\">\n                                <novo-row-details [data]=\"row\" [renderer]=\"config.detailsRenderer\"></novo-row-details>\n                            </td>\n                        </tr>\n                    </ng-template>\n                </tbody>\n                <!-- NO TABLE DATA PLACEHOLDER -->\n                <tbody class=\"table-message\" *ngIf=\"dataProvider.isEmpty() && !dataProvider.isFiltered() && !editing\" data-automation-id=\"empty-table\">\n                    <tr>\n                        <td colspan=\"100%\">\n                            <div #emptymessage><ng-content select=\"[table-empty-message]\"></ng-content></div>\n                            <div class=\"table-empty-message\" *ngIf=\"emptymessage.childNodes.length == 0\">\n                                <h4><i class=\"bhi-search-question\"></i> {{ labels.emptyTableMessage }}</h4>\n                            </div>\n                        </td>\n                    </tr>\n                </tbody>\n                <!-- NO MATCHING RECORDS -->\n                <tbody class=\"table-message\" *ngIf=\"dataProvider.isEmpty() && dataProvider.isFiltered()\" data-automation-id=\"empty-table\">\n                    <tr>\n                        <td colspan=\"100%\">\n                            <div #nomatchmessage><ng-content select=\"[table-no-matching-records-message]\"></ng-content></div>\n                            <div class=\"no-matching-records\" *ngIf=\"nomatchmessage.childNodes.length == 0\">\n                                <h4><i class=\"bhi-search-question\"></i> {{ labels.noMatchingRecordsMessage }}</h4>\n                            </div>\n                        </td>\n                    </tr>\n                </tbody>\n                <!-- TABLE DATA ERROR PLACEHOLDER -->\n                <tbody class=\"table-message\" *ngIf=\"dataProvider.hasErrors()\" data-automation-id=\"table-errors\">\n                    <tr>\n                        <td colspan=\"100%\">\n                            <div #errormessage><ng-content select=\"[table-error-message]\"></ng-content></div>\n                            <div class=\"table-error-message\" *ngIf=\"errormessage.childNodes.length == 0\">\n                                <h4><i class=\"bhi-caution\"></i> {{ labels.erroredTableMessage }}</h4>\n                            </div>\n                        </td>\n                    </tr>\n                </tbody>\n                <tfoot *ngIf=\"!config.footers\" [ngClass]=\"dataProvider.length % 2 == 0 ? 'odd' : 'even'\">\n                    <tr>\n                        <td colspan=\"100%\">\n                            <ng-content select=\"novo-table-footer\"></ng-content>\n                        </td>\n                    </tr>\n                </tfoot>\n                <tfoot *ngFor=\"let footer of footers;let i = index;\" class=\"novo-table-total-footer\">\n                    <tr>\n                        <td *ngFor=\"let column of columns\" [attr.data-automation-id]=\"(column.id || column.name) + '-total-' + i\">{{ footer[column.name] }}</td>\n                    </tr>\n                </tfoot>\n            </table>\n        </novo-form>\n    </div>\n    "
                }] }
    ];
    /** @nocollapse */
    NovoTableElement.ctorParameters = function () { return [
        { type: NovoLabelService },
        { type: FormUtils },
        { type: FormBuilder }
    ]; };
    NovoTableElement.propDecorators = {
        filterInputs: [{ type: ViewChildren, args: ['filterInput', { read: ElementRef },] }],
        config: [{ type: Input }],
        columns: [{ type: Input }],
        theme: [{ type: Input }],
        skipSortAndFilterClear: [{ type: Input }],
        mode: [{ type: Input }],
        editable: [{ type: Input }],
        rowIdentifier: [{ type: Input }],
        name: [{ type: Input }],
        onRowClick: [{ type: Output }],
        onRowSelect: [{ type: Output }],
        onTableChange: [{ type: Output }],
        rows: [{ type: Input }],
        dataProvider: [{ type: Input }]
    };
    return NovoTableElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoTableModule = /** @class */ (function () {
    function NovoTableModule() {
    }
    NovoTableModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        NovoFormModule,
                        NovoTableExtrasModule,
                        NovoToastModule,
                        NovoButtonModule,
                        NovoTooltipModule,
                        NovoDropdownModule,
                        NovoLoadingModule,
                        NovoDatePickerModule,
                        NovoFormExtrasModule,
                        TextMaskModule,
                    ],
                    declarations: [NovoTableElement],
                    exports: [NovoTableElement],
                },] }
    ];
    return NovoTableModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
var NOVO_VALUE_TYPE = {
    DEFAULT: 0,
    ENTITY_LIST: 1,
    LINK: 2,
    INTERNAL_LINK: 3,
};
NOVO_VALUE_TYPE[NOVO_VALUE_TYPE.DEFAULT] = 'DEFAULT';
NOVO_VALUE_TYPE[NOVO_VALUE_TYPE.ENTITY_LIST] = 'ENTITY_LIST';
NOVO_VALUE_TYPE[NOVO_VALUE_TYPE.LINK] = 'LINK';
NOVO_VALUE_TYPE[NOVO_VALUE_TYPE.INTERNAL_LINK] = 'INTERNAL_LINK';
/** @enum {number} */
var NOVO_VALUE_THEME = {
    DEFAULT: 0,
    MOBILE: 1,
};
NOVO_VALUE_THEME[NOVO_VALUE_THEME.DEFAULT] = 'DEFAULT';
NOVO_VALUE_THEME[NOVO_VALUE_THEME.MOBILE] = 'MOBILE';
var NovoValueElement = /** @class */ (function () {
    function NovoValueElement() {
        // TODO use interface
        this.meta = { type: 'SCALAR', label: '' }; // TODO use interface
        // TODO use interface
        this.theme = NOVO_VALUE_THEME.DEFAULT;
        this.NOVO_VALUE_TYPE = NOVO_VALUE_TYPE;
        this.NOVO_VALUE_THEME = NOVO_VALUE_THEME;
        this.customClass = '';
    }
    Object.defineProperty(NovoValueElement.prototype, "label", {
        get: /**
         * @return {?}
         */
        function () {
            return this.meta.label;
        },
        set: /**
         * @param {?} lbl
         * @return {?}
         */
        function (lbl) {
            this.meta.label = lbl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoValueElement.prototype, "type", {
        get: /**
         * @return {?}
         */
        function () {
            return this.meta.type;
        },
        set: /**
         * @param {?} typ
         * @return {?}
         */
        function (typ) {
            this.meta.type = typ;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoValueElement.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (Helpers.isEmpty(this.meta)) {
            this.meta = {
                label: '',
            };
        }
    };
    Object.defineProperty(NovoValueElement.prototype, "isMobile", {
        get: /**
         * @return {?}
         */
        function () {
            return this.theme === NOVO_VALUE_THEME.MOBILE;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} icon
     * @return {?}
     */
    NovoValueElement.prototype.iconClass = /**
     * @param {?} icon
     * @return {?}
     */
    function (icon) {
        /** @type {?} */
        var iconClass = '';
        if (icon && icon.iconCls) {
            iconClass = "bhi-" + icon.iconCls + " actions";
            if (icon.onIconClick) {
                iconClass = iconClass + " clickable";
            }
            return iconClass;
        }
        return iconClass;
    };
    Object.defineProperty(NovoValueElement.prototype, "isDefault", {
        get: /**
         * @return {?}
         */
        function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoValueElement.prototype, "showLabel", {
        get: /**
         * @return {?}
         */
        function () {
            return (this._type === NOVO_VALUE_TYPE.INTERNAL_LINK || this._type === NOVO_VALUE_TYPE.LINK || this._type === NOVO_VALUE_TYPE.ENTITY_LIST);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoValueElement.prototype, "showIcon", {
        get: /**
         * @return {?}
         */
        function () {
            return this.meta && this.meta.icons && this.meta.icons.length && !Helpers.isEmpty(this.data);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} icon
     * @return {?}
     */
    NovoValueElement.prototype.onValueClick = /**
     * @param {?} icon
     * @return {?}
     */
    function (icon) {
        if (icon.onIconClick && typeof icon.onIconClick === 'function') {
            icon.onIconClick(this.data, this.meta);
        }
    };
    /**
     * @return {?}
     */
    NovoValueElement.prototype.openLink = /**
     * @return {?}
     */
    function () {
        if (this.meta && this.meta.openLink && typeof this.meta.openLink === 'function') {
            this.meta.openLink(this.data, this.meta);
        }
    };
    /**
     * @param {?=} changes
     * @return {?}
     */
    NovoValueElement.prototype.ngOnChanges = /**
     * @param {?=} changes
     * @return {?}
     */
    function (changes) {
        if (this.meta && this.isLinkField(this.meta, this.data)) {
            this._type = NOVO_VALUE_TYPE.LINK;
            // Make sure the value has a protocol, otherwise the URL will be relative
            /** @type {?} */
            var hasProtocol = new RegExp('^(http|https)://', 'i');
            if (!hasProtocol.test(this.data)) {
                this.url = "http://" + this.data;
            }
            else {
                this.url = this.data;
            }
        }
        else if (this.isEntityList(this.meta.type)) {
            this._type = NOVO_VALUE_TYPE.ENTITY_LIST;
        }
        else if (this.isHTMLField(this.meta)) {
            this.customClass = this.meta.customClass ? this.meta.customClass : '';
            if (this.meta.stripHTML && this.data && this.data.replace) {
                this.data = this.data.replace(/<(?!style|\/style).+?>/gi, '').trim();
            }
        }
        else if (this.meta && this.meta.associatedEntity) {
            switch (this.meta.associatedEntity.entity) {
                case 'ClientCorporation':
                case 'ClientContact':
                case 'Candidate':
                case 'Opportunity':
                case 'JobOrder':
                case 'Placement':
                case 'Lead':
                    this._type = NOVO_VALUE_TYPE.INTERNAL_LINK;
                    break;
                default:
                    break;
            }
        }
    };
    /**
     * @param {?} field
     * @param {?} data
     * @return {?}
     */
    NovoValueElement.prototype.isLinkField = /**
     * @param {?} field
     * @param {?} data
     * @return {?}
     */
    function (field, data) {
        /** @type {?} */
        var linkFields = ['companyURL', 'clientCorporationCompanyURL'];
        /** @type {?} */
        var regex = new RegExp('^(https?://(?:www.|(?!www))[^s.]+.[^s]{2,}|www.[^s]+.[^s]{2,})$', 'gi');
        /** @type {?} */
        var isURL = Helpers.isString(data) && regex.exec(data.trim());
        return linkFields.indexOf(field.name) > -1 || !!isURL || field.type === NOVO_VALUE_TYPE.LINK;
    };
    /**
     * @param {?} type
     * @return {?}
     */
    NovoValueElement.prototype.isEntityList = /**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        return type === 'TO_MANY';
    };
    /**
     * @param {?} meta
     * @return {?}
     */
    NovoValueElement.prototype.isHTMLField = /**
     * @param {?} meta
     * @return {?}
     */
    function (meta) {
        return meta.dataSpecialization === 'HTML' || meta.inputType === 'TEXTAREA';
    };
    NovoValueElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-value',
                    template: "\n      <ng-container [ngSwitch]=\"_type\">\n          <div class=\"value-outer\" *ngIf=\"showLabel\">\n              <label>{{ meta.label }}</label>\n              <span class=\"value\">\n                <i *ngIf=\"meta.showEntityIcon\" class=\"bhi-circle {{meta.entityIconClass}}\"></i>\n                <a *ngSwitchCase=\"NOVO_VALUE_TYPE.INTERNAL_LINK\" (click)=\"openLink()\" [innerHTML]=\"data | render : meta\"></a>\n                <a *ngSwitchCase=\"NOVO_VALUE_TYPE.LINK\" class=\"value\" [href]=\"url\" target=\"_blank\" [innerHTML]=\"data | render : meta\"></a>\n              </span>\n              <novo-entity-list *ngSwitchCase=\"NOVO_VALUE_TYPE.ENTITY_LIST\" [data]='data' [meta]=\"meta\"></novo-entity-list>\n          </div>\n          <div *ngSwitchDefault class=\"value-outer\" [ngClass]=\"customClass\">\n              <label>{{ meta.label }}</label>\n              <div *ngIf=\"isDefault\" class=\"value\" [innerHTML]=\"data | render : meta\"></div>\n          </div>\n          <div class=\"actions\" *ngIf=\"showIcon\">\n              <i *ngFor=\"let icon of meta.icons\" [class]=\"iconClass(icon)\" (click)=\"onValueClick(icon)\"></i>\n          </div>\n      </ng-container>\n    "
                }] }
    ];
    NovoValueElement.propDecorators = {
        data: [{ type: Input }],
        meta: [{ type: Input }],
        theme: [{ type: Input }],
        label: [{ type: Input }],
        type: [{ type: Input }],
        isMobile: [{ type: HostBinding, args: ['class.mobile',] }]
    };
    return NovoValueElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@classdesc
 * Renders data appropriately based on the data type found in Meta
 * All data types defined by bullhorn should be supported:
 *
 * - **String**: trims value and returns
 * - **Integer**: return value
 * - **Double**: return value fixed to 2 decimals
 * - **BigDecimal**: return value fixed to 2 decimals
 * - **Address**: only city and/or state returned
 * - **Address1**: only city and/or state returned
 * - **AddressWithoutCountry**: only city and/or state returned
 * - **Currency**: put a $ in front
 * - **Percentage**: divide by 100 fix to 2 decimals place and return
 * - **Options**: returns the appropriate 'label' for the 'value' from 'options'
 * - **Array**: returns list comma separated
 * - **DateTime**: formats the date
 * - **TimeStamp**: formats the date
 * - **ToOne**: return the entity specific name (ie. name, firstName lastName, title, ...)
 * - **ToMany**: return an array of the entity specific names (ie. name, firstName lastName, title, ...)
 *
 * \@example
 * ```
 * {{ expression | render:field }}
 * ```
 */
var RenderPipe = /** @class */ (function () {
    function RenderPipe(changeDetector, sanitizationService, labels) {
        this.changeDetector = changeDetector;
        this.sanitizationService = sanitizationService;
        this.labels = labels;
    }
    /**
     * @param {?} objectOne
     * @param {?} objectTwo
     * @return {?}
     */
    RenderPipe.prototype.equals = /**
     * @param {?} objectOne
     * @param {?} objectTwo
     * @return {?}
     */
    function (objectOne, objectTwo) {
        if (objectOne === objectTwo) {
            return true;
        }
        if (objectOne === null || objectTwo === null) {
            return false;
        }
        if (objectOne !== objectOne && objectTwo !== objectTwo) {
            return true;
        }
        /** @type {?} */
        var t1 = typeof objectOne;
        /** @type {?} */
        var t2 = typeof objectTwo;
        /** @type {?} */
        var length;
        /** @type {?} */
        var key;
        /** @type {?} */
        var keySet;
        if (t1 === t2 && t1 === 'object') {
            if (Array.isArray(objectOne)) {
                if (!Array.isArray(objectTwo)) {
                    return false;
                }
                length = objectOne.length;
                if (length === objectTwo.length) {
                    for (key = 0; key < length; key++) {
                        if (!this.equals(objectOne[key], objectTwo[key])) {
                            return false;
                        }
                    }
                    return true;
                }
            }
            else {
                if (Array.isArray(objectTwo)) {
                    return false;
                }
                keySet = Object.create(null);
                for (key in objectOne) {
                    if (objectOne[key]) {
                        if (!this.equals(objectOne[key], objectTwo[key])) {
                            return false;
                        }
                        keySet[key] = true;
                    }
                }
                for (key in objectTwo) {
                    if (!(key in keySet) && typeof objectTwo[key] !== 'undefined') {
                        return false;
                    }
                }
                return true;
            }
        }
        return false;
    };
    /**
     * @param {?} item
     * @param {?} entity
     * @return {?}
     */
    RenderPipe.prototype.getEntityLabel = /**
     * @param {?} item
     * @param {?} entity
     * @return {?}
     */
    function (item, entity) {
        switch (entity) {
            case 'CorporateUser':
            case 'ClientContact':
            case 'ClientContact1':
            case 'ClientContact2':
            case 'ClientContact3':
            case 'ClientContact4':
            case 'ClientContact5':
            case 'Lead':
            case 'Candidate':
            case 'Person':
                return ((item.firstName || '') + " " + (item.lastName || '')).trim();
            case 'ClientCorporation':
            case 'ClientCorporation1':
            case 'ClientCorporation2':
            case 'ClientCorporation3':
            case 'ClientCorporation4':
            case 'ClientCorporation5':
                return ("" + (item.name || '')).trim();
            case 'JobOrder':
            case 'JobOrder1':
            case 'JobOrder2':
            case 'JobOrder3':
            case 'JobOrder4':
            case 'JobOrder5':
            case 'Opportunity':
                return ("" + (item.title || '')).trim();
            case 'Placement':
                /** @type {?} */
                var label = '';
                if (item.candidate) {
                    label = (item.candidate.firstName + " " + item.candidate.lastName).trim();
                }
                if (item.jobOrder) {
                    label = (label + " - " + item.jobOrder.title).trim();
                }
                return label;
            default:
                return '';
        }
    };
    /**
     * Define the fields to set or retrieve for the given entity. Getter and Setter methods will automagically
     * be set up on the entity once the fields are defined.
     * @name fields
     * @memberOf Entity#
     * @param value
     * @param args - fields can either be sent as a list of arguments or as an Array
     * @return text
     */
    /**
     * Define the fields to set or retrieve for the given entity. Getter and Setter methods will automagically
     * be set up on the entity once the fields are defined.
     * \@name fields
     * \@memberOf Entity#
     * @param {?} value
     * @param {?} args - fields can either be sent as a list of arguments or as an Array
     * @return {?} text
     */
    RenderPipe.prototype.render = /**
     * Define the fields to set or retrieve for the given entity. Getter and Setter methods will automagically
     * be set up on the entity once the fields are defined.
     * \@name fields
     * \@memberOf Entity#
     * @param {?} value
     * @param {?} args - fields can either be sent as a list of arguments or as an Array
     * @return {?} text
     */
    function (value, args) {
        /** @type {?} */
        var type = null;
        /** @type {?} */
        var text = value;
        // Handle when we don't have meta, but passing an entity
        if (value && value._subtype && !args) {
            return this.getEntityLabel(value, value._subtype);
        }
        // Stop logic for nulls
        if (value === undefined || value === null || !args) {
            return text;
        }
        if (args.formatter && typeof args.formatter === 'function') {
            return args.formatter(value, args);
        }
        // TODO move this to a service
        // Determine TYPE because its not just 1 value that determines this.
        if (args.type === 'TO_MANY') {
            type = 'ToMany';
        }
        else if (args.type === 'TO_ONE') {
            type = args.associatedEntity.entity;
        }
        else if (args.dataSpecialization === 'DATETIME') {
            type = 'DateTime';
        }
        else if (args.dataSpecialization === 'YEAR') {
            type = 'Year';
        }
        else if (args.dataSpecialization === 'DATE' && args.dataType === 'Date') {
            type = 'Date';
        }
        else if (args.dataType === 'Timestamp') {
            type = 'Timestamp';
        }
        else if (['mobile', 'phone', 'phone1', 'phone2', 'phone3', 'workPhone'].indexOf(args.name) > -1) {
            type = 'Phone';
        }
        else if (args.name && args.name.substring(0, 5) === 'email') {
            type = 'Email';
        }
        else if ((args.name && args.name === 'address.countryID') || args.optionsType === 'Country') {
            type = 'Country';
        }
        else if (args.optionsType === 'SkillText') {
            type = 'SkillText';
        }
        else if (args.options || args.inputType === 'SELECT' || args.inputType === 'CHECKBOX') {
            type = 'Options';
        }
        else if (['MONEY', 'PERCENTAGE', 'HTML', 'SSN'].indexOf(args.dataSpecialization) > -1) {
            type = this.capitalize(args.dataSpecialization.toLowerCase());
        }
        else {
            type = args.dataType || 'default';
        }
        // Transform data here
        switch (type) {
            case 'Address':
            case 'Address1':
            case 'AddressWithoutCountry':
            case 'SecondaryAddress':
            case 'BillingAddress':
                /** @type {?} */
                var country = findByCountryId(Number(value.countryName));
                text = '';
                if (value.address1 || value.address2) {
                    text += (value.address1 || '') + " " + (value.address2 || '') + "<br />\n";
                }
                text += (value.city || '') + " " + (value.state || '') + " " + (value.zip || '') + (value.city || value.state || value.zip ? '<br />\n' : '');
                text += "" + (country ? country.name : value.countryName || '') + (country || value.countryName ? '<br />\n' : '');
                text = this.sanitizationService.bypassSecurityTrustHtml(text.trim());
                break;
            case 'DateTime':
            case 'Timestamp':
                text = this.labels.formatDateShort(value);
                break;
            case 'Date':
                text = this.labels.formatDate(new Date(value));
                break;
            case 'Year':
                text = new Date(value).getFullYear();
                break;
            case 'Phone':
            case 'Email':
                text = value;
                break;
            case 'Money':
                text = this.labels.formatCurrency(value);
                break;
            case 'Percentage':
                text = this.labels.formatNumber(parseFloat(value).toString(), { style: 'percent', minimumFractionDigits: 2 });
                break;
            case 'Double':
            case 'BigDecimal':
                text = this.labels.formatNumber(value, { minimumFractionDigits: this.getNumberDecimalPlaces(value) });
                break;
            case 'Integer':
                text = value;
                break;
            case 'BusinessSector':
            case 'Category':
            case 'Certification':
            case 'ClientCorporation':
            case 'CorporationDepartment':
            case 'DistributionList':
            case 'Skill':
            case 'Tearsheet':
            case 'Specialty':
                text = value.label || value.name || '';
                break;
            case 'SkillText':
                text = Array.isArray(value) ? value.join(', ') : value;
                break;
            case 'Lead':
            case 'Candidate':
            case 'ClientContact':
            case 'CorporateUser':
            case 'Person':
                text = value.label || (value.firstName || '') + " " + (value.lastName || '');
                break;
            case 'Opportunity':
            case 'JobOrder':
                text = value.label || value.title || '';
                break;
            case 'Placement':
                if (value.candidate) {
                    text = (value.candidate.firstName || '') + " " + (value.candidate.lastName || '');
                }
                if (value.jobOrder) {
                    text = value.candidate ? text + " - " + (value.jobOrder.title || '') : "" + (value.jobOrder.title || '');
                }
                break;
            case 'JobSubmission':
                text =
                    value.label ||
                        (value.jobOrder ? value.jobOrder.title + " - " : '') + " " + (value.candidate ? value.candidate.firstName : '') + " " + (value.candidate ? value.candidate.lastName : '');
                break;
            case 'WorkersCompensationRate':
                text = (value.compensation ? value.compensation.code + " - " : '') + " " + (value.compensation ? value.compensation.name : '');
                break;
            case 'Options':
                text = this.options(value, args.options);
                break;
            case 'ToMany':
                if (['Candidate', 'CorporateUser', 'Person'].indexOf(args.associatedEntity.entity) > -1) {
                    text = this.concat(value.data, 'firstName', 'lastName');
                    if (value.data.length < value.total) {
                        text = text + ', ' + this.labels.getToManyPlusMore({ quantity: value.total - value.data.length });
                    }
                }
                else if (['Category', 'BusinessSector', 'Skill', 'Specialty', 'ClientCorporation', 'CorporationDepartment'].indexOf(args.associatedEntity.entity) > -1) {
                    text = this.concat(value.data, 'name');
                    if (value.data.length < value.total) {
                        text = text + ', ' + this.labels.getToManyPlusMore({ quantity: value.total - value.data.length });
                    }
                }
                else if (args.associatedEntity.entity === 'MailListPushHistoryDetail') {
                    text = this.concat(value.data, 'externalListName');
                }
                else {
                    text = "" + (value.total || '');
                }
                break;
            case 'Country':
                /** @type {?} */
                var countryObj = findByCountryId(Number(value));
                text = countryObj ? countryObj.name : value;
                break;
            case 'Html':
                if (Array.isArray(value)) {
                    value = value.join(' ');
                }
                if (typeof text === 'string') {
                    text = this.sanitizationService.bypassSecurityTrustHtml(value.replace(/\<a/gi, '<a target="_blank"'));
                }
                break;
            case 'CandidateComment':
                text = value.comments ? this.labels.formatDateShort(value.dateLastModified) + " (" + value.name + ") - " + value.comments : '';
                break;
            default:
                text = value.trim ? value.trim() : value;
                break;
        }
        return text;
    };
    /**
     * @param {?} value
     * @param {?} args
     * @return {?}
     */
    RenderPipe.prototype.updateValue = /**
     * @param {?} value
     * @param {?} args
     * @return {?}
     */
    function (value, args) {
        this.value = this.render(value, args);
        this.changeDetector.markForCheck();
    };
    /**
     * @param {?=} value
     * @param {?=} args
     * @return {?}
     */
    RenderPipe.prototype.transform = /**
     * @param {?=} value
     * @param {?=} args
     * @return {?}
     */
    function (value, args) {
        if (value === undefined || value === null) {
            return '';
        }
        if (this.equals(value, this.lastValue) && this.equals(args, this.lastArgs)) {
            return this.value;
        }
        this.lastValue = value;
        this.lastArgs = args;
        this.updateValue(this.lastValue, this.lastArgs);
        return this.value;
    };
    /**
     * Simple function concat a list of fields from a list of objects
     * @name options
     * @param list - the list of values to use
     * @param fields - list of fields to extract
     */
    /**
     * Simple function concat a list of fields from a list of objects
     * \@name options
     * @param {?} list - the list of values to use
     * @param {...?} fields - list of fields to extract
     * @return {?}
     */
    RenderPipe.prototype.concat = /**
     * Simple function concat a list of fields from a list of objects
     * \@name options
     * @param {?} list - the list of values to use
     * @param {...?} fields - list of fields to extract
     * @return {?}
     */
    function (list) {
        var fields = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            fields[_i - 1] = arguments[_i];
        }
        var e_1, _a, e_2, _b;
        /** @type {?} */
        var data = [];
        try {
            for (var list_1 = __values(list), list_1_1 = list_1.next(); !list_1_1.done; list_1_1 = list_1.next()) {
                var item = list_1_1.value;
                /** @type {?} */
                var label = [];
                try {
                    for (var fields_1 = __values(fields), fields_1_1 = fields_1.next(); !fields_1_1.done; fields_1_1 = fields_1.next()) {
                        var field = fields_1_1.value;
                        label.push("" + item[field]);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (fields_1_1 && !fields_1_1.done && (_b = fields_1.return)) _b.call(fields_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                data.push(label.join(' '));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (list_1_1 && !list_1_1.done && (_a = list_1.return)) _a.call(list_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return data.join(', ');
    };
    /**
     * Simple function to look up the **label** to display from options
     * @name options
     * @param value - the value to find
     * @param list - list of options (label/value pairs)
     */
    /**
     * Simple function to look up the **label** to display from options
     * \@name options
     * @param {?} value - the value to find
     * @param {?} list - list of options (label/value pairs)
     * @return {?}
     */
    RenderPipe.prototype.options = /**
     * Simple function to look up the **label** to display from options
     * \@name options
     * @param {?} value - the value to find
     * @param {?} list - list of options (label/value pairs)
     * @return {?}
     */
    function (value, list) {
        if (!Array.isArray(value)) {
            value = [value];
        }
        return value.map(function (item) {
            var e_3, _a;
            try {
                for (var list_2 = __values(list), list_2_1 = list_2.next(); !list_2_1.done; list_2_1 = list_2.next()) {
                    var option = list_2_1.value;
                    if (option.value === item) {
                        return option.label;
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (list_2_1 && !list_2_1.done && (_a = list_2.return)) _a.call(list_2);
                }
                finally { if (e_3) throw e_3.error; }
            }
            return item;
        });
    };
    /**
     * @param {?} value
     * @return {?}
     */
    RenderPipe.prototype.getNumberDecimalPlaces = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var decimalPlaces;
        if (value) {
            /** @type {?} */
            var numberString = parseFloat(value).toString();
            /** @type {?} */
            var decimalPlace = (numberString || '').split('.')[1] || '';
            decimalPlaces = decimalPlace.length;
        }
        return decimalPlaces || 1;
    };
    /**
     * Capitalizes the first letter
     * @param value
     */
    /**
     * Capitalizes the first letter
     * @param {?} value
     * @return {?}
     */
    RenderPipe.prototype.capitalize = /**
     * Capitalizes the first letter
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value.charAt(0).toUpperCase() + value.slice(1);
    };
    RenderPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'render',
                    pure: false,
                },] },
        { type: Injectable }
    ];
    /** @nocollapse */
    RenderPipe.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: DomSanitizer },
        { type: NovoLabelService }
    ]; };
    return RenderPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var EntityList = /** @class */ (function () {
    function EntityList() {
        this.baseEntity = '';
        this.ENTITY_SHORT_NAMES = {
            Lead: 'lead',
            ClientContact: 'contact',
            ClientContact1: 'contact',
            ClientContact2: 'contact',
            ClientContact3: 'contact',
            ClientContact4: 'contact',
            ClientContact5: 'contact',
            ClientCorporation: 'company',
            ClientCorporation1: 'company',
            ClientCorporation2: 'company',
            ClientCorporation3: 'company',
            ClientCorporation4: 'company',
            ClientCorporation5: 'company',
            Opportunity: 'opportunity',
            Task: 'task',
            Note: 'note',
            CorporateUser: 'user',
            Candidate: 'candidate',
            JobOrder: 'job',
            JobOrder1: 'job',
            JobOrder2: 'job',
            JobOrder3: 'job',
            JobOrder4: 'job',
            JobOrder5: 'job',
            Placement: 'placement',
            JobSubmission: 'submission',
            CandidateReference: 'references',
            DistributionList: 'distributionList',
            Appointment: 'appointment',
        };
    }
    /**
     * @return {?}
     */
    EntityList.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var e_1, _a;
        // use a local copy of the meta to set the type to TO_ONE for proper display
        // without changing the input object
        this.metaDisplay = Helpers.deepClone(this.meta);
        this.metaDisplay.type = 'TO_ONE';
        this.baseEntity = this.meta.associatedEntity.entity;
        try {
            for (var _b = __values(this.data.data), _c = _b.next(); !_c.done; _c = _b.next()) {
                var entity = _c.value;
                entity.isLinkable = this.isLinkable(entity);
                entity.class = this.getClass(entity);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * @param {?} entity
     * @return {?}
     */
    EntityList.prototype.getClass = /**
     * @param {?} entity
     * @return {?}
     */
    function (entity) {
        return this.ENTITY_SHORT_NAMES[entity.personSubtype];
    };
    /**
     * @param {?} entity
     * @return {?}
     */
    EntityList.prototype.openLink = /**
     * @param {?} entity
     * @return {?}
     */
    function (entity) {
        entity.openLink(entity);
    };
    /**
     * @param {?} entity
     * @return {?}
     */
    EntityList.prototype.isLinkable = /**
     * @param {?} entity
     * @return {?}
     */
    function (entity) {
        return entity.openLink;
    };
    EntityList.decorators = [
        { type: Component, args: [{
                    selector: 'novo-entity-list',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: "\n        <div *ngFor=\"let entity of data.data\" class=\"entity\">\n            <a *ngIf=\"entity.isLinkable\" (click)=\"openLink(entity)\">\n                <i class=\"bhi-circle {{ entity.class }}\"></i>{{ entity | render : metaDisplay }}\n            </a>\n            <span *ngIf=\"!entity.isLinkable && entity.personSubtype\">\n                <i class=\"bhi-circle {{ entity.class }}\"></i>{{ entity | render : metaDisplay }}\n            </span>\n            <span *ngIf=\"!entity.isLinkable && !entity.personSubtype\">\n                {{ entity | render : metaDisplay }}\n            </span>\n        </div>\n    "
                }] }
    ];
    /** @nocollapse */
    EntityList.ctorParameters = function () { return []; };
    EntityList.propDecorators = {
        data: [{ type: Input }],
        meta: [{ type: Input }]
    };
    return EntityList;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoValueModule = /** @class */ (function () {
    function NovoValueModule() {
    }
    NovoValueModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    declarations: [NovoValueElement, RenderPipe, EntityList],
                    exports: [NovoValueElement, RenderPipe, EntityList],
                },] }
    ];
    return NovoValueModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoIconComponent = /** @class */ (function () {
    function NovoIconComponent(element, cdr) {
        this.element = element;
        this.cdr = cdr;
        this.size = 'medium';
        this.role = 'img';
    }
    Object.defineProperty(NovoIconComponent.prototype, "alt", {
        get: /**
         * @return {?}
         */
        function () {
            return this.ariaLabel;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.ariaLabel = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoIconComponent.prototype, "name", {
        get: /**
         * @return {?}
         */
        function () {
            return this.iconName;
        },
        set: /**
         * @param {?} iconName
         * @return {?}
         */
        function (iconName) {
            this.iconName = "bhi-" + iconName;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoIconComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.element.nativeElement.textContent.trim()) {
            Promise.resolve().then(function () {
                _this.name = _this.element.nativeElement.textContent.trim();
                _this.cdr.markForCheck();
            });
        }
    };
    NovoIconComponent.decorators = [
        { type: Component, args: [{
                    selector: 'novo-icon',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: "\n        <i [class]=\"iconName\"><span><ng-content></ng-content></span></i>\n    "
                }] }
    ];
    /** @nocollapse */
    NovoIconComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    NovoIconComponent.propDecorators = {
        raised: [{ type: HostBinding, args: ['attr.raised',] }, { type: Input }],
        size: [{ type: HostBinding, args: ['attr.size',] }, { type: Input }],
        theme: [{ type: HostBinding, args: ['attr.theme',] }, { type: Input }],
        color: [{ type: HostBinding, args: ['attr.color',] }, { type: Input }],
        role: [{ type: HostBinding, args: ['attr.role',] }],
        ariaLabel: [{ type: HostBinding, args: ['attr.aria-label',] }],
        alt: [{ type: Input }],
        name: [{ type: Input }]
    };
    return NovoIconComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoIconModule = /** @class */ (function () {
    function NovoIconModule() {
    }
    NovoIconModule.decorators = [
        { type: NgModule, args: [{
                    exports: [NovoIconComponent],
                    declarations: [NovoIconComponent],
                },] }
    ];
    return NovoIconModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Directive for a Material Design Accordion.
 */
var NovoAccordion = /** @class */ (function (_super) {
    __extends(NovoAccordion, _super);
    function NovoAccordion() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._hideToggle = false;
        /**
         * The display mode used for all expansion panels in the accordion. Currently two display
         * modes exist:
         *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded
         *     panel at a different elevation from the reset of the accordion.
         *  flat - no spacing is placed around expanded panels, showing all panels at the same
         *     elevation.
         */
        _this.displayMode = 'default';
        return _this;
    }
    Object.defineProperty(NovoAccordion.prototype, "hideToggle", {
        /** Whether the expansion indicator should be hidden. */
        get: /**
         * Whether the expansion indicator should be hidden.
         * @return {?}
         */
        function () {
            return this._hideToggle;
        },
        set: /**
         * @param {?} show
         * @return {?}
         */
        function (show) {
            this._hideToggle = coerceBooleanProperty(show);
        },
        enumerable: true,
        configurable: true
    });
    NovoAccordion.decorators = [
        { type: Directive, args: [{
                    selector: 'novo-accordion',
                    exportAs: 'novoAccordion',
                    host: {
                        class: 'novo-accordion',
                    },
                },] }
    ];
    NovoAccordion.propDecorators = {
        hideToggle: [{ type: Input }],
        displayMode: [{ type: Input }]
    };
    return NovoAccordion;
}(CdkAccordion));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Time and timing curve for expansion panel animations.
 * @type {?}
 */
var EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';
/**
 * Animations used by the Material expansion panel.
 * @type {?}
 */
var novoExpansionAnimations = {
    /**
     * Animation that rotates the indicator arrow.
     */
    indicatorRotate: trigger('indicatorRotate', [
        state('collapsed', style({ transform: 'rotate(0deg)' })),
        state('expanded', style({ transform: 'rotate(180deg)' })),
        transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),
    ]),
    /**
     * Animation that expands and collapses the panel header height.
     */
    expansionHeaderHeight: trigger('expansionHeight', [
        state('collapsed', style({
            height: '{{collapsedHeight}}',
        }), {
            params: { collapsedHeight: '48px' },
        }),
        state('expanded', style({
            height: '{{expandedHeight}}',
        }), {
            params: { expandedHeight: '56px' },
        }),
        transition('expanded <=> collapsed', group([query('@indicatorRotate', animateChild(), { optional: true }), animate(EXPANSION_PANEL_ANIMATION_TIMING)])),
    ]),
    /**
     * Animation that expands and collapses the panel content.
     */
    bodyExpansion: trigger('bodyExpansion', [
        state('collapsed', style({ height: '0px', visibility: 'hidden' })),
        state('expanded', style({ height: '*', visibility: 'visible' })),
        transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),
    ]),
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Expansion panel content that will be rendered lazily
 * after the panel is opened for the first time.
 */
var NovoExpansionPanelContent = /** @class */ (function () {
    function NovoExpansionPanelContent(_template) {
        this._template = _template;
    }
    NovoExpansionPanelContent.decorators = [
        { type: Directive, args: [{
                    selector: 'ng-template[matExpansionPanelContent]',
                },] }
    ];
    /** @nocollapse */
    NovoExpansionPanelContent.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    return NovoExpansionPanelContent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Counter for generating unique element ids.
 * @type {?}
 */
var uniqueId = 0;
/**
 * `<novo-expansion-panel>`
 *
 * This component can be used as a single element to show expandable content, or as one of
 * multiple children of an element with the NovoAccordion directive attached.
 */
var NovoExpansionPanel = /** @class */ (function (_super) {
    __extends(NovoExpansionPanel, _super);
    function NovoExpansionPanel(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef) {
        var _this = _super.call(this, accordion, _changeDetectorRef, _uniqueSelectionDispatcher) || this;
        _this._viewContainerRef = _viewContainerRef;
        _this._hideToggle = false;
        _this._padding = true;
        _this.opened = new EventEmitter();
        _this.closed = new EventEmitter();
        _this.expandedChange = new EventEmitter();
        /**
         * Stream that emits for changes in `\@Input` properties.
         */
        _this._inputChanges = new Subject();
        /**
         * ID for the associated header element. Used for a11y labelling.
         */
        _this._headerId = "novo-expansion-panel-header-" + uniqueId++;
        _this.accordion = accordion;
        return _this;
    }
    Object.defineProperty(NovoExpansionPanel.prototype, "hideToggle", {
        /** Whether the toggle indicator should be hidden. */
        get: /**
         * Whether the toggle indicator should be hidden.
         * @return {?}
         */
        function () {
            return this._hideToggle;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hideToggle = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoExpansionPanel.prototype, "padding", {
        get: /**
         * @return {?}
         */
        function () {
            return this._padding;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._padding = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    /** Whether the expansion indicator should be hidden. */
    /**
     * Whether the expansion indicator should be hidden.
     * @return {?}
     */
    NovoExpansionPanel.prototype._getHideToggle = /**
     * Whether the expansion indicator should be hidden.
     * @return {?}
     */
    function () {
        if (this.accordion) {
            return this.accordion.hideToggle;
        }
        return this.hideToggle;
    };
    /** Determines whether the expansion panel should have spacing between it and its siblings. */
    /**
     * Determines whether the expansion panel should have spacing between it and its siblings.
     * @return {?}
     */
    NovoExpansionPanel.prototype._hasSpacing = /**
     * Determines whether the expansion panel should have spacing between it and its siblings.
     * @return {?}
     */
    function () {
        if (this.accordion) {
            return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';
        }
        return false;
    };
    /** Gets the expanded state string. */
    /**
     * Gets the expanded state string.
     * @return {?}
     */
    NovoExpansionPanel.prototype._getExpandedState = /**
     * Gets the expanded state string.
     * @return {?}
     */
    function () {
        return this.expanded ? 'expanded' : 'collapsed';
    };
    /**
     * @return {?}
     */
    NovoExpansionPanel.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this._lazyContent) {
            // Render the content as soon as the panel becomes open.
            this.opened
                .pipe(startWith(null), filter(function () { return _this.expanded && !_this._portal; }), take(1))
                .subscribe(function () {
                _this._portal = new TemplatePortal(_this._lazyContent._template, _this._viewContainerRef);
            });
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NovoExpansionPanel.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this._inputChanges.next(changes);
    };
    /**
     * @return {?}
     */
    NovoExpansionPanel.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnDestroy.call(this);
        this._inputChanges.complete();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoExpansionPanel.prototype._bodyAnimation = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var classList = event.element.classList;
        /** @type {?} */
        var cssClass = 'novo-expanded';
        var phaseName = event.phaseName, toState = event.toState;
        // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in
        // order to prevent the cases where switching too early would cause the animation to jump.
        // Note that we do it directly on the DOM element to avoid the slight delay that comes
        // with doing it via change detection.
        if (phaseName === 'done' && toState === 'expanded') {
            classList.add(cssClass);
        }
        else if (phaseName === 'start' && toState === 'collapsed') {
            classList.remove(cssClass);
        }
    };
    NovoExpansionPanel.decorators = [
        { type: Component, args: [{
                    selector: 'novo-expansion-panel',
                    exportAs: 'novoExpansionPanel',
                    template: "<ng-content select=\"novo-expansion-panel-header\"></ng-content>\n<div class=\"novo-expansion-panel-content\"\n     role=\"region\"\n     [@bodyExpansion]=\"_getExpandedState()\"\n     (@bodyExpansion.done)=\"_bodyAnimation($event)\"\n     (@bodyExpansion.start)=\"_bodyAnimation($event)\"\n     [attr.aria-labelledby]=\"_headerId\"\n     [id]=\"id\"\n     #body>\n  <div class=\"novo-expansion-panel-body\">\n    <ng-content></ng-content>\n    <ng-template [cdkPortalOutlet]=\"_portal\"></ng-template>\n  </div>\n  <ng-content select=\"novo-action-row\"></ng-content>\n</div>\n",
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    animations: [novoExpansionAnimations.bodyExpansion],
                    host: {
                        class: 'novo-expansion-panel',
                        '[class.novo-expanded]': 'expanded',
                        '[class.novo-expansion-panel-spacing]': '_hasSpacing()',
                        '[class.novo-expansion-panel-padding]': 'padding',
                    },
                    styles: ["@-webkit-keyframes rotate{0%{-webkit-transform:rotateZ(0);transform:rotateZ(0)}75%{-webkit-transform:rotateZ(200deg);transform:rotateZ(200deg)}100%{-webkit-transform:rotateZ(180deg);transform:rotateZ(180deg)}}@-webkit-keyframes half-rotate{0%{-webkit-transform:rotateZ(45deg);transform:rotateZ(45deg)}75%{-webkit-transform:rotateZ(100deg);transform:rotateZ(100deg)}100%{-webkit-transform:rotateZ(90deg);transform:rotateZ(90deg)}}@-webkit-keyframes rotateBack{0%{-webkit-transform:rotateZ(90deg);transform:rotateZ(90deg)}100%{-webkit-transform:rotateZ(0);transform:rotateZ(0)}}@-webkit-keyframes show{0%{opacity:0;-webkit-transform:translateX(-100%);transform:translateX(-100%)}75%{-webkit-transform:translateX(0);transform:translateX(0)}100%{opacity:1;-webkit-transform:translateX(0);transform:translateX(0)}}@keyframes rotate{0%{-webkit-transform:rotateZ(0);transform:rotateZ(0)}75%{-webkit-transform:rotateZ(200deg);transform:rotateZ(200deg)}100%{-webkit-transform:rotateZ(180deg);transform:rotateZ(180deg)}}@keyframes half-rotate{0%{-webkit-transform:rotateZ(45deg);transform:rotateZ(45deg)}75%{-webkit-transform:rotateZ(100deg);transform:rotateZ(100deg)}100%{-webkit-transform:rotateZ(90deg);transform:rotateZ(90deg)}}@keyframes rotateBack{0%{-webkit-transform:rotateZ(90deg);transform:rotateZ(90deg)}100%{-webkit-transform:rotateZ(0);transform:rotateZ(0)}}@keyframes show{0%{opacity:0;-webkit-transform:translateX(-100%);transform:translateX(-100%)}75%{-webkit-transform:translateX(0);transform:translateX(0)}100%{opacity:1;-webkit-transform:translateX(0);transform:translateX(0)}}.novo-expansion-panel{background:#fff;color:#3d464d;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);box-sizing:content-box;display:block;margin:0 16px;transition:margin 225ms ease-in-out}.novo-action-row{border-top-color:#3d464d}.novo-expansion-panel:not(.novo-expanded) .novo-expansion-panel-header:not([aria-disabled=true]).cdk-keyboard-focused,.novo-expansion-panel:not(.novo-expanded) .novo-expansion-panel-header:not([aria-disabled=true]).cdk-program-focused,.novo-expansion-panel:not(.novo-expanded) .novo-expansion-panel-header:not([aria-disabled=true]):hover{background:rgba(0,0,0,.04)}.novo-expansion-panel-header-title{color:#3d464d}.novo-expansion-indicator::after,.novo-expansion-panel-header-description{color:#999}.novo-expansion-panel-header[aria-disabled=true]{color:#999;pointer-events:none}.novo-expansion-panel-header[aria-disabled=true] .novo-expansion-panel-header-description,.novo-expansion-panel-header[aria-disabled=true] .novo-expansion-panel-header-title{color:inherit}.novo-expansion-panel.novo-expanded[theme=company]{border-top:3px solid #39d}.novo-expansion-panel.novo-expanded[theme=candidate]{border-top:3px solid #4b7}.novo-expansion-panel.novo-expanded[theme=navigation]{border-top:3px solid #2f384f}.novo-expansion-panel.novo-expanded[theme=lead]{border-top:3px solid #a69}.novo-expansion-panel.novo-expanded[theme=contact]{border-top:3px solid #fa4}.novo-expansion-panel.novo-expanded[theme=opportunity]{border-top:3px solid #625}.novo-expansion-panel.novo-expanded[theme=job]{border-top:3px solid #b56}.novo-expansion-panel.novo-expanded[theme=earnCode],.novo-expansion-panel.novo-expanded[theme=jobCode]{border-top:3px solid #696d79}.novo-expansion-panel.novo-expanded[theme=sendout]{border-top:3px solid #747884}.novo-expansion-panel.novo-expanded[theme=placement]{border-top:3px solid #0b344f}.novo-expansion-panel.novo-expanded[theme=corporateuser],.novo-expansion-panel.novo-expanded[theme=credential],.novo-expansion-panel.novo-expanded[theme=distributionList],.novo-expansion-panel.novo-expanded[theme=task],.novo-expansion-panel.novo-expanded[theme=user]{border-top:3px solid #4f5361}.novo-expansion-panel.novo-expanded[theme=aqua]{border-top:3px solid #3bafda}.novo-expansion-panel.novo-expanded[theme=ocean]{border-top:3px solid #4a89dc}.novo-expansion-panel.novo-expanded[theme=mint]{border-top:3px solid #37bc9b}.novo-expansion-panel.novo-expanded[theme=grass]{border-top:3px solid #8cc152}.novo-expansion-panel.novo-expanded[theme=sunflower]{border-top:3px solid #f6b042}.novo-expansion-panel.novo-expanded[theme=bittersweet]{border-top:3px solid #eb6845}.novo-expansion-panel.novo-expanded[theme=grapefruit]{border-top:3px solid #da4453}.novo-expansion-panel.novo-expanded[theme=carnation]{border-top:3px solid #d770ad}.novo-expansion-panel.novo-expanded[theme=lavender]{border-top:3px solid #967adc}.novo-expansion-panel.novo-expanded[theme=positive]{border-top:3px solid #4a89dc}.novo-expansion-panel.novo-expanded[theme=success]{border-top:3px solid #8cc152}.novo-expansion-panel.novo-expanded[theme=negative]{border-top:3px solid #da4453}.novo-expansion-panel.novo-expanded[theme=warning]{border-top:3px solid #f6b042}.novo-expansion-panel.novo-expanded[theme=black]{border-top:3px solid #000}.novo-expansion-panel.novo-expanded[theme=dark]{border-top:3px solid #3d464d}.novo-expansion-panel.novo-expanded[theme=pulse]{border-top:3px solid #3bafda}.novo-expansion-panel.novo-expanded[theme=neutral]{border-top:3px solid #4f5361}.novo-expansion-panel.novo-expanded[theme=navy]{border-top:3px solid #0d2d42}.novo-expansion-panel.novo-expanded[theme=contract]{border-top:3px solid #454ea0}.novo-expansion-panel.novo-expanded[theme=mountain]{border-top:3px solid #9678b6}.novo-expansion-panel.novo-expanded[theme=billableCharge],.novo-expansion-panel.novo-expanded[theme=invoiceStatement]{border-top:3px solid #696d79}.novo-expansion-panel.novo-expanded[theme=submission]{border-top:3px solid #a9adbb}.novo-expansion-panel.novo-expanded[theme=note]{border-top:3px solid #747884}.novo-expansion-panel.novo-expanded[theme=empty]{border-top:3px solid #cccdcc}.novo-expansion-panel.novo-expanded[theme=background]{border-top:3px solid #f4f4f4}.novo-expansion-panel.novo-expanded[theme=white]{border-top:3px solid #fff}.novo-expansion-panel.novo-expanded[theme=grey]{border-top:3px solid #999}.novo-expansion-panel.novo-expanded[theme=off-white]{border-top:3px solid #f4f4f4}.novo-expansion-panel.novo-expanded[theme=light]{border-top:3px solid #d9dadc}.novo-expansion-panel.novo-expanded{margin:16px 4px}.novo-expansion-panel.novo-expanded:first-child{margin-top:0}.novo-expansion-panel.novo-expanded:last-child{margin-bottom:0}.novo-expansion-panel-content{overflow:hidden}.novo-expansion-panel-content.novo-expanded{overflow:visible}.novo-expansion-panel-padding .novo-expansion-panel-body{padding:0 24px 16px}.novo-accordion .novo-expansion-panel-spacing:first-child{margin-top:0}.novo-accordion .novo-expansion-panel-spacing:last-child{margin-bottom:0}.novo-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.novo-action-row button.novo-button{margin-left:8px}[dir=rtl] .novo-action-row button.novo-button{margin-left:0;margin-right:8px}"]
                }] }
    ];
    /** @nocollapse */
    NovoExpansionPanel.ctorParameters = function () { return [
        { type: NovoAccordion, decorators: [{ type: Optional }, { type: Host }] },
        { type: ChangeDetectorRef },
        { type: UniqueSelectionDispatcher },
        { type: ViewContainerRef }
    ]; };
    NovoExpansionPanel.propDecorators = {
        disabled: [{ type: Input }],
        expanded: [{ type: Input }],
        hideToggle: [{ type: Input }],
        padding: [{ type: Input }],
        opened: [{ type: Output }],
        closed: [{ type: Output }],
        expandedChange: [{ type: Output }],
        _lazyContent: [{ type: ContentChild, args: [NovoExpansionPanelContent,] }]
    };
    return NovoExpansionPanel;
}(CdkAccordionItem));
var NovoExpansionPanelActionRow = /** @class */ (function () {
    function NovoExpansionPanelActionRow() {
    }
    NovoExpansionPanelActionRow.decorators = [
        { type: Directive, args: [{
                    selector: 'novo-action-row',
                    host: {
                        class: 'novo-action-row',
                    },
                },] }
    ];
    return NovoExpansionPanelActionRow;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * `<novo-expansion-panel-header>`
 *
 * This component corresponds to the header element of an `<novo-expansion-panel>`.
 */
var NovoExpansionPanelHeader = /** @class */ (function () {
    function NovoExpansionPanelHeader(panel, _element, _changeDetectorRef) {
        var _this = this;
        this.panel = panel;
        this._element = _element;
        this._changeDetectorRef = _changeDetectorRef;
        this._parentChangeSubscription = Subscription.EMPTY;
        // Since the toggle state depends on an @Input on the panel, we
        // need to  subscribe and trigger change detection manually.
        this._parentChangeSubscription = merge(panel.opened, panel.closed, panel._inputChanges.pipe(filter(function (changes) { return !!(changes.hideToggle || changes.disabled); }))).subscribe(function () { return _this._changeDetectorRef.markForCheck(); });
        // _focusMonitor.monitor(_element.nativeElement);
    }
    /** Toggles the expanded state of the panel. */
    /**
     * Toggles the expanded state of the panel.
     * @return {?}
     */
    NovoExpansionPanelHeader.prototype._toggle = /**
     * Toggles the expanded state of the panel.
     * @return {?}
     */
    function () {
        this.panel.toggle();
    };
    /** Gets whether the panel is expanded. */
    /**
     * Gets whether the panel is expanded.
     * @return {?}
     */
    NovoExpansionPanelHeader.prototype._isExpanded = /**
     * Gets whether the panel is expanded.
     * @return {?}
     */
    function () {
        return this.panel.expanded;
    };
    /** Gets the expanded state string of the panel. */
    /**
     * Gets the expanded state string of the panel.
     * @return {?}
     */
    NovoExpansionPanelHeader.prototype._getExpandedState = /**
     * Gets the expanded state string of the panel.
     * @return {?}
     */
    function () {
        return this.panel._getExpandedState();
    };
    /** Gets the panel id. */
    /**
     * Gets the panel id.
     * @return {?}
     */
    NovoExpansionPanelHeader.prototype._getPanelId = /**
     * Gets the panel id.
     * @return {?}
     */
    function () {
        return this.panel.id;
    };
    /** Gets whether the expand indicator should be shown. */
    /**
     * Gets whether the expand indicator should be shown.
     * @return {?}
     */
    NovoExpansionPanelHeader.prototype._showToggle = /**
     * Gets whether the expand indicator should be shown.
     * @return {?}
     */
    function () {
        return !this.panel.hideToggle && !this.panel.disabled;
    };
    /** Handle keydown event calling to toggle() if appropriate. */
    /**
     * Handle keydown event calling to toggle() if appropriate.
     * @param {?} event
     * @return {?}
     */
    NovoExpansionPanelHeader.prototype._keydown = /**
     * Handle keydown event calling to toggle() if appropriate.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        switch (event.keyCode) {
            // Toggle for space and enter keys.
            case SPACE:
            case ENTER:
                event.preventDefault();
                this._toggle();
                break;
            default:
                return;
        }
    };
    /**
     * @return {?}
     */
    NovoExpansionPanelHeader.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._parentChangeSubscription.unsubscribe();
        // this._focusMonitor.stopMonitoring(this._element.nativeElement);
    };
    NovoExpansionPanelHeader.decorators = [
        { type: Component, args: [{
                    selector: 'novo-expansion-panel-header',
                    template: "<span class=\"novo-content\">\n  <ng-content select=\"novo-panel-title\"></ng-content>\n  <ng-content select=\"novo-panel-description\"></ng-content>\n  <ng-content></ng-content>\n</span>\n<span [@indicatorRotate]=\"_getExpandedState()\" *ngIf=\"_showToggle()\"\n      class=\"novo-expansion-indicator\"></span>\n",
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    animations: [novoExpansionAnimations.indicatorRotate, novoExpansionAnimations.expansionHeaderHeight],
                    host: {
                        class: 'novo-expansion-panel-header',
                        role: 'button',
                        '[attr.id]': 'panel._headerId',
                        '[attr.tabindex]': 'panel.disabled ? -1 : 0',
                        '[attr.aria-controls]': '_getPanelId()',
                        '[attr.aria-expanded]': '_isExpanded()',
                        '[attr.aria-disabled]': 'panel.disabled',
                        '[class.novo-expanded]': '_isExpanded()',
                        '(click)': '_toggle()',
                        '(keydown)': '_keydown($event)',
                        '[@expansionHeight]': "{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }",
                    },
                    styles: [".novo-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px}.novo-expansion-panel-header:focus,.novo-expansion-panel-header:hover{outline:0}.novo-expansion-panel-header.novo-expanded:focus,.novo-expansion-panel-header.novo-expanded:hover{background:inherit}.novo-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.novo-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.novo-expansion-panel-header-description,.novo-expansion-panel-header-title{display:flex;flex-grow:1;margin-right:16px;align-items:center}[dir=rtl] .novo-expansion-panel-header-description,[dir=rtl] .novo-expansion-panel-header-title{margin-right:0;margin-left:16px}.novo-expansion-panel-header-description{flex-grow:2}.novo-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:'';display:inline-block;padding:3px;-webkit-transform:rotate(45deg);transform:rotate(45deg);vertical-align:middle}"]
                }] }
    ];
    /** @nocollapse */
    NovoExpansionPanelHeader.ctorParameters = function () { return [
        { type: NovoExpansionPanel, decorators: [{ type: Host }] },
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    NovoExpansionPanelHeader.propDecorators = {
        expandedHeight: [{ type: Input }],
        collapsedHeight: [{ type: Input }]
    };
    return NovoExpansionPanelHeader;
}());
/**
 * `<novo-panel-description>`
 *
 * This direction is to be used inside of the NovoExpansionPanelHeader component.
 */
var NovoExpansionPanelDescription = /** @class */ (function () {
    function NovoExpansionPanelDescription() {
    }
    NovoExpansionPanelDescription.decorators = [
        { type: Directive, args: [{
                    selector: 'novo-panel-description',
                    host: {
                        class: 'novo-expansion-panel-header-description',
                    },
                },] }
    ];
    return NovoExpansionPanelDescription;
}());
/**
 * `<novo-panel-title>`
 *
 * This direction is to be used inside of the NovoExpansionPanelHeader component.
 */
var NovoExpansionPanelTitle = /** @class */ (function () {
    function NovoExpansionPanelTitle() {
    }
    NovoExpansionPanelTitle.decorators = [
        { type: Directive, args: [{
                    selector: 'novo-panel-title',
                    host: {
                        class: 'novo-expansion-panel-header-title',
                    },
                },] }
    ];
    return NovoExpansionPanelTitle;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoExpansionModule = /** @class */ (function () {
    function NovoExpansionModule() {
    }
    NovoExpansionModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, CdkAccordionModule, PortalModule],
                    exports: [
                        NovoAccordion,
                        NovoExpansionPanel,
                        NovoExpansionPanelActionRow,
                        NovoExpansionPanelHeader,
                        NovoExpansionPanelTitle,
                        NovoExpansionPanelDescription,
                        NovoExpansionPanelContent,
                    ],
                    declarations: [
                        NovoAccordion,
                        NovoExpansionPanel,
                        NovoExpansionPanelActionRow,
                        NovoExpansionPanelHeader,
                        NovoExpansionPanelTitle,
                        NovoExpansionPanelDescription,
                        NovoExpansionPanelContent,
                    ],
                },] }
    ];
    return NovoExpansionModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoStepLabel = /** @class */ (function (_super) {
    __extends(NovoStepLabel, _super);
    function NovoStepLabel(template) {
        return _super.call(this, template) || this;
    }
    NovoStepLabel.decorators = [
        { type: Directive, args: [{
                    selector: '[novoStepLabel]',
                },] }
    ];
    /** @nocollapse */
    NovoStepLabel.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    return NovoStepLabel;
}(CdkStepLabel));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoStepHeader = /** @class */ (function () {
    function NovoStepHeader(_focusMonitor, _element) {
        this._focusMonitor = _focusMonitor;
        this._element = _element;
        _focusMonitor.monitor(_element.nativeElement, true);
    }
    Object.defineProperty(NovoStepHeader.prototype, "index", {
        /** Index of the given step. */
        get: /**
         * Index of the given step.
         * @return {?}
         */
        function () {
            return this._index;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._index = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoStepHeader.prototype, "selected", {
        /** Whether the given step is selected. */
        get: /**
         * Whether the given step is selected.
         * @return {?}
         */
        function () {
            return this._selected;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._selected = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoStepHeader.prototype, "active", {
        /** Whether the given step label is active. */
        get: /**
         * Whether the given step label is active.
         * @return {?}
         */
        function () {
            return this._active;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._active = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoStepHeader.prototype, "touched", {
        /** Whether the given step label is active. */
        get: /**
         * Whether the given step label is active.
         * @return {?}
         */
        function () {
            return this.selected || this.state === 'edit' || this.state === 'done';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoStepHeader.prototype, "optional", {
        /** Whether the given step is optional. */
        get: /**
         * Whether the given step is optional.
         * @return {?}
         */
        function () {
            return this._optional;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._optional = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoStepHeader.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._focusMonitor.stopMonitoring(this._element.nativeElement);
    };
    /** Returns string label of given step if it is a text label. */
    /**
     * Returns string label of given step if it is a text label.
     * @return {?}
     */
    NovoStepHeader.prototype._stringLabel = /**
     * Returns string label of given step if it is a text label.
     * @return {?}
     */
    function () {
        return this.label instanceof NovoStepLabel ? null : this.label;
    };
    /** Returns NovoStepLabel if the label of given step is a template label. */
    /**
     * Returns NovoStepLabel if the label of given step is a template label.
     * @return {?}
     */
    NovoStepHeader.prototype._templateLabel = /**
     * Returns NovoStepLabel if the label of given step is a template label.
     * @return {?}
     */
    function () {
        return this.label instanceof NovoStepLabel ? this.label : null;
    };
    /** Returns the host HTML element. */
    /**
     * Returns the host HTML element.
     * @return {?}
     */
    NovoStepHeader.prototype._getHostElement = /**
     * Returns the host HTML element.
     * @return {?}
     */
    function () {
        return this._element.nativeElement;
    };
    NovoStepHeader.decorators = [
        { type: Component, args: [{
                    selector: 'novo-step-header',
                    template: "<div [class.novo-step-icon]=\"touched\"\n     [class.novo-step-icon-not-touched]=\"!touched\">\n  <ng-container *ngIf=\"icon\">\n    <novo-icon size=\"small\" raised=\"true\" [theme]=\"theme\">{{icon}}</novo-icon>\n  </ng-container>\n  <ng-container *ngIf=\"!icon\">\n    <span class=\"novo-step-number\">{{index + 1}}</span>\n  </ng-container>\n</div>\n<div class=\"novo-step-label\"\n     [class.novo-step-label-active]=\"active\"\n     [class.novo-step-label-selected]=\"selected\">\n  <!-- If there is a label template, use it. -->\n  <ng-container *ngIf=\"_templateLabel()\" [ngTemplateOutlet]=\"_templateLabel()!.template\">\n  </ng-container>\n  <!-- It there is no label template, fall back to the text label. -->\n  <div class=\"novo-step-text-label\" *ngIf=\"_stringLabel()\">{{label}}</div>\n</div>\n<novo-step-status [state]=\"state\"></novo-step-status>\n",
                    host: {
                        class: 'novo-step-header',
                        role: 'tab',
                    },
                    preserveWhitespaces: false,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: ["@-webkit-keyframes rotate{0%{-webkit-transform:rotateZ(0);transform:rotateZ(0)}75%{-webkit-transform:rotateZ(200deg);transform:rotateZ(200deg)}100%{-webkit-transform:rotateZ(180deg);transform:rotateZ(180deg)}}@keyframes rotate{0%{-webkit-transform:rotateZ(0);transform:rotateZ(0)}75%{-webkit-transform:rotateZ(200deg);transform:rotateZ(200deg)}100%{-webkit-transform:rotateZ(180deg);transform:rotateZ(180deg)}}@-webkit-keyframes half-rotate{0%{-webkit-transform:rotateZ(45deg);transform:rotateZ(45deg)}75%{-webkit-transform:rotateZ(100deg);transform:rotateZ(100deg)}100%{-webkit-transform:rotateZ(90deg);transform:rotateZ(90deg)}}@keyframes half-rotate{0%{-webkit-transform:rotateZ(45deg);transform:rotateZ(45deg)}75%{-webkit-transform:rotateZ(100deg);transform:rotateZ(100deg)}100%{-webkit-transform:rotateZ(90deg);transform:rotateZ(90deg)}}@-webkit-keyframes rotateBack{0%{-webkit-transform:rotateZ(90deg);transform:rotateZ(90deg)}100%{-webkit-transform:rotateZ(0);transform:rotateZ(0)}}@keyframes rotateBack{0%{-webkit-transform:rotateZ(90deg);transform:rotateZ(90deg)}100%{-webkit-transform:rotateZ(0);transform:rotateZ(0)}}@-webkit-keyframes show{0%{opacity:0;-webkit-transform:translateX(-100%);transform:translateX(-100%)}75%{-webkit-transform:translateX(0);transform:translateX(0)}100%{opacity:1;-webkit-transform:translateX(0);transform:translateX(0)}}@keyframes show{0%{opacity:0;-webkit-transform:translateX(-100%);transform:translateX(-100%)}75%{-webkit-transform:translateX(0);transform:translateX(0)}100%{opacity:1;-webkit-transform:translateX(0);transform:translateX(0)}}.novo-step-header{overflow:visible;outline:0;cursor:pointer;position:relative}.novo-step-optional{font-size:12px}.novo-step-icon,.novo-step-icon-not-touched{border-radius:50%;height:24px;width:24px;align-items:center;justify-content:center;display:flex}.novo-step-icon .novo-step-number,.novo-step-icon-not-touched .novo-step-number{font-size:1em;min-width:1.6em;height:1.6em;box-shadow:2px 2px 0 rgba(0,0,0,.2);display:flex;align-items:center;justify-content:center;border-radius:4px}.novo-step-icon .novo-step-number{background:#4a89dc;color:#fff}.novo-step-icon-not-touched .novo-step-number{background:#a9adbb;color:#fff}.novo-step-label{display:inline-block;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;min-width:50px;vertical-align:middle;text-align:center;padding:4px 0}.novo-step-text-label{text-align:center;text-overflow:ellipsis;overflow:hidden}"]
                }] }
    ];
    /** @nocollapse */
    NovoStepHeader.ctorParameters = function () { return [
        { type: FocusMonitor },
        { type: ElementRef }
    ]; };
    NovoStepHeader.propDecorators = {
        theme: [{ type: Input }],
        color: [{ type: Input }],
        icon: [{ type: Input }],
        state: [{ type: Input }],
        label: [{ type: Input }],
        iconOverrides: [{ type: Input }],
        index: [{ type: Input }],
        selected: [{ type: Input }],
        active: [{ type: Input }],
        optional: [{ type: Input }]
    };
    return NovoStepHeader;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Animations used by the Novo steppers.
 * @type {?}
 */
var novoStepperAnimations = {
    /**
     * Animation that transitions the step along the X axis in a horizontal stepper.
     */
    horizontalStepTransition: trigger('stepTransition', [
        state('previous', style({ transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden' })),
        state('current', style({ transform: 'none', visibility: 'visible' })),
        state('next', style({ transform: 'translate3d(100%, 0, 0)', visibility: 'hidden' })),
        transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),
    ]),
    /**
     * Animation that transitions the step along the Y axis in a vertical stepper.
     */
    verticalStepTransition: trigger('stepTransition', [
        state('previous', style({ height: '0px', visibility: 'hidden' })),
        state('next', style({ height: '0px', visibility: 'hidden' })),
        state('current', style({ height: '*', visibility: 'visible' })),
        transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),
    ]),
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoStep = /** @class */ (function (_super) {
    __extends(NovoStep, _super);
    function NovoStep(stepper) {
        return _super.call(this, stepper) || this;
    }
    NovoStep.decorators = [
        { type: Component, args: [{
                    selector: 'novo-step',
                    template: "<ng-template><ng-content></ng-content></ng-template>\n",
                    preserveWhitespaces: false,
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    NovoStep.ctorParameters = function () { return [
        { type: CdkStepper, decorators: [{ type: Inject, args: [forwardRef(function () { return NovoStepper; }),] }] }
    ]; };
    NovoStep.propDecorators = {
        stepLabel: [{ type: ContentChild, args: [NovoStepLabel,] }],
        theme: [{ type: Input }],
        color: [{ type: Input }],
        icon: [{ type: Input }]
    };
    return NovoStep;
}(CdkStep));
var NovoStepper = /** @class */ (function (_super) {
    __extends(NovoStepper, _super);
    function NovoStepper() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Consumer-specified template-refs to be used to override the header icons.
         */
        _this._iconOverrides = {};
        return _this;
    }
    Object.defineProperty(NovoStepper.prototype, "completed", {
        get: /**
         * @return {?}
         */
        function () {
            try {
                /** @type {?} */
                var steps = this._steps.toArray();
                /** @type {?} */
                var length_1 = steps.length - 1;
                return steps[length_1].completed && length_1 === this.selectedIndex;
            }
            catch (err) {
                return false;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoStepper.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // Mark the component for change detection whenever the content children query changes
        this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(function () { return _this._stateChanged(); });
    };
    /**
     * @return {?}
     */
    NovoStepper.prototype.complete = /**
     * @return {?}
     */
    function () {
        try {
            /** @type {?} */
            var steps = this._steps.toArray();
            steps[this.selectedIndex].completed = true;
            this.next();
            this._stateChanged();
        }
        catch (err) {
            // do nothing
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    NovoStepper.prototype.getIndicatorType = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        /** @type {?} */
        var steps = this._steps.toArray();
        if (index === this.selectedIndex) {
            if (steps[index] && index === steps.length - 1 && steps[index].completed) {
                return 'done';
            }
            return 'edit';
        }
        if (index < this.selectedIndex) {
            return 'done';
        }
        return 'none';
    };
    NovoStepper.decorators = [
        { type: Directive, args: [{
                    selector: '[novoStepper]',
                },] }
    ];
    NovoStepper.propDecorators = {
        _stepHeader: [{ type: ViewChildren, args: [NovoStepHeader,] }],
        _steps: [{ type: ContentChildren, args: [NovoStep,] }],
        _icons: [{ type: ContentChildren, args: [NovoIconComponent,] }]
    };
    return NovoStepper;
}(CdkStepper));
var NovoHorizontalStepper = /** @class */ (function (_super) {
    __extends(NovoHorizontalStepper, _super);
    function NovoHorizontalStepper() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NovoHorizontalStepper.decorators = [
        { type: Component, args: [{
                    selector: 'novo-horizontal-stepper',
                    template: "<div class=\"novo-horizontal-stepper-header-container\">\n    <div class=\"novo-stepper-horizontal-line complete\"></div>\n  <ng-container *ngFor=\"let step of _steps; let i = index; let isLast = last\">\n    <novo-step-header  class=\"novo-horizontal-stepper-header\"\n                     (click)=\"step.select()\"\n                     (keydown)=\"_onKeydown($event)\"\n                     [tabIndex]=\"_getFocusIndex() === i ? 0 : -1\"\n                     [id]=\"_getStepLabelId(i)\"\n                     [attr.aria-controls]=\"_getStepContentId(i)\"\n                     [attr.aria-selected]=\"selectedIndex == i\"\n                     [index]=\"i\"\n                     [theme]=\"step.theme\"\n                     [color]=\"step.color\"\n                     [icon]=\"step.icon\"\n                     [state]=\"getIndicatorType(i)\"\n                     [label]=\"step.stepLabel || step.label\"\n                     [selected]=\"selectedIndex === i\"\n                     [active]=\"step.completed || selectedIndex === i || !linear\"\n                     [optional]=\"step.optional\"\n                     [iconOverrides]=\"_iconOverrides\">\n    </novo-step-header>\n  </ng-container>\n  <div class=\"novo-stepper-horizontal-line\" [class.complete]=\"completed\"></div>\n</div>\n\n<div class=\"novo-horizontal-content-container\">\n  <div *ngFor=\"let step of _steps; let i = index\"\n       class=\"novo-horizontal-stepper-content\" role=\"tabpanel\"\n       [@stepTransition]=\"_getAnimationDirection(i)\"\n       [id]=\"_getStepContentId(i)\"\n       [attr.aria-labelledby]=\"_getStepLabelId(i)\"\n       [attr.aria-expanded]=\"selectedIndex === i\">\n    <ng-container [ngTemplateOutlet]=\"step.content\"></ng-container>\n  </div>\n</div>\n",
                    host: {
                        class: 'novo-stepper-horizontal',
                        'aria-orientation': 'horizontal',
                        role: 'tablist',
                    },
                    animations: [novoStepperAnimations.horizontalStepTransition],
                    providers: [{ provide: NovoStepper, useExisting: NovoHorizontalStepper }],
                    // encapsulation: ViewEncapsulation.None,
                    preserveWhitespaces: false,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: ["@-webkit-keyframes rotate{0%{-webkit-transform:rotateZ(0);transform:rotateZ(0)}75%{-webkit-transform:rotateZ(200deg);transform:rotateZ(200deg)}100%{-webkit-transform:rotateZ(180deg);transform:rotateZ(180deg)}}@keyframes rotate{0%{-webkit-transform:rotateZ(0);transform:rotateZ(0)}75%{-webkit-transform:rotateZ(200deg);transform:rotateZ(200deg)}100%{-webkit-transform:rotateZ(180deg);transform:rotateZ(180deg)}}@-webkit-keyframes half-rotate{0%{-webkit-transform:rotateZ(45deg);transform:rotateZ(45deg)}75%{-webkit-transform:rotateZ(100deg);transform:rotateZ(100deg)}100%{-webkit-transform:rotateZ(90deg);transform:rotateZ(90deg)}}@keyframes half-rotate{0%{-webkit-transform:rotateZ(45deg);transform:rotateZ(45deg)}75%{-webkit-transform:rotateZ(100deg);transform:rotateZ(100deg)}100%{-webkit-transform:rotateZ(90deg);transform:rotateZ(90deg)}}@-webkit-keyframes rotateBack{0%{-webkit-transform:rotateZ(90deg);transform:rotateZ(90deg)}100%{-webkit-transform:rotateZ(0);transform:rotateZ(0)}}@keyframes rotateBack{0%{-webkit-transform:rotateZ(90deg);transform:rotateZ(90deg)}100%{-webkit-transform:rotateZ(0);transform:rotateZ(0)}}@-webkit-keyframes show{0%{opacity:0;-webkit-transform:translateX(-100%);transform:translateX(-100%)}75%{-webkit-transform:translateX(0);transform:translateX(0)}100%{opacity:1;-webkit-transform:translateX(0);transform:translateX(0)}}@keyframes show{0%{opacity:0;-webkit-transform:translateX(-100%);transform:translateX(-100%)}75%{-webkit-transform:translateX(0);transform:translateX(0)}100%{opacity:1;-webkit-transform:translateX(0);transform:translateX(0)}}.novo-stepper-horizontal,.novo-stepper-vertical{display:block}.novo-horizontal-stepper-header-container{white-space:nowrap;display:flex;align-items:center;justify-content:center;margin-bottom:1em;background:#f4f4f4}.novo-stepper-horizontal-line{border-bottom:1px solid #d9dadc;flex:auto;min-width:0;height:80px}.novo-stepper-horizontal-line.complete{border-bottom:1px solid #4a89dc}.novo-horizontal-stepper-header{display:flex;height:80px;flex-flow:column;overflow:visible;align-items:center;justify-content:center;padding:0 24px}.novo-horizontal-stepper-header .novo-step-status{display:flex;width:100%;justify-content:center;align-items:center;position:absolute;height:1px;bottom:0}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line{width:100%;position:absolute}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line:before{content:'';display:block;width:calc(50% - 8px);margin-right:8px;border-bottom:1px solid #d9dadc}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line:after{content:'';display:block;width:calc(50% - 8px);margin-left:calc(50% + 8px);margin-top:-1px;border-top:1px solid #d9dadc}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line.done:before,.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line.edit:before{border-bottom:1px solid #4a89dc}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line.done:after{border-top:1px solid #4a89dc}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-icon{position:relative}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-icon:before{content:'';display:block;background:#fff;border-radius:50%;position:absolute;z-index:0;top:1px;left:1px;bottom:1px;right:1px}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-icon>*{position:relative;z-index:1}.novo-vertical-stepper-header{display:flex;align-items:center;padding:24px;max-height:24px}.novo-vertical-stepper-header .novo-step-icon,.novo-vertical-stepper-header .novo-step-icon-not-touched{margin-right:12px}[dir=rtl] .novo-vertical-stepper-header .novo-step-icon,[dir=rtl] .novo-vertical-stepper-header .novo-step-icon-not-touched{margin-right:0;margin-left:12px}.novo-horizontal-stepper-content{overflow:hidden}.novo-horizontal-stepper-content[aria-expanded=false]{height:0}.novo-horizontal-content-container{overflow:hidden;padding:0 24px 24px}.novo-vertical-content-container{margin-left:36px;border:0;position:relative}[dir=rtl] .novo-vertical-content-container{margin-left:0;margin-right:36px}.novo-stepper-vertical-line:before{content:'';position:absolute;top:-16px;bottom:-16px;left:0;z-index:-1;border-left:1px solid #d9dadc}[dir=rtl] .novo-stepper-vertical-line:before{left:auto;right:0}.novo-stepper-vertical-line.done:after,.novo-stepper-vertical-line.done:before,.novo-stepper-vertical-line.edit:before{border-left-color:1px solid #4a89dc}.novo-stepper-vertical novo-step-status{position:absolute;left:35px;top:25px;-webkit-transform:scale(.8);transform:scale(.8)}.novo-vertical-stepper-content{overflow:hidden}.novo-vertical-content{padding:0 24px 24px}.novo-step:last-child .novo-vertical-content-container{border:none}"]
                }] }
    ];
    NovoHorizontalStepper.propDecorators = {
        selectedIndex: [{ type: Input }]
    };
    return NovoHorizontalStepper;
}(NovoStepper));
var NovoVerticalStepper = /** @class */ (function (_super) {
    __extends(NovoVerticalStepper, _super);
    function NovoVerticalStepper(dir, changeDetectorRef) {
        var _this = _super.call(this, dir, changeDetectorRef) || this;
        _this._orientation = 'vertical';
        return _this;
    }
    NovoVerticalStepper.decorators = [
        { type: Component, args: [{
                    selector: 'novo-vertical-stepper',
                    template: "<div class=\"novo-step\" *ngFor=\"let step of _steps; let i = index; let isLast = last\">\n    <novo-step-header  class=\"novo-vertical-stepper-header\"\n                     (click)=\"step.select()\"\n                     (keydown)=\"_onKeydown($event)\"\n                     [tabIndex]=\"_getFocusIndex() == i ? 0 : -1\"\n                     [id]=\"_getStepLabelId(i)\"\n                     [attr.aria-controls]=\"_getStepContentId(i)\"\n                     [attr.aria-selected]=\"selectedIndex === i\"\n                     [index]=\"i\"\n                     [theme]=\"step.theme\"\n                     [color]=\"step.color\"\n                     [icon]=\"step.icon\"\n                     [state]=\"getIndicatorType(i)\"\n                     [label]=\"step.stepLabel || step.label\"\n                     [selected]=\"selectedIndex === i\"\n                     [active]=\"step.completed || selectedIndex === i || !linear\"\n                     [optional]=\"step.optional\"\n                     [iconOverrides]=\"_iconOverrides\">\n    </novo-step-header>\n\n    <div class=\"novo-vertical-content-container\" [class.novo-stepper-vertical-line]=\"!isLast\" [ngClass]=\"getIndicatorType(i)\">\n      <div class=\"novo-vertical-stepper-content\" role=\"tabpanel\"\n           [@stepTransition]=\"_getAnimationDirection(i)\"\n           [id]=\"_getStepContentId(i)\"\n           [attr.aria-labelledby]=\"_getStepLabelId(i)\"\n           [attr.aria-expanded]=\"selectedIndex === i\">\n        <div class=\"novo-vertical-content\">\n          <ng-container [ngTemplateOutlet]=\"step.content\"></ng-container>\n        </div>\n      </div>\n    </div>\n  </div>\n",
                    host: {
                        class: 'novo-stepper-vertical',
                        'aria-orientation': 'vertical',
                        role: 'tablist',
                    },
                    animations: [novoStepperAnimations.verticalStepTransition],
                    providers: [{ provide: NovoStepper, useExisting: NovoVerticalStepper }],
                    preserveWhitespaces: false,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: ["@-webkit-keyframes rotate{0%{-webkit-transform:rotateZ(0);transform:rotateZ(0)}75%{-webkit-transform:rotateZ(200deg);transform:rotateZ(200deg)}100%{-webkit-transform:rotateZ(180deg);transform:rotateZ(180deg)}}@keyframes rotate{0%{-webkit-transform:rotateZ(0);transform:rotateZ(0)}75%{-webkit-transform:rotateZ(200deg);transform:rotateZ(200deg)}100%{-webkit-transform:rotateZ(180deg);transform:rotateZ(180deg)}}@-webkit-keyframes half-rotate{0%{-webkit-transform:rotateZ(45deg);transform:rotateZ(45deg)}75%{-webkit-transform:rotateZ(100deg);transform:rotateZ(100deg)}100%{-webkit-transform:rotateZ(90deg);transform:rotateZ(90deg)}}@keyframes half-rotate{0%{-webkit-transform:rotateZ(45deg);transform:rotateZ(45deg)}75%{-webkit-transform:rotateZ(100deg);transform:rotateZ(100deg)}100%{-webkit-transform:rotateZ(90deg);transform:rotateZ(90deg)}}@-webkit-keyframes rotateBack{0%{-webkit-transform:rotateZ(90deg);transform:rotateZ(90deg)}100%{-webkit-transform:rotateZ(0);transform:rotateZ(0)}}@keyframes rotateBack{0%{-webkit-transform:rotateZ(90deg);transform:rotateZ(90deg)}100%{-webkit-transform:rotateZ(0);transform:rotateZ(0)}}@-webkit-keyframes show{0%{opacity:0;-webkit-transform:translateX(-100%);transform:translateX(-100%)}75%{-webkit-transform:translateX(0);transform:translateX(0)}100%{opacity:1;-webkit-transform:translateX(0);transform:translateX(0)}}@keyframes show{0%{opacity:0;-webkit-transform:translateX(-100%);transform:translateX(-100%)}75%{-webkit-transform:translateX(0);transform:translateX(0)}100%{opacity:1;-webkit-transform:translateX(0);transform:translateX(0)}}.novo-stepper-horizontal,.novo-stepper-vertical{display:block}.novo-horizontal-stepper-header-container{white-space:nowrap;display:flex;align-items:center;justify-content:center;margin-bottom:1em;background:#f4f4f4}.novo-stepper-horizontal-line{border-bottom:1px solid #d9dadc;flex:auto;min-width:0;height:80px}.novo-stepper-horizontal-line.complete{border-bottom:1px solid #4a89dc}.novo-horizontal-stepper-header{display:flex;height:80px;flex-flow:column;overflow:visible;align-items:center;justify-content:center;padding:0 24px}.novo-horizontal-stepper-header .novo-step-status{display:flex;width:100%;justify-content:center;align-items:center;position:absolute;height:1px;bottom:0}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line{width:100%;position:absolute}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line:before{content:'';display:block;width:calc(50% - 8px);margin-right:8px;border-bottom:1px solid #d9dadc}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line:after{content:'';display:block;width:calc(50% - 8px);margin-left:calc(50% + 8px);margin-top:-1px;border-top:1px solid #d9dadc}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line.done:before,.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line.edit:before{border-bottom:1px solid #4a89dc}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line.done:after{border-top:1px solid #4a89dc}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-icon{position:relative}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-icon:before{content:'';display:block;background:#fff;border-radius:50%;position:absolute;z-index:0;top:1px;left:1px;bottom:1px;right:1px}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-icon>*{position:relative;z-index:1}.novo-vertical-stepper-header{display:flex;align-items:center;padding:24px;max-height:24px}.novo-vertical-stepper-header .novo-step-icon,.novo-vertical-stepper-header .novo-step-icon-not-touched{margin-right:12px}[dir=rtl] .novo-vertical-stepper-header .novo-step-icon,[dir=rtl] .novo-vertical-stepper-header .novo-step-icon-not-touched{margin-right:0;margin-left:12px}.novo-horizontal-stepper-content{overflow:hidden}.novo-horizontal-stepper-content[aria-expanded=false]{height:0}.novo-horizontal-content-container{overflow:hidden;padding:0 24px 24px}.novo-vertical-content-container{margin-left:36px;border:0;position:relative}[dir=rtl] .novo-vertical-content-container{margin-left:0;margin-right:36px}.novo-stepper-vertical-line:before{content:'';position:absolute;top:-16px;bottom:-16px;left:0;z-index:-1;border-left:1px solid #d9dadc}[dir=rtl] .novo-stepper-vertical-line:before{left:auto;right:0}.novo-stepper-vertical-line.done:after,.novo-stepper-vertical-line.done:before,.novo-stepper-vertical-line.edit:before{border-left-color:1px solid #4a89dc}.novo-stepper-vertical novo-step-status{position:absolute;left:35px;top:25px;-webkit-transform:scale(.8);transform:scale(.8)}.novo-vertical-stepper-content{overflow:hidden}.novo-vertical-content{padding:0 24px 24px}.novo-step:last-child .novo-vertical-content-container{border:none}"]
                }] }
    ];
    /** @nocollapse */
    NovoVerticalStepper.ctorParameters = function () { return [
        { type: Directionality, decorators: [{ type: Optional }] },
        { type: ChangeDetectorRef }
    ]; };
    NovoVerticalStepper.propDecorators = {
        selectedIndex: [{ type: Input }]
    };
    return NovoVerticalStepper;
}(NovoStepper));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoStepStatus = /** @class */ (function () {
    function NovoStepStatus(stepper, step) {
    }
    NovoStepStatus.decorators = [
        { type: Component, args: [{
                    selector: 'novo-step-status',
                    template: "<div class=\"novo-stepper-status-line\" [ngClass]=\"state\"></div>\n<div [ngSwitch]=\"state\" class=\"novo-stepper-status-icon\">\n  <novo-icon size=\"small\" color=\"positive\" *ngSwitchCase=\"'edit'\">check-circle</novo-icon>\n  <novo-icon size=\"small\" color=\"positive\" *ngSwitchCase=\"'done'\">check-circle-filled</novo-icon>\n  <novo-icon size=\"small\" color=\"positive\" *ngSwitchDefault>circle-o</novo-icon>\n</div>\n",
                    // encapsulation: ViewEncapsulation.None,
                    preserveWhitespaces: false,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        class: 'novo-step-status',
                    }
                }] }
    ];
    /** @nocollapse */
    NovoStepStatus.ctorParameters = function () { return [
        { type: NovoStepper, decorators: [{ type: Inject, args: [forwardRef(function () { return NovoStepper; }),] }] },
        { type: NovoStepHeader, decorators: [{ type: Inject, args: [forwardRef(function () { return NovoStepHeader; }),] }] }
    ]; };
    NovoStepStatus.propDecorators = {
        state: [{ type: Input }]
    };
    return NovoStepStatus;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoStepperModule = /** @class */ (function () {
    function NovoStepperModule() {
    }
    NovoStepperModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, PortalModule, NovoButtonModule, CdkStepperModule, NovoIconModule, A11yModule],
                    exports: [NovoHorizontalStepper, NovoVerticalStepper, NovoStep, NovoStepLabel, NovoStepper, NovoStepHeader, NovoStepStatus],
                    declarations: [NovoHorizontalStepper, NovoVerticalStepper, NovoStep, NovoStepLabel, NovoStepper, NovoStepHeader, NovoStepStatus],
                },] }
    ];
    return NovoStepperModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoCategoryDropdownElement = /** @class */ (function (_super) {
    __extends(NovoCategoryDropdownElement, _super);
    function NovoCategoryDropdownElement(element, labels) {
        var _this = _super.call(this, element) || this;
        _this.labels = labels;
        _this._query = '';
        _this._categoryMap = {};
        _this._categories = [];
        // Boolean to keep the selection persist when closing the dropdown
        _this.persistSelection = false;
        // Boolean to close the dropdown on selection
        _this.closeOnSelect = false;
        // Event that is emitted whenever an item is selected
        _this._select = new EventEmitter();
        // Event that is emitted whenever a category is selected
        _this.categorySelected = new EventEmitter();
        _this.clickHandler = _this.toggleActive.bind(_this);
        return _this;
    }
    Object.defineProperty(NovoCategoryDropdownElement.prototype, "categories", {
        set: /**
         * @param {?} categories
         * @return {?}
         */
        function (categories) {
            this._masterCategoryMap = Object.assign({}, categories);
            this._categoryMap = Object.assign({}, categories);
            this._categories = Object.keys(categories);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoCategoryDropdownElement.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var button = this.element.nativeElement.querySelector('button');
        button.addEventListener('click', this.clickHandler);
    };
    /**
     * @return {?}
     */
    NovoCategoryDropdownElement.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var button = this.element.nativeElement.querySelector('button');
        if (button) {
            button.removeEventListener('click', this.clickHandler);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoCategoryDropdownElement.prototype.onKeyDown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.active && (event.keyCode === KeyCodes.ESC || event.keyCode === KeyCodes.ENTER)) {
            this.toggleActive();
        }
    };
    /**
     * @return {?}
     */
    NovoCategoryDropdownElement.prototype.clearSelection = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._categories.forEach(function (category) {
            _this._categoryMap[category].forEach(function (item) {
                item.selected = false;
            });
        });
    };
    /**
     * @param {?} event
     * @param {?} item
     * @return {?}
     */
    NovoCategoryDropdownElement.prototype.select = /**
     * @param {?} event
     * @param {?} item
     * @return {?}
     */
    function (event, item) {
        Helpers.swallowEvent(event);
        // If we persist the selection, clear and show a check
        if (this.persistSelection) {
            this.clearSelection();
            item.selected = true;
        }
        // Emit the item
        this._select.emit(item);
        // Close, if input is set
        if (this.closeOnSelect) {
            this.toggleActive();
        }
    };
    /**
     * @param {?} category
     * @return {?}
     */
    NovoCategoryDropdownElement.prototype.onCategorySelected = /**
     * @param {?} category
     * @return {?}
     */
    function (category) {
        this.categorySelected.emit(category);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoCategoryDropdownElement.prototype.clearQuery = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        Helpers.swallowEvent(event);
        this._query = '';
        // Reset the categories
        this._categories.forEach(function (category) {
            _this._categoryMap[category] = _this._masterCategoryMap[category];
        });
    };
    /**
     * @param {?} query
     * @return {?}
     */
    NovoCategoryDropdownElement.prototype.queryCategories = /**
     * @param {?} query
     * @return {?}
     */
    function (query$$1) {
        var _this = this;
        // Save the query
        this._query = query$$1;
        // Check timeout
        if (this._queryTimeout) {
            clearTimeout(this._queryTimeout);
        }
        // Store a timeout, to debounce user input
        this._queryTimeout = setTimeout(function () {
            _this._categories.forEach(function (category) {
                if (_this.search.compare) {
                    _this._categoryMap[category] = _this._masterCategoryMap[category].filter(function (item) { return _this.search.compare(query$$1, item); });
                }
                else {
                    _this._categoryMap[category] = _this._masterCategoryMap[category].filter(function (item) { return ~item.label.toLowerCase().indexOf(query$$1.toLowerCase()); });
                }
            });
        }, this.search.debounce || 300);
    };
    /**
     * @param {?} event
     * @param {?} link
     * @return {?}
     */
    NovoCategoryDropdownElement.prototype.executeClickCallback = /**
     * @param {?} event
     * @param {?} link
     * @return {?}
     */
    function (event, link) {
        link.callback(event);
        // Close, if input is set
        if (this.closeOnSelect) {
            this.toggleActive();
        }
    };
    NovoCategoryDropdownElement.decorators = [
        { type: Component, args: [{
                    selector: 'novo-category-dropdown',
                    template: "\n        <ng-content select=\"button\"></ng-content>\n        <div class=\"dropdown-container\" *ngIf=\"active\">\n            <div class=\"novo-category-dropdown-search\" *ngIf=\"search\" data-automation-id=\"novo-category-dropdown-search\">\n                <input type=\"text\" [placeholder]=\"search.placeholder || labels.search\" [value]=\"_query\" (input)=\"queryCategories($event.target.value)\"/>\n                <i class=\"bhi-search\" *ngIf=\"!_query\"></i>\n                <i class=\"bhi-times\" *ngIf=\"_query\" (click)=\"clearQuery($event)\"></i>\n            </div>\n            <novo-nav theme=\"white\" [outlet]=\"novoCategoryDropdownOutlet\" direction=\"vertical\">\n                <novo-tab *ngFor=\"let category of _categories\" [attr.data-automation-id]=\"category\" (activeChange)=\"onCategorySelected(category)\">\n                    <span>{{ category }} ({{ _categoryMap[category].length }})</span>\n                </novo-tab>\n            </novo-nav>\n            <novo-nav-outlet #novoCategoryDropdownOutlet>\n                <novo-nav-content *ngFor=\"let category of _categories\">\n                    <novo-list direction=\"vertical\">\n                        <novo-list-item *ngFor=\"let item of _categoryMap[category]\" (click)=\"select($event, item)\" [attr.data-automation-id]=\"item.label\">\n                            <item-content>{{ item.label }}</item-content>\n                            <item-end class=\"novo-category-dropdown-hover\" *ngIf=\"item.hoverText && !item.selected\">{{ item.hoverText }}</item-end>\n                            <item-end class=\"novo-category-dropdown-hover\" *ngIf=\"item.hoverIcon && !item.selected\"><i class=\"bhi-{{ item.hoverIcon }}\"></i></item-end>\n                            <item-end *ngIf=\"item.selected\"><i class=\"bhi-check\"></i></item-end>\n                        </novo-list-item>\n                        <novo-list-item *ngIf=\"_categoryMap[category].length === 0 && search\" class=\"novo-category-dropdown-empty-item\">\n                            <item-content>{{ search.emptyMessage || labels.noItems }}</item-content>\n                        </novo-list-item>\n                    </novo-list>\n                </novo-nav-content>\n            </novo-nav-outlet>\n            <footer *ngIf=\"footer\" class=\"novo-category-dropdown-footer-align-{{ footer.align || 'right' }}\">\n                <a *ngFor=\"let link of footer.links\" (click)=\"executeClickCallback($event, link)\">{{ link.label }}</a>\n            </footer>\n        </div>\n    ",
                    host: {
                        '(keydown)': 'onKeyDown($event)',
                        '[class.active]': 'active',
                    }
                }] }
    ];
    /** @nocollapse */
    NovoCategoryDropdownElement.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NovoLabelService }
    ]; };
    NovoCategoryDropdownElement.propDecorators = {
        persistSelection: [{ type: Input }],
        closeOnSelect: [{ type: Input }],
        search: [{ type: Input }],
        footer: [{ type: Input }],
        _select: [{ type: Output, args: ['itemSelected',] }],
        categorySelected: [{ type: Output }],
        categories: [{ type: Input }]
    };
    return NovoCategoryDropdownElement;
}(OutsideClick));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoCategoryDropdownModule = /** @class */ (function () {
    function NovoCategoryDropdownModule() {
    }
    NovoCategoryDropdownModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, NovoTabModule, NovoListModule],
                    declarations: [NovoCategoryDropdownElement],
                    exports: [NovoCategoryDropdownElement],
                },] }
    ];
    return NovoCategoryDropdownModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Value accessor for the component (supports ngModel)
/** @type {?} */
var CHIPS_VALUE_ACCESSOR$2 = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NovoMultiPickerElement; }),
    multi: true,
};
var NovoMultiPickerElement = /** @class */ (function () {
    function NovoMultiPickerElement(element, labels) {
        this.element = element;
        this.labels = labels;
        this.placeholder = '';
        this.changed = new EventEmitter();
        this.focus = new EventEmitter();
        this.blur = new EventEmitter();
        this.items = [];
        this._items = new ReplaySubject(1);
        this.selected = null;
        this.config = {};
        // private data model
        this._value = {};
        this.notShown = {};
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
        this.chipsCount = 4;
    }
    Object.defineProperty(NovoMultiPickerElement.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        set: /**
         * @param {?} selectedItems
         * @return {?}
         */
        function (selectedItems) {
            var _this = this;
            if (selectedItems) {
                this.types.forEach(function (x) { return (_this._value[x.value] = selectedItems[x.value]); });
            }
            else {
                this._value = {};
                this.types.forEach(function (x) { return (_this._value[x.value] = []); });
            }
            this.changed.emit(selectedItems);
            this.onModelChange(selectedItems);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoMultiPickerElement.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.selectAllOption = this.source.selectAllOption || false;
        this.chipsCount = this.source.chipsCount || 4;
        this.strictRelationship = this.source.strictRelationship || false;
        this.setupOptions();
    };
    /**
     * @return {?}
     */
    NovoMultiPickerElement.prototype.clearValue = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.types.forEach(function (type) { return _this.modifyAllOfType(type.value, 'unselect'); });
        this.items = [];
        this._items.next(this.items);
        this.value = this.setInitialValue(null);
        this.onModelChange(this.value);
    };
    /**
     * @param {?} event
     * @param {?} item
     * @return {?}
     */
    NovoMultiPickerElement.prototype.removeFromDisplay = /**
     * @param {?} event
     * @param {?} item
     * @return {?}
     */
    function (event, item) {
        this.remove(true, item);
        this.modifyAffectedParentsOrChildren(false, item);
    };
    /**
     * @return {?}
     */
    NovoMultiPickerElement.prototype.setupOptions = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.options = this.source.options || [];
        this._options = [];
        if (this.options) {
            this.options.forEach(function (option) {
                /** @type {?} */
                var formattedOption = _this.setupOptionsByType(option);
                _this._options.push(formattedOption);
            });
        }
        this.source.options = this._options;
    };
    /**
     * @param {?} section
     * @return {?}
     */
    NovoMultiPickerElement.prototype.setupOptionsByType = /**
     * @param {?} section
     * @return {?}
     */
    function (section) {
        var _this = this;
        /** @type {?} */
        var formattedSection = {
            type: section.type,
            label: section.label || section.type,
        };
        formattedSection.data = section.data.map(function (item) {
            return _this.formatOption(section, item);
        });
        if (this.selectAllOption) {
            /** @type {?} */
            var selectAll = this.createSelectAllOption(section);
            formattedSection.data.splice(0, 0, selectAll);
        }
        formattedSection.originalData = formattedSection.data.slice();
        return formattedSection;
    };
    /**
     * @param {?} section
     * @param {?} item
     * @return {?}
     */
    NovoMultiPickerElement.prototype.formatOption = /**
     * @param {?} section
     * @param {?} item
     * @return {?}
     */
    function (section, item) {
        /** @type {?} */
        var obj = {
            value: section.field ? item[section.field] : item.value || item,
            label: section.format ? Helpers.interpolate(section.format, item) : item.label || String(item.value || item),
            type: section.type,
            checked: undefined,
            isParentOf: section.isParentOf,
            isChildOf: section.isChildOf,
        };
        if (obj.isChildOf) {
            obj[section.isChildOf] = item[section.isChildOf];
        }
        return obj;
    };
    /**
     * @param {?} section
     * @return {?}
     */
    NovoMultiPickerElement.prototype.createSelectAllOption = /**
     * @param {?} section
     * @return {?}
     */
    function (section) {
        /** @type {?} */
        var selectAll = {
            value: 'ALL',
            label: "All " + section.type,
            type: section.type,
            checked: this.model && this.model.length && this.model.indexOf('ALL') !== -1,
            isParentOf: section.isParentOf,
            isChildOf: section.isChildOf,
        };
        if (section.isChildOf) {
            /** @type {?} */
            var allParents = section.data.reduce(function (accum, next) {
                return accum.concat(next[section.isChildOf]);
            }, []);
            selectAll[section.isChildOf] = allParents;
        }
        return selectAll;
    };
    /**
     * @return {?}
     */
    NovoMultiPickerElement.prototype.deselectAll = /**
     * @return {?}
     */
    function () {
        this.selected = null;
    };
    /**
     * @param {?} event
     * @param {?} item
     * @return {?}
     */
    NovoMultiPickerElement.prototype.select = /**
     * @param {?} event
     * @param {?} item
     * @return {?}
     */
    function (event, item) {
        this.blur.emit(event);
        this.deselectAll();
        this.selected = item;
    };
    /**
     * @param {?} e
     * @return {?}
     */
    NovoMultiPickerElement.prototype.onFocus = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.element.nativeElement.classList.add('selected');
        this.focus.emit(e);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoMultiPickerElement.prototype.clickOption = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event && !(event instanceof Event)) {
            if (event.checked === false) {
                this.remove(null, event);
            }
            else {
                this.add(event);
            }
            this.modifyAffectedParentsOrChildren(event.checked, event);
            // Set focus on the picker
            /** @type {?} */
            var input = this.element.nativeElement.querySelector('novo-picker > input');
            if (input) {
                input.focus();
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoMultiPickerElement.prototype.add = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.value === 'ALL') {
            this.modifyAllOfType(event.type, 'select');
        }
        else {
            this.updateDisplayItems(event, 'add');
            this.value[event.type].push(event.value);
            this.updateAllItemState(event.type);
            this.triggerValueUpdate();
        }
        this.updateParentOrChildren(event, 'select');
        this.select(null, event);
    };
    /**
     * @param {?} type
     * @return {?}
     */
    NovoMultiPickerElement.prototype.updateAllItemState = /**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        /** @type {?} */
        var allOfType = this.getAllOfType(type);
        /** @type {?} */
        var allOfTypeSelected = this.allItemsSelected(allOfType, type);
        if (allOfTypeSelected) {
            this.selectAll(allOfType, type);
        }
        return { allOfType: allOfType, allOfTypeSelected: allOfTypeSelected };
    };
    /**
     * @param {?} allOfType
     * @param {?} status
     * @return {?}
     */
    NovoMultiPickerElement.prototype.setIndeterminateState = /**
     * @param {?} allOfType
     * @param {?} status
     * @return {?}
     */
    function (allOfType, status) {
        if (!this.selectAllOption) {
            return;
        }
        /** @type {?} */
        var allItem = allOfType[0];
        allItem.indeterminate = status;
    };
    /**
     * @param {?} item
     * @param {?} action
     * @return {?}
     */
    NovoMultiPickerElement.prototype.updateDisplayItems = /**
     * @param {?} item
     * @param {?} action
     * @return {?}
     */
    function (item, action) {
        /** @type {?} */
        var adding = action === 'add';
        if (adding) {
            this.items.push(item);
        }
        else {
            if (this.items.indexOf(item) > -1) {
                this.items.splice(this.items.indexOf(item), 1);
            }
        }
        this.updateDisplayText(this.items);
        this._items.next(this.items);
    };
    /**
     * @param {?} items
     * @return {?}
     */
    NovoMultiPickerElement.prototype.updateDisplayText = /**
     * @param {?} items
     * @return {?}
     */
    function (items) {
        var _this = this;
        this.notShown = [];
        /** @type {?} */
        var notShown = items.slice(this.chipsCount);
        if (notShown.length > 0) {
            this.types.forEach(function (type) {
                /** @type {?} */
                var count;
                /** @type {?} */
                var selectedOfType = notShown.filter(function (x) { return x.type === type.value; });
                if (selectedOfType.length === 1 && selectedOfType[0].value === 'ALL') {
                    count = _this.getAllOfType(type.value).length - 1;
                }
                else {
                    count = selectedOfType.length;
                }
                /** @type {?} */
                var displayType = count === 1 ? type.singular : type.plural || type.value;
                if (count > 0) {
                    _this.notShown.push({ type: displayType, count: count });
                }
            });
        }
    };
    /**
     * @param {?} event
     * @param {?} item
     * @return {?}
     */
    NovoMultiPickerElement.prototype.remove = /**
     * @param {?} event
     * @param {?} item
     * @return {?}
     */
    function (event, item) {
        /** @type {?} */
        var triggeredByEvent;
        if (event) {
            triggeredByEvent = true;
        }
        /** @type {?} */
        var itemToRemove = item;
        if (itemToRemove.value === 'ALL') {
            triggeredByEvent = false;
            this.modifyAllOfType(itemToRemove.type, 'unselect');
        }
        else if (this.allOfTypeSelected(itemToRemove.type)) {
            this.handleRemoveItemIfAllSelected(itemToRemove);
        }
        this.removeItem(item, triggeredByEvent);
    };
    /**
     * @param {?} item
     * @param {?=} triggeredByEvent
     * @return {?}
     */
    NovoMultiPickerElement.prototype.removeItem = /**
     * @param {?} item
     * @param {?=} triggeredByEvent
     * @return {?}
     */
    function (item, triggeredByEvent) {
        item.checked = false;
        this.deselectAll();
        this.removeValue(item);
        if (item.value !== 'ALL') {
            this.updateParentOrChildren(item, 'unselect');
        }
        if (triggeredByEvent) {
            this.modifyAffectedParentsOrChildren(false, item);
        }
    };
    /**
     * @param {?} item
     * @return {?}
     */
    NovoMultiPickerElement.prototype.removeValue = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        /** @type {?} */
        var updatedValues = this.value[item.type].filter(function (x) { return x !== item.value; });
        this.value[item.type] = updatedValues;
        this.triggerValueUpdate();
        this.updateDisplayItems(item, 'remove');
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoMultiPickerElement.prototype.onKeyDown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.keyCode === KeyCodes.BACKSPACE) {
            if (event.target && event.target.value.length === 0 && this.items.length) {
                if (event) {
                    event.stopPropagation();
                    event.preventDefault();
                }
                if (this.selected) {
                    this.remove(null, this.selected);
                }
                else {
                    this.select(event, this.items[this.items.length - 1]);
                }
            }
        }
    };
    /**
     * @param {?} type
     * @return {?}
     */
    NovoMultiPickerElement.prototype.allOfTypeSelected = /**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        return this.items.filter(function (x) { return x.type === type && x.value === 'ALL'; }).length > 0;
    };
    /**
     * @param {?} type
     * @param {?} action
     * @return {?}
     */
    NovoMultiPickerElement.prototype.modifyAllOfType = /**
     * @param {?} type
     * @param {?} action
     * @return {?}
     */
    function (type, action) {
        /** @type {?} */
        var selecting = action === 'select';
        /** @type {?} */
        var allOfType = this.getAllOfType(type);
        allOfType.forEach(function (item) {
            item.checked = selecting;
            item.indeterminate = false;
        });
        if (selecting) {
            this.selectAll(allOfType, type);
        }
        else {
            this.items = __spread(this.items.filter(function (x) { return x.type !== type; }));
            this._items.next(this.items);
            this.value[type] = [];
        }
        if (this.selectAllOption) {
            this.updateAllParentsOrChildren(allOfType[0], action);
        }
        this.triggerValueUpdate();
    };
    /**
     * @return {?}
     */
    NovoMultiPickerElement.prototype.triggerValueUpdate = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var updatedObject = {};
        this.types.forEach(function (x) { return (updatedObject[x.value] = _this.value[x.value]); });
        this.value = updatedObject;
    };
    /**
     * @param {?} allOfType
     * @param {?} type
     * @return {?}
     */
    NovoMultiPickerElement.prototype.selectAll = /**
     * @param {?} allOfType
     * @param {?} type
     * @return {?}
     */
    function (allOfType, type) {
        if (!this.selectAllOption) {
            return;
        }
        allOfType[0].checked = true;
        /** @type {?} */
        var values = allOfType.map(function (i) {
            return i.value;
        });
        // remove 'ALL' value
        values.splice(0, 1);
        this.value[type] = values;
        /** @type {?} */
        var updatedItems = this.items.filter(function (x) { return x.type !== type; });
        this.items = updatedItems;
        this.updateDisplayItems(allOfType[0], 'add');
    };
    /**
     * @param {?} item
     * @return {?}
     */
    NovoMultiPickerElement.prototype.handleRemoveItemIfAllSelected = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (!this.selectAllOption) {
            return;
        }
        /** @type {?} */
        var type = item.type;
        /** @type {?} */
        var allOfType = this.getAllOfType(type);
        /** @type {?} */
        var allItem = allOfType[0];
        this.removeItem(allItem);
        allItem.indeterminate = true;
        /** @type {?} */
        var selectedItems = allOfType.filter(function (i) { return i.checked === true; });
        this.items = __spread(this.items, selectedItems);
        /** @type {?} */
        var values = selectedItems.map(function (i) {
            return i.value;
        });
        this.value[type] = __spread(values);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoMultiPickerElement.prototype.handleOutsideClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // If the elements doesn't contain the target element, it is an outside click
        if (!this.element.nativeElement.contains(event.target)) {
            this.blur.emit(event);
            this.deselectAll();
        }
    };
    /**
     * @param {?} type
     * @return {?}
     */
    NovoMultiPickerElement.prototype.getAllOfType = /**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        return this._options.filter(function (x) { return x.type === type; })[0].originalData;
    };
    /**
     * @param {?} item
     * @param {?} action
     * @return {?}
     */
    NovoMultiPickerElement.prototype.updateParentOrChildren = /**
     * @param {?} item
     * @param {?} action
     * @return {?}
     */
    function (item, action) {
        if (this.strictRelationship && item.isParentOf) {
            this.updateChildrenValue(item, action);
        }
        else if (item.isChildOf && this.selectAllOption) {
            this.updateParentValue(item, action);
        }
    };
    /**
     * @param {?} selecting
     * @param {?} itemChanged
     * @return {?}
     */
    NovoMultiPickerElement.prototype.modifyAffectedParentsOrChildren = /**
     * @param {?} selecting
     * @param {?} itemChanged
     * @return {?}
     */
    function (selecting, itemChanged) {
        var _this = this;
        if (!itemChanged.isChildOf && !itemChanged.isParentOf) {
            return;
        }
        /** @type {?} */
        var parent = this.types.filter(function (x) { return !!x.isParentOf; })[0];
        /** @type {?} */
        var parentType = parent.value;
        /** @type {?} */
        var allParentType = this.getAllOfType(parentType);
        /** @type {?} */
        var childType = allParentType[0].isParentOf;
        /** @type {?} */
        var allChildren = this.getAllOfType(childType);
        /** @type {?} */
        var allCheckedChildren = allChildren.filter(function (x) { return !!x.checked; });
        allParentType.forEach(function (obj) {
            if (obj.value === 'ALL') {
                return;
            }
            /** @type {?} */
            var selectedChildrenOfParent = allCheckedChildren.filter(function (x) {
                return x[parentType].filter(function (y) { return y === obj.value; }).length > 0;
            });
            if (selecting) {
                if (obj.checked) {
                    return;
                }
                obj.indeterminate = selectedChildrenOfParent.length > 0;
            }
            else {
                /** @type {?} */
                var allChildrenOfParent = allChildren.filter(function (x) {
                    return x.value !== 'ALL' && x[parentType].filter(function (y) { return y === obj.value; }).length > 0;
                });
                if (selectedChildrenOfParent.length > 0) {
                    if (obj.checked) {
                        if (_this.strictRelationship && allChildrenOfParent.length !== selectedChildrenOfParent.length) {
                            obj.indeterminate = true;
                            obj.checked = false;
                            _this.removeValue(obj);
                            _this.addIndividualChildren(selectedChildrenOfParent);
                        }
                    }
                    else {
                        obj.indeterminate = true;
                    }
                    if (_this.strictRelationship && itemChanged.type !== parentType) {
                        if (obj.checked) {
                            obj.checked = false;
                            _this.removeValue(obj);
                            _this.addIndividualChildren(selectedChildrenOfParent);
                        }
                    }
                }
                else {
                    obj.indeterminate = false;
                    if (allChildrenOfParent.length === 0) {
                        // if it has no children and is checked, it should stay checked
                        return;
                    }
                    else if (_this.strictRelationship && itemChanged.type !== parentType) {
                        _this.remove(null, obj);
                    }
                }
            }
        });
        if (this.selectAllOption) {
            this.updateIndeterminateStates(allParentType, allChildren, allCheckedChildren);
        }
    };
    /**
     * @param {?} allItem
     * @param {?} action
     * @return {?}
     */
    NovoMultiPickerElement.prototype.updateAllParentsOrChildren = /**
     * @param {?} allItem
     * @param {?} action
     * @return {?}
     */
    function (allItem, action) {
        if (allItem.isParentOf) {
            this.updateAllChildrenValue(allItem, action);
        }
        else if (allItem.isChildOf) {
            this.updateAllParentValue(allItem, action);
        }
    };
    /**
     * @param {?} item
     * @param {?} action
     * @return {?}
     */
    NovoMultiPickerElement.prototype.updateAllChildrenValue = /**
     * @param {?} item
     * @param {?} action
     * @return {?}
     */
    function (item, action) {
        var _this = this;
        /** @type {?} */
        var selecting = action === 'select';
        /** @type {?} */
        var childType = item.isParentOf;
        /** @type {?} */
        var potentialChildren = this.getAllOfType(childType);
        if (this.selectAllOption && this.allOfTypeSelected(childType) && !selecting) {
            this.remove(null, potentialChildren[0]);
            return;
        }
        potentialChildren.forEach(function (x) {
            if (x.value === 'ALL' && !x.checked) {
                if (selecting) {
                    x.checked = true;
                }
                x.indeterminate = selecting;
            }
            else {
                if (x.checked && !selecting) {
                    _this.remove(null, x);
                }
                x.checked = selecting;
            }
        });
    };
    /**
     * @param {?} item
     * @param {?} action
     * @return {?}
     */
    NovoMultiPickerElement.prototype.updateAllParentValue = /**
     * @param {?} item
     * @param {?} action
     * @return {?}
     */
    function (item, action) {
        /** @type {?} */
        var selecting = action === 'select';
        /** @type {?} */
        var parentType = item.isChildOf;
        /** @type {?} */
        var potentialParents = this.getAllOfType(parentType);
        potentialParents.forEach(function (x) {
            if (!x.checked) {
                x.indeterminate = selecting;
            }
        });
    };
    /**
     * @param {?} allParentType
     * @param {?} allChildren
     * @param {?} allCheckedChildren
     * @return {?}
     */
    NovoMultiPickerElement.prototype.updateIndeterminateStates = /**
     * @param {?} allParentType
     * @param {?} allChildren
     * @param {?} allCheckedChildren
     * @return {?}
     */
    function (allParentType, allChildren, allCheckedChildren) {
        /** @type {?} */
        var allCheckedOrIndeterminateParents = allParentType.filter(function (x) { return (!!x.checked || !!x.indeterminate) && x.value !== 'ALL'; });
        /** @type {?} */
        var isParentIndeterminate = !!allParentType[0].checked ? false : allCheckedOrIndeterminateParents.length > 0;
        /** @type {?} */
        var isChildIndeterminate = !!allChildren[0].checked ? false : allCheckedChildren.length > 0;
        this.setIndeterminateState(allParentType, isParentIndeterminate);
        this.setIndeterminateState(allChildren, isChildIndeterminate);
    };
    /**
     * @param {?} parent
     * @param {?} action
     * @return {?}
     */
    NovoMultiPickerElement.prototype.updateChildrenValue = /**
     * @param {?} parent
     * @param {?} action
     * @return {?}
     */
    function (parent, action) {
        var _this = this;
        /** @type {?} */
        var selecting = action === 'select';
        /** @type {?} */
        var childType = parent.isParentOf;
        /** @type {?} */
        var potentialChildren = this.getAllOfType(childType);
        potentialChildren.forEach(function (x) {
            if (x.value === 'ALL') {
                return;
            }
            if (x[parent.type].filter(function (y) { return y === parent.value; }).length > 0) {
                if (x.checked && !selecting) {
                    x.checked = false;
                    if (_this.allOfTypeSelected(childType)) {
                        _this.handleRemoveItemIfAllSelected(x);
                    }
                    else {
                        _this.removeValue(x);
                    }
                }
                x.checked = selecting;
            }
        });
    };
    /**
     * @param {?} child
     * @param {?} action
     * @return {?}
     */
    NovoMultiPickerElement.prototype.updateParentValue = /**
     * @param {?} child
     * @param {?} action
     * @return {?}
     */
    function (child, action) {
        /** @type {?} */
        var allParentType = this.getAllOfType(child.isChildOf);
        if (allParentType[0].checked && action !== 'select') {
            this.handleRemoveItemIfAllSelected(allParentType[0]);
        }
    };
    /**
     * @param {?} children
     * @return {?}
     */
    NovoMultiPickerElement.prototype.addIndividualChildren = /**
     * @param {?} children
     * @return {?}
     */
    function (children) {
        var _this = this;
        /** @type {?} */
        var parentAlreadySelected = false;
        children.forEach(function (x) {
            if (x.isChildOf) {
                // only add children if their parents are not already selected
                x[x.isChildOf].forEach(function (parent) {
                    if (_this.value[x.isChildOf].filter(function (p) { return p === parent; }).length > 0) {
                        parentAlreadySelected = true;
                    }
                });
            }
            if (_this.value[x.type].filter(function (item) { return item === x.value; }).length === 0 && !parentAlreadySelected) {
                _this.add(x);
            }
        });
    };
    /**
     * @param {?} model
     * @return {?}
     */
    NovoMultiPickerElement.prototype.setInitialValue = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        var _this = this;
        this.items = [];
        this.value = model || {};
        if (!this.types) {
            return;
        }
        this.types.forEach(function (typeObj) {
            /** @type {?} */
            var type = typeObj.value;
            if (_this.value[type]) {
                /** @type {?} */
                var indeterminateIsSet_1 = false;
                /** @type {?} */
                var options = _this.updateAllItemState(type);
                /** @type {?} */
                var optionsByType_1 = options.allOfType;
                /** @type {?} */
                var allSelected_1 = options.allOfTypeSelected;
                _this.value[type].forEach(function (item) {
                    if (!allSelected_1 && !indeterminateIsSet_1) {
                        indeterminateIsSet_1 = true;
                        _this.setIndeterminateState(optionsByType_1, true);
                    }
                    /** @type {?} */
                    var value = optionsByType_1.filter(function (x) { return x.value === item; })[0];
                    value.checked = true;
                    if (!allSelected_1) {
                        _this.updateDisplayItems(value, 'add');
                    }
                    if (_this.strictRelationship && value.isParentOf) {
                        _this.updateChildrenValue(value, 'select');
                    }
                });
                if (typeObj.isChildOf) {
                    _this.modifyAffectedParentsOrChildren(true, { value: type, isChildOf: true });
                }
            }
            else {
                _this.value[type] = [];
            }
        });
    };
    /**
     * @param {?} optionsByType
     * @param {?} type
     * @return {?}
     */
    NovoMultiPickerElement.prototype.allItemsSelected = /**
     * @param {?} optionsByType
     * @param {?} type
     * @return {?}
     */
    function (optionsByType, type) {
        return this.value[type].length === optionsByType.length - 1;
    };
    // Set touched on blur
    // Set touched on blur
    /**
     * @param {?} e
     * @return {?}
     */
    NovoMultiPickerElement.prototype.onTouched = 
    // Set touched on blur
    /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.element.nativeElement.classList.remove('selected');
        this.onModelTouched();
        this.blur.emit(e);
    };
    /**
     * @param {?} model
     * @return {?}
     */
    NovoMultiPickerElement.prototype.writeValue = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        this.model = model;
        this.setInitialValue(model);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoMultiPickerElement.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NovoMultiPickerElement.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelTouched = fn;
    };
    NovoMultiPickerElement.decorators = [
        { type: Component, args: [{
                    selector: 'multi-picker',
                    providers: [CHIPS_VALUE_ACCESSOR$2],
                    template: "\n        <chip\n            *ngFor=\"let item of _items | async | slice:0:chipsCount\"\n            [type]=\"item.type\"\n            [class.selected]=\"item == selected\"\n            (remove)=\"removeFromDisplay($event, item)\"\n            (select)=\"select($event, item)\">\n            {{ item.label }}\n        </chip>\n        <div *ngIf=\"items.length > chipsCount\">\n            <ul class=\"summary\">\n                <li *ngFor=\"let type of notShown\">+ {{type.count}} {{ labels.more }} {{type.type}}</li>\n            </ul>\n        </div>\n        <div class=\"chip-input-container\">\n            <novo-picker\n                clearValueOnSelect=\"true\"\n                [config]=\"source\"\n                [placeholder]=\"placeholder\"\n                (select)=\"clickOption($event)\"\n                (keydown)=\"onKeyDown($event)\"\n                (focus)=\"onFocus($event)\"\n                (blur)=\"onTouched($event)\"\n                [overrideElement]=\"element\">\n            </novo-picker>\n        </div>\n        <i class=\"bhi-search\" [class.has-value]=\"items.length\"></i>\n        <label class=\"clear-all\" *ngIf=\"items.length\" (click)=\"clearValue()\">{{ labels.clearAll }} <i class=\"bhi-times\"></i></label>\n   ",
                    host: {
                        '[class.with-value]': 'items.length > 0',
                    }
                }] }
    ];
    /** @nocollapse */
    NovoMultiPickerElement.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NovoLabelService }
    ]; };
    NovoMultiPickerElement.propDecorators = {
        source: [{ type: Input }],
        placeholder: [{ type: Input }],
        types: [{ type: Input }],
        changed: [{ type: Output }],
        focus: [{ type: Output }],
        blur: [{ type: Output }],
        value: [{ type: Input }]
    };
    return NovoMultiPickerElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoMultiPickerModule = /** @class */ (function () {
    function NovoMultiPickerModule() {
    }
    NovoMultiPickerModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, FormsModule, NovoPickerModule, NovoChipsModule],
                    declarations: [NovoMultiPickerElement],
                    exports: [NovoMultiPickerElement],
                },] }
    ];
    return NovoMultiPickerModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var Security = /** @class */ (function () {
    function Security() {
        this.credentials = [];
        this.change = new EventEmitter();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    Security.prototype.grant = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var e_1, _a, e_2, _b;
        /** @type {?} */
        var parsed = [];
        if (data instanceof Array) {
            try {
                for (var data_1 = __values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
                    var permission = data_1_1.value;
                    parsed.push(permission.replace(/\s/gi, ''));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else if (typeof data === 'object') {
            for (var key in data) {
                if (data[key] instanceof Array) {
                    try {
                        for (var _c = __values(data[key]), _d = _c.next(); !_d.done; _d = _c.next()) {
                            var permission = _d.value;
                            parsed.push(key + "." + permission);
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
            }
        }
        this.credentials = [].concat(this.credentials, parsed);
        this.change.emit(this.credentials);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    Security.prototype.has = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return this.credentials.indexOf(value) > -1;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    Security.prototype.revoke = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var i = this.credentials.indexOf(value);
        this.credentials.splice(i, 1);
        this.change.emit(this.credentials);
    };
    /**
     * @return {?}
     */
    Security.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.credentials = [];
        this.change.emit(this.credentials);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    Security.prototype.subscribe = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.change.subscribe(fn);
    };
    /**
     * @param {?} routes
     * @param {?} options
     * @return {?}
     */
    Security.prototype.checkRoutes = /**
     * @param {?} routes
     * @param {?} options
     * @return {?}
     */
    function (routes, options) {
        var _this = this;
        var e_3, _a;
        /** @type {?} */
        var filtered = [];
        try {
            for (var routes_1 = __values(routes), routes_1_1 = routes_1.next(); !routes_1_1.done; routes_1_1 = routes_1.next()) {
                var route = routes_1_1.value;
                if (route.entities && ~route.entities.indexOf(options.entityType)) {
                    if (route.permissions instanceof Function) {
                        if (route.permissions(options, this)) {
                            filtered.push(route);
                        }
                    }
                    else if (route.permissions && route.permissions.length) {
                        if (route.permissions.every(function (perm) { return _this.has(perm); })) {
                            filtered.push(route);
                        }
                    }
                    else {
                        filtered.push(route);
                    }
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (routes_1_1 && !routes_1_1.done && (_a = routes_1.return)) _a.call(routes_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return filtered;
    };
    Security.decorators = [
        { type: Injectable }
    ];
    return Security;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var Unless = /** @class */ (function () {
    function Unless(templateRef, viewContainer, security) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.security = security;
        this.permissions = '';
        this.isDisplayed = false;
        this.security.subscribe(this.check.bind(this));
    }
    Object.defineProperty(Unless.prototype, "bhUnless", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.permissions = value || '';
            this.check();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    Unless.prototype.check = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var e_1, _a;
        /** @type {?} */
        var display = false;
        if (~this.permissions.indexOf('||')) {
            /** @type {?} */
            var ps = this.permissions.split('||');
            try {
                for (var ps_1 = __values(ps), ps_1_1 = ps_1.next(); !ps_1_1.done; ps_1_1 = ps_1.next()) {
                    var p = ps_1_1.value;
                    if (this.security.has(p.trim())) {
                        display = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (ps_1_1 && !ps_1_1.done && (_a = ps_1.return)) _a.call(ps_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            display = this.permissions.split('&&').every(function (p) { return _this.security.has(p.trim()); });
        }
        if (display) {
            if (!this.isDisplayed) {
                this.isDisplayed = true;
                this.viewContainer.createEmbeddedView(this.templateRef);
            }
        }
        else {
            this.isDisplayed = false;
            this.viewContainer.clear();
        }
    };
    Unless.decorators = [
        { type: Directive, args: [{
                    selector: '[bhUnless]',
                },] }
    ];
    /** @nocollapse */
    Unless.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: Security }
    ]; };
    Unless.propDecorators = {
        bhUnless: [{ type: Input }]
    };
    return Unless;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var UnlessModule = /** @class */ (function () {
    function UnlessModule() {
    }
    UnlessModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    declarations: [Unless],
                    exports: [Unless],
                },] }
    ];
    return UnlessModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 */
var /**
 * @template T
 */
DataTableSource = /** @class */ (function (_super) {
    __extends(DataTableSource, _super);
    function DataTableSource(tableService, state$$1, ref) {
        var _this = _super.call(this) || this;
        _this.tableService = tableService;
        _this.state = state$$1;
        _this.ref = ref;
        _this.total = 0;
        _this.currentTotal = 0;
        _this.current = 0;
        _this.loading = false;
        _this.pristine = true;
        _this.totalSet = false;
        return _this;
    }
    Object.defineProperty(DataTableSource.prototype, "totallyEmpty", {
        get: /**
         * @return {?}
         */
        function () {
            return this.total === 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTableSource.prototype, "currentlyEmpty", {
        get: /**
         * @return {?}
         */
        function () {
            return this.current === 0;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DataTableSource.prototype.connect = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var displayDataChanges = [this.state.updates];
        return merge.apply(void 0, __spread(displayDataChanges)).pipe(startWith(null), switchMap(function () {
            _this.pristine = false;
            _this.loading = true;
            return _this.tableService.getTableResults(_this.state.sort, _this.state.filter, _this.state.page, _this.state.pageSize, _this.state.globalSearch, _this.state.outsideFilter);
        }), map(function (data) {
            if (!_this.totalSet || _this.state.isForceRefresh) {
                _this.total = data.total;
                _this.totalSet = true;
                _this.state.isForceRefresh = false;
            }
            _this.currentTotal = data.total;
            _this.current = data.results.length;
            _this.data = data.results;
            // Clear selection
            _this.state.selectedRows.clear();
            _this.state.onSelectionChange();
            // Mark changes
            setTimeout(function () {
                _this.ref.markForCheck();
                setTimeout(function () {
                    _this.loading = false;
                    _this.state.dataLoaded.next();
                    _this.ref.markForCheck();
                });
            });
            return data.results;
        }), catchError(function (err, caught) {
            console.error(err, caught); // tslint: disable-line
            _this.loading = false;
            return of(null);
        }));
    };
    /**
     * @return {?}
     */
    DataTableSource.prototype.disconnect = /**
     * @return {?}
     */
    function () { };
    return DataTableSource;
}(DataSource));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 */
var  /**
 * @template T
 */
DataTableState = /** @class */ (function () {
    function DataTableState() {
        this.selectionSource = new Subject();
        this.paginationSource = new Subject();
        this.sortFilterSource = new Subject();
        this.resetSource = new Subject();
        this.expandSource = new Subject();
        this.dataLoaded = new Subject();
        this.sort = undefined;
        this.filter = undefined;
        this.page = 0;
        this.pageSize = undefined;
        this.globalSearch = undefined;
        this.selectedRows = new Map();
        this.expandedRows = new Set();
        this.isForceRefresh = false;
        this.updates = new EventEmitter();
    }
    Object.defineProperty(DataTableState.prototype, "userFiltered", {
        get: /**
         * @return {?}
         */
        function () {
            return !!(this.filter || this.sort || this.globalSearch || this.outsideFilter);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTableState.prototype, "selected", {
        get: /**
         * @return {?}
         */
        function () {
            return Array.from(this.selectedRows.values());
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?=} fireUpdate
     * @param {?=} persistUserFilters
     * @return {?}
     */
    DataTableState.prototype.reset = /**
     * @param {?=} fireUpdate
     * @param {?=} persistUserFilters
     * @return {?}
     */
    function (fireUpdate, persistUserFilters) {
        if (fireUpdate === void 0) { fireUpdate = true; }
        if (!persistUserFilters) {
            this.sort = undefined;
            this.globalSearch = undefined;
            this.filter = undefined;
        }
        this.page = 0;
        this.selectedRows.clear();
        this.resetSource.next();
        if (fireUpdate) {
            this.updates.emit({
                sort: this.sort,
                filter: this.filter,
                globalSearch: this.globalSearch,
            });
        }
    };
    /**
     * @param {?=} fireUpdate
     * @return {?}
     */
    DataTableState.prototype.clearSort = /**
     * @param {?=} fireUpdate
     * @return {?}
     */
    function (fireUpdate) {
        if (fireUpdate === void 0) { fireUpdate = true; }
        this.sort = undefined;
        this.page = 0;
        this.selectedRows.clear();
        this.resetSource.next();
        if (fireUpdate) {
            this.updates.emit({
                sort: this.sort,
                filter: this.filter,
                globalSearch: this.globalSearch,
            });
        }
    };
    /**
     * @param {?=} fireUpdate
     * @return {?}
     */
    DataTableState.prototype.clearFilter = /**
     * @param {?=} fireUpdate
     * @return {?}
     */
    function (fireUpdate) {
        if (fireUpdate === void 0) { fireUpdate = true; }
        this.filter = undefined;
        this.globalSearch = undefined;
        this.page = 0;
        this.selectedRows.clear();
        this.resetSource.next();
        if (fireUpdate) {
            this.updates.emit({
                sort: this.sort,
                filter: this.filter,
                globalSearch: this.globalSearch,
            });
        }
    };
    /**
     * @return {?}
     */
    DataTableState.prototype.onSelectionChange = /**
     * @return {?}
     */
    function () {
        this.selectionSource.next();
    };
    /**
     * @param {?=} targetId
     * @return {?}
     */
    DataTableState.prototype.onExpandChange = /**
     * @param {?=} targetId
     * @return {?}
     */
    function (targetId) {
        this.expandSource.next(targetId);
    };
    /**
     * @param {?} isPageSizeChange
     * @param {?} pageSize
     * @return {?}
     */
    DataTableState.prototype.onPaginationChange = /**
     * @param {?} isPageSizeChange
     * @param {?} pageSize
     * @return {?}
     */
    function (isPageSizeChange, pageSize) {
        this.paginationSource.next({ isPageSizeChange: isPageSizeChange, pageSize: pageSize });
    };
    /**
     * @return {?}
     */
    DataTableState.prototype.onSortFilterChange = /**
     * @return {?}
     */
    function () {
        this.sortFilterSource.next();
    };
    return DataTableState;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 */
var  /**
 * @template T
 */
StaticDataTableService = /** @class */ (function () {
    function StaticDataTableService(currentData) {
        if (currentData === void 0) { currentData = []; }
        this.currentData = currentData;
        this.originalData = __spread(currentData);
    }
    /**
     * @param {?} sort
     * @param {?} filter
     * @param {?=} page
     * @param {?=} pageSize
     * @param {?=} globalSearch
     * @param {?=} outsideFilter
     * @return {?}
     */
    StaticDataTableService.prototype.getTableResults = /**
     * @param {?} sort
     * @param {?} filter
     * @param {?=} page
     * @param {?=} pageSize
     * @param {?=} globalSearch
     * @param {?=} outsideFilter
     * @return {?}
     */
    function (sort, filter$$1, page, pageSize, globalSearch, outsideFilter) {
        if (page === void 0) { page = 0; }
        this.currentData = __spread(this.originalData);
        /** @type {?} */
        var total = this.originalData.length;
        if (this.currentData.length !== 0) {
            if (globalSearch) {
                this.currentData = this.currentData.filter(function (item) {
                    return Object.keys(item).some(function (key) { return ("" + item[key]).toLowerCase().includes(globalSearch.toLowerCase()); });
                });
                total = this.currentData.length;
            }
            if (filter$$1) {
                /** @type {?} */
                var value = Helpers.isString(filter$$1.value) ? filter$$1.value.replace(/[.*+?^${}()|[\]\\]/g, '\\$&') : filter$$1.value;
                this.currentData = this.currentData.filter(Helpers.filterByField(filter$$1.id, value));
                total = this.currentData.length;
            }
            if (sort) {
                this.currentData = this.currentData.sort(Helpers.sortByField(sort.id, sort.value === 'desc'));
                total = this.currentData.length;
            }
            if (!sort && !filter$$1 && !globalSearch && !outsideFilter) {
                this.currentData = __spread(this.originalData);
            }
            if (!Helpers.isBlank(page) && !Helpers.isBlank(pageSize)) {
                this.currentData = this.currentData.slice(page * pageSize, (page + 1) * pageSize);
            }
        }
        return of({ results: this.currentData, total: total });
    };
    return StaticDataTableService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 */
var NovoDataTable = /** @class */ (function () {
    function NovoDataTable(labels, ref, state$$1) {
        var _this = this;
        this.labels = labels;
        this.ref = ref;
        this.state = state$$1;
        this.globalSearchHiddenClassToggle = false;
        this.resized = new EventEmitter();
        this.name = 'novo-data-table';
        this.rowIdentifier = 'id';
        this.activeRowIdentifier = '';
        // prettier-ignore
        this.trackByFn = function (index, item) { return item.id; };
        this.templates = {};
        this.fixedHeader = false;
        this._hideGlobalSearch = true;
        this.preferencesChanged = new EventEmitter();
        this.loading = true;
        this.columnToTemplate = {};
        this.columnsLoaded = false;
        this.selection = new Set();
        this.scrollLeft = 0;
        this.expandable = false;
        this.initialized = false;
        this.scrollListenerHandler = this.scrollListener.bind(this);
        this.paginationSubscription = this.state.paginationSource.subscribe(function (event) {
            if (_this.name !== 'novo-data-table') {
                if (event.isPageSizeChange) {
                    _this.preferencesChanged.emit({ name: _this.name, pageSize: event.pageSize });
                }
            }
            else {
                notify('Must have [name] set on data-table to use preferences!');
            }
        });
        this.resetSubscription = this.state.resetSource.subscribe(function () {
            setTimeout(function () {
                _this.ref.detectChanges();
            }, 300);
        });
    }
    Object.defineProperty(NovoDataTable.prototype, "displayedColumns", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabledColumns;
        },
        set: /**
         * @param {?} displayedColumns
         * @return {?}
         */
        function (displayedColumns) {
            var _this = this;
            if (this.displayedColumns && this.displayedColumns.length !== 0) {
                if (this.name !== 'novo-data-table') {
                    this.preferencesChanged.emit({
                        name: this.name,
                        displayedColumns: displayedColumns,
                    });
                }
                else {
                    notify('Must have [name] set on data-table to use preferences!');
                }
            }
            this._disabledColumns = displayedColumns;
            this.configureLastDisplayedColumn();
            if (this.initialized) {
                setTimeout(function () {
                    _this.scrollListener();
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoDataTable.prototype, "dataTableService", {
        set: /**
         * @param {?} service
         * @return {?}
         */
        function (service) {
            this.loading = false;
            if (!service) {
                service = new StaticDataTableService([]);
            }
            this.dataSource = new DataTableSource(service, this.state, this.ref);
            this.ref.detectChanges();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoDataTable.prototype, "rows", {
        set: /**
         * @param {?} rows
         * @return {?}
         */
        function (rows) {
            this.loading = false;
            /** @type {?} */
            var service = new StaticDataTableService(rows);
            this.dataSource = new DataTableSource(service, this.state, this.ref);
            this.ref.detectChanges();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoDataTable.prototype, "outsideFilter", {
        set: /**
         * @param {?} outsideFilter
         * @return {?}
         */
        function (outsideFilter) {
            var _this = this;
            // Unsubscribe
            if (this.outsideFilterSubscription) {
                this.outsideFilterSubscription.unsubscribe();
            }
            if (outsideFilter) {
                // Re-subscribe
                this.outsideFilterSubscription = outsideFilter.subscribe(function (filter$$1) {
                    _this.state.outsideFilter = filter$$1;
                    _this.state.updates.next({ globalSearch: _this.state.globalSearch, filter: _this.state.filter, sort: _this.state.sort });
                    _this.ref.markForCheck();
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoDataTable.prototype, "refreshSubject", {
        set: /**
         * @param {?} refreshSubject
         * @return {?}
         */
        function (refreshSubject) {
            var _this = this;
            // Unsubscribe
            if (this.refreshSubscription) {
                this.refreshSubscription.unsubscribe();
            }
            if (refreshSubject) {
                // Re-subscribe
                this.refreshSubscription = refreshSubject.subscribe(function (filter$$1) {
                    _this.state.isForceRefresh = true;
                    _this.state.updates.next({ globalSearch: _this.state.globalSearch, filter: _this.state.filter, sort: _this.state.sort });
                    _this.ref.markForCheck();
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoDataTable.prototype, "columns", {
        get: /**
         * @return {?}
         */
        function () {
            return this._columns;
        },
        set: /**
         * @param {?} columns
         * @return {?}
         */
        function (columns) {
            this._columns = columns;
            this.configureColumns();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoDataTable.prototype, "customFilter", {
        get: /**
         * @return {?}
         */
        function () {
            return this._customFilter;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._customFilter = coerceBooleanProperty(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoDataTable.prototype, "hasExandedRows", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hasExandedRows;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._hasExandedRows = coerceBooleanProperty(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoDataTable.prototype, "forceShowHeader", {
        get: /**
         * @return {?}
         */
        function () {
            return this._forceShowHeader;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._forceShowHeader = coerceBooleanProperty(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoDataTable.prototype, "hideGlobalSearch", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideGlobalSearch;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._hideGlobalSearch = coerceBooleanProperty(v);
            this.globalSearchHiddenClassToggle = this._hideGlobalSearch;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoDataTable.prototype, "empty", {
        get: /**
         * @return {?}
         */
        function () {
            return this.dataSource && this.dataSource.totallyEmpty;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoDataTable.prototype, "loadingClass", {
        get: /**
         * @return {?}
         */
        function () {
            return this.loading || (this.dataSource && this.dataSource.loading);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoDataTable.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.outsideFilterSubscription) {
            this.outsideFilterSubscription.unsubscribe();
        }
        if (this.novoDataTableContainer) {
            ((/** @type {?} */ (this.novoDataTableContainer.nativeElement))).removeEventListener('scroll', this.scrollListenerHandler);
        }
        if (this.refreshSubscription) {
            this.refreshSubscription.unsubscribe();
        }
        if (this.resetSubscription) {
            this.resetSubscription.unsubscribe();
        }
    };
    /**
     * @return {?}
     */
    NovoDataTable.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.displayedColumns && this.displayedColumns.length) {
            this.expandable = this.displayedColumns.includes('expand');
        }
        // Default templates defined here
        this.defaultTemplates.forEach(function (item) {
            // Only override if it doesn't already exist
            if (!_this.templates[item.getType()]) {
                _this.templates[item.getType()] = item.template;
            }
        });
        // Custom templates passed in
        this.customTemplates.forEach(function (item) {
            // Override anything that is custom and in HTML
            _this.templates[item.getType()] = item.template;
        });
        // Load columns
        this.configureColumns();
        // State
        if (this.paginationOptions && !this.paginationOptions.page) {
            this.paginationOptions.page = 0;
        }
        if (this.paginationOptions && !this.paginationOptions.pageSize) {
            this.paginationOptions.pageSize = 50;
        }
        if (this.paginationOptions && !this.paginationOptions.pageSizeOptions) {
            this.paginationOptions.pageSizeOptions = [10, 25, 50, 100];
        }
        this.state.page = this.paginationOptions ? this.paginationOptions.page : undefined;
        this.state.pageSize = this.paginationOptions ? this.paginationOptions.pageSize : undefined;
        // Scrolling inside table
        ((/** @type {?} */ (this.novoDataTableContainer.nativeElement))).addEventListener('scroll', this.scrollListenerHandler);
        this.initialized = true;
        this.ref.markForCheck();
    };
    /**
     * @param {?} term
     * @return {?}
     */
    NovoDataTable.prototype.onSearchChange = /**
     * @param {?} term
     * @return {?}
     */
    function (term) {
        this.state.globalSearch = term;
        this.state.reset(false, true);
        this.state.updates.next({ globalSearch: term, filter: this.state.filter, sort: this.state.sort });
    };
    /**
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    NovoDataTable.prototype.trackColumnsBy = /**
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    function (index, item) {
        return item.id;
    };
    /**
     * @param {?} check
     * @param {?} row
     * @return {?}
     */
    NovoDataTable.prototype.isDisabled = /**
     * @param {?} check
     * @param {?} row
     * @return {?}
     */
    function (check, row) {
        if (check.disabled === true) {
            return true;
        }
        if (check.disabledFunc) {
            return check.disabledFunc(row);
        }
        return false;
    };
    /**
     * @param {?} row
     * @return {?}
     */
    NovoDataTable.prototype.isExpanded = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        if (!row) {
            return false;
        }
        return this.state.expandedRows.has("" + row[this.rowIdentifier]);
    };
    /**
     * @param {?} row
     * @return {?}
     */
    NovoDataTable.prototype.expandRow = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        /** @type {?} */
        var expanded = this.isExpanded(row);
        if (expanded) {
            this.state.expandedRows.delete("" + row[this.rowIdentifier]);
        }
        else {
            this.state.expandedRows.add("" + row[this.rowIdentifier]);
        }
        this.state.onExpandChange(((/** @type {?} */ (((/** @type {?} */ (row)))))).id);
    };
    /**
     * @param {?} expand
     * @return {?}
     */
    NovoDataTable.prototype.expandRows = /**
     * @param {?} expand
     * @return {?}
     */
    function (expand) {
        var _this = this;
        (this.dataSource.data || []).forEach(function (row) {
            if (!expand) {
                _this.state.expandedRows.delete("" + row[_this.rowIdentifier]);
            }
            else {
                _this.state.expandedRows.add("" + row[_this.rowIdentifier]);
            }
        });
        this.state.onExpandChange();
    };
    /**
     * @return {?}
     */
    NovoDataTable.prototype.allCurrentRowsExpanded = /**
     * @return {?}
     */
    function () {
        for (var i = 0; i < (this.dataSource.data || []).length; i++) {
            if (!this.isExpanded((this.dataSource.data || [])[i])) {
                return false;
            }
        }
        return true;
    };
    /**
     * @param {?} row
     * @return {?}
     */
    NovoDataTable.prototype.isSelected = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        if (!row) {
            return false;
        }
        return this.state.selectedRows.has("" + row[this.rowIdentifier]);
    };
    /**
     * @param {?} row
     * @return {?}
     */
    NovoDataTable.prototype.selectRow = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        /** @type {?} */
        var selected = this.isSelected(row);
        if (selected) {
            this.state.selectedRows.delete("" + row[this.rowIdentifier]);
        }
        else {
            this.state.selectedRows.set("" + row[this.rowIdentifier], row);
        }
        this.state.onSelectionChange();
    };
    /**
     * @param {?} selected
     * @return {?}
     */
    NovoDataTable.prototype.selectRows = /**
     * @param {?} selected
     * @return {?}
     */
    function (selected) {
        var _this = this;
        (this.dataSource.data || []).forEach(function (row) {
            if (!selected) {
                _this.state.selectedRows.delete("" + row[_this.rowIdentifier]);
            }
            else {
                _this.state.selectedRows.set("" + row[_this.rowIdentifier], row);
            }
        });
        this.state.onSelectionChange();
    };
    /**
     * @return {?}
     */
    NovoDataTable.prototype.allCurrentRowsSelected = /**
     * @return {?}
     */
    function () {
        for (var i = 0; i < (this.dataSource.data || []).length; i++) {
            if (!this.isSelected((this.dataSource.data || [])[i])) {
                return false;
            }
        }
        return true;
    };
    /**
     * @private
     * @return {?}
     */
    NovoDataTable.prototype.configureLastDisplayedColumn = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.columns && this.displayedColumns && 0 !== this.columns.length && 0 !== this.displayedColumns.length) {
            this.columns.forEach(function (column) {
                if (column.initialResizable) {
                    column.resizable = column.initialResizable.resizable;
                    column.width = column.initialResizable.width;
                    column.initialResizable = undefined;
                }
            });
            /** @type {?} */
            var resizableColumns_1 = this.displayedColumns.filter(function (name) {
                return (_this.columns.findIndex(function (column) {
                    return column.resizable && column.id === name;
                }) !== -1);
            });
            if (resizableColumns_1 && resizableColumns_1.length > 0) {
                /** @type {?} */
                var lastResizableColumn = this.columns.find(function (column) {
                    return column.id === resizableColumns_1[resizableColumns_1.length - 1];
                });
                lastResizableColumn.initialResizable = {
                    resizable: lastResizableColumn.resizable,
                    width: lastResizableColumn.width,
                };
                lastResizableColumn.width = undefined;
                lastResizableColumn.resizable = false;
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    NovoDataTable.prototype.configureColumns = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.columns && this.columns.length !== 0 && Object.keys(this.templates).length !== 0) {
            // Figure the column templates
            this.columns.forEach(function (column) {
                // Figure the template
                /** @type {?} */
                var templateName;
                if (column.template) {
                    // Pass it in as template
                    templateName = column.template;
                }
                else if (!!_this.templates[column.id]) {
                    // Custom template for the column id
                    templateName = column.id;
                }
                else {
                    // Default to the defaulCellTemplate
                    if (column.type === 'action') {
                        if (column.action && column.action.options) {
                            templateName = 'dropdownCellTemplate';
                        }
                        else {
                            templateName = 'buttonCellTemplate';
                        }
                    }
                    else {
                        if (column.type === 'link:tel' || column.type === 'link:mailto') {
                            templateName = column.type.split(':')[1] + "CellTemplate";
                        }
                        else {
                            templateName = column.type + "CellTemplate";
                        }
                    }
                }
                _this.columnToTemplate[column.id] = _this.templates[templateName];
            });
            this.configureLastDisplayedColumn();
            this.columnsLoaded = true;
        }
    };
    /**
     * @private
     * @return {?}
     */
    NovoDataTable.prototype.scrollListener = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var target = (/** @type {?} */ (this.novoDataTableContainer.nativeElement));
        /** @type {?} */
        var left = target.scrollLeft;
        if (left !== this.scrollLeft) {
            this.scrollLeft = target.scrollLeft;
        }
        if (this.fixedHeader) {
            /** @type {?} */
            var top_1 = target.scrollTop;
            /** @type {?} */
            var header = target.querySelector(':scope > cdk-table > novo-data-table-header-row');
            if (header) {
                header.style.transform = "translateY(" + top_1 + "px)";
            }
        }
        this.ref.markForCheck();
    };
    NovoDataTable.decorators = [
        { type: Component, args: [{
                    selector: 'novo-data-table',
                    animations: [
                        trigger('expand', [
                            state('void', style({ height: '0px', minHeight: '0', visibility: 'hidden' })),
                            state('*', style({ height: '*', visibility: 'visible' })),
                            transition('void <=> *', animate('70ms cubic-bezier(0.4, 0.0, 0.2, 1)')),
                        ]),
                    ],
                    template: "\n    <header *ngIf=\"(!(dataSource?.totallyEmpty && !state.userFiltered) && !loading) || forceShowHeader\"\n            [class.empty]=\"hideGlobalSearch && !paginationOptions && !templates['customActions']\">\n      <ng-container *ngTemplateOutlet=\"templates['customHeader']\"></ng-container>\n      <novo-search\n        alwaysOpen=\"true\"\n        (searchChanged)=\"onSearchChange($event)\"\n        [(ngModel)]=\"state.globalSearch\"\n        *ngIf=\"!hideGlobalSearch\"\n        [placeholder]=\"searchOptions?.placeholder\"\n        [hint]=\"searchOptions?.tooltip\">\n      </novo-search>\n      <novo-data-table-pagination\n        *ngIf=\"paginationOptions\"\n        [theme]=\"paginationOptions.theme\"\n        [length]=\"dataSource?.currentTotal\"\n        [page]=\"paginationOptions.page\"\n        [pageSize]=\"paginationOptions.pageSize\"\n        [pageSizeOptions]=\"paginationOptions.pageSizeOptions\">\n      </novo-data-table-pagination>\n      <div class=\"novo-data-table-actions\" *ngIf=\"templates['customActions']\">\n        <ng-container *ngTemplateOutlet=\"templates['customActions']\"></ng-container>\n      </div>\n    </header>\n    <div class=\"novo-data-table-loading-mask\" *ngIf=\"dataSource?.loading || loading\" data-automation-id=\"novo-data-table-loading\">\n      <novo-loading></novo-loading>\n    </div>\n    <div class=\"novo-data-table-outside-container\">\n      <div class=\"novo-data-table-custom-filter\" *ngIf=\"customFilter\">\n        <ng-container *ngTemplateOutlet=\"templates['customFilter']\"></ng-container>\n      </div>\n      <div #novoDataTableContainer class=\"novo-data-table-container\" [class.empty-user-filtered]=\"dataSource?.currentlyEmpty && state.userFiltered\" [class.empty]=\"dataSource?.totallyEmpty && !dataSource?.loading && !loading && !state.userFiltered && !dataSource.pristine\">\n        <cdk-table *ngIf=\"(columns?.length > 0) && columnsLoaded && dataSource\" [dataSource]=\"dataSource\" [trackBy]=\"trackByFn\" novoDataTableSortFilter [class.expandable]=\"expandable\" [class.empty]=\"dataSource?.currentlyEmpty && state.userFiltered\" [hidden]=\"dataSource?.totallyEmpty && !state.userFiltered\">\n          <ng-container cdkColumnDef=\"selection\">\n            <novo-data-table-checkbox-header-cell *cdkHeaderCellDef></novo-data-table-checkbox-header-cell>\n            <novo-data-table-checkbox-cell *cdkCellDef=\"let row; let i = index\" [row]=\"row\"></novo-data-table-checkbox-cell>\n          </ng-container>\n          <ng-container cdkColumnDef=\"expand\">\n            <novo-data-table-expand-header-cell *cdkHeaderCellDef></novo-data-table-expand-header-cell>\n            <novo-data-table-expand-cell *cdkCellDef=\"let row; let i = index\" [row]=\"row\"></novo-data-table-expand-cell>\n          </ng-container>\n          <ng-container *ngFor=\"let column of columns;trackBy: trackColumnsBy\" [cdkColumnDef]=\"column.id\">\n            <novo-data-table-header-cell *cdkHeaderCellDef [column]=\"column\" [filterTemplate]=\"templates['column-filter-'+column.id]\" [novo-data-table-cell-config]=\"column\" [resized]=\"resized\" [defaultSort]=\"defaultSort\" [class.empty]=\"column?.type === 'action' && !column?.label\" [class.button-header-cell]=\"column?.type === 'expand' || (column?.type === 'action' && !column?.action?.options)\" [class.dropdown-header-cell]=\"column?.type === 'action' && column?.action?.options\"></novo-data-table-header-cell>\n            <novo-data-table-cell *cdkCellDef=\"let row\" [resized]=\"resized\" [column]=\"column\" [row]=\"row\" [template]=\"columnToTemplate[column.id]\" [class.empty]=\"column?.type === 'action' && !column?.label\" [class.button-cell]=\"column?.type === 'expand' || (column?.type === 'action' && !column?.action?.options)\" [class.dropdown-cell]=\"column?.type === 'action' && column?.action?.options\"></novo-data-table-cell>\n          </ng-container>\n          <novo-data-table-header-row *cdkHeaderRowDef=\"displayedColumns\" data-automation-id=\"novo-data-table-header-row\"></novo-data-table-header-row>\n          <novo-data-table-row *cdkRowDef=\"let row; columns: displayedColumns\" [ngClass]=\"{ 'active': row[rowIdentifier] == activeRowIdentifier }\" [novoDataTableExpand]=\"detailRowTemplate\" [row]=\"row\" [id]=\"name + '-' + row[rowIdentifier]\" [dataAutomationId]=\"row[rowIdentifier]\"></novo-data-table-row>\n        </cdk-table>\n        <div class=\"novo-data-table-footer\" *ngIf=\"templates['footer']\">\n          <ng-container *ngTemplateOutlet=\"templates['footer']; context: {$implicit: columns, data: dataSource.data}\"></ng-container>\n        </div>\n        <div class=\"novo-data-table-no-results-container\" [style.left.px]=\"scrollLeft\" *ngIf=\"dataSource?.currentlyEmpty && state.userFiltered && !dataSource?.loading && !loading && !dataSource.pristine\">\n          <div class=\"novo-data-table-empty-message\" >\n            <ng-container *ngTemplateOutlet=\"templates['noResultsMessage'] || templates['defaultNoResultsMessage']\"></ng-container>\n          </div>\n        </div>\n      </div>\n      <div class=\"novo-data-table-empty-container\" *ngIf=\"dataSource?.totallyEmpty && !dataSource?.loading && !loading && !state.userFiltered && !dataSource.pristine\">\n        <div class=\"novo-data-table-empty-message\">\n          <ng-container *ngTemplateOutlet=\"templates['emptyMessage'] || templates['defaultNoResultsMessage']\"></ng-container>\n        </div>\n      </div>\n    </div>\n    <!-- DEFAULT CELL TEMPLATE -->\n    <ng-template novoTemplate=\"textCellTemplate\"\n                 let-row\n                 let-col=\"col\">\n      <span [style.width.px]=\"col?.width\" [style.min-width.px]=\"col?.width\" [style.max-width.px]=\"col?.width\">{{ row[col.id] | dataTableInterpolate:col }}</span>\n    </ng-template>\n    <ng-template novoTemplate=\"dateCellTemplate\"\n                 let-row\n                 let-col=\"col\">\n      <span>{{ row[col.id] | dataTableInterpolate:col | dataTableDateRenderer:col }}</span>\n    </ng-template>\n    <ng-template novoTemplate=\"datetimeCellTemplate\"\n                 let-row\n                 let-col=\"col\">\n      <span>{{ row[col.id] | dataTableInterpolate:col | dataTableDateTimeRenderer:col }}</span>\n    </ng-template>\n    <ng-template novoTemplate=\"timeCellTemplate\"\n                 let-row\n                 let-col=\"col\">\n      <span>{{ row[col.id] | dataTableInterpolate:col | dataTableTimeRenderer:col }}</span>\n    </ng-template>\n    <ng-template novoTemplate=\"currencyCellTemplate\"\n                 let-row\n                 let-col=\"col\">\n      <span>{{ row[col.id] | dataTableInterpolate:col | dataTableCurrencyRenderer:col }}</span>\n    </ng-template>\n    <ng-template novoTemplate=\"numberCellTemplate\"\n                 let-row\n                 let-col=\"col\">\n      <span>{{ row[col.id] | dataTableInterpolate:col | dataTableNumberRenderer:col }}</span>\n    </ng-template>\n    <ng-template novoTemplate=\"percentCellTemplate\"\n                 let-row\n                 let-col=\"col\">\n      <span>{{ row[col.id] | dataTableInterpolate:col | dataTableNumberRenderer:col:true }}</span>\n    </ng-template>\n    <ng-template novoTemplate=\"linkCellTemplate\"\n                 let-row\n                 let-col=\"col\">\n      <a (click)=\"col.handlers?.click({originalEvent: $event, row: row})\" [style.width.px]=\"col?.width\" [style.min-width.px]=\"col?.width\" [style.max-width.px]=\"col?.width\">{{ row[col.id] | dataTableInterpolate:col }}</a>\n    </ng-template>\n    <ng-template novoTemplate=\"telCellTemplate\"\n                 let-row\n                 let-col=\"col\">\n      <a href=\"tel:{{ row[col.id] | dataTableInterpolate:col }}\" [target]=\"col?.attributes?.target\">{{ row[col.id] | dataTableInterpolate:col }}</a>\n    </ng-template>\n    <ng-template novoTemplate=\"mailtoCellTemplate\"\n                 let-row\n                 let-col=\"col\">\n      <a href=\"mailto:{{ row[col.id] | dataTableInterpolate:col }}\" [target]=\"col?.attributes?.target\">{{ row[col.id] | dataTableInterpolate:col }}</a>\n    </ng-template>\n    <ng-template novoTemplate=\"buttonCellTemplate\"\n                 let-row\n                 let-col=\"col\">\n      <p [tooltip]=\"col?.action?.tooltip\" tooltipPosition=\"right\">\n        <i class=\"bhi-{{ col?.action?.icon }} data-table-icon\" (click)=\"col.handlers?.click({ originalEvent: $event, row: row })\" [class.disabled]=\"isDisabled(col, row)\"></i>\n      </p>\n    </ng-template>\n    <ng-template novoTemplate=\"dropdownCellTemplate\"\n                 let-row\n                 let-col=\"col\">\n      <novo-dropdown parentScrollSelector=\".novo-data-table-container\" containerClass=\"novo-data-table-dropdown\">\n        <button type=\"button\" theme=\"dialogue\" icon=\"collapse\" inverse>{{ col.label }}</button>\n        <list>\n          <item *ngFor=\"let option of col?.action?.options\" (action)=\"option.handlers.click({ originalEvent: $event?.originalEvent, row: row })\" [disabled]=\"isDisabled(option, row)\">\n            <span [attr.data-automation-id]=\"option.label\">{{ option.label }}</span>\n          </item>\n        </list>\n      </novo-dropdown>\n    </ng-template>\n    <ng-template novoTemplate=\"defaultNoResultsMessage\">\n      <h4><i class=\"bhi-search-question\"></i> {{ labels.noMatchingRecordsMessage }}</h4>\n    </ng-template>\n    <ng-template novoTemplate=\"defaultEmptyMessage\">\n      <h4><i class=\"bhi-search-question\"></i> {{ labels.emptyTableMessage }}</h4>\n    </ng-template>\n    <ng-template novoTemplate=\"expandedRow\">\n      You did not provide an \"expandedRow\" template!\n    </ng-template>\n    <ng-template #detailRowTemplate let-row>\n      <div class=\"novo-data-table-detail-row\" [@expand] style=\"overflow: hidden\">\n        <ng-container *ngTemplateOutlet=\"templates['expandedRow']; context: {$implicit: row}\"></ng-container>\n      </div>\n    </ng-template>\n    <!-- CUSTOM CELLS PASSED IN -->\n    <ng-content></ng-content>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [DataTableState]
                }] }
    ];
    /** @nocollapse */
    NovoDataTable.ctorParameters = function () { return [
        { type: NovoLabelService },
        { type: ChangeDetectorRef },
        { type: DataTableState }
    ]; };
    NovoDataTable.propDecorators = {
        globalSearchHiddenClassToggle: [{ type: HostBinding, args: ['class.global-search-hidden',] }],
        customTemplates: [{ type: ContentChildren, args: [NovoTemplate,] }],
        defaultTemplates: [{ type: ViewChildren, args: [NovoTemplate,] }],
        novoDataTableContainer: [{ type: ViewChild, args: ['novoDataTableContainer',] }],
        resized: [{ type: Output }],
        displayedColumns: [{ type: Input }],
        paginationOptions: [{ type: Input }],
        searchOptions: [{ type: Input }],
        defaultSort: [{ type: Input }],
        name: [{ type: Input }],
        rowIdentifier: [{ type: Input }],
        activeRowIdentifier: [{ type: Input }],
        trackByFn: [{ type: Input }],
        templates: [{ type: Input }],
        fixedHeader: [{ type: Input }],
        dataTableService: [{ type: Input }],
        rows: [{ type: Input }],
        outsideFilter: [{ type: Input }],
        refreshSubject: [{ type: Input }],
        columns: [{ type: Input }],
        customFilter: [{ type: Input }],
        hasExandedRows: [{ type: Input }],
        forceShowHeader: [{ type: Input }],
        hideGlobalSearch: [{ type: Input }],
        preferencesChanged: [{ type: Output }],
        empty: [{ type: HostBinding, args: ['class.empty',] }],
        loadingClass: [{ type: HostBinding, args: ['class.loading',] }]
    };
    return NovoDataTable;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 */
var NovoDataTableCell = /** @class */ (function (_super) {
    __extends(NovoDataTableCell, _super);
    function NovoDataTableCell(columnDef, elementRef, renderer) {
        var _this = _super.call(this, columnDef, elementRef) || this;
        _this.elementRef = elementRef;
        _this.renderer = renderer;
        _this.role = 'gridcell';
        _this.subscriptions = [];
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, "novo-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, 'novo-data-table-cell');
        return _this;
    }
    /**
     * @return {?}
     */
    NovoDataTableCell.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.column.cellClass) {
            this.renderer.addClass(this.elementRef.nativeElement, this.column.cellClass(this.row));
        }
        this.calculateWidths();
        this.subscriptions.push(this.resized.subscribe(function (column) {
            if (column === _this.column) {
                _this.calculateWidths();
            }
        }));
    };
    /**
     * @return {?}
     */
    NovoDataTableCell.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subscriptions.forEach(function (subscription) {
            subscription.unsubscribe();
        });
    };
    /**
     * @private
     * @return {?}
     */
    NovoDataTableCell.prototype.calculateWidths = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.column.width) {
            this.renderer.setStyle(this.elementRef.nativeElement, 'min-width', this.column.width + "px");
            this.renderer.setStyle(this.elementRef.nativeElement, 'max-width', this.column.width + "px");
            this.renderer.setStyle(this.elementRef.nativeElement, 'width', this.column.width + "px");
        }
    };
    NovoDataTableCell.decorators = [
        { type: Component, args: [{
                    selector: 'novo-data-table-cell',
                    template: "\n    <ng-container *ngTemplateOutlet=\"template; context: {$implicit: row, col: column}\"></ng-container>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    NovoDataTableCell.ctorParameters = function () { return [
        { type: CdkColumnDef },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    NovoDataTableCell.propDecorators = {
        role: [{ type: HostBinding, args: ['attr.role',] }],
        row: [{ type: Input }],
        template: [{ type: Input }],
        column: [{ type: Input }],
        resized: [{ type: Input }]
    };
    return NovoDataTableCell;
}(CdkCell));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 */
var NovoDataTableCheckboxCell = /** @class */ (function (_super) {
    __extends(NovoDataTableCheckboxCell, _super);
    function NovoDataTableCheckboxCell(columnDef, elementRef, renderer, dataTable, ref) {
        var _this = _super.call(this, columnDef, elementRef) || this;
        _this.columnDef = columnDef;
        _this.dataTable = dataTable;
        _this.ref = ref;
        _this.role = 'gridcell';
        _this.checked = false;
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-checkbox-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, "novo-checkbox-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, 'novo-data-table-checkbox-cell');
        _this.selectionSubscription = _this.dataTable.state.selectionSource.subscribe(function () {
            _this.checked = _this.dataTable.isSelected(_this.row);
            _this.ref.markForCheck();
        });
        _this.resetSubscription = _this.dataTable.state.resetSource.subscribe(function () {
            _this.checked = false;
            _this.ref.markForCheck();
        });
        return _this;
    }
    /**
     * @return {?}
     */
    NovoDataTableCheckboxCell.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.checked = this.dataTable.isSelected(this.row);
    };
    /**
     * @return {?}
     */
    NovoDataTableCheckboxCell.prototype.onClick = /**
     * @return {?}
     */
    function () {
        this.dataTable.selectRow(this.row);
    };
    /**
     * @return {?}
     */
    NovoDataTableCheckboxCell.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.selectionSubscription) {
            this.selectionSubscription.unsubscribe();
        }
        if (this.resetSubscription) {
            this.resetSubscription.unsubscribe();
        }
    };
    NovoDataTableCheckboxCell.decorators = [
        { type: Component, args: [{
                    selector: 'novo-data-table-checkbox-cell',
                    template: "\n    <div class=\"data-table-checkbox\" (click)=\"onClick()\">\n      <input type=\"checkbox\" [checked]=\"checked\">\n      <label>\n        <i [class.bhi-checkbox-empty]=\"!checked\"\n          [class.bhi-checkbox-filled]=\"checked\"></i>\n      </label>\n    </div>\n    ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    NovoDataTableCheckboxCell.ctorParameters = function () { return [
        { type: CdkColumnDef },
        { type: ElementRef },
        { type: Renderer2 },
        { type: NovoDataTable },
        { type: ChangeDetectorRef }
    ]; };
    NovoDataTableCheckboxCell.propDecorators = {
        role: [{ type: HostBinding, args: ['attr.role',] }],
        row: [{ type: Input }]
    };
    return NovoDataTableCheckboxCell;
}(CdkCell));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 */
var NovoDataTableExpandCell = /** @class */ (function (_super) {
    __extends(NovoDataTableExpandCell, _super);
    function NovoDataTableExpandCell(columnDef, elementRef, renderer, dataTable, ref) {
        var _this = _super.call(this, columnDef, elementRef) || this;
        _this.columnDef = columnDef;
        _this.dataTable = dataTable;
        _this.ref = ref;
        _this.role = 'gridcell';
        _this.expanded = false;
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-expand-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, "novo-expand-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, 'novo-data-table-expand-cell');
        _this.expandSubscription = _this.dataTable.state.expandSource.subscribe(function () {
            _this.expanded = _this.dataTable.isExpanded(_this.row);
            _this.ref.markForCheck();
        });
        return _this;
    }
    /**
     * @return {?}
     */
    NovoDataTableExpandCell.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.expanded = this.dataTable.isExpanded(this.row);
    };
    /**
     * @return {?}
     */
    NovoDataTableExpandCell.prototype.onClick = /**
     * @return {?}
     */
    function () {
        this.dataTable.expandRow(this.row);
    };
    /**
     * @return {?}
     */
    NovoDataTableExpandCell.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.expandSubscription) {
            this.expandSubscription.unsubscribe();
        }
    };
    NovoDataTableExpandCell.decorators = [
        { type: Component, args: [{
                    selector: 'novo-data-table-expand-cell',
                    template: "\n    <i class=\"bhi-next data-table-icon\" novo-data-table-expander=\"true\" [class.expanded]=\"expanded\"></i>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    NovoDataTableExpandCell.ctorParameters = function () { return [
        { type: CdkColumnDef },
        { type: ElementRef },
        { type: Renderer2 },
        { type: NovoDataTable },
        { type: ChangeDetectorRef }
    ]; };
    NovoDataTableExpandCell.propDecorators = {
        role: [{ type: HostBinding, args: ['attr.role',] }],
        row: [{ type: Input }]
    };
    return NovoDataTableExpandCell;
}(CdkCell));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoDataTableHeaderRow = /** @class */ (function (_super) {
    __extends(NovoDataTableHeaderRow, _super);
    function NovoDataTableHeaderRow() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.rowClass = 'novo-data-table-header-row';
        _this.role = 'row';
        return _this;
    }
    NovoDataTableHeaderRow.decorators = [
        { type: Component, args: [{
                    selector: 'novo-data-table-header-row',
                    template: CDK_ROW_TEMPLATE,
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    NovoDataTableHeaderRow.propDecorators = {
        rowClass: [{ type: HostBinding, args: ['class',] }],
        role: [{ type: HostBinding, args: ['attr.role',] }]
    };
    return NovoDataTableHeaderRow;
}(CdkHeaderRow));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoDataTableRow = /** @class */ (function (_super) {
    __extends(NovoDataTableRow, _super);
    function NovoDataTableRow() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.rowClass = 'novo-data-table-row';
        _this.role = 'row';
        return _this;
    }
    NovoDataTableRow.decorators = [
        { type: Component, args: [{
                    selector: 'novo-data-table-row',
                    template: CDK_ROW_TEMPLATE,
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    NovoDataTableRow.propDecorators = {
        rowClass: [{ type: HostBinding, args: ['class',] }],
        role: [{ type: HostBinding, args: ['attr.role',] }],
        id: [{ type: HostBinding, args: ['attr.id',] }, { type: Input }],
        dataAutomationId: [{ type: HostBinding, args: ['attr.data-automation-id',] }, { type: Input }]
    };
    return NovoDataTableRow;
}(CdkRow));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 */
var NovoDataTableSortFilter = /** @class */ (function () {
    function NovoDataTableSortFilter(state$$1) {
        this.state = state$$1;
    }
    /**
     * @param {?} id
     * @param {?} value
     * @param {?} transform
     * @return {?}
     */
    NovoDataTableSortFilter.prototype.filter = /**
     * @param {?} id
     * @param {?} value
     * @param {?} transform
     * @return {?}
     */
    function (id, value, transform) {
        /** @type {?} */
        var filter$$1;
        if (!Helpers.isBlank(value)) {
            filter$$1 = { id: id, value: value, transform: transform };
        }
        else {
            filter$$1 = undefined;
        }
        this.state.filter = filter$$1;
        this.state.reset(false, true);
        this.state.updates.next({ filter: filter$$1, sort: this.state.sort });
        this.state.onSortFilterChange();
    };
    /**
     * @param {?} id
     * @param {?} value
     * @param {?} transform
     * @return {?}
     */
    NovoDataTableSortFilter.prototype.sort = /**
     * @param {?} id
     * @param {?} value
     * @param {?} transform
     * @return {?}
     */
    function (id, value, transform) {
        /** @type {?} */
        var sort = { id: id, value: value, transform: transform };
        this.state.sort = sort;
        this.state.reset(false, true);
        this.state.updates.next({ sort: sort, filter: this.state.filter });
        this.state.onSortFilterChange();
    };
    NovoDataTableSortFilter.decorators = [
        { type: Directive, args: [{
                    selector: '[novoDataTableSortFilter]',
                },] }
    ];
    /** @nocollapse */
    NovoDataTableSortFilter.ctorParameters = function () { return [
        { type: DataTableState }
    ]; };
    return NovoDataTableSortFilter;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 */
var NovoDataTableCellHeader = /** @class */ (function () {
    function NovoDataTableCellHeader(changeDetectorRef, labels, state$$1, renderer, elementRef, _sort, _cdkColumnDef) {
        var _this = this;
        this.changeDetectorRef = changeDetectorRef;
        this.labels = labels;
        this.state = state$$1;
        this.renderer = renderer;
        this.elementRef = elementRef;
        this._sort = _sort;
        this._cdkColumnDef = _cdkColumnDef;
        this.icon = 'sortable';
        this.filterActive = false;
        this.sortActive = false;
        this.showCustomRange = false;
        this.subscriptions = [];
        this._rerenderSubscription = state$$1.updates.subscribe(function (change) {
            if (change.sort && change.sort.id === _this.id) {
                _this.icon = "sort-" + change.sort.value;
                _this.sortActive = true;
            }
            else {
                _this.icon = 'sortable';
                _this.sortActive = false;
            }
            if (change.filter && change.filter.id === _this.id) {
                _this.filterActive = true;
                _this.filter = change.filter.value;
            }
            else {
                _this.filterActive = false;
                _this.filter = undefined;
            }
            changeDetectorRef.markForCheck();
        });
    }
    Object.defineProperty(NovoDataTableCellHeader.prototype, "column", {
        set: /**
         * @param {?} column
         * @return {?}
         */
        function (column) {
            this._column = column;
            this.label = column.type === 'action' ? '' : column.label;
            this.labelIcon = column.labelIcon;
            this.config = {
                sortable: !!column.sortable,
                filterable: !!column.filterable,
                resizable: !!column.resizable,
            };
            this.resizable = this.config.resizable;
            /** @type {?} */
            var transforms = {};
            if (column.filterable && Helpers.isObject(column.filterable)) {
                this.config.filterConfig = (/** @type {?} */ (column.filterable));
                if (!this.config.filterConfig.type) {
                    this.config.filterConfig = { type: 'text' };
                }
                if (((/** @type {?} */ (column.filterable))).transform) {
                    transforms.filter = ((/** @type {?} */ (column.filterable))).transform;
                }
            }
            else {
                this.config.filterConfig = { type: 'text' };
            }
            if (column.sortable && Helpers.isObject(column.sortable)) {
                if (((/** @type {?} */ (column.sortable))).transform) {
                    transforms.sort = ((/** @type {?} */ (column.sortable))).transform;
                }
            }
            if (this.config.filterConfig.type === 'date' && !this.config.filterConfig.options) {
                this.config.filterConfig.options = this.getDefaultDateFilterOptions();
            }
            this.config.transforms = transforms;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoDataTableCellHeader.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this._cdkColumnDef) {
            this.id = this._cdkColumnDef.name;
        }
        if (this.defaultSort && this.id === this.defaultSort.id) {
            this.icon = "sort-" + this.defaultSort.value;
            this.sortActive = true;
            this.changeDetectorRef.markForCheck();
        }
    };
    /**
     * @return {?}
     */
    NovoDataTableCellHeader.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._rerenderSubscription.unsubscribe();
        this.subscriptions.forEach(function (subscription) {
            subscription.unsubscribe();
        });
    };
    /**
     * @param {?} mouseDownEvent
     * @return {?}
     */
    NovoDataTableCellHeader.prototype.startResize = /**
     * @param {?} mouseDownEvent
     * @return {?}
     */
    function (mouseDownEvent) {
        var _this = this;
        mouseDownEvent.preventDefault();
        /** @type {?} */
        var minimumWidth = 60 + (this.config.filterable ? 30 : 0) + (this.config.sortable ? 30 : 0);
        /** @type {?} */
        var startingWidth = this.elementRef.nativeElement.getBoundingClientRect().width;
        /** @type {?} */
        var mouseMoveSubscription = fromEvent(window.document, 'mousemove').subscribe(function (middleMouseEvent) {
            /** @type {?} */
            var differenceWidth = middleMouseEvent.clientX - mouseDownEvent.clientX;
            /** @type {?} */
            var width = startingWidth + differenceWidth;
            if (width < minimumWidth) {
                width = minimumWidth;
            }
            _this._column.width = width;
            _this.renderer.setStyle(_this.elementRef.nativeElement, 'min-width', _this._column.width + "px");
            _this.renderer.setStyle(_this.elementRef.nativeElement, 'max-width', _this._column.width + "px");
            _this.renderer.setStyle(_this.elementRef.nativeElement, 'width', _this._column.width + "px");
            _this.changeDetectorRef.markForCheck();
            _this.resized.next(_this._column);
        });
        /** @type {?} */
        var mouseUpSubscription = fromEvent(window.document, 'mouseup').subscribe(function () {
            mouseUpSubscription.unsubscribe();
            mouseMoveSubscription.unsubscribe();
            _this.changeDetectorRef.markForCheck();
        });
        this.subscriptions.push(mouseMoveSubscription);
        this.subscriptions.push(mouseUpSubscription);
    };
    /**
     * @param {?} event
     * @param {?} value
     * @return {?}
     */
    NovoDataTableCellHeader.prototype.toggleCustomRange = /**
     * @param {?} event
     * @param {?} value
     * @return {?}
     */
    function (event, value) {
        Helpers.swallowEvent(event);
        this.showCustomRange = value;
        this.changeDetectorRef.markForCheck();
        this.dropdown.openPanel(); // Ensures that the panel correctly updates to the dynamic size of the dropdown
    };
    /**
     * @return {?}
     */
    NovoDataTableCellHeader.prototype.focusInput = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.filterInput && this.filterInput.nativeElement) {
            setTimeout(function () { return _this.filterInput.nativeElement.focus(); }, 0);
        }
    };
    /**
     * @return {?}
     */
    NovoDataTableCellHeader.prototype.sort = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.changeTimeout) {
            clearTimeout(this.changeTimeout);
        }
        this.changeTimeout = setTimeout(function () {
            _this.direction = _this.getNextSortDirection(_this.direction);
            _this._sort.sort(_this.id, _this.direction, _this.config.transforms.sort);
            _this.changeDetectorRef.markForCheck();
        }, 300);
    };
    /**
     * @param {?=} filter
     * @return {?}
     */
    NovoDataTableCellHeader.prototype.filterData = /**
     * @param {?=} filter
     * @return {?}
     */
    function (filter$$1) {
        var _this = this;
        /** @type {?} */
        var actualFilter = filter$$1;
        if (this.config.filterConfig.type === 'date' && filter$$1) {
            this.activeDateFilter = filter$$1.label || this.labels.customDateRange;
            if (filter$$1.startDate && filter$$1.endDate) {
                actualFilter = {
                    min: startOfDay(filter$$1.startDate.date),
                    max: startOfDay(addDays(startOfDay(filter$$1.endDate.date), 1)),
                };
            }
            else {
                actualFilter = {
                    min: filter$$1.min ? addDays(startOfToday(), filter$$1.min) : startOfToday(),
                    max: filter$$1.max ? addDays(endOfToday(), filter$$1.max) : endOfToday(),
                };
            }
        }
        if (actualFilter && actualFilter.hasOwnProperty('value')) {
            actualFilter = filter$$1.value;
        }
        if (this.changeTimeout) {
            clearTimeout(this.changeTimeout);
        }
        this.changeTimeout = setTimeout(function () {
            if (actualFilter === '') {
                actualFilter = undefined;
            }
            _this._sort.filter(_this.id, actualFilter, _this.config.transforms.filter);
            _this.changeDetectorRef.markForCheck();
        }, 300);
    };
    /**
     * @return {?}
     */
    NovoDataTableCellHeader.prototype.clearFilter = /**
     * @return {?}
     */
    function () {
        this.filter = undefined;
        this.activeDateFilter = undefined;
        this.filterData(undefined);
    };
    /**
     * @private
     * @param {?} direction
     * @return {?}
     */
    NovoDataTableCellHeader.prototype.getNextSortDirection = /**
     * @private
     * @param {?} direction
     * @return {?}
     */
    function (direction) {
        if (!direction) {
            return 'asc';
        }
        if (direction === 'asc') {
            return 'desc';
        }
        return 'asc';
    };
    /**
     * @private
     * @return {?}
     */
    NovoDataTableCellHeader.prototype.getDefaultDateFilterOptions = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var opts = [
            { label: this.labels.past1Day, min: -1, max: 0 },
            { label: this.labels.past7Days, min: -7, max: 0 },
            { label: this.labels.past30Days, min: -30, max: 0 },
            { label: this.labels.past90Days, min: -90, max: 0 },
            { label: this.labels.past1Year, min: -366, max: 0 },
            { label: this.labels.next1Day, min: 0, max: 1 },
            { label: this.labels.next7Days, min: 0, max: 7 },
            { label: this.labels.next30Days, min: 0, max: 30 },
            { label: this.labels.next90Days, min: 0, max: 90 },
            { label: this.labels.next1Year, min: 0, max: 366 },
        ];
        return opts;
    };
    NovoDataTableCellHeader.decorators = [
        { type: Component, args: [{
                    selector: '[novo-data-table-cell-config]',
                    template: "\n        <i class=\"bhi-{{ labelIcon }} label-icon\" *ngIf=\"labelIcon\" data-automation-id=\"novo-data-table-header-icon\"></i>\n        <label data-automation-id=\"novo-data-table-label\">{{ label }}</label>\n        <div>\n            <button *ngIf=\"config.sortable\" tooltipPosition=\"right\" [tooltip]=\"labels.sort\" theme=\"icon\" [icon]=\"icon\" (click)=\"sort()\" [class.active]=\"sortActive\" data-automation-id=\"novo-data-table-sort\"></button>\n            <novo-dropdown *ngIf=\"config.filterable\" side=\"right\" parentScrollSelector=\".novo-data-table-container\" containerClass=\"data-table-dropdown\" data-automation-id=\"novo-data-table-filter\">\n                <button type=\"button\" theme=\"icon\" icon=\"filter\" [class.active]=\"filterActive\" (click)=\"focusInput()\" tooltipPosition=\"right\" [tooltip]=\"labels.filters\"></button>\n                <div class=\"header\">\n                    <span>{{ labels.filters }}</span>\n                    <button theme=\"dialogue\" color=\"negative\" icon=\"times\" (click)=\"clearFilter()\" *ngIf=\"filter !== null && filter !== undefined && filter !== ''\" data-automation-id=\"novo-data-table-filter-clear\">{{ labels.clear }}</button>\n                </div>\n                <ng-container [ngSwitch]=\"config.filterConfig.type\">\n                    <list *ngSwitchCase=\"'date'\">\n                        <ng-container *ngIf=\"!showCustomRange\">\n                            <item [class.active]=\"activeDateFilter === option.label\" *ngFor=\"let option of config.filterConfig.options\" (click)=\"filterData(option)\" [attr.data-automation-id]=\"'novo-data-table-filter-' + option.label\">\n                                {{ option.label }} <i class=\"bhi-check\" *ngIf=\"activeDateFilter === option.label\"></i>\n                            </item>\n                        </ng-container>\n                        <item [class.active]=\"labels.customDateRange === activeDateFilter\" (click)=\"toggleCustomRange($event, true)\" *ngIf=\"config.filterConfig.allowCustomRange && !showCustomRange\" [keepOpen]=\"true\">\n                            {{ labels.customDateRange }} <i class=\"bhi-check\" *ngIf=\"labels.customDateRange === activeDateFilter\"></i>\n                        </item>\n                        <div class=\"calendar-container\" *ngIf=\"showCustomRange\">\n                            <div (click)=\"toggleCustomRange($event, false)\"><i class=\"bhi-previous\"></i>{{ labels.backToPresetFilters }}</div>\n                            <novo-date-picker (onSelect)=\"filterData($event)\" [(ngModel)]=\"filter\" range=\"true\"></novo-date-picker>\n                        </div>\n                    </list>\n                    <list *ngSwitchCase=\"'select'\">\n                        <item [class.active]=\"filter === option\" *ngFor=\"let option of config.filterConfig.options\" (click)=\"filterData(option)\" [attr.data-automation-id]=\"'novo-data-table-filter-' + (option?.label || option)\">\n                            <span>{{ option?.label || option }}</span> <i class=\"bhi-check\" *ngIf=\"option.hasOwnProperty('value') ? filter === option.value : filter === option\"></i>\n                        </item>\n                    </list>\n                    <list *ngSwitchCase=\"'custom'\">\n                        <item class=\"filter-search\" keepOpen=\"true\">\n                            <ng-container *ngTemplateOutlet=\"filterTemplate; context: {$implicit: config}\"></ng-container>\n                        </item>\n                    </list>\n                    <list *ngSwitchDefault>\n                        <item class=\"filter-search\" keepOpen=\"true\">\n                            <input [type]=\"config.filterConfig.type\" [(ngModel)]=\"filter\" (ngModelChange)=\"filterData($event)\" #filterInput data-automation-id=\"novo-data-table-filter-input\"/>\n                        </item>\n                    </list>\n                </ng-container>\n            </novo-dropdown>\n        </div>\n        <div class=\"spacer\"></div>\n        <div class=\"data-table-header-resizable\" *ngIf=\"config.resizable\">\n          <span (mousedown)=\"startResize($event)\" >&nbsp;</span>\n        </div>\n    ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    NovoDataTableCellHeader.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: NovoLabelService },
        { type: DataTableState },
        { type: Renderer2 },
        { type: ElementRef },
        { type: NovoDataTableSortFilter, decorators: [{ type: Optional }] },
        { type: CdkColumnDef, decorators: [{ type: Optional }] }
    ]; };
    NovoDataTableCellHeader.propDecorators = {
        filterInput: [{ type: ViewChild, args: ['filterInput',] }],
        dropdown: [{ type: ViewChild, args: [NovoDropdownElement,] }],
        defaultSort: [{ type: Input }],
        resized: [{ type: Input }],
        filterTemplate: [{ type: Input }],
        resizable: [{ type: HostBinding, args: ['class.resizable',] }],
        column: [{ type: Input, args: ['novo-data-table-cell-config',] }]
    };
    return NovoDataTableCellHeader;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 */
var NovoDataTableExpandHeaderCell = /** @class */ (function (_super) {
    __extends(NovoDataTableExpandHeaderCell, _super);
    function NovoDataTableExpandHeaderCell(columnDef, elementRef, renderer, dataTable, ref) {
        var _this = _super.call(this, columnDef, elementRef) || this;
        _this.dataTable = dataTable;
        _this.ref = ref;
        _this.role = 'columnheader';
        _this.expanded = false;
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-expand-column-header-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, "novo-expand-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, 'novo-data-table-expand-header-cell');
        _this.expandSubscription = _this.dataTable.state.expandSource.subscribe(function () {
            _this.expanded = _this.dataTable.allCurrentRowsExpanded();
            _this.ref.markForCheck();
        });
        return _this;
    }
    /**
     * @return {?}
     */
    NovoDataTableExpandHeaderCell.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.expandSubscription) {
            this.expandSubscription.unsubscribe();
        }
    };
    /**
     * @return {?}
     */
    NovoDataTableExpandHeaderCell.prototype.expandAll = /**
     * @return {?}
     */
    function () {
        this.dataTable.expandRows(!this.expanded);
    };
    NovoDataTableExpandHeaderCell.decorators = [
        { type: Component, args: [{
                    selector: 'novo-data-table-expand-header-cell',
                    template: "\n    <i class=\"bhi-next data-table-icon\" novo-data-table-expander=\"true\" (click)=\"expandAll()\" [class.expanded]=\"expanded\"></i>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    NovoDataTableExpandHeaderCell.ctorParameters = function () { return [
        { type: CdkColumnDef },
        { type: ElementRef },
        { type: Renderer2 },
        { type: NovoDataTable },
        { type: ChangeDetectorRef }
    ]; };
    NovoDataTableExpandHeaderCell.propDecorators = {
        role: [{ type: HostBinding, args: ['attr.role',] }]
    };
    return NovoDataTableExpandHeaderCell;
}(CdkHeaderCell));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 */
var NovoDataTableCheckboxHeaderCell = /** @class */ (function (_super) {
    __extends(NovoDataTableCheckboxHeaderCell, _super);
    function NovoDataTableCheckboxHeaderCell(columnDef, elementRef, renderer, dataTable, ref) {
        var _this = _super.call(this, columnDef, elementRef) || this;
        _this.dataTable = dataTable;
        _this.ref = ref;
        _this.role = 'columnheader';
        _this.checked = false;
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-checkbox-column-header-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, "novo-checkbox-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, 'novo-data-table-checkbox-header-cell');
        _this.selectionSubscription = _this.dataTable.state.selectionSource.subscribe(function () {
            _this.checked = _this.dataTable.allCurrentRowsSelected();
            _this.ref.markForCheck();
        });
        _this.paginationSubscription = _this.dataTable.state.paginationSource.subscribe(function (event) {
            if (event.isPageSizeChange) {
                _this.checked = false;
                _this.dataTable.selectRows(false);
            }
            else {
                _this.checked = _this.dataTable.allCurrentRowsSelected();
            }
            _this.ref.markForCheck();
        });
        _this.resetSubscription = _this.dataTable.state.resetSource.subscribe(function () {
            _this.checked = false;
            _this.ref.markForCheck();
        });
        return _this;
    }
    /**
     * @return {?}
     */
    NovoDataTableCheckboxHeaderCell.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.selectionSubscription) {
            this.selectionSubscription.unsubscribe();
        }
        if (this.paginationSubscription) {
            this.paginationSubscription.unsubscribe();
        }
        if (this.resetSubscription) {
            this.resetSubscription.unsubscribe();
        }
    };
    /**
     * @return {?}
     */
    NovoDataTableCheckboxHeaderCell.prototype.onClick = /**
     * @return {?}
     */
    function () {
        this.dataTable.selectRows(!this.checked);
    };
    NovoDataTableCheckboxHeaderCell.decorators = [
        { type: Component, args: [{
                    selector: 'novo-data-table-checkbox-header-cell',
                    template: "\n    <div class=\"data-table-checkbox\" (click)=\"onClick()\">\n      <input type=\"checkbox\" [checked]=\"checked\">\n      <label>\n        <i [class.bhi-checkbox-empty]=\"!checked\"\n          [class.bhi-checkbox-filled]=\"checked\"></i>\n      </label>\n    </div>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    NovoDataTableCheckboxHeaderCell.ctorParameters = function () { return [
        { type: CdkColumnDef },
        { type: ElementRef },
        { type: Renderer2 },
        { type: NovoDataTable },
        { type: ChangeDetectorRef }
    ]; };
    NovoDataTableCheckboxHeaderCell.propDecorators = {
        role: [{ type: HostBinding, args: ['attr.role',] }]
    };
    return NovoDataTableCheckboxHeaderCell;
}(CdkHeaderCell));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 */
var NovoDataTableHeaderCell = /** @class */ (function (_super) {
    __extends(NovoDataTableHeaderCell, _super);
    function NovoDataTableHeaderCell(columnDef, elementRef, renderer) {
        var _this = _super.call(this, columnDef, elementRef) || this;
        _this.elementRef = elementRef;
        _this.renderer = renderer;
        _this.role = 'columnheader';
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-column-header-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, "novo-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, 'novo-data-table-header-cell');
        return _this;
    }
    /**
     * @return {?}
     */
    NovoDataTableHeaderCell.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.column.width) {
            this.renderer.setStyle(this.elementRef.nativeElement, 'min-width', this.column.width + "px");
            this.renderer.setStyle(this.elementRef.nativeElement, 'max-width', this.column.width + "px");
            this.renderer.setStyle(this.elementRef.nativeElement, 'width', this.column.width + "px");
        }
    };
    NovoDataTableHeaderCell.decorators = [
        { type: Directive, args: [{
                    selector: 'novo-data-table-header-cell',
                },] }
    ];
    /** @nocollapse */
    NovoDataTableHeaderCell.ctorParameters = function () { return [
        { type: CdkColumnDef },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    NovoDataTableHeaderCell.propDecorators = {
        role: [{ type: HostBinding, args: ['attr.role',] }],
        column: [{ type: Input }]
    };
    return NovoDataTableHeaderCell;
}(CdkHeaderCell));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var MAX_PAGES_DISPLAYED = 5;
/**
 * @template T
 */
var NovoDataTablePagination = /** @class */ (function () {
    function NovoDataTablePagination(changeDetectorRef, labels, state$$1) {
        var _this = this;
        this.changeDetectorRef = changeDetectorRef;
        this.labels = labels;
        this.state = state$$1;
        this.theme = 'standard';
        this._page = 0;
        this._pageSizeOptions = [];
        this._length = 0;
        this.pageChange = new EventEmitter();
        this.resetSubscription = this.state.resetSource.subscribe(function () {
            _this.page = 0;
            _this.changeDetectorRef.markForCheck();
        });
    }
    Object.defineProperty(NovoDataTablePagination.prototype, "page", {
        get: /**
         * @return {?}
         */
        function () {
            return this._page;
        },
        set: /**
         * @param {?} page
         * @return {?}
         */
        function (page) {
            this._page = page;
            this.changeDetectorRef.markForCheck();
            this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
            this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
            this.state.page = this._page;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoDataTablePagination.prototype, "pageSize", {
        get: /**
         * @return {?}
         */
        function () {
            return this._pageSize;
        },
        set: /**
         * @param {?} pageSize
         * @return {?}
         */
        function (pageSize) {
            this._pageSize = pageSize;
            this.updateDisplayedPageSizeOptions();
            this.state.pageSize = this._pageSize;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoDataTablePagination.prototype, "pageSizeOptions", {
        get: /**
         * @return {?}
         */
        function () {
            return this._pageSizeOptions;
        },
        set: /**
         * @param {?} pageSizeOptions
         * @return {?}
         */
        function (pageSizeOptions) {
            this._pageSizeOptions = pageSizeOptions;
            this.updateDisplayedPageSizeOptions();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoDataTablePagination.prototype, "length", {
        get: /**
         * @return {?}
         */
        function () {
            return this._length;
        },
        set: /**
         * @param {?} length
         * @return {?}
         */
        function (length) {
            this._length = length;
            this.changeDetectorRef.markForCheck();
            this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
            this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
            this.totalPages = this.calculateTotalPages();
            this.pages = this.getPages(this.page, this.totalPages);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoDataTablePagination.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this._initialized = true;
        this.updateDisplayedPageSizeOptions();
    };
    /**
     * @return {?}
     */
    NovoDataTablePagination.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.resetSubscription.unsubscribe();
    };
    /**
     * @param {?} page
     * @return {?}
     */
    NovoDataTablePagination.prototype.selectPage = /**
     * @param {?} page
     * @return {?}
     */
    function (page) {
        this.page = page;
        this.emitPageEvent();
    };
    /**
     * @return {?}
     */
    NovoDataTablePagination.prototype.nextPage = /**
     * @return {?}
     */
    function () {
        if (!this.hasNextPage()) {
            return;
        }
        this.page++;
        this.pages = this.getPages(this.page, this.totalPages);
        this.emitPageEvent();
    };
    /**
     * @return {?}
     */
    NovoDataTablePagination.prototype.previousPage = /**
     * @return {?}
     */
    function () {
        if (!this.hasPreviousPage()) {
            return;
        }
        this.page--;
        this.pages = this.getPages(this.page, this.totalPages);
        this.emitPageEvent();
    };
    /**
     * @return {?}
     */
    NovoDataTablePagination.prototype.hasPreviousPage = /**
     * @return {?}
     */
    function () {
        return this.page >= 1 && this.pageSize !== 0;
    };
    /**
     * @return {?}
     */
    NovoDataTablePagination.prototype.hasNextPage = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var numberOfPages = Math.ceil(this.length / this.pageSize) - 1;
        return this.page < numberOfPages && this.pageSize !== 0;
    };
    /**
     * @param {?} pageSize
     * @return {?}
     */
    NovoDataTablePagination.prototype.changePageSize = /**
     * @param {?} pageSize
     * @return {?}
     */
    function (pageSize) {
        this.page = 0;
        this.pageSize = pageSize;
        this.emitPageEvent(true);
    };
    /**
     * @private
     * @return {?}
     */
    NovoDataTablePagination.prototype.updateDisplayedPageSizeOptions = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this._initialized) {
            return;
        }
        if (!this.displayedPageSizeOptions) {
            this.displayedPageSizeOptions = [];
            this.pageSizeOptions.forEach(function (option) {
                if (option.hasOwnProperty('value')) {
                    _this.displayedPageSizeOptions.push(option);
                }
                else {
                    _this.displayedPageSizeOptions.push({
                        value: option,
                        label: option,
                    });
                }
            });
        }
        this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
        this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
        this.totalPages = this.calculateTotalPages();
        this.pages = this.getPages(this.page, this.totalPages);
        this.changeDetectorRef.detectChanges();
    };
    /**
     * @private
     * @param {?=} isPageSizeChange
     * @return {?}
     */
    NovoDataTablePagination.prototype.emitPageEvent = /**
     * @private
     * @param {?=} isPageSizeChange
     * @return {?}
     */
    function (isPageSizeChange) {
        if (isPageSizeChange === void 0) { isPageSizeChange = false; }
        /** @type {?} */
        var event = {
            page: this.page,
            pageSize: this.pageSize,
            length: this.length,
            filter: this.state.filter,
            sort: this.state.sort,
        };
        this.pageChange.next(event);
        this.state.page = this.page;
        this.state.pageSize = this.pageSize;
        this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
        this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
        this.totalPages = this.calculateTotalPages();
        this.pages = this.getPages(this.page, this.totalPages);
        this.state.updates.next(event);
        this.state.onPaginationChange(isPageSizeChange, this.pageSize);
    };
    /**
     * @private
     * @return {?}
     */
    NovoDataTablePagination.prototype.calculateTotalPages = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var totalPages = this.pageSize < 1 ? 1 : Math.ceil(this.length / this.pageSize);
        return Math.max(totalPages || 0, 1);
    };
    /**
     * @private
     * @param {?} number
     * @param {?} text
     * @param {?} isActive
     * @return {?}
     */
    NovoDataTablePagination.prototype.makePage = /**
     * @private
     * @param {?} number
     * @param {?} text
     * @param {?} isActive
     * @return {?}
     */
    function (number, text, isActive) {
        return {
            number: number,
            text: text,
            active: isActive,
        };
    };
    /**
     * @private
     * @param {?} currentPage
     * @param {?} totalPages
     * @return {?}
     */
    NovoDataTablePagination.prototype.getPages = /**
     * @private
     * @param {?} currentPage
     * @param {?} totalPages
     * @return {?}
     */
    function (currentPage, totalPages) {
        /** @type {?} */
        var pages = [];
        // Default page limits
        /** @type {?} */
        var startPage = 1;
        /** @type {?} */
        var endPage = totalPages;
        /** @type {?} */
        var isMaxSized = MAX_PAGES_DISPLAYED < totalPages;
        // Recompute if maxPagesDisplayed
        if (isMaxSized) {
            // Current page is displayed in the middle of the visible ones
            startPage = Math.max(currentPage - Math.floor(MAX_PAGES_DISPLAYED / 2), 1);
            endPage = startPage + MAX_PAGES_DISPLAYED - 1;
            // Adjust if limit is exceeded
            if (endPage > totalPages) {
                endPage = totalPages;
                startPage = endPage - MAX_PAGES_DISPLAYED + 1;
            }
        }
        // Add page number links
        for (var number = startPage; number <= endPage; number++) {
            /** @type {?} */
            var page = this.makePage(number, number.toString(), number === currentPage);
            pages.push(page);
        }
        return pages;
    };
    NovoDataTablePagination.decorators = [
        { type: Component, args: [{
                    selector: 'novo-data-table-pagination',
                    template: "\n      <ng-container *ngIf=\"theme === 'basic' || theme === 'basic-wide'\">\n        <div class=\"novo-data-table-pagination-size\">\n            <novo-tiles *ngIf=\"displayedPageSizeOptions.length > 1\"\n                        [(ngModel)]=\"pageSize\"\n                        [options]=\"displayedPageSizeOptions\"\n                        (onChange)=\"changePageSize($event)\"\n                        data-automation-id=\"novo-data-table-pagination-tiles\">\n            </novo-tiles>\n            <div *ngIf=\"displayedPageSizeOptions.length <= 1\">{{ pageSize }}</div>\n        </div>\n\n        <div class=\"novo-data-table-range-label-long\" data-automation-id=\"novo-data-table-pagination-range-label-long\">\n            {{ longRangeLabel }}\n        </div>\n        <div class=\"novo-data-table-range-label-short\" data-automation-id=\"novo-data-table-pagination-range-label-short\">\n            {{ shortRangeLabel }}\n        </div>\n        <span class=\"spacer novo-data-table-spacer\" *ngIf=\"theme === 'basic-wide'\"></span>\n        <button theme=\"dialogue\" type=\"button\"\n                class=\"novo-data-table-pagination-navigation-previous\"\n                (click)=\"previousPage()\"\n                icon=\"previous\"\n                side=\"left\"\n                [disabled]=\"!hasPreviousPage()\"\n                data-automation-id=\"novo-data-table-pagination-previous\">\n            <span>{{ labels.previous }}</span>\n        </button>\n        <button theme=\"dialogue\" type=\"button\"\n                class=\"novo-data-table-pagination-navigation-next\"\n                (click)=\"nextPage()\"\n                icon=\"next\"\n                side=\"right\"\n                [disabled]=\"!hasNextPage()\"\n                data-automation-id=\"novo-data-table-pagination-next\">\n            <span>{{ labels.next }}</span>\n        </button>\n      </ng-container>\n      <ng-container *ngIf=\"theme === 'standard'\">\n        <h5 class=\"rows\">{{ labels.itemsPerPage }}</h5>\n        <novo-select [options]=\"displayedPageSizeOptions\" [placeholder]=\"labels.select\" [(ngModel)]=\"pageSize\" (onSelect)=\"changePageSize($event.selected)\" data-automation-id=\"pager-select\"></novo-select>\n        <span class=\"spacer\"></span>\n        <ul class=\"pager\" data-automation-id=\"pager\">\n            <li class=\"page\" (click)=\"selectPage(page - 1)\" [ngClass]=\"{ 'disabled': page === 0 }\"><i class=\"bhi-previous\" data-automation-id=\"pager-previous\"></i></li>\n            <li class=\"page\" [ngClass]=\"{active: p.number === page + 1}\" *ngFor=\"let p of pages\" (click)=\"selectPage(p.number - 1)\">{{ p.text }}</li>\n            <li class=\"page\" (click)=\"selectPage(page + 1)\" [ngClass]=\"{ 'disabled': page + 1 === totalPages }\"><i class=\"bhi-next\" data-automation-id=\"pager-next\"></i></li>\n        </ul>\n      </ng-container>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    NovoDataTablePagination.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: NovoLabelService },
        { type: DataTableState }
    ]; };
    NovoDataTablePagination.propDecorators = {
        theme: [{ type: HostBinding, args: ['class',] }, { type: Input }],
        page: [{ type: Input }],
        pageSize: [{ type: Input }],
        pageSizeOptions: [{ type: Input }],
        length: [{ type: Input }],
        pageChange: [{ type: Output }]
    };
    return NovoDataTablePagination;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 * @param {?} value
 * @param {?} col
 * @return {?}
 */
function interpolateCell(value, col) {
    if (col.format) {
        return Helpers.interpolateWithFallback(col.format, value);
    }
    return value;
}
/**
 * @template T
 */
var DataTableInterpolatePipe = /** @class */ (function () {
    function DataTableInterpolatePipe() {
    }
    /**
     * @param {?} value
     * @param {?} column
     * @return {?}
     */
    DataTableInterpolatePipe.prototype.transform = /**
     * @param {?} value
     * @param {?} column
     * @return {?}
     */
    function (value, column) {
        if (!Helpers.isEmpty(value)) {
            return interpolateCell(value, column);
        }
        return '';
    };
    DataTableInterpolatePipe.decorators = [
        { type: Pipe, args: [{
                    name: 'dataTableInterpolate',
                    pure: true,
                },] }
    ];
    return DataTableInterpolatePipe;
}());
/**
 * @template T
 */
var DateTableDateRendererPipe = /** @class */ (function () {
    function DateTableDateRendererPipe(labels) {
        this.labels = labels;
    }
    /**
     * @param {?} value
     * @param {?} column
     * @return {?}
     */
    DateTableDateRendererPipe.prototype.transform = /**
     * @param {?} value
     * @param {?} column
     * @return {?}
     */
    function (value, column) {
        if (!Helpers.isEmpty(value)) {
            /** @type {?} */
            var val = interpolateCell(value, column);
            return this.labels.formatDate(val);
        }
        return '';
    };
    DateTableDateRendererPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'dataTableDateRenderer',
                    pure: true,
                },] }
    ];
    /** @nocollapse */
    DateTableDateRendererPipe.ctorParameters = function () { return [
        { type: NovoLabelService }
    ]; };
    return DateTableDateRendererPipe;
}());
/**
 * @template T
 */
var DateTableDateTimeRendererPipe = /** @class */ (function () {
    function DateTableDateTimeRendererPipe(labels) {
        this.labels = labels;
    }
    /**
     * @param {?} value
     * @param {?} column
     * @return {?}
     */
    DateTableDateTimeRendererPipe.prototype.transform = /**
     * @param {?} value
     * @param {?} column
     * @return {?}
     */
    function (value, column) {
        if (!Helpers.isEmpty(value)) {
            /** @type {?} */
            var val = interpolateCell(value, column);
            return this.labels.formatDateShort(val);
        }
        return '';
    };
    DateTableDateTimeRendererPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'dataTableDateTimeRenderer',
                    pure: true,
                },] }
    ];
    /** @nocollapse */
    DateTableDateTimeRendererPipe.ctorParameters = function () { return [
        { type: NovoLabelService }
    ]; };
    return DateTableDateTimeRendererPipe;
}());
/**
 * @template T
 */
var DateTableTimeRendererPipe = /** @class */ (function () {
    function DateTableTimeRendererPipe(labels) {
        this.labels = labels;
    }
    /**
     * @param {?} value
     * @param {?} column
     * @return {?}
     */
    DateTableTimeRendererPipe.prototype.transform = /**
     * @param {?} value
     * @param {?} column
     * @return {?}
     */
    function (value, column) {
        if (!Helpers.isEmpty(value)) {
            /** @type {?} */
            var val = interpolateCell(value, column);
            return this.labels.formatTime(val);
        }
        return '';
    };
    DateTableTimeRendererPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'dataTableTimeRenderer',
                    pure: true,
                },] }
    ];
    /** @nocollapse */
    DateTableTimeRendererPipe.ctorParameters = function () { return [
        { type: NovoLabelService }
    ]; };
    return DateTableTimeRendererPipe;
}());
/**
 * @template T
 */
var DateTableNumberRendererPipe = /** @class */ (function () {
    function DateTableNumberRendererPipe(labels) {
        this.labels = labels;
    }
    /**
     * @param {?} value
     * @param {?} column
     * @param {?=} isPercent
     * @return {?}
     */
    DateTableNumberRendererPipe.prototype.transform = /**
     * @param {?} value
     * @param {?} column
     * @param {?=} isPercent
     * @return {?}
     */
    function (value, column, isPercent) {
        if (isPercent === void 0) { isPercent = false; }
        if (!Helpers.isEmpty(value)) {
            /** @type {?} */
            var val = interpolateCell(value, column);
            if (isPercent && Helpers.isNumber(val)) {
                val = "" + Number(val) * 100;
            }
            return "" + this.labels.formatNumber(val) + (isPercent ? '%' : '');
        }
        return '';
    };
    DateTableNumberRendererPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'dataTableNumberRenderer',
                    pure: true,
                },] }
    ];
    /** @nocollapse */
    DateTableNumberRendererPipe.ctorParameters = function () { return [
        { type: NovoLabelService }
    ]; };
    return DateTableNumberRendererPipe;
}());
/**
 * @template T
 */
var DateTableCurrencyRendererPipe = /** @class */ (function () {
    function DateTableCurrencyRendererPipe(labels) {
        this.labels = labels;
    }
    /**
     * @param {?} value
     * @param {?} column
     * @return {?}
     */
    DateTableCurrencyRendererPipe.prototype.transform = /**
     * @param {?} value
     * @param {?} column
     * @return {?}
     */
    function (value, column) {
        if (!Helpers.isEmpty(value)) {
            /** @type {?} */
            var val = interpolateCell(value, column);
            return this.labels.formatCurrency(Number(val));
        }
        return '';
    };
    DateTableCurrencyRendererPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'dataTableCurrencyRenderer',
                    pure: true,
                },] }
    ];
    /** @nocollapse */
    DateTableCurrencyRendererPipe.ctorParameters = function () { return [
        { type: NovoLabelService }
    ]; };
    return DateTableCurrencyRendererPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 */
var NovoDataTableExpandDirective = /** @class */ (function () {
    function NovoDataTableExpandDirective(vcRef, state$$1, dataTable) {
        var _this = this;
        this.vcRef = vcRef;
        this.state = state$$1;
        this.dataTable = dataTable;
        this.shouldExpandAllRows = function (targetId) { return targetId === undefined; };
        this.shouldExpandOneRow = function (targetId) { return targetId === ((/** @type {?} */ (((/** @type {?} */ (_this.row)))))).id; };
        this.subscription = this.state.expandSource.subscribe(function (targetId) {
            if (_this.shouldExpandAllRows(targetId) || _this.shouldExpandOneRow(targetId)) {
                if (dataTable.isExpanded(_this.row)) {
                    _this.render();
                }
                else {
                    _this.clear();
                }
            }
        });
    }
    /**
     * @return {?}
     */
    NovoDataTableExpandDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subscription.unsubscribe();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoDataTableExpandDirective.prototype.onClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (((/** @type {?} */ (event.target))).hasAttribute('novo-data-table-expander')) {
            Helpers.swallowEvent(event);
            this.dataTable.expandRow(this.row);
        }
    };
    /**
     * @private
     * @return {?}
     */
    NovoDataTableExpandDirective.prototype.clear = /**
     * @private
     * @return {?}
     */
    function () {
        this.vcRef.clear();
    };
    /**
     * @private
     * @return {?}
     */
    NovoDataTableExpandDirective.prototype.render = /**
     * @private
     * @return {?}
     */
    function () {
        this.vcRef.clear();
        if (this.template && this.row) {
            this.vcRef.createEmbeddedView(this.template, { $implicit: this.row });
        }
    };
    NovoDataTableExpandDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[novoDataTableExpand]',
                },] }
    ];
    /** @nocollapse */
    NovoDataTableExpandDirective.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: DataTableState },
        { type: NovoDataTable }
    ]; };
    NovoDataTableExpandDirective.propDecorators = {
        row: [{ type: Input }],
        template: [{ type: Input, args: ['novoDataTableExpand',] }],
        onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
    return NovoDataTableExpandDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 */
var NovoDataTableClearButton = /** @class */ (function () {
    function NovoDataTableClearButton(state$$1, ref, labels) {
        this.state = state$$1;
        this.ref = ref;
        this.labels = labels;
        this.sortClear = new EventEmitter();
        this.filterClear = new EventEmitter();
        this.allClear = new EventEmitter();
    }
    /**
     * @return {?}
     */
    NovoDataTableClearButton.prototype.clearSort = /**
     * @return {?}
     */
    function () {
        this.state.clearSort();
        this.sortClear.emit(true);
    };
    /**
     * @return {?}
     */
    NovoDataTableClearButton.prototype.clearFilter = /**
     * @return {?}
     */
    function () {
        this.state.clearFilter();
        this.filterClear.emit(true);
    };
    /**
     * @return {?}
     */
    NovoDataTableClearButton.prototype.clearAll = /**
     * @return {?}
     */
    function () {
        this.state.reset();
        this.allClear.emit(true);
        this.sortClear.emit(true);
        this.filterClear.emit(true);
    };
    NovoDataTableClearButton.decorators = [
        { type: Component, args: [{
                    selector: 'novo-data-table-clear-button',
                    template: "\n    <novo-dropdown side=\"right\" class=\"novo-data-table-clear-button\" data-automation-id=\"novo-data-table-clear-dropdown\">\n      <button type=\"button\" theme=\"primary\" color=\"negative\" icon=\"collapse\" data-automation-id=\"novo-data-table-clear-dropdown-btn\">{{ labels.clear }}</button>\n      <list>\n          <item *ngIf=\"state.sort\" (click)=\"clearSort()\" data-automation-id=\"novo-data-table-clear-dropdown-clear-sort\">{{ labels.clearSort }}</item>\n          <item *ngIf=\"state.filter\" (click)=\"clearFilter()\" data-automation-id=\"novo-data-table-clear-dropdown-clear-filter\">{{ labels.clearFilter }}</item>\n          <item *ngIf=\"state.sort && state.filter\" (click)=\"clearAll()\" data-automation-id=\"novo-data-table-clear-dropdown-clear-all\">{{ labels.clearAllNormalCase }}</item>\n      </list>\n    </novo-dropdown>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    NovoDataTableClearButton.ctorParameters = function () { return [
        { type: DataTableState },
        { type: ChangeDetectorRef },
        { type: NovoLabelService }
    ]; };
    NovoDataTableClearButton.propDecorators = {
        sortClear: [{ type: Output }],
        filterClear: [{ type: Output }],
        allClear: [{ type: Output }]
    };
    return NovoDataTableClearButton;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoDataTableModule = /** @class */ (function () {
    function NovoDataTableModule() {
    }
    NovoDataTableModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        NovoDatePickerModule,
                        CdkTableModule,
                        CommonModule,
                        FormsModule,
                        NovoButtonModule,
                        NovoDropdownModule,
                        NovoFormExtrasModule,
                        NovoLoadingModule,
                        NovoTilesModule,
                        NovoSearchBoxModule,
                        NovoCommonModule,
                        NovoSelectModule,
                        NovoTooltipModule,
                    ],
                    declarations: [
                        DataTableInterpolatePipe,
                        DateTableDateRendererPipe,
                        DateTableCurrencyRendererPipe,
                        DateTableDateTimeRendererPipe,
                        DateTableNumberRendererPipe,
                        DateTableTimeRendererPipe,
                        NovoDataTableCellHeader,
                        NovoDataTableSortFilter,
                        NovoDataTableHeaderCell,
                        NovoDataTableCell,
                        NovoDataTableHeaderRow,
                        NovoDataTableRow,
                        NovoDataTablePagination,
                        NovoDataTableCheckboxCell,
                        NovoDataTableCheckboxHeaderCell,
                        NovoDataTableExpandCell,
                        NovoDataTableExpandHeaderCell,
                        NovoDataTable,
                        NovoDataTableExpandDirective,
                        NovoDataTableClearButton,
                    ],
                    providers: [DataTableState],
                    exports: [
                        NovoDataTable,
                        DataTableInterpolatePipe,
                        DateTableDateRendererPipe,
                        DateTableCurrencyRendererPipe,
                        DateTableDateTimeRendererPipe,
                        DateTableNumberRendererPipe,
                        DateTableTimeRendererPipe,
                        NovoDataTableClearButton,
                    ],
                },] }
    ];
    return NovoDataTableModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 * @template T
 */
var  /**
 * @abstract
 * @template T
 */
RemoteDataTableService = /** @class */ (function () {
    function RemoteDataTableService() {
    }
    return RemoteDataTableService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
var  /**
 * @abstract
 */
GlobalRef = /** @class */ (function () {
    function GlobalRef() {
    }
    return GlobalRef;
}());
var BrowserGlobalRef = /** @class */ (function (_super) {
    __extends(BrowserGlobalRef, _super);
    function BrowserGlobalRef() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(BrowserGlobalRef.prototype, "nativeGlobal", {
        get: /**
         * @return {?}
         */
        function () {
            return (/** @type {?} */ (window));
        },
        enumerable: true,
        configurable: true
    });
    return BrowserGlobalRef;
}(GlobalRef));
var NodeGlobalRef = /** @class */ (function (_super) {
    __extends(NodeGlobalRef, _super);
    function NodeGlobalRef() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(NodeGlobalRef.prototype, "nativeGlobal", {
        get: /**
         * @return {?}
         */
        function () {
            throw new Error('global doesn\'t compile for some reason');
            // return global as Global;
        },
        enumerable: true,
        configurable: true
    });
    return NodeGlobalRef;
}(GlobalRef));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LocalStorageService = /** @class */ (function () {
    function LocalStorageService() {
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    LocalStorageService.prototype.setItem = /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        localStorage.setItem(key, value);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    LocalStorageService.prototype.getItem = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return localStorage.getItem(key);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    LocalStorageService.prototype.removeItem = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        localStorage.removeItem(key);
    };
    LocalStorageService.decorators = [
        { type: Injectable }
    ];
    return LocalStorageService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var GooglePlacesService = /** @class */ (function () {
    function GooglePlacesService(_http, platformId, _global, _localStorageService) {
        this._http = _http;
        this.platformId = platformId;
        this._global = _global;
        this._localStorageService = _localStorageService;
    }
    /**
     * @param {?} url
     * @param {?} query
     * @return {?}
     */
    GooglePlacesService.prototype.getPredictions = /**
     * @param {?} url
     * @param {?} query
     * @return {?}
     */
    function (url, query$$1) {
        var _this = this;
        return new Promise(function (resolve) {
            _this._http.get(url + '?query=' + query$$1).subscribe(function (data) {
                if (data) {
                    resolve(data);
                }
                else {
                    resolve(false);
                }
            });
        });
    };
    /**
     * @param {?} url
     * @param {?} lat
     * @param {?} lng
     * @return {?}
     */
    GooglePlacesService.prototype.getLatLngDetail = /**
     * @param {?} url
     * @param {?} lat
     * @param {?} lng
     * @return {?}
     */
    function (url, lat, lng) {
        var _this = this;
        return new Promise(function (resolve) {
            _this._http.get(url + '?lat=' + lat + '&lng=' + lng).subscribe(function (data) {
                if (data) {
                    resolve(data);
                }
                else {
                    resolve(false);
                }
            });
        });
    };
    /**
     * @param {?} url
     * @param {?} placeId
     * @return {?}
     */
    GooglePlacesService.prototype.getPlaceDetails = /**
     * @param {?} url
     * @param {?} placeId
     * @return {?}
     */
    function (url, placeId) {
        var _this = this;
        return new Promise(function (resolve) {
            _this._http.get(url + '?query=' + placeId).subscribe(function (data) {
                if (data) {
                    resolve(data);
                }
                else {
                    resolve(false);
                }
            });
        });
    };
    /**
     * @return {?}
     */
    GooglePlacesService.prototype.getGeoCurrentLocation = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return new Promise(function (resolve) {
            if (isPlatformBrowser(_this.platformId)) {
                /** @type {?} */
                var _window = _this._global.nativeGlobal;
                if (_window.navigator.geolocation) {
                    _window.navigator.geolocation.getCurrentPosition(function (pos) {
                        /** @type {?} */
                        var latlng = { lat: parseFloat(pos.coords.latitude + ''), lng: parseFloat(pos.coords.longitude + '') };
                        resolve(latlng);
                    });
                }
                else {
                    resolve(false);
                }
            }
            else {
                resolve(false);
            }
        });
    };
    /**
     * @param {?} latlng
     * @return {?}
     */
    GooglePlacesService.prototype.getGeoLatLngDetail = /**
     * @param {?} latlng
     * @return {?}
     */
    function (latlng) {
        var _this = this;
        return new Promise(function (resolve) {
            if (isPlatformBrowser(_this.platformId)) {
                /** @type {?} */
                var _window = _this._global.nativeGlobal;
                /** @type {?} */
                var geocoder = new _window.google.maps.Geocoder();
                geocoder.geocode({ location: latlng }, function (results, status) {
                    if (status === 'OK') {
                        _this.getGeoPlaceDetail(results[0].place_id).then(function (result) {
                            if (result) {
                                resolve(result);
                            }
                            else {
                                resolve(false);
                            }
                        });
                    }
                    else {
                        resolve(false);
                    }
                });
            }
            else {
                resolve(false);
            }
        });
    };
    /**
     * @param {?} params
     * @return {?}
     */
    GooglePlacesService.prototype.getGeoPrediction = /**
     * @param {?} params
     * @return {?}
     */
    function (params) {
        var _this = this;
        return new Promise(function (resolve) {
            if (isPlatformBrowser(_this.platformId)) {
                /** @type {?} */
                var _window = _this._global.nativeGlobal;
                /** @type {?} */
                var placesService = new _window.google.maps.places.AutocompleteService();
                /** @type {?} */
                var queryInput = {};
                /** @type {?} */
                var promiseArr = [];
                if (params.countryRestriction.length) {
                    queryInput = {
                        input: params.query,
                        componentRestrictions: { country: params.countryRestriction },
                    };
                }
                else {
                    queryInput = {
                        input: params.query,
                    };
                }
                if (params.geoLocation) {
                    queryInput.location = new _window.google.maps.LatLng(parseFloat(params.geoLocation[0]), parseFloat(params.geoLocation[1]));
                    queryInput.radius = params.radius;
                }
                if (params.geoTypes.length) {
                    for (var i = 0; i < params.geoTypes.length; i++) {
                        /** @type {?} */
                        var _tempQuery = queryInput;
                        _tempQuery['types'] = new Array(params.geoTypes[i]);
                        promiseArr.push(_this.geoPredictionCall(placesService, _tempQuery));
                    }
                }
                else {
                    promiseArr.push(_this.geoPredictionCall(placesService, queryInput));
                }
                Promise.all(promiseArr).then(function (values) {
                    /** @type {?} */
                    var val = values;
                    if (val.length > 1) {
                        /** @type {?} */
                        var _tempArr = [];
                        for (var j = 0; j < val.length; j++) {
                            if (val[j] && val[j].length) {
                                _tempArr = _tempArr.concat(val[j]);
                            }
                        }
                        _tempArr = _this.getUniqueResults(_tempArr);
                        resolve(_tempArr);
                    }
                    else {
                        resolve(values[0]);
                    }
                });
            }
            else {
                resolve(false);
            }
        });
    };
    /**
     * @param {?} placeId
     * @return {?}
     */
    GooglePlacesService.prototype.getGeoPlaceDetail = /**
     * @param {?} placeId
     * @return {?}
     */
    function (placeId) {
        var _this = this;
        return new Promise(function (resolve) {
            if (isPlatformBrowser(_this.platformId)) {
                /** @type {?} */
                var _window = _this._global.nativeGlobal;
                /** @type {?} */
                var placesService = new _window.google.maps.places.PlacesService(document.createElement('div'));
                placesService.getDetails({ placeId: placeId }, function (result, status) {
                    if (result === null || result.length === 0) {
                        _this.getGeoPaceDetailByReferance(result.referance).then(function (referanceData) {
                            if (!referanceData) {
                                resolve(false);
                            }
                            else {
                                resolve(referanceData);
                            }
                        });
                    }
                    else {
                        resolve(result);
                    }
                });
            }
            else {
                resolve(false);
            }
        });
    };
    /**
     * @param {?} referance
     * @return {?}
     */
    GooglePlacesService.prototype.getGeoPaceDetailByReferance = /**
     * @param {?} referance
     * @return {?}
     */
    function (referance) {
        var _this = this;
        return new Promise(function (resolve) {
            if (isPlatformBrowser(_this.platformId)) {
                /** @type {?} */
                var _window_1 = _this._global.nativeGlobal;
                /** @type {?} */
                var placesService = new _window_1.google.maps.places.PlacesService();
                placesService.getDetails({ reference: referance }, function (result, status) {
                    if (status === _window_1.google.maps.places.PlacesServiceStatus.OK) {
                        resolve(result);
                    }
                    else {
                        resolve(false);
                    }
                });
            }
            else {
                resolve(false);
            }
        });
    };
    /**
     * @param {?} localStorageName
     * @param {?} result
     * @param {?} itemSavedLength
     * @return {?}
     */
    GooglePlacesService.prototype.addRecentList = /**
     * @param {?} localStorageName
     * @param {?} result
     * @param {?} itemSavedLength
     * @return {?}
     */
    function (localStorageName, result, itemSavedLength) {
        var _this = this;
        this.getRecentList(localStorageName).then(function (data) {
            if (data) {
                for (var i = 0; i < data.length; i++) {
                    if (data[i].description === result.description) {
                        data.splice(i, 1);
                        break;
                    }
                }
                data.unshift(result);
                if (data.length > itemSavedLength) {
                    data.pop();
                }
                _this._localStorageService.setItem(localStorageName, JSON.stringify(data));
            }
        });
    };
    /**
     * @param {?} localStorageName
     * @return {?}
     */
    GooglePlacesService.prototype.getRecentList = /**
     * @param {?} localStorageName
     * @return {?}
     */
    function (localStorageName) {
        var _this = this;
        return new Promise(function (resolve) {
            /** @type {?} */
            var value = _this._localStorageService.getItem(localStorageName);
            if (value) {
                value = JSON.parse(value);
            }
            else {
                value = [];
            }
            resolve(value);
        });
    };
    /**
     * @private
     * @param {?} arr
     * @return {?}
     */
    GooglePlacesService.prototype.getUniqueResults = /**
     * @private
     * @param {?} arr
     * @return {?}
     */
    function (arr) {
        return Array.from(arr.reduce(function (m, t) { return m.set(t.place_id, t); }, new Map()).values());
    };
    /**
     * @private
     * @param {?} placesService
     * @param {?} queryInput
     * @return {?}
     */
    GooglePlacesService.prototype.geoPredictionCall = /**
     * @private
     * @param {?} placesService
     * @param {?} queryInput
     * @return {?}
     */
    function (placesService, queryInput) {
        /** @type {?} */
        var _window = this._global.nativeGlobal;
        return new Promise(function (resolve) {
            placesService.getPlacePredictions(queryInput, function (result, status) {
                if (status === _window.google.maps.places.PlacesServiceStatus.OK) {
                    resolve(result);
                }
                else {
                    resolve(false);
                }
            });
        });
    };
    GooglePlacesService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    GooglePlacesService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: GlobalRef },
        { type: LocalStorageService }
    ]; };
    return GooglePlacesService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
var AppBridgeHandler = {
    HTTP: 0,
    OPEN: 1,
    OPEN_LIST: 2,
    CLOSE: 3,
    REFRESH: 4,
    PIN: 5,
    REGISTER: 6,
    UPDATE: 7,
    REQUEST_DATA: 8,
    CALLBACK: 9,
};
AppBridgeHandler[AppBridgeHandler.HTTP] = 'HTTP';
AppBridgeHandler[AppBridgeHandler.OPEN] = 'OPEN';
AppBridgeHandler[AppBridgeHandler.OPEN_LIST] = 'OPEN_LIST';
AppBridgeHandler[AppBridgeHandler.CLOSE] = 'CLOSE';
AppBridgeHandler[AppBridgeHandler.REFRESH] = 'REFRESH';
AppBridgeHandler[AppBridgeHandler.PIN] = 'PIN';
AppBridgeHandler[AppBridgeHandler.REGISTER] = 'REGISTER';
AppBridgeHandler[AppBridgeHandler.UPDATE] = 'UPDATE';
AppBridgeHandler[AppBridgeHandler.REQUEST_DATA] = 'REQUEST_DATA';
AppBridgeHandler[AppBridgeHandler.CALLBACK] = 'CALLBACK';
/** @type {?} */
var HTTP_VERBS = {
    GET: 'get',
    POST: 'post',
    PUT: 'put',
    DELETE: 'delete',
};
/** @type {?} */
var MESSAGE_TYPES = {
    REGISTER: 'register',
    OPEN: 'open',
    OPEN_LIST: 'openList',
    CLOSE: 'close',
    REFRESH: 'refresh',
    PIN: 'pin',
    UPDATE: 'update',
    HTTP_GET: 'httpGET',
    HTTP_POST: 'httpPOST',
    HTTP_PUT: 'httpPUT',
    HTTP_DELETE: 'httpDELETE',
    CUSTOM_EVENT: 'customEvent',
    REQUEST_DATA: 'requestData',
    CALLBACK: 'callback',
};
var AppBridgeService = /** @class */ (function () {
    function AppBridgeService() {
    }
    /**
     * @param {?} name
     * @return {?}
     */
    AppBridgeService.prototype.create = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return new AppBridge(name);
    };
    return AppBridgeService;
}());
var DevAppBridgeService = /** @class */ (function () {
    function DevAppBridgeService(http) {
        this.http = http;
    }
    /**
     * @param {?} name
     * @return {?}
     */
    DevAppBridgeService.prototype.create = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return new DevAppBridge(name, this.http);
    };
    return DevAppBridgeService;
}());
var AppBridge = /** @class */ (function () {
    // Type?
    function AppBridge(traceName) {
        if (traceName === void 0) { traceName = 'AppBridge'; }
        this.id = "" + Date.now();
        this._registeredFrames = [];
        this._handlers = {};
        this._tracing = false;
        this._eventListeners = {};
        this.traceName = traceName;
        if (postRobot) {
            postRobot.CONFIG.LOG_LEVEL = 'error';
            try {
                this._setupHandlers();
            }
            catch (error) {
                // No op
            }
        }
    }
    Object.defineProperty(AppBridge.prototype, "tracing", {
        set: /**
         * @param {?} tracing
         * @return {?}
         */
        function (tracing) {
            this._tracing = tracing;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} type
     * @param {?} handler
     * @return {?}
     */
    AppBridge.prototype.handle = /**
     * @param {?} type
     * @param {?} handler
     * @return {?}
     */
    function (type, handler) {
        this._handlers[type] = handler;
    };
    /**
     * @private
     * @param {?} eventType
     * @param {?} event
     * @return {?}
     */
    AppBridge.prototype._trace = /**
     * @private
     * @param {?} eventType
     * @param {?} event
     * @return {?}
     */
    function (eventType, event) {
        if (this._tracing) {
            console.log("[" + (this.traceName || this.id) + "] \"" + eventType + "\"", event); // tslint:disable-line
        }
    };
    /**
     * @protected
     * @return {?}
     */
    AppBridge.prototype._setupHandlers = /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        // Register
        postRobot.on(MESSAGE_TYPES.REGISTER, function (event) {
            _this._trace(MESSAGE_TYPES.REGISTER, event);
            _this._registeredFrames.push(event);
            return _this.register(event.data).then(function (windowName) {
                return { windowName: windowName };
            });
        });
        // Update
        postRobot.on(MESSAGE_TYPES.UPDATE, function (event) {
            _this._trace(MESSAGE_TYPES.UPDATE, event);
            return _this.update(event.data).then(function (success) {
                return { success: success };
            });
        });
        // Open
        postRobot.on(MESSAGE_TYPES.OPEN, function (event) {
            _this._trace(MESSAGE_TYPES.OPEN, event);
            return _this.open(event.data).then(function (success) {
                return { success: success };
            });
        });
        postRobot.on(MESSAGE_TYPES.OPEN_LIST, function (event) {
            _this._trace(MESSAGE_TYPES.OPEN_LIST, event);
            return _this.openList(event.data).then(function (success) {
                return { success: success };
            });
        });
        // Close
        postRobot.on(MESSAGE_TYPES.CLOSE, function (event) {
            _this._trace(MESSAGE_TYPES.CLOSE, event);
            /** @type {?} */
            var index = _this._registeredFrames.findIndex(function (frame) { return frame.data.id === event.data.id; });
            if (index !== -1) {
                _this._registeredFrames.splice(index, 1);
            }
            return _this.close(event.data).then(function (success) {
                return { success: success };
            });
        });
        // Refresh
        postRobot.on(MESSAGE_TYPES.REFRESH, function (event) {
            _this._trace(MESSAGE_TYPES.REFRESH, event);
            return _this.refresh(event.data).then(function (success) {
                return { success: success };
            });
        });
        // PIN
        postRobot.on(MESSAGE_TYPES.PIN, function (event) {
            _this._trace(MESSAGE_TYPES.PIN, event);
            return _this.pin(event.data).then(function (success) {
                return { success: success };
            });
        });
        // REQUEST_DATA
        postRobot.on(MESSAGE_TYPES.REQUEST_DATA, function (event) {
            _this._trace(MESSAGE_TYPES.REQUEST_DATA, event);
            return _this.requestData(event.data).then(function (result) {
                return { data: result.data, error: result.error };
            });
        });
        // CALLBACKS
        postRobot.on(MESSAGE_TYPES.CALLBACK, function (event) {
            _this._trace(MESSAGE_TYPES.CALLBACK, event);
            return _this.callback(event.data).then(function (success) {
                return { success: success };
            });
        });
        // HTTP-GET
        postRobot.on(MESSAGE_TYPES.HTTP_GET, function (event) {
            _this._trace(MESSAGE_TYPES.HTTP_GET, event);
            return _this.httpGET(event.data.relativeURL).then(function (result) {
                return { data: result.data, error: result.error };
            });
        });
        // HTTP-POST
        postRobot.on(MESSAGE_TYPES.HTTP_POST, function (event) {
            _this._trace(MESSAGE_TYPES.HTTP_POST, event);
            return _this.httpPOST(event.data.relativeURL, event.data.data).then(function (result) {
                return { data: result.data, error: result.error };
            });
        });
        // HTTP-PUT
        postRobot.on(MESSAGE_TYPES.HTTP_PUT, function (event) {
            _this._trace(MESSAGE_TYPES.HTTP_PUT, event);
            return _this.httpPUT(event.data.relativeURL, event.data.data).then(function (result) {
                return { data: result.data, error: result.error };
            });
        });
        // HTTP-DELETE
        postRobot.on(MESSAGE_TYPES.HTTP_DELETE, function (event) {
            _this._trace(MESSAGE_TYPES.HTTP_DELETE, event);
            return _this.httpDELETE(event.data.relativeURL).then(function (result) {
                return { data: result.data, error: result.error };
            });
        });
        // Custom Events
        postRobot.on(MESSAGE_TYPES.CUSTOM_EVENT, function (event) {
            _this._trace(MESSAGE_TYPES.CUSTOM_EVENT, event);
            if (_this._eventListeners[event.data.event]) {
                _this._eventListeners[event.data.event].forEach(function (listener) {
                    listener(event.data.data);
                });
            }
            if (_this._registeredFrames.length > 0) {
                _this._registeredFrames.forEach(function (frame) {
                    postRobot.send(frame.source, MESSAGE_TYPES.CUSTOM_EVENT, event.data);
                });
            }
        });
    };
    /**
     * Fires or responds to an open event
     * @param packet any - packet of data to send with the open event
     */
    /**
     * Fires or responds to an open event
     * @param {?} packet any - packet of data to send with the open event
     * @return {?}
     */
    AppBridge.prototype.open = /**
     * Fires or responds to an open event
     * @param {?} packet any - packet of data to send with the open event
     * @return {?}
     */
    function (packet) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this._handlers[AppBridgeHandler.OPEN]) {
                _this._handlers[AppBridgeHandler.OPEN](packet, function (success) {
                    if (success) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                });
            }
            else {
                Object.assign(packet, { id: _this.id, windowName: _this.windowName });
                postRobot
                    .sendToParent(MESSAGE_TYPES.OPEN, packet)
                    .then(function (event) {
                    _this._trace(MESSAGE_TYPES.OPEN + " (callback)", event);
                    if (event.data) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                })
                    .catch(function (err) {
                    reject(false);
                });
            }
        });
    };
    /**
     * Fires or responds to an openList event
     * @param packet any - packet of data to send with the open event
     */
    /**
     * Fires or responds to an openList event
     * @param {?} packet any - packet of data to send with the open event
     * @return {?}
     */
    AppBridge.prototype.openList = /**
     * Fires or responds to an openList event
     * @param {?} packet any - packet of data to send with the open event
     * @return {?}
     */
    function (packet) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this._handlers[AppBridgeHandler.OPEN_LIST]) {
                _this._handlers[AppBridgeHandler.OPEN_LIST](packet, function (success) {
                    if (success) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                });
            }
            else {
                /** @type {?} */
                var openListPacket = {};
                Object.assign(openListPacket, { type: 'List', entityType: packet.type, keywords: packet.keywords, criteria: packet.criteria });
                postRobot
                    .sendToParent(MESSAGE_TYPES.OPEN_LIST, packet)
                    .then(function (event) {
                    _this._trace(MESSAGE_TYPES.OPEN_LIST + " (callback)", event);
                    if (event.data) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                })
                    .catch(function (err) {
                    reject(false);
                });
            }
        });
    };
    /**
     * Fires or responds to an close event
     * @param packet any - packet of data to send with the close event
     */
    /**
     * Fires or responds to an close event
     * @param {?} packet any - packet of data to send with the close event
     * @return {?}
     */
    AppBridge.prototype.update = /**
     * Fires or responds to an close event
     * @param {?} packet any - packet of data to send with the close event
     * @return {?}
     */
    function (packet) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this._handlers[AppBridgeHandler.UPDATE]) {
                _this._handlers[AppBridgeHandler.UPDATE](packet, function (success) {
                    if (success) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                });
            }
            else {
                Object.assign(packet, { id: _this.id, windowName: _this.windowName });
                postRobot
                    .sendToParent(MESSAGE_TYPES.UPDATE, packet)
                    .then(function (event) {
                    _this._trace(MESSAGE_TYPES.UPDATE + " (callback)", event);
                    if (event.data) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                })
                    .catch(function (err) {
                    reject(false);
                });
            }
        });
    };
    /**
     * Fires or responds to an close event
     */
    /**
     * Fires or responds to an close event
     * @param {?=} packet
     * @return {?}
     */
    AppBridge.prototype.close = /**
     * Fires or responds to an close event
     * @param {?=} packet
     * @return {?}
     */
    function (packet) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this._handlers[AppBridgeHandler.CLOSE]) {
                _this._handlers[AppBridgeHandler.CLOSE](packet, function (success) {
                    if (success) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                });
            }
            else {
                if (packet) {
                    console.info('[AppBridge] - close(packet) is deprecated! Please just use close()!'); // tslint:disable-line
                }
                /** @type {?} */
                var realPacket = { id: _this.id, windowName: _this.windowName };
                postRobot
                    .sendToParent(MESSAGE_TYPES.CLOSE, realPacket)
                    .then(function (event) {
                    _this._trace(MESSAGE_TYPES.CLOSE + " (callback)", event);
                    if (event.data) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                })
                    .catch(function (err) {
                    reject(false);
                });
            }
        });
    };
    /**
     * Fires or responds to an close event
     */
    /**
     * Fires or responds to an close event
     * @param {?=} packet
     * @return {?}
     */
    AppBridge.prototype.refresh = /**
     * Fires or responds to an close event
     * @param {?=} packet
     * @return {?}
     */
    function (packet) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this._handlers[AppBridgeHandler.REFRESH]) {
                _this._handlers[AppBridgeHandler.REFRESH](packet, function (success) {
                    if (success) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                });
            }
            else {
                if (packet) {
                    console.info('[AppBridge] - refresh(packet) is deprecated! Please just use refresh()!'); // tslint:disable-line
                }
                /** @type {?} */
                var realPacket = { id: _this.id, windowName: _this.windowName };
                postRobot
                    .sendToParent(MESSAGE_TYPES.REFRESH, realPacket)
                    .then(function (event) {
                    _this._trace(MESSAGE_TYPES.REFRESH + " (callback)", event);
                    if (event.data) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                })
                    .catch(function (err) {
                    reject(false);
                });
            }
        });
    };
    /**
     * Fires or responds to a pin event
     */
    /**
     * Fires or responds to a pin event
     * @param {?=} packet
     * @return {?}
     */
    AppBridge.prototype.pin = /**
     * Fires or responds to a pin event
     * @param {?=} packet
     * @return {?}
     */
    function (packet) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this._handlers[AppBridgeHandler.PIN]) {
                _this._handlers[AppBridgeHandler.PIN](packet, function (success) {
                    if (success) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                });
            }
            else {
                if (packet) {
                    console.info('[AppBridge] - pin(packet) is deprecated! Please just use pin()!'); // tslint:disable-line
                }
                /** @type {?} */
                var realPacket = { id: _this.id, windowName: _this.windowName };
                postRobot
                    .sendToParent(MESSAGE_TYPES.PIN, realPacket)
                    .then(function (event) {
                    _this._trace(MESSAGE_TYPES.PIN + " (callback)", event);
                    if (event.data) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                })
                    .catch(function (err) {
                    reject(false);
                });
            }
        });
    };
    /**
     * Fires or responds to a requestData event
     * @param packet any - packet of data to send with the requestData event
     */
    /**
     * Fires or responds to a requestData event
     * @param {?} packet any - packet of data to send with the requestData event
     * @return {?}
     */
    AppBridge.prototype.requestData = /**
     * Fires or responds to a requestData event
     * @param {?} packet any - packet of data to send with the requestData event
     * @return {?}
     */
    function (packet) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this._handlers[AppBridgeHandler.REQUEST_DATA]) {
                _this._handlers[AppBridgeHandler.REQUEST_DATA](packet, function (data) {
                    if (data) {
                        resolve({ data: data });
                    }
                    else {
                        reject(false);
                    }
                });
            }
            else {
                Object.assign(packet, { id: _this.id, windowName: _this.windowName });
                postRobot
                    .sendToParent(MESSAGE_TYPES.REQUEST_DATA, packet)
                    .then(function (event) {
                    _this._trace(MESSAGE_TYPES.REQUEST_DATA + " (callback)", event);
                    if (event.data) {
                        resolve({ data: event.data.data });
                    }
                    else {
                        reject(false);
                    }
                })
                    .catch(function (err) {
                    reject(false);
                });
            }
        });
    };
    /**
     * Fires a generic callback command
     * @param packet string - key: string, generic: boolean
     */
    /**
     * Fires a generic callback command
     * @param {?} packet string - key: string, generic: boolean
     * @return {?}
     */
    AppBridge.prototype.callback = /**
     * Fires a generic callback command
     * @param {?} packet string - key: string, generic: boolean
     * @return {?}
     */
    function (packet) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this._handlers[AppBridgeHandler.CALLBACK]) {
                _this._handlers[AppBridgeHandler.CALLBACK](packet, function (success) {
                    if (success) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                });
            }
            else {
                Object.assign(packet, { id: _this.id, windowName: _this.windowName });
                postRobot
                    .sendToParent(MESSAGE_TYPES.CALLBACK, packet)
                    .then(function (event) {
                    _this._trace(MESSAGE_TYPES.CALLBACK + " (callback)", event);
                    if (event.data) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                })
                    .catch(function (err) {
                    reject(false);
                });
            }
        });
    };
    /**
     * Fires or responds to an register event
     * @param packet any - packet of data to send with the event
     */
    /**
     * Fires or responds to an register event
     * @param {?=} packet any - packet of data to send with the event
     * @return {?}
     */
    AppBridge.prototype.register = /**
     * Fires or responds to an register event
     * @param {?=} packet any - packet of data to send with the event
     * @return {?}
     */
    function (packet) {
        var _this = this;
        if (packet === void 0) { packet = {}; }
        return new Promise(function (resolve, reject) {
            if (_this._handlers[AppBridgeHandler.REGISTER]) {
                _this._handlers[AppBridgeHandler.REGISTER](packet, function (windowName) {
                    if (windowName) {
                        resolve(windowName);
                    }
                    else {
                        resolve(null);
                    }
                });
            }
            else {
                Object.assign(packet, { id: _this.id });
                postRobot
                    .sendToParent(MESSAGE_TYPES.REGISTER, packet)
                    .then(function (event) {
                    _this._trace(MESSAGE_TYPES.REGISTER + " (callback)", event);
                    if (event.data) {
                        _this.windowName = event.data.windowName;
                        resolve(event.data.windowName);
                    }
                    else {
                        resolve(null);
                    }
                })
                    .catch(function (err) {
                    _this._trace(MESSAGE_TYPES.REGISTER + " - FAILED - (no parent)", err);
                    resolve(null);
                });
            }
        });
    };
    /**
     * Fires or responds to an HTTP_GET event
     * @param packet any - packet of data to send with the event
     */
    /**
     * Fires or responds to an HTTP_GET event
     * @param {?} relativeURL
     * @return {?}
     */
    AppBridge.prototype.httpGET = /**
     * Fires or responds to an HTTP_GET event
     * @param {?} relativeURL
     * @return {?}
     */
    function (relativeURL) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this._handlers[AppBridgeHandler.HTTP]) {
                _this._handlers[AppBridgeHandler.HTTP]({ verb: HTTP_VERBS.GET, relativeURL: relativeURL }, function (data, error) {
                    resolve({ data: data, error: error });
                });
            }
            else {
                postRobot
                    .sendToParent(MESSAGE_TYPES.HTTP_GET, { relativeURL: relativeURL })
                    .then(function (event) {
                    resolve({ data: event.data.data, error: event.data.error });
                })
                    .catch(function (err) {
                    reject(null);
                });
            }
        });
    };
    /**
     * Fires or responds to an HTTP_POST event
     * @param packet any - packet of data to send with the event
     */
    /**
     * Fires or responds to an HTTP_POST event
     * @param {?} relativeURL
     * @param {?} postData
     * @return {?}
     */
    AppBridge.prototype.httpPOST = /**
     * Fires or responds to an HTTP_POST event
     * @param {?} relativeURL
     * @param {?} postData
     * @return {?}
     */
    function (relativeURL, postData) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this._handlers[AppBridgeHandler.HTTP]) {
                _this._handlers[AppBridgeHandler.HTTP]({ verb: HTTP_VERBS.POST, relativeURL: relativeURL, data: postData }, function (data, error) {
                    resolve({ data: data, error: error });
                });
            }
            else {
                postRobot
                    .sendToParent(MESSAGE_TYPES.HTTP_POST, { relativeURL: relativeURL, data: postData })
                    .then(function (event) {
                    resolve({ data: event.data.data, error: event.data.error });
                })
                    .catch(function (err) {
                    reject(null);
                });
            }
        });
    };
    /**
     * Fires or responds to an HTTP_PUT event
     * @param packet any - packet of data to send with the event
     */
    /**
     * Fires or responds to an HTTP_PUT event
     * @param {?} relativeURL
     * @param {?} putData
     * @return {?}
     */
    AppBridge.prototype.httpPUT = /**
     * Fires or responds to an HTTP_PUT event
     * @param {?} relativeURL
     * @param {?} putData
     * @return {?}
     */
    function (relativeURL, putData) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this._handlers[AppBridgeHandler.HTTP]) {
                _this._handlers[AppBridgeHandler.HTTP]({ verb: HTTP_VERBS.PUT, relativeURL: relativeURL, data: putData }, function (data, error) {
                    resolve({ data: data, error: error });
                });
            }
            else {
                postRobot
                    .sendToParent(MESSAGE_TYPES.HTTP_PUT, { relativeURL: relativeURL, data: putData })
                    .then(function (event) {
                    resolve({ data: event.data.data, error: event.data.error });
                })
                    .catch(function (err) {
                    reject(null);
                });
            }
        });
    };
    /**
     * Fires or responds to an HTTP_DELETE event
     * @param packet any - packet of data to send with the event
     */
    /**
     * Fires or responds to an HTTP_DELETE event
     * @param {?} relativeURL
     * @return {?}
     */
    AppBridge.prototype.httpDELETE = /**
     * Fires or responds to an HTTP_DELETE event
     * @param {?} relativeURL
     * @return {?}
     */
    function (relativeURL) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this._handlers[AppBridgeHandler.HTTP]) {
                _this._handlers[AppBridgeHandler.HTTP]({ verb: HTTP_VERBS.DELETE, relativeURL: relativeURL }, function (data, error) {
                    resolve({ data: data, error: error });
                });
            }
            else {
                postRobot
                    .sendToParent(MESSAGE_TYPES.HTTP_DELETE, { relativeURL: relativeURL })
                    .then(function (event) {
                    resolve({ data: event.data.data, error: event.data.error });
                })
                    .catch(function (err) {
                    reject(null);
                });
            }
        });
    };
    /**
     * Fires a custom event to anywhere in the application
     * @param event string - event name to fire
     * @param data any - data to be sent along with the event
     */
    /**
     * Fires a custom event to anywhere in the application
     * @param {?} event string - event name to fire
     * @param {?} data any - data to be sent along with the event
     * @return {?}
     */
    AppBridge.prototype.fireEvent = /**
     * Fires a custom event to anywhere in the application
     * @param {?} event string - event name to fire
     * @param {?} data any - data to be sent along with the event
     * @return {?}
     */
    function (event, data) {
        return new Promise(function (resolve, reject) {
            postRobot
                .sendToParent(MESSAGE_TYPES.CUSTOM_EVENT, { event: event, data: data })
                .then(function (e) {
                resolve(e);
            })
                .catch(function (err) {
                reject(null);
            });
        });
    };
    /**
     * Fires a custom event to all registered frames
     * @param event string - event name to fire
     * @param data any - data to be sent along with the event
     */
    /**
     * Fires a custom event to all registered frames
     * @param {?} event string - event name to fire
     * @param {?} data any - data to be sent along with the event
     * @return {?}
     */
    AppBridge.prototype.fireEventToChildren = /**
     * Fires a custom event to all registered frames
     * @param {?} event string - event name to fire
     * @param {?} data any - data to be sent along with the event
     * @return {?}
     */
    function (event, data) {
        if (this._registeredFrames.length > 0) {
            this._registeredFrames.forEach(function (frame) {
                postRobot.send(frame.source, MESSAGE_TYPES.CUSTOM_EVENT, {
                    eventType: event,
                    data: data,
                });
            });
        }
    };
    /**
     * Adds an event listener to a custom event
     * @param event string - event name to listen to
     * @param callback function - callback to be fired when an event is caught
     */
    /**
     * Adds an event listener to a custom event
     * @param {?} event string - event name to listen to
     * @param {?} callback function - callback to be fired when an event is caught
     * @return {?}
     */
    AppBridge.prototype.addEventListener = /**
     * Adds an event listener to a custom event
     * @param {?} event string - event name to listen to
     * @param {?} callback function - callback to be fired when an event is caught
     * @return {?}
     */
    function (event, callback) {
        if (!this._eventListeners[event]) {
            this._eventListeners[event] = [];
        }
        this._eventListeners[event].push(callback);
    };
    return AppBridge;
}());
var DevAppBridge = /** @class */ (function (_super) {
    __extends(DevAppBridge, _super);
    function DevAppBridge(traceName, http) {
        if (traceName === void 0) { traceName = 'DevAppBridge'; }
        var _this = _super.call(this, traceName) || this;
        _this.http = http;
        /** @type {?} */
        var cookie = _this.getCookie('UlEncodedIdentity');
        if (cookie && cookie.length) {
            /** @type {?} */
            var identity = JSON.parse(decodeURIComponent(cookie));
            /** @type {?} */
            var endpoints = identity.sessions.reduce(function (obj, session) {
                obj[session.name] = session.value.endpoint;
                return obj;
            }, {});
            _this.baseURL = endpoints.rest;
        }
        return _this;
    }
    /**
     * @protected
     * @return {?}
     */
    DevAppBridge.prototype._setupHandlers = /**
     * @protected
     * @return {?}
     */
    function () { };
    /**
     * Fires or responds to an HTTP_GET event
     * @param packet any - packet of data to send with the event
     */
    /**
     * Fires or responds to an HTTP_GET event
     * @param {?} relativeURL
     * @return {?}
     */
    DevAppBridge.prototype.httpGET = /**
     * Fires or responds to an HTTP_GET event
     * @param {?} relativeURL
     * @return {?}
     */
    function (relativeURL) {
        return this.http.get(this.baseURL + "/" + relativeURL, { withCredentials: true }).toPromise();
    };
    /**
     * Fires or responds to an HTTP_POST event
     * @param packet any - packet of data to send with the event
     */
    /**
     * Fires or responds to an HTTP_POST event
     * @param {?} relativeURL
     * @param {?} postData
     * @return {?}
     */
    DevAppBridge.prototype.httpPOST = /**
     * Fires or responds to an HTTP_POST event
     * @param {?} relativeURL
     * @param {?} postData
     * @return {?}
     */
    function (relativeURL, postData) {
        return this.http.post(this.baseURL + "/" + relativeURL, postData, { withCredentials: true }).toPromise();
    };
    /**
     * Fires or responds to an HTTP_PUT event
     * @param packet any - packet of data to send with the event
     */
    /**
     * Fires or responds to an HTTP_PUT event
     * @param {?} relativeURL
     * @param {?} putData
     * @return {?}
     */
    DevAppBridge.prototype.httpPUT = /**
     * Fires or responds to an HTTP_PUT event
     * @param {?} relativeURL
     * @param {?} putData
     * @return {?}
     */
    function (relativeURL, putData) {
        return this.http.put(this.baseURL + "/" + relativeURL, putData, { withCredentials: true }).toPromise();
    };
    /**
     * Fires or responds to an HTTP_DELETE event
     * @param packet any - packet of data to send with the event
     */
    /**
     * Fires or responds to an HTTP_DELETE event
     * @param {?} relativeURL
     * @return {?}
     */
    DevAppBridge.prototype.httpDELETE = /**
     * Fires or responds to an HTTP_DELETE event
     * @param {?} relativeURL
     * @return {?}
     */
    function (relativeURL) {
        return this.http.delete(this.baseURL + "/" + relativeURL, { withCredentials: true }).toPromise();
    };
    /**
     * @private
     * @param {?} cname
     * @return {?}
     */
    DevAppBridge.prototype.getCookie = /**
     * @private
     * @param {?} cname
     * @return {?}
     */
    function (cname) {
        if (document) {
            /** @type {?} */
            var name_1 = cname + "=";
            /** @type {?} */
            var ca = document.cookie.split(';');
            for (var i = 0; i < ca.length; i++) {
                /** @type {?} */
                var c = ca[i];
                while (c.charAt(0) === ' ') {
                    c = c.substring(1);
                }
                if (c.indexOf(name_1) === 0) {
                    return c.substring(name_1.length, c.length);
                }
            }
        }
        return false;
    };
    return DevAppBridge;
}(AppBridge));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var NOVO_ELEMENTS_PROVIDERS = [
    { provide: NovoDragulaService, useClass: NovoDragulaService },
    { provide: NovoModalRef, useClass: NovoModalRef },
    { provide: NovoModalService, useClass: NovoModalService },
    { provide: GooglePlacesService, useClass: GooglePlacesService },
    { provide: NovoToastService, useClass: NovoToastService },
    { provide: ComponentUtils, useClass: ComponentUtils },
    { provide: GlobalRef, useClass: BrowserGlobalRef },
    { provide: LocalStorageService, useClass: LocalStorageService },
    { provide: OptionsService, useClass: OptionsService },
    FieldInteractionApi,
    DateFormatService,
    Security,
    NovoTemplateService,
];
var NovoElementProviders = /** @class */ (function () {
    function NovoElementProviders() {
    }
    /**
     * @return {?}
     */
    NovoElementProviders.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: NovoElementProviders,
            providers: __spread(NOVO_ELEMENTS_PROVIDERS),
        };
    };
    /**
     * @return {?}
     */
    NovoElementProviders.forChild = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: NovoElementProviders,
        };
    };
    NovoElementProviders.decorators = [
        { type: NgModule, args: [{
                    imports: [],
                },] }
    ];
    return NovoElementProviders;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 * @template T
 */
var  /**
 * @abstract
 * @template T
 */
RemoteActivityTableService = /** @class */ (function () {
    function RemoteActivityTableService() {
    }
    return RemoteActivityTableService;
}());
/**
 * @template T
 */
var  /**
 * @template T
 */
StaticActivityTableService = /** @class */ (function () {
    function StaticActivityTableService(data) {
        if (data === void 0) { data = []; }
        this.data = data;
    }
    /**
     * @param {?} sort
     * @param {?} filter
     * @param {?=} page
     * @param {?=} pageSize
     * @param {?=} globalSearch
     * @param {?=} outsideFilter
     * @return {?}
     */
    StaticActivityTableService.prototype.getTableResults = /**
     * @param {?} sort
     * @param {?} filter
     * @param {?=} page
     * @param {?=} pageSize
     * @param {?=} globalSearch
     * @param {?=} outsideFilter
     * @return {?}
     */
    function (sort, filter$$1, page, pageSize, globalSearch, outsideFilter) {
        if (page === void 0) { page = 0; }
        /** @type {?} */
        var ret = Helpers.deepClone(this.data);
        if (ret.length !== 0) {
            if (globalSearch) {
                ret = ret.filter(function (item) { return Object.keys(item).some(function (key) { return ("" + item[key]).toLowerCase().includes(globalSearch.toLowerCase()); }); });
            }
            if (filter$$1) {
                /** @type {?} */
                var value = Helpers.isString(filter$$1.value) ? filter$$1.value.replace(/[.*+?^${}()|[\]\\]/g, '\\$&') : filter$$1.value;
                ret = ret.filter(Helpers.filterByField(filter$$1.id, value));
            }
            if (sort) {
                ret = ret.sort(Helpers.sortByField(sort.id, sort.value === 'desc'));
            }
            if (!Helpers.isBlank(page) && !Helpers.isBlank(pageSize)) {
                ret = ret.slice(page * pageSize, (page + 1) * pageSize);
            }
        }
        return of({ results: ret, total: this.data.length });
    };
    return StaticActivityTableService;
}());
/**
 * @template T
 */
var  /**
 * @template T
 */
ActivityTableDataSource = /** @class */ (function (_super) {
    __extends(ActivityTableDataSource, _super);
    function ActivityTableDataSource(tableService, state$$1, ref) {
        var _this = _super.call(this) || this;
        _this.tableService = tableService;
        _this.state = state$$1;
        _this.ref = ref;
        _this.total = 0;
        _this.current = 0;
        _this.loading = false;
        _this.pristine = true;
        return _this;
    }
    Object.defineProperty(ActivityTableDataSource.prototype, "totallyEmpty", {
        get: /**
         * @return {?}
         */
        function () {
            return this.total === 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivityTableDataSource.prototype, "currentlyEmpty", {
        get: /**
         * @return {?}
         */
        function () {
            return this.current === 0;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ActivityTableDataSource.prototype.connect = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var displayDataChanges = [this.state.updates];
        return merge.apply(void 0, __spread(displayDataChanges)).pipe(startWith(null), switchMap(function () {
            _this.pristine = false;
            _this.loading = true;
            return _this.tableService.getTableResults(_this.state.sort, _this.state.filter, _this.state.page, _this.state.pageSize, _this.state.globalSearch, _this.state.outsideFilter);
        }), map(function (data) {
            _this.loading = false;
            _this.total = data.total;
            _this.current = data.results.length;
            setTimeout(function () {
                _this.ref.markForCheck();
            });
            return data.results;
        }), catchError(function (error) {
            console.error(error); // tslint: disable-line
            _this.loading = false;
            return of(null);
        }));
    };
    /**
     * @return {?}
     */
    ActivityTableDataSource.prototype.disconnect = /**
     * @return {?}
     */
    function () { };
    return ActivityTableDataSource;
}(DataSource));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoActivityTableState = /** @class */ (function () {
    function NovoActivityTableState() {
        this.id = Math.random();
        this.sort = undefined;
        this.filter = undefined;
        this.page = 0;
        this.pageSize = undefined;
        this.globalSearch = undefined;
        this.selectedRows = new Map();
        this.updates = new EventEmitter();
        this.onReset = new EventEmitter();
    }
    Object.defineProperty(NovoActivityTableState.prototype, "userFiltered", {
        get: /**
         * @return {?}
         */
        function () {
            return !!(this.filter || this.sort || this.globalSearch || this.outsideFilter);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?=} fireUpdate
     * @param {?=} persistUserFilters
     * @return {?}
     */
    NovoActivityTableState.prototype.reset = /**
     * @param {?=} fireUpdate
     * @param {?=} persistUserFilters
     * @return {?}
     */
    function (fireUpdate, persistUserFilters) {
        if (fireUpdate === void 0) { fireUpdate = true; }
        if (!persistUserFilters) {
            this.sort = undefined;
            this.globalSearch = undefined;
            this.filter = undefined;
        }
        this.page = 0;
        this.selectedRows.clear();
        this.onReset.emit(true);
        if (fireUpdate) {
            this.updates.emit({
                sort: this.sort,
                filter: this.filter,
                globalSearch: this.globalSearch,
            });
        }
    };
    return NovoActivityTableState;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Workaround for https://github.com/angular/angular/issues/17849
 * @type {?}
 */
var _NovoTable = CdkTable;
/**
 * @template T
 */
var NovoTable = /** @class */ (function (_super) {
    __extends(NovoTable, _super);
    function NovoTable() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NovoTable.decorators = [
        { type: Component, args: [{
                    selector: 'novo-simple-table',
                    template: CDK_TABLE_TEMPLATE,
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    return NovoTable;
}(_NovoTable));
var NovoActivityTableActions = /** @class */ (function () {
    function NovoActivityTableActions() {
    }
    NovoActivityTableActions.decorators = [
        { type: Directive, args: [{
                    selector: 'novo-activity-table-actions',
                },] }
    ];
    return NovoActivityTableActions;
}());
var NovoActivityTableCustomHeader = /** @class */ (function () {
    function NovoActivityTableCustomHeader() {
    }
    NovoActivityTableCustomHeader.decorators = [
        { type: Directive, args: [{
                    selector: 'novo-activity-table-custom-header',
                },] }
    ];
    return NovoActivityTableCustomHeader;
}());
var NovoActivityTableCustomFilter = /** @class */ (function () {
    function NovoActivityTableCustomFilter() {
    }
    NovoActivityTableCustomFilter.decorators = [
        { type: Directive, args: [{
                    selector: 'novo-activity-table-custom-filter',
                },] }
    ];
    return NovoActivityTableCustomFilter;
}());
var NovoActivityTableEmptyMessage = /** @class */ (function () {
    function NovoActivityTableEmptyMessage() {
    }
    NovoActivityTableEmptyMessage.decorators = [
        { type: Directive, args: [{
                    selector: 'novo-activity-table-empty-message',
                },] }
    ];
    return NovoActivityTableEmptyMessage;
}());
var NovoActivityTableNoResultsMessage = /** @class */ (function () {
    function NovoActivityTableNoResultsMessage() {
    }
    NovoActivityTableNoResultsMessage.decorators = [
        { type: Directive, args: [{
                    selector: 'novo-activity-table-no-results-message',
                },] }
    ];
    return NovoActivityTableNoResultsMessage;
}());
/**
 * @template T
 */
var NovoActivityTable = /** @class */ (function () {
    function NovoActivityTable(labels, ref, state$$1) {
        this.labels = labels;
        this.ref = ref;
        this.state = state$$1;
        this.globalSearchHiddenClassToggle = false;
        this.loading = true;
        notify('[Deprecated]: The simple table is deprecated. Please migrate to novo-data-tables!');
    }
    Object.defineProperty(NovoActivityTable.prototype, "customFilter", {
        get: /**
         * @return {?}
         */
        function () {
            return this._customFilter;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._customFilter = coerceBooleanProperty(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoActivityTable.prototype, "forceShowHeader", {
        get: /**
         * @return {?}
         */
        function () {
            return this._forceShowHeader;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._forceShowHeader = coerceBooleanProperty(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoActivityTable.prototype, "hideGlobalSearch", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideGlobalSearch;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._hideGlobalSearch = coerceBooleanProperty(v);
            this.globalSearchHiddenClassToggle = this._hideGlobalSearch;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoActivityTable.prototype, "debug", {
        get: /**
         * @return {?}
         */
        function () {
            return this._debug;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._debug = coerceBooleanProperty(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoActivityTable.prototype, "empty", {
        get: /**
         * @return {?}
         */
        function () {
            return this.dataSource && this.dataSource.totallyEmpty;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoActivityTable.prototype, "loadingClass", {
        get: /**
         * @return {?}
         */
        function () {
            return this.loading || (this.dataSource && this.dataSource.loading);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    NovoActivityTable.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        this.loading = changes['activityService'] && !changes['activityService'].currentValue;
        this.ref.detectChanges();
        if (changes['activityService'] && changes['activityService'].currentValue) {
            this.loading = false;
            this.dataSource = new ActivityTableDataSource(this.activityService, this.state, this.ref);
            this.ref.detectChanges();
        }
        if (changes['outsideFilter'] && changes['outsideFilter'].currentValue) {
            if (!this.outsideFilterSubscription) {
                this.outsideFilterSubscription = this.outsideFilter.subscribe(function (filter$$1) {
                    _this.state.outsideFilter = filter$$1;
                    _this.state.updates.next({ globalSearch: _this.state.globalSearch, filter: _this.state.filter, sort: _this.state.sort });
                    _this.ref.markForCheck();
                });
            }
        }
    };
    /**
     * @return {?}
     */
    NovoActivityTable.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.outsideFilterSubscription) {
            this.outsideFilterSubscription.unsubscribe();
        }
    };
    /**
     * @return {?}
     */
    NovoActivityTable.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        if (this.paginationOptions && !this.paginationOptions.page) {
            this.paginationOptions.page = 0;
        }
        if (this.paginationOptions && !this.paginationOptions.pageSize) {
            this.paginationOptions.pageSize = 50;
        }
        if (this.paginationOptions && !this.paginationOptions.pageSizeOptions) {
            this.paginationOptions.pageSizeOptions = [10, 25, 50, 100];
        }
        this.state.page = this.paginationOptions ? this.paginationOptions.page : undefined;
        this.state.pageSize = this.paginationOptions ? this.paginationOptions.pageSize : undefined;
        this.ref.markForCheck();
    };
    /**
     * @param {?} term
     * @return {?}
     */
    NovoActivityTable.prototype.onSearchChange = /**
     * @param {?} term
     * @return {?}
     */
    function (term) {
        this.state.globalSearch = term;
        this.state.reset(false, true);
        this.state.updates.next({ globalSearch: term, filter: this.state.filter, sort: this.state.sort });
    };
    NovoActivityTable.decorators = [
        { type: Component, args: [{
                    selector: 'novo-activity-table',
                    template: "\n        <div *ngIf=\"debug\">\n            <p>Total: {{ dataSource?.total }}</p>\n            <p>Current: {{ dataSource?.current }}</p>\n            <p>Totally Empty: {{ dataSource?.totallyEmpty }}</p>\n            <p>Currently Empty: {{ dataSource?.currentlyEmpty }}</p>\n            <p>Loading (DataSource): {{ dataSource?.loading }}</p>\n            <p>User Filtered: {{ state.userFiltered }}</p>\n            <p>Loading (Table): {{ loading }}</p>\n        </div>\n        <header *ngIf=\"(!(dataSource?.totallyEmpty && !state.userFiltered) && !loading) || forceShowHeader\">\n            <ng-content select=\"[novo-activity-table-custom-header]\"></ng-content>\n            <novo-search\n                alwaysOpen=\"true\"\n                (searchChanged)=\"onSearchChange($event)\"\n                [(ngModel)]=\"state.globalSearch\"\n                *ngIf=\"!hideGlobalSearch\"\n                [placeholder]=\"searchOptions?.placeholder\"\n                [hint]=\"searchOptions?.tooltip\">\n            </novo-search>\n            <novo-simple-table-pagination\n                *ngIf=\"paginationOptions\"\n                [length]=\"dataSource?.total\"\n                [page]=\"paginationOptions.page\"\n                [pageSize]=\"paginationOptions.pageSize\"\n                [pageSizeOptions]=\"paginationOptions.pageSizeOptions\">\n            </novo-simple-table-pagination>\n            <div class=\"novo-activity-table-actions\">\n                <ng-content select=\"[novo-activity-table-actions]\"></ng-content>\n            </div>\n        </header>\n        <div class=\"novo-activity-table-loading-mask\" *ngIf=\"dataSource?.loading || loading\" data-automation-id=\"novo-activity-table-loading\">\n            <novo-loading></novo-loading>\n        </div>\n        <div class=\"novo-activity-table-filter-container\">\n            <div class=\"novo-activity-table-custom-filter\" *ngIf=\"customFilter\">\n                <ng-content select=\"[novo-activity-table-custom-filter]\"></ng-content>\n            </div>\n            <div class=\"novo-activity-table-container\">\n                <novo-simple-table *ngIf=\"(columns?.length > 0)\" [dataSource]=\"dataSource\" novoSortFilter novoSelection [class.empty]=\"dataSource?.currentlyEmpty && state.userFiltered\" [hidden]=\"dataSource?.totallyEmpty && !state.userFiltered\">\n                    <ng-content></ng-content>\n                    <ng-container novoSimpleColumnDef=\"selection\">\n                        <novo-simple-checkbox-header-cell *novoSimpleHeaderCellDef></novo-simple-checkbox-header-cell>\n                        <novo-simple-checkbox-cell *novoSimpleCellDef=\"let row; let i = index\" [row]=\"row\" [index]=\"i\"></novo-simple-checkbox-cell>\n                    </ng-container>\n                    <ng-container *ngFor=\"let column of actionColumns\" [novoSimpleColumnDef]=\"column.id\">\n                        <novo-simple-empty-header-cell [class.button-header-cell]=\"!column.options\" [class.dropdown-header-cell]=\"column.options\" *novoSimpleHeaderCellDef></novo-simple-empty-header-cell>\n                        <novo-simple-action-cell *novoSimpleCellDef=\"let row; let i = index\" [row]=\"row\" [column]=\"column\"></novo-simple-action-cell>\n                    </ng-container>\n                    <ng-container *ngFor=\"let column of columns\" [novoSimpleColumnDef]=\"column.id\">\n                        <novo-simple-header-cell *novoSimpleHeaderCellDef [column]=\"column\" [novo-simple-cell-config]=\"column.config\" [defaultSort]=\"defaultSort\">{{ column.label }}</novo-simple-header-cell>\n                        <novo-simple-cell *novoSimpleCellDef=\"let row\" [column]=\"column\" [row]=\"row\"></novo-simple-cell>\n                    </ng-container>\n                    <novo-simple-header-row *novoSimpleHeaderRowDef=\"displayedColumns\"></novo-simple-header-row>\n                    <novo-simple-row *novoSimpleRowDef=\"let row; columns: displayedColumns;\"></novo-simple-row>\n                </novo-simple-table>\n                <div class=\"novo-activity-table-no-results-container\" *ngIf=\"dataSource?.currentlyEmpty && state.userFiltered && !dataSource?.loading && !loading && !dataSource.pristine\">\n                    <div #filtered><ng-content select=\"[novo-activity-table-no-results-message]\"></ng-content></div>\n                    <div class=\"novo-activity-table-empty-message\" *ngIf=\"filtered.childNodes.length == 0\">\n                        <h4><i class=\"bhi-search-question\"></i> {{ labels.noMatchingRecordsMessage }}</h4>\n                    </div>\n                </div>\n                <div class=\"novo-activity-table-empty-container\" *ngIf=\"dataSource?.totallyEmpty && !dataSource?.loading && !loading && !state.userFiltered && !dataSource.pristine\">\n                    <div #empty><ng-content select=\"[novo-activity-table-empty-message]\"></ng-content></div>\n                    <div class=\"novo-activity-table-empty-message\" *ngIf=\"empty.childNodes.length == 0\">\n                        <h4><i class=\"bhi-search-question\"></i> {{ labels.emptyTableMessage }}</h4>\n                    </div>\n                </div>\n            </div>\n        </div>\n    ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [NovoActivityTableState]
                }] }
    ];
    /** @nocollapse */
    NovoActivityTable.ctorParameters = function () { return [
        { type: NovoLabelService },
        { type: ChangeDetectorRef },
        { type: NovoActivityTableState }
    ]; };
    NovoActivityTable.propDecorators = {
        globalSearchHiddenClassToggle: [{ type: HostBinding, args: ['class.global-search-hidden',] }],
        activityService: [{ type: Input }],
        columns: [{ type: Input }],
        displayedColumns: [{ type: Input }],
        actionColumns: [{ type: Input }],
        paginationOptions: [{ type: Input }],
        searchOptions: [{ type: Input }],
        defaultSort: [{ type: Input }],
        outsideFilter: [{ type: Input }],
        customFilter: [{ type: Input }],
        forceShowHeader: [{ type: Input }],
        hideGlobalSearch: [{ type: Input }],
        debug: [{ type: Input }],
        empty: [{ type: HostBinding, args: ['class.empty',] }],
        loadingClass: [{ type: HostBinding, args: ['class.loading',] }]
    };
    return NovoActivityTable;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoSortFilter = /** @class */ (function () {
    function NovoSortFilter(state$$1) {
        this.state = state$$1;
    }
    /**
     * @param {?} id
     * @param {?} value
     * @param {?} transform
     * @return {?}
     */
    NovoSortFilter.prototype.filter = /**
     * @param {?} id
     * @param {?} value
     * @param {?} transform
     * @return {?}
     */
    function (id, value, transform) {
        /** @type {?} */
        var filter$$1;
        if (!Helpers.isBlank(value)) {
            filter$$1 = { id: id, value: value, transform: transform };
        }
        else {
            filter$$1 = undefined;
        }
        this.state.filter = filter$$1;
        this.state.reset(false, true);
        this.state.updates.next({ filter: filter$$1, sort: this.state.sort });
    };
    /**
     * @param {?} id
     * @param {?} value
     * @param {?} transform
     * @return {?}
     */
    NovoSortFilter.prototype.sort = /**
     * @param {?} id
     * @param {?} value
     * @param {?} transform
     * @return {?}
     */
    function (id, value, transform) {
        /** @type {?} */
        var sort = { id: id, value: value, transform: transform };
        this.state.sort = sort;
        this.state.reset(false, true);
        this.state.updates.next({ sort: sort, filter: this.state.filter });
    };
    NovoSortFilter.decorators = [
        { type: Directive, args: [{
                    selector: '[novoSortFilter]',
                },] }
    ];
    /** @nocollapse */
    NovoSortFilter.ctorParameters = function () { return [
        { type: NovoActivityTableState }
    ]; };
    return NovoSortFilter;
}());
var NovoSelection = /** @class */ (function () {
    function NovoSelection(state$$1) {
        this.state = state$$1;
        this.novoSelectAllToggle = new EventEmitter();
        this.allRows = new Map();
    }
    /**
     * @param {?} id
     * @param {?} row
     * @return {?}
     */
    NovoSelection.prototype.register = /**
     * @param {?} id
     * @param {?} row
     * @return {?}
     */
    function (id, row) {
        this.allRows.set(id, row);
    };
    /**
     * @param {?} id
     * @return {?}
     */
    NovoSelection.prototype.deregister = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        this.allRows.delete(id);
        this.state.selectedRows.delete(id);
        clearTimeout(this.throttleTimeout);
        this.throttleTimeout = setTimeout(function () {
            if (_this.state.selectedRows.size === 0) {
                _this.novoSelectAllToggle.emit(false);
            }
        });
    };
    /**
     * @return {?}
     */
    NovoSelection.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.allRows.clear();
        this.state.selectedRows.clear();
    };
    /**
     * @param {?} id
     * @param {?} selected
     * @param {?} row
     * @return {?}
     */
    NovoSelection.prototype.toggle = /**
     * @param {?} id
     * @param {?} selected
     * @param {?} row
     * @return {?}
     */
    function (id, selected, row) {
        if (selected) {
            this.state.selectedRows.set(id, row);
        }
        else {
            this.state.selectedRows.delete(id);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoSelection.prototype.selectAll = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value) {
            this.state.selectedRows = new Map(this.allRows);
        }
        else {
            this.state.selectedRows.clear();
        }
        this.novoSelectAllToggle.emit(value);
    };
    NovoSelection.decorators = [
        { type: Directive, args: [{
                    selector: '[novoSelection]',
                },] }
    ];
    /** @nocollapse */
    NovoSelection.ctorParameters = function () { return [
        { type: NovoActivityTableState }
    ]; };
    NovoSelection.propDecorators = {
        novoSelectAllToggle: [{ type: Output }]
    };
    return NovoSelection;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Workaround for https://github.com/angular/angular/issues/17849
 * @type {?}
 */
var _NovoCellDef = CdkCellDef;
/** @type {?} */
var _NovoHeaderCellDef = CdkHeaderCellDef;
/** @type {?} */
var _NovoColumnDef = CdkColumnDef;
/** @type {?} */
var _NovoHeaderCell = CdkHeaderCell;
/** @type {?} */
var _NovoCell = CdkCell;
var NovoSimpleCellDef = /** @class */ (function (_super) {
    __extends(NovoSimpleCellDef, _super);
    function NovoSimpleCellDef() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NovoSimpleCellDef.decorators = [
        { type: Directive, args: [{
                    selector: '[novoSimpleCellDef]',
                    providers: [{ provide: CdkCellDef, useExisting: NovoSimpleCellDef }],
                },] }
    ];
    return NovoSimpleCellDef;
}(_NovoCellDef));
var NovoSimpleHeaderCellDef = /** @class */ (function (_super) {
    __extends(NovoSimpleHeaderCellDef, _super);
    function NovoSimpleHeaderCellDef() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NovoSimpleHeaderCellDef.decorators = [
        { type: Directive, args: [{
                    selector: '[novoSimpleHeaderCellDef]',
                    providers: [{ provide: CdkHeaderCellDef, useExisting: NovoSimpleHeaderCellDef }],
                },] }
    ];
    return NovoSimpleHeaderCellDef;
}(_NovoHeaderCellDef));
var NovoSimpleColumnDef = /** @class */ (function (_super) {
    __extends(NovoSimpleColumnDef, _super);
    function NovoSimpleColumnDef() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NovoSimpleColumnDef.decorators = [
        { type: Directive, args: [{
                    selector: '[novoSimpleColumnDef]',
                    providers: [{ provide: CdkColumnDef, useExisting: NovoSimpleColumnDef }],
                },] }
    ];
    NovoSimpleColumnDef.propDecorators = {
        name: [{ type: Input, args: ['novoSimpleColumnDef',] }]
    };
    return NovoSimpleColumnDef;
}(_NovoColumnDef));
/**
 * @template T
 */
var NovoSimpleHeaderCell = /** @class */ (function (_super) {
    __extends(NovoSimpleHeaderCell, _super);
    function NovoSimpleHeaderCell(columnDef, elementRef, renderer) {
        var _this = _super.call(this, columnDef, elementRef) || this;
        _this.elementRef = elementRef;
        _this.renderer = renderer;
        _this.role = 'columnheader';
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-column-header-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, "novo-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, 'novo-simple-header-cell');
        return _this;
    }
    /**
     * @return {?}
     */
    NovoSimpleHeaderCell.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.column.width) {
            this.renderer.setStyle(this.elementRef.nativeElement, 'min-width', this.column.width + "px");
            this.renderer.setStyle(this.elementRef.nativeElement, 'max-width', this.column.width + "px");
            this.renderer.setStyle(this.elementRef.nativeElement, 'width', this.column.width + "px");
        }
    };
    NovoSimpleHeaderCell.decorators = [
        { type: Directive, args: [{
                    selector: 'novo-simple-header-cell',
                },] }
    ];
    /** @nocollapse */
    NovoSimpleHeaderCell.ctorParameters = function () { return [
        { type: CdkColumnDef },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    NovoSimpleHeaderCell.propDecorators = {
        role: [{ type: HostBinding, args: ['attr.role',] }],
        column: [{ type: Input }]
    };
    return NovoSimpleHeaderCell;
}(_NovoHeaderCell));
var NovoSimpleEmptyHeaderCell = /** @class */ (function (_super) {
    __extends(NovoSimpleEmptyHeaderCell, _super);
    function NovoSimpleEmptyHeaderCell(columnDef, elementRef, renderer) {
        var _this = _super.call(this, columnDef, elementRef) || this;
        _this.role = 'columnheader';
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-column-header-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, "novo-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, 'novo-simple-empty-header-cell');
        return _this;
    }
    NovoSimpleEmptyHeaderCell.decorators = [
        { type: Directive, args: [{
                    selector: 'novo-simple-empty-header-cell',
                },] }
    ];
    /** @nocollapse */
    NovoSimpleEmptyHeaderCell.ctorParameters = function () { return [
        { type: CdkColumnDef },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    NovoSimpleEmptyHeaderCell.propDecorators = {
        role: [{ type: HostBinding, args: ['attr.role',] }]
    };
    return NovoSimpleEmptyHeaderCell;
}(_NovoHeaderCell));
var NovoSimpleCheckboxHeaderCell = /** @class */ (function (_super) {
    __extends(NovoSimpleCheckboxHeaderCell, _super);
    function NovoSimpleCheckboxHeaderCell(columnDef, elementRef, renderer, ref, _selection) {
        var _this = _super.call(this, columnDef, elementRef) || this;
        _this._selection = _selection;
        _this.role = 'columnheader';
        _this.selectAll = false;
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-checkbox-column-header-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, "novo-checkbox-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, 'novo-simple-checkbox-header-cell');
        _this.selectAllSubscription = _selection.novoSelectAllToggle.subscribe(function (value) {
            _this.selectAll = value;
            ref.markForCheck();
        });
        return _this;
    }
    /**
     * @return {?}
     */
    NovoSimpleCheckboxHeaderCell.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.selectAllSubscription.unsubscribe();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoSimpleCheckboxHeaderCell.prototype.toggle = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this._selection.selectAll(value);
    };
    NovoSimpleCheckboxHeaderCell.decorators = [
        { type: Component, args: [{
                    selector: 'novo-simple-checkbox-header-cell',
                    template: "<novo-checkbox [(ngModel)]=\"selectAll\" (ngModelChange)=\"toggle($event)\"></novo-checkbox>"
                }] }
    ];
    /** @nocollapse */
    NovoSimpleCheckboxHeaderCell.ctorParameters = function () { return [
        { type: CdkColumnDef },
        { type: ElementRef },
        { type: Renderer2 },
        { type: ChangeDetectorRef },
        { type: NovoSelection, decorators: [{ type: Optional }] }
    ]; };
    NovoSimpleCheckboxHeaderCell.propDecorators = {
        role: [{ type: HostBinding, args: ['attr.role',] }]
    };
    return NovoSimpleCheckboxHeaderCell;
}(_NovoHeaderCell));
/**
 * @template T
 */
var NovoSimpleCell = /** @class */ (function (_super) {
    __extends(NovoSimpleCell, _super);
    function NovoSimpleCell(columnDef, elementRef, renderer) {
        var _this = _super.call(this, columnDef, elementRef) || this;
        _this.elementRef = elementRef;
        _this.renderer = renderer;
        _this.role = 'gridcell';
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, "novo-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, 'novo-simple-cell');
        return _this;
    }
    /**
     * @return {?}
     */
    NovoSimpleCell.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.column.customClass) {
            this.renderer.addClass(this.elementRef.nativeElement, this.column.customClass(this.row));
        }
        if (this.column.width) {
            this.renderer.setStyle(this.elementRef.nativeElement, 'min-width', this.column.width + "px");
            this.renderer.setStyle(this.elementRef.nativeElement, 'max-width', this.column.width + "px");
            this.renderer.setStyle(this.elementRef.nativeElement, 'width', this.column.width + "px");
            // TODO - this inhibits resizing the page after the initial load -- but do we care?!?!
            // this.renderer.setStyle(this.spanElement.nativeElement, 'min-width', `${this.column.width - 20}px`);
            // this.renderer.setStyle(this.spanElement.nativeElement, 'max-width', `${this.column.width - 20}px`);
            // this.renderer.setStyle(this.spanElement.nativeElement, 'width', `${this.column.width - 20}px`);
        }
        // else {
        //     // TODO - this inhibits resizing the page after the initial load -- but do we care?!?!
        //     this.renderer.setStyle(this.spanElement.nativeElement, 'min-width', `${this.elementRef.nativeElement.offsetWidth - 20}px`);
        //     this.renderer.setStyle(this.spanElement.nativeElement, 'max-width', `${this.elementRef.nativeElement.offsetWidth - 20}px`);
        //     this.renderer.setStyle(this.spanElement.nativeElement, 'width', `${this.elementRef.nativeElement.offsetWidth - 20}px`);
        // }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NovoSimpleCell.prototype.onClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        Helpers.swallowEvent(event);
        if (this.column.onClick) {
            this.column.onClick(this.row);
        }
        return;
    };
    NovoSimpleCell.decorators = [
        { type: Component, args: [{
                    selector: 'novo-simple-cell',
                    template: "\n    <span [class.clickable]=\"!!column.onClick\" (click)=\"onClick($event)\" #span>{{ column.renderer(row) }}</span>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    NovoSimpleCell.ctorParameters = function () { return [
        { type: CdkColumnDef },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    NovoSimpleCell.propDecorators = {
        role: [{ type: HostBinding, args: ['attr.role',] }],
        row: [{ type: Input }],
        column: [{ type: Input }],
        spanElement: [{ type: ViewChild, args: ['span',] }]
    };
    return NovoSimpleCell;
}(_NovoCell));
var NovoSimpleCheckboxCell = /** @class */ (function (_super) {
    __extends(NovoSimpleCheckboxCell, _super);
    function NovoSimpleCheckboxCell(columnDef, elementRef, renderer, _selection) {
        var _this = _super.call(this, columnDef, elementRef) || this;
        _this.columnDef = columnDef;
        _this._selection = _selection;
        _this.role = 'gridcell';
        _this.selected = false;
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-checkbox-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, "novo-checkbox-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, 'novo-simple-checkbox-cell');
        _this.selectAllSubscription = _selection.novoSelectAllToggle.subscribe(function (value) {
            _this.selected = value;
        });
        return _this;
    }
    /**
     * @return {?}
     */
    NovoSimpleCheckboxCell.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this._selection.register(this.row.id || this.index, this.row);
        this.selected = this._selection.state.selectedRows.has(this.row.id || this.index);
    };
    /**
     * @return {?}
     */
    NovoSimpleCheckboxCell.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._selection.deregister(this.row.id || this.index);
        this.selectAllSubscription.unsubscribe();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NovoSimpleCheckboxCell.prototype.toggle = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this._selection.toggle(this.row.id || this.index, value, this.row);
    };
    NovoSimpleCheckboxCell.decorators = [
        { type: Component, args: [{
                    selector: 'novo-simple-checkbox-cell',
                    template: "\n    <novo-checkbox [ngModel]=\"selected\" (ngModelChange)=\"toggle($event)\"></novo-checkbox>\n  "
                }] }
    ];
    /** @nocollapse */
    NovoSimpleCheckboxCell.ctorParameters = function () { return [
        { type: CdkColumnDef },
        { type: ElementRef },
        { type: Renderer2 },
        { type: NovoSelection, decorators: [{ type: Optional }] }
    ]; };
    NovoSimpleCheckboxCell.propDecorators = {
        role: [{ type: HostBinding, args: ['attr.role',] }],
        row: [{ type: Input }],
        index: [{ type: Input }]
    };
    return NovoSimpleCheckboxCell;
}(_NovoCell));
/**
 * @template T
 */
var NovoSimpleActionCell = /** @class */ (function (_super) {
    __extends(NovoSimpleActionCell, _super);
    function NovoSimpleActionCell(columnDef, elementRef, renderer, labels) {
        var _this = _super.call(this, columnDef, elementRef) || this;
        _this.elementRef = elementRef;
        _this.renderer = renderer;
        _this.labels = labels;
        _this.role = 'gridcell';
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-action-column-" + columnDef.cssClassFriendlyName);
        return _this;
    }
    /**
     * @return {?}
     */
    NovoSimpleActionCell.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.column.options) {
            this.renderer.addClass(this.elementRef.nativeElement, 'novo-simple-dropdown-cell');
        }
        else {
            this.renderer.addClass(this.elementRef.nativeElement, 'novo-simple-button-cell');
        }
    };
    /**
     * @param {?} check
     * @param {?} row
     * @return {?}
     */
    NovoSimpleActionCell.prototype.isDisabled = /**
     * @param {?} check
     * @param {?} row
     * @return {?}
     */
    function (check, row) {
        if (check.disabled === true) {
            return true;
        }
        if (check.disabledCheck) {
            return check.disabledCheck(row);
        }
        return false;
    };
    NovoSimpleActionCell.decorators = [
        { type: Component, args: [{
                    selector: 'novo-simple-action-cell',
                    template: "\n    <ng-container *ngIf=\"!column.options\">\n      <button theme=\"icon\" [icon]=\"column.icon\" (click)=\"column.onClick(row)\" [disabled]=\"isDisabled(column, row)\"></button>\n    </ng-container>\n    <ng-container *ngIf=\"column.options\">\n      <novo-dropdown parentScrollSelector=\".novo-simple-table\" containerClass=\"novo-table-dropdown-cell\">\n        <button type=\"button\" theme=\"dialogue\" icon=\"collapse\" inverse>{{ column.label || labels.actions }}</button>\n        <list>\n          <item *ngFor=\"let option of column.options\" (action)=\"option.onClick(row)\" [disabled]=\"isDisabled(option, row)\">\n            <span [attr.data-automation-id]=\"option.label\">{{ option.label }}</span>\n          </item>\n        </list>\n      </novo-dropdown>\n    </ng-container>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    NovoSimpleActionCell.ctorParameters = function () { return [
        { type: CdkColumnDef },
        { type: ElementRef },
        { type: Renderer2 },
        { type: NovoLabelService }
    ]; };
    NovoSimpleActionCell.propDecorators = {
        role: [{ type: HostBinding, args: ['attr.role',] }],
        row: [{ type: Input }],
        column: [{ type: Input }]
    };
    return NovoSimpleActionCell;
}(_NovoCell));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Workaround for https://github.com/angular/angular/issues/17849
 * @type {?}
 */
var _NovoHeaderRowDef = CdkHeaderRowDef;
/** @type {?} */
var _NovoCdkRowDef = CdkRowDef;
/** @type {?} */
var _NovoHeaderRow = CdkHeaderRow;
/** @type {?} */
var _NovoRow = CdkRow;
var NovoSimpleHeaderRowDef = /** @class */ (function (_super) {
    __extends(NovoSimpleHeaderRowDef, _super);
    function NovoSimpleHeaderRowDef() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NovoSimpleHeaderRowDef.decorators = [
        { type: Directive, args: [{
                    selector: '[novoSimpleHeaderRowDef]',
                    providers: [{ provide: CdkHeaderRowDef, useExisting: NovoSimpleHeaderRowDef }],
                },] }
    ];
    NovoSimpleHeaderRowDef.propDecorators = {
        columns: [{ type: Input, args: ['novoSimpleHeaderRowDef',] }]
    };
    return NovoSimpleHeaderRowDef;
}(_NovoHeaderRowDef));
/**
 * @template T
 */
var NovoSimpleRowDef = /** @class */ (function (_super) {
    __extends(NovoSimpleRowDef, _super);
    function NovoSimpleRowDef() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NovoSimpleRowDef.decorators = [
        { type: Directive, args: [{
                    selector: '[novoSimpleRowDef]',
                    providers: [{ provide: CdkRowDef, useExisting: NovoSimpleRowDef }],
                },] }
    ];
    NovoSimpleRowDef.propDecorators = {
        columns: [{ type: Input, args: ['novoSimpleRowDefColumns',] }]
    };
    return NovoSimpleRowDef;
}(_NovoCdkRowDef));
var NovoSimpleHeaderRow = /** @class */ (function (_super) {
    __extends(NovoSimpleHeaderRow, _super);
    function NovoSimpleHeaderRow() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.rowClass = 'novo-simple-header-row';
        _this.role = 'row';
        return _this;
    }
    NovoSimpleHeaderRow.decorators = [
        { type: Component, args: [{
                    selector: 'novo-simple-header-row',
                    template: CDK_ROW_TEMPLATE,
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    NovoSimpleHeaderRow.propDecorators = {
        rowClass: [{ type: HostBinding, args: ['class',] }],
        role: [{ type: HostBinding, args: ['attr.role',] }]
    };
    return NovoSimpleHeaderRow;
}(_NovoHeaderRow));
var NovoSimpleRow = /** @class */ (function (_super) {
    __extends(NovoSimpleRow, _super);
    function NovoSimpleRow() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.rowClass = 'novo-simple-row';
        _this.role = 'row';
        return _this;
    }
    NovoSimpleRow.decorators = [
        { type: Component, args: [{
                    selector: 'novo-simple-row',
                    template: CDK_ROW_TEMPLATE,
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    NovoSimpleRow.propDecorators = {
        rowClass: [{ type: HostBinding, args: ['class',] }],
        role: [{ type: HostBinding, args: ['attr.role',] }]
    };
    return NovoSimpleRow;
}(_NovoRow));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoSimpleFilterFocus = /** @class */ (function () {
    function NovoSimpleFilterFocus(element) {
        this.element = element;
    }
    /**
     * @return {?}
     */
    NovoSimpleFilterFocus.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.element.nativeElement.focus();
    };
    NovoSimpleFilterFocus.decorators = [
        { type: Directive, args: [{
                    selector: '[novoSimpleFilterFocus]',
                },] }
    ];
    /** @nocollapse */
    NovoSimpleFilterFocus.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return NovoSimpleFilterFocus;
}());
var NovoSimpleCellHeader = /** @class */ (function () {
    function NovoSimpleCellHeader(changeDetectorRef, labels, state$$1, _sort, _cdkColumnDef) {
        var _this = this;
        this.changeDetectorRef = changeDetectorRef;
        this.labels = labels;
        this.state = state$$1;
        this._sort = _sort;
        this._cdkColumnDef = _cdkColumnDef;
        this.icon = 'sortable';
        this.filterActive = false;
        this.sortActive = false;
        this.showCustomRange = false;
        this._rerenderSubscription = state$$1.updates.subscribe(function (change) {
            if (change.sort && change.sort.id === _this.id) {
                _this.icon = "sort-" + change.sort.value;
                _this.sortActive = true;
            }
            else {
                _this.icon = 'sortable';
                _this.sortActive = false;
            }
            if (change.filter && change.filter.id === _this.id) {
                _this.filterActive = true;
                _this.filter = change.filter.value;
            }
            else {
                _this.filterActive = false;
                _this.filter = undefined;
            }
            changeDetectorRef.markForCheck();
        });
    }
    Object.defineProperty(NovoSimpleCellHeader.prototype, "config", {
        get: /**
         * @return {?}
         */
        function () {
            return this._config;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            if (!v) {
                this._config = {
                    sortable: false,
                    filterable: false,
                    filterConfig: {
                        type: 'text',
                    },
                };
            }
            else {
                this._config = {
                    sortable: coerceBooleanProperty(v.sortable),
                    filterable: coerceBooleanProperty(v.filterable),
                    transforms: v.transforms || {},
                    filterConfig: v.filterConfig || {
                        type: 'text',
                    },
                };
                if (this._config.filterConfig.type === 'date' && !this._config.filterConfig.options) {
                    this._config.filterConfig.options = this.getDefaultDateFilterOptions();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoSimpleCellHeader.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this._cdkColumnDef) {
            this.id = this._cdkColumnDef.name;
        }
        if (this.defaultSort && this.id === this.defaultSort.id) {
            this.icon = "sort-" + this.defaultSort.value;
            this.sortActive = true;
            this.changeDetectorRef.markForCheck();
        }
    };
    /**
     * @return {?}
     */
    NovoSimpleCellHeader.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._rerenderSubscription.unsubscribe();
    };
    /**
     * @return {?}
     */
    NovoSimpleCellHeader.prototype.sort = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.changeTimeout) {
            clearTimeout(this.changeTimeout);
        }
        this.changeTimeout = setTimeout(function () {
            _this.direction = _this.getNextSortDirection(_this.direction);
            _this._sort.sort(_this.id, _this.direction, _this._config.transforms.sort);
            _this.changeDetectorRef.markForCheck();
        }, 300);
    };
    /**
     * @param {?} event
     * @param {?} value
     * @return {?}
     */
    NovoSimpleCellHeader.prototype.toggleCustomRange = /**
     * @param {?} event
     * @param {?} value
     * @return {?}
     */
    function (event, value) {
        Helpers.swallowEvent(event);
        this.showCustomRange = value;
        this.changeDetectorRef.markForCheck();
        this.dropdown.openPanel(); // Ensures that the panel correctly updates to the dynamic size of the dropdown
    };
    /**
     * @param {?=} filter
     * @return {?}
     */
    NovoSimpleCellHeader.prototype.filterData = /**
     * @param {?=} filter
     * @return {?}
     */
    function (filter$$1) {
        var _this = this;
        /** @type {?} */
        var actualFilter = filter$$1;
        if (this.config.filterConfig.type === 'date' && filter$$1) {
            this.activeDateFilter = filter$$1.label || this.labels.customDateRange;
            if (filter$$1.startDate && filter$$1.endDate) {
                actualFilter = {
                    min: startOfDay(filter$$1.startDate.date),
                    max: startOfDay(addDays(startOfDay(filter$$1.endDate.date), 1)),
                };
            }
            else {
                actualFilter = {
                    min: filter$$1.min ? addDays(startOfToday(), filter$$1.min) : startOfToday(),
                    max: filter$$1.max ? addDays(startOfTomorrow(), filter$$1.max) : startOfTomorrow(),
                };
            }
        }
        if (actualFilter && actualFilter.hasOwnProperty('value')) {
            actualFilter = filter$$1.value;
        }
        if (this.changeTimeout) {
            clearTimeout(this.changeTimeout);
        }
        this.changeTimeout = setTimeout(function () {
            if (actualFilter === '') {
                actualFilter = undefined;
            }
            _this._sort.filter(_this.id, actualFilter, _this.config.transforms.filter);
            _this.changeDetectorRef.markForCheck();
        }, 300);
    };
    /**
     * @return {?}
     */
    NovoSimpleCellHeader.prototype.clearFilter = /**
     * @return {?}
     */
    function () {
        this.filter = undefined;
        this.activeDateFilter = undefined;
        this.filterData();
    };
    /**
     * @private
     * @param {?} direction
     * @return {?}
     */
    NovoSimpleCellHeader.prototype.getNextSortDirection = /**
     * @private
     * @param {?} direction
     * @return {?}
     */
    function (direction) {
        if (!direction) {
            return 'asc';
        }
        if (direction === 'asc') {
            return 'desc';
        }
        return 'asc';
    };
    /**
     * @private
     * @return {?}
     */
    NovoSimpleCellHeader.prototype.getDefaultDateFilterOptions = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var opts = [
            { label: this.labels.past1Day, min: -1, max: 0 },
            { label: this.labels.past7Days, min: -7, max: 0 },
            { label: this.labels.past30Days, min: -30, max: 0 },
            { label: this.labels.past90Days, min: -90, max: 0 },
            { label: this.labels.past1Year, min: -366, max: 0 },
            { label: this.labels.next1Day, min: 0, max: 1 },
            { label: this.labels.next7Days, min: 0, max: 7 },
            { label: this.labels.next30Days, min: 0, max: 30 },
            { label: this.labels.next90Days, min: 0, max: 90 },
            { label: this.labels.next1Year, min: 0, max: 366 },
        ];
        return opts;
    };
    NovoSimpleCellHeader.decorators = [
        { type: Component, args: [{
                    selector: '[novo-simple-cell-config]',
                    template: "\n    <label (click)=\"sort()\" data-automation-id=\"novo-activity-table-label\" [class.sort-disabled]=\"!config.sortable\">\n      <ng-content></ng-content>\n    </label>\n    <div>\n      <button *ngIf=\"config.sortable\" theme=\"icon\" [icon]=\"icon\" (click)=\"sort()\" [class.active]=\"sortActive\"\n              data-automation-id=\"novo-activity-table-sort\"></button>\n      <novo-dropdown *ngIf=\"config.filterable\" side=\"right\" parentScrollSelector=\".novo-simple-table\" containerClass=\"simple-table-dropdown\"\n                     data-automation-id=\"novo-activity-table-filter\">\n        <button type=\"button\" theme=\"icon\" icon=\"filter\" [class.active]=\"filterActive\"></button>\n        <div class=\"header\">\n          <span>{{ labels.filters }}</span>\n          <button theme=\"dialogue\" color=\"negative\" icon=\"times\" (click)=\"clearFilter()\"\n                  *ngIf=\"filter !== null && filter !== undefined && filter !== ''\" data-automation-id=\"novo-activity-table-filter-clear\">\n            {{ labels.clear }}\n          </button>\n        </div>\n        <ng-container [ngSwitch]=\"config.filterConfig.type\">\n          <list *ngSwitchCase=\"'date'\">\n            <ng-container *ngIf=\"!showCustomRange\">\n              <item [class.active]=\"activeDateFilter === option.label\" *ngFor=\"let option of config.filterConfig.options\" (click)=\"filterData(option)\"\n                    [attr.data-automation-id]=\"'novo-activity-table-filter-' + option.label\">\n                {{ option.label }} <i class=\"bhi-check\" *ngIf=\"activeDateFilter === option.label\"></i>\n              </item>\n            </ng-container>\n            <item [class.active]=\"labels.customDateRange === activeDateFilter\" (click)=\"toggleCustomRange($event, true)\"\n                  *ngIf=\"config.filterConfig.allowCustomRange && !showCustomRange\" [keepOpen]=\"true\">\n              {{ labels.customDateRange }} <i class=\"bhi-check\" *ngIf=\"labels.customDateRange === activeDateFilter\"></i>\n            </item>\n            <div class=\"calendar-container\" *ngIf=\"showCustomRange\">\n              <div (click)=\"toggleCustomRange($event, false)\"><i class=\"bhi-previous\"></i>{{ labels.backToPresetFilters }}</div>\n              <novo-date-picker (onSelect)=\"filterData($event)\" [(ngModel)]=\"filter\" range=\"true\"></novo-date-picker>\n            </div>\n          </list>\n          <list *ngSwitchCase=\"'select'\">\n            <item [class.active]=\"filter === option\" *ngFor=\"let option of config.filterConfig.options\" (click)=\"filterData(option)\"\n                  [attr.data-automation-id]=\"'novo-activity-table-filter-' + (option?.label || option)\">\n              <span>{{ option?.label || option }}</span> <i class=\"bhi-check\"\n                                                            *ngIf=\"option.hasOwnProperty('value') ? filter === option.value : filter === option\"></i>\n            </item>\n          </list>\n          <list *ngSwitchDefault>\n            <item class=\"filter-search\" keepOpen=\"true\">\n              <input type=\"text\" [(ngModel)]=\"filter\" (ngModelChange)=\"filterData($event)\" novoSimpleFilterFocus\n                     data-automation-id=\"novo-activity-table-filter-input\"/>\n            </item>\n          </list>\n        </ng-container>\n      </novo-dropdown>\n    </div>\n  ",
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    NovoSimpleCellHeader.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: NovoLabelService },
        { type: NovoActivityTableState },
        { type: NovoSortFilter, decorators: [{ type: Optional }] },
        { type: CdkColumnDef, decorators: [{ type: Optional }] }
    ]; };
    NovoSimpleCellHeader.propDecorators = {
        dropdown: [{ type: ViewChild, args: [NovoDropdownElement,] }],
        defaultSort: [{ type: Input }],
        config: [{ type: Input, args: ['novo-simple-cell-config',] }]
    };
    return NovoSimpleCellHeader;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DEFAULT_PAGE_SIZE$1 = 50;
var NovoSimpleTablePagination = /** @class */ (function () {
    function NovoSimpleTablePagination(changeDetectorRef, labels, state$$1) {
        var _this = this;
        this.changeDetectorRef = changeDetectorRef;
        this.labels = labels;
        this.state = state$$1;
        this._page = 0;
        this._length = 0;
        this._pageSizeOptions = [];
        this.pageChange = new EventEmitter();
        if (state$$1 && state$$1.onReset) {
            this.resetSubscription = this.state.onReset.subscribe(function (clear) {
                if (clear) {
                    _this.page = 0;
                    _this.changeDetectorRef.markForCheck();
                }
            });
        }
    }
    Object.defineProperty(NovoSimpleTablePagination.prototype, "page", {
        get: /**
         * @return {?}
         */
        function () {
            return this._page;
        },
        set: /**
         * @param {?} page
         * @return {?}
         */
        function (page) {
            this._page = page;
            this.changeDetectorRef.markForCheck();
            this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
            this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
            this.state.page = this._page;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoSimpleTablePagination.prototype, "length", {
        get: /**
         * @return {?}
         */
        function () {
            return this._length;
        },
        set: /**
         * @param {?} length
         * @return {?}
         */
        function (length) {
            this._length = length;
            this.changeDetectorRef.markForCheck();
            this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
            this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoSimpleTablePagination.prototype, "pageSize", {
        get: /**
         * @return {?}
         */
        function () {
            return this._pageSize;
        },
        set: /**
         * @param {?} pageSize
         * @return {?}
         */
        function (pageSize) {
            this._pageSize = pageSize;
            this.updateDisplayedPageSizeOptions();
            this.state.pageSize = this._pageSize;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoSimpleTablePagination.prototype, "pageSizeOptions", {
        get: /**
         * @return {?}
         */
        function () {
            return this._pageSizeOptions;
        },
        set: /**
         * @param {?} pageSizeOptions
         * @return {?}
         */
        function (pageSizeOptions) {
            this._pageSizeOptions = pageSizeOptions;
            this.updateDisplayedPageSizeOptions();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NovoSimpleTablePagination.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this._initialized = true;
        this.updateDisplayedPageSizeOptions();
    };
    /**
     * @return {?}
     */
    NovoSimpleTablePagination.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.resetSubscription.unsubscribe();
    };
    /**
     * @return {?}
     */
    NovoSimpleTablePagination.prototype.nextPage = /**
     * @return {?}
     */
    function () {
        if (!this.hasNextPage()) {
            return;
        }
        this.page++;
        this.emitPageEvent();
    };
    /**
     * @return {?}
     */
    NovoSimpleTablePagination.prototype.previousPage = /**
     * @return {?}
     */
    function () {
        if (!this.hasPreviousPage()) {
            return;
        }
        this.page--;
        this.emitPageEvent();
    };
    /**
     * @return {?}
     */
    NovoSimpleTablePagination.prototype.hasPreviousPage = /**
     * @return {?}
     */
    function () {
        return this.page >= 1 && this.pageSize !== 0;
    };
    /**
     * @return {?}
     */
    NovoSimpleTablePagination.prototype.hasNextPage = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var numberOfPages = Math.ceil(this.length / this.pageSize) - 1;
        return this.page < numberOfPages && this.pageSize !== 0;
    };
    /**
     * @param {?} pageSize
     * @return {?}
     */
    NovoSimpleTablePagination.prototype.changePageSize = /**
     * @param {?} pageSize
     * @return {?}
     */
    function (pageSize) {
        this.page = 0;
        this.pageSize = pageSize;
        this.emitPageEvent();
    };
    /**
     * @private
     * @return {?}
     */
    NovoSimpleTablePagination.prototype.updateDisplayedPageSizeOptions = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this._initialized) {
            return;
        }
        if (!this.pageSize) {
            this._pageSize = this.pageSizeOptions.length !== 0 ? this.pageSizeOptions[0] : DEFAULT_PAGE_SIZE$1;
        }
        this.displayedPageSizeOptions = this.pageSizeOptions.slice();
        if (this.displayedPageSizeOptions.indexOf(this.pageSize) === -1) {
            this.displayedPageSizeOptions.push(this.pageSize);
        }
        this.displayedPageSizeOptions.sort(function (a, b) { return a - b; });
        this.changeDetectorRef.markForCheck();
        this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
        this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
    };
    /**
     * @private
     * @return {?}
     */
    NovoSimpleTablePagination.prototype.emitPageEvent = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var event = {
            page: this.page,
            pageSize: this.pageSize,
            length: this.length,
        };
        this.pageChange.next(event);
        this.state.page = this.page;
        this.state.pageSize = this.pageSize;
        this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
        this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
        this.state.updates.next(event);
    };
    NovoSimpleTablePagination.decorators = [
        { type: Component, args: [{
                    selector: 'novo-simple-table-pagination',
                    template: "\n        <div class=\"novo-simple-table-pagination-size\">\n            <novo-tiles *ngIf=\"displayedPageSizeOptions.length > 1\"\n                        [(ngModel)]=\"pageSize\"\n                        [options]=\"displayedPageSizeOptions\"\n                        (onChange)=\"changePageSize($event)\"\n                        data-automation-id=\"novo-simple-table-pagination-tiles\">\n            </novo-tiles>\n            <div *ngIf=\"displayedPageSizeOptions.length <= 1\">{{ pageSize }}</div>\n        </div>\n\n        <div class=\"novo-simple-table-range-label-long\"data-automation-id=\"novo-simple-table-pagination-range-label-long\">\n            {{ longRangeLabel }}\n        </div>\n        <div class=\"novo-simple-table-range-label-short\"data-automation-id=\"novo-simple-table-pagination-range-label-short\">\n            {{ shortRangeLabel }}\n        </div>\n\n        <button theme=\"dialogue\" type=\"button\"\n                class=\"novo-simple-table-pagination-navigation-previous\"\n                (click)=\"previousPage()\"\n                icon=\"previous\"\n                side=\"left\"\n                [disabled]=\"!hasPreviousPage()\"\n                data-automation-id=\"novo-simple-table-pagination-previous\">\n            <span>{{ labels.previous }}</span>\n        </button>\n        <button theme=\"dialogue\" type=\"button\"\n                class=\"novo-simple-table-pagination-navigation-next\"\n                (click)=\"nextPage()\"\n                icon=\"next\"\n                side=\"right\"\n                [disabled]=\"!hasNextPage()\"\n                data-automation-id=\"novo-simple-table-pagination-next\">\n            <span>{{ labels.next }}</span>\n        </button>\n    ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    NovoSimpleTablePagination.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: NovoLabelService },
        { type: NovoActivityTableState }
    ]; };
    NovoSimpleTablePagination.propDecorators = {
        page: [{ type: Input }],
        length: [{ type: Input }],
        pageSize: [{ type: Input }],
        pageSizeOptions: [{ type: Input }],
        pageChange: [{ type: Output }]
    };
    return NovoSimpleTablePagination;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoSimpleTableModule = /** @class */ (function () {
    function NovoSimpleTableModule() {
    }
    NovoSimpleTableModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        NovoDatePickerModule,
                        CdkTableModule,
                        CommonModule,
                        FormsModule,
                        NovoButtonModule,
                        NovoDropdownModule,
                        NovoFormExtrasModule,
                        NovoLoadingModule,
                        NovoTilesModule,
                        NovoSearchBoxModule,
                    ],
                    exports: [
                        NovoTable,
                        NovoSimpleCellDef,
                        NovoSimpleHeaderCellDef,
                        NovoSimpleColumnDef,
                        NovoActivityTableEmptyMessage,
                        NovoActivityTableNoResultsMessage,
                        NovoSimpleHeaderRowDef,
                        NovoSimpleRowDef,
                        NovoSimpleCellHeader,
                        NovoSortFilter,
                        NovoSimpleActionCell,
                        NovoSimpleEmptyHeaderCell,
                        NovoSimpleHeaderCell,
                        NovoSimpleCell,
                        NovoSimpleHeaderRow,
                        NovoSimpleRow,
                        NovoSimpleFilterFocus,
                        NovoSimpleTablePagination,
                        NovoActivityTableCustomHeader,
                        NovoSimpleCheckboxCell,
                        NovoSimpleCheckboxHeaderCell,
                        NovoSelection,
                        NovoActivityTable,
                        NovoActivityTableActions,
                        NovoActivityTableCustomFilter,
                    ],
                    declarations: [
                        NovoTable,
                        NovoSimpleCellDef,
                        NovoSimpleHeaderCellDef,
                        NovoSimpleColumnDef,
                        NovoActivityTableEmptyMessage,
                        NovoActivityTableNoResultsMessage,
                        NovoSimpleHeaderRowDef,
                        NovoSimpleRowDef,
                        NovoSimpleCellHeader,
                        NovoSortFilter,
                        NovoSimpleActionCell,
                        NovoSimpleEmptyHeaderCell,
                        NovoSimpleHeaderCell,
                        NovoSimpleCell,
                        NovoSimpleHeaderRow,
                        NovoSimpleRow,
                        NovoSimpleFilterFocus,
                        NovoSimpleTablePagination,
                        NovoActivityTableCustomHeader,
                        NovoSimpleCheckboxCell,
                        NovoSimpleCheckboxHeaderCell,
                        NovoSelection,
                        NovoActivityTable,
                        NovoActivityTableActions,
                        NovoActivityTableCustomFilter,
                    ],
                    providers: [NovoActivityTableState],
                },] }
    ];
    return NovoSimpleTableModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PopOverContent = /** @class */ (function () {
    function PopOverContent(element, cdr) {
        this.element = element;
        this.cdr = cdr;
        this.placement = 'top';
        this.animation = true;
        this.onCloseFromOutside = new EventEmitter();
        this.top = -10000;
        this.left = -10000;
        this.displayType = 'none';
        this.isHidden = false;
    }
    /**
     * @return {?}
     */
    PopOverContent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.show();
        this.cdr.detectChanges();
    };
    /**
     * @return {?}
     */
    PopOverContent.prototype.toggle = /**
     * @return {?}
     */
    function () {
        if (this.isHidden) {
            this.show();
        }
        else {
            this.hide();
        }
    };
    /**
     * @return {?}
     */
    PopOverContent.prototype.show = /**
     * @return {?}
     */
    function () {
        if (!this.popover || !this.popover.getElement()) {
            return;
        }
        /** @type {?} */
        var p = this.positionElements(this.popover.getElement(), this.popoverDiv.nativeElement, this.placement);
        this.displayType = 'block';
        this.top = p.top;
        this.left = p.left;
        this.isHidden = false;
    };
    /**
     * @return {?}
     */
    PopOverContent.prototype.hide = /**
     * @return {?}
     */
    function () {
        this.top = -10000;
        this.left = -10000;
        this.isHidden = true;
        this.popover.hide();
    };
    /**
     * @return {?}
     */
    PopOverContent.prototype.hideFromPopover = /**
     * @return {?}
     */
    function () {
        this.top = -10000;
        this.left = -10000;
    };
    /**
     * @protected
     * @param {?} hostEl
     * @param {?} targetEl
     * @param {?} positionStr
     * @param {?=} appendToBody
     * @return {?}
     */
    PopOverContent.prototype.positionElements = /**
     * @protected
     * @param {?} hostEl
     * @param {?} targetEl
     * @param {?} positionStr
     * @param {?=} appendToBody
     * @return {?}
     */
    function (hostEl, targetEl, positionStr, appendToBody) {
        if (appendToBody === void 0) { appendToBody = false; }
        /** @type {?} */
        var positionStrParts = positionStr.split('-');
        /** @type {?} */
        var mainSide = (this.effectivePlacement = this.getEffectivePlacement(positionStrParts[0] || 'right', hostEl, targetEl));
        /** @type {?} */
        var orientation = (this.effectiveAlignment = positionStrParts[1] || 'center');
        /** @type {?} */
        var hostElPos = appendToBody ? this.offset(hostEl) : this.position(hostEl);
        /** @type {?} */
        var targetElWidth = targetEl.offsetWidth;
        /** @type {?} */
        var targetElHeight = targetEl.offsetHeight;
        /** @type {?} */
        var shiftWidth = {
            center: function () {
                return hostElPos.left + (hostElPos.width - targetElWidth) / 2;
            },
            right: function () {
                return hostElPos.left;
            },
            left: function () {
                return hostElPos.left + (hostElPos.width - targetElWidth);
            },
        };
        /** @type {?} */
        var shiftHeight = {
            center: function () {
                return hostElPos.top + (hostElPos.height - targetElHeight) / 2;
            },
            bottom: function () {
                return hostElPos.top;
            },
            top: function () {
                return hostElPos.top + (hostElPos.height - targetElHeight);
            },
        };
        /** @type {?} */
        var targetElPos;
        switch (mainSide) {
            case 'right':
                targetElPos = {
                    top: shiftHeight[orientation](),
                    left: hostElPos.left + hostElPos.width,
                };
                break;
            case 'left':
                targetElPos = {
                    top: shiftHeight[orientation](),
                    left: hostElPos.left - targetElWidth,
                };
                break;
            case 'bottom':
                targetElPos = {
                    top: hostElPos.top + hostElPos.height,
                    left: shiftWidth[orientation](),
                };
                break;
            default:
                targetElPos = {
                    top: hostElPos.top - targetElHeight,
                    left: shiftWidth[orientation](),
                };
                break;
        }
        return targetElPos;
    };
    /**
     * @protected
     * @param {?} nativeEl
     * @return {?}
     */
    PopOverContent.prototype.position = /**
     * @protected
     * @param {?} nativeEl
     * @return {?}
     */
    function (nativeEl) {
        /** @type {?} */
        var offsetParentBCR = { top: 0, left: 0 };
        /** @type {?} */
        var elBCR = this.offset(nativeEl);
        /** @type {?} */
        var offsetParentEl = this.parentOffsetEl(nativeEl);
        if (offsetParentEl !== window.document) {
            offsetParentBCR = this.offset(offsetParentEl);
            offsetParentBCR.top += offsetParentEl.clientTop - offsetParentEl.scrollTop;
            offsetParentBCR.left += offsetParentEl.clientLeft - offsetParentEl.scrollLeft;
        }
        /** @type {?} */
        var boundingClientRect = nativeEl.getBoundingClientRect();
        return {
            width: boundingClientRect.width || nativeEl.offsetWidth,
            height: boundingClientRect.height || nativeEl.offsetHeight,
            top: elBCR.top - offsetParentBCR.top,
            left: elBCR.left - offsetParentBCR.left,
        };
    };
    /**
     * @protected
     * @param {?} nativeEl
     * @return {?}
     */
    PopOverContent.prototype.offset = /**
     * @protected
     * @param {?} nativeEl
     * @return {?}
     */
    function (nativeEl) {
        /** @type {?} */
        var boundingClientRect = nativeEl.getBoundingClientRect();
        return {
            width: boundingClientRect.width || nativeEl.offsetWidth,
            height: boundingClientRect.height || nativeEl.offsetHeight,
            top: boundingClientRect.top + (window.pageYOffset || window.document.documentElement.scrollTop),
            left: boundingClientRect.left + (window.pageXOffset || window.document.documentElement.scrollLeft),
        };
    };
    /**
     * @protected
     * @param {?} nativeEl
     * @param {?} cssProp
     * @return {?}
     */
    PopOverContent.prototype.getStyle = /**
     * @protected
     * @param {?} nativeEl
     * @param {?} cssProp
     * @return {?}
     */
    function (nativeEl, cssProp) {
        if (((/** @type {?} */ (nativeEl))).currentStyle) {
            return ((/** @type {?} */ (nativeEl))).currentStyle[cssProp];
        }
        if (window.getComputedStyle) {
            return ((/** @type {?} */ (window.getComputedStyle)))(nativeEl)[cssProp];
        }
        return ((/** @type {?} */ (nativeEl.style)))[cssProp];
    };
    /**
     * @protected
     * @param {?} nativeEl
     * @return {?}
     */
    PopOverContent.prototype.isStaticPositioned = /**
     * @protected
     * @param {?} nativeEl
     * @return {?}
     */
    function (nativeEl) {
        return (this.getStyle(nativeEl, 'position') || 'static') === 'static';
    };
    /**
     * @protected
     * @param {?} nativeEl
     * @return {?}
     */
    PopOverContent.prototype.parentOffsetEl = /**
     * @protected
     * @param {?} nativeEl
     * @return {?}
     */
    function (nativeEl) {
        /** @type {?} */
        var offsetParent = nativeEl.offsetParent || window.document;
        while (offsetParent && offsetParent !== window.document && this.isStaticPositioned(offsetParent)) {
            offsetParent = offsetParent.offsetParent;
        }
        return offsetParent || window.document;
    };
    /**
     * @protected
     * @param {?} desiredPlacement
     * @param {?} hostElement
     * @param {?} targetElement
     * @return {?}
     */
    PopOverContent.prototype.getEffectivePlacement = /**
     * @protected
     * @param {?} desiredPlacement
     * @param {?} hostElement
     * @param {?} targetElement
     * @return {?}
     */
    function (desiredPlacement, hostElement, targetElement) {
        /** @type {?} */
        var hostElBoundingRect = hostElement.getBoundingClientRect();
        if (desiredPlacement === 'top' && hostElBoundingRect.top - targetElement.offsetHeight < 0) {
            return 'bottom';
        }
        if (desiredPlacement === 'bottom' && hostElBoundingRect.bottom + targetElement.offsetHeight > window.innerHeight) {
            return 'top';
        }
        if (desiredPlacement === 'left' && hostElBoundingRect.left - targetElement.offsetWidth < 0) {
            return 'right';
        }
        if (desiredPlacement === 'right' && hostElBoundingRect.right + targetElement.offsetWidth > window.innerWidth) {
            return 'left';
        }
        return desiredPlacement;
    };
    PopOverContent.decorators = [
        { type: Component, args: [{
                    selector: 'popover-content',
                    template: "\n        <div #popoverDiv\n            class=\"popover {{ effectivePlacement }}\"\n            [style.top]=\"top + 'px'\"\n            [style.left]=\"left + 'px'\"\n            [class.fade]=\"animation\"\n            style=\"display: block\"\n            role=\"popover\">\n            <div class=\"arrow {{effectiveAlignment}}\"></div>\n            <h4 class=\"popover-title\" [hidden]=\"!title\">{{ title }}</h4>\n            <div class=\"popover-content\">\n                <ng-content></ng-content>\n                <div class=\"popover-content-text\">{{ content }}</div>\n            </div>\n        </div>\n    "
                }] }
    ];
    /** @nocollapse */
    PopOverContent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    PopOverContent.propDecorators = {
        content: [{ type: Input }],
        placement: [{ type: Input }],
        title: [{ type: Input }],
        animation: [{ type: Input }],
        popoverDiv: [{ type: ViewChild, args: ['popoverDiv',] }]
    };
    return PopOverContent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PopOverDirective = /** @class */ (function () {
    function PopOverDirective(viewContainerRef, resolver) {
        this.viewContainerRef = viewContainerRef;
        this.resolver = resolver;
        this.PopoverComponent = PopOverContent;
        this.popoverOnHover = false;
        this.popoverDismissTimeout = 0;
        this.onShown = new EventEmitter();
        this.onHidden = new EventEmitter();
    }
    // ---------------------------------------------------
    // Event listeners
    // ---------------------------------------------------
    // ---------------------------------------------------
    // Event listeners
    // ---------------------------------------------------
    /**
     * @return {?}
     */
    PopOverDirective.prototype.showOrHideOnClick = 
    // ---------------------------------------------------
    // Event listeners
    // ---------------------------------------------------
    /**
     * @return {?}
     */
    function () {
        if (this.popoverOnHover || this.popoverDisabled) {
            return;
        }
        this.toggle();
    };
    /**
     * @return {?}
     */
    PopOverDirective.prototype.showOnHover = /**
     * @return {?}
     */
    function () {
        if (!this.popoverOnHover || this.popoverDisabled) {
            return;
        }
        this.show();
    };
    /**
     * @return {?}
     */
    PopOverDirective.prototype.hideOnHover = /**
     * @return {?}
     */
    function () {
        if (!this.popoverOnHover || this.popoverDisabled) {
            return;
        }
        this.hide();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    PopOverDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes['popoverDisabled']) {
            if (changes['popoverDisabled'].currentValue) {
                this.hide();
            }
        }
        if (changes['popoverAlways']) {
            if (changes['popoverAlways'].currentValue) {
                this.show();
            }
        }
    };
    /**
     * @return {?}
     */
    PopOverDirective.prototype.toggle = /**
     * @return {?}
     */
    function () {
        if (!this.visible) {
            this.show();
        }
        else {
            this.hide();
        }
    };
    /**
     * @return {?}
     */
    PopOverDirective.prototype.show = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.visible) {
            return;
        }
        this.visible = true;
        if (typeof this.content === 'string') {
            /** @type {?} */
            var factory = this.resolver.resolveComponentFactory(this.PopoverComponent);
            if (!this.visible) {
                return;
            }
            this.popover = this.viewContainerRef.createComponent(factory);
            /** @type {?} */
            var popover = (/** @type {?} */ (this.popover.instance));
            popover.popover = this;
            popover.content = (/** @type {?} */ (this.content));
            if (this.popoverPlacement !== undefined) {
                popover.placement = this.popoverPlacement;
            }
            if (this.popoverAnimation !== undefined) {
                popover.animation = this.popoverAnimation;
            }
            if (this.popoverTitle !== undefined) {
                popover.title = this.popoverTitle;
            }
            popover.onCloseFromOutside.subscribe(function () { return _this.hide(); });
            if (this.popoverDismissTimeout > 0) {
                setTimeout(function () { return _this.hide(); }, this.popoverDismissTimeout);
            }
        }
        else {
            /** @type {?} */
            var popover = (/** @type {?} */ (this.content));
            popover.popover = this;
            if (this.popoverPlacement !== undefined) {
                popover.placement = this.popoverPlacement;
            }
            if (this.popoverAnimation !== undefined) {
                popover.animation = this.popoverAnimation;
            }
            if (this.popoverTitle !== undefined) {
                popover.title = this.popoverTitle;
            }
            popover.onCloseFromOutside.subscribe(function () { return _this.hide(); });
            if (this.popoverDismissTimeout > 0) {
                setTimeout(function () { return _this.hide(); }, this.popoverDismissTimeout);
            }
            popover.show();
        }
        this.onShown.emit(this);
    };
    /**
     * @return {?}
     */
    PopOverDirective.prototype.hide = /**
     * @return {?}
     */
    function () {
        if (!this.visible) {
            return;
        }
        this.visible = false;
        if (this.popover) {
            this.popover.destroy();
        }
        if (this.content instanceof PopOverContent) {
            ((/** @type {?} */ (this.content))).hideFromPopover();
        }
        this.onHidden.emit(this);
    };
    /**
     * @return {?}
     */
    PopOverDirective.prototype.getElement = /**
     * @return {?}
     */
    function () {
        return this.viewContainerRef.element.nativeElement;
    };
    PopOverDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[popover]',
                },] }
    ];
    /** @nocollapse */
    PopOverDirective.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: ComponentFactoryResolver }
    ]; };
    PopOverDirective.propDecorators = {
        content: [{ type: Input, args: ['popover',] }],
        popoverDisabled: [{ type: Input }],
        popoverAlways: [{ type: Input }],
        popoverAnimation: [{ type: Input }],
        popoverPlacement: [{ type: Input }],
        popoverTitle: [{ type: Input }],
        popoverOnHover: [{ type: Input }],
        popoverDismissTimeout: [{ type: Input }],
        onShown: [{ type: Output }],
        onHidden: [{ type: Output }],
        showOrHideOnClick: [{ type: HostListener, args: ['click',] }],
        showOnHover: [{ type: HostListener, args: ['focusin',] }, { type: HostListener, args: ['mouseenter',] }],
        hideOnHover: [{ type: HostListener, args: ['focusout',] }, { type: HostListener, args: ['mouseleave',] }]
    };
    return PopOverDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoPopOverModule = /** @class */ (function () {
    function NovoPopOverModule() {
    }
    NovoPopOverModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [PopOverContent, PopOverDirective],
                    exports: [PopOverContent, PopOverDirective],
                    entryComponents: [PopOverContent],
                },] }
    ];
    return NovoPopOverModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PlacesListComponent = /** @class */ (function () {
    function PlacesListComponent(platformId, _elmRef, _global, _googlePlacesService) {
        this.platformId = platformId;
        this._elmRef = _elmRef;
        this._global = _global;
        this._googlePlacesService = _googlePlacesService;
        this.term = '';
        this.termChange = new EventEmitter();
        this.select = new EventEmitter();
        this.locationInput = '';
        this.gettingCurrentLocationFlag = false;
        this.dropdownOpen = false;
        this.recentDropdownOpen = false;
        this.queryItems = [];
        this.isSettingsError = false;
        this.settingsErrorMsg = '';
        this.settings = {};
        this.moduleinit = false;
        this.selectedDataIndex = -1;
        this.recentSearchData = [];
        this.userSelectedOption = '';
        this.defaultSettings = {
            geoPredictionServerUrl: '',
            geoLatLangServiceUrl: '',
            geoLocDetailServerUrl: '',
            geoCountryRestriction: [],
            geoTypes: [],
            geoLocation: [],
            geoRadius: 0,
            serverResponseListHierarchy: [],
            serverResponseatLangHierarchy: [],
            serverResponseDetailHierarchy: [],
            resOnSearchButtonClickOnly: false,
            useGoogleGeoApi: true,
            inputPlaceholderText: 'Enter Area Name',
            inputString: '',
            showSearchButton: true,
            showRecentSearch: true,
            showCurrentLocation: true,
            recentStorageName: 'recentSearches',
            noOfRecentSearchSave: 5,
            currentLocIconUrl: '',
            searchIconUrl: '',
            locationIconUrl: '',
        };
    }
    /**
     * @return {?}
     */
    PlacesListComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!this.moduleinit) {
            this.moduleInit();
        }
    };
    /**
     * @return {?}
     */
    PlacesListComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this.moduleinit = true;
        this.moduleInit();
        this.searchinputCallback(null);
    };
    // function called when click event happens in input box. (Binded with view)
    // function called when click event happens in input box. (Binded with view)
    /**
     * @param {?} event
     * @return {?}
     */
    PlacesListComponent.prototype.searchinputClickCallback = 
    // function called when click event happens in input box. (Binded with view)
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.target.select();
        this.searchinputCallback(event);
    };
    // function called when there is a change in input. (Binded with view)
    // function called when there is a change in input. (Binded with view)
    /**
     * @param {?} event
     * @return {?}
     */
    PlacesListComponent.prototype.searchinputCallback = 
    // function called when there is a change in input. (Binded with view)
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var inputVal = this.locationInput;
        if (inputVal) {
            this.getListQuery(inputVal);
        }
        else {
            this.queryItems = [];
            if (this.userSelectedOption) {
                this.userQuerySubmit('false');
            }
            this.userSelectedOption = '';
            if (this.settings.showRecentSearch) {
                this.showRecentSearch();
            }
            else {
                this.dropdownOpen = false;
            }
        }
    };
    // function to execute when user hover over autocomplete list.(binded with view)
    // function to execute when user hover over autocomplete list.(binded with view)
    /**
     * @param {?} index
     * @return {?}
     */
    PlacesListComponent.prototype.activeListNode = 
    // function to execute when user hover over autocomplete list.(binded with view)
    /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        for (var i = 0; i < this.queryItems.length; i++) {
            if (index === i) {
                this.queryItems[i].active = true;
                this.selectedDataIndex = index;
            }
            else {
                this.queryItems[i].active = false;
            }
        }
    };
    // function to execute when user select the autocomplete list.(binded with view)
    // function to execute when user select the autocomplete list.(binded with view)
    /**
     * @param {?} event
     * @param {?} index
     * @return {?}
     */
    PlacesListComponent.prototype.selectedListNode = 
    // function to execute when user select the autocomplete list.(binded with view)
    /**
     * @param {?} event
     * @param {?} index
     * @return {?}
     */
    function (event, index) {
        this.dropdownOpen = false;
        if (this.recentDropdownOpen) {
            this.setRecentLocation(this.queryItems[index]);
        }
        else {
            this.getPlaceLocationInfo(this.queryItems[index]);
        }
    };
    // function to close the autocomplete list when clicked outside. (binded with view)
    // function to close the autocomplete list when clicked outside. (binded with view)
    /**
     * @param {?} event
     * @return {?}
     */
    PlacesListComponent.prototype.closeAutocomplete = 
    // function to close the autocomplete list when clicked outside. (binded with view)
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this._elmRef.nativeElement.contains(event.target)) {
            this.selectedDataIndex = -1;
            this.dropdownOpen = false;
        }
    };
    // function to manually trigger the callback to parent component when clicked search button.
    // function to manually trigger the callback to parent component when clicked search button.
    /**
     * @param {?=} selectedOption
     * @return {?}
     */
    PlacesListComponent.prototype.userQuerySubmit = 
    // function to manually trigger the callback to parent component when clicked search button.
    /**
     * @param {?=} selectedOption
     * @return {?}
     */
    function (selectedOption) {
        /** @type {?} */
        var _userOption = selectedOption === 'false' ? '' : this.userSelectedOption;
        if (_userOption) {
            this.select.emit(this.userSelectedOption);
        }
    };
    // function to get user current location from the device.
    // function to get user current location from the device.
    /**
     * @return {?}
     */
    PlacesListComponent.prototype.currentLocationSelected = 
    // function to get user current location from the device.
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (isPlatformBrowser(this.platformId)) {
            this.gettingCurrentLocationFlag = true;
            this.dropdownOpen = false;
            this._googlePlacesService.getGeoCurrentLocation().then(function (result) {
                if (!result) {
                    _this.gettingCurrentLocationFlag = false;
                }
                else {
                    _this.getCurrentLocationInfo(result);
                }
            });
        }
    };
    // module initialization happens. function called by ngOninit and ngOnChange
    // module initialization happens. function called by ngOninit and ngOnChange
    /**
     * @private
     * @return {?}
     */
    PlacesListComponent.prototype.moduleInit = 
    // module initialization happens. function called by ngOninit and ngOnChange
    /**
     * @private
     * @return {?}
     */
    function () {
        this.settings = this.setUserSettings();
        // condition to check if Radius is set without location detail.
        if (this.settings.geoRadius) {
            if (this.settings.geoLocation.length !== 2) {
                this.isSettingsError = true;
                this.settingsErrorMsg =
                    this.settingsErrorMsg + 'Radius should be used with GeoLocation. Please use "geoLocation" key to set lat and lng. ';
            }
        }
        // condition to check if lat and lng is set and radious is not set then it will set to 20,000KM by default
        if (this.settings.geoLocation.length === 2 && !this.settings.geoRadius) {
            this.settings.geoRadius = 20000000;
        }
        if (this.settings.showRecentSearch) {
            this.getRecentLocations();
        }
        if (!this.settings.useGoogleGeoApi) {
            if (!this.settings.geoPredictionServerUrl) {
                this.isSettingsError = true;
                this.settingsErrorMsg =
                    this.settingsErrorMsg + 'Prediction custom server url is not defined. Please use "geoPredictionServerUrl" key to set. ';
            }
            if (!this.settings.geoLatLangServiceUrl) {
                this.isSettingsError = true;
                this.settingsErrorMsg =
                    this.settingsErrorMsg + 'Latitude and longitude custom server url is not defined. Please use "geoLatLangServiceUrl" key to set. ';
            }
            if (!this.settings.geoLocDetailServerUrl) {
                this.isSettingsError = true;
                this.settingsErrorMsg =
                    this.settingsErrorMsg + 'Location detail custom server url is not defined. Please use "geoLocDetailServerUrl" key to set. ';
            }
        }
        this.locationInput = this.term;
    };
    // function to process the search query when pressed enter.
    // function to process the search query when pressed enter.
    /**
     * @private
     * @return {?}
     */
    PlacesListComponent.prototype.processSearchQuery = 
    // function to process the search query when pressed enter.
    /**
     * @private
     * @return {?}
     */
    function () {
        if (this.queryItems.length) {
            if (this.selectedDataIndex > -1) {
                this.selectedListNode(null, this.selectedDataIndex);
            }
            else {
                this.selectedListNode(null, 0);
            }
        }
    };
    // function to set user settings if it is available.
    // function to set user settings if it is available.
    /**
     * @private
     * @return {?}
     */
    PlacesListComponent.prototype.setUserSettings = 
    // function to set user settings if it is available.
    /**
     * @private
     * @return {?}
     */
    function () {
        var e_1, _a;
        /** @type {?} */
        var _tempObj = {};
        if (this.userSettings && typeof this.userSettings === 'object') {
            /** @type {?} */
            var keys = Object.keys(this.defaultSettings);
            try {
                for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                    var value = keys_1_1.value;
                    _tempObj[value] = this.userSettings[value] !== undefined ? this.userSettings[value] : this.defaultSettings[value];
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return _tempObj;
        }
        else {
            return this.defaultSettings;
        }
    };
    // function to get the autocomplete list based on user input.
    // function to get the autocomplete list based on user input.
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    PlacesListComponent.prototype.getListQuery = 
    // function to get the autocomplete list based on user input.
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        this.recentDropdownOpen = false;
        if (this.settings.useGoogleGeoApi) {
            /** @type {?} */
            var _tempParams = {
                query: value,
                countryRestriction: this.settings.geoCountryRestriction,
                geoTypes: this.settings.geoTypes,
            };
            if (this.settings.geoLocation.length === 2) {
                _tempParams.geoLocation = this.settings.geoLocation;
                _tempParams.radius = this.settings.geoRadius;
            }
            this._googlePlacesService.getGeoPrediction(_tempParams).then(function (result) {
                _this.updateListItem(result);
            });
        }
        else {
            this._googlePlacesService.getPredictions(this.settings.geoPredictionServerUrl, value).then(function (result) {
                result = _this.extractServerList(_this.settings.serverResponseListHierarchy, result);
                _this.updateListItem(result);
            });
        }
    };
    // function to extratc custom data which is send by the server.
    // function to extratc custom data which is send by the server.
    /**
     * @private
     * @param {?} arrayList
     * @param {?} data
     * @return {?}
     */
    PlacesListComponent.prototype.extractServerList = 
    // function to extratc custom data which is send by the server.
    /**
     * @private
     * @param {?} arrayList
     * @param {?} data
     * @return {?}
     */
    function (arrayList, data) {
        var e_2, _a;
        if (arrayList.length) {
            /** @type {?} */
            var _tempData = data;
            try {
                for (var arrayList_1 = __values(arrayList), arrayList_1_1 = arrayList_1.next(); !arrayList_1_1.done; arrayList_1_1 = arrayList_1.next()) {
                    var key = arrayList_1_1.value;
                    _tempData = _tempData[key];
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (arrayList_1_1 && !arrayList_1_1.done && (_a = arrayList_1.return)) _a.call(arrayList_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
            return _tempData;
        }
        else {
            return data;
        }
    };
    // function to update the predicted list.
    // function to update the predicted list.
    /**
     * @private
     * @param {?} listData
     * @return {?}
     */
    PlacesListComponent.prototype.updateListItem = 
    // function to update the predicted list.
    /**
     * @private
     * @param {?} listData
     * @return {?}
     */
    function (listData) {
        this.queryItems = listData ? listData : [];
        this.dropdownOpen = true;
    };
    // function to show the recent search result.
    // function to show the recent search result.
    /**
     * @private
     * @return {?}
     */
    PlacesListComponent.prototype.showRecentSearch = 
    // function to show the recent search result.
    /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.recentDropdownOpen = true;
        this.dropdownOpen = true;
        this._googlePlacesService.getRecentList(this.settings.recentStorageName).then(function (result) {
            if (result) {
                _this.queryItems = result;
            }
            else {
                _this.queryItems = [];
            }
        });
    };
    // //function to navigate through list when up and down keyboard key is pressed;
    // private navigateInList(keyCode: number): any {
    //     let arrayIndex: number = 0;
    //     //arrow down
    //     if (keyCode === 40) {
    //         if (this.selectedDataIndex >= 0) {
    //             arrayIndex = ((this.selectedDataIndex + 1) <= (this.queryItems.length - 1)) ? (this.selectedDataIndex + 1) : 0;
    //         }
    //         this.activeListNode(arrayIndex);
    //     } else if (keyCode === 38) {//arrow up
    //         if (this.selectedDataIndex >= 0) {
    //             arrayIndex = ((this.selectedDataIndex - 1) >= 0) ? (this.selectedDataIndex - 1) : (this.queryItems.length - 1);
    //         } else {
    //             arrayIndex = this.queryItems.length - 1;
    //         }
    //         this.activeListNode(arrayIndex);
    //     } else {
    //         this.processSearchQuery();
    //     }
    // }
    // function to execute to get location detail based on latitude and longitude.
    // //function to navigate through list when up and down keyboard key is pressed;
    // private navigateInList(keyCode: number): any {
    //     let arrayIndex: number = 0;
    //     //arrow down
    //     if (keyCode === 40) {
    //         if (this.selectedDataIndex >= 0) {
    //             arrayIndex = ((this.selectedDataIndex + 1) <= (this.queryItems.length - 1)) ? (this.selectedDataIndex + 1) : 0;
    //         }
    //         this.activeListNode(arrayIndex);
    //     } else if (keyCode === 38) {//arrow up
    //         if (this.selectedDataIndex >= 0) {
    //             arrayIndex = ((this.selectedDataIndex - 1) >= 0) ? (this.selectedDataIndex - 1) : (this.queryItems.length - 1);
    //         } else {
    //             arrayIndex = this.queryItems.length - 1;
    //         }
    //         this.activeListNode(arrayIndex);
    //     } else {
    //         this.processSearchQuery();
    //     }
    // }
    // function to execute to get location detail based on latitude and longitude.
    /**
     * @private
     * @param {?} latlng
     * @return {?}
     */
    PlacesListComponent.prototype.getCurrentLocationInfo = 
    // //function to navigate through list when up and down keyboard key is pressed;
    // private navigateInList(keyCode: number): any {
    //     let arrayIndex: number = 0;
    //     //arrow down
    //     if (keyCode === 40) {
    //         if (this.selectedDataIndex >= 0) {
    //             arrayIndex = ((this.selectedDataIndex + 1) <= (this.queryItems.length - 1)) ? (this.selectedDataIndex + 1) : 0;
    //         }
    //         this.activeListNode(arrayIndex);
    //     } else if (keyCode === 38) {//arrow up
    //         if (this.selectedDataIndex >= 0) {
    //             arrayIndex = ((this.selectedDataIndex - 1) >= 0) ? (this.selectedDataIndex - 1) : (this.queryItems.length - 1);
    //         } else {
    //             arrayIndex = this.queryItems.length - 1;
    //         }
    //         this.activeListNode(arrayIndex);
    //     } else {
    //         this.processSearchQuery();
    //     }
    // }
    // function to execute to get location detail based on latitude and longitude.
    /**
     * @private
     * @param {?} latlng
     * @return {?}
     */
    function (latlng) {
        var _this = this;
        if (this.settings.useGoogleGeoApi) {
            this._googlePlacesService.getGeoLatLngDetail(latlng).then(function (result) {
                if (result) {
                    _this.setRecentLocation(result);
                }
                _this.gettingCurrentLocationFlag = false;
            });
        }
        else {
            this._googlePlacesService.getLatLngDetail(this.settings.geoLatLangServiceUrl, latlng.lat, latlng.lng).then(function (result) {
                if (result) {
                    result = _this.extractServerList(_this.settings.serverResponseatLangHierarchy, result);
                    _this.setRecentLocation(result);
                }
                _this.gettingCurrentLocationFlag = false;
            });
        }
    };
    // function to retrive the location info based on goovle place id.
    // function to retrive the location info based on goovle place id.
    /**
     * @private
     * @param {?} selectedData
     * @return {?}
     */
    PlacesListComponent.prototype.getPlaceLocationInfo = 
    // function to retrive the location info based on goovle place id.
    /**
     * @private
     * @param {?} selectedData
     * @return {?}
     */
    function (selectedData) {
        var _this = this;
        if (this.settings.useGoogleGeoApi) {
            this._googlePlacesService.getGeoPlaceDetail(selectedData.place_id).then(function (data) {
                if (data) {
                    _this.setRecentLocation(data);
                }
            });
        }
        else {
            this._googlePlacesService.getPlaceDetails(this.settings.geoLocDetailServerUrl, selectedData.place_id).then(function (result) {
                if (result) {
                    result = _this.extractServerList(_this.settings.serverResponseDetailHierarchy, result);
                    _this.setRecentLocation(result);
                }
            });
        }
    };
    // function to store the selected user search in the localstorage.
    // function to store the selected user search in the localstorage.
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    PlacesListComponent.prototype.setRecentLocation = 
    // function to store the selected user search in the localstorage.
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    function (data) {
        data = JSON.parse(JSON.stringify(data));
        data.description = data.description ? data.description : data.formatted_address;
        data.active = false;
        this.selectedDataIndex = -1;
        this.locationInput = data.description;
        if (this.settings.showRecentSearch) {
            this._googlePlacesService.addRecentList(this.settings.recentStorageName, data, this.settings.noOfRecentSearchSave);
            this.getRecentLocations();
        }
        this.userSelectedOption = data;
        // below code will execute only when user press enter or select any option selection and it emit a callback to the parent component.
        if (!this.settings.resOnSearchButtonClickOnly) {
            this.select.emit(data);
            this.termChange.emit(data);
        }
    };
    // function to retrive the stored recent user search from the localstorage.
    // function to retrive the stored recent user search from the localstorage.
    /**
     * @private
     * @return {?}
     */
    PlacesListComponent.prototype.getRecentLocations = 
    // function to retrive the stored recent user search from the localstorage.
    /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this._googlePlacesService.getRecentList(this.settings.recentStorageName).then(function (data) {
            _this.recentSearchData = data && data.length ? data : [];
        });
    };
    PlacesListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'google-places-list',
                    template: "\n        <novo-list direction=\"vertical\">\n            <novo-list-item *ngFor=\"let data of queryItems;let $index = index\" (click)=\"selectedListNode($event, $index)\">\n                <item-header>\n                    <item-avatar icon=\"location\"></item-avatar>\n                    <item-title>{{data.structured_formatting?.main_text ? data.structured_formatting.main_text : data.description}}</item-title>\n                </item-header>\n                <item-content>{{data.structured_formatting?.secondary_text}}</item-content>\n            </novo-list-item>\n        </novo-list>\n    "
                }] }
    ];
    /** @nocollapse */
    PlacesListComponent.ctorParameters = function () { return [
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: ElementRef },
        { type: GlobalRef },
        { type: GooglePlacesService }
    ]; };
    PlacesListComponent.propDecorators = {
        userSettings: [{ type: Input }],
        term: [{ type: Input }],
        termChange: [{ type: Output }],
        select: [{ type: Output }]
    };
    return PlacesListComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var GooglePlacesModule = /** @class */ (function () {
    function GooglePlacesModule() {
    }
    GooglePlacesModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [PlacesListComponent],
                    imports: [CommonModule, HttpClientModule, FormsModule, NovoListModule],
                    exports: [PlacesListComponent],
                    providers: [GooglePlacesService],
                },] }
    ];
    return GooglePlacesModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NovoElementsModule = /** @class */ (function () {
    function NovoElementsModule() {
    }
    NovoElementsModule.decorators = [
        { type: NgModule, args: [{
                    imports: [ReactiveFormsModule],
                    exports: [
                        NovoPipesModule,
                        NovoButtonModule,
                        NovoLoadingModule,
                        NovoCardModule,
                        NovoCalendarModule,
                        NovoToastModule,
                        NovoTooltipModule,
                        NovoHeaderModule,
                        NovoTabModule,
                        NovoTilesModule,
                        NovoModalModule,
                        NovoQuickNoteModule,
                        NovoRadioModule,
                        NovoDropdownModule,
                        NovoSelectModule,
                        NovoListModule,
                        NovoSwitchModule,
                        NovoDragulaModule,
                        NovoSliderModule,
                        NovoPickerModule,
                        NovoChipsModule,
                        NovoDatePickerModule,
                        NovoTimePickerModule,
                        NovoDateTimePickerModule,
                        NovoNovoCKEditorModule,
                        NovoTipWellModule,
                        NovoSimpleTableModule,
                        NovoTableModule,
                        NovoTableExtrasModule,
                        NovoFormModule,
                        NovoFormExtrasModule,
                        NovoCategoryDropdownModule,
                        NovoMultiPickerModule,
                        NovoPopOverModule,
                        NovoDataTableModule,
                        NovoSearchBoxModule,
                        NovoOverlayModule,
                        GooglePlacesModule,
                        NovoValueModule,
                        NovoAceEditorModule,
                        NovoIconModule,
                        NovoExpansionModule,
                        UnlessModule,
                        NovoCommonModule,
                        NovoStepperModule,
                        ScrollDispatchModule,
                    ],
                    providers: [
                        { provide: ComponentUtils, useClass: ComponentUtils },
                        { provide: DateFormatService, useClass: DateFormatService },
                        { provide: NovoLabelService, useClass: NovoLabelService },
                        { provide: NovoDragulaService, useClass: NovoDragulaService },
                        { provide: GooglePlacesService, useClass: GooglePlacesService },
                        { provide: GlobalRef, useClass: BrowserGlobalRef },
                        { provide: LocalStorageService, useClass: LocalStorageService },
                        { provide: OptionsService, useClass: OptionsService },
                        { provide: FormUtils, useClass: FormUtils },
                    ],
                },] }
    ];
    return NovoElementsModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ActivityTableRenderers = /** @class */ (function () {
    function ActivityTableRenderers() {
    }
    /**
     * @template T
     * @param {?} prop
     * @return {?}
     */
    ActivityTableRenderers.propertyRenderer = /**
     * @template T
     * @param {?} prop
     * @return {?}
     */
    function (prop) {
        /** @type {?} */
        var ret = function (data) {
            // TODO - allow for dots and sub props
            return data[prop];
        };
        return ret;
    };
    /**
     * @template T
     * @param {?} prop
     * @return {?}
     */
    ActivityTableRenderers.dateRenderer = /**
     * @template T
     * @param {?} prop
     * @return {?}
     */
    function (prop) {
        /** @type {?} */
        var ret = function (data) {
            return data[prop] ? new Date(data[prop]).toLocaleDateString() : '';
        };
        return ret;
    };
    return ActivityTableRenderers;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NovoAceEditorModule, NovoPipesModule, NovoButtonModule, NovoLoadingModule, NovoCardModule, NovoCalendarModule, NovoToastModule, NovoTooltipModule, NovoHeaderModule, NovoTabModule, NovoTilesModule, NovoModalModule, NovoQuickNoteModule, NovoRadioModule, NovoDropdownModule, NovoSelectModule, NovoListModule, NovoSwitchModule, NovoSearchBoxModule, NovoDragulaModule, NovoSliderModule, NovoPickerModule, NovoChipsModule, NovoDatePickerModule, NovoDatePickerElement, NovoTimePickerModule, NovoDateTimePickerModule, NovoNovoCKEditorModule, NovoTipWellModule, NovoTableModule, NovoValueModule, NovoTableMode, NovoIconModule, NovoExpansionModule, NovoStepperModule, NovoTableExtrasModule, NovoFormModule, NovoFormExtrasModule, NovoCategoryDropdownModule, NovoMultiPickerModule, UnlessModule, NovoDataTableModule, RemoteDataTableService, StaticDataTableService, NovoDataTable, NovoCommonModule, NovoTableElement, NovoCalendarDateChangeElement, NovoTemplate, NovoToastService, NovoModalService, NovoLabelService, NovoDragulaService, GooglePlacesService, CollectionEvent, ArrayCollection, PagedArrayCollection, NovoModalParams, NovoModalRef, QuickNoteResults, PickerResults, BasePickerResults, EntityPickerResult, EntityPickerResults, DistributionListPickerResults, SkillsSpecialtyPickerResults, ChecklistPickerResults, GroupedMultiPickerResults, BaseRenderer, DateCell, PercentageCell, NovoDropdownCell, FormValidators, FormUtils, Security, OptionsService, NovoTemplateService, NovoFile, BaseControl, ControlFactory, AddressControl, CheckListControl, CheckboxControl, DateControl, DateTimeControl, EditorControl, AceEditorControl, FileControl, NativeSelectControl, PickerControl, TablePickerControl, QuickNoteControl, RadioControl, ReadOnlyControl, SelectControl, TextAreaControl, TextBoxControl, TilesControl, TimeControl, GroupedControl, CustomControl, NovoFormControl, NovoFormGroup, NovoControlGroup, FieldInteractionApi, NovoCheckListElement, OutsideClick, KeyCodes, Deferred, COUNTRIES, getCountries, getStateObjects, getStates, findByCountryCode, findByCountryId, findByCountryName, Helpers, notify, ComponentUtils, AppBridge, AppBridgeHandler, AppBridgeService, DevAppBridge, DevAppBridgeService, NovoElementProviders, PluralPipe, DecodeURIPipe, GroupByPipe, RenderPipe, NovoElementsModule, NovoListElement, NOVO_VALUE_TYPE, NOVO_VALUE_THEME, NovoTable, NovoActivityTable, NovoActivityTableActions, NovoActivityTableCustomFilter, NovoActivityTableEmptyMessage, NovoActivityTableNoResultsMessage, NovoActivityTableCustomHeader, NovoSimpleCell, NovoSimpleCheckboxCell, NovoSimpleCheckboxHeaderCell, NovoSimpleHeaderCell, NovoSimpleCellDef, NovoSimpleHeaderCellDef, NovoSimpleColumnDef, NovoSimpleActionCell, NovoSimpleEmptyHeaderCell, NovoSimpleHeaderRow, NovoSimpleRow, NovoSimpleHeaderRowDef, NovoSimpleRowDef, NovoSimpleCellHeader, NovoSimpleFilterFocus, NovoSortFilter, NovoSelection, NovoSimpleTablePagination, ActivityTableDataSource, RemoteActivityTableService, StaticActivityTableService, ActivityTableRenderers, NovoActivityTableState, NovoSimpleTableModule, getWeekViewEventOffset, getWeekViewHeader, getWeekView, getMonthView, getDayView, getDayViewHourGrid, CalendarEventResponse, NovoAceEditor as ɵm, NovoButtonElement as ɵn, NovoEventTypeLegendElement as ɵx, NovoCalendarAllDayEventElement as ɵbh, NovoCalendarDayEventElement as ɵbf, NovoCalendarDayViewElement as ɵbe, NovoCalendarHourSegmentElement as ɵbg, NovoCalendarMonthDayElement as ɵba, NovoCalendarMonthHeaderElement as ɵz, NovoCalendarMonthViewElement as ɵy, DayOfMonthPipe as ɵbj, EndOfWeekDisplayPipe as ɵbo, HoursPipe as ɵbn, MonthPipe as ɵbk, MonthDayPipe as ɵbl, WeekdayPipe as ɵbi, YearPipe as ɵbm, NovoCalendarWeekEventElement as ɵbd, NovoCalendarWeekHeaderElement as ɵbc, NovoCalendarWeekViewElement as ɵbb, CardActionsElement as ɵv, CardElement as ɵw, NovoCategoryDropdownElement as ɵeq, NovoChipElement as ɵcr, NovoChipsElement as ɵcs, NovoRowChipElement as ɵct, NovoRowChipsElement as ɵcu, NovoCKEditorElement as ɵdb, NovoDataTableCheckboxHeaderCell as ɵfi, NovoDataTableExpandHeaderCell as ɵfk, NovoDataTableCellHeader as ɵez, NovoDataTableHeaderCell as ɵfc, NovoDataTableCell as ɵfd, NovoDataTableCheckboxCell as ɵfh, NovoDataTableExpandCell as ɵfj, NovoDataTableClearButton as ɵfm, NovoDataTableExpandDirective as ɵfl, DataTableInterpolatePipe as ɵet, DateTableCurrencyRendererPipe as ɵey, DateTableDateRendererPipe as ɵeu, DateTableDateTimeRendererPipe as ɵev, DateTableNumberRendererPipe as ɵex, DateTableTimeRendererPipe as ɵew, NovoDataTablePagination as ɵfg, NovoDataTableHeaderRow as ɵfe, NovoDataTableRow as ɵff, NovoDataTableSortFilter as ɵfb, DataTableState as ɵfa, NovoDatePickerInputElement as ɵcv, NovoDateTimePickerElement as ɵcz, NovoDateTimePickerInputElement as ɵda, NovoDragulaElement as ɵcp, NovoDropdownElement as ɵch, NovoItemElement as ɵci, NovoItemHeaderElement$1 as ɵck, NovoListElement$1 as ɵcj, NovoAccordion as ɵea, novoExpansionAnimations as ɵed, NovoExpansionPanel as ɵeb, NovoExpansionPanelActionRow as ɵec, NovoExpansionPanelContent as ɵee, NovoExpansionPanelDescription as ɵeg, NovoExpansionPanelHeader as ɵef, NovoExpansionPanelTitle as ɵeh, NovoAutoSize as ɵdf, NovoControlElement as ɵdg, NovoControlTemplates as ɵdn, NovoDynamicFormElement as ɵdj, NovoFieldsetElement as ɵdi, NovoFieldsetHeaderElement as ɵdh, ControlConfirmModal as ɵdl, ControlPromptModal as ɵdm, NovoFormElement as ɵdk, NovoAddressElement as ɵl, NovoCheckboxElement as ɵdd, NovoFileInputElement as ɵde, NovoHeaderComponent as ɵbt, NovoHeaderSpacer as ɵbq, NovoUtilActionComponent as ɵbs, NovoUtilsComponent as ɵbr, NovoIconComponent as ɵdz, NovoItemAvatarElement as ɵe, NovoItemContentElement as ɵi, NovoItemDateElement as ɵh, NovoItemEndElement as ɵj, NovoItemHeaderElement as ɵg, NovoItemTitleElement as ɵf, NovoListItemElement as ɵd, NovoIsLoadingDirective as ɵs, NovoLoadedDirective as ɵr, NovoLoadingElement as ɵo, NovoSkeletonDirective as ɵq, NovoSpinnerElement as ɵp, NovoModalContainerElement as ɵa, NovoModalElement as ɵb, NovoModalNotificationElement as ɵc, NovoMultiPickerElement as ɵer, NovoOverlayTemplateComponent as ɵcg, NovoOverlayModule as ɵcf, NovoPickerElement as ɵcn, PlacesListComponent as ɵfu, GooglePlacesModule as ɵft, PopOverDirective as ɵfs, NovoPopOverModule as ɵfq, PopOverContent as ɵfr, QuickNoteElement as ɵcc, NovoRadioElement as ɵce, NovoRadioGroup as ɵcd, NovoSearchBoxElement as ɵco, NovoSelectElement as ɵcl, NovoSliderElement as ɵcq, NovoStepHeader as ɵem, NovoStepLabel as ɵen, NovoStepStatus as ɵep, novoStepperAnimations as ɵeo, NovoHorizontalStepper as ɵek, NovoStep as ɵei, NovoStepper as ɵej, NovoVerticalStepper as ɵel, NovoSwitchElement as ɵcm, NovoTableKeepFilterFocus as ɵdr, Pagination as ɵds, RowDetails as ɵdt, NovoTableActionsElement as ɵdq, TableCell as ɵdu, TableFilter as ɵdv, NovoTableFooterElement as ɵdp, NovoTableHeaderElement as ɵdo, ThOrderable as ɵdw, ThSortable as ɵdx, NovoNavContentElement as ɵbz, NovoNavElement as ɵbu, NovoNavHeaderElement as ɵca, NovoNavOutletElement as ɵby, NovoTabButtonElement as ɵbw, NovoTabElement as ɵbv, NovoTabLinkElement as ɵbx, NovoTilesElement as ɵcb, NovoTimePickerElement as ɵcx, NovoTimePickerInputElement as ɵcy, NovoTipWellElement as ɵdc, NovoToastElement as ɵbp, NovoTooltip as ɵu, TooltipDirective as ɵt, Unless as ɵes, EntityList as ɵdy, NovoValueElement as ɵk, DateFormatService as ɵcw, BrowserGlobalRef as ɵfo, GlobalRef as ɵfn, LocalStorageService as ɵfp };

//# sourceMappingURL=novo-elements.js.map